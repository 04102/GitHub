###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:12:17 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUICC_0.c                           #
#    Command line =  C:\DUII\TargetHW\GUI\GUICC_0.c -D DEBUG=1 -D             #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUICC_0.lst                #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUICC_0.o                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUICC_0.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUICC_0.C
     19          Purpose     : Color conversion routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code, 1/2/4/8 bpp color, LUT
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       _Color2Index_0
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          static unsigned _Color2Index_0(LCD_COLOR Color) {
   \                     _Color2Index_0:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
     36            const LCD_COLOR * pPalEntry;
     37            int i;
     38            int NumEntries;
     39            int BestIndex;
     40            U32 Diff;
     41            U32 BestDiff;
     42            
     43            NumEntries = LCD_GetNumColors();
   \   0000000C   ........           BL       LCD_GetNumColors
   \   00000010   0050A0E1           MOV      R5,R0
     44            BestIndex  = 0;
   \   00000014   0060A0E3           MOV      R6,#+0
     45            BestDiff   = 0xffffff;  // Initialize to worst match
   \   00000018   FF74E0E3           MVN      R7,#-16777216
     46            //
     47            // Try to find perfect match#
     48            //
     49            i = 0;
   \   0000001C   0080A0E3           MOV      R8,#+0
     50            pPalEntry = LCD_GetPalette();
   \   00000020   ........           BL       LCD_GetPalette
   \   00000024   0090B0E1           MOVS     R9,R0
     51            if (pPalEntry) {
   \   00000028   1100000A           BEQ      ??_Color2Index_0_0
     52              do {
     53          	    if (Color == (*(pPalEntry + i))) {
   \                     ??_Color2Index_0_1:
   \   0000002C   080199E7           LDR      R0,[R9, +R8, LSL #+2]
   \   00000030   000054E1           CMP      R4,R0
     54          	      return i;
   \   00000034   0800A001           MOVEQ    R0,R8
   \   00000038   0E00000A           BEQ      ??_Color2Index_0_2
     55                }
     56              } while (++i < NumEntries);
   \   0000003C   018088E2           ADD      R8,R8,#+1
   \   00000040   050058E1           CMP      R8,R5
   \   00000044   F8FFFFBA           BLT      ??_Color2Index_0_1
     57              //
     58              // Find best match
     59              //
     60              i = 0;
   \   00000048   0080A0E3           MOV      R8,#+0
     61              do {
     62                Diff = GUI_CalcColorDist(Color, *(pPalEntry + i));
   \                     ??_Color2Index_0_3:
   \   0000004C   001099E5           LDR      R1,[R9, #+0]
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       GUI_CalcColorDist
     63                if (Diff < BestDiff) {
   \   00000058   070050E1           CMP      R0,R7
     64                  BestDiff  = Diff;
     65                  BestIndex = i;
   \   0000005C   0860A031           MOVCC    R6,R8
   \   00000060   0070A031           MOVCC    R7,R0
     66                }
     67              } while (++i < NumEntries);
   \   00000064   018088E2           ADD      R8,R8,#+1
   \   00000068   049089E2           ADD      R9,R9,#+4
   \   0000006C   050058E1           CMP      R8,R5
   \   00000070   F5FFFFBA           BLT      ??_Color2Index_0_3
     68            }
     69            return BestIndex;
   \                     ??_Color2Index_0_0:
   \   00000074   0600A0E1           MOV      R0,R6
   \                     ??_Color2Index_0_2:
   \   00000078   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000007C   F083BDE8           POP      {R4-R9,PC}       ;; return
     70          }
     71          
     72          /*********************************************************************
     73          *
     74          *       _Index2Color_0
     75          */

   \                                 In section .text, align 4, keep-with-next
     76          static LCD_COLOR _Index2Color_0(unsigned Index) {
   \                     _Index2Color_0:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
     77            const LCD_COLOR * pPalEntry;
     78            unsigned NumEntries;
     79            
     80            NumEntries = LCD_GetNumColors();
   \   0000000C   ........           BL       LCD_GetNumColors
   \   00000010   0050A0E1           MOV      R5,R0
     81            pPalEntry  = LCD_GetPalette();
   \   00000014   ........           BL       LCD_GetPalette
     82            if (Index >= NumEntries) {
   \   00000018   050054E1           CMP      R4,R5
     83              return 0;     // Illegal index
   \   0000001C   0000A023           MOVCS    R0,#+0
   \   00000020   0100002A           BCS      ??_Index2Color_0_0
     84            }
     85            if (pPalEntry == NULL) {
   \   00000024   000050E3           CMP      R0,#+0
     86              return 0;
     87            }
     88            return *(pPalEntry + Index);
   \   00000028   04019017           LDRNE    R0,[R0, +R4, LSL #+2]
   \                     ??_Index2Color_0_0:
   \   0000002C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000030   3080BDE8           POP      {R4,R5,PC}       ;; return
     89          }
     90          
     91          /*********************************************************************
     92          *
     93          *       _GetIndexMask_0
     94          */

   \                                 In section .text, align 4, keep-with-next
     95          static unsigned _GetIndexMask_0(void) {
   \                     _GetIndexMask_0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
     96            unsigned NumEntries, Shift;
     97            
     98            NumEntries = LCD_GetNumColors();
   \   00000008   ........           BL       LCD_GetNumColors
     99            if        (NumEntries == 256) {
   \   0000000C   400F50E3           CMP      R0,#+256
    100              Shift = 8;
   \   00000010   0800A003           MOVEQ    R0,#+8
   \   00000014   1400000A           BEQ      ??_GetIndexMask_0_0
    101            } else if (NumEntries >= 128) {
   \   00000018   800050E3           CMP      R0,#+128
    102              Shift = 7;
   \   0000001C   0700A023           MOVCS    R0,#+7
   \   00000020   1100002A           BCS      ??_GetIndexMask_0_0
    103            } else if (NumEntries >= 64) {
   \   00000024   400050E3           CMP      R0,#+64
    104              Shift = 6;
   \   00000028   0600A023           MOVCS    R0,#+6
   \   0000002C   0E00002A           BCS      ??_GetIndexMask_0_0
    105            } else if (NumEntries >= 32) {
   \   00000030   200050E3           CMP      R0,#+32
    106              Shift = 5;
   \   00000034   0500A023           MOVCS    R0,#+5
   \   00000038   0B00002A           BCS      ??_GetIndexMask_0_0
    107            } else if (NumEntries >= 16) {
   \   0000003C   100050E3           CMP      R0,#+16
    108              Shift = 4;
   \   00000040   0400A023           MOVCS    R0,#+4
   \   00000044   0800002A           BCS      ??_GetIndexMask_0_0
    109            } else if (NumEntries >= 8) {
   \   00000048   080050E3           CMP      R0,#+8
    110              Shift = 3;
   \   0000004C   0300A023           MOVCS    R0,#+3
   \   00000050   0500002A           BCS      ??_GetIndexMask_0_0
    111            } else if (NumEntries >= 4) {
   \   00000054   040050E3           CMP      R0,#+4
    112              Shift = 2;
   \   00000058   0200A023           MOVCS    R0,#+2
   \   0000005C   0200002A           BCS      ??_GetIndexMask_0_0
    113            } else if (NumEntries >= 2) {
   \   00000060   020050E3           CMP      R0,#+2
    114              Shift = 1;
   \   00000064   0100A023           MOVCS    R0,#+1
    115            } else {
    116              Shift = 0;
   \   00000068   0000A033           MOVCC    R0,#+0
    117            }
    118            return (1 << Shift) - 1;
   \                     ??_GetIndexMask_0_0:
   \   0000006C   0110A0E3           MOV      R1,#+1
   \   00000070   002061E2           RSB      R2,R1,#+0
   \   00000074   110082E0           ADD      R0,R2,R1, LSL R0
   \   00000078   04D08DE2           ADD      SP,SP,#+4
   \   0000007C   0080BDE8           POP      {PC}             ;; return
    119          }
    120          
    121          /*********************************************************************
    122          *
    123          *       Public data
    124          *
    125          **********************************************************************
    126          */
    127          /*********************************************************************
    128          *
    129          *       LCD_API_ColorConv_0
    130          */

   \                                 In section .rodata, align 4, keep-with-next
    131          const LCD_API_COLOR_CONV LCD_API_ColorConv_0 = {
   \                     LCD_API_ColorConv_0:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Color2Index_0, _Index2Color_0, _GetIndexMask_0
   \              ............
    132            _Color2Index_0,
    133            _Index2Color_0,
    134            _GetIndexMask_0
    135          };
    136          
    137          /*********************************************************************
    138          *
    139          *       Public code
    140          *
    141          **********************************************************************
    142          */
    143          /*********************************************************************
    144          *
    145          *       LCD_SetLUTEx
    146          */

   \                                 In section .text, align 4, keep-with-next
    147          void LCD_SetLUTEx(int LayerIndex, const LCD_PHYSPALETTE * pPalette) {
   \                     LCD_SetLUTEx:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    148            int i;
    149          
    150            for (i = 0; i < pPalette->NumEntries; i++) {
   \   0000000C   000095E5           LDR      R0,[R5, #+0]
   \   00000010   0060A0E3           MOV      R6,#+0
   \   00000014   010050E3           CMP      R0,#+1
   \   00000018   080000BA           BLT      ??LCD_SetLUTEx_0
    151              LCD_SetLUTEntryEx(LayerIndex, i, *(pPalette->pPalEntries + i));
   \                     ??LCD_SetLUTEx_1:
   \   0000001C   040095E5           LDR      R0,[R5, #+4]
   \   00000020   FF1006E2           AND      R1,R6,#0xFF
   \   00000024   062190E7           LDR      R2,[R0, +R6, LSL #+2]
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       LCD_SetLUTEntryEx
    152            }
   \   00000030   000095E5           LDR      R0,[R5, #+0]
   \   00000034   016086E2           ADD      R6,R6,#+1
   \   00000038   000056E1           CMP      R6,R0
   \   0000003C   F6FFFFBA           BLT      ??LCD_SetLUTEx_1
    153          }
   \                     ??LCD_SetLUTEx_0:
   \   00000040   7080BDE8           POP      {R4-R6,PC}       ;; return
    154          
    155          /*********************************************************************
    156          *
    157          *       LCD_SetLUT
    158          */

   \                                 In section .text, align 4, keep-with-next
    159          void LCD_SetLUT(const LCD_PHYSPALETTE * pPalette) {
   \                     LCD_SetLUT:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    160            LCD_SetLUTEx(GUI_Context.SelLayer, pPalette);
   \   00000008   ........           LDR      R0,??DataTable1
   \   0000000C   0060A0E3           MOV      R6,#+0
   \   00000010   1150D0E5           LDRB     R5,[R0, #+17]
   \   00000014   000094E5           LDR      R0,[R4, #+0]
   \   00000018   010050E3           CMP      R0,#+1
   \   0000001C   000000AA           BGE      ??LCD_SetLUT_0
    161          }
   \   00000020   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??LCD_SetLUT_0:
   \   00000024   040094E5           LDR      R0,[R4, #+4]
   \   00000028   FF1006E2           AND      R1,R6,#0xFF
   \   0000002C   062190E7           LDR      R2,[R0, +R6, LSL #+2]
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           BL       LCD_SetLUTEntryEx
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   016086E2           ADD      R6,R6,#+1
   \   00000040   000056E1           CMP      R6,R0
   \   00000044   F6FFFFBA           BLT      ??LCD_SetLUT_0
   \   00000048   7080BDE8           POP      {R4-R6,PC}

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context
    162          
    163          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     LCD_SetLUT          16
     LCD_SetLUTEx        16
     _Color2Index_0      32
     _GetIndexMask_0      8
     _Index2Color_0      16


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     _Color2Index_0       128
     _Index2Color_0        52
     _GetIndexMask_0      128
     LCD_API_ColorConv_0   12
     LCD_SetLUTEx          68
     LCD_SetLUT            76
     ??DataTable1           4

 
  12 bytes in section .rodata
 456 bytes in section .text
 
 456 bytes of CODE  memory
  12 bytes of CONST memory

Errors: none
Warnings: none
