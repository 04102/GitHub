###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:12 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDEV_Perspective.c                #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDEV_Perspective.c -D DEBUG=1 -D  #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUIDEV_Perspective.lst     #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUIDEV_Perspective.o        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDEV_Perspective.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDEV_Perspective.c
     19          Purpose     : Implementation of perspectively output
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          #include <math.h>
     25          
     26          #include "GUI_Private.h"
     27          
     28          #if GUI_SUPPORT_MEMDEV
     29          
     30          /*********************************************************************
     31          *
     32          *       Private code
     33          *
     34          **********************************************************************
     35          */
     36          /*********************************************************************
     37          *
     38          *       _XY2PTR
     39          */
     40          static U32 * _XY2PTR(GUI_MEMDEV * pDev, int x, int y) {
     41            U8 * pData = (U8 *)(pDev + 1);
     42            #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
     43              if ((x >= pDev->x0 + pDev->XSize) || 
     44                  (x < pDev->x0) || 
     45                  (y >= pDev->y0 + pDev->YSize) || 
     46                  (y < pDev->y0)) {
     47                GUI_DEBUG_ERROROUT2("_XY2PTR: parameters out of bounds", x, y);
     48              }
     49            #endif
     50            pData += (GUI_ALLOC_DATATYPE_U)(y - pDev->y0) * (GUI_ALLOC_DATATYPE_U)pDev->BytesPerLine;
     51            return ((U32 *)pData) + x - pDev->x0;
     52          }
     53          
     54          /*********************************************************************
     55          *
     56          *       _GetPixel
     57          */
     58          static U32 _GetPixel(GUI_MEMDEV * pDev, int x, int y) {
     59            U32 * pData;
     60            U32 Index;
     61            pData = _XY2PTR(pDev, x, y);
     62            Index = *pData;
     63            return Index;
     64          }
     65          
     66          /*********************************************************************
     67          *
     68          *       _GetX
     69          *
     70          * Purpose:
     71          *   The function returns the x-value which is required to get the data
     72          *   from the memory device.
     73          */

   \                                 In section .text, align 4, keep-with-next
     74          static int _GetX(int h0, int h1, int b, int x0) {
   \                     _GetX:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0CD04DE2           SUB      SP,SP,#+12
   \   00000010   0240A0E1           MOV      R4,R2
   \   00000014   0370A0E1           MOV      R7,R3
     75            int sx, sy, x, MirrorX;
     76            float m0, m1, c0, c1;
     77            if (h0 == h1) {
   \   00000018   060055E1           CMP      R5,R6
   \   0000001C   0100001A           BNE      ??_GetX_0
     78              return x0;
   \                     ??_GetX_1:
   \   00000020   0700A0E1           MOV      R0,R7
   \   00000024   450000EA           B        ??_GetX_2
     79            }
     80            if (h0 < h1) {
   \                     ??_GetX_0:
   \   00000028   030000AA           BGE      ??_GetX_3
     81              int temp;
     82              MirrorX = 1;
     83              temp = h0;
     84              h0 = h1;
   \   0000002C   0650A0E1           MOV      R5,R6
   \   00000030   01A0A0E3           MOV      R10,#+1
     85              h1 = temp;
   \   00000034   0060A0E1           MOV      R6,R0
   \   00000038   010000EA           B        ??_GetX_4
     86            } else {
     87              MirrorX = 0;
   \                     ??_GetX_3:
   \   0000003C   00A0A0E3           MOV      R10,#+0
     88              x0 = b - x0;
   \   00000040   077044E0           SUB      R7,R4,R7
     89            }
     90            sx = (b * h0) / (h0 - h1);
   \                     ??_GetX_4:
   \   00000044   069045E0           SUB      R9,R5,R6
   \   00000048   950400E0           MUL      R0,R5,R4
   \   0000004C   0910A0E1           MOV      R1,R9
   \   00000050   ........           BL       __aeabi_idiv
   \   00000054   0080A0E1           MOV      R8,R0
     91            c0 = sqrt((float)((h0 - h1) * (h0 - h1) + b * b));
   \   00000058   940400E0           MUL      R0,R4,R4
   \   0000005C   990920E0           MLA      R0,R9,R9,R0
   \   00000060   ........           BL       __aeabi_i2f
   \   00000064   ........           BL       __aeabi_f2d
   \   00000068   ........           BL       sqrt
   \   0000006C   03008DE8           STM      SP,{R0,R1}
   \   00000070   F000CDE1           STRD     R0,R1,[SP, #+0]
     92            c1 = sqrt((float)((sx - b) * (sx - b) + h1 * h1));
     93            sy = (int)(b * c1 / c0);
     94            m0 = (float)(sy + h0 + x0) / sx;
   \   00000074   0800A0E1           MOV      R0,R8
   \   00000078   ........           BL       __aeabi_i2f
   \   0000007C   0090A0E1           MOV      R9,R0
   \   00000080   04B048E0           SUB      R11,R8,R4
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   ........           BL       __aeabi_i2f
   \   0000008C   0080A0E1           MOV      R8,R0
   \   00000090   960600E0           MUL      R0,R6,R6
   \   00000094   9B0B20E0           MLA      R0,R11,R11,R0
   \   00000098   ........           BL       __aeabi_i2f
   \   0000009C   ........           BL       __aeabi_f2d
   \   000000A0   ........           BL       sqrt
   \   000000A4   ........           BL       __aeabi_d2f
   \   000000A8   0810A0E1           MOV      R1,R8
   \   000000AC   ........           BL       __aeabi_fmul
   \   000000B0   0060A0E1           MOV      R6,R0
   \   000000B4   D000CDE1           LDRD     R0,R1,[SP, #+0]
   \   000000B8   ........           BL       __aeabi_d2f
   \   000000BC   0010A0E1           MOV      R1,R0
   \   000000C0   0600A0E1           MOV      R0,R6
   \   000000C4   ........           BL       __aeabi_fdiv
   \   000000C8   ........           BL       __aeabi_f2iz
   \   000000CC   000085E0           ADD      R0,R5,R0
   \   000000D0   000087E0           ADD      R0,R7,R0
   \   000000D4   ........           BL       __aeabi_i2f
   \   000000D8   0910A0E1           MOV      R1,R9
   \   000000DC   ........           BL       __aeabi_fdiv
   \   000000E0   0060A0E1           MOV      R6,R0
     95            m1 = (float)h0 / sx;
   \   000000E4   0500A0E1           MOV      R0,R5
   \   000000E8   ........           BL       __aeabi_i2f
   \   000000EC   0910A0E1           MOV      R1,R9
   \   000000F0   ........           BL       __aeabi_fdiv
   \   000000F4   0050A0E1           MOV      R5,R0
     96            if (m0 == m1) {
   \   000000F8   0600A0E1           MOV      R0,R6
   \   000000FC   0510A0E1           MOV      R1,R5
   \   00000100   ........           BL       __aeabi_cfcmpeq
   \   00000104   C5FFFF0A           BEQ      ??_GetX_1
     97              return x0;
     98            }
     99            x = (int)((float)x0 / (m0 - m1));
   \   00000108   0700A0E1           MOV      R0,R7
   \   0000010C   ........           BL       __aeabi_i2f
   \   00000110   0070A0E1           MOV      R7,R0
   \   00000114   0600A0E1           MOV      R0,R6
   \   00000118   0510A0E1           MOV      R1,R5
   \   0000011C   ........           BL       __aeabi_fsub
   \   00000120   0010A0E1           MOV      R1,R0
   \   00000124   0700A0E1           MOV      R0,R7
   \   00000128   ........           BL       __aeabi_fdiv
   \   0000012C   ........           BL       __aeabi_f2iz
    100            if (MirrorX == 0) {
   \   00000130   00005AE3           CMP      R10,#+0
    101              x = b - x;
   \   00000134   00004400           SUBEQ    R0,R4,R0
    102            }
    103            if (x >= b) {
   \   00000138   040050E1           CMP      R0,R4
    104              x = b - 1;
   \   0000013C   010044A2           SUBGE    R0,R4,#+1
    105            }
    106            return x;
   \                     ??_GetX_2:
   \   00000140   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000144   F08FBDE8           POP      {R4-R11,PC}      ;; return
    107          }
    108          
    109          /*********************************************************************
    110          *
    111          *       _DrawColumnScaled
    112          */

   \                                 In section .text, align 4, keep-with-next
    113          static void _DrawColumnScaled(GUI_MEMDEV * pDev, int x, int x0, int y0, int yOff, int Num, int Denom) {
   \                     _DrawColumnScaled:
   \   00000000   FB4F2DE9           PUSH     {R0,R1,R3-R11,LR}
    114            tLCDDEV_Color2Index * pfColor2Index;
    115            int SkipCnt, NumReps, y, i;
    116            unsigned Compare, Current;
    117            pfColor2Index = GUI_GetpfColor2IndexEx(GUI_Context.SelLayer);
   \   00000004   ........           LDR      R0,??DataTable1
   \   00000008   08D04DE2           SUB      SP,SP,#+8
   \   0000000C   0240A0E1           MOV      R4,R2
   \   00000010   1100D0E5           LDRB     R0,[R0, #+17]
   \   00000014   ........           BL       GUI_GetpfColor2IndexEx
   \   00000018   04008DE5           STR      R0,[SP, #+4]
    118            Current = Denom / 2;
   \   0000001C   40009DE5           LDR      R0,[SP, #+64]
   \   00000020   0010A0E1           MOV      R1,R0
   \   00000024   A00F81E0           ADD      R0,R1,R0, LSR #+31
   \   00000028   C050A0E1           ASR      R5,R0,#+1
    119            Compare = Denom;
   \   0000002C   0170A0E1           MOV      R7,R1
    120            y = 0;
   \   00000030   0000A0E3           MOV      R0,#+0
    121            /*
    122             * Iterate over the original pixels
    123             */
    124            do {
    125              SkipCnt = 0;
   \                     ??_DrawColumnScaled_0:
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   000000EA           B        ??_DrawColumnScaled_1
    126              /*
    127               * Find out how many source lines can be skipped
    128               */
    129              while (Current += Num, Current < Compare) {
    130                SkipCnt++;
   \                     ??_DrawColumnScaled_2:
   \   0000003C   011081E2           ADD      R1,R1,#+1
    131              }
   \                     ??_DrawColumnScaled_1:
   \   00000040   3C209DE5           LDR      R2,[SP, #+60]
   \   00000044   055082E0           ADD      R5,R2,R5
   \   00000048   070055E1           CMP      R5,R7
   \   0000004C   FAFFFF3A           BCC      ??_DrawColumnScaled_2
    132              /*
    133               * Skip the number of lines that are irrelevant
    134               */
    135              y += SkipCnt;
   \   00000050   000081E0           ADD      R0,R1,R0
   \   00000054   00008DE5           STR      R0,[SP, #+0]
    136              /*
    137               * Find out how many times this pixel needs to be repeated
    138               */
    139              NumReps = 1;
   \   00000058   0160A0E3           MOV      R6,#+1
   \   0000005C   000000EA           B        ??_DrawColumnScaled_3
    140              while (Compare += Denom, Current >= Compare) {
    141                NumReps++;
   \                     ??_DrawColumnScaled_4:
   \   00000060   016086E2           ADD      R6,R6,#+1
    142              }
   \                     ??_DrawColumnScaled_3:
   \   00000064   40009DE5           LDR      R0,[SP, #+64]
   \   00000068   077080E0           ADD      R7,R0,R7
   \   0000006C   070055E1           CMP      R5,R7
   \   00000070   FAFFFF2A           BCS      ??_DrawColumnScaled_4
    143              /*
    144               * Draw the pixel
    145               */
    146              if (y < pDev->YSize) {
   \   00000074   08109DE5           LDR      R1,[SP, #+8]
   \   00000078   00009DE5           LDR      R0,[SP, #+0]
   \   0000007C   FA10D1E1           LDRSH    R1,[R1, #+10]
   \   00000080   010050E1           CMP      R0,R1
   \   00000084   560000AA           BGE      ??_DrawColumnScaled_5
    147                LCD_COLOR Color;
    148                U8 Alpha;
    149                U32 Index;
    150                Color = _GetPixel(pDev, x, y);
   \   00000088   08209DE5           LDR      R2,[SP, #+8]
   \   0000008C   00109DE5           LDR      R1,[SP, #+0]
   \   00000090   F620D2E1           LDRSH    R2,[R2, #+6]
   \   00000094   08009DE5           LDR      R0,[SP, #+8]
   \   00000098   0C309DE5           LDR      R3,[SP, #+12]
   \   0000009C   021041E0           SUB      R1,R1,R2
   \   000000A0   08209DE5           LDR      R2,[SP, #+8]
   \   000000A4   08C09DE5           LDR      R12,[SP, #+8]
   \   000000A8   F400D0E1           LDRSH    R0,[R0, #+4]
   \   000000AC   0C2092E5           LDR      R2,[R2, #+12]
   \   000000B0   03318CE0           ADD      R3,R12,R3, LSL #+2
   \   000000B4   923121E0           MLA      R1,R2,R1,R3
   \   000000B8   0001A0E1           LSL      R0,R0,#+2
   \   000000BC   000060E2           RSB      R0,R0,#+0
   \   000000C0   010080E0           ADD      R0,R0,R1
   \   000000C4   188090E5           LDR      R8,[R0, #+24]
    151                Index = pfColor2Index(Color);
   \   000000C8   04109DE5           LDR      R1,[SP, #+4]
   \   000000CC   0800A0E1           MOV      R0,R8
   \   000000D0   31FF2FE1           BLX      R1
   \   000000D4   0090A0E1           MOV      R9,R0
    152                Alpha = Color >> 24;
   \   000000D8   280CA0E1           LSR      R0,R8,#+24
    153                if (Alpha < 255) {
   \   000000DC   FF0050E3           CMP      R0,#+255
   \   000000E0   3F0000AA           BGE      ??_DrawColumnScaled_5
    154                  if (Alpha) {
   \   000000E4   000050E3           CMP      R0,#+0
   \   000000E8   2100000A           BEQ      ??_DrawColumnScaled_6
    155                    for (i = NumReps; i--;) {
   \   000000EC   000056E3           CMP      R6,#+0
   \   000000F0   3B00000A           BEQ      ??_DrawColumnScaled_5
   \   000000F4   10109DE5           LDR      R1,[SP, #+16]
   \   000000F8   38209DE5           LDR      R2,[SP, #+56]
   \   000000FC   FF9060E2           RSB      R9,R0,#+255
   \   00000100   011082E0           ADD      R1,R2,R1
   \   00000104   011086E0           ADD      R1,R6,R1
   \   00000108   01B041E2           SUB      R11,R1,#+1
   \   0000010C   010016E3           TST      R6,#0x1
   \   00000110   0600000A           BEQ      ??_DrawColumnScaled_7
    156                      GUI__SetPixelAlpha(x0, y0 + yOff + i, 255 - Alpha, Color);
   \   00000114   FF2060E2           RSB      R2,R0,#+255
   \   00000118   0830A0E1           MOV      R3,R8
   \   0000011C   FF2002E2           AND      R2,R2,#0xFF
   \   00000120   0B10A0E1           MOV      R1,R11
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           BL       GUI__SetPixelAlpha
   \   0000012C   01B04BE2           SUB      R11,R11,#+1
   \                     ??_DrawColumnScaled_7:
   \   00000130   A6A0B0E1           LSRS     R10,R6,#+1
   \   00000134   2A00000A           BEQ      ??_DrawColumnScaled_5
   \                     ??_DrawColumnScaled_8:
   \   00000138   0830A0E1           MOV      R3,R8
   \   0000013C   FF2009E2           AND      R2,R9,#0xFF
   \   00000140   0B10A0E1           MOV      R1,R11
   \   00000144   0400A0E1           MOV      R0,R4
   \   00000148   ........           BL       GUI__SetPixelAlpha
   \   0000014C   0830A0E1           MOV      R3,R8
   \   00000150   FF2009E2           AND      R2,R9,#0xFF
   \   00000154   01104BE2           SUB      R1,R11,#+1
   \   00000158   0400A0E1           MOV      R0,R4
   \   0000015C   ........           BL       GUI__SetPixelAlpha
   \   00000160   01A04AE2           SUB      R10,R10,#+1
   \   00000164   02B04BE2           SUB      R11,R11,#+2
   \   00000168   00005AE3           CMP      R10,#+0
   \   0000016C   F1FFFF1A           BNE      ??_DrawColumnScaled_8
   \   00000170   1B0000EA           B        ??_DrawColumnScaled_5
    157                    }
    158                  } else {
    159                    for (i = NumReps; i--;) {
   \                     ??_DrawColumnScaled_6:
   \   00000174   000056E3           CMP      R6,#+0
   \   00000178   1900000A           BEQ      ??_DrawColumnScaled_5
   \   0000017C   10009DE5           LDR      R0,[SP, #+16]
   \   00000180   38109DE5           LDR      R1,[SP, #+56]
   \   00000184   010016E3           TST      R6,#0x1
   \   00000188   000081E0           ADD      R0,R1,R0
   \   0000018C   000086E0           ADD      R0,R6,R0
   \   00000190   018040E2           SUB      R8,R0,#+1
   \   00000194   0400000A           BEQ      ??_DrawColumnScaled_9
    160                      LCD_SetPixelIndex(x0, y0 + yOff + i, Index);
   \   00000198   0920A0E1           MOV      R2,R9
   \   0000019C   0810A0E1           MOV      R1,R8
   \   000001A0   0400A0E1           MOV      R0,R4
   \   000001A4   ........           BL       LCD_SetPixelIndex
   \   000001A8   018048E2           SUB      R8,R8,#+1
   \                     ??_DrawColumnScaled_9:
   \   000001AC   A6A0B0E1           LSRS     R10,R6,#+1
   \   000001B0   0B00000A           BEQ      ??_DrawColumnScaled_5
   \                     ??_DrawColumnScaled_10:
   \   000001B4   0920A0E1           MOV      R2,R9
   \   000001B8   0810A0E1           MOV      R1,R8
   \   000001BC   0400A0E1           MOV      R0,R4
   \   000001C0   ........           BL       LCD_SetPixelIndex
   \   000001C4   0920A0E1           MOV      R2,R9
   \   000001C8   011048E2           SUB      R1,R8,#+1
   \   000001CC   0400A0E1           MOV      R0,R4
   \   000001D0   ........           BL       LCD_SetPixelIndex
   \   000001D4   01A04AE2           SUB      R10,R10,#+1
   \   000001D8   028048E2           SUB      R8,R8,#+2
   \   000001DC   00005AE3           CMP      R10,#+0
   \   000001E0   F3FFFF1A           BNE      ??_DrawColumnScaled_10
    161                    }
    162                  }
    163                }
    164              }
    165              y0 += NumReps;
   \                     ??_DrawColumnScaled_5:
   \   000001E4   10109DE5           LDR      R1,[SP, #+16]
    166            } while (++y < pDev->YSize);
   \   000001E8   00009DE5           LDR      R0,[SP, #+0]
   \   000001EC   011086E0           ADD      R1,R6,R1
   \   000001F0   10108DE5           STR      R1,[SP, #+16]
   \   000001F4   08109DE5           LDR      R1,[SP, #+8]
   \   000001F8   010080E2           ADD      R0,R0,#+1
   \   000001FC   FA10D1E1           LDRSH    R1,[R1, #+10]
   \   00000200   010050E1           CMP      R0,R1
   \   00000204   8AFFFFBA           BLT      ??_DrawColumnScaled_0
    167          }
   \   00000208   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   0000020C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    168          
    169          /*********************************************************************
    170          *
    171          *       _DrawMemdevPerspective
    172          */

   \                                 In section .text, align 4, keep-with-next
    173          static void _DrawMemdevPerspective(GUI_MEMDEV * pDev, int x0, int y0, int h0, int h1, int dx, int dy) {
   \                     _DrawMemdevPerspective:
   \   00000000   F64F2DE9           PUSH     {R1,R2,R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   34D04DE2           SUB      SP,SP,#+52
    174            int SkipCnt, NumReps, x, xSize, xStart;
    175            int Num, yOff0, yOff1, xx, i;
    176            unsigned Compare, Current;
    177            xSize = pDev->XSize;
   \   0000000C   F800D4E1           LDRSH    R0,[R4, #+8]
    178            xStart = x0;
   \   00000010   34109DE5           LDR      R1,[SP, #+52]
   \   00000014   18008DE5           STR      R0,[SP, #+24]
   \   00000018   30108DE5           STR      R1,[SP, #+48]
    179            Current = xSize / 2;
   \   0000001C   18009DE5           LDR      R0,[SP, #+24]
    180            Compare = xSize;
   \   00000020   18109DE5           LDR      R1,[SP, #+24]
   \   00000024   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000028   20108DE5           STR      R1,[SP, #+32]
   \   0000002C   C000A0E1           ASR      R0,R0,#+1
    181            x = 0;
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   0350A0E1           MOV      R5,R3
   \   00000038   60609DE5           LDR      R6,[SP, #+96]
   \   0000003C   64709DE5           LDR      R7,[SP, #+100]
   \   00000040   24008DE5           STR      R0,[SP, #+36]
   \   00000044   14108DE5           STR      R1,[SP, #+20]
    182            /*
    183             * Iterate over the original pixels
    184             */
    185            do {
    186              SkipCnt = 0;
   \                     ??_DrawMemdevPerspective_0:
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   000000EA           B        ??_DrawMemdevPerspective_1
    187              /*
    188               * Find out how many source columns can be skipped
    189               */
    190              while (Current += dx, Current < Compare) {
    191                SkipCnt++;
   \                     ??_DrawMemdevPerspective_2:
   \   00000050   010080E2           ADD      R0,R0,#+1
    192              }
   \                     ??_DrawMemdevPerspective_1:
   \   00000054   24109DE5           LDR      R1,[SP, #+36]
   \   00000058   20209DE5           LDR      R2,[SP, #+32]
   \   0000005C   011087E0           ADD      R1,R7,R1
   \   00000060   24108DE5           STR      R1,[SP, #+36]
   \   00000064   020051E1           CMP      R1,R2
   \   00000068   F8FFFF3A           BCC      ??_DrawMemdevPerspective_2
    193              /*
    194               * Skip the number of lines that are irrelevant
    195               */
    196              x += SkipCnt + 1;
   \   0000006C   14109DE5           LDR      R1,[SP, #+20]
   \   00000070   010080E2           ADD      R0,R0,#+1
   \   00000074   010080E0           ADD      R0,R0,R1
    197              /*
    198               * Find out how many times this line needs to be repeated
    199               */
    200              NumReps = 1;
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   14008DE5           STR      R0,[SP, #+20]
   \   00000080   10108DE5           STR      R1,[SP, #+16]
   \   00000084   010000EA           B        ??_DrawMemdevPerspective_3
    201              while (Compare += xSize, Current >= Compare) {
    202                NumReps++;
   \                     ??_DrawMemdevPerspective_4:
   \   00000088   010080E2           ADD      R0,R0,#+1
   \   0000008C   10008DE5           STR      R0,[SP, #+16]
    203              }
   \                     ??_DrawMemdevPerspective_3:
   \   00000090   20009DE5           LDR      R0,[SP, #+32]
   \   00000094   18109DE5           LDR      R1,[SP, #+24]
   \   00000098   000081E0           ADD      R0,R1,R0
   \   0000009C   20008DE5           STR      R0,[SP, #+32]
   \   000000A0   24009DE5           LDR      R0,[SP, #+36]
   \   000000A4   20109DE5           LDR      R1,[SP, #+32]
   \   000000A8   010050E1           CMP      R0,R1
   \   000000AC   10009DE5           LDR      R0,[SP, #+16]
   \   000000B0   F4FFFF2A           BCS      ??_DrawMemdevPerspective_4
    204              /*
    205               * Draw the column(s)
    206               */
    207              for (i = 0; i < NumReps; i++) {
   \   000000B4   010050E3           CMP      R0,#+1
   \   000000B8   660000BA           BLT      ??_DrawMemdevPerspective_5
   \   000000BC   34809DE5           LDR      R8,[SP, #+52]
   \   000000C0   30109DE5           LDR      R1,[SP, #+48]
   \   000000C4   10909DE5           LDR      R9,[SP, #+16]
   \   000000C8   010048E0           SUB      R0,R8,R1
   \   000000CC   1C008DE5           STR      R0,[SP, #+28]
   \   000000D0   68009DE5           LDR      R0,[SP, #+104]
   \   000000D4   1C109DE5           LDR      R1,[SP, #+28]
   \   000000D8   910000E0           MUL      R0,R1,R0
   \   000000DC   0710A0E1           MOV      R1,R7
   \   000000E0   C70080E0           ADD      R0,R0,R7, ASR #+1
   \   000000E4   ........           BL       __aeabi_idiv
   \   000000E8   2C008DE5           STR      R0,[SP, #+44]
   \   000000EC   14009DE5           LDR      R0,[SP, #+20]
   \   000000F0   010019E3           TST      R9,#0x1
   \   000000F4   010040E2           SUB      R0,R0,#+1
   \   000000F8   28008DE5           STR      R0,[SP, #+40]
   \   000000FC   2300000A           BEQ      ??_DrawMemdevPerspective_6
    208                yOff0 = (dy * (x0 - xStart) + (dx >> 1)) / dx;
   \   00000100   68009DE5           LDR      R0,[SP, #+104]
   \   00000104   1C109DE5           LDR      R1,[SP, #+28]
   \   00000108   910000E0           MUL      R0,R1,R0
   \   0000010C   0710A0E1           MOV      R1,R7
   \   00000110   C70080E0           ADD      R0,R0,R7, ASR #+1
   \   00000114   ........           BL       __aeabi_idiv
   \   00000118   00A0A0E1           MOV      R10,R0
    209                yOff1 = ((h0 - h1 - dy) * (x0 - xStart) + (dx >> 1)) / dx;
    210                Num = h0 - yOff0 - yOff1;
    211                xx = _GetX(h0, h1, pDev->XSize, x - 1);
   \   0000011C   14009DE5           LDR      R0,[SP, #+20]
   \   00000120   F820D4E1           LDRSH    R2,[R4, #+8]
   \   00000124   013040E2           SUB      R3,R0,#+1
   \   00000128   0610A0E1           MOV      R1,R6
   \   0000012C   0500A0E1           MOV      R0,R5
   \   00000130   ........           BL       _GetX
   \   00000134   00B0A0E1           MOV      R11,R0
    212                _DrawColumnScaled(pDev, xx, x0 + i, y0, yOff0, Num, pDev->YSize);
   \   00000138   FA00D4E1           LDRSH    R0,[R4, #+10]
   \   0000013C   68109DE5           LDR      R1,[SP, #+104]
   \   00000140   00A08DE5           STR      R10,[SP, #+0]
   \   00000144   08008DE5           STR      R0,[SP, #+8]
   \   00000148   0A0045E0           SUB      R0,R5,R10
   \   0000014C   0C008DE5           STR      R0,[SP, #+12]
   \   00000150   060045E0           SUB      R0,R5,R6
   \   00000154   010040E0           SUB      R0,R0,R1
   \   00000158   1C109DE5           LDR      R1,[SP, #+28]
   \   0000015C   910000E0           MUL      R0,R1,R0
   \   00000160   0710A0E1           MOV      R1,R7
   \   00000164   C70080E0           ADD      R0,R0,R7, ASR #+1
   \   00000168   ........           BL       __aeabi_idiv
   \   0000016C   0C109DE5           LDR      R1,[SP, #+12]
   \   00000170   38309DE5           LDR      R3,[SP, #+56]
   \   00000174   000041E0           SUB      R0,R1,R0
   \   00000178   04008DE5           STR      R0,[SP, #+4]
   \   0000017C   0820A0E1           MOV      R2,R8
   \   00000180   0B10A0E1           MOV      R1,R11
   \   00000184   0400A0E1           MOV      R0,R4
   \   00000188   ........           BL       _DrawColumnScaled
   \   0000018C   018088E2           ADD      R8,R8,#+1
   \                     ??_DrawMemdevPerspective_6:
   \   00000190   A900A0E1           LSR      R0,R9,#+1
   \   00000194   0C008DE5           STR      R0,[SP, #+12]
   \   00000198   000050E3           CMP      R0,#+0
   \   0000019C   2D00000A           BEQ      ??_DrawMemdevPerspective_5
   \                     ??_DrawMemdevPerspective_7:
   \   000001A0   2CA09DE5           LDR      R10,[SP, #+44]
   \   000001A4   28309DE5           LDR      R3,[SP, #+40]
   \   000001A8   F820D4E1           LDRSH    R2,[R4, #+8]
   \   000001AC   0610A0E1           MOV      R1,R6
   \   000001B0   0500A0E1           MOV      R0,R5
   \   000001B4   ........           BL       _GetX
   \   000001B8   00B0A0E1           MOV      R11,R0
   \   000001BC   68109DE5           LDR      R1,[SP, #+104]
   \   000001C0   060045E0           SUB      R0,R5,R6
   \   000001C4   010040E0           SUB      R0,R0,R1
   \   000001C8   1C109DE5           LDR      R1,[SP, #+28]
   \   000001CC   0A9045E0           SUB      R9,R5,R10
   \   000001D0   910000E0           MUL      R0,R1,R0
   \   000001D4   0710A0E1           MOV      R1,R7
   \   000001D8   C70080E0           ADD      R0,R0,R7, ASR #+1
   \   000001DC   ........           BL       __aeabi_idiv
   \   000001E0   009049E0           SUB      R9,R9,R0
   \   000001E4   FA00D4E1           LDRSH    R0,[R4, #+10]
   \   000001E8   04908DE5           STR      R9,[SP, #+4]
   \   000001EC   00A08DE5           STR      R10,[SP, #+0]
   \   000001F0   08008DE5           STR      R0,[SP, #+8]
   \   000001F4   38309DE5           LDR      R3,[SP, #+56]
   \   000001F8   0820A0E1           MOV      R2,R8
   \   000001FC   0B10A0E1           MOV      R1,R11
   \   00000200   0400A0E1           MOV      R0,R4
   \   00000204   ........           BL       _DrawColumnScaled
   \   00000208   28309DE5           LDR      R3,[SP, #+40]
   \   0000020C   F820D4E1           LDRSH    R2,[R4, #+8]
   \   00000210   0610A0E1           MOV      R1,R6
   \   00000214   0500A0E1           MOV      R0,R5
   \   00000218   ........           BL       _GetX
   \   0000021C   0010A0E1           MOV      R1,R0
   \   00000220   FA00D4E1           LDRSH    R0,[R4, #+10]
   \   00000224   04908DE5           STR      R9,[SP, #+4]
   \   00000228   00A08DE5           STR      R10,[SP, #+0]
   \   0000022C   08008DE5           STR      R0,[SP, #+8]
   \   00000230   38309DE5           LDR      R3,[SP, #+56]
   \   00000234   012088E2           ADD      R2,R8,#+1
   \   00000238   0400A0E1           MOV      R0,R4
   \   0000023C   ........           BL       _DrawColumnScaled
    213              }
   \   00000240   0C009DE5           LDR      R0,[SP, #+12]
   \   00000244   028088E2           ADD      R8,R8,#+2
   \   00000248   010040E2           SUB      R0,R0,#+1
   \   0000024C   0C008DE5           STR      R0,[SP, #+12]
   \   00000250   000050E3           CMP      R0,#+0
   \   00000254   D1FFFF1A           BNE      ??_DrawMemdevPerspective_7
    214              x0 += NumReps;
   \                     ??_DrawMemdevPerspective_5:
   \   00000258   34009DE5           LDR      R0,[SP, #+52]
   \   0000025C   10109DE5           LDR      R1,[SP, #+16]
   \   00000260   000081E0           ADD      R0,R1,R0
   \   00000264   34008DE5           STR      R0,[SP, #+52]
    215            } while (x < xSize);
   \   00000268   14009DE5           LDR      R0,[SP, #+20]
   \   0000026C   18109DE5           LDR      R1,[SP, #+24]
   \   00000270   010050E1           CMP      R0,R1
   \   00000274   73FFFFBA           BLT      ??_DrawMemdevPerspective_0
    216          }
   \   00000278   3CD08DE2           ADD      SP,SP,#+60       ;; stack cleaning
   \   0000027C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    217          
    218          /*********************************************************************
    219          *
    220          *       Public code
    221          *
    222          **********************************************************************
    223          */
    224          /*********************************************************************
    225          *
    226          *       GUI_MEMDEV_DrawPerspective
    227          */

   \                                 In section .text, align 4, keep-with-next
    228          void GUI_MEMDEV_DrawPerspectiveX(GUI_MEMDEV_Handle hMem, int x, int y, int h0, int h1, int dx, int dy) {
   \                     GUI_MEMDEV_DrawPerspectiveX:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   3C809DE5           LDR      R8,[SP, #+60]
   \   0000000C   00A0A0E1           MOV      R10,R0
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   38709DE5           LDR      R7,[SP, #+56]
   \   00000020   40909DE5           LDR      R9,[SP, #+64]
    229            #if (GUI_WINSUPPORT)
    230              GUI_RECT r;
    231            #endif
    232            GUI_MEMDEV * pDev;
    233            if (dx != 0) {
   \   00000024   000058E3           CMP      R8,#+0
   \   00000028   2900000A           BEQ      ??GUI_MEMDEV_DrawPerspectiveX_0
    234              GUI_LOCK();
   \   0000002C   ........           BL       GUI_Lock
    235              pDev = GUI_MEMDEV_H2P(hMem);
   \   00000030   0A00A0E1           MOV      R0,R10
   \   00000034   ........           BL       GUI_ALLOC_h2p
   \   00000038   00A0A0E1           MOV      R10,R0
    236              #if (GUI_WINSUPPORT)
    237                WM_ADDORG(x, y);
   \   0000003C   ........           LDR      R0,??DataTable1
    238                r.x0 = x;
    239                r.y0 = y + (dy < 0 ? dy : 0);
   \   00000040   000059E3           CMP      R9,#+0
   \   00000044   401090E5           LDR      R1,[R0, #+64]
   \   00000048   440090E5           LDR      R0,[R0, #+68]
   \   0000004C   044081E0           ADD      R4,R1,R4
   \   00000050   055080E0           ADD      R5,R0,R5
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   0900A0D1           MOVLE    R0,R9
   \   0000005C   050080E0           ADD      R0,R0,R5
   \   00000060   BC40CDE1           STRH     R4,[SP, #+12]
   \   00000064   BE00CDE1           STRH     R0,[SP, #+14]
    240                r.x1 = r.x0 + dx - 1;
   \   00000068   FC00DDE1           LDRSH    R0,[SP, #+12]
    241                r.y1 = r.y0 + ((h0 > h1) ? h0 : h1) - 1;
   \   0000006C   FE10DDE1           LDRSH    R1,[SP, #+14]
   \   00000070   060057E1           CMP      R7,R6
   \   00000074   000088E0           ADD      R0,R8,R0
   \   00000078   010040E2           SUB      R0,R0,#+1
   \   0000007C   B001CDE1           STRH     R0,[SP, #+16]
   \   00000080   0700A0E1           MOV      R0,R7
   \   00000084   0600A0B1           MOVLT    R0,R6
   \   00000088   010080E0           ADD      R0,R0,R1
   \   0000008C   010040E2           SUB      R0,R0,#+1
   \   00000090   B201CDE1           STRH     R0,[SP, #+18]
    242                WM_ITERATE_START(&r) {
   \   00000094   0C008DE2           ADD      R0,SP,#+12
   \   00000098   ........           BL       WM__InitIVRSearch
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0A00000A           BEQ      ??GUI_MEMDEV_DrawPerspectiveX_1
    243              #endif
    244              _DrawMemdevPerspective(pDev, x, y, h0, h1, dx, dy);
   \                     ??GUI_MEMDEV_DrawPerspectiveX_2:
   \   000000A4   08908DE5           STR      R9,[SP, #+8]
   \   000000A8   04808DE5           STR      R8,[SP, #+4]
   \   000000AC   00708DE5           STR      R7,[SP, #+0]
   \   000000B0   0630A0E1           MOV      R3,R6
   \   000000B4   0520A0E1           MOV      R2,R5
   \   000000B8   0410A0E1           MOV      R1,R4
   \   000000BC   0A00A0E1           MOV      R0,R10
   \   000000C0   ........           BL       _DrawMemdevPerspective
    245              #if (GUI_WINSUPPORT)
    246                } WM_ITERATE_END();
   \   000000C4   ........           BL       WM__GetNextIVR
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   F4FFFF1A           BNE      ??GUI_MEMDEV_DrawPerspectiveX_2
    247              #endif
    248              GUI_UNLOCK();
   \                     ??GUI_MEMDEV_DrawPerspectiveX_1:
   \   000000D0   ........           BL       GUI_Unlock
    249            }
    250          }
   \                     ??GUI_MEMDEV_DrawPerspectiveX_0:
   \   000000D4   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   000000D8   F087BDE8           POP      {R4-R10,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context
    251          
    252          #else
    253          
    254          void GUIDEV_Perspective(void);
    255          void GUIDEV_Perspective(void) {} /* avoid empty object files */
    256          
    257          #endif /* GUI_MEMDEV_SUPPORT */
    258          
    259          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                    .cstack
     --------                    -------
     GUI_MEMDEV_DrawPerspectiveX     56
     _DrawColumnScaled               56
     _DrawMemdevPerspective          96
     _GetX                           48


   Section sizes:

     Function/Label              Bytes
     --------------              -----
     _GetX                        328
     _DrawColumnScaled            528
     _DrawMemdevPerspective       640
     GUI_MEMDEV_DrawPerspectiveX  220
     ??DataTable1                   4

 
 1 720 bytes in section .text
 
 1 720 bytes of CODE memory

Errors: none
Warnings: none
