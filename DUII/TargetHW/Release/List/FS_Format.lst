###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:14:57 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_Format.c                          #
#    Command line =  C:\DUII\TargetHW\FS\FS_Format.c -D DEBUG=1 -D            #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\FS_Format.lst              #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\FS_Format.o                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_Format.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FS_Format.c
     19          Purpose     : Implementation of the FS_Format API function.
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *       #include Section
     26          *
     27          **********************************************************************
     28          */
     29          
     30          
     31          #include "FS_Int.h"
     32          
     33          /*********************************************************************
     34          *
     35          *       Public code, internal
     36          *
     37          **********************************************************************
     38          */
     39          
     40          /*********************************************************************
     41          *
     42          *       FS__Format
     43          *
     44          *  Function description:
     45          *    Internal version of FS_Format.
     46          *    Format the medium
     47          *
     48          *  Parameters:
     49          *    pVolume       Volume to format. NULL is permitted, but returns an error.
     50          *    pFormatInfo   Add. optional format information.
     51          *  
     52          *  Return value:
     53          *    ==0         - File system has been started.
     54          *    !=0         - An error has occurred.
     55          */

   \                                 In section .text, align 4, keep-with-next
     56          int FS__Format(FS_VOLUME  * pVolume, FS_FORMAT_INFO * pFormatInfo) {
   \                     FS__Format:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     57            int          r;
     58            int          Status;
     59            FS_DEVICE  * pDevice;
     60          
     61            r = -1;
   \   0000000C   0060E0E3           MVN      R6,#+0
     62            if (pVolume) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0A00000A           BEQ      ??FS__Format_0
     63              pDevice = &pVolume->Partition.Device;
     64              FS_LOCK_DRIVER(pDevice);
     65              FS__UnmountForcedNL(pVolume);
   \   00000018   ........           BL       FS__UnmountForcedNL
     66              Status = FS_LB_GetStatus(pDevice);
     67              if (Status >= 0) {
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       FS_LB_GetStatus
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500004A           BMI      ??FS__Format_0
     68                FS_LB_InitMediumIfRequired(pDevice);
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       FS_LB_InitMediumIfRequired
     69                r = FS_FORMAT(pVolume, pFormatInfo);
   \   00000034   0510A0E1           MOV      R1,R5
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       FS_FAT_Format
   \   00000040   0060A0E1           MOV      R6,R0
     70              }
     71              FS_UNLOCK_DRIVER(pDevice);
     72          
     73            }
     74            return r;
   \                     ??FS__Format_0:
   \   00000044   0600A0E1           MOV      R0,R6
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
     75          }
     76          
     77          /*********************************************************************
     78          *
     79          *       Public code
     80          *
     81          **********************************************************************
     82          */
     83          
     84          /*********************************************************************
     85          *
     86          *       FS_Format
     87          *
     88          *  Function description:
     89          *    Format the medium
     90          *
     91          *  Parameters:
     92          *    pDevice       Device specifier (string). "" refers to the first device.
     93          *    pFormatInfo   Add. optional format information.
     94          *  
     95          *  Return value:
     96          *    ==0         - O.K., format successful
     97          *    !=0         - An error has occurred.
     98          */

   \                                 In section .text, align 4, keep-with-next
     99          int FS_Format(const char *sVolumeName, FS_FORMAT_INFO * pFormatInfo) {
   \                     FS_Format:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    100            int r;
    101            FS_VOLUME  * pVolume;
    102          
    103            FS_LOCK();
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   ........           BL       FS_OS_Lock
    104            pVolume = FS__FindVolume(sVolumeName, NULL);
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       FS__FindVolume
   \   00000020   0040B0E1           MOVS     R4,R0
    105            r = FS__Format(pVolume, pFormatInfo);
   \   00000024   0060E0E3           MVN      R6,#+0
   \   00000028   0A00000A           BEQ      ??FS_Format_0
   \   0000002C   ........           BL       FS__UnmountForcedNL
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       FS_LB_GetStatus
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0500004A           BMI      ??FS_Format_0
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       FS_LB_InitMediumIfRequired
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       FS_FAT_Format
   \   00000054   0060A0E1           MOV      R6,R0
    106            FS_UNLOCK();
   \                     ??FS_Format_0:
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   ........           BL       FS_OS_Unlock
    107            return r;
   \   00000060   0600A0E1           MOV      R0,R6
   \   00000064   7080BDE8           POP      {R4-R6,PC}       ;; return
    108          }
    109          
    110          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function   .cstack
     --------   -------
     FS_Format      16
     FS__Format     16


   Section sizes:

     Function/Label Bytes
     -------------- -----
     FS__Format       76
     FS_Format       104

 
 180 bytes in section .text
 
 180 bytes of CODE memory

Errors: none
Warnings: none
