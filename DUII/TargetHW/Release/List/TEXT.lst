###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:42 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\TEXT.c                              #
#    Command line =  C:\DUII\TargetHW\GUI\TEXT.c -D DEBUG=1 -D                #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\TEXT.lst                   #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\TEXT.o                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\TEXT.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : TEXT.c
     19          Purpose     : Implementation of text widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          #include <string.h>
     25          
     26          #include "TEXT_Private.h"
     27          #include "WIDGET.h"
     28          #include "GUI_Debug.h"
     29          #include "GUI_Private.h"
     30          
     31          #if GUI_WINSUPPORT
     32          
     33          /*********************************************************************
     34          *
     35          *       Private config defaults
     36          *
     37          **********************************************************************
     38          */
     39          
     40          /* Define default fonts */
     41          #ifndef TEXT_FONT_DEFAULT
     42            #if   WIDGET_USE_SCHEME_SMALL
     43              #define TEXT_FONT_DEFAULT &GUI_Font13_1
     44            #elif WIDGET_USE_SCHEME_MEDIUM
     45              #define TEXT_FONT_DEFAULT &GUI_Font16_1
     46            #elif WIDGET_USE_SCHEME_LARGE
     47              #define TEXT_FONT_DEFAULT &GUI_Font24_1
     48            #endif
     49          #endif
     50          
     51          #ifndef   TEXT_DEFAULT_TEXT_COLOR
     52            #define TEXT_DEFAULT_TEXT_COLOR GUI_BLACK
     53          #endif
     54          #ifndef   TEXT_DEFAULT_BK_COLOR
     55            #define TEXT_DEFAULT_BK_COLOR   GUI_INVALID_COLOR
     56          #endif
     57          #ifndef   TEXT_DEFAULT_WRAPMODE
     58            #define TEXT_DEFAULT_WRAPMODE   GUI_WRAPMODE_NONE
     59          #endif
     60          
     61          /*********************************************************************
     62          *
     63          *       Public data
     64          *
     65          **********************************************************************
     66          */

   \                                 In section .data, align 4
     67          TEXT_PROPS TEXT__DefaultProps = {
   \                     TEXT__DefaultProps:
   \   00000000   ........0000       DC32 GUI_Font13_1, 0, 268435455
   \              0000FFFFFF0F
   \   0000000C   00000000           DC8 0, 0, 0, 0
     68            TEXT_FONT_DEFAULT,
     69            TEXT_DEFAULT_TEXT_COLOR,
     70            TEXT_DEFAULT_BK_COLOR,
     71            TEXT_DEFAULT_WRAPMODE
     72          };
     73          
     74          /*********************************************************************
     75          *
     76          *       Static routines
     77          *
     78          **********************************************************************
     79          */
     80          /*********************************************************************
     81          *
     82          *       _FreeAttached
     83          */
     84          static void _FreeAttached(TEXT_Obj * pObj) {
     85            GUI_ALLOC_FreePtr(&pObj->hpText);
     86          }
     87          
     88          /*********************************************************************
     89          *
     90          *       _Paint
     91          */
     92          static void _Paint(TEXT_Handle hObj) {
     93            TEXT_Obj * pObj;
     94            const char * s;
     95            GUI_RECT Rect;
     96            pObj = TEXT_LOCK_H(hObj);
     97            LCD_SetColor(pObj->Props.TextColor);
     98            GUI_SetFont    (pObj->Props.pFont);
     99            /* Fill with parents background color */
    100            #if !TEXT_SUPPORT_TRANSPARENCY   /* Not needed any more, since window is transparent*/
    101              if (pObj->Props.BkColor == GUI_INVALID_COLOR) {
    102                LCD_SetBkColor(WIDGET__GetBkColor(hObj));
    103              } else {
    104                LCD_SetBkColor(pObj->Props.BkColor);
    105              }
    106              GUI_Clear();
    107            #else
    108              if (!WM_GetHasTrans(hObj)) {
    109                LCD_SetBkColor(pObj->Props.BkColor);
    110                GUI_Clear();
    111              }
    112            #endif
    113            /* Show the text */
    114            if (pObj->hpText) {
    115              GUI_SetTextMode(GUI_TM_TRANS);
    116              WM_GetClientRect(&Rect);
    117              s = (const char *)GUI_LOCK_H(pObj->hpText);
    118              GUI_DispStringInRectWrap(s, &Rect, pObj->Align, pObj->Props.WrapMode);
    119              GUI_UNLOCK_H(s);
    120            }
    121            GUI_UNLOCK_H(pObj);
    122          }
    123          
    124          /*********************************************************************
    125          *
    126          *       _Delete
    127          */
    128          static void _Delete(TEXT_Handle hObj) {
    129            TEXT_Obj * pObj;
    130            pObj = TEXT_LOCK_H(hObj);
    131            /* Delete attached objects (if any) */
    132            GUI_DEBUG_LOG("TEXT: Delete() Deleting attached items");
    133            _FreeAttached(pObj);
    134            GUI_UNLOCK_H(pObj);
    135          }
    136          
    137          /*********************************************************************
    138          *
    139          *       Private routines
    140          *
    141          **********************************************************************
    142          */
    143          /*********************************************************************
    144          *
    145          *       TEXT_LockH
    146          */
    147          #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
    148          TEXT_Obj * TEXT_LockH(TEXT_Handle h) {
    149            TEXT_Obj * p = (TEXT_Obj *)GUI_LOCK_H(h);
    150            if (p) {
    151              if (p->DebugId != TEXT_ID) {
    152                GUI_DEBUG_ERROROUT("TEXT.c: Wrong handle type or Object not init'ed");
    153                return 0;
    154              }
    155            }
    156            return p;
    157          }
    158          #endif
    159          
    160          /*********************************************************************
    161          *
    162          *       Exported routines:  Callback
    163          *
    164          **********************************************************************
    165          */
    166          /*********************************************************************
    167          *
    168          *       TEXT_Callback
    169          */

   \                                 In section .text, align 4, keep-with-next
    170          void TEXT_Callback (WM_MESSAGE * pMsg) {
   \                     TEXT_Callback:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    171            TEXT_Handle hObj;
    172            hObj = pMsg->hWin;
   \   00000008   045094E5           LDR      R5,[R4, #+4]
   \   0000000C   0CD04DE2           SUB      SP,SP,#+12
    173            /* Let widget handle the standard messages */
    174            if (WIDGET_HandleActive(hObj, pMsg) == 0) {
   \   00000010   0410A0E1           MOV      R1,R4
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           BL       WIDGET_HandleActive
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   2900000A           BEQ      ??TEXT_Callback_0
    175              return;
    176            }
    177            switch (pMsg->MsgId) {
   \   00000024   000094E5           LDR      R0,[R4, #+0]
   \   00000028   0B0050E3           CMP      R0,#+11
   \   0000002C   1F00000A           BEQ      ??TEXT_Callback_1
   \   00000030   0F0050E3           CMP      R0,#+15
   \   00000034   2200001A           BNE      ??TEXT_Callback_2
    178            case WM_PAINT:
    179              GUI_DEBUG_LOG("TEXT: _Callback(WM_PAINT)\n");
    180              _Paint(hObj);
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           BL       GUI_ALLOC_LockH
   \   00000040   0040A0E1           MOV      R4,R0
   \   00000044   380094E5           LDR      R0,[R4, #+56]
   \   00000048   ........           BL       LCD_SetColor
   \   0000004C   340094E5           LDR      R0,[R4, #+52]
   \   00000050   ........           BL       GUI_SetFont
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   ........           BL       WM_GetHasTrans
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0200001A           BNE      ??TEXT_Callback_3
   \   00000064   3C0094E5           LDR      R0,[R4, #+60]
   \   00000068   ........           BL       LCD_SetBkColor
   \   0000006C   ........           BL       GUI_Clear
   \                     ??TEXT_Callback_3:
   \   00000070   440094E5           LDR      R0,[R4, #+68]
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0A00000A           BEQ      ??TEXT_Callback_4
   \   0000007C   0200A0E3           MOV      R0,#+2
   \   00000080   ........           BL       GUI_SetTextMode
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           BL       WM_GetClientRect
   \   0000008C   440094E5           LDR      R0,[R4, #+68]
   \   00000090   ........           BL       GUI_ALLOC_LockH
   \   00000094   4030D4E5           LDRB     R3,[R4, #+64]
   \   00000098   F824D4E1           LDRSH    R2,[R4, #+72]
   \   0000009C   0D10A0E1           MOV      R1,SP
   \   000000A0   ........           BL       GUI_DispStringInRectWrap
   \   000000A4   ........           BL       GUI_ALLOC_UnlockH
   \                     ??TEXT_Callback_4:
   \   000000A8   ........           BL       GUI_ALLOC_UnlockH
    181              return;
   \   000000AC   060000EA           B        ??TEXT_Callback_0
    182            case WM_DELETE:
    183              GUI_DEBUG_LOG("TEXT: _Callback(WM_DELETE)\n");
    184              _Delete(hObj);
   \                     ??TEXT_Callback_1:
   \   000000B0   0500A0E1           MOV      R0,R5
   \   000000B4   ........           BL       GUI_ALLOC_LockH
   \   000000B8   440080E2           ADD      R0,R0,#+68
   \   000000BC   ........           BL       GUI_ALLOC_FreePtr
   \   000000C0   ........           BL       GUI_ALLOC_UnlockH
    185              break;       /* No return here ... WM_DefaultProc needs to be called */
    186            }
    187            WM_DefaultProc(pMsg);
   \                     ??TEXT_Callback_2:
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   ........           BL       WM_DefaultProc
    188          }
   \                     ??TEXT_Callback_0:
   \   000000CC   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000000D0   3080BDE8           POP      {R4,R5,PC}       ;; return
    189          
    190          /*********************************************************************
    191          *
    192          *       Exported routines:  Create
    193          *
    194          **********************************************************************
    195          */
    196          
    197          /* Note: the parameters to a create function may vary.
    198                   Some widgets may have multiple create functions */
    199          
    200          /*********************************************************************
    201          *
    202          *       TEXT_CreateEx
    203          */

   \                                 In section .text, align 4, keep-with-next
    204          TEXT_Handle TEXT_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
    205                                    int WinFlags, int ExFlags, int Id, const char * pText)
    206          {
   \                     TEXT_CreateEx:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0170A0E1           MOV      R7,R1
   \   0000000C   0280A0E1           MOV      R8,R2
   \   00000010   0390A0E1           MOV      R9,R3
   \   00000014   38A09DE5           LDR      R10,[SP, #+56]
   \   00000018   3CB09DE5           LDR      R11,[SP, #+60]
   \   0000001C   40409DE5           LDR      R4,[SP, #+64]
   \   00000020   44509DE5           LDR      R5,[SP, #+68]
   \   00000024   48609DE5           LDR      R6,[SP, #+72]
    207            TEXT_Handle hObj;
    208            /* Create the window */
    209            #if TEXT_SUPPORT_TRANSPARENCY
    210              WinFlags |= WM_CF_HASTRANS;
    211            #endif
    212            WM_LOCK();
   \   00000028   ........           BL       GUI_Lock
    213            hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, TEXT_Callback,
    214                                          sizeof(TEXT_Obj) - sizeof(WM_Obj));
   \   0000002C   2000A0E3           MOV      R0,#+32
   \   00000030   0C008DE5           STR      R0,[SP, #+12]
   \   00000034   ........           LDR      R0,??DataTable0
   \   00000038   00A08DE5           STR      R10,[SP, #+0]
   \   0000003C   08008DE5           STR      R0,[SP, #+8]
   \   00000040   01008BE3           ORR      R0,R11,#0x1
   \   00000044   04008DE5           STR      R0,[SP, #+4]
   \   00000048   0930A0E1           MOV      R3,R9
   \   0000004C   0820A0E1           MOV      R2,R8
   \   00000050   0710A0E1           MOV      R1,R7
   \   00000054   10009DE5           LDR      R0,[SP, #+16]
   \   00000058   ........           BL       WM_CreateWindowAsChild
   \   0000005C   0070B0E1           MOVS     R7,R0
    215            if (hObj) {
   \   00000060   1900000A           BEQ      ??TEXT_CreateEx_0
    216              TEXT_Obj * pObj;
    217              WM_HMEM hMem = 0;
   \   00000064   0080A0E3           MOV      R8,#+0
    218              if (pText) {
   \   00000068   000056E3           CMP      R6,#+0
   \   0000006C   0900000A           BEQ      ??TEXT_CreateEx_1
    219                hMem = GUI_ALLOC_AllocZero(strlen(pText) + 1);
   \   00000070   0600A0E1           MOV      R0,R6
   \   00000074   ........           BL       strlen
   \   00000078   010080E2           ADD      R0,R0,#+1
   \   0000007C   ........           BL       GUI_ALLOC_AllocZero
   \   00000080   0080B0E1           MOVS     R8,R0
    220                if (hMem) {
   \   00000084   0300000A           BEQ      ??TEXT_CreateEx_1
    221                  char * pMem;
    222                  pMem = (char *)GUI_LOCK_H(hMem);
   \   00000088   ........           BL       GUI_ALLOC_LockH
    223                  strcpy(pMem, pText);
   \   0000008C   0610A0E1           MOV      R1,R6
   \   00000090   ........           BL       strcpy
    224                  GUI_UNLOCK_H(pMem);
   \   00000094   ........           BL       GUI_ALLOC_UnlockH
    225                }
    226              }
    227              pObj = (TEXT_Obj *)GUI_LOCK_H(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
   \                     ??TEXT_CreateEx_1:
   \   00000098   0700A0E1           MOV      R0,R7
   \   0000009C   ........           BL       GUI_ALLOC_LockH
   \   000000A0   0060A0E1           MOV      R6,R0
    228              /* init widget specific variables */
    229              WIDGET__Init(&pObj->Widget, Id, 0);
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   0510A0E1           MOV      R1,R5
   \   000000AC   ........           BL       WIDGET__Init
    230              /* init member variables */
    231              TEXT_INIT_ID(pObj);
    232              pObj->hpText = hMem;
   \   000000B0   448086E5           STR      R8,[R6, #+68]
    233              pObj->Align  = ExFlags;
    234              pObj->Props  = TEXT__DefaultProps;
   \   000000B4   ........           LDR      R1,??DataTable0_1
   \   000000B8   B844C6E1           STRH     R4,[R6, #+72]
   \   000000BC   0C50B1E8           LDM      R1!,{R2,R3,R12,LR}
   \   000000C0   340086E2           ADD      R0,R6,#+52
   \   000000C4   0C50A0E8           STM      R0!,{R2,R3,R12,LR}
    235              GUI_UNLOCK_H(pObj);
   \   000000C8   ........           BL       GUI_ALLOC_UnlockH
    236            } else {
    237              GUI_DEBUG_ERROROUT_IF(hObj==0, "TEXT_Create failed")
    238            }
    239            WM_UNLOCK();
   \                     ??TEXT_CreateEx_0:
   \   000000CC   ........           BL       GUI_Unlock
    240            return hObj;
   \   000000D0   0700A0E1           MOV      R0,R7
   \   000000D4   14D08DE2           ADD      SP,SP,#+20
   \   000000D8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    241          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     TEXT_Callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   ........           DC32     TEXT__DefaultProps
    242          
    243          #else /* avoid empty object files */
    244          
    245          void TEXT_C(void);
    246          void TEXT_C(void){}
    247          
    248          #endif  /* #if GUI_WINSUPPORT */
    249          
    250          

   Maximum stack usage in bytes:

     Function      .cstack
     --------      -------
     TEXT_Callback     24
     TEXT_CreateEx     56


   Section sizes:

     Function/Label     Bytes
     --------------     -----
     TEXT__DefaultProps   16
     TEXT_Callback       212
     TEXT_CreateEx       220
     ??DataTable0          4
     ??DataTable0_1        4

 
  16 bytes in section .data
 440 bytes in section .text
 
 440 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
