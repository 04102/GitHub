###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:16:42 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WM_SetCaptureMove.c                 #
#    Command line =  C:\DUII\TargetHW\GUI\WM_SetCaptureMove.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\WM_SetCaptureMove.lst      #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\WM_SetCaptureMove.o         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WM_SetCaptureMove.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WM_SetCaptureMove.c
     19          Purpose     : Implementation of WM_SetCaptureMove
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include "WM_Intern.h"
     24          
     25          #if GUI_WINSUPPORT
     26          
     27          /*********************************************************************
     28          *
     29          *        Static data
     30          *
     31          **********************************************************************
     32          */

   \                                 In section .bss, align 4
     33          static GUI_POINT WM__CapturePoint;
   \                     WM__CapturePoint:
   \   00000000                      DS8 4
     34          
     35          /*********************************************************************
     36          *
     37          *        Public code
     38          *
     39          **********************************************************************
     40          */
     41          /*********************************************************************
     42          *
     43          *       WM_SetCaptureMove
     44          */

   \                                 In section .text, align 4, keep-with-next
     45          void WM_SetCaptureMove(WM_HWIN hWin, const GUI_PID_STATE* pState, int MinVisibility, int LimitTop) {
   \                     WM_SetCaptureMove:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   0270A0E1           MOV      R7,R2
   \   00000014   0380A0E1           MOV      R8,R3
     46            if (!WM_HasCaptured(hWin)) {
   \   00000018   CC409FE5           LDR      R4,??WM_SetCaptureMove_0
   \   0000001C   ........           BL       WM_HasCaptured
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0700001A           BNE      ??WM_SetCaptureMove_1
     47              WM_SetCapture(hWin, 1);        /* Set capture with auto release */
   \   00000028   0110A0E3           MOV      R1,#+1
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   ........           BL       WM_SetCapture
     48              WM__CapturePoint.x = pState->x;
   \   00000034   000096E5           LDR      R0,[R6, #+0]
   \   00000038   B000C4E1           STRH     R0,[R4, #+0]
     49              WM__CapturePoint.y = pState->y;
   \   0000003C   040096E5           LDR      R0,[R6, #+4]
   \   00000040   B200C4E1           STRH     R0,[R4, #+2]
   \   00000044   260000EA           B        ??WM_SetCaptureMove_2
     50            } else {                         /* Moving ... let the window move ! */
     51              int dx, dy;
     52              dx = pState->x - WM__CapturePoint.x;
   \                     ??WM_SetCaptureMove_1:
   \   00000048   F010D4E1           LDRSH    R1,[R4, #+0]
   \   0000004C   000096E5           LDR      R0,[R6, #+0]
   \   00000050   019040E0           SUB      R9,R0,R1
     53              dy = pState->y - WM__CapturePoint.y;
   \   00000054   F210D4E1           LDRSH    R1,[R4, #+2]
   \   00000058   040096E5           LDR      R0,[R6, #+4]
   \   0000005C   014040E0           SUB      R4,R0,R1
     54              /* Make sure at least a part of the windows stays inside of its parent */
     55              if ((MinVisibility == 0) && (LimitTop == 0)) {
   \   00000060   070098E1           ORRS     R0,R8,R7
   \   00000064   0400001A           BNE      ??WM_SetCaptureMove_3
     56                WM_MoveWindow(hWin, dx, dy);
   \                     ??WM_SetCaptureMove_4:
   \   00000068   0420A0E1           MOV      R2,R4
   \   0000006C   0910A0E1           MOV      R1,R9
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           BL       WM_MoveWindow
   \   00000078   190000EA           B        ??WM_SetCaptureMove_2
     57              } else {
     58                GUI_RECT Rect, RectParent;
     59                WM_GetWindowRectEx(hWin, &Rect);
   \                     ??WM_SetCaptureMove_3:
   \   0000007C   0D10A0E1           MOV      R1,SP
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   ........           BL       WM_GetWindowRectEx
     60                /* Check if the top region of the window should be limited */
     61                if (LimitTop) {
   \   00000088   000058E3           CMP      R8,#+0
   \   0000008C   0300000A           BEQ      ??WM_SetCaptureMove_5
     62                  Rect.y1 = Rect.y0 + LimitTop - 1;
   \   00000090   F200DDE1           LDRSH    R0,[SP, #+2]
   \   00000094   000088E0           ADD      R0,R8,R0
   \   00000098   010040E2           SUB      R0,R0,#+1
   \   0000009C   B600CDE1           STRH     R0,[SP, #+6]
     63                }
     64                WM_GetWindowRectEx(WM_GetParent(hWin), &RectParent);
   \                     ??WM_SetCaptureMove_5:
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   ........           BL       WM_GetParent
   \   000000A8   08108DE2           ADD      R1,SP,#+8
   \   000000AC   ........           BL       WM_GetWindowRectEx
     65                GUI_MoveRect(&Rect, dx, dy);
   \   000000B0   0420A0E1           MOV      R2,R4
   \   000000B4   0910A0E1           MOV      R1,R9
   \   000000B8   0D00A0E1           MOV      R0,SP
   \   000000BC   ........           BL       GUI_MoveRect
     66                GUI__ReduceRect(&RectParent, &RectParent, MinVisibility);
   \   000000C0   0720A0E1           MOV      R2,R7
   \   000000C4   08108DE2           ADD      R1,SP,#+8
   \   000000C8   08008DE2           ADD      R0,SP,#+8
   \   000000CC   ........           BL       GUI__ReduceRect
     67                if (GUI_RectsIntersect(&Rect, &RectParent)) {
   \   000000D0   08108DE2           ADD      R1,SP,#+8
   \   000000D4   0D00A0E1           MOV      R0,SP
   \   000000D8   ........           BL       GUI_RectsIntersect
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   E0FFFF1A           BNE      ??WM_SetCaptureMove_4
     68                  WM_MoveWindow(hWin, dx, dy);
     69                }
     70              }
     71            }
     72          }
   \                     ??WM_SetCaptureMove_2:
   \   000000E4   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000000E8   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??WM_SetCaptureMove_0:
   \   000000EC   ........           DC32     WM__CapturePoint
     73          
     74          
     75          #else
     76            void WM_SetCaptureMove_c(void) {} /* avoid empty object files */
     77          #endif /* GUI_WINSUPPORT */
     78          
     79          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     WM_SetCaptureMove     48


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     WM__CapturePoint     4
     WM_SetCaptureMove  240

 
   4 bytes in section .bss
 240 bytes in section .text
 
 240 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
