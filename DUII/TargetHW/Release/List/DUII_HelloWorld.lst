###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.41.0.51741/W32 for ARM     04/Jun/2010  14:48:58 #
# Copyright (C) 1999-2009 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\DUII_HelloWorld.c                           #
#    Command line =  C:\DUII\DUII\DUII_HelloWorld.c -D DEBUG=1 -D             #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -lCN                 #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --require_prototypes --fpu=None      #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\DLib_Config_Normal.h" -I           #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I "C:\Program Files\IAR Systems\Embedded    #
#                    Workbench 5.4\arm\INC\" --cpu_mode arm -Ohs              #
#    List file    =  C:\DUII\TargetHW\Release\List\DUII_HelloWorld.lst        #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\DUII_HelloWorld.o           #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\DUII_HelloWorld.c
      1          /*********************************************************************
      2          *               SEGGER MICROCONTROLLER SYSTEME GmbH                  *
      3          *       Solutions for real time microcontroller applications         *
      4          **********************************************************************
      5          *                                                                    *
      6          *       (c) 1995 - 2008  SEGGER Microcontroller GmbH & Co. KG        *
      7          *                                                                    *
      8          *       www.segger.com     Support: support@segger.com               *
      9          *                                                                    *
     10          **********************************************************************
     11          *                                                                    *
     12          *       embOS * Real time operating system for microcontrollers      *
     13          *                                                                    *
     14          *                                                                    *
     15          *       Please note:                                                 *
     16          *                                                                    *
     17          *       Knowledge of this file may under no circumstances            *
     18          *       be used to write a similar product or a real-time            *
     19          *       operating system for in-house use.                           *
     20          *                                                                    *
     21          *       Thank you for your fairness !                                *
     22          *                                                                    *
     23          **********************************************************************
     24          *                                                                    *
     25          *       embOS version: 3.52e                                         *
     26          *                                                                    *
     27          **********************************************************************
     28          
     29          ----------------------------------------------------------------------
     30          File    : GUI_HelloWorld.c
     31          Purpose : emWin and embOS demo application
     32          --------  END-OF-HEADER  ---------------------------------------------
     33          */
     34          
     35          #include "GUI.h"
     36          #include "commondefs.h"
     37          #include "DIALOG.h"
     38          #include "FS.h"
     39          
     40          #ifdef ONEBYSIX
     41          #include "onebysix.h"
     42          #include "GeneralConfig.h"
     43          #endif
     44          
     45          #if	_WINDOWS
     46          #include "SIMConf.h"
     47          #endif
     48          
     49          //#define COLORTEST (1)
     50          #include "GaugeScreen.h"
     51          
     52          #include <stdio.h>
     53          #include <string.h>
     54          

   \                                 In section .bss, align 4
     55          int screen_scrolling;
   \                     screen_scrolling:
   \   00000000                      DS8 4
     56          #define	COUNT	300

   \                                 In section .bss, align 4
     57            char kmc[COUNT*30];
   \                     kmc:
   \   00000000                      DS8 9000
     58          
     59          
     60          /*********************************************************************
     61          *
     62          *       main()
     63          */
     64          void MainTask(void);

   \                                 In section .text, align 4, keep-with-next
     65          void MainTask(void)
     66          {
   \                     MainTask:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   49DF4DE2           SUB      SP,SP,#+292
     67          	GUI_Init();
   \   00000008   ........           BL       GUI_Init
     68          	
     69          #if 1
     70            //
     71            // Initialize file system
     72            //
     73            FS_Init();
   \   0000000C   ........           BL       FS_Init
     74          
     75          #ifdef _WINDOWS
     76          	SIM_Init();
     77          #endif
     78          
     79          	
     80          	
     81          	
     82          	
     83          {
     84          	U32          v;
     85            FS_FILE    * pFile;
     86            char         ac[256];
     87          //  int r, i, retval, length;
     88            int r, i, length;
     89            
     90            
     91            const char * sVolName = "";
   \   00000010   7B6F8FE2           ADR      R6,??MainTask_0  ;; ""
   \   00000014   0650A0E1           MOV      R5,R6
     92          
     93            	GUI_SetFont(&GUI_Font32_ASCII);
   \   00000018   EC019FE5           LDR      R0,??MainTask_0+0x8  ;; GUI_Font32_ASCII
   \   0000001C   ........           BL       GUI_SetFont
     94          
     95            //
     96            // Check if low-level format is required
     97            //
     98          	
     99          
    100            FS_FormatLLIfRequired("");
   \   00000020   0600A0E1           MOV      R0,R6
   \   00000024   ........           BL       FS_FormatLLIfRequired
    101            //
    102            // Check if volume needs to be high level formatted.
    103            //
    104            if ((r = FS_IsHLFormatted("")) == 0) {
   \   00000028   0600A0E1           MOV      R0,R6
   \   0000002C   ........           BL       FS_IsHLFormatted
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0900001A           BNE      ??MainTask_1
    105              sprintf(kmc,"High level formatting\n");
   \   00000038   D0419FE5           LDR      R4,??MainTask_0+0xC  ;; kmc
   \   0000003C   D0119FE5           LDR      R1,??MainTask_0+0x10  ;; `?<Constant "High level formatting\\n">`
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       sprintf
    106              GUI_DispString(kmc);
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       GUI_DispString
    107              FS_Format("", NULL);
   \   00000050   0010A0E3           MOV      R1,#+0
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   ........           BL       FS_Format
   \   0000005C   030000EA           B        ??MainTask_2
    108            }
    109            else if (r == -1)
   \                     ??MainTask_1:
   \   00000060   010070E3           CMN      R0,#+1
   \   00000064   0100001A           BNE      ??MainTask_2
    110            {
    111              GUI_DispString("FS_IsHLFormatted returned an error\n");
   \   00000068   A8019FE5           LDR      R0,??MainTask_0+0x14  ;; `?<Constant "High level formatting\\n">` + 24
   \   0000006C   ........           BL       GUI_DispString
    112            }
    113            sprintf(kmc,"Running sample on \"%s\"\n", sVolName);
   \                     ??MainTask_2:
   \   00000070   98419FE5           LDR      R4,??MainTask_0+0xC  ;; kmc
   \   00000074   98619FE5           LDR      R6,??MainTask_0+0x10  ;; `?<Constant "High level formatting\\n">`
   \   00000078   0520A0E1           MOV      R2,R5
   \   0000007C   3C1086E2           ADD      R1,R6,#+60
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   ........           BL       sprintf
    114              GUI_DispString(kmc);
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           BL       GUI_DispString
    115            v = FS_GetVolumeFreeSpace(sVolName);
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   ........           BL       FS_GetVolumeFreeSpace
   \   00000098   0020A0E1           MOV      R2,R0
    116            if (v <= 0x7fff) {
   \   0000009C   800C52E3           CMP      R2,#+32768
    117              sprintf(kmc,"  Free space: %u bytes\n", v);
   \   000000A0   54108632           ADDCC    R1,R6,#+84
   \   000000A4   0600003A           BCC      ??MainTask_3
    118              GUI_DispString(kmc);
    119            } else if (v <= 0x2000000UL) {
   \   000000A8   0100A0E3           MOV      R0,#+1
   \   000000AC   800780E3           ORR      R0,R0,#0x2000000
   \   000000B0   000052E1           CMP      R2,R0
    120              v >>= 10;
    121              sprintf(kmc,"  Free space: %u kBytes\n", v);
   \   000000B4   2225A031           LSRCC    R2,R2,#+10
   \   000000B8   6C108632           ADDCC    R1,R6,#+108
    122              GUI_DispString(kmc);
    123            } else {
    124              v >>= 20;
    125              sprintf(kmc,"  Free space: %u MBytes\n", v);
   \   000000BC   222AA021           LSRCS    R2,R2,#+20
   \   000000C0   88108622           ADDCS    R1,R6,#+136
   \                     ??MainTask_3:
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   ........           BL       sprintf
    126              GUI_DispString(kmc);
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   ........           BL       GUI_DispString
    127            }
    128            
    129          ////
    130          //// Simple write from demo software
    131          ////  
    132          //	sprintf(ac, "%s\\simple.txt", sVolName);
    133          //	pFile = FS_FOpen(ac, "w");
    134          //	if (pFile) {
    135          //		if (FS_Write(pFile, "Test", 4) != 4)
    136          //             GUI_DispString("Write Error\n");
    137          //		if (FS_FClose(pFile))
    138          //			  	GUI_DispString("Could not close file\n");
    139          //	}  
    140          //	else {
    141          //    sprintf(kmc,"Could not open file: %s to write.\n", ac);
    142          //    GUI_DispString(kmc);
    143          //  	}
    144          //  
    145          //
    146          //  One big write using FS_Write
    147          //
    148          //	sprintf(ac, "%s\\FS_Write.txt", sVolName);
    149          //	pFile = FS_FOpen(ac, "w");
    150          //	if (pFile) {
    151          //	  	kmc[0] = 0;
    152          //	  	for (i=0; i < COUNT; i++)
    153          //	  	{
    154          //			char scratch[30];
    155          //		 
    156          //			sprintf(scratch,"Writing the number %d\n", i);
    157          //			strcat(kmc, scratch);
    158          //	  	}
    159          //	  	length = strlen(kmc);
    160          //		
    161          //	  	if (FS_Write(pFile, kmc, length) != length)
    162          //         GUI_DispString("Write Error\n");
    163          //		if (FS_FClose(pFile))
    164          //			  	GUI_DispString("Could not close file\n");
    165          //	}  
    166          //	else {
    167          //    	sprintf(kmc,"Could not open file: %s to write.\n", ac);
    168          //    	GUI_DispString(kmc);
    169          //   }
    170          //
    171          	
    172          //
    173          //  Many big writes using FS_Write
    174          //
    175          	sprintf(ac, "%s\\huge.txt", sVolName);
   \   000000D4   0520A0E1           MOV      R2,R5
   \   000000D8   A41086E2           ADD      R1,R6,#+164
   \   000000DC   20008DE2           ADD      R0,SP,#+32
   \   000000E0   ........           BL       sprintf
    176          	pFile = FS_FOpen(ac, "w");
   \   000000E4   471F8FE2           ADR      R1,??MainTask_0+0x4  ;; "w"
   \   000000E8   20008DE2           ADD      R0,SP,#+32
   \   000000EC   ........           BL       FS_FOpen
   \   000000F0   0070B0E1           MOVS     R7,R0
    177          	if (pFile) {
   \   000000F4   2400000A           BEQ      ??MainTask_4
    178          	  	kmc[0] = 0;
   \   000000F8   0000A0E3           MOV      R0,#+0
   \   000000FC   0000C4E5           STRB     R0,[R4, #+0]
    179          	  	for (i=0; i < COUNT; i++)
   \   00000100   0080A0E3           MOV      R8,#+0
    180          	  	{
    181          			char scratch[30];
    182          		 
    183          			sprintf(scratch,"Writing the number %d\n", i);
   \                     ??MainTask_5:
   \   00000104   0820A0E1           MOV      R2,R8
   \   00000108   B01086E2           ADD      R1,R6,#+176
   \   0000010C   0D00A0E1           MOV      R0,SP
   \   00000110   ........           BL       sprintf
    184          			strcat(kmc, scratch);
   \   00000114   0D10A0E1           MOV      R1,SP
   \   00000118   0400A0E1           MOV      R0,R4
   \   0000011C   ........           BL       strcat
    185          	  	}
   \   00000120   018088E2           ADD      R8,R8,#+1
   \   00000124   4B0F58E3           CMP      R8,#+300
   \   00000128   F5FFFFBA           BLT      ??MainTask_5
    186          	  	length = strlen(kmc);
   \   0000012C   0400A0E1           MOV      R0,R4
   \   00000130   ........           BL       strlen
   \   00000134   0080A0E1           MOV      R8,R0
    187          
    188          		GUI_DispString("Write Starts\n");
   \   00000138   C80086E2           ADD      R0,R6,#+200
   \   0000013C   ........           BL       GUI_DispString
    189          
    190          		for (i = 0; i < 200; i++)
   \   00000140   C890A0E3           MOV      R9,#+200
    191          		{
    192          			if (FS_Write(pFile, kmc, length) != length)
   \                     ??MainTask_6:
   \   00000144   0820A0E1           MOV      R2,R8
   \   00000148   0410A0E1           MOV      R1,R4
   \   0000014C   0700A0E1           MOV      R0,R7
   \   00000150   ........           BL       FS_Write
   \   00000154   080050E1           CMP      R0,R8
   \   00000158   0100000A           BEQ      ??MainTask_7
    193          				GUI_DispString("Write Error\n");
   \   0000015C   D80086E2           ADD      R0,R6,#+216
   \   00000160   ........           BL       GUI_DispString
    194          		}
   \                     ??MainTask_7:
   \   00000164   019059E2           SUBS     R9,R9,#+1
   \   00000168   F5FFFF1A           BNE      ??MainTask_6
    195          
    196          		GUI_DispString("Write Ends\n");
   \   0000016C   E80086E2           ADD      R0,R6,#+232
   \   00000170   ........           BL       GUI_DispString
    197          
    198          		if (FS_FClose(pFile))
   \   00000174   0700A0E1           MOV      R0,R7
   \   00000178   ........           BL       FS_FClose
   \   0000017C   000050E3           CMP      R0,#+0
   \   00000180   0700000A           BEQ      ??MainTask_8
    199          			  	GUI_DispString("Could not close file\n");
   \   00000184   F40086E2           ADD      R0,R6,#+244
   \   00000188   040000EA           B        ??MainTask_9
    200          	}  
    201          	else {
    202              	sprintf(kmc,"Could not open file: %s to write.\n", ac);
   \                     ??MainTask_4:
   \   0000018C   20208DE2           ADD      R2,SP,#+32
   \   00000190   431F86E2           ADD      R1,R6,#+268
   \   00000194   0400A0E1           MOV      R0,R4
   \   00000198   ........           BL       sprintf
    203              	GUI_DispString(kmc);
   \   0000019C   0400A0E1           MOV      R0,R4
   \                     ??MainTask_9:
   \   000001A0   ........           BL       GUI_DispString
    204             }
    205          
    206          	
    207          	
    208          ////  
    209          //// One big write using FS_FWrite
    210          ////
    211          //	sprintf(ac, "%s\\FS_FWrit.txt", sVolName);
    212          //	pFile = FS_FOpen(ac, "w");
    213          //	if (pFile) {
    214          //	  	kmc[0] = 0;
    215          //	  	for (i=0; i < COUNT; i++)
    216          //	  	{
    217          //			char scratch[30];
    218          //		 
    219          //			sprintf(scratch,"Writing the number %d\n", i);
    220          //			strcat(kmc, scratch);
    221          //	  	}
    222          //	  	length = strlen(kmc);
    223          //		
    224          //	  	if (FS_FWrite(kmc, length, 1, pFile) != 1)
    225          //         GUI_DispString("Write Error\n");
    226          //		if (FS_FClose(pFile))
    227          //			  	GUI_DispString("Could not close file\n");
    228          //	}  
    229          //	else {
    230          //    	sprintf(kmc,"Could not open file: %s to write.\n", ac);
    231          //    	GUI_DispString(kmc);
    232          //   }
    233          //
    234          ////
    235          //// Many small writes using FS_Write
    236          ////
    237          //	sprintf(ac, "%s\\multi_wr.txt", sVolName);
    238          //	pFile = FS_FOpen(ac, "w");
    239          //	if (pFile) {
    240          //	  for (i=0; i < COUNT; i++)
    241          //	  {
    242          //		   char scratch[30];
    243          //
    244          //		   sprintf(scratch,"Writing the number %d\n", i);
    245          //			retval = FS_Write(pFile, scratch, length = strlen(scratch));
    246          //			if (retval != length)
    247          //			  	GUI_DispString("Write Error\n");
    248          //	  }
    249          //		if (FS_FClose(pFile))
    250          //			  	GUI_DispString("Could not close file\n");
    251          //	}  
    252          //	else {
    253          //    sprintf(kmc,"Could not open file: %s to write.\n", ac);
    254          //    GUI_DispString(kmc);
    255          //  }
    256          //  
    257          ////
    258          //// Many small writes using FS_FWrite
    259          ////
    260          //	sprintf(ac, "%s\\multi_FW.txt", sVolName);
    261          //	pFile = FS_FOpen(ac, "w");
    262          //	if (pFile) {
    263          //	  for (i=0; i < COUNT; i++)
    264          //	  {
    265          //		   char scratch[30];
    266          //
    267          //		   sprintf(scratch,"Writing the number %d\n", i);
    268          //
    269          //		  	if (FS_FWrite(scratch, length = strlen(scratch), 1, pFile) != 1)
    270          //			  	GUI_DispString("Write Error\n");
    271          //	  }
    272          //		if (FS_FClose(pFile))
    273          //			  	GUI_DispString("Could not close file\n");
    274          //	}  
    275          //	else {
    276          //    sprintf(kmc,"Could not open file: %s to write.\n", ac);
    277          //    GUI_DispString(kmc);
    278          //  }
    279          //  
    280            
    281            
    282            
    283            
    284            v = FS_GetVolumeFreeSpace(sVolName);
   \                     ??MainTask_8:
   \   000001A4   0500A0E1           MOV      R0,R5
   \   000001A8   ........           BL       FS_GetVolumeFreeSpace
    285            if (v <= 0x7fff) {
   \   000001AC   800C50E3           CMP      R0,#+32768
    286              sprintf(kmc,"  Free space: %u bytes\n", v);
   \   000001B0   0020A031           MOVCC    R2,R0
   \   000001B4   54108632           ADDCC    R1,R6,#+84
   \   000001B8   0A00003A           BCC      ??MainTask_10
    287              GUI_DispString(kmc);
    288            } else if (v <= 0x2000000UL) {
   \   000001BC   0110A0E3           MOV      R1,#+1
   \   000001C0   801781E3           ORR      R1,R1,#0x2000000
   \   000001C4   010050E1           CMP      R0,R1
   \   000001C8   0400002A           BCS      ??MainTask_11
    289              v >>= 10;
    290              sprintf(kmc,"  Free space: %u kBytes\n", v);
   \   000001CC   2025A0E1           LSR      R2,R0,#+10
   \   000001D0   6C1086E2           ADD      R1,R6,#+108
   \   000001D4   0400A0E1           MOV      R0,R4
   \   000001D8   ........           BL       sprintf
   \   000001DC   050000EA           B        ??MainTask_12
    291            } else {
    292              v >>= 20;
    293              sprintf(kmc,"  Free space: %u MBytes\n", v);
   \                     ??MainTask_11:
   \   000001E0   202AA0E1           LSR      R2,R0,#+20
   \   000001E4   881086E2           ADD      R1,R6,#+136
   \                     ??MainTask_10:
   \   000001E8   0400A0E1           MOV      R0,R4
   \   000001EC   ........           BL       sprintf
    294              GUI_DispString(kmc);
   \   000001F0   0400A0E1           MOV      R0,R4
   \   000001F4   ........           BL       GUI_DispString
    295            }
    296          
    297            GUI_DispString("Finished\n");
   \                     ??MainTask_12:
   \   000001F8   4C0F86E2           ADD      R0,R6,#+304
   \   000001FC   ........           BL       GUI_DispString
    298            while(1);
   \                     ??MainTask_13:
   \   00000200   FEFFFFEA           B        ??MainTask_13
   \                     ??MainTask_0:
   \   00000204   00000000           DC8      "",0x0,0x0,0x0
   \   00000208   77000000           DC8      "w",0x0,0x0
   \   0000020C   ........           DC32     GUI_Font32_ASCII
   \   00000210   ........           DC32     kmc
   \   00000214   ........           DC32     `?<Constant "High level formatting\\n">`
   \   00000218   ........           DC32     `?<Constant "High level formatting\\n">` + 24
    299          }
    300          	
    301          	
    302          	
    303          	
    304          	
    305          	
    306          #else
    307          
    308          #ifdef _WINDOWS
    309          	SIM_Init();
    310          #endif
    311          
    312          #endif
    313          	
    314          	
    315          	
    316          	
    317          	
    318          	
    319          	
    320          #ifdef COLORTEST
    321          	GUI_SetFont(&GUI_Font32_ASCII);
    322                  GUI_DispString("BEGIN COLOR TEST ");
    323                   
    324          	GUI_SetColor(GUI_BLUE); //          0x00FF0000
    325                  GUI_DispString("BLUE ");
    326          	GUI_SetColor(GUI_GREEN); //         0x0000FF00
    327                  GUI_DispString("GREEN\n");
    328                  
    329          	GUI_SetColor(GUI_DARKBLUE); //      0x00800000
    330                  GUI_DispString("DARKBLUE ");
    331          	GUI_SetColor(GUI_DARKGREEN); //     0x00008000
    332                  GUI_DispString("DARKGREEN ");
    333          	GUI_SetColor(GUI_DARKRED); //       0x00000080
    334                  GUI_DispString("DARKRED\n");
    335                  
    336          	GUI_SetColor(GUI_RED); //           0x000000FF
    337                  GUI_DispString("RED ");
    338          	GUI_SetColor(GUI_CYAN); //          0x00FFFF00
    339                  GUI_DispString("CYAN ");
    340          	GUI_SetColor(GUI_MAGENTA); //       0x00FF00FF
    341                  GUI_DispString("MAGENTA ");
    342          	GUI_SetColor(GUI_YELLOW); //        0x0000FFFF
    343                  GUI_DispString("YELLOW\n");
    344                  
    345          	GUI_SetColor(GUI_LIGHTBLUE); //     0x00FF8080
    346                  GUI_DispString("LIGHTBLUE ");
    347          	GUI_SetColor(GUI_LIGHTGREEN); //    0x0080FF80
    348                  GUI_DispString("LIGHTGREEN ");
    349          	GUI_SetColor(GUI_LIGHTRED); //      0x008080FF
    350                  GUI_DispString("LIGHTRED\n");
    351                  
    352          	GUI_SetColor(GUI_LIGHTCYAN); //     0x00FFFF80
    353                  GUI_DispString("LIGHTCYAN ");
    354          	GUI_SetColor(GUI_LIGHTMAGENTA); //  0x00FF80FF
    355                  GUI_DispString("LIGHTMAGENTA ");
    356          	GUI_SetColor(GUI_LIGHTYELLOW); //   0x0080FFFF
    357                  GUI_DispString("LIGHTYELLOW\n");
    358                  
    359          	GUI_SetColor(GUI_DARKCYAN); //      0x00808000
    360                  GUI_DispString("DARKCYAN ");
    361          	GUI_SetColor(GUI_DARKMAGENTA); //   0x00800080
    362                  GUI_DispString("DARKMAGENTA ");
    363           	GUI_SetColor(GUI_RED); //           0x000000FF
    364                  GUI_DispString("RED\n");
    365                 
    366          	GUI_SetColor(GUI_DARKYELLOW); //    0x00008080
    367                  GUI_DispString("DARKYELLOW ");
    368          	GUI_SetColor(GUI_WHITE); //         0x00FFFFFF
    369                  GUI_DispString("WHITE ");
    370          	GUI_SetColor(GUI_LIGHTGRAY); //     0x00D3D3D3
    371                  GUI_DispString("LIGHTGRAY\n");
    372                  
    373          	GUI_SetColor(GUI_GREEN); //          0x00808080
    374                  GUI_DispString("GREEN ");
    375          	GUI_SetColor(GUI_DARKGRAY); //      0x00404040
    376                  GUI_DispString("DARKGRAY ");
    377          	GUI_SetColor(GUI_YELLOW);
    378                  GUI_DispString("YELLOW ");
    379          	GUI_SetColor(GUI_BROWN); //         0x002A2AA5
    380                  GUI_DispString("BROWN\n");
    381          #else
    382          //	 Display_1by6();
    383          	Display_GeneralConfig(0);
    384          
    385          
    386          
    387          	// test
    388          ///		Display_GaugeScreen(0, 0);
    389          
    390          #endif
    391          	// Main task loop
    392          	while(1)
    393          	{
    394          #ifndef COLORTEST
    395          		if (screen_scrolling == ACTIVE)
    396          			ProcessScreenMovement(7);
    397          #endif
    398          		GUI_Delay(10);
    399          #ifdef _WINDOWS
    400          		if (SIM_Tick())
    401          			return;
    402          #endif
    403          	}
    404          }

   \                                 In section .rodata, align 1
   \   00000000   00                 DC8 ""

   \                                 In section .rodata, align 4
   \                     `?<Constant "High level formatting\\n">`:
   \   00000000   48696768206C       DC8 "High level formatting\012"
   \              6576656C2066
   \              6F726D617474
   \              696E670A00  
   \   00000017   00                 DC8 0
   \   00000018   46535F497348       DC8 "FS_IsHLFormatted returned an error\012"
   \              4C466F726D61
   \              747465642072
   \              657475726E65
   \              6420616E2065
   \              72726F720A00
   \   0000003C   52756E6E696E       DC8 "Running sample on \"%s\"\012"
   \              672073616D70
   \              6C65206F6E20
   \              222573220A00
   \   00000054   202046726565       DC8 "  Free space: %u bytes\012"
   \              207370616365
   \              3A2025752062
   \              797465730A00
   \   0000006C   202046726565       DC8 "  Free space: %u kBytes\012"
   \              207370616365
   \              3A202575206B
   \              42797465730A
   \              00          
   \   00000085   000000             DC8 0, 0, 0
   \   00000088   202046726565       DC8 "  Free space: %u MBytes\012"
   \              207370616365
   \              3A202575204D
   \              42797465730A
   \              00          
   \   000000A1   000000             DC8 0, 0, 0
   \   000000A4   25735C687567       DC8 "%s\\huge.txt"
   \              652E74787400
   \   000000B0   57726974696E       DC8 "Writing the number %d\012"
   \              672074686520
   \              6E756D626572
   \              2025640A00  
   \   000000C7   00                 DC8 0
   \   000000C8   577269746520       DC8 "Write Starts\012"
   \              537461727473
   \              0A00        
   \   000000D6   0000               DC8 0, 0
   \   000000D8   577269746520       DC8 "Write Error\012"
   \              4572726F720A
   \              00          
   \   000000E5   000000             DC8 0, 0, 0
   \   000000E8   577269746520       DC8 "Write Ends\012"
   \              456E64730A00
   \   000000F4   436F756C6420       DC8 "Could not close file\012"
   \              6E6F7420636C
   \              6F7365206669
   \              6C650A00    
   \   0000010A   0000               DC8 0, 0
   \   0000010C   436F756C6420       DC8 "Could not open file: %s to write.\012"
   \              6E6F74206F70
   \              656E2066696C
   \              653A20257320
   \              746F20777269
   \              74652E0A00  
   \   0000012F   00                 DC8 0
   \   00000130   46696E697368       DC8 "Finished\012"
   \              65640A00    
   \   0000013A   0000               DC8 0, 0

   \                                 In section .rodata, align 2
   \   00000000   7700               DC8 "w"
    405          
    406          /****** End of File *************************************************/

   Maximum stack usage in bytes:

     Function .cstack
     -------- -------
     MainTask    320


   Section sizes:

     Function/Label                        Bytes
     --------------                        -----
     screen_scrolling                         4
     kmc                                   9000
     MainTask                               540
     ?<Constant "">                           1
     ?<Constant "High level formatting\n">  316
     ?<Constant "w">                          2

 
 9 004 bytes in section .bss
   319 bytes in section .rodata
   540 bytes in section .text
 
   540 bytes of CODE  memory
   319 bytes of CONST memory
 9 004 bytes of DATA  memory

Errors: none
Warnings: 1
