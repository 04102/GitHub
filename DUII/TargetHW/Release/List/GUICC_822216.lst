###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:15:21 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUICC_822216.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\GUICC_822216.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUICC_822216.lst           #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUICC_822216.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUICC_822216.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUICC_822216.c
     19          Purpose     : Color conversion routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "LCD_Protected.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       _Color2Index_822216
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          static unsigned _Color2Index_822216(LCD_COLOR Color) {
   \                     _Color2Index_822216:
   \   00000000   00402DE9           PUSH     {LR}
     36            U32 r, g, b, Alpha;
     37          
     38            /* Calculate color components (8 bit info) */
     39            r = (Color & 0xff)     >>  0;
     40            g = (Color & 0xff00)   >>  8;
   \   00000004   FF20A0E3           MOV      R2,#+255
     41            b = (Color & 0xff0000) >> 16;
   \   00000008   FF30A0E3           MOV      R3,#+255
   \   0000000C   FF1000E2           AND      R1,R0,#0xFF
   \   00000010   202402E0           AND      R2,R2,R0, LSR #+8
   \   00000014   203803E0           AND      R3,R3,R0, LSR #+16
     42            /* Calculate alpha component */
     43            Alpha = (((Color & 0xff000000) >> 24) ^ 0xff) / 0x11;
   \   00000018   FFC0A0E3           MOV      R12,#+255
   \   0000001C   ........           LDR      LR,??DataTable2  ;; 0xf0f0f0f1
   \   00000020   200C2CE0           EOR      R0,R12,R0, LSR #+24
   \   00000024   90EE8CE0           UMULL    LR,R12,R0,LR
     44            if ((r == g) && (g == b)) {
   \   00000028   020051E1           CMP      R1,R2
   \   0000002C   2C02A0E1           LSR      R0,R12,#+4
   \   00000030   03005201           CMPEQ    R2,R3
   \   00000034   0200001A           BNE      ??_Color2Index_822216_0
     45              /* Return gray */
     46              return (r >> 5) | (Alpha << 4);
   \   00000038   0002A0E1           LSL      R0,R0,#+4
   \   0000003C   A10280E1           ORR      R0,R0,R1, LSR #+5
   \   00000040   0080BDE8           POP      {PC}
     47            }
     48            /* Reduce color information to 1 bit */
     49            r >>= 7;
     50            g >>= 7;
     51            b >>= 7;
     52            /* Return color */
     53            return (r << 0) | (g << 1) | (b << 2) | (1 << 3) | (Alpha << 4);
   \                     ??_Color2Index_822216_0:
   \   00000044   A223A0E1           LSR      R2,R2,#+7
   \   00000048   8220A0E1           LSL      R2,R2,#+1
   \   0000004C   A11382E1           ORR      R1,R2,R1, LSR #+7
   \   00000050   A323A0E1           LSR      R2,R3,#+7
   \   00000054   021181E1           ORR      R1,R1,R2, LSL #+2
   \   00000058   000281E1           ORR      R0,R1,R0, LSL #+4
   \   0000005C   080080E3           ORR      R0,R0,#0x8
   \   00000060   0080BDE8           POP      {PC}             ;; return
     54          }
     55          
     56          /*********************************************************************
     57          *
     58          *       _Index2Color_822216
     59          */

   \                                 In section .text, align 4, keep-with-next
     60          static LCD_COLOR _Index2Color_822216(unsigned Index) {
     61            U32 r, g, b, Alpha;
     62          
     63            /* Calculate alpha factor */
     64            Alpha = (U32)((((Index & 0xf0) >> 4) ^ 0xf) * 0x11) << 24;
   \                     _Index2Color_822216:
   \   00000000   0F10A0E3           MOV      R1,#+15
   \   00000004   201201E0           AND      R1,R1,R0, LSR #+4
   \   00000008   0F1021E2           EOR      R1,R1,#0xF
   \   0000000C   011281E0           ADD      R1,R1,R1, LSL #+4
   \   00000010   011CA0E1           LSL      R1,R1,#+24
     65            if ((Index & (1 << 3)) == 0) {
   \   00000014   080010E3           TST      R0,#0x8
   \   00000018   0600001A           BNE      ??_Index2Color_822216_0
     66              /* Return gray */
     67              Index &= 7;
   \   0000001C   070000E2           AND      R0,R0,#0x7
     68              return Alpha | ((Index * (255 / 7) + (Index >> 1)) * 0x010101);
   \   00000020   2420A0E3           MOV      R2,#+36
   \   00000024   820063E1           SMULBB   R3,R2,R0
   \   00000028   ........           LDR      R2,??DataTable2_1  ;; 0x10101
   \   0000002C   A00083E0           ADD      R0,R3,R0, LSR #+1
   \   00000030   920000E0           MUL      R0,R2,R0
   \   00000034   0A0000EA           B        ??_Index2Color_822216_1
     69            }
     70            /* Calculate color components */
     71            r = (Index & (1 << 0)) ? 0x0000ff : 0;
   \                     ??_Index2Color_822216_0:
   \   00000038   010010E3           TST      R0,#0x1
   \   0000003C   FF20A013           MOVNE    R2,#+255
   \   00000040   0020A003           MOVEQ    R2,#+0
     72            g = (Index & (1 << 1)) ? 0x00ff00 : 0;
   \   00000044   020010E3           TST      R0,#0x2
   \   00000048   FF3CA013           MOVNE    R3,#+65280
   \   0000004C   0030A003           MOVEQ    R3,#+0
     73            b = (Index & (1 << 2)) ? 0xff0000 : 0;
   \   00000050   040010E3           TST      R0,#0x4
     74            /* Return color */
     75            return Alpha | r | g | b;
   \   00000054   011082E1           ORR      R1,R2,R1
   \   00000058   FF08A013           MOVNE    R0,#+16711680
   \   0000005C   0000A003           MOVEQ    R0,#+0
   \   00000060   011083E1           ORR      R1,R3,R1
   \                     ??_Index2Color_822216_1:
   \   00000064   010080E1           ORR      R0,R0,R1
   \   00000068   1EFF2FE1           BX       LR               ;; return
     76          }
     77          
     78          /*********************************************************************
     79          *
     80          *       _GetIndexMask_822216
     81          */

   \                                 In section .text, align 4, keep-with-next
     82          static unsigned _GetIndexMask_822216(void) {
     83            return 0xff;
   \                     _GetIndexMask_822216:
   \   00000000   FF00A0E3           MOV      R0,#+255
   \   00000004   1EFF2FE1           BX       LR               ;; return
     84          }
     85          
     86          /*********************************************************************
     87          *
     88          *       Public data
     89          *
     90          **********************************************************************
     91          */
     92          /*********************************************************************
     93          *
     94          *       LCD_API_ColorConv_822216
     95          *
     96          * Purpose
     97          *   API table for this color conversion mode. Only used by memory
     98          *   devices in this mode.
     99          */

   \                                 In section .rodata, align 4, keep-with-next
    100          const LCD_API_COLOR_CONV LCD_API_ColorConv_822216 = {
   \                     LCD_API_ColorConv_822216:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Color2Index_822216, _Index2Color_822216, _GetIndexMask_822216
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   F1F0F0F0           DC32     0xf0f0f0f1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   01010100           DC32     0x10101
    101            _Color2Index_822216,
    102            _Index2Color_822216,
    103            _GetIndexMask_822216
    104          };
    105          
    106          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     _Color2Index_822216       4
     _GetIndexMask_822216      0
     _Index2Color_822216       0


   Section sizes:

     Function/Label           Bytes
     --------------           -----
     _Color2Index_822216       100
     _Index2Color_822216       108
     _GetIndexMask_822216        8
     LCD_API_ColorConv_822216   12
     ??DataTable2                4
     ??DataTable2_1              4

 
  12 bytes in section .rodata
 224 bytes in section .text
 
 224 bytes of CODE  memory
  12 bytes of CONST memory

Errors: none
Warnings: none
