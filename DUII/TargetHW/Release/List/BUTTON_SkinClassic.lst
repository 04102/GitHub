###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:14:21 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\BUTTON_SkinClassic.c                #
#    Command line =  C:\DUII\TargetHW\GUI\BUTTON_SkinClassic.c -D DEBUG=1 -D  #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\BUTTON_SkinClassic.lst     #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\BUTTON_SkinClassic.o        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\BUTTON_SkinClassic.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : BUTTON_SkinClassic.c
     19          Purpose     : Implementation of button widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "BUTTON_Private.h"
     24          #include "GUI_Private.h"
     25          #include "WM_Intern.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Static code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       _Paint
     38          */

   \                                 In section .text, align 4, keep-with-next
     39          static void _Paint(BUTTON_Handle hObj) {
   \                     _Paint:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   0040A0E1           MOV      R4,R0
     40            BUTTON_Obj * pObj;
     41            int EffectSize;
     42            const char * s;
     43            unsigned int Index;
     44            int State, PressedState, ColorIndex;
     45            GUI_RECT RectClient, RectInside, RectText;
     46            WM_HMEM hDrawObj;
     47            
     48            pObj = BUTTON_LOCK_H(hObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   0060A0E1           MOV      R6,R0
     49            State = pObj->Widget.State;
     50            PressedState = (State & BUTTON_STATE_PRESSED) ? 1 : 0;
   \   00000014   B203D6E1           LDRH     R0,[R6, #+50]
   \   00000018   2004A0E1           LSR      R0,R0,#+8
   \   0000001C   015000E2           AND      R5,R0,#0x1
     51            ColorIndex   = (WM__IsEnabled(hObj)) ? PressedState : 2;
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       WM__IsEnabled
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0570A011           MOVNE    R7,R5
   \   00000030   0270A003           MOVEQ    R7,#+2
     52            GUI_SetFont(pObj->Props.pFont);
   \   00000034   540096E5           LDR      R0,[R6, #+84]
   \   00000038   ........           BL       GUI_SetFont
     53            GUI_DEBUG_LOG("BUTTON: Paint(..)\n");
     54            GUI_GetClientRect(&RectClient);
   \   0000003C   0D00A0E1           MOV      R0,SP
   \   00000040   ........           BL       GUI_GetClientRect
     55            //
     56            // Start drawing
     57            //
     58            RectInside = RectClient;
   \   00000044   00009DE5           LDR      R0,[SP, #+0]
   \   00000048   04109DE5           LDR      R1,[SP, #+4]
   \   0000004C   08208DE2           ADD      R2,SP,#+8
   \   00000050   030082E8           STM      R2,{R0,R1}
     59            //
     60            // Draw the 3D effect (if configured)
     61            //
     62            if ((PressedState) == 0) {
   \   00000054   000055E3           CMP      R5,#+0
   \   00000058   2C0096E5           LDR      R0,[R6, #+44]
   \   0000005C   0400001A           BNE      ??_Paint_0
     63              pObj->Widget.pEffect->pfDrawUp();
   \   00000060   040090E5           LDR      R0,[R0, #+4]
   \   00000064   30FF2FE1           BLX      R0
     64              EffectSize = pObj->Widget.pEffect->EffectSize;
   \                     ??_Paint_1:
   \   00000068   2C0096E5           LDR      R0,[R6, #+44]
   \   0000006C   002090E5           LDR      R2,[R0, #+0]
   \   00000070   0E0000EA           B        ??_Paint_2
     65            } else {
     66              if (pObj->Widget.pEffect->pfDrawFlat) {
   \                     ??_Paint_0:
   \   00000074   140090E5           LDR      R0,[R0, #+20]
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0300000A           BEQ      ??_Paint_3
     67                pObj->Widget.pEffect->pfDrawFlat();
   \   00000080   2C0096E5           LDR      R0,[R6, #+44]
   \   00000084   140090E5           LDR      R0,[R0, #+20]
   \   00000088   30FF2FE1           BLX      R0
     68                EffectSize = pObj->Widget.pEffect->EffectSize;
   \   0000008C   F5FFFFEA           B        ??_Paint_1
     69              } else {
     70                LCD_SetColor(pObj->Props.FrameColor);
   \                     ??_Paint_3:
   \   00000090   500096E5           LDR      R0,[R6, #+80]
   \   00000094   ........           BL       LCD_SetColor
     71                GUI_DrawRect(RectClient.y0, RectClient.x0, RectClient.x1, RectClient.y1);
   \   00000098   F630DDE1           LDRSH    R3,[SP, #+6]
   \   0000009C   F420DDE1           LDRSH    R2,[SP, #+4]
   \   000000A0   F010DDE1           LDRSH    R1,[SP, #+0]
   \   000000A4   F200DDE1           LDRSH    R0,[SP, #+2]
   \   000000A8   ........           BL       GUI_DrawRect
     72                EffectSize = 1;
   \   000000AC   0120A0E3           MOV      R2,#+1
     73              }
     74            }
     75            GUI__ReduceRect(&RectInside, &RectInside, EffectSize);
   \                     ??_Paint_2:
   \   000000B0   08108DE2           ADD      R1,SP,#+8
   \   000000B4   08008DE2           ADD      R0,SP,#+8
   \   000000B8   ........           BL       GUI__ReduceRect
     76            //
     77            // Draw background
     78            //
     79            LCD_SetBkColor (pObj->Props.aBkColor[ColorIndex]);
   \   000000BC   078186E0           ADD      R8,R6,R7, LSL #+2
   \   000000C0   340098E5           LDR      R0,[R8, #+52]
   \   000000C4   ........           BL       LCD_SetBkColor
     80            LCD_SetColor   (pObj->Props.aTextColor[ColorIndex]);
   \   000000C8   400098E5           LDR      R0,[R8, #+64]
   \   000000CC   ........           BL       LCD_SetColor
     81            WM_SetUserClipRect(&RectInside);
   \   000000D0   08008DE2           ADD      R0,SP,#+8
   \   000000D4   ........           BL       WM_SetUserClipRect
     82            GUI_Clear();
   \   000000D8   ........           BL       GUI_Clear
     83            //
     84            // Draw bitmap.
     85            // If we have only one, we will use it.
     86            // If we have to we will use the second one (Index 1) for the pressed state
     87            //
     88            if (ColorIndex < 2) {
   \   000000DC   020057E3           CMP      R7,#+2
   \   000000E0   060000AA           BGE      ??_Paint_4
     89              Index = (pObj->ahDrawObj[BUTTON_BI_PRESSED] && PressedState) ? BUTTON_BI_PRESSED : BUTTON_BI_UNPRESSED;
   \   000000E4   6C0096E5           LDR      R0,[R6, #+108]
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   0600000A           BEQ      ??_Paint_5
   \   000000F0   000055E3           CMP      R5,#+0
   \   000000F4   0100A013           MOVNE    R0,#+1
   \   000000F8   0000A003           MOVEQ    R0,#+0
   \   000000FC   020000EA           B        ??_Paint_5
     90            } else {
     91              Index = pObj->ahDrawObj[BUTTON_BI_DISABLED] ? BUTTON_BI_DISABLED : BUTTON_BI_UNPRESSED;
   \                     ??_Paint_4:
   \   00000100   700096E5           LDR      R0,[R6, #+112]
   \   00000104   000050E3           CMP      R0,#+0
   \   00000108   0200A013           MOVNE    R0,#+2
     92            }
     93            hDrawObj = pObj->ahDrawObj[Index];
   \                     ??_Paint_5:
   \   0000010C   000186E0           ADD      R0,R6,R0, LSL #+2
   \   00000110   687090E5           LDR      R7,[R0, #+104]
     94            GUI_UNLOCK_H(pObj);
   \   00000114   ........           BL       GUI_ALLOC_UnlockH
     95            GUI_DRAW__Draw(hDrawObj, hObj, 0, 0);
   \   00000118   0030A0E3           MOV      R3,#+0
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0410A0E1           MOV      R1,R4
   \   00000124   0700A0E1           MOV      R0,R7
   \   00000128   ........           BL       GUI_DRAW__Draw
     96            pObj = BUTTON_LOCK_H(hObj);
   \   0000012C   0400A0E1           MOV      R0,R4
   \   00000130   ........           BL       GUI_ALLOC_LockH
     97            //
     98            // Draw the actual button (background and text) *
     99            //
    100            RectText = RectInside;
   \   00000134   08108DE2           ADD      R1,SP,#+8
   \   00000138   0040A0E1           MOV      R4,R0
   \   0000013C   002091E5           LDR      R2,[R1, #+0]
   \   00000140   043091E5           LDR      R3,[R1, #+4]
   \   00000144   10008DE2           ADD      R0,SP,#+16
   \   00000148   0C0080E8           STM      R0,{R2,R3}
    101            if (PressedState) {
   \   0000014C   000055E3           CMP      R5,#+0
   \   00000150   0200000A           BEQ      ??_Paint_6
    102              GUI_MoveRect(&RectText, BUTTON_3D_MOVE_X,BUTTON_3D_MOVE_Y);
   \   00000154   0020A0E3           MOV      R2,#+0
   \   00000158   0010A0E3           MOV      R1,#+0
   \   0000015C   ........           BL       GUI_MoveRect
    103            }
    104            if (pObj->hpText) {
   \                     ??_Paint_6:
   \   00000160   640094E5           LDR      R0,[R4, #+100]
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   0800000A           BEQ      ??_Paint_7
    105              GUI_SetTextMode(GUI_TM_TRANS);
   \   0000016C   0200A0E3           MOV      R0,#+2
   \   00000170   ........           BL       GUI_SetTextMode
    106              s = (const char *)GUI_LOCK_H(pObj->hpText);
   \   00000174   640094E5           LDR      R0,[R4, #+100]
   \   00000178   ........           BL       GUI_ALLOC_LockH
    107              GUI_DispStringInRect(s, &RectText, pObj->Props.Align);
   \   0000017C   FC25D4E1           LDRSH    R2,[R4, #+92]
   \   00000180   10108DE2           ADD      R1,SP,#+16
   \   00000184   ........           BL       GUI_DispStringInRect
    108              GUI_UNLOCK_H(s);
   \   00000188   ........           BL       GUI_ALLOC_UnlockH
    109            }
    110          //
    111          // KMC - we do not want to draw the focus rectangle, ever
    112          //
    113            ////
    114            //// Draw focus
    115            ////
    116            //if (State & BUTTON_STATE_FOCUS) {
    117            //  LCD_SetColor(pObj->Props.FocusColor);
    118            //  GUI_DrawFocusRect(&RectClient, pObj->Widget.pEffect->EffectSize > 2 ? pObj->Widget.pEffect->EffectSize : 2);
    119            //}
    120            WM_SetUserClipRect(NULL);
   \   0000018C   0000A0E3           MOV      R0,#+0
   \                     ??_Paint_7:
   \   00000190   ........           BL       WM_SetUserClipRect
    121            GUI_UNLOCK_H(pObj);
   \   00000194   ........           BL       GUI_ALLOC_UnlockH
    122          }
   \   00000198   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   0000019C   F081BDE8           POP      {R4-R8,PC}       ;; return
    123          
    124          /*********************************************************************
    125          *
    126          *       _Create
    127          */

   \                                 In section .text, align 4, keep-with-next
    128          static void _Create(BUTTON_Handle hObj) {
    129            // Nothing special to do...
    130            GUI_USE_PARA(hObj);
    131          }
   \                     _Create:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    132          
    133          /*********************************************************************
    134          *
    135          *        Private data
    136          *
    137          **********************************************************************
    138          */

   \                                 In section .text, align 4, keep-with-next
    139          const WIDGET_SKIN BUTTON__SkinClassic = {
   \                     BUTTON__SkinClassic:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Paint, _Create
   \              ....        
   \   00000008   00000000           DC8 0, 0, 0, 0
    140            _Paint,
    141            _Create
    142          };
    143          
    144          /*********************************************************************
    145          *
    146          *        Public code
    147          *
    148          **********************************************************************
    149          */
    150          /*********************************************************************
    151          *
    152          *       BUTTON_SetSkinClassic
    153          */

   \                                 In section .text, align 4, keep-with-next
    154          void BUTTON_SetSkinClassic(BUTTON_Handle hObj) {
   \                     BUTTON_SetSkinClassic:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    155            BUTTON_Obj * pObj;
    156          
    157            pObj = BUTTON_LOCK_H(hObj);
    158            pObj->pWidgetSkin = &BUTTON__SkinClassic;
   \   00000008   ........           BL       GUI_ALLOC_LockH
   \   0000000C   ........           ADR      R1,BUTTON__SkinClassic
   \   00000010   601080E5           STR      R1,[R0, #+96]
    159            GUI_UNLOCK_H(pObj);
   \   00000014   ........           BL       GUI_ALLOC_UnlockH
    160            WM_InvalidateWindow(hObj);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   ........           B        WM_InvalidateWindow  ;; tailcall
    161          }
    162          
    163          /*********************************************************************
    164          *
    165          *       BUTTON_SetDefaultSkinClassic
    166          */

   \                                 In section .text, align 4, keep-with-next
    167          void BUTTON_SetDefaultSkinClassic(void) {
    168            BUTTON__pSkinDefault = &BUTTON__SkinClassic;
   \                     BUTTON_SetDefaultSkinClassic:
   \   00000000   ........           LDR      R0,??DataTable1
   \   00000004   ........           ADR      R1,BUTTON__SkinClassic
   \   00000008   001080E5           STR      R1,[R0, #+0]
    169          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     BUTTON__pSkinDefault
    170          
    171          
    172          #else                            /* Avoid empty object files */
    173            void BUTTON_SkinClassic_C(void);
    174            void BUTTON_SkinClassic_C(void) {}
    175          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     BUTTON_SetDefaultSkinClassic      0
     BUTTON_SetSkinClassic             8
     _Create                           0
     _Paint                           48


   Section sizes:

     Function/Label               Bytes
     --------------               -----
     _Paint                        416
     _Create                         4
     BUTTON__SkinClassic            12
     BUTTON_SetSkinClassic          36
     BUTTON_SetDefaultSkinClassic   16
     ??DataTable1                    4

 
 488 bytes in section .text
 
 488 bytes of CODE memory

Errors: none
Warnings: none
