###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:15:49 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI__DrawBitmap16bpp.c              #
#    Command line =  C:\DUII\TargetHW\GUI\GUI__DrawBitmap16bpp.c -D DEBUG=1   #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D  #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI__DrawBitmap16bpp.lst   #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI__DrawBitmap16bpp.o      #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI__DrawBitmap16bpp.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI__DrawBitmap16bpp.c
     19          Purpose     : Implementation of GUI__DrawBitmap16bpp
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Private code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       GUI__DrawBitmap16bpp
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          void GUI__DrawBitmap16bpp(int x0, int y0, int xSize, int ySize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag, tLCDDEV_Index2Color * pfIndex2Color) {
   \                     GUI__DrawBitmap16bpp:
   \   00000000   F54F2DE9           PUSH     {R0,R2,R4-R11,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0190A0E1           MOV      R9,R1
   \   0000000C   0380A0E1           MOV      R8,R3
   \   00000010   48609DE5           LDR      R6,[SP, #+72]
   \   00000014   50509DE5           LDR      R5,[SP, #+80]
   \   00000018   58409DE5           LDR      R4,[SP, #+88]
     36            const U16 * pData;
     37            int x, y, xi, yi, yMax, PrevIndex, Mag, BytesPerLine, UseDrawBitmap = 0;
     38            LCD_PIXELINDEX Index;
     39            const U16 GUI_UNI_PTR * p;
     40            GUI_COLOR OldColor; 
     41          
     42            GUI_USE_PARA(pLogPal);
     43            OldColor = GUI_GetColor();
   \   0000001C   ........           BL       GUI_GetColor
   \   00000020   10008DE5           STR      R0,[SP, #+16]
     44            PrevIndex = LCD_GetColorIndex();
   \   00000024   ........           BL       LCD_GetColorIndex
   \   00000028   0070A0E1           MOV      R7,R0
     45            pData = (const U16 *)pPixel;
     46            Mag = (xMag | yMag);
     47            BytesPerLine = xSize * 2;
   \   0000002C   20009DE5           LDR      R0,[SP, #+32]
   \   00000030   00608DE5           STR      R6,[SP, #+0]
   \   00000034   8000A0E1           LSL      R0,R0,#+1
   \   00000038   18008DE5           STR      R0,[SP, #+24]
     48            /* Check if bitmaps color format fits to the current color conversion */
     49            if (Mag == 1) {
   \   0000003C   54009DE5           LDR      R0,[SP, #+84]
   \   00000040   050080E1           ORR      R0,R0,R5
   \   00000044   010050E3           CMP      R0,#+1
   \   00000048   1400001A           BNE      ??GUI__DrawBitmap16bpp_0
   \   0000004C   A4039FE5           LDR      R0,??GUI__DrawBitmap16bpp_1
   \   00000050   1100D0E5           LDRB     R0,[R0, #+17]
     50              tLCDDEV_Index2Color * pfIndex2ColorCompare;
     51              pfIndex2ColorCompare = GUI_GetpfIndex2ColorEx(GUI_Context.SelLayer); /* Get pointer to color conversion routine */
     52              if (pfIndex2ColorCompare == pfIndex2Color) {                         /* Check if color conversion routine fits  */
   \   00000054   ........           BL       GUI_GetpfIndex2ColorEx
   \   00000058   040050E1           CMP      R0,R4
   \   0000005C   7B00001A           BNE      ??GUI__DrawBitmap16bpp_2
     53                UseDrawBitmap = 1;
     54              }
     55            }
     56            if (UseDrawBitmap) {
     57              LCD_DrawBitmap(x0, y0, xSize, ySize, 1, 1, 16, BytesPerLine, pPixel, 0);
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   14008DE5           STR      R0,[SP, #+20]
   \   00000068   18009DE5           LDR      R0,[SP, #+24]
   \   0000006C   10608DE5           STR      R6,[SP, #+16]
   \   00000070   0C008DE5           STR      R0,[SP, #+12]
   \   00000074   1000A0E3           MOV      R0,#+16
   \   00000078   08008DE5           STR      R0,[SP, #+8]
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   04008DE5           STR      R0,[SP, #+4]
   \   00000084   00008DE5           STR      R0,[SP, #+0]
   \   00000088   0830A0E1           MOV      R3,R8
   \   0000008C   20209DE5           LDR      R2,[SP, #+32]
   \   00000090   0910A0E1           MOV      R1,R9
   \   00000094   1C009DE5           LDR      R0,[SP, #+28]
   \   00000098   ........           BL       LCD_DrawBitmap
   \   0000009C   690000EA           B        ??GUI__DrawBitmap16bpp_3
     58            } else {
     59              if (Mag == 1) {
     60                /* Perform clipping */
     61                U16 Value;
     62                const U16 * pSrc;
     63                U32 Color;
     64                tLCDDEV_Color2Index * pfColor2Index;
     65                LCD_API_NEXT_PIXEL * pNextPixel_API;
     66                int x1, y1, Diff;
     67                y1 = y0 + ySize - 1;
     68                x1 = x0 + xSize - 1;
     69                /* Clip Y */
     70                if (y0 < GUI_Context.ClipRect.y0) {
     71                  Diff = GUI_Context.ClipRect.y0 -y0;
     72                  y0   = GUI_Context.ClipRect.y0;
     73                  #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
     74                    pData += (U32)Diff * (U32)BytesPerLine / 2;
     75                  #else
     76                    pData += (unsigned)Diff * (unsigned)BytesPerLine / 2;
     77                  #endif
     78                  ySize -= Diff;
     79                }
     80                Diff = y1 - GUI_Context.ClipRect.y1;
     81                if (Diff > 0) {
     82                  ySize -= Diff;
     83                }
     84                if (ySize <=0) {
     85          		    return;
     86                }
     87                /* Clip right side */
     88                Diff = x1 - GUI_Context.ClipRect.x1;
     89                if (Diff > 0) {
     90                  xSize -= Diff;
     91                }
     92                /* Clip left side */
     93                if (x0 < GUI_Context.ClipRect.x0) {
     94                  Diff = GUI_Context.ClipRect.x0-x0;
     95          			  xSize -= Diff;
     96                  pData += Diff; 
     97                  x0 += Diff; 
     98                }
     99                if (xSize <=0) {
    100          		    return;
    101                }
    102                /*
    103                 * Rectangle filling with index values
    104                 */
    105                pNextPixel_API = LCD_GetNextPixelAPI();
    106                pfColor2Index = GUI_GetpfColor2IndexEx(GUI_Context.SelLayer);
    107                pNextPixel_API->pfStart(x0, y0, x1, y1); /* Initialize drawing routine of the driver */
    108                while (ySize--) {
    109                  pSrc = (const U16 *)pData;
    110                  for (x = 0; x < xSize; x++) {
    111                    Value = *pSrc++;
    112                    Color = pfIndex2Color(Value);
    113                    Index = pfColor2Index(Color);
    114                    pNextPixel_API->pfSetPixel(Index); /* Send index value to the driver */
    115                  }
    116                  if (ySize) {
    117                    pNextPixel_API->pfNextLine(); /* Increment line */
    118                    pData += BytesPerLine >> 1;
    119                  }
    120                }
    121                pNextPixel_API->pfEnd(); /* Done */
    122              } else {
    123                /* Magnified output using LCD_FillRect() */
    124                for (y = y0, yi = 0; yi < ySize; yi++, y += yMag, pPixel += BytesPerLine) {
   \                     ??GUI__DrawBitmap16bpp_0:
   \   000000A0   0960A0E1           MOV      R6,R9
   \   000000A4   010058E3           CMP      R8,#+1
   \   000000A8   640000BA           BLT      ??GUI__DrawBitmap16bpp_4
   \   000000AC   08808DE5           STR      R8,[SP, #+8]
    125                  yMax = y + yMag - 1;
   \                     ??GUI__DrawBitmap16bpp_5:
   \   000000B0   54009DE5           LDR      R0,[SP, #+84]
   \   000000B4   000086E0           ADD      R0,R6,R0
   \   000000B8   018040E2           SUB      R8,R0,#+1
    126                  /* Draw if within clip area */
    127                  if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
   \   000000BC   34039FE5           LDR      R0,??GUI__DrawBitmap16bpp_1
   \   000000C0   FA00D0E1           LDRSH    R0,[R0, #+10]
   \   000000C4   000058E1           CMP      R8,R0
   \   000000C8   4F0000BA           BLT      ??GUI__DrawBitmap16bpp_6
   \   000000CC   24039FE5           LDR      R0,??GUI__DrawBitmap16bpp_1
   \   000000D0   FE00D0E1           LDRSH    R0,[R0, #+14]
   \   000000D4   060050E1           CMP      R0,R6
   \   000000D8   4B0000BA           BLT      ??GUI__DrawBitmap16bpp_6
    128                    p = pData;
    129                    for (x = x0, xi = 0; xi < xSize; xi++, x += xMag) {
   \   000000DC   20009DE5           LDR      R0,[SP, #+32]
   \   000000E0   00909DE5           LDR      R9,[SP, #+0]
   \   000000E4   1CA09DE5           LDR      R10,[SP, #+28]
   \   000000E8   010050E3           CMP      R0,#+1
   \   000000EC   460000BA           BLT      ??GUI__DrawBitmap16bpp_6
   \   000000F0   B0B0D9E1           LDRH     R11,[R9, #+0]
   \   000000F4   010040E2           SUB      R0,R0,#+1
   \   000000F8   0C008DE5           STR      R0,[SP, #+12]
   \   000000FC   010010E3           TST      R0,#0x1
   \   00000100   0E00000A           BEQ      ??GUI__DrawBitmap16bpp_7
    130                      Index = *p++;
   \   00000104   029089E2           ADD      R9,R9,#+2
    131                      if (Index != (LCD_PIXELINDEX)PrevIndex) {
   \   00000108   07005BE1           CMP      R11,R7
   \   0000010C   0300000A           BEQ      ??GUI__DrawBitmap16bpp_8
    132                        LCD_SetColor(pfIndex2Color(Index));
   \   00000110   0B00A0E1           MOV      R0,R11
   \   00000114   34FF2FE1           BLX      R4
   \   00000118   ........           BL       LCD_SetColor
    133                        PrevIndex = Index;
   \   0000011C   0B70A0E1           MOV      R7,R11
    134                      }
    135                      LCD_FillRect(x, y, x + xMag - 1, yMax);
   \                     ??GUI__DrawBitmap16bpp_8:
   \   00000120   05008AE0           ADD      R0,R10,R5
   \   00000124   012040E2           SUB      R2,R0,#+1
   \   00000128   0830A0E1           MOV      R3,R8
   \   0000012C   0610A0E1           MOV      R1,R6
   \   00000130   0A00A0E1           MOV      R0,R10
   \   00000134   ........           BL       LCD_FillRect
   \   00000138   0AA085E0           ADD      R10,R5,R10
   \   0000013C   B0B0D9E1           LDRH     R11,[R9, #+0]
   \                     ??GUI__DrawBitmap16bpp_7:
   \   00000140   0C009DE5           LDR      R0,[SP, #+12]
   \   00000144   A000A0E1           LSR      R0,R0,#+1
   \   00000148   04008DE5           STR      R0,[SP, #+4]
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   2100000A           BEQ      ??GUI__DrawBitmap16bpp_9
   \                     ??GUI__DrawBitmap16bpp_10:
   \   00000154   029089E2           ADD      R9,R9,#+2
   \   00000158   07005BE1           CMP      R11,R7
   \   0000015C   0300000A           BEQ      ??GUI__DrawBitmap16bpp_11
   \   00000160   0B00A0E1           MOV      R0,R11
   \   00000164   34FF2FE1           BLX      R4
   \   00000168   ........           BL       LCD_SetColor
   \   0000016C   0B70A0E1           MOV      R7,R11
   \                     ??GUI__DrawBitmap16bpp_11:
   \   00000170   05008AE0           ADD      R0,R10,R5
   \   00000174   012040E2           SUB      R2,R0,#+1
   \   00000178   0830A0E1           MOV      R3,R8
   \   0000017C   0610A0E1           MOV      R1,R6
   \   00000180   0A00A0E1           MOV      R0,R10
   \   00000184   ........           BL       LCD_FillRect
   \   00000188   B2B0D9E0           LDRH     R11,[R9], #+2
   \   0000018C   0AA085E0           ADD      R10,R5,R10
   \   00000190   07005BE1           CMP      R11,R7
   \   00000194   0300000A           BEQ      ??GUI__DrawBitmap16bpp_12
   \   00000198   0B00A0E1           MOV      R0,R11
   \   0000019C   34FF2FE1           BLX      R4
   \   000001A0   ........           BL       LCD_SetColor
   \   000001A4   0B70A0E1           MOV      R7,R11
   \                     ??GUI__DrawBitmap16bpp_12:
   \   000001A8   05008AE0           ADD      R0,R10,R5
   \   000001AC   012040E2           SUB      R2,R0,#+1
   \   000001B0   0830A0E1           MOV      R3,R8
   \   000001B4   0610A0E1           MOV      R1,R6
   \   000001B8   0A00A0E1           MOV      R0,R10
   \   000001BC   ........           BL       LCD_FillRect
   \   000001C0   04009DE5           LDR      R0,[SP, #+4]
   \   000001C4   B0B0D9E1           LDRH     R11,[R9, #+0]
   \   000001C8   010040E2           SUB      R0,R0,#+1
   \   000001CC   0AA085E0           ADD      R10,R5,R10
   \   000001D0   04008DE5           STR      R0,[SP, #+4]
   \   000001D4   000050E3           CMP      R0,#+0
   \   000001D8   DDFFFF1A           BNE      ??GUI__DrawBitmap16bpp_10
   \                     ??GUI__DrawBitmap16bpp_9:
   \   000001DC   07005BE1           CMP      R11,R7
   \   000001E0   0300000A           BEQ      ??GUI__DrawBitmap16bpp_13
   \   000001E4   0B00A0E1           MOV      R0,R11
   \   000001E8   34FF2FE1           BLX      R4
   \   000001EC   ........           BL       LCD_SetColor
   \   000001F0   0B70A0E1           MOV      R7,R11
   \                     ??GUI__DrawBitmap16bpp_13:
   \   000001F4   05008AE0           ADD      R0,R10,R5
   \   000001F8   012040E2           SUB      R2,R0,#+1
   \   000001FC   0830A0E1           MOV      R3,R8
   \   00000200   0610A0E1           MOV      R1,R6
   \   00000204   0A00A0E1           MOV      R0,R10
   \   00000208   ........           BL       LCD_FillRect
    136                    }
    137                  }
    138                  pData += BytesPerLine / 2;
   \                     ??GUI__DrawBitmap16bpp_6:
   \   0000020C   18009DE5           LDR      R0,[SP, #+24]
   \   00000210   00109DE5           LDR      R1,[SP, #+0]
   \   00000214   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000218   C000A0E1           ASR      R0,R0,#+1
   \   0000021C   800081E0           ADD      R0,R1,R0, LSL #+1
   \   00000220   00008DE5           STR      R0,[SP, #+0]
    139                }
   \   00000224   54009DE5           LDR      R0,[SP, #+84]
   \   00000228   066080E0           ADD      R6,R0,R6
   \   0000022C   08009DE5           LDR      R0,[SP, #+8]
   \   00000230   010040E2           SUB      R0,R0,#+1
   \   00000234   08008DE5           STR      R0,[SP, #+8]
   \   00000238   000050E3           CMP      R0,#+0
   \   0000023C   9BFFFF1A           BNE      ??GUI__DrawBitmap16bpp_5
    140              }
    141              GUI_SetColor(OldColor);
   \                     ??GUI__DrawBitmap16bpp_4:
   \   00000240   10009DE5           LDR      R0,[SP, #+16]
   \   00000244   ........           BL       GUI_SetColor
   \                     ??GUI__DrawBitmap16bpp_3:
   \   00000248   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   0000024C   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??GUI__DrawBitmap16bpp_2:
   \   00000250   090088E0           ADD      R0,R8,R9
   \   00000254   017040E2           SUB      R7,R0,#+1
   \   00000258   1C009DE5           LDR      R0,[SP, #+28]
   \   0000025C   20109DE5           LDR      R1,[SP, #+32]
   \   00000260   000081E0           ADD      R0,R1,R0
   \   00000264   01A040E2           SUB      R10,R0,#+1
   \   00000268   88019FE5           LDR      R0,??GUI__DrawBitmap16bpp_1
   \   0000026C   FA10D0E1           LDRSH    R1,[R0, #+10]
   \   00000270   010059E1           CMP      R9,R1
   \   00000274   080000AA           BGE      ??GUI__DrawBitmap16bpp_14
   \   00000278   090041E0           SUB      R0,R1,R9
   \   0000027C   0190A0E1           MOV      R9,R1
   \   00000280   18109DE5           LDR      R1,[SP, #+24]
   \   00000284   008048E0           SUB      R8,R8,R0
   \   00000288   910002E0           MUL      R2,R1,R0
   \   0000028C   A210A0E1           LSR      R1,R2,#+1
   \   00000290   00209DE5           LDR      R2,[SP, #+0]
   \   00000294   811082E0           ADD      R1,R2,R1, LSL #+1
   \   00000298   00108DE5           STR      R1,[SP, #+0]
   \                     ??GUI__DrawBitmap16bpp_14:
   \   0000029C   54019FE5           LDR      R0,??GUI__DrawBitmap16bpp_1
   \   000002A0   FE00D0E1           LDRSH    R0,[R0, #+14]
   \   000002A4   000047E0           SUB      R0,R7,R0
   \   000002A8   010050E3           CMP      R0,#+1
   \   000002AC   008048A0           SUBGE    R8,R8,R0
   \   000002B0   010058E3           CMP      R8,#+1
   \   000002B4   E3FFFFBA           BLT      ??GUI__DrawBitmap16bpp_3
   \   000002B8   38019FE5           LDR      R0,??GUI__DrawBitmap16bpp_1
   \   000002BC   FC00D0E1           LDRSH    R0,[R0, #+12]
   \   000002C0   00004AE0           SUB      R0,R10,R0
   \   000002C4   010050E3           CMP      R0,#+1
   \   000002C8   20109DA5           LDRGE    R1,[SP, #+32]
   \   000002CC   000041A0           SUBGE    R0,R1,R0
   \   000002D0   20008DA5           STRGE    R0,[SP, #+32]
   \   000002D4   1C019FE5           LDR      R0,??GUI__DrawBitmap16bpp_1
   \   000002D8   1C109DE5           LDR      R1,[SP, #+28]
   \   000002DC   F800D0E1           LDRSH    R0,[R0, #+8]
   \   000002E0   000051E1           CMP      R1,R0
   \   000002E4   090000AA           BGE      ??GUI__DrawBitmap16bpp_15
   \   000002E8   010040E0           SUB      R0,R0,R1
   \   000002EC   20109DE5           LDR      R1,[SP, #+32]
   \   000002F0   001041E0           SUB      R1,R1,R0
   \   000002F4   20108DE5           STR      R1,[SP, #+32]
   \   000002F8   00109DE5           LDR      R1,[SP, #+0]
   \   000002FC   801081E0           ADD      R1,R1,R0, LSL #+1
   \   00000300   00108DE5           STR      R1,[SP, #+0]
   \   00000304   1C109DE5           LDR      R1,[SP, #+28]
   \   00000308   010080E0           ADD      R0,R0,R1
   \   0000030C   1C008DE5           STR      R0,[SP, #+28]
   \                     ??GUI__DrawBitmap16bpp_15:
   \   00000310   20009DE5           LDR      R0,[SP, #+32]
   \   00000314   010050E3           CMP      R0,#+1
   \   00000318   CAFFFFBA           BLT      ??GUI__DrawBitmap16bpp_3
   \   0000031C   ........           BL       LCD_GetNextPixelAPI
   \   00000320   0050A0E1           MOV      R5,R0
   \   00000324   CC009FE5           LDR      R0,??GUI__DrawBitmap16bpp_1
   \   00000328   1100D0E5           LDRB     R0,[R0, #+17]
   \   0000032C   ........           BL       GUI_GetpfColor2IndexEx
   \   00000330   0060A0E1           MOV      R6,R0
   \   00000334   0730A0E1           MOV      R3,R7
   \   00000338   0A20A0E1           MOV      R2,R10
   \   0000033C   0910A0E1           MOV      R1,R9
   \   00000340   1C009DE5           LDR      R0,[SP, #+28]
   \   00000344   00C095E5           LDR      R12,[R5, #+0]
   \   00000348   3CFF2FE1           BLX      R12
   \   0000034C   18009DE5           LDR      R0,[SP, #+24]
   \   00000350   C070A0E1           ASR      R7,R0,#+1
   \   00000354   040000EA           B        ??GUI__DrawBitmap16bpp_16
   \                     ??GUI__DrawBitmap16bpp_17:
   \   00000358   080095E5           LDR      R0,[R5, #+8]
   \   0000035C   30FF2FE1           BLX      R0
   \   00000360   00009DE5           LDR      R0,[SP, #+0]
   \   00000364   870080E0           ADD      R0,R0,R7, LSL #+1
   \   00000368   00008DE5           STR      R0,[SP, #+0]
   \                     ??GUI__DrawBitmap16bpp_16:
   \   0000036C   20109DE5           LDR      R1,[SP, #+32]
   \   00000370   00909DE5           LDR      R9,[SP, #+0]
   \   00000374   01A041E2           SUB      R10,R1,#+1
   \   00000378   018048E2           SUB      R8,R8,#+1
   \   0000037C   B000D9E1           LDRH     R0,[R9, #+0]
   \   00000380   01001AE3           TST      R10,#0x1
   \   00000384   0400000A           BEQ      ??GUI__DrawBitmap16bpp_18
   \   00000388   34FF2FE1           BLX      R4
   \   0000038C   36FF2FE1           BLX      R6
   \   00000390   041095E5           LDR      R1,[R5, #+4]
   \   00000394   31FF2FE1           BLX      R1
   \   00000398   B200F9E1           LDRH     R0,[R9, #+2]!
   \                     ??GUI__DrawBitmap16bpp_18:
   \   0000039C   AAA0B0E1           LSRS     R10,R10,#+1
   \   000003A0   0B00000A           BEQ      ??GUI__DrawBitmap16bpp_19
   \                     ??GUI__DrawBitmap16bpp_20:
   \   000003A4   34FF2FE1           BLX      R4
   \   000003A8   36FF2FE1           BLX      R6
   \   000003AC   041095E5           LDR      R1,[R5, #+4]
   \   000003B0   31FF2FE1           BLX      R1
   \   000003B4   B200F9E1           LDRH     R0,[R9, #+2]!
   \   000003B8   34FF2FE1           BLX      R4
   \   000003BC   36FF2FE1           BLX      R6
   \   000003C0   041095E5           LDR      R1,[R5, #+4]
   \   000003C4   31FF2FE1           BLX      R1
   \   000003C8   B200F9E1           LDRH     R0,[R9, #+2]!
   \   000003CC   01A05AE2           SUBS     R10,R10,#+1
   \   000003D0   F3FFFF1A           BNE      ??GUI__DrawBitmap16bpp_20
   \                     ??GUI__DrawBitmap16bpp_19:
   \   000003D4   34FF2FE1           BLX      R4
   \   000003D8   36FF2FE1           BLX      R6
   \   000003DC   041095E5           LDR      R1,[R5, #+4]
   \   000003E0   31FF2FE1           BLX      R1
   \   000003E4   000058E3           CMP      R8,#+0
   \   000003E8   DAFFFF1A           BNE      ??GUI__DrawBitmap16bpp_17
   \   000003EC   0C0095E5           LDR      R0,[R5, #+12]
   \   000003F0   30FF2FE1           BLX      R0
   \   000003F4   91FFFFEA           B        ??GUI__DrawBitmap16bpp_4
   \                     ??GUI__DrawBitmap16bpp_1:
   \   000003F8   ........           DC32     GUI_Context
    142            }
    143          }
    144          
    145          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     GUI__DrawBitmap16bpp     72


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     GUI__DrawBitmap16bpp 1020

 
 1 020 bytes in section .text
 
 1 020 bytes of CODE memory

Errors: none
Warnings: none
