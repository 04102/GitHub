###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:15:43 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_JOYSTICK.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_JOYSTICK.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_JOYSTICK.lst           #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_JOYSTICK.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_JOYSTICK.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_JOYSTICK.c
     19          Purpose     : Generic joystick routines
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include <string.h>           /* memcmp */
     24          
     25          #include "GUI.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Public code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       GUI_JOYSTICK_StoreState
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          void GUI_JOYSTICK_StoreState(const GUI_PID_STATE * pState) {
   \                     GUI_JOYSTICK_StoreState:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     38            static GUI_PID_STATE StatePrev;
     39            static int TimeAcc;
     40            int IsDifferent;
     41          
     42            IsDifferent = memcmp(pState, &StatePrev, sizeof(GUI_PID_STATE));
   \   00000004   3C519FE5           LDR      R5,??GUI_JOYSTICK_StoreState_0
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0C20A0E3           MOV      R2,#+12
   \   00000014   0510A0E1           MOV      R1,R5
   \   00000018   ........           BL       memcmp
     43            /*
     44            * Handle dynamic pointer acceleration
     45            */
     46            if (IsDifferent == 0) {
   \   0000001C   0C1095E5           LDR      R1,[R5, #+12]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0300001A           BNE      ??GUI_JOYSTICK_StoreState_1
     47              if (TimeAcc < 10) {
   \   00000028   0A0051E3           CMP      R1,#+10
   \   0000002C   020000AA           BGE      ??GUI_JOYSTICK_StoreState_2
     48                TimeAcc++;
   \   00000030   011081E2           ADD      R1,R1,#+1
   \   00000034   000000EA           B        ??GUI_JOYSTICK_StoreState_2
     49              }
     50            } else {
     51              TimeAcc = 1;
   \                     ??GUI_JOYSTICK_StoreState_1:
   \   00000038   0110A0E3           MOV      R1,#+1
   \                     ??GUI_JOYSTICK_StoreState_2:
   \   0000003C   0C1085E5           STR      R1,[R5, #+12]
     52            }
     53            if ((pState->x || pState->y || pState->Pressed) || IsDifferent) {
   \   00000040   001094E5           LDR      R1,[R4, #+0]
   \   00000044   000051E3           CMP      R1,#+0
   \   00000048   04109405           LDREQ    R1,[R4, #+4]
   \   0000004C   00005103           CMPEQ    R1,#+0
   \   00000050   0810D405           LDRBEQ   R1,[R4, #+8]
   \   00000054   00005103           CMPEQ    R1,#+0
   \   00000058   00005003           CMPEQ    R0,#+0
   \   0000005C   3700000A           BEQ      ??GUI_JOYSTICK_StoreState_3
     54              GUI_PID_STATE State;
     55              int Max;
     56              /*
     57              * Compute the new coordinates
     58              */
     59              GUI_PID_GetState(&State);
   \   00000060   0D00A0E1           MOV      R0,SP
   \   00000064   ........           BL       GUI_PID_GetState
     60              if (pState->x < 0) {
   \   00000068   000094E5           LDR      R0,[R4, #+0]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0300005A           BPL      ??GUI_JOYSTICK_StoreState_4
     61                State.x -= TimeAcc;
   \   00000074   00009DE5           LDR      R0,[SP, #+0]
   \   00000078   0C1095E5           LDR      R1,[R5, #+12]
   \   0000007C   010040E0           SUB      R0,R0,R1
   \   00000080   00008DE5           STR      R0,[SP, #+0]
     62              }
     63              if (pState->x > 0) {
   \                     ??GUI_JOYSTICK_StoreState_4:
   \   00000084   000094E5           LDR      R0,[R4, #+0]
   \   00000088   010050E3           CMP      R0,#+1
   \   0000008C   030000BA           BLT      ??GUI_JOYSTICK_StoreState_5
     64                State.x += TimeAcc;
   \   00000090   00009DE5           LDR      R0,[SP, #+0]
   \   00000094   0C1095E5           LDR      R1,[R5, #+12]
   \   00000098   000081E0           ADD      R0,R1,R0
   \   0000009C   00008DE5           STR      R0,[SP, #+0]
     65              }
     66              if (pState->y < 0) {
   \                     ??GUI_JOYSTICK_StoreState_5:
   \   000000A0   040094E5           LDR      R0,[R4, #+4]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0300005A           BPL      ??GUI_JOYSTICK_StoreState_6
     67                State.y -= TimeAcc;
   \   000000AC   04009DE5           LDR      R0,[SP, #+4]
   \   000000B0   0C1095E5           LDR      R1,[R5, #+12]
   \   000000B4   010040E0           SUB      R0,R0,R1
   \   000000B8   04008DE5           STR      R0,[SP, #+4]
     68              }
     69              if (pState->y > 0) {
   \                     ??GUI_JOYSTICK_StoreState_6:
   \   000000BC   040094E5           LDR      R0,[R4, #+4]
   \   000000C0   010050E3           CMP      R0,#+1
   \   000000C4   030000BA           BLT      ??GUI_JOYSTICK_StoreState_7
     70                State.y += TimeAcc;
   \   000000C8   04009DE5           LDR      R0,[SP, #+4]
   \   000000CC   0C1095E5           LDR      R1,[R5, #+12]
   \   000000D0   000081E0           ADD      R0,R1,R0
   \   000000D4   04008DE5           STR      R0,[SP, #+4]
     71              }
     72              State.Pressed = pState->Pressed;
   \                     ??GUI_JOYSTICK_StoreState_7:
   \   000000D8   0810D4E5           LDRB     R1,[R4, #+8]
     73              /*
     74              * Make sure coordinates are still in bounds
     75              */
     76              if (State.x < 0) {
   \   000000DC   00009DE5           LDR      R0,[SP, #+0]
   \   000000E0   0810CDE5           STRB     R1,[SP, #+8]
   \   000000E4   000050E3           CMP      R0,#+0
     77                State.x = 0;
   \   000000E8   0010A043           MOVMI    R1,#+0
     78              }
     79              if (State.y < 0) {
   \   000000EC   04009DE5           LDR      R0,[SP, #+4]
   \   000000F0   00108D45           STRMI    R1,[SP, #+0]
   \   000000F4   000050E3           CMP      R0,#+0
     80                State.y = 0;
   \   000000F8   0010A043           MOVMI    R1,#+0
   \   000000FC   04108D45           STRMI    R1,[SP, #+4]
     81              }
     82              Max = LCD_GetXSize() - 1;
   \   00000100   ........           BL       LCD_GetXSize
     83              if (State.x >= Max) {
   \   00000104   00109DE5           LDR      R1,[SP, #+0]
   \   00000108   010040E2           SUB      R0,R0,#+1
   \   0000010C   000051E1           CMP      R1,R0
   \   00000110   0010A0C1           MOVGT    R1,R0
   \   00000114   00108DE5           STR      R1,[SP, #+0]
     84                State.x = Max;
     85              }
     86              Max = LCD_GetYSize() - 1;
   \   00000118   ........           BL       LCD_GetYSize
     87              if (State.y > Max) {
   \   0000011C   04109DE5           LDR      R1,[SP, #+4]
   \   00000120   010040E2           SUB      R0,R0,#+1
   \   00000124   010050E1           CMP      R0,R1
   \   00000128   0100A0C1           MOVGT    R0,R1
   \   0000012C   04008DE5           STR      R0,[SP, #+4]
     88                State.y = Max;
     89              }
     90              /*
     91              * Inform emWin
     92              */
     93              GUI_PID_StoreState(&State);
   \   00000130   0D00A0E1           MOV      R0,SP
   \   00000134   ........           BL       GUI_PID_StoreState
     94              StatePrev = *pState;
   \   00000138   0700B4E8           LDM      R4!,{R0-R2}
   \   0000013C   0700A5E8           STM      R5!,{R0-R2}
     95            }
     96          }
   \                     ??GUI_JOYSTICK_StoreState_3:
   \   00000140   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000144   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??GUI_JOYSTICK_StoreState_0:
   \   00000148   ........           DC32     ??StatePrev

   \                                 In section .bss, align 4
   \                     ??StatePrev:
   \   00000000                      DS8 12
   \   0000000C                      DS8 4
     97          
     98          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     GUI_JOYSTICK_StoreState     24


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     GUI_JOYSTICK_StoreState  332
     StatePrev                 16
     TimeAcc

 
  16 bytes in section .bss
 332 bytes in section .text
 
 332 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
