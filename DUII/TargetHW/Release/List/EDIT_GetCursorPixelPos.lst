###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:14:46 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\EDIT_GetCursorPixelPos.c            #
#    Command line =  C:\DUII\TargetHW\GUI\EDIT_GetCursorPixelPos.c -D         #
#                    DEBUG=1 -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D        #
#                    NOPROFILER -D OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN        #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\EDIT_GetCursorPixelPos.lst #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\EDIT_GetCursorPixelPos.o    #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\EDIT_GetCursorPixelPos.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : EDIT_GetCursorPixelPos.c
     19          Purpose     : Implementation of edit widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "EDIT_Private.h"
     24          
     25          #if GUI_WINSUPPORT
     26          
     27          /*********************************************************************
     28          *
     29          *             Exported routines
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       EDIT_GetCursorPixelPos
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          void EDIT_GetCursorPixelPos(EDIT_Handle hObj, int * pxPos, int * pyPos) {
   \                     EDIT_GetCursorPixelPos:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0060A0E1           MOV      R6,R0
   \   00000008   10D04DE2           SUB      SP,SP,#+16
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0250A0E1           MOV      R5,R2
     38            if (hObj) {
   \   00000014   000056E3           CMP      R6,#+0
   \   00000018   2C00000A           BEQ      ??EDIT_GetCursorPixelPos_0
     39              int NumChars;
     40              EDIT_Obj * pObj;
     41              const char GUI_UNI_PTR * pText;
     42              GUI_RECT rInside, rText;
     43              WM_LOCK();
   \   0000001C   ........           BL       GUI_Lock
     44              pObj = EDIT_LOCK_H(hObj);
   \   00000020   0600A0E1           MOV      R0,R6
   \   00000024   ........           BL       GUI_ALLOC_LockH
   \   00000028   0060A0E1           MOV      R6,R0
     45              if (pObj->hpText) {
   \   0000002C   340096E5           LDR      R0,[R6, #+52]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   2300000A           BEQ      ??EDIT_GetCursorPixelPos_1
     46                GUI_SetFont(pObj->Props.pFont);
   \   00000038   680096E5           LDR      R0,[R6, #+104]
   \   0000003C   ........           BL       GUI_SetFont
     47                WIDGET__GetInsideRect(&pObj->Widget, &rInside);
   \   00000040   0D10A0E1           MOV      R1,SP
   \   00000044   0600A0E1           MOV      R0,R6
   \   00000048   ........           BL       WIDGET__GetInsideRect
     48                pText       = (const char *)GUI_LOCK_H(pObj->hpText);
   \   0000004C   340096E5           LDR      R0,[R6, #+52]
   \   00000050   ........           BL       GUI_ALLOC_LockH
   \   00000054   0070A0E1           MOV      R7,R0
     49                NumChars    = GUI__GetNumChars(pText);
   \   00000058   ........           BL       GUI__GetNumChars
   \   0000005C   0080A0E1           MOV      R8,R0
     50                rInside.x0 += pObj->Props.Border + EDIT_XOFF;
   \   00000060   640096E5           LDR      R0,[R6, #+100]
   \   00000064   F010DDE1           LDRSH    R1,[SP, #+0]
   \   00000068   012080E2           ADD      R2,R0,#+1
   \   0000006C   011082E0           ADD      R1,R2,R1
   \   00000070   B010CDE1           STRH     R1,[SP, #+0]
     51                rInside.x1 -= pObj->Props.Border + EDIT_XOFF;
   \   00000074   F410DDE1           LDRSH    R1,[SP, #+4]
     52                GUI__CalcTextRect(pText, &rInside, &rText, pObj->Props.Align);
   \   00000078   08208DE2           ADD      R2,SP,#+8
   \   0000007C   000041E0           SUB      R0,R1,R0
   \   00000080   010040E2           SUB      R0,R0,#+1
   \   00000084   B400CDE1           STRH     R0,[SP, #+4]
   \   00000088   603096E5           LDR      R3,[R6, #+96]
   \   0000008C   0D10A0E1           MOV      R1,SP
   \   00000090   0700A0E1           MOV      R0,R7
   \   00000094   ........           BL       GUI__CalcTextRect
     53                rText.x0 += GUI__GetCursorPosX(pText, pObj->CursorPos, NumChars);
   \   00000098   0820A0E1           MOV      R2,R8
   \   0000009C   4C1096E5           LDR      R1,[R6, #+76]
   \   000000A0   0700A0E1           MOV      R0,R7
   \   000000A4   ........           BL       GUI__GetCursorPosX
   \   000000A8   F810DDE1           LDRSH    R1,[SP, #+8]
   \   000000AC   010080E0           ADD      R0,R0,R1
   \   000000B0   B800CDE1           STRH     R0,[SP, #+8]
     54                *pxPos = rText.x0;
   \   000000B4   F800DDE1           LDRSH    R0,[SP, #+8]
   \   000000B8   000084E5           STR      R0,[R4, #+0]
     55                *pyPos = rText.y0;
   \   000000BC   FA00DDE1           LDRSH    R0,[SP, #+10]
   \   000000C0   000085E5           STR      R0,[R5, #+0]
     56                GUI_UNLOCK_H(pText);
   \   000000C4   ........           BL       GUI_ALLOC_UnlockH
     57              }
     58              GUI_UNLOCK_H(pObj);
   \                     ??EDIT_GetCursorPixelPos_1:
   \   000000C8   ........           BL       GUI_ALLOC_UnlockH
     59              WM_UNLOCK();
   \   000000CC   ........           BL       GUI_Unlock
     60            }
     61          }
   \                     ??EDIT_GetCursorPixelPos_0:
   \   000000D0   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   000000D4   F081BDE8           POP      {R4-R8,PC}       ;; return
     62          
     63          #else  /* avoid empty object files */
     64          
     65          void EDIT_GetCursorPixelPos_C(void);
     66          void EDIT_GetCursorPixelPos_C(void) {}
     67          
     68          #endif /* GUI_WINSUPPORT */
     69          
     70          

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     EDIT_GetCursorPixelPos     40


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     EDIT_GetCursorPixelPos  216

 
 216 bytes in section .text
 
 216 bytes of CODE memory

Errors: none
Warnings: none
