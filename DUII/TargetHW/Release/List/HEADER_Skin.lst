###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:12:43 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\HEADER_Skin.c                       #
#    Command line =  C:\DUII\TargetHW\GUI\HEADER_Skin.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\HEADER_Skin.lst            #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\HEADER_Skin.o               #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\HEADER_Skin.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : HEADER_Skin.c
     19          Purpose     : Implementation of HEADER widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "HEADER_Private.h"
     24          #include "GUI_Private.h"
     25          #include "WM_Intern.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Static code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       _Paint
     38          */

   \                                 In section .text, align 4, keep-with-next
     39          static void _Paint(HEADER_Handle hObj) {
   \                     _Paint:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   3CD04DE2           SUB      SP,SP,#+60
   \   00000008   0070A0E1           MOV      R7,R0
     40            HEADER_Obj * pObj;
     41            GUI_ARRAY Columns;
     42            GUI_RECT Rect, RectClient;
     43            WIDGET_DRAW_ITEM_FUNC * pfDrawSkin;
     44            WIDGET_ITEM_DRAW_INFO ItemInfo;
     45            WIDGET * pWidget;
     46            char * pText;
     47            HEADER_COLUMN * pColumn;
     48            WM_HMEM hDrawObj;
     49            int Fixed, ScrollPos, Width, i, NumItems, xPos, DirIndicatorColumn;
     50          
     51            //
     52            // Get header properties
     53            //
     54            pObj = HEADER_LOCK_H(hObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   0080A0E1           MOV      R8,R0
     55            pfDrawSkin = pObj->Props.SkinPrivate.pfDrawSkin;
     56            pWidget = &pObj->Widget;
     57            Columns = pObj->Columns;
     58            Fixed = pObj->Fixed;
   \   00000014   680098E5           LDR      R0,[R8, #+104]
   \   00000018   444098E5           LDR      R4,[R8, #+68]
   \   0000001C   4C5098E5           LDR      R5,[R8, #+76]
   \   00000020   38008DE5           STR      R0,[SP, #+56]
     59            ScrollPos = pObj->ScrollPos;
   \   00000024   580098E5           LDR      R0,[R8, #+88]
   \   00000028   08008DE5           STR      R0,[SP, #+8]
     60            DirIndicatorColumn = pObj->DirIndicatorColumn;
   \   0000002C   600098E5           LDR      R0,[R8, #+96]
   \   00000030   34008DE5           STR      R0,[SP, #+52]
     61            GUI_UNLOCK_H(pObj);
   \   00000034   ........           BL       GUI_ALLOC_UnlockH
     62            NumItems = GUI_ARRAY_GetNumItems(Columns);
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           BL       GUI_ARRAY_GetNumItems
   \   00000040   0060A0E1           MOV      R6,R0
     63            //
     64            // Get size
     65            //
     66            WIDGET__GetClientRect(pWidget, &RectClient);
   \   00000044   0C108DE2           ADD      R1,SP,#+12
   \   00000048   0800A0E1           MOV      R0,R8
   \   0000004C   ........           BL       WIDGET__GetClientRect
     67            //
     68            // Fill item info structure
     69            //
     70            ItemInfo.hWin = hObj;
     71            //
     72            // Iterate over columns
     73            //
     74            xPos = -ScrollPos;
   \   00000050   08009DE5           LDR      R0,[SP, #+8]
   \   00000054   14708DE5           STR      R7,[SP, #+20]
   \   00000058   00B060E2           RSB      R11,R0,#+0
     75            Rect.y0 = ItemInfo.y0 = RectClient.y0;
   \   0000005C   FE00DDE1           LDRSH    R0,[SP, #+14]
   \   00000060   24008DE5           STR      R0,[SP, #+36]
   \   00000064   B200CDE1           STRH     R0,[SP, #+2]
     76            Rect.y1 = ItemInfo.y1 = RectClient.y1;
   \   00000068   F201DDE1           LDRSH    R0,[SP, #+18]
     77            for (i = 0; i < NumItems; i++) {
   \   0000006C   0070A0E3           MOV      R7,#+0
   \   00000070   010056E3           CMP      R6,#+1
   \   00000074   2C008DE5           STR      R0,[SP, #+44]
   \   00000078   B600CDE1           STRH     R0,[SP, #+6]
   \   0000007C   350000BA           BLT      ??_Paint_0
     78              //
     79              // Get column properties
     80              //
     81              pColumn  = (HEADER_COLUMN *)GUI_ARRAY_GetpItemLocked(Columns, i);
   \                     ??_Paint_1:
   \   00000080   0710A0E1           MOV      R1,R7
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           BL       GUI_ARRAY_GetpItemLocked
     82              Width    = pColumn->Width;
   \   0000008C   008090E5           LDR      R8,[R0, #+0]
     83              hDrawObj = pColumn->hDrawObj;
   \   00000090   089090E5           LDR      R9,[R0, #+8]
     84              pText    = pColumn->acText;
   \   00000094   0CA080E2           ADD      R10,R0,#+12
     85              GUI_UNLOCK_H(pColumn);
   \   00000098   ........           BL       GUI_ALLOC_UnlockH
     86              //
     87              //
     88              //
     89              xPos += (i < Fixed) ? ScrollPos : 0;
   \   0000009C   38009DE5           LDR      R0,[SP, #+56]
   \   000000A0   000057E1           CMP      R7,R0
   \   000000A4   08009DB5           LDRLT    R0,[SP, #+8]
   \   000000A8   0000A0A3           MOVGE    R0,#+0
   \   000000AC   0BB080E0           ADD      R11,R0,R11
     90              Rect.x0 = ItemInfo.x0 = xPos;
     91              Rect.x1 = ItemInfo.x1 = ItemInfo.x0 + Width - 1;
   \   000000B0   08008BE0           ADD      R0,R11,R8
   \   000000B4   010040E2           SUB      R0,R0,#+1
   \   000000B8   28008DE5           STR      R0,[SP, #+40]
   \   000000BC   B400CDE1           STRH     R0,[SP, #+4]
   \   000000C0   20B08DE5           STR      R11,[SP, #+32]
   \   000000C4   B0B0CDE1           STRH     R11,[SP, #+0]
     92              WM_SetUserClipRect(&Rect);
   \   000000C8   0D00A0E1           MOV      R0,SP
   \   000000CC   ........           BL       WM_SetUserClipRect
     93              ItemInfo.ItemIndex = i;
     94              //
     95              // Background
     96              //
     97              ItemInfo.Cmd = WIDGET_ITEM_DRAW_BACKGROUND;
   \   000000D0   0310A0E3           MOV      R1,#+3
   \   000000D4   1C708DE5           STR      R7,[SP, #+28]
   \   000000D8   18108DE5           STR      R1,[SP, #+24]
     98              pfDrawSkin(&ItemInfo);
   \   000000DC   14008DE2           ADD      R0,SP,#+20
   \   000000E0   34FF2FE1           BLX      R4
     99              //
    100              // Bitmap
    101              //
    102              if (hDrawObj) {
   \   000000E4   000059E3           CMP      R9,#+0
   \   000000E8   0300000A           BEQ      ??_Paint_2
    103                ItemInfo.Cmd = WIDGET_ITEM_DRAW_BITMAP;
   \   000000EC   0410A0E3           MOV      R1,#+4
   \   000000F0   18108DE5           STR      R1,[SP, #+24]
    104                pfDrawSkin(&ItemInfo);
   \   000000F4   14008DE2           ADD      R0,SP,#+20
   \   000000F8   34FF2FE1           BLX      R4
    105              }
    106              //
    107              // Text
    108              //
    109              if (pText) {
   \                     ??_Paint_2:
   \   000000FC   00005AE3           CMP      R10,#+0
   \   00000100   0300000A           BEQ      ??_Paint_3
    110                ItemInfo.Cmd = WIDGET_ITEM_DRAW_TEXT;
   \   00000104   1010A0E3           MOV      R1,#+16
   \   00000108   18108DE5           STR      R1,[SP, #+24]
    111                pfDrawSkin(&ItemInfo);
   \   0000010C   14008DE2           ADD      R0,SP,#+20
   \   00000110   34FF2FE1           BLX      R4
    112              }
    113              //
    114              // Arrow
    115              //
    116              if (DirIndicatorColumn == i) {
   \                     ??_Paint_3:
   \   00000114   34009DE5           LDR      R0,[SP, #+52]
   \   00000118   070050E1           CMP      R0,R7
   \   0000011C   0300001A           BNE      ??_Paint_4
    117                ItemInfo.Cmd = WIDGET_ITEM_DRAW_ARROW;
   \   00000120   0210A0E3           MOV      R1,#+2
   \   00000124   18108DE5           STR      R1,[SP, #+24]
    118                pfDrawSkin(&ItemInfo);
   \   00000128   14008DE2           ADD      R0,SP,#+20
   \   0000012C   34FF2FE1           BLX      R4
    119              }
    120              //
    121              // Release clipping
    122              //
    123              WM_SetUserClipRect(NULL);
   \                     ??_Paint_4:
   \   00000130   0000A0E3           MOV      R0,#+0
   \   00000134   ........           BL       WM_SetUserClipRect
    124              //
    125              // Adjust position
    126              //
    127              xPos += ItemInfo.x1 - ItemInfo.x0 + 1;
   \   00000138   28009DE5           LDR      R0,[SP, #+40]
   \   0000013C   20109DE5           LDR      R1,[SP, #+32]
   \   00000140   0B0080E0           ADD      R0,R0,R11
   \   00000144   010040E0           SUB      R0,R0,R1
    128            }
   \   00000148   017087E2           ADD      R7,R7,#+1
   \   0000014C   01B080E2           ADD      R11,R0,#+1
   \   00000150   060057E1           CMP      R7,R6
   \   00000154   C9FFFFBA           BLT      ??_Paint_1
    129            //
    130            // Overlap
    131            //
    132            if (ItemInfo.x1 < RectClient.x1) {
   \                     ??_Paint_0:
   \   00000158   F011DDE1           LDRSH    R1,[SP, #+16]
   \   0000015C   28009DE5           LDR      R0,[SP, #+40]
   \   00000160   010050E1           CMP      R0,R1
   \   00000164   0C0000AA           BGE      ??_Paint_5
    133              Rect.x0 = ItemInfo.x0 = xPos;
    134              Rect.x1 = ItemInfo.x1 = RectClient.x1;
   \   00000168   F001DDE1           LDRSH    R0,[SP, #+16]
   \   0000016C   28008DE5           STR      R0,[SP, #+40]
   \   00000170   B400CDE1           STRH     R0,[SP, #+4]
   \   00000174   20B08DE5           STR      R11,[SP, #+32]
   \   00000178   B0B0CDE1           STRH     R11,[SP, #+0]
    135              WM_SetUserClipRect(&Rect);
   \   0000017C   0D00A0E1           MOV      R0,SP
   \   00000180   ........           BL       WM_SetUserClipRect
    136              ItemInfo.Cmd = WIDGET_ITEM_DRAW_OVERLAP;
   \   00000184   0A10A0E3           MOV      R1,#+10
   \   00000188   18108DE5           STR      R1,[SP, #+24]
    137              pfDrawSkin(&ItemInfo);
   \   0000018C   14008DE2           ADD      R0,SP,#+20
   \   00000190   34FF2FE1           BLX      R4
    138              WM_SetUserClipRect(NULL);
   \   00000194   0000A0E3           MOV      R0,#+0
   \   00000198   ........           BL       WM_SetUserClipRect
    139            }
    140          }
   \                     ??_Paint_5:
   \   0000019C   3CD08DE2           ADD      SP,SP,#+60       ;; stack cleaning
   \   000001A0   F08FBDE8           POP      {R4-R11,PC}      ;; return
    141          
    142          /*********************************************************************
    143          *
    144          *       _Create
    145          */

   \                                 In section .text, align 4, keep-with-next
    146          static void _Create(HEADER_Handle hObj) {
   \                     _Create:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   0040A0E1           MOV      R4,R0
    147            HEADER_Obj * pObj;
    148            HEADER_SKIN_PRIVATE * pSkinPrivate;
    149            WIDGET_ITEM_DRAW_INFO ItemInfo;
    150          
    151            //
    152            // Get properties
    153            //
    154            pObj = HEADER_LOCK_H(hObj);
    155            pSkinPrivate = (HEADER_SKIN_PRIVATE *)pObj->pWidgetSkin->pSkinPrivate;
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   480090E5           LDR      R0,[R0, #+72]
   \   00000014   085090E5           LDR      R5,[R0, #+8]
    156            GUI_UNLOCK_H(pObj);
   \   00000018   ........           BL       GUI_ALLOC_UnlockH
    157            //
    158            // Create
    159            //
    160            ItemInfo.Cmd = WIDGET_ITEM_CREATE;
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   04108DE5           STR      R1,[SP, #+4]
    161            ItemInfo.hWin = hObj;
   \   00000024   00408DE5           STR      R4,[SP, #+0]
    162            pSkinPrivate->pfDrawSkin(&ItemInfo);
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   001095E5           LDR      R1,[R5, #+0]
   \   00000030   31FF2FE1           BLX      R1
    163          }
   \   00000034   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
    164          
    165          /*********************************************************************
    166          *
    167          *        Private data
    168          *
    169          **********************************************************************
    170          */
    171          /*********************************************************************
    172          *
    173          *       _Skin
    174          */

   \                                 In section .data, align 4
    175          static WIDGET_SKIN _Skin = {
   \                     _Skin:
   \   00000000   ............       DC32 _Paint, _Create, HEADER__DefaultProps + 10H
   \              ............
    176            _Paint,
    177            _Create,
    178            &HEADER__DefaultProps.SkinPrivate
    179          };
    180          
    181          /*********************************************************************
    182          *
    183          *        Public code
    184          *
    185          **********************************************************************
    186          */
    187          /*********************************************************************
    188          *
    189          *       HEADER_SetSkin
    190          */

   \                                 In section .text, align 4, keep-with-next
    191          void HEADER_SetSkin(HEADER_Handle hObj, WIDGET_DRAW_ITEM_FUNC * pfDrawSkin) {
   \                     HEADER_SetSkin:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    192            HEADER_Obj * pObj;
    193          
    194            WM_LOCK();
   \   00000010   ........           BL       GUI_Lock
    195            pObj = HEADER_LOCK_H(hObj);
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       GUI_ALLOC_LockH
    196            //
    197            // Enable skinning
    198            //
    199            pObj->pWidgetSkin = &_Skin;
   \   0000001C   ........           LDR      R1,??DataTable1
   \   00000020   481080E5           STR      R1,[R0, #+72]
    200            //
    201            // Set private callback function
    202            //
    203            pObj->Props.SkinPrivate.pfDrawSkin = pfDrawSkin;
   \   00000024   445080E5           STR      R5,[R0, #+68]
    204            GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
    205            //
    206            // Invalidate widget
    207            //
    208            WM_SetHasTrans(hObj);
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       WM_SetHasTrans
    209            WM_InvalidateWindow(hObj);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM_InvalidateWindow
    210            WM_UNLOCK();
   \   0000003C   04D08DE2           ADD      SP,SP,#+4
   \   00000040   3040BDE8           POP      {R4,R5,LR}
   \   00000044   ........           B        GUI_Unlock       ;; tailcall
    211          }
    212          
    213          /*********************************************************************
    214          *
    215          *       HEADER_SetDefaultSkin
    216          */

   \                                 In section .text, align 4, keep-with-next
    217          void HEADER_SetDefaultSkin(WIDGET_DRAW_ITEM_FUNC * pfDrawSkin) {
    218            HEADER__pSkinDefault = &_Skin;
   \                     HEADER_SetDefaultSkin:
   \   00000000   ........           LDR      R1,??DataTable1_1
   \   00000004   ........           LDR      R2,??DataTable1
   \   00000008   002081E5           STR      R2,[R1, #+0]
    219            HEADER__DefaultProps.SkinPrivate.pfDrawSkin = pfDrawSkin;
   \   0000000C   ........           LDR      R1,??DataTable1_2
   \   00000010   100081E5           STR      R0,[R1, #+16]
    220          }
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     _Skin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     HEADER__pSkinDefault

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     HEADER__DefaultProps
    221          
    222          #else
    223            void HEADER_Skin_C(void);
    224            void HEADER_Skin_C(void) {} /* avoid empty object files */
    225          #endif /* GUI_WINSUPPORT */
    226          
    227          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     HEADER_SetDefaultSkin      0
     HEADER_SetSkin            16
     _Create                   48
     _Paint                    96


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     _Paint                 420
     _Create                 60
     _Skin                   12
     HEADER_SetSkin          72
     HEADER_SetDefaultSkin   24
     ??DataTable1             4
     ??DataTable1_1           4
     ??DataTable1_2           4

 
  12 bytes in section .data
 588 bytes in section .text
 
 588 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
