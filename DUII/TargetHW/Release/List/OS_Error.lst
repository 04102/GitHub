###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     20/Nov/2015  12:00:33 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\OS\OS_Error.c                           #
#    Command line =  C:\DUII\TargetHW\OS\OS_Error.c -D DEBUG=1 -D             #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\OS_Error.lst               #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\OS_Error.o                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\OS\OS_Error.c
      1          /*********************************************************************
      2          *               SEGGER MICROCONTROLLER GmbH & Co KG                  *
      3          *       Solutions for real time microcontroller applications         *
      4          **********************************************************************
      5          *                                                                    *
      6          *       (c) 1995 - 2009  SEGGER Microcontroller GmbH & Co KG         *
      7          *                                                                    *
      8          *       www.segger.com     Support: support@segger.com               *
      9          *                                                                    *
     10          **********************************************************************
     11          *                                                                    *
     12          *       embOS * Real time operating system for microcontrollers      *
     13          *                                                                    *
     14          *                                                                    *
     15          *       Please note:                                                 *
     16          *                                                                    *
     17          *       Knowledge of this file may under no circumstances            *
     18          *       be used to write a similar product or a real-time            *
     19          *       operating system for in-house use.                           *
     20          *                                                                    *
     21          *       Thank you for your fairness !                                *
     22          *                                                                    *
     23          **********************************************************************
     24          *                                                                    *
     25          *       OS version: 3.82e                                            *
     26          *                                                                    *
     27          **********************************************************************
     28          
     29          ----------------------------------------------------------------------
     30          File    : OS_Error.c
     31          Purpose : OS error handler. Not required in "R" (release) builds
     32                    Feel free to modify this file acc. to your target system.
     33          --------  END-OF-HEADER  ---------------------------------------------
     34          */
     35          
     36          #include "RTOS.h"
     37          
     38          /*********************************************************************
     39          *
     40          *       Global functions
     41          *
     42          **********************************************************************
     43          */
     44          
     45          /*********************************************************************
     46          *
     47          *       (OS_Error)
     48          *
     49          **********************************************************************
     50          
     51           Run-time error reaction
     52          
     53           When this happens, a fatal error has occured and the kernel
     54           can not continue. In linux, the equivalent would be a
     55           "kernel panic"
     56          
     57           This routine can be modified to suit your needs ...
     58           E.g. a red LED could light up. When using an
     59           emulator, you may set a breakpoint here.
     60           In the release builds of the library (R), this routine is not required
     61           (as no checks are performed).
     62           In the stack check builds (S/SP), only error 120 may occur.
     63           In the debug builds(D/DP), all of the listed errors may occur.
     64          
     65           The following are the current errorcodes:
     66           (Please refer to the documentation for more info)
     67          
     68          *** Port 100..119 ********************************
     69          OS_ERR_ISR_INDEX                      (100 = 0x64)
     70          OS_ERR_ISR_VECTOR                     (101 = 0x65)
     71          OS_ERR_ISR_PRIO                       (102 = 0x66)
     72          OS_ERR_WRONG_STACK                    (103 = 0x67)
     73          OS_ERR_ISR_NO_HANDLER                 (104 = 0x68)  *** No interrupt handler was defined for this interrupt
     74          
     75          *** OS generic ***********************************
     76          
     77          OS_ERR_INTERNAL                       (118 = 0x76)  *** OS_ChangeTask called without RegionCnt set (or other internal error)
     78          OS_ERR_IDLE_RETURNS                   (119 = 0x77)  *** Idle loop should not return
     79          
     80          *** Stack overflow ******************************
     81          OS_ERR_STACK                          (120 = 0x78)  *** Stack overflow or invalid stack
     82          
     83          *** Counting semaphore overflow ******************
     84          OS_ERR_CSEMA_OVERFLOW                 (121 = 0x79)
     85          
     86          *** Power handling module ************************
     87          OS_ERR_POWER_OVER                     (122 = 0x7A)
     88          OS_ERR_POWER_UNDER                    (123 = 0x7B)
     89          OS_ERR_POWER_INDEX                    (124 = 0x7C)
     90          
     91          *** System/interrupt stack ***********************
     92          OS_ERR_SYS_STACK                      (125 = 0x7D) *** embOS system stack overflow
     93          OS_ERR_INT_STACK                      (126 = 0x7E) *** Interrupt stack overflow
     94          
     95          *** Invalid or non-initialized data structures ***
     96          OS_ERR_INV_TASK                       (128 = 0x80)
     97          OS_ERR_INV_TIMER                      (129 = 0x81)
     98          OS_ERR_INV_MAILBOX                    (130 = 0x82)
     99          OS_ERR_INV_CSEMA                      (132 = 0x84)
    100          OS_ERR_INV_RSEMA                      (133 = 0x85)
    101          
    102          *** Using GetMail1, PutMail1, GetMailCond1 or PutMailCond1
    103          *** on a non-1 byte mailbox  *********************
    104          OS_ERR_MAILBOX_NOT1                   (135 = 0x87)
    105          
    106          *** Waitable objects deleted with waiting tasks or occupied by task ***
    107          OS_ERR_MAILBOX_DELETE                 (136 = 0x88)
    108          OS_ERR_CSEMA_DELETE                   (137 = 0x89)
    109          OS_ERR_RSEMA_DELETE                   (138 = 0x8A)
    110          
    111          *** Internal errors, please contact SEGGER Microcontrollersysteme ***
    112          OS_ERR_MAILBOX_NOT_IN_LIST            (140 = 0x8C)
    113          OS_ERR_TASKLIST_CORRUPT               (142 = 0x8E)
    114          
    115          *** Queue errors *********************************
    116          OS_ERR_QUEUE_INUSE                    (143 = 0x8F)
    117          OS_ERR_QUEUE_NOT_INUSE                (144 = 0x90)
    118          OS_ERR_QUEUE_INVALID                  (145 = 0x91)
    119          
    120          *** Not matching routine calls or macro usage ****
    121          OS_ERR_UNUSE_BEFORE_USE               (150 = 0x96)
    122          OS_ERR_LEAVEREGION_BEFORE_ENTERREGION (151 = 0x97)
    123          OS_ERR_LEAVEINT                       (152 = 0x98)
    124          OS_ERR_DICNT                          (153 = 0x99)
    125          OS_ERR_INTERRUPT_DISABLED             (154 = 0x9A)
    126          OS_ERR_TASK_ENDS_WITHOUT_TERMINATE    (155 = 0x9B)
    127          OS_ERR_RESOURCE_OWNER                 (156 = 0x9C)
    128          
    129          *** Not a legal system call during interrupt *****
    130          OS_ERR_ILLEGAL_IN_ISR                 (160 = 0xA0)
    131          
    132          *** Not a legal system call during timer *********
    133          OS_ERR_ILLEGAL_IN_TIMER               (161 = 0xA1)
    134          
    135          *** Not a legal system call outside interrupt ****
    136          OS_ERR_ILLEGAL_OUT_ISR                (162 = 0xA2)
    137          
    138          *** Illegal states or function calls *************
    139          OS_ERR_NOT_IN_ISR                     (163 = 0xA3)  *** OS_EnterInterrupt() has been called, but CPU is not in ISR state
    140          OS_ERR_IN_ISR                         (164 = 0xA4)  *** OS_EnterInterrupt() has not been called, but CPU is in ISR state
    141          
    142          OS_ERR_INIT_NOT_CALLED                (165 = 0xA5)  *** OS_InitKern() was not called
    143          
    144          OS_ERR_CPU_STATE_ISR_ILLEGAL          (166 = 0xA6)  *** OS-function called from ISR with high priority
    145          OS_ERR_CPU_STATE_ILLEGAL              (167 = 0xA7)  *** CPU runs in illegal mode
    146          OS_ERR_CPU_STATE_UNKNOWN              (168 = 0xA8)  *** CPU runs in unknown mode or mode could not be read
    147          
    148          *** Double used data structures **
    149          OS_ERR_2USE_TASK                      (170 = 0xAA)
    150          OS_ERR_2USE_TIMER                     (171 = 0xAB)
    151          OS_ERR_2USE_MAILBOX                   (172 = 0xAC)
    152          OS_ERR_2USE_BSEMA                     (173 = 0xAD)
    153          OS_ERR_2USE_CSEMA                     (174 = 0xAE)
    154          OS_ERR_2USE_RSEMA                     (175 = 0xAF)
    155          OS_ERR_2USE_MEMF                      (176 = 0xB0)
    156          
    157          *** Communication errors (OSCOM) **
    158          OS_ERR_NESTED_RX_INT                  (180 = 0xB4)
    159          
    160          *** Fixed block memory pool  ***
    161          OS_ERR_MEMF_INV                       (190 = 0xBE)
    162          OS_ERR_MEMF_INV_PTR                   (191 = 0xBF)
    163          OS_ERR_MEMF_PTR_FREE                  (192 = 0xC0)
    164          OS_ERR_MEMF_RELEASE                   (193 = 0xC1)
    165          OS_ERR_MEMF_POOLADDR                  (194 = 0xC2)
    166          OS_ERR_MEMF_BLOCKSIZE                 (195 = 0xC3)
    167          
    168          *** Task suspend / resume errors ***
    169          OS_ERR_SUSPEND_TOO_OFTEN              (200 = 0xC8)
    170          OS_ERR_RESUME_BEFORE_SUSPEND          (201 = 0xC9)
    171          
    172          *** Other task related errors ***
    173          OS_ERR_TASK_PRIORITY                  (202 = 0xCA)
    174          
    175          *** Event object ***
    176          OS_ERR_EVENT_INVALID                  (210 = 0xD2)
    177          OS_ERR_2USE_EVENTOBJ                  (211 = 0xD3)
    178          OS_ERR_EVENT_DELETE                   (212 = 0xD4)
    179          
    180          *** Cache related ***
    181          OS_ERR_NON_ALIGNED_INVALIDATE         (230 = 0xE6)  *** Cache invalidation needs to be cache line aligned
    182          
    183          *** embOS special build, or internal
    184          OS_ERR_TRIAL_LIMIT                    (254 = 0xFE)
    185          
    186          */
    187          

   \                                 In section .text, align 4, keep-with-next
    188          void OS_Error(int ErrCode) {
    189            OS_EnterRegion();     /* Avoid further task switches            */
   \                     OS_Error:
   \   00000000   34109FE5           LDR      R1,??OS_Error_0
   \   00000004   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000008   012082E2           ADD      R2,R2,#+1
   \   0000000C   0020C1E5           STRB     R2,[R1, #+0]
    190            OS_DICnt = 0;         /* Allow interrupts so we can communicate */
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   0120C1E5           STRB     R2,[R1, #+1]
    191            OS_EI();
   \   00000018   00100FE1           MRS      R1,CPSR
   \   0000001C   8010C1E3           BIC      R1,R1,#0x80
   \   00000020   01F021E1           MSR      CPSR_c,R1
    192            OS_Status = (OS_U8) ErrCode;
   \   00000024   14109FE5           LDR      R1,??OS_Error_0+0x4
   \   00000028   0000C1E5           STRB     R0,[R1, #+0]
    193            while (OS_Status);
   \                     ??OS_Error_1:
   \   0000002C   0000D1E5           LDRB     R0,[R1, #+0]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   FCFFFF1A           BNE      ??OS_Error_1
    194          }
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??OS_Error_0:
   \   0000003C   ........           DC32     OS_Global
   \   00000040   ........           DC32     OS_Status
    195          
    196          /****** End Of File *************************************************/

   Maximum stack usage in bytes:

     Function .cstack
     -------- -------
     OS_Error      0


   Section sizes:

     Function/Label Bytes
     -------------- -----
     OS_Error         68

 
 68 bytes in section .text
 
 68 bytes of CODE memory

Errors: none
Warnings: none
