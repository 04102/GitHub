###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:14:15 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LISTVIEW_DeleteRow.c                #
#    Command line =  C:\DUII\TargetHW\GUI\LISTVIEW_DeleteRow.c -D DEBUG=1 -D  #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\LISTVIEW_DeleteRow.lst     #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\LISTVIEW_DeleteRow.o        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LISTVIEW_DeleteRow.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LISTVIEW_DeleteRow.c
     19          Purpose     : Implementation of LISTVIEW_DeleteRow
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "LISTVIEW_Private.h"
     24          
     25          #if GUI_WINSUPPORT
     26          
     27          /*********************************************************************
     28          *
     29          *       Private routines
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       LISTVIEW__InvalidateRowAndBelow
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          void LISTVIEW__InvalidateRowAndBelow(LISTVIEW_Handle hObj, LISTVIEW_Obj* pObj, int Sel) {
   \                     LISTVIEW__InvalidateRowAndBelow:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   0250B0E1           MOVS     R5,R2
     38            if (Sel >= 0) {
   \   00000014   1100004A           BMI      ??LISTVIEW__InvalidateRowAndBelow_0
     39              GUI_RECT Rect;
     40              int HeaderHeight, RowDistY;
     41              HeaderHeight = HEADER_GetHeight(pObj->hHeader);
   \   00000018   340097E5           LDR      R0,[R7, #+52]
   \   0000001C   ........           BL       HEADER_GetHeight
   \   00000020   0080A0E1           MOV      R8,R0
     42              RowDistY     = LISTVIEW__GetRowDistY(pObj);
   \   00000024   0700A0E1           MOV      R0,R7
   \   00000028   ........           BL       LISTVIEW__GetRowDistY
   \   0000002C   0060A0E1           MOV      R6,R0
     43              WM_GetInsideRectExScrollbar(hObj, &Rect);
   \   00000030   0D10A0E1           MOV      R1,SP
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM_GetInsideRectExScrollbar
     44              Rect.y0 += HeaderHeight + (Sel - pObj->ScrollStateV.v) * RowDistY;
   \   0000003C   F200DDE1           LDRSH    R0,[SP, #+2]
   \   00000040   901097E5           LDR      R1,[R7, #+144]
   \   00000044   000088E0           ADD      R0,R8,R0
   \   00000048   011045E0           SUB      R1,R5,R1
   \   0000004C   960120E0           MLA      R0,R6,R1,R0
     45              WM_InvalidateRect(hObj, &Rect);
   \   00000050   0D10A0E1           MOV      R1,SP
   \   00000054   B200CDE1           STRH     R0,[SP, #+2]
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           BL       WM_InvalidateRect
     46            }
     47          }
   \                     ??LISTVIEW__InvalidateRowAndBelow_0:
   \   00000060   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000064   F081BDE8           POP      {R4-R8,PC}       ;; return
     48          
     49          /*********************************************************************
     50          *
     51          *       Public routines
     52          *
     53          **********************************************************************
     54          */
     55          /*********************************************************************
     56          *
     57          *       LISTVIEW_DeleteRow
     58          */

   \                                 In section .text, align 4, keep-with-next
     59          void LISTVIEW_DeleteRow(LISTVIEW_Handle hObj, unsigned Index) {
   \                     LISTVIEW_DeleteRow:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   0150A0E1           MOV      R5,R1
     60            LISTVIEW_Obj * pObj;
     61            unsigned NumRows;
     62            int ScrollChanged;
     63            unsigned NumColumns, i;
     64            LISTVIEW_ROW * pRow;
     65            GUI_ARRAY CellArray;
     66            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   5A00000A           BEQ      ??LISTVIEW_DeleteRow_0
     67              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
     68              pObj = LISTVIEW_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   0060A0E1           MOV      R6,R0
     69              NumRows = LISTVIEW__GetNumRows(pObj);
     70              if (Index < NumRows) {
   \   00000028   ........           BL       LISTVIEW__GetNumRows
   \   0000002C   000055E1           CMP      R5,R0
   \   00000030   5100002A           BCS      ??LISTVIEW_DeleteRow_1
     71                pRow = (LISTVIEW_ROW *)GUI_ARRAY_GetpItemLocked(pObj->RowArray, Index);
     72                CellArray = pRow->CellArray;
   \   00000034   0510A0E1           MOV      R1,R5
   \   00000038   380096E5           LDR      R0,[R6, #+56]
   \   0000003C   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000040   007090E5           LDR      R7,[R0, #+0]
     73                GUI_UNLOCK_H(pRow);
   \   00000044   ........           BL       GUI_ALLOC_UnlockH
     74                /* Delete attached info items */
     75                NumColumns = LISTVIEW__GetNumColumns(pObj);
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   ........           BL       LISTVIEW__GetNumColumns
   \   00000050   0080B0E1           MOVS     R8,R0
     76                for (i = 0; i < NumColumns; i++) {
   \   00000054   0090A0E3           MOV      R9,#+0
   \   00000058   0C00000A           BEQ      ??LISTVIEW_DeleteRow_2
     77                  LISTVIEW_CELL* pCell;
     78                  pCell = (LISTVIEW_CELL *)GUI_ARRAY_GetpItemLocked(CellArray, i);
   \                     ??LISTVIEW_DeleteRow_3:
   \   0000005C   0910A0E1           MOV      R1,R9
   \   00000060   0700A0E1           MOV      R0,R7
   \   00000064   ........           BL       GUI_ARRAY_GetpItemLocked
     79                  if (pCell) {
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   0400000A           BEQ      ??LISTVIEW_DeleteRow_4
     80                    if (pCell->hCellInfo) {
   \   00000070   000090E5           LDR      R0,[R0, #+0]
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0000000A           BEQ      ??LISTVIEW_DeleteRow_5
     81                      GUI_ALLOC_Free(pCell->hCellInfo);
   \   0000007C   ........           BL       GUI_ALLOC_Free
     82                    }
     83                    GUI_UNLOCK_H(pCell);
   \                     ??LISTVIEW_DeleteRow_5:
   \   00000080   ........           BL       GUI_ALLOC_UnlockH
     84                  }
     85                }
   \                     ??LISTVIEW_DeleteRow_4:
   \   00000084   019089E2           ADD      R9,R9,#+1
   \   00000088   080059E1           CMP      R9,R8
   \   0000008C   F2FFFF3A           BCC      ??LISTVIEW_DeleteRow_3
     86                /* Delete row */
     87                GUI_ARRAY_Delete(CellArray);
   \                     ??LISTVIEW_DeleteRow_2:
   \   00000090   0700A0E1           MOV      R0,R7
   \   00000094   ........           BL       GUI_ARRAY_Delete
     88                GUI_ARRAY_DeleteItem(pObj->RowArray, Index);
   \   00000098   0510A0E1           MOV      R1,R5
   \   0000009C   380096E5           LDR      R0,[R6, #+56]
   \   000000A0   ........           BL       GUI_ARRAY_DeleteItem
     89                /* Adjust properties */
     90                if (pObj->Sel == (int)Index) {
   \   000000A4   6C0096E5           LDR      R0,[R6, #+108]
   \   000000A8   050050E1           CMP      R0,R5
   \   000000AC   0200001A           BNE      ??LISTVIEW_DeleteRow_6
     91                  pObj->Sel = -1;
   \   000000B0   0000E0E3           MVN      R0,#+0
   \                     ??LISTVIEW_DeleteRow_7:
   \   000000B4   6C0086E5           STR      R0,[R6, #+108]
   \   000000B8   0D0000EA           B        ??LISTVIEW_DeleteRow_8
     92                } else if (pObj->SortIndex < 0) {
   \                     ??LISTVIEW_DeleteRow_6:
   \   000000BC   741096E5           LDR      R1,[R6, #+116]
   \   000000C0   000051E3           CMP      R1,#+0
   \   000000C4   0500005A           BPL      ??LISTVIEW_DeleteRow_9
     93                  if (pObj->Sel > (int)Index) {
   \   000000C8   000055E1           CMP      R5,R0
   \   000000CC   080000AA           BGE      ??LISTVIEW_DeleteRow_8
     94                    pObj->Sel--;
   \   000000D0   010040E2           SUB      R0,R0,#+1
   \   000000D4   F6FFFFEA           B        ??LISTVIEW_DeleteRow_7
     95                  }
     96                } else {
     97                  while (pObj->Sel >= (int)LISTVIEW__GetNumRows(pObj)) {
     98                    pObj->Sel = -1;
   \                     ??LISTVIEW_DeleteRow_10:
   \   000000D8   0000E0E3           MVN      R0,#+0
   \   000000DC   6C0086E5           STR      R0,[R6, #+108]
     99                  }
   \                     ??LISTVIEW_DeleteRow_9:
   \   000000E0   0600A0E1           MOV      R0,R6
   \   000000E4   ........           BL       LISTVIEW__GetNumRows
   \   000000E8   6C1096E5           LDR      R1,[R6, #+108]
   \   000000EC   000051E1           CMP      R1,R0
   \   000000F0   F8FFFFAA           BGE      ??LISTVIEW_DeleteRow_10
    100                }
    101                pObj->IsPresorted = 0;
   \                     ??LISTVIEW_DeleteRow_8:
   \   000000F4   0070A0E3           MOV      R7,#+0
   \   000000F8   A970C6E5           STRB     R7,[R6, #+169]
    102                GUI_UNLOCK_H(pObj);
   \   000000FC   ........           BL       GUI_ALLOC_UnlockH
    103                ScrollChanged = LISTVIEW__UpdateScrollParas(hObj);
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           BL       LISTVIEW__UpdateScrollParas
   \   00000108   0080A0E1           MOV      R8,R0
    104                pObj = LISTVIEW_LOCK_H(hObj);
   \   0000010C   0400A0E1           MOV      R0,R4
   \   00000110   ........           BL       GUI_ALLOC_LockH
   \   00000114   0070A0E1           MOV      R7,R0
    105                if (ScrollChanged) {
   \   00000118   000058E3           CMP      R8,#+0
   \   0000011C   0200000A           BEQ      ??LISTVIEW_DeleteRow_11
    106                  LISTVIEW__InvalidateInsideArea(hObj);
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   ........           BL       LISTVIEW__InvalidateInsideArea
   \   00000128   130000EA           B        ??LISTVIEW_DeleteRow_1
    107                } else {
    108                  LISTVIEW__InvalidateRowAndBelow(hObj, pObj, Index);
   \                     ??LISTVIEW_DeleteRow_11:
   \   0000012C   000055E3           CMP      R5,#+0
   \   00000130   1100004A           BMI      ??LISTVIEW_DeleteRow_1
   \   00000134   340097E5           LDR      R0,[R7, #+52]
   \   00000138   ........           BL       HEADER_GetHeight
   \   0000013C   0080A0E1           MOV      R8,R0
   \   00000140   0700A0E1           MOV      R0,R7
   \   00000144   ........           BL       LISTVIEW__GetRowDistY
   \   00000148   0060A0E1           MOV      R6,R0
   \   0000014C   0D10A0E1           MOV      R1,SP
   \   00000150   0400A0E1           MOV      R0,R4
   \   00000154   ........           BL       WM_GetInsideRectExScrollbar
   \   00000158   F200DDE1           LDRSH    R0,[SP, #+2]
   \   0000015C   901097E5           LDR      R1,[R7, #+144]
   \   00000160   000088E0           ADD      R0,R8,R0
   \   00000164   011045E0           SUB      R1,R5,R1
   \   00000168   960120E0           MLA      R0,R6,R1,R0
   \   0000016C   0D10A0E1           MOV      R1,SP
   \   00000170   B200CDE1           STRH     R0,[SP, #+2]
   \   00000174   0400A0E1           MOV      R0,R4
   \   00000178   ........           BL       WM_InvalidateRect
    109                }
    110              }
    111              GUI_UNLOCK_H(pObj);
   \                     ??LISTVIEW_DeleteRow_1:
   \   0000017C   ........           BL       GUI_ALLOC_UnlockH
    112              WM_UNLOCK();
   \   00000180   ........           BL       GUI_Unlock
    113            }
    114          }
   \                     ??LISTVIEW_DeleteRow_0:
   \   00000184   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000188   F083BDE8           POP      {R4-R9,PC}       ;; return
    115          
    116          #else                            /* Avoid problems with empty object modules */
    117            void LISTVIEW_DeleteRow_C(void);
    118            void LISTVIEW_DeleteRow_C(void) {}
    119          #endif
    120          
    121          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     LISTVIEW_DeleteRow                 40
     LISTVIEW__InvalidateRowAndBelow
                                        32


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     LISTVIEW__InvalidateRowAndBelow
                                     104
     LISTVIEW_DeleteRow              396

 
 500 bytes in section .text
 
 500 bytes of CODE memory

Errors: none
Warnings: none
