###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:08:19 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_DrawBitmap_8888.c               #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_DrawBitmap_8888.c -D DEBUG=1    #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D  #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_DrawBitmap_8888.lst    #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_DrawBitmap_8888.o       #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_DrawBitmap_8888.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_DrawBitmap_8888.c
     19          Purpose     : Drawing routine for drawing a 16bpp bitmap
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       _FillRectAlpha
     34          */
     35          static void _FillRectAlpha(int x0, int y0, int x1, int y1, U8 Alpha, LCD_COLOR Color) {
     36            do {
     37              int x;
     38              for (x = x0; x <= x1; x++) {
     39                GUI__SetPixelAlpha(x, y0, Alpha, Color);
     40              }
     41            } while (++y0 <= y1);
     42          }
     43          
     44          /*********************************************************************
     45          *
     46          *       _GetDistToNextAlpha
     47          */
     48          static int _GetDistToNextAlpha(const U32 GUI_UNI_PTR * pPixel, U32 RemPixels) {
     49            U32 Cnt = 0;
     50            do {
     51              if (*(pPixel++) & 0xff000000) {
     52                break;
     53              }
     54              Cnt++;
     55            } while (--RemPixels);
     56            return Cnt;
     57          }
     58          
     59          /*********************************************************************
     60          *
     61          *       _DoClipping
     62          */

   \                                 In section .text, align 4, keep-with-next
     63          static int _DoClipping(int * px0, int * py0, int * pxsize, int * pysize, const U32 ** ppData, int BytesPerLine) {
   \                     _DoClipping:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     64            int x1, y1, Diff;
     65            const U32 * pData;
     66            pData = *ppData;
     67            //
     68            // Perform clipping
     69            //
     70            y1 = *py0 + *pysize - 1;
     71            x1 = *px0 + *pxsize - 1;
   \   00000004   007090E5           LDR      R7,[R0, #+0]
   \   00000008   008092E5           LDR      R8,[R2, #+0]
   \   0000000C   005091E5           LDR      R5,[R1, #+0]
   \   00000010   077088E0           ADD      R7,R8,R7
     72            //
     73            // Clip Y
     74            //
     75            if (*py0 < GUI_Context.ClipRect.y0) {
   \   00000014   ........           LDR      R8,??DataTable4
   \   00000018   006093E5           LDR      R6,[R3, #+0]
   \   0000001C   FA90D8E1           LDRSH    R9,[R8, #+10]
   \   00000020   1CC09DE5           LDR      R12,[SP, #+28]
   \   00000024   056086E0           ADD      R6,R6,R5
   \   00000028   20409DE5           LDR      R4,[SP, #+32]
   \   0000002C   00E09CE5           LDR      LR,[R12, #+0]
   \   00000030   016046E2           SUB      R6,R6,#+1
   \   00000034   017047E2           SUB      R7,R7,#+1
   \   00000038   090055E1           CMP      R5,R9
   \   0000003C   070000AA           BGE      ??_DoClipping_0
     76              Diff = GUI_Context.ClipRect.y0 - *py0;
   \   00000040   055049E0           SUB      R5,R9,R5
     77              *py0   = GUI_Context.ClipRect.y0;
   \   00000044   009081E5           STR      R9,[R1, #+0]
     78              #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
     79                pData += (U32)Diff * (U32)BytesPerLine / 4;
   \   00000048   940501E0           MUL      R1,R4,R5
   \   0000004C   2111A0E1           LSR      R1,R1,#+2
   \   00000050   01E18EE0           ADD      LR,LR,R1, LSL #+2
     80              #else
     81                pData += (unsigned)Diff * (unsigned)BytesPerLine / 4;
     82              #endif
     83              *pysize -= Diff;
   \   00000054   001093E5           LDR      R1,[R3, #+0]
   \   00000058   051041E0           SUB      R1,R1,R5
   \   0000005C   001083E5           STR      R1,[R3, #+0]
     84            }
     85            Diff = y1 - GUI_Context.ClipRect.y1;
   \                     ??_DoClipping_0:
   \   00000060   FE10D8E1           LDRSH    R1,[R8, #+14]
   \   00000064   011046E0           SUB      R1,R6,R1
     86            if (Diff > 0) {
   \   00000068   010051E3           CMP      R1,#+1
     87              *pysize -= Diff;
   \   0000006C   004093A5           LDRGE    R4,[R3, #+0]
   \   00000070   011044A0           SUBGE    R1,R4,R1
   \   00000074   001083A5           STRGE    R1,[R3, #+0]
     88            }
     89            if (*pysize <=0) {
   \   00000078   001093E5           LDR      R1,[R3, #+0]
   \   0000007C   010051E3           CMP      R1,#+1
   \   00000080   010000AA           BGE      ??_DoClipping_1
     90          		return 1;
   \                     ??_DoClipping_2:
   \   00000084   0100A0E3           MOV      R0,#+1
   \   00000088   F083BDE8           POP      {R4-R9,PC}
     91            }
     92            //
     93            // Clip right side
     94            //
     95            Diff = x1 - GUI_Context.ClipRect.x1;
   \                     ??_DoClipping_1:
   \   0000008C   FC10D8E1           LDRSH    R1,[R8, #+12]
   \   00000090   011047E0           SUB      R1,R7,R1
     96            if (Diff > 0) {
   \   00000094   010051E3           CMP      R1,#+1
     97              *pxsize -= Diff;
   \   00000098   003092A5           LDRGE    R3,[R2, #+0]
   \   0000009C   011043A0           SUBGE    R1,R3,R1
   \   000000A0   001082A5           STRGE    R1,[R2, #+0]
   \   000000A4   F810D8E1           LDRSH    R1,[R8, #+8]
   \   000000A8   003090E5           LDR      R3,[R0, #+0]
   \   000000AC   010053E1           CMP      R3,R1
   \   000000B0   070000AA           BGE      ??_DoClipping_3
     98            }
     99            //
    100            // Clip left side
    101            //
    102            if (*px0 < GUI_Context.ClipRect.x0) {
    103              Diff = GUI_Context.ClipRect.x0 - *px0;
   \   000000B4   031041E0           SUB      R1,R1,R3
    104          		*pxsize -= Diff;
   \   000000B8   003092E5           LDR      R3,[R2, #+0]
    105              pData += Diff; 
   \   000000BC   01E18EE0           ADD      LR,LR,R1, LSL #+2
   \   000000C0   013043E0           SUB      R3,R3,R1
   \   000000C4   003082E5           STR      R3,[R2, #+0]
    106              *px0 += Diff; 
   \   000000C8   003090E5           LDR      R3,[R0, #+0]
   \   000000CC   031081E0           ADD      R1,R1,R3
   \   000000D0   001080E5           STR      R1,[R0, #+0]
    107            }
    108            if (*pxsize <=0) {
   \                     ??_DoClipping_3:
   \   000000D4   000092E5           LDR      R0,[R2, #+0]
   \   000000D8   010050E3           CMP      R0,#+1
   \   000000DC   E8FFFFBA           BLT      ??_DoClipping_2
    109          		return 1;
    110            }
    111            *ppData = pData;
   \   000000E0   00E08CE5           STR      LR,[R12, #+0]
    112            return 0;
   \   000000E4   0000A0E3           MOV      R0,#+0
   \   000000E8   F083BDE8           POP      {R4-R9,PC}       ;; return
    113          }
    114          
    115          /*********************************************************************
    116          *
    117          *       _DrawBitmap
    118          */

   \                                 In section .text, align 4, keep-with-next
    119          static void _DrawBitmap(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, int xMag, int yMag, tLCDDEV_Index2Color * pfIndex2Color) {
   \                     _DrawBitmap:
   \   00000000   FF4F2DE9           PUSH     {R0-R11,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   58609DE5           LDR      R6,[SP, #+88]
   \   0000000C   64409DE5           LDR      R4,[SP, #+100]
    120            const U32 * pData;
    121            int x, y, xi, yi, yMax, Mag, BytesPerLine, UseDrawBitmap, xRem, Diff, Dist;
    122            U32 PrevColor;
    123            U32 Color;
    124            U8  Alpha;
    125            const U32 GUI_UNI_PTR * p;
    126            GUI_COLOR OldColor; 
    127            
    128            UseDrawBitmap = 0;
    129            OldColor      = GUI_GetColor();
   \   00000010   ........           BL       GUI_GetColor
   \   00000014   10008DE5           STR      R0,[SP, #+16]
    130            PrevColor     = GUI_INVALID_COLOR;
    131            pData         = (const U32 *)pPixel;
    132            Mag           = (xMag | yMag);
    133            BytesPerLine  = xsize * 4;
   \   00000018   2C009DE5           LDR      R0,[SP, #+44]
    134            //
    135            // Check if bitmaps color format fits to the current color conversion
    136            //
    137            if (Mag == 1) {
   \   0000001C   60109DE5           LDR      R1,[SP, #+96]
   \   00000020   0001A0E1           LSL      R0,R0,#+2
   \   00000024   1C008DE5           STR      R0,[SP, #+28]
   \   00000028   5C009DE5           LDR      R0,[SP, #+92]
   \   0000002C   F054E0E3           MVN      R5,#-268435456
   \   00000030   000081E1           ORR      R0,R1,R0
   \   00000034   18608DE5           STR      R6,[SP, #+24]
   \   00000038   010050E3           CMP      R0,#+1
   \   0000003C   BA00001A           BNE      ??_DrawBitmap_0
   \   00000040   ........           LDR      R0,??DataTable4
   \   00000044   1100D0E5           LDRB     R0,[R0, #+17]
    138              tLCDDEV_Index2Color * pfIndex2ColorCompare;
    139              pfIndex2ColorCompare = GUI_GetpfIndex2ColorEx(GUI_Context.SelLayer); /* Get pointer to color conversion routine */
    140              if (pfIndex2ColorCompare == pfIndex2Color) {                         /* Check if color conversion routine fits  */
   \   00000048   ........           BL       GUI_GetpfIndex2ColorEx
   \   0000004C   040050E1           CMP      R0,R4
   \   00000050   6B00001A           BNE      ??_DrawBitmap_1
    141                UseDrawBitmap = 1;
    142              }
    143            }
    144            if (UseDrawBitmap) {
    145              do {
    146                //
    147                // Perform vertical clipping
    148                //
    149                Diff = GUI_Context.ClipRect.y0 - y0;
   \                     ??_DrawBitmap_2:
   \   00000054   ........           LDR      R0,??DataTable4
   \   00000058   28109DE5           LDR      R1,[SP, #+40]
   \   0000005C   FA00D0E1           LDRSH    R0,[R0, #+10]
   \   00000060   010040E0           SUB      R0,R0,R1
    150                if (Diff > ysize) {
   \   00000064   30109DE5           LDR      R1,[SP, #+48]
   \   00000068   000051E1           CMP      R1,R0
   \   0000006C   0C0100BA           BLT      ??_DrawBitmap_3
    151                  break;
    152                }
    153                if (Diff > 0) {
   \   00000070   010050E3           CMP      R0,#+1
   \   00000074   0C0000BA           BLT      ??_DrawBitmap_4
    154                  y0    += Diff;
   \   00000078   28109DE5           LDR      R1,[SP, #+40]
   \   0000007C   011080E0           ADD      R1,R0,R1
   \   00000080   28108DE5           STR      R1,[SP, #+40]
    155                  pData += Diff * xsize;
   \   00000084   2C109DE5           LDR      R1,[SP, #+44]
   \   00000088   910002E0           MUL      R2,R1,R0
   \   0000008C   18109DE5           LDR      R1,[SP, #+24]
   \   00000090   021181E0           ADD      R1,R1,R2, LSL #+2
   \   00000094   18108DE5           STR      R1,[SP, #+24]
    156                  ysize -= Diff;
   \   00000098   30109DE5           LDR      R1,[SP, #+48]
   \   0000009C   000041E0           SUB      R0,R1,R0
   \   000000A0   30008DE5           STR      R0,[SP, #+48]
    157                  if (ysize <= 0) {
   \   000000A4   010050E3           CMP      R0,#+1
   \   000000A8   FD0000BA           BLT      ??_DrawBitmap_3
    158                    break;
    159                  }
    160                }
    161                if (y0 > GUI_Context.ClipRect.y1) {
   \                     ??_DrawBitmap_4:
   \   000000AC   ........           LDR      R0,??DataTable4
   \   000000B0   28109DE5           LDR      R1,[SP, #+40]
   \   000000B4   FE00D0E1           LDRSH    R0,[R0, #+14]
   \   000000B8   010050E1           CMP      R0,R1
   \   000000BC   F80000BA           BLT      ??_DrawBitmap_3
    162                  break;
    163                }
    164                //
    165                // Perform horizontal clipping
    166                //
    167                xRem = xsize;
    168                x = x0;
    169                Diff = GUI_Context.ClipRect.x0 - x0;
   \   000000C0   ........           LDR      R0,??DataTable4
   \   000000C4   24609DE5           LDR      R6,[SP, #+36]
   \   000000C8   F800D0E1           LDRSH    R0,[R0, #+8]
   \   000000CC   2C409DE5           LDR      R4,[SP, #+44]
   \   000000D0   060040E0           SUB      R0,R0,R6
    170                if (Diff > 0) {
   \   000000D4   010050E3           CMP      R0,#+1
   \   000000D8   040000BA           BLT      ??_DrawBitmap_5
    171                  x     += Diff;
    172                  pData += Diff;
   \   000000DC   18109DE5           LDR      R1,[SP, #+24]
   \   000000E0   066080E0           ADD      R6,R0,R6
   \   000000E4   001181E0           ADD      R1,R1,R0, LSL #+2
   \   000000E8   18108DE5           STR      R1,[SP, #+24]
    173                  xRem  -= Diff;
   \   000000EC   004044E0           SUB      R4,R4,R0
    174                }
    175                if (x > GUI_Context.ClipRect.x1) {
   \                     ??_DrawBitmap_5:
   \   000000F0   ........           LDR      R0,??DataTable4
   \   000000F4   FC00D0E1           LDRSH    R0,[R0, #+12]
   \   000000F8   060050E1           CMP      R0,R6
   \   000000FC   E80000BA           BLT      ??_DrawBitmap_3
    176                  break;
    177                }
    178                if (xRem < 0) {
   \   00000100   000054E3           CMP      R4,#+0
   \   00000104   E600004A           BMI      ??_DrawBitmap_3
    179                  break;
    180                }
    181                //
    182                // Iterate
    183                //
    184                do {
    185                  Dist = _GetDistToNextAlpha(pData, xRem);
   \                     ??_DrawBitmap_6:
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   18109DE5           LDR      R1,[SP, #+24]
   \   00000110   0070A0E3           MOV      R7,#+0
   \                     ??_DrawBitmap_7:
   \   00000114   042091E4           LDR      R2,[R1], #+4
   \   00000118   FF0412E3           TST      R2,#0xFF000000
   \   0000011C   0200001A           BNE      ??_DrawBitmap_8
   \   00000120   017087E2           ADD      R7,R7,#+1
   \   00000124   010050E2           SUBS     R0,R0,#+1
   \   00000128   F9FFFF1A           BNE      ??_DrawBitmap_7
    186                  if (Dist) {
   \                     ??_DrawBitmap_8:
   \   0000012C   000057E3           CMP      R7,#+0
   \   00000130   1500000A           BEQ      ??_DrawBitmap_9
    187                    //
    188                    // Use fast LCD_DrawBitmap() for pixels without alpha value
    189                    //
    190                    LCD_DrawBitmap(x, y0, Dist, 1, 1, 1, 32, BytesPerLine, (const U8 GUI_UNI_PTR *)pData, 0);
   \   00000134   0000A0E3           MOV      R0,#+0
   \   00000138   14008DE5           STR      R0,[SP, #+20]
   \   0000013C   18009DE5           LDR      R0,[SP, #+24]
   \   00000140   0130A0E3           MOV      R3,#+1
   \   00000144   10008DE5           STR      R0,[SP, #+16]
   \   00000148   1C009DE5           LDR      R0,[SP, #+28]
   \   0000014C   0720A0E1           MOV      R2,R7
   \   00000150   0C008DE5           STR      R0,[SP, #+12]
   \   00000154   2000A0E3           MOV      R0,#+32
   \   00000158   08008DE5           STR      R0,[SP, #+8]
   \   0000015C   0100A0E3           MOV      R0,#+1
   \   00000160   04008DE5           STR      R0,[SP, #+4]
   \   00000164   00008DE5           STR      R0,[SP, #+0]
   \   00000168   28109DE5           LDR      R1,[SP, #+40]
   \   0000016C   0600A0E1           MOV      R0,R6
   \   00000170   ........           BL       LCD_DrawBitmap
    191                    x     += Dist;
    192                    pData += Dist;
   \   00000174   18009DE5           LDR      R0,[SP, #+24]
   \   00000178   066087E0           ADD      R6,R7,R6
   \   0000017C   070180E0           ADD      R0,R0,R7, LSL #+2
   \   00000180   18008DE5           STR      R0,[SP, #+24]
    193                    xRem  -= Dist;
   \   00000184   074044E0           SUB      R4,R4,R7
   \   00000188   120000EA           B        ??_DrawBitmap_10
    194                  } else {
    195                    //
    196                    // Handle single pixels
    197                    //
    198                    Color = *pData++;
   \                     ??_DrawBitmap_9:
   \   0000018C   18009DE5           LDR      R0,[SP, #+24]
   \   00000190   047090E4           LDR      R7,[R0], #+4
   \   00000194   18008DE5           STR      R0,[SP, #+24]
    199                    Alpha = Color >> 24;
   \   00000198   279CA0E1           LSR      R9,R7,#+24
    200                    if (Alpha < 255) {
   \   0000019C   FF0059E3           CMP      R9,#+255
   \   000001A0   0A0000AA           BGE      ??_DrawBitmap_11
    201                      if (Color != PrevColor) {
   \   000001A4   050057E1           CMP      R7,R5
   \   000001A8   0200000A           BEQ      ??_DrawBitmap_12
    202                        LCD_SetColor(Color);
   \   000001AC   0700A0E1           MOV      R0,R7
   \   000001B0   ........           BL       LCD_SetColor
    203                        PrevColor = Color;
   \   000001B4   0750A0E1           MOV      R5,R7
    204                      }
    205                      GUI__SetPixelAlpha(x, y0, 255 - Alpha, Color);
   \                     ??_DrawBitmap_12:
   \   000001B8   FF2069E2           RSB      R2,R9,#+255
   \   000001BC   0730A0E1           MOV      R3,R7
   \   000001C0   FF2002E2           AND      R2,R2,#0xFF
   \   000001C4   28109DE5           LDR      R1,[SP, #+40]
   \   000001C8   0600A0E1           MOV      R0,R6
   \   000001CC   ........           BL       GUI__SetPixelAlpha
    206                    }
    207                    x    ++;
   \                     ??_DrawBitmap_11:
   \   000001D0   016086E2           ADD      R6,R6,#+1
    208                    xRem --;
   \   000001D4   014044E2           SUB      R4,R4,#+1
    209                  }
    210                } while (xRem);
   \                     ??_DrawBitmap_10:
   \   000001D8   000054E3           CMP      R4,#+0
   \   000001DC   C9FFFF1A           BNE      ??_DrawBitmap_6
    211                y0++;
   \   000001E0   28009DE5           LDR      R0,[SP, #+40]
   \   000001E4   010080E2           ADD      R0,R0,#+1
   \   000001E8   28008DE5           STR      R0,[SP, #+40]
    212              } while (--ysize);
   \   000001EC   30009DE5           LDR      R0,[SP, #+48]
   \   000001F0   010040E2           SUB      R0,R0,#+1
   \   000001F4   30008DE5           STR      R0,[SP, #+48]
   \   000001F8   000050E3           CMP      R0,#+0
   \   000001FC   94FFFF1A           BNE      ??_DrawBitmap_2
   \   00000200   A70000EA           B        ??_DrawBitmap_3
    213            } else {
    214              if (Mag == 1) {
    215                if (_DoClipping(&x0, &y0, &xsize, &ysize, &pData, BytesPerLine)) {
   \                     ??_DrawBitmap_1:
   \   00000204   1C009DE5           LDR      R0,[SP, #+28]
   \   00000208   30308DE2           ADD      R3,SP,#+48
   \   0000020C   04008DE5           STR      R0,[SP, #+4]
   \   00000210   18008DE2           ADD      R0,SP,#+24
   \   00000214   00008DE5           STR      R0,[SP, #+0]
   \   00000218   2C208DE2           ADD      R2,SP,#+44
   \   0000021C   28108DE2           ADD      R1,SP,#+40
   \   00000220   24008DE2           ADD      R0,SP,#+36
   \   00000224   ........           BL       _DoClipping
   \   00000228   000050E3           CMP      R0,#+0
   \   0000022C   9C00001A           BNE      ??_DrawBitmap_3
    216                  return;
    217                }
    218                //
    219                // Simple, non magnified output using LCD_L0_SetPixel()
    220                //
    221                for (y = 0; y < ysize; y++) {
   \   00000230   30009DE5           LDR      R0,[SP, #+48]
   \   00000234   0080A0E3           MOV      R8,#+0
   \   00000238   ........           LDR      R4,??DataTable4_1
   \   0000023C   010050E3           CMP      R0,#+1
   \   00000240   950000BA           BLT      ??_DrawBitmap_13
    222                  p = pData;
   \                     ??_DrawBitmap_14:
   \   00000244   18109DE5           LDR      R1,[SP, #+24]
    223                  for (x = 0; x < xsize; x++) {
   \   00000248   2C009DE5           LDR      R0,[SP, #+44]
   \   0000024C   0C108DE5           STR      R1,[SP, #+12]
   \   00000250   0060A0E3           MOV      R6,#+0
   \   00000254   010050E3           CMP      R0,#+1
   \   00000258   260000BA           BLT      ??_DrawBitmap_15
    224                    Color = *p++;
   \                     ??_DrawBitmap_16:
   \   0000025C   0C109DE5           LDR      R1,[SP, #+12]
   \   00000260   047091E4           LDR      R7,[R1], #+4
   \   00000264   0C108DE5           STR      R1,[SP, #+12]
    225                    Alpha = Color >> 24;
   \   00000268   279CA0E1           LSR      R9,R7,#+24
    226                    if (Alpha < 255) {
   \   0000026C   FF0059E3           CMP      R9,#+255
   \   00000270   1C0000AA           BGE      ??_DrawBitmap_17
    227                      if (Color != PrevColor) {
   \   00000274   050057E1           CMP      R7,R5
   \   00000278   0200000A           BEQ      ??_DrawBitmap_18
    228                        LCD_SetColor(Color);
   \   0000027C   0700A0E1           MOV      R0,R7
   \   00000280   ........           BL       LCD_SetColor
    229                        PrevColor = Color;
   \   00000284   0750A0E1           MOV      R5,R7
    230                      }
    231                      if (Alpha) {
   \                     ??_DrawBitmap_18:
   \   00000288   24009DE5           LDR      R0,[SP, #+36]
   \   0000028C   28109DE5           LDR      R1,[SP, #+40]
   \   00000290   060080E0           ADD      R0,R0,R6
   \   00000294   081081E0           ADD      R1,R1,R8
   \   00000298   000059E3           CMP      R9,#+0
   \   0000029C   0400000A           BEQ      ??_DrawBitmap_19
    232                        GUI__SetPixelAlpha(x + x0, y + y0, 255 - Alpha, Color);
   \   000002A0   FF2069E2           RSB      R2,R9,#+255
   \   000002A4   0730A0E1           MOV      R3,R7
   \   000002A8   FF2002E2           AND      R2,R2,#0xFF
   \   000002AC   ........           BL       GUI__SetPixelAlpha
   \   000002B0   0C0000EA           B        ??_DrawBitmap_17
    233                      } else {
   \                     ??_DrawBitmap_19:
   \   000002B4   ........           LDR      R2,??DataTable4
   \   000002B8   ........           LDR      R3,??DataTable4
   \   000002BC   1120D2E5           LDRB     R2,[R2, #+17]
   \   000002C0   022183E0           ADD      R2,R3,R2, LSL #+2
   \   000002C4   48C092E5           LDR      R12,[R2, #+72]
   \   000002C8   002094E5           LDR      R2,[R4, #+0]
   \   000002CC   003092E5           LDR      R3,[R2, #+0]
   \   000002D0   0120A0E1           MOV      R2,R1
   \   000002D4   0010A0E1           MOV      R1,R0
   \   000002D8   0C00A0E1           MOV      R0,R12
   \   000002DC   0CC09CE5           LDR      R12,[R12, #+12]
   \   000002E0   18C09CE5           LDR      R12,[R12, #+24]
    234                        LCDDEV_L0_SetPixelIndex(GUI_Context.apDevice[GUI_Context.SelLayer], x + x0, y + y0, LCD__GetColorIndex());
   \   000002E4   3CFF2FE1           BLX      R12
    235                      }
    236                    }
    237                  }
   \                     ??_DrawBitmap_17:
   \   000002E8   2C009DE5           LDR      R0,[SP, #+44]
   \   000002EC   016086E2           ADD      R6,R6,#+1
   \   000002F0   000056E1           CMP      R6,R0
   \   000002F4   D8FFFFBA           BLT      ??_DrawBitmap_16
    238                  pData += BytesPerLine / 4;
   \                     ??_DrawBitmap_15:
   \   000002F8   1C009DE5           LDR      R0,[SP, #+28]
   \   000002FC   1C109DE5           LDR      R1,[SP, #+28]
   \   00000300   C000A0E1           ASR      R0,R0,#+1
   \   00000304   200F81E0           ADD      R0,R1,R0, LSR #+30
   \   00000308   18109DE5           LDR      R1,[SP, #+24]
   \   0000030C   4001A0E1           ASR      R0,R0,#+2
   \   00000310   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000314   18008DE5           STR      R0,[SP, #+24]
    239                }
   \   00000318   30009DE5           LDR      R0,[SP, #+48]
   \   0000031C   018088E2           ADD      R8,R8,#+1
   \   00000320   000058E1           CMP      R8,R0
   \   00000324   5C0000AA           BGE      ??_DrawBitmap_13
   \   00000328   C5FFFFEA           B        ??_DrawBitmap_14
    240              } else {
    241                //
    242                // Magnified output using LCD_FillRect()
    243                //
    244                for (y = y0, yi = 0; yi < ysize; yi++, y += yMag, pPixel += BytesPerLine) {
   \                     ??_DrawBitmap_0:
   \   0000032C   30009DE5           LDR      R0,[SP, #+48]
   \   00000330   0010A0E3           MOV      R1,#+0
   \   00000334   28809DE5           LDR      R8,[SP, #+40]
   \   00000338   08108DE5           STR      R1,[SP, #+8]
   \   0000033C   010050E3           CMP      R0,#+1
   \   00000340   550000BA           BLT      ??_DrawBitmap_13
    245                  yMax = y + yMag - 1;
    246                  //
    247                  // Draw if within clip area
    248                  //
    249                  if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
   \                     ??_DrawBitmap_20:
   \   00000344   ........           LDR      R1,??DataTable4
   \   00000348   60009DE5           LDR      R0,[SP, #+96]
   \   0000034C   FA10D1E1           LDRSH    R1,[R1, #+10]
   \   00000350   000088E0           ADD      R0,R8,R0
   \   00000354   010040E2           SUB      R0,R0,#+1
   \   00000358   04008DE5           STR      R0,[SP, #+4]
   \   0000035C   010050E1           CMP      R0,R1
   \   00000360   3C0000BA           BLT      ??_DrawBitmap_21
   \   00000364   ........           LDR      R0,??DataTable4
   \   00000368   FE00D0E1           LDRSH    R0,[R0, #+14]
   \   0000036C   080050E1           CMP      R0,R8
   \   00000370   380000BA           BLT      ??_DrawBitmap_21
    250                    p = pData;
   \   00000374   18109DE5           LDR      R1,[SP, #+24]
    251                    for (x = x0, xi = 0; xi < xsize; xi++, x += xMag) {
   \   00000378   2C009DE5           LDR      R0,[SP, #+44]
   \   0000037C   0C108DE5           STR      R1,[SP, #+12]
   \   00000380   0010A0E3           MOV      R1,#+0
   \   00000384   24609DE5           LDR      R6,[SP, #+36]
   \   00000388   00108DE5           STR      R1,[SP, #+0]
   \   0000038C   010050E3           CMP      R0,#+1
   \   00000390   300000BA           BLT      ??_DrawBitmap_21
    252                      Color = *p++;
   \                     ??_DrawBitmap_22:
   \   00000394   0C109DE5           LDR      R1,[SP, #+12]
   \   00000398   047091E4           LDR      R7,[R1], #+4
   \   0000039C   0C108DE5           STR      R1,[SP, #+12]
    253                      Alpha = Color >> 24;
   \   000003A0   279CA0E1           LSR      R9,R7,#+24
    254                      if (Color != PrevColor) {
   \   000003A4   050057E1           CMP      R7,R5
   \   000003A8   0200000A           BEQ      ??_DrawBitmap_23
    255                        LCD_SetColor(Color);
   \   000003AC   0700A0E1           MOV      R0,R7
   \   000003B0   ........           BL       LCD_SetColor
    256                        PrevColor = Color;
   \   000003B4   0750A0E1           MOV      R5,R7
    257                      }
    258                      if (Alpha < 255) {
   \                     ??_DrawBitmap_23:
   \   000003B8   FF0059E3           CMP      R9,#+255
   \   000003BC   1C0000AA           BGE      ??_DrawBitmap_24
   \   000003C0   5C009DE5           LDR      R0,[SP, #+92]
   \   000003C4   000059E3           CMP      R9,#+0
   \   000003C8   000086E0           ADD      R0,R6,R0
   \   000003CC   012040E2           SUB      R2,R0,#+1
   \   000003D0   1300000A           BEQ      ??_DrawBitmap_25
    259                        if (Alpha) {
    260                          _FillRectAlpha(x, y, x + xMag - 1, yMax, 255 - Alpha, Color);
   \   000003D4   FF9069E2           RSB      R9,R9,#+255
   \   000003D8   0240A0E1           MOV      R4,R2
   \   000003DC   08A0A0E1           MOV      R10,R8
   \                     ??_DrawBitmap_26:
   \   000003E0   06B0A0E1           MOV      R11,R6
   \   000003E4   0B0054E1           CMP      R4,R11
   \   000003E8   040000AA           BGE      ??_DrawBitmap_27
   \                     ??_DrawBitmap_28:
   \   000003EC   04009DE5           LDR      R0,[SP, #+4]
   \   000003F0   01A08AE2           ADD      R10,R10,#+1
   \   000003F4   0A0050E1           CMP      R0,R10
   \   000003F8   F8FFFFAA           BGE      ??_DrawBitmap_26
   \   000003FC   0C0000EA           B        ??_DrawBitmap_24
   \                     ??_DrawBitmap_27:
   \   00000400   0730A0E1           MOV      R3,R7
   \   00000404   FF2009E2           AND      R2,R9,#0xFF
   \   00000408   0A10A0E1           MOV      R1,R10
   \   0000040C   0B00A0E1           MOV      R0,R11
   \   00000410   ........           BL       GUI__SetPixelAlpha
   \   00000414   01B08BE2           ADD      R11,R11,#+1
   \   00000418   0B0054E1           CMP      R4,R11
   \   0000041C   F7FFFFAA           BGE      ??_DrawBitmap_27
   \   00000420   F1FFFFEA           B        ??_DrawBitmap_28
    261                        } else {
    262                          LCD_FillRect(x, y, x + xMag - 1, yMax);
   \                     ??_DrawBitmap_25:
   \   00000424   04309DE5           LDR      R3,[SP, #+4]
   \   00000428   0810A0E1           MOV      R1,R8
   \   0000042C   0600A0E1           MOV      R0,R6
   \   00000430   ........           BL       LCD_FillRect
    263                        }
    264                      }
    265                    }
   \                     ??_DrawBitmap_24:
   \   00000434   00009DE5           LDR      R0,[SP, #+0]
   \   00000438   2C109DE5           LDR      R1,[SP, #+44]
   \   0000043C   010080E2           ADD      R0,R0,#+1
   \   00000440   00008DE5           STR      R0,[SP, #+0]
   \   00000444   5C009DE5           LDR      R0,[SP, #+92]
   \   00000448   066080E0           ADD      R6,R0,R6
   \   0000044C   00009DE5           LDR      R0,[SP, #+0]
   \   00000450   010050E1           CMP      R0,R1
   \   00000454   CEFFFFBA           BLT      ??_DrawBitmap_22
    266                  }
    267                  pData += BytesPerLine / 4;
   \                     ??_DrawBitmap_21:
   \   00000458   1C009DE5           LDR      R0,[SP, #+28]
   \   0000045C   1C109DE5           LDR      R1,[SP, #+28]
   \   00000460   C000A0E1           ASR      R0,R0,#+1
   \   00000464   200F81E0           ADD      R0,R1,R0, LSR #+30
   \   00000468   18109DE5           LDR      R1,[SP, #+24]
   \   0000046C   4001A0E1           ASR      R0,R0,#+2
   \   00000470   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000474   18008DE5           STR      R0,[SP, #+24]
    268                }
   \   00000478   08009DE5           LDR      R0,[SP, #+8]
   \   0000047C   30109DE5           LDR      R1,[SP, #+48]
   \   00000480   010080E2           ADD      R0,R0,#+1
   \   00000484   08008DE5           STR      R0,[SP, #+8]
   \   00000488   60009DE5           LDR      R0,[SP, #+96]
   \   0000048C   088080E0           ADD      R8,R0,R8
   \   00000490   08009DE5           LDR      R0,[SP, #+8]
   \   00000494   010050E1           CMP      R0,R1
   \   00000498   A9FFFFBA           BLT      ??_DrawBitmap_20
    269              }
    270              GUI_SetColor(OldColor);
   \                     ??_DrawBitmap_13:
   \   0000049C   10009DE5           LDR      R0,[SP, #+16]
   \   000004A0   ........           BL       GUI_SetColor
   \                     ??_DrawBitmap_3:
   \   000004A4   34D08DE2           ADD      SP,SP,#+52       ;; stack cleaning
   \   000004A8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    271            }
    272          }
    273          
    274          /*********************************************************************
    275          *
    276          *       _DrawBitmapHW
    277          */

   \                                 In section .text, align 4, keep-with-next
    278          static void _DrawBitmapHW(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel) {
   \                     _DrawBitmapHW:
   \   00000000   FF432DE9           PUSH     {R0-R9,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   38509DE5           LDR      R5,[SP, #+56]
    279            const U32 * pData;
    280            int y, OldIndex, BytesPerLine;
    281            OldIndex = LCD_GetColorIndex();
   \   0000000C   ........           BL       LCD_GetColorIndex
   \   00000010   0040A0E1           MOV      R4,R0
    282            pData = (const U32 *)pPixel;
    283            BytesPerLine = xsize * 4;
   \   00000014   14009DE5           LDR      R0,[SP, #+20]
   \   00000018   08508DE5           STR      R5,[SP, #+8]
   \   0000001C   0051A0E1           LSL      R5,R0,#+2
    284            if (_DoClipping(&x0, &y0, &xsize, &ysize, &pData, BytesPerLine)) {
   \   00000020   08008DE2           ADD      R0,SP,#+8
   \   00000024   00008DE5           STR      R0,[SP, #+0]
   \   00000028   04508DE5           STR      R5,[SP, #+4]
   \   0000002C   18308DE2           ADD      R3,SP,#+24
   \   00000030   14208DE2           ADD      R2,SP,#+20
   \   00000034   10108DE2           ADD      R1,SP,#+16
   \   00000038   0C008DE2           ADD      R0,SP,#+12
   \   0000003C   ........           BL       _DoClipping
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   2600001A           BNE      ??_DrawBitmapHW_0
    285              return;
    286            }
    287            //
    288            // Simple, non magnified output using LCD_L0_SetPixel()
    289            //
    290            for (y = 0; y < ysize; y++) {
   \   00000048   18009DE5           LDR      R0,[SP, #+24]
   \   0000004C   0060A0E3           MOV      R6,#+0
   \   00000050   ........           LDR      R7,??DataTable4
   \   00000054   010050E3           CMP      R0,#+1
   \   00000058   1F0000BA           BLT      ??_DrawBitmapHW_1
    291              int x;
    292              const U32 * p = pData;
    293              for (x = 0; x < xsize; x++) {
   \                     ??_DrawBitmapHW_2:
   \   0000005C   14009DE5           LDR      R0,[SP, #+20]
   \   00000060   08809DE5           LDR      R8,[SP, #+8]
   \   00000064   0090A0E3           MOV      R9,#+0
   \   00000068   010050E3           CMP      R0,#+1
   \   0000006C   100000BA           BLT      ??_DrawBitmapHW_3
    294                U32 Index, Color;
    295                Color = *p++;
   \                     ??_DrawBitmapHW_4:
   \   00000070   040098E4           LDR      R0,[R8], #+4
    296                Index = LCD_Color2Index(Color);
   \   00000074   ........           BL       LCD_Color2Index
   \   00000078   0030A0E1           MOV      R3,R0
   \   0000007C   1100D7E5           LDRB     R0,[R7, #+17]
   \   00000080   10109DE5           LDR      R1,[SP, #+16]
   \   00000084   000187E0           ADD      R0,R7,R0, LSL #+2
   \   00000088   480090E5           LDR      R0,[R0, #+72]
   \   0000008C   062081E0           ADD      R2,R1,R6
   \   00000090   0C109DE5           LDR      R1,[SP, #+12]
   \   00000094   0CC090E5           LDR      R12,[R0, #+12]
   \   00000098   091081E0           ADD      R1,R1,R9
   \   0000009C   18C09CE5           LDR      R12,[R12, #+24]
    297                LCDDEV_L0_SetPixelIndex(GUI_Context.apDevice[GUI_Context.SelLayer], x + x0, y + y0, Index);
   \   000000A0   3CFF2FE1           BLX      R12
    298              }
   \   000000A4   14009DE5           LDR      R0,[SP, #+20]
   \   000000A8   019089E2           ADD      R9,R9,#+1
   \   000000AC   000059E1           CMP      R9,R0
   \   000000B0   EEFFFFBA           BLT      ??_DrawBitmapHW_4
    299              pData += BytesPerLine / 4;
   \                     ??_DrawBitmapHW_3:
   \   000000B4   C500A0E1           ASR      R0,R5,#+1
   \   000000B8   200F85E0           ADD      R0,R5,R0, LSR #+30
   \   000000BC   08109DE5           LDR      R1,[SP, #+8]
   \   000000C0   4001A0E1           ASR      R0,R0,#+2
   \   000000C4   000181E0           ADD      R0,R1,R0, LSL #+2
   \   000000C8   08008DE5           STR      R0,[SP, #+8]
    300            }
   \   000000CC   18009DE5           LDR      R0,[SP, #+24]
   \   000000D0   016086E2           ADD      R6,R6,#+1
   \   000000D4   000056E1           CMP      R6,R0
   \   000000D8   DFFFFFBA           BLT      ??_DrawBitmapHW_2
    301            GUI_SetColorIndex(OldIndex);
   \                     ??_DrawBitmapHW_1:
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   ........           BL       GUI_SetColorIndex
    302          }
   \                     ??_DrawBitmapHW_0:
   \   000000E4   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   000000E8   F083BDE8           POP      {R4-R9,PC}       ;; return
    303          
    304          /*********************************************************************
    305          *
    306          *       _DrawBitmap_8888
    307          */

   \                                 In section .text, align 4, keep-with-next
    308          static void _DrawBitmap_8888(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
   \                     _DrawBitmap_8888:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   20C09DE5           LDR      R12,[SP, #+32]
   \   0000000C   28E09DE5           LDR      LR,[SP, #+40]
   \   00000010   2C409DE5           LDR      R4,[SP, #+44]
    309            GUI_USE_PARA(pLogPal);
    310            _DrawBitmap(x0, y0, xsize, ysize, pPixel, /*pLogPal, */xMag, yMag, GUI_BitmapMethods8888.pfIndex2Color);
   \   00000014   ........           LDR      R5,??DataTable4_2
   \   00000018   08408DE5           STR      R4,[SP, #+8]
   \   0000001C   0C508DE5           STR      R5,[SP, #+12]
   \   00000020   04E08DE5           STR      LR,[SP, #+4]
   \   00000024   00C08DE5           STR      R12,[SP, #+0]
   \   00000028   ........           BL       _DrawBitmap
    311          }
   \   0000002C   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000030   3080BDE8           POP      {R4,R5,PC}       ;; return
    312          
    313          /*********************************************************************
    314          *
    315          *       _DrawBitmapHW_8888
    316          */

   \                                 In section .text, align 4, keep-with-next
    317          static void _DrawBitmapHW_8888(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
   \                     _DrawBitmapHW_8888:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   08C09DE5           LDR      R12,[SP, #+8]
    318            GUI_USE_PARA(pLogPal);
    319            GUI_USE_PARA(xMag);
    320            GUI_USE_PARA(yMag);
    321            _DrawBitmapHW(x0, y0, xsize, ysize, pPixel);
   \   0000000C   00C08DE5           STR      R12,[SP, #+0]
   \   00000010   ........           BL       _DrawBitmapHW
    322          }
   \   00000014   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000018   0080BDE8           POP      {PC}             ;; return
    323          
    324          /*********************************************************************
    325          *
    326          *       Public data
    327          *
    328          **********************************************************************
    329          */
    330          /*********************************************************************
    331          *
    332          *       GUI_BitmapMethods8888
    333          */

   \                                 In section .rodata, align 4, keep-with-next
    334          const GUI_BITMAP_METHODS GUI_BitmapMethods8888 = {
   \                     GUI_BitmapMethods8888:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _DrawBitmap_8888, LCD_Index2Color_8888, _DrawBitmapHW_8888
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   ........           DC32     LCD_pColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   ........           DC32     LCD_Index2Color_8888
    335            _DrawBitmap_8888,
    336            LCD_Index2Color_8888,
    337            _DrawBitmapHW_8888,
    338          };
    339          
    340          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     _DoClipping            28
     _DrawBitmap            88
     _DrawBitmapHW          56
     _DrawBitmapHW_8888      8
     _DrawBitmap_8888       32


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     _DoClipping            236
     _DrawBitmap           1196
     _DrawBitmapHW          236
     _DrawBitmap_8888        52
     _DrawBitmapHW_8888      28
     GUI_BitmapMethods8888   12
     ??DataTable4             4
     ??DataTable4_1           4
     ??DataTable4_2           4

 
    12 bytes in section .rodata
 1 760 bytes in section .text
 
 1 760 bytes of CODE  memory
    12 bytes of CONST memory

Errors: none
Warnings: none
