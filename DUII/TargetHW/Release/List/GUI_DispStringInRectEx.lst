###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:13:08 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_DispStringInRectEx.c            #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_DispStringInRectEx.c -D         #
#                    DEBUG=1 -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D        #
#                    NOPROFILER -D OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN        #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_DispStringInRectEx.lst #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_DispStringInRectEx.o    #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_DispStringInRectEx.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_DispStringInRectEx.c
     19          Purpose     : Implementation of GUI_DispStringInRectEx
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          #if GUI_WINSUPPORT
     26            #include "WM.h"
     27          #endif
     28          
     29          #if GUI_SUPPORT_ROTATION
     30          
     31          /*********************************************************************
     32          *
     33          *       Global data
     34          *
     35          **********************************************************************
     36          */
     37          

   \                                 In section .bss, align 4
     38          GUI_RECT GUI_RectDispString; /* Used by LCD_Rotate... */
   \                     GUI_RectDispString:
   \   00000000                      DS8 8
     39          
     40          /*********************************************************************
     41          *
     42          *       Static code
     43          *
     44          **********************************************************************
     45          */
     46          static const GUI_ROTATION * _SetRotation(const GUI_ROTATION* pLCD_Api) {
     47            const GUI_ROTATION * pLCD_ApiOld;
     48            GUI_LOCK();
     49            pLCD_ApiOld = GUI_pLCD_APIList;
     50            if (pLCD_Api) {
     51              GUI_Context.pClipRect_HL = NULL;           /* Do not perform high level clipping in rotated mode */
     52            } else {
     53              GUI_Context.pClipRect_HL = &GUI_Context.ClipRect;
     54            }
     55            GUI_pLCD_APIList = pLCD_Api;
     56            GUI_UNLOCK();
     57            return pLCD_ApiOld;
     58          }
     59          
     60          /*********************************************************************
     61          *
     62          *       Exported code
     63          *
     64          **********************************************************************
     65          */
     66          /*********************************************************************
     67          *
     68          *       GUI_DispStringInRectEx
     69          */

   \                                 In section .text, align 4, keep-with-next
     70          void GUI_DispStringInRectEx(const char GUI_UNI_PTR *s, GUI_RECT* pRect, int TextAlign, int MaxLen, const GUI_ROTATION * pLCD_Api) {
   \                     GUI_DispStringInRectEx:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   38709DE5           LDR      R7,[SP, #+56]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0190A0E1           MOV      R9,R1
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   0360A0E1           MOV      R6,R3
     71            const GUI_ROTATION * pLCD_ApiOld;
     72            if (pLCD_Api == GUI_ROTATE_0) {
   \   0000001C   000057E3           CMP      R7,#+0
   \   00000020   0100001A           BNE      ??GUI_DispStringInRectEx_0
     73              /* Do nothing else but calling GUI_DispStringInRectMax if pLCD_Api == GUI_ROTATE_0 */
     74              GUI_DispStringInRectMax(s, pRect, TextAlign, MaxLen);
   \   00000024   ........           BL       GUI_DispStringInRectMax
   \   00000028   340000EA           B        ??GUI_DispStringInRectEx_1
     75            } else {
     76              #if (!GUI_WINSUPPORT)
     77                GUI_RECT Rect_Old;
     78              #else
     79                const GUI_RECT * pOldClipRect = NULL;
     80              #endif
     81              GUI_RECT rClip, rText = {0};
   \                     ??GUI_DispStringInRectEx_0:
   \   0000002C   ........           ADR      R3,`?<Constant {0}>`
   \   00000030   000093E5           LDR      R0,[R3, #+0]
   \   00000034   041093E5           LDR      R1,[R3, #+4]
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   030082E8           STM      R2,{R0,R1}
   \   00000040   0080A0E3           MOV      R8,#+0
     82              GUI_LOCK();
   \   00000044   ........           BL       GUI_Lock
     83              /* Set the clip rectangle */
     84              if (pRect) {
   \   00000048   000059E3           CMP      R9,#+0
   \   0000004C   1100000A           BEQ      ??GUI_DispStringInRectEx_2
     85                rText = *pRect;
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   0910A0E1           MOV      R1,R9
   \   00000058   0820A0E3           MOV      R2,#+8
   \   0000005C   ........           BL       __aeabi_memcpy
     86                GUI_RectDispString = rText;
   \   00000060   ........           LDR      R2,??DataTable1
   \   00000064   00009DE5           LDR      R0,[SP, #+0]
   \   00000068   04109DE5           LDR      R1,[SP, #+4]
   \   0000006C   030082E8           STM      R2,{R0,R1}
     87                #if (GUI_WINSUPPORT)
     88                  pOldClipRect = WM_SetUserClipRect(pRect);
   \   00000070   0900A0E1           MOV      R0,R9
   \   00000074   ........           BL       WM_SetUserClipRect
   \   00000078   0080B0E1           MOVS     R8,R0
     89                  if (pOldClipRect) {
   \   0000007C   0500000A           BEQ      ??GUI_DispStringInRectEx_2
     90                    GUI__IntersectRects(&rClip, pRect, pOldClipRect);
   \   00000080   0820A0E1           MOV      R2,R8
   \   00000084   0910A0E1           MOV      R1,R9
   \   00000088   08008DE2           ADD      R0,SP,#+8
   \   0000008C   ........           BL       GUI__IntersectRects
     91                    WM_SetUserClipRect(&rClip);
   \   00000090   08008DE2           ADD      R0,SP,#+8
   \   00000094   ........           BL       WM_SetUserClipRect
     92                  }
     93                #else
     94                  Rect_Old = GUI_Context.ClipRect;
     95                  GUI__IntersectRects(&rClip, pRect, &Rect_Old);
     96                  LCD_SetClipRectEx(&rClip);
     97                #endif
     98              }
     99              pLCD_ApiOld = _SetRotation(pLCD_Api);                /* Set the new function pointer for rotating text */
   \                     ??GUI_DispStringInRectEx_2:
   \   00000098   ........           BL       GUI_Lock
   \   0000009C   ........           LDR      R9,??DataTable1_1
   \   000000A0   ........           LDR      R11,??DataTable1_2
   \   000000A4   00A099E5           LDR      R10,[R9, #+0]
   \   000000A8   0000A0E3           MOV      R0,#+0
   \   000000AC   14008BE5           STR      R0,[R11, #+20]
   \   000000B0   007089E5           STR      R7,[R9, #+0]
   \   000000B4   ........           BL       GUI_Unlock
    100              pLCD_Api->pfRect2TextRect(&rText);                   /* Calculate the text rectangle */
   \   000000B8   0D00A0E1           MOV      R0,SP
   \   000000BC   041097E5           LDR      R1,[R7, #+4]
   \   000000C0   31FF2FE1           BLX      R1
    101              GUI__DispStringInRect(s, &rText, TextAlign, MaxLen); /* Display the string */
   \   000000C4   0630A0E1           MOV      R3,R6
   \   000000C8   0520A0E1           MOV      R2,R5
   \   000000CC   0D10A0E1           MOV      R1,SP
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           BL       GUI__DispStringInRect
    102              /* Restore old clipping rectangle */
    103              #if (GUI_WINSUPPORT)
    104                WM_SetUserClipRect(pOldClipRect);
   \   000000D8   0800A0E1           MOV      R0,R8
   \   000000DC   ........           BL       WM_SetUserClipRect
    105              #else
    106                LCD_SetClipRectEx(&Rect_Old);
    107              #endif
    108              _SetRotation(pLCD_ApiOld);
   \   000000E0   ........           BL       GUI_Lock
   \   000000E4   00005AE3           CMP      R10,#+0
   \   000000E8   08008B02           ADDEQ    R0,R11,#+8
   \   000000EC   0000A013           MOVNE    R0,#+0
   \   000000F0   14008BE5           STR      R0,[R11, #+20]
   \   000000F4   00A089E5           STR      R10,[R9, #+0]
   \   000000F8   ........           BL       GUI_Unlock
    109              GUI_UNLOCK();
   \   000000FC   ........           BL       GUI_Unlock
    110            }
    111          }
   \                     ??GUI_DispStringInRectEx_1:
   \   00000100   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000104   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_RectDispString

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     GUI_pLCD_APIList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   0000               DC16 0
   \   00000002   000000000000       DC8 0, 0, 0, 0, 0, 0
    112          
    113          #else                                 /* Avoid empty object files */
    114          void GUI_DispStringInRectEx_C(void);
    115          void GUI_DispStringInRectEx_C(void) {}
    116          #endif
    117          
    118          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     GUI_DispStringInRectEx     56


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     GUI_RectDispString        8
     GUI_DispStringInRectEx  264
     ??DataTable1              4
     ??DataTable1_1            4
     ??DataTable1_2            4
     ?<Constant {0}>           8

 
   8 bytes in section .bss
 284 bytes in section .text
 
 284 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
