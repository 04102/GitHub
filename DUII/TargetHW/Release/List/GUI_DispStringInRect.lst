###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:15:41 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_DispStringInRect.c              #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_DispStringInRect.c -D DEBUG=1   #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D  #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_DispStringInRect.lst   #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_DispStringInRect.o      #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_DispStringInRect.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_DispStringInRect.c
     19          Purpose     : Implementation of GUI_DispStringInRect
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          #if GUI_WINSUPPORT
     26            #include "WM.h"
     27          #endif
     28           
     29          /*********************************************************************
     30          *
     31          *       Public code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       GUI__DispStringInRect
     38          */

   \                                 In section .text, align 4, keep-with-next
     39          void GUI__DispStringInRect(const char GUI_UNI_PTR *s, GUI_RECT* pRect, int TextAlign, int MaxNumChars) {
   \                     GUI__DispStringInRect:
   \   00000000   F94F2DE9           PUSH     {R0,R3-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0190A0E1           MOV      R9,R1
   \   0000000C   0240A0E1           MOV      R4,R2
     40            GUI_RECT r;
     41            GUI_RECT rLine;
     42            int y = 0;
   \   00000010   0080A0E3           MOV      R8,#+0
     43            const char GUI_UNI_PTR *sOrg =s;
   \   00000014   0050A0E1           MOV      R5,R0
     44            int FontYSize;
     45            int xLine = 0;
   \   00000018   0060A0E3           MOV      R6,#+0
     46            int LineLen;
     47            int NumCharsRem;           /* Number of remaining characters */
     48            FontYSize = GUI_GetFontDistY();
   \   0000001C   ........           BL       GUI_GetFontDistY
   \   00000020   0070A0E1           MOV      R7,R0
     49            if (pRect) {
   \   00000024   000059E3           CMP      R9,#+0
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   0300000A           BEQ      ??GUI__DispStringInRect_0
     50              r = *pRect;
   \   00000030   0910A0E1           MOV      R1,R9
   \   00000034   0820A0E3           MOV      R2,#+8
   \   00000038   ........           BL       __aeabi_memcpy
   \   0000003C   000000EA           B        ??GUI__DispStringInRect_1
     51            } else {
     52              GUI_GetClientRect(&r);
   \                     ??GUI__DispStringInRect_0:
   \   00000040   ........           BL       GUI_GetClientRect
     53            }
     54            /* handle vertical alignment */
     55            if ((TextAlign & GUI_TA_VERTICAL) == GUI_TA_TOP) {
   \                     ??GUI__DispStringInRect_1:
   \   00000044   0C0014E3           TST      R4,#0xC
     56          		y = r.y0;
   \   00000048   F280DD01           LDRSHEQ  R8,[SP, #+2]
   \   0000004C   2700000A           BEQ      ??GUI__DispStringInRect_2
     57            } else {
     58              int NumLines;
     59              /* Count the number of lines */
     60              for (NumCharsRem = MaxNumChars, NumLines = 1; NumCharsRem ;NumLines++) {
   \   00000050   18909DE5           LDR      R9,[SP, #+24]
   \   00000054   01A0A0E3           MOV      R10,#+1
   \   00000058   000000EA           B        ??GUI__DispStringInRect_3
   \                     ??GUI__DispStringInRect_4:
   \   0000005C   01A08AE2           ADD      R10,R10,#+1
   \                     ??GUI__DispStringInRect_3:
   \   00000060   000059E3           CMP      R9,#+0
   \   00000064   0D00000A           BEQ      ??GUI__DispStringInRect_5
     61                LineLen = GUI__GetLineNumChars(s, NumCharsRem);
   \   00000068   0910A0E1           MOV      R1,R9
   \   0000006C   14009DE5           LDR      R0,[SP, #+20]
   \   00000070   ........           BL       GUI__GetLineNumChars
     62                NumCharsRem -= LineLen;
   \   00000074   009049E0           SUB      R9,R9,R0
     63                s += GUI_UC__NumChars2NumBytes(s, LineLen);
   \   00000078   0010A0E1           MOV      R1,R0
   \   0000007C   14009DE5           LDR      R0,[SP, #+20]
   \   00000080   ........           BL       GUI_UC__NumChars2NumBytes
   \   00000084   14109DE5           LDR      R1,[SP, #+20]
   \   00000088   010080E0           ADD      R0,R0,R1
   \   0000008C   14008DE5           STR      R0,[SP, #+20]
     64                if (GUI__HandleEOLine(&s))
   \   00000090   14008DE2           ADD      R0,SP,#+20
   \   00000094   ........           BL       GUI__HandleEOLine
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   EEFFFF0A           BEQ      ??GUI__DispStringInRect_4
     65                  break;
     66              }
     67              /* Do the vertical alignment */
     68              switch (TextAlign & GUI_TA_VERTICAL) {
   \                     ??GUI__DispStringInRect_5:
   \   000000A0   0C0004E2           AND      R0,R4,#0xC
   \   000000A4   040050E2           SUBS     R0,R0,#+4
   \   000000A8   04005012           SUBSNE   R0,R0,#+4
   \   000000AC   0200000A           BEQ      ??GUI__DispStringInRect_6
   \   000000B0   040050E2           SUBS     R0,R0,#+4
   \   000000B4   0500000A           BEQ      ??GUI__DispStringInRect_7
   \   000000B8   0C0000EA           B        ??GUI__DispStringInRect_2
     69          	  case GUI_TA_BASELINE:
     70          	  case GUI_TA_BOTTOM:
     71          	  y = r.y1 -NumLines * FontYSize+1;
   \                     ??GUI__DispStringInRect_6:
   \   000000BC   F600DDE1           LDRSH    R0,[SP, #+6]
   \   000000C0   970A01E0           MUL      R1,R7,R10
   \   000000C4   010040E0           SUB      R0,R0,R1
   \   000000C8   018080E2           ADD      R8,R0,#+1
     72                break;
   \   000000CC   070000EA           B        ??GUI__DispStringInRect_2
     73          	  case GUI_TA_VCENTER:
     74          		  y = r.y0+(r.y1-r.y0+1 -NumLines * FontYSize) /2;
   \                     ??GUI__DispStringInRect_7:
   \   000000D0   F200DDE1           LDRSH    R0,[SP, #+2]
   \   000000D4   F610DDE1           LDRSH    R1,[SP, #+6]
   \   000000D8   970A02E0           MUL      R2,R7,R10
   \   000000DC   001041E0           SUB      R1,R1,R0
   \   000000E0   011081E2           ADD      R1,R1,#+1
   \   000000E4   021041E0           SUB      R1,R1,R2
   \   000000E8   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   000000EC   C18080E0           ADD      R8,R0,R1, ASR #+1
     75                break;
     76          	  }
     77            }
     78            /* Output string */
     79            for (NumCharsRem = MaxNumChars, s = sOrg; NumCharsRem;) {
   \                     ??GUI__DispStringInRect_2:
   \   000000F0   14508DE5           STR      R5,[SP, #+20]
   \   000000F4   18909DE5           LDR      R9,[SP, #+24]
   \   000000F8   034004E2           AND      R4,R4,#0x3
   \   000000FC   ........           LDR      R5,??DataTable0
   \                     ??GUI__DispStringInRect_8:
   \   00000100   000059E3           CMP      R9,#+0
   \   00000104   3300000A           BEQ      ??GUI__DispStringInRect_9
     80              int xLineSize;
     81              LineLen = GUI__GetLineNumChars(s, NumCharsRem);
   \   00000108   0910A0E1           MOV      R1,R9
   \   0000010C   14009DE5           LDR      R0,[SP, #+20]
   \   00000110   ........           BL       GUI__GetLineNumChars
   \   00000114   00B0A0E1           MOV      R11,R0
     82              NumCharsRem -= LineLen;
   \   00000118   0B9049E0           SUB      R9,R9,R11
     83              xLineSize = GUI__GetLineDistX(s, LineLen);
   \   0000011C   0B10A0E1           MOV      R1,R11
   \   00000120   14009DE5           LDR      R0,[SP, #+20]
   \   00000124   ........           BL       GUI__GetLineDistX
     84              switch (TextAlign & GUI_TA_HORIZONTAL) {
   \   00000128   000054E3           CMP      R4,#+0
   \   0000012C   0C00000A           BEQ      ??GUI__DispStringInRect_10
   \   00000130   020054E3           CMP      R4,#+2
   \   00000134   0300000A           BEQ      ??GUI__DispStringInRect_11
   \   00000138   F410DD31           LDRSHCC  R1,[SP, #+4]
   \   0000013C   00104130           SUBCC    R1,R1,R0
   \   00000140   01608132           ADDCC    R6,R1,#+1
   \   00000144   070000EA           B        ??GUI__DispStringInRect_12
     85              case GUI_TA_HCENTER:
     86                xLine = r.x0+(r.x1-r.x0-xLineSize)/2; break;
   \                     ??GUI__DispStringInRect_11:
   \   00000148   F010DDE1           LDRSH    R1,[SP, #+0]
   \   0000014C   F420DDE1           LDRSH    R2,[SP, #+4]
   \   00000150   012042E0           SUB      R2,R2,R1
   \   00000154   002042E0           SUB      R2,R2,R0
   \   00000158   A22F82E0           ADD      R2,R2,R2, LSR #+31
   \   0000015C   C26081E0           ADD      R6,R1,R2, ASR #+1
   \   00000160   000000EA           B        ??GUI__DispStringInRect_12
     87              case GUI_TA_LEFT:
     88                xLine = r.x0; break;
   \                     ??GUI__DispStringInRect_10:
   \   00000164   F060DDE1           LDRSH    R6,[SP, #+0]
     89              case GUI_TA_RIGHT:
     90                xLine = r.x1 -xLineSize + 1;
     91              }
     92              rLine.x0 = GUI_Context.DispPosX = xLine;
   \                     ??GUI__DispStringInRect_12:
   \   00000168   B262C5E1           STRH     R6,[R5, #+34]
   \   0000016C   F212D5E1           LDRSH    R1,[R5, #+34]
     93              rLine.x1 = rLine.x0 + xLineSize-1;
     94              rLine.y0 = GUI_Context.DispPosY = y;
   \   00000170   B482C5E1           STRH     R8,[R5, #+36]
     95              rLine.y1 = y + FontYSize-1;
     96              GUI__DispLine(s, LineLen, &rLine);
   \   00000174   08208DE2           ADD      R2,SP,#+8
   \   00000178   000081E0           ADD      R0,R1,R0
   \   0000017C   B810CDE1           STRH     R1,[SP, #+8]
   \   00000180   010040E2           SUB      R0,R0,#+1
   \   00000184   BC00CDE1           STRH     R0,[SP, #+12]
   \   00000188   F412D5E1           LDRSH    R1,[R5, #+36]
   \   0000018C   070088E0           ADD      R0,R8,R7
   \   00000190   010040E2           SUB      R0,R0,#+1
   \   00000194   BA10CDE1           STRH     R1,[SP, #+10]
   \   00000198   BE00CDE1           STRH     R0,[SP, #+14]
   \   0000019C   0B10A0E1           MOV      R1,R11
   \   000001A0   14009DE5           LDR      R0,[SP, #+20]
   \   000001A4   ........           BL       GUI__DispLine
     97              s += GUI_UC__NumChars2NumBytes(s, LineLen);
   \   000001A8   0B10A0E1           MOV      R1,R11
   \   000001AC   14009DE5           LDR      R0,[SP, #+20]
   \   000001B0   ........           BL       GUI_UC__NumChars2NumBytes
   \   000001B4   14109DE5           LDR      R1,[SP, #+20]
   \   000001B8   010080E0           ADD      R0,R0,R1
   \   000001BC   14008DE5           STR      R0,[SP, #+20]
     98              y += GUI_GetFontDistY();
   \   000001C0   ........           BL       GUI_GetFontDistY
   \   000001C4   088080E0           ADD      R8,R0,R8
     99              if (GUI__HandleEOLine(&s))
   \   000001C8   14008DE2           ADD      R0,SP,#+20
   \   000001CC   ........           BL       GUI__HandleEOLine
   \   000001D0   000050E3           CMP      R0,#+0
   \   000001D4   C9FFFF0A           BEQ      ??GUI__DispStringInRect_8
    100                break;
    101            }
    102          }
   \                     ??GUI__DispStringInRect_9:
   \   000001D8   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   000001DC   F08FBDE8           POP      {R4-R11,PC}      ;; return
    103          
    104          /*********************************************************************
    105          *
    106          *       GUI_DispStringInRectMax
    107          */
    108          #if (GUI_WINSUPPORT)

   \                                 In section .text, align 4, keep-with-next
    109          void GUI_DispStringInRectMax(const char GUI_UNI_PTR *s, GUI_RECT* pRect, int TextAlign, int MaxLen) {
   \                     GUI_DispStringInRectMax:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   08D04DE2           SUB      SP,SP,#+8
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
    110            if (s) {
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   1500000A           BEQ      ??GUI_DispStringInRectMax_0
    111              const GUI_RECT *pOldClipRect = NULL;
   \   00000020   0080A0E3           MOV      R8,#+0
    112              GUI_RECT r;
    113              GUI_LOCK();
   \   00000024   ........           BL       GUI_Lock
    114              if (pRect) {
   \   00000028   000055E3           CMP      R5,#+0
   \   0000002C   0900000A           BEQ      ??GUI_DispStringInRectMax_1
    115                pOldClipRect = WM_SetUserClipRect(pRect);
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           BL       WM_SetUserClipRect
   \   00000038   0080B0E1           MOVS     R8,R0
    116                if (pOldClipRect) {
   \   0000003C   0500000A           BEQ      ??GUI_DispStringInRectMax_1
    117                  GUI__IntersectRects(&r, pRect, pOldClipRect);
   \   00000040   0820A0E1           MOV      R2,R8
   \   00000044   0510A0E1           MOV      R1,R5
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           BL       GUI__IntersectRects
    118                  WM_SetUserClipRect(&r);
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           BL       WM_SetUserClipRect
    119                }
    120              }
    121              GUI__DispStringInRect(s, pRect, TextAlign, MaxLen);
   \                     ??GUI_DispStringInRectMax_1:
   \   00000058   0730A0E1           MOV      R3,R7
   \   0000005C   0620A0E1           MOV      R2,R6
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       GUI__DispStringInRect
    122              WM_SetUserClipRect(pOldClipRect);
   \   0000006C   0800A0E1           MOV      R0,R8
   \   00000070   ........           BL       WM_SetUserClipRect
    123              GUI_UNLOCK();
   \   00000074   ........           BL       GUI_Unlock
    124            }
    125          }
   \                     ??GUI_DispStringInRectMax_0:
   \   00000078   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000007C   F081BDE8           POP      {R4-R8,PC}       ;; return
    126          
    127          #else
    128          
    129          void GUI_DispStringInRectMax(const char GUI_UNI_PTR *s, GUI_RECT* pRect, int TextAlign, int MaxLen) {
    130            GUI_RECT Rect_Old, r;
    131            if (s && pRect) {
    132              GUI_LOCK();
    133              Rect_Old = GUI_Context.ClipRect;
    134              GUI__IntersectRects(&r, pRect, &Rect_Old);
    135              LCD_SetClipRectEx(&r);
    136              GUI__DispStringInRect(s, pRect, TextAlign, MaxLen);
    137              LCD_SetClipRectEx(&Rect_Old);
    138              GUI_UNLOCK();
    139            }
    140          }
    141          #endif
    142          
    143          /*********************************************************************
    144          *
    145          *       GUI_DispStringInRect
    146          */

   \                                 In section .text, align 4, keep-with-next
    147          void GUI_DispStringInRect(const char GUI_UNI_PTR *s, GUI_RECT* pRect, int TextAlign) {
   \                     GUI_DispStringInRect:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    148            GUI_DispStringInRectMax(s, pRect, TextAlign, 0x7fff);
   \   00000014   000054E3           CMP      R4,#+0
   \   00000018   1600000A           BEQ      ??GUI_DispStringInRect_0
   \   0000001C   0070A0E3           MOV      R7,#+0
   \   00000020   ........           BL       GUI_Lock
   \   00000024   000055E3           CMP      R5,#+0
   \   00000028   0900000A           BEQ      ??GUI_DispStringInRect_1
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   ........           BL       WM_SetUserClipRect
   \   00000034   0070B0E1           MOVS     R7,R0
   \   00000038   0500000A           BEQ      ??GUI_DispStringInRect_1
   \   0000003C   0720A0E1           MOV      R2,R7
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   ........           BL       GUI__IntersectRects
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           BL       WM_SetUserClipRect
   \                     ??GUI_DispStringInRect_1:
   \   00000054   FF30A0E3           MOV      R3,#+255
   \   00000058   7F3C83E3           ORR      R3,R3,#0x7F00
   \   0000005C   0620A0E1           MOV      R2,R6
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       GUI__DispStringInRect
   \   0000006C   0700A0E1           MOV      R0,R7
   \   00000070   ........           BL       WM_SetUserClipRect
   \   00000074   ........           BL       GUI_Unlock
    149          }
   \                     ??GUI_DispStringInRect_0:
   \   00000078   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000007C   F080BDE8           POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     GUI_Context
    150          
    151          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     GUI_DispStringInRect        32
     GUI_DispStringInRectMax     32
     GUI__DispStringInRect       64


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     GUI__DispStringInRect    480
     GUI_DispStringInRectMax  128
     GUI_DispStringInRect     128
     ??DataTable0               4

 
 740 bytes in section .text
 
 740 bytes of CODE memory

Errors: none
Warnings: none
