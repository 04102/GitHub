; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_BMP_DrawScaled.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_BMP_DrawScaledEx
EXTRN	_LCD_pColorIndex:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_bmp_drawscaled.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_BMP_DrawScaledEx
_TEXT	SEGMENT
_ColorIndex$ = -40					; size = 4
_r$ = -28						; size = 4
_Context$ = -16						; size = 12
_pfGetData$ = 8						; size = 4
_p$ = 12						; size = 4
_x0$ = 16						; size = 4
_y0$ = 20						; size = 4
_Num$ = 24						; size = 4
_Denom$ = 28						; size = 4
_GUI_BMP_DrawScaledEx PROC				; COMDAT
; Line 747
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 751
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ColorIndex$[ebp], ecx
; Line 752
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _Context$[ebp+8], eax
; Line 753
	mov	eax, DWORD PTR _pfGetData$[ebp]
	mov	DWORD PTR _Context$[ebp], eax
; Line 754
	mov	eax, DWORD PTR _Denom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Num$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Context$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	__Draw
	add	esp, 20					; 00000014H
	mov	DWORD PTR _r$[ebp], eax
; Line 755
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR _ColorIndex$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 756
	mov	eax, DWORD PTR _r$[ebp]
; Line 757
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GUI_BMP_Dr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@GUI_BMP_Dr:
	DD	1
	DD	$LN4@GUI_BMP_Dr
$LN4@GUI_BMP_Dr:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN3@GUI_BMP_Dr
$LN3@GUI_BMP_Dr:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_GUI_BMP_DrawScaledEx ENDP
_TEXT	ENDS
EXTRN	_WM__GetNextIVR:PROC
EXTRN	_GUI_BMP__ReadPalette:PROC
EXTRN	_WM__InitIVRSearch:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	_GUI_BMP__Init:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Draw
_TEXT	SEGMENT
tv91 = -284						; size = 4
tv89 = -284						; size = 4
_Compression$ = -84					; size = 4
_NumColors$ = -72					; size = 4
_BitCount$ = -60					; size = 2
_Height$ = -48						; size = 4
_Width$ = -36						; size = 4
_Ret$ = -24						; size = 4
_r$ = -12						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_pContext$ = 16						; size = 4
_Num$ = 20						; size = 4
_Denom$ = 24						; size = 4
__Draw	PROC						; COMDAT
; Line 682
	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 686
	mov	DWORD PTR _Ret$[ebp], 0
; Line 692
	lea	eax, DWORD PTR _Compression$[ebp]
	push	eax
	lea	ecx, DWORD PTR _NumColors$[ebp]
	push	ecx
	lea	edx, DWORD PTR _BitCount$[ebp]
	push	edx
	lea	eax, DWORD PTR _Height$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	_GUI_BMP__Init
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN15@Draw
; Line 693
	mov	eax, 1
	jmp	$LN16@Draw
$LN15@Draw:
; Line 698
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _GUI_Context+64
	mov	DWORD PTR _x0$[ebp], eax
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _GUI_Context+68
	mov	DWORD PTR _y0$[ebp], eax
; Line 699
	mov	ax, WORD PTR _x0$[ebp]
	mov	WORD PTR _r$[ebp], ax
	movsx	ecx, WORD PTR _r$[ebp]
	mov	eax, DWORD PTR _Width$[ebp]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	WORD PTR _r$[ebp+4], dx
; Line 700
	mov	ax, WORD PTR _y0$[ebp]
	mov	WORD PTR _r$[ebp+2], ax
	movsx	ecx, WORD PTR _r$[ebp+2]
	mov	eax, DWORD PTR _Height$[ebp]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	WORD PTR _r$[ebp+6], dx
; Line 701
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_WM__InitIVRSearch
	add	esp, 4
	test	eax, eax
	je	$LN14@Draw
$LN13@Draw:
; Line 704
	mov	eax, DWORD PTR _Compression$[ebp]
	mov	DWORD PTR tv89[ebp], eax
	cmp	DWORD PTR tv89[ebp], 0
	je	SHORT $LN8@Draw
	cmp	DWORD PTR tv89[ebp], 0
	jle	$LN12@Draw
	cmp	DWORD PTR tv89[ebp], 2
	jle	$LN1@Draw
	jmp	$LN12@Draw
$LN8@Draw:
; Line 706
	movzx	eax, WORD PTR _BitCount$[ebp]
	mov	DWORD PTR tv91[ebp], eax
	mov	ecx, DWORD PTR tv91[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv91[ebp], ecx
	cmp	DWORD PTR tv91[ebp], 31			; 0000001fH
	ja	$LN6@Draw
	mov	edx, DWORD PTR tv91[ebp]
	movzx	eax, BYTE PTR $LN18@Draw[edx]
	jmp	DWORD PTR $LN27@Draw[eax*4]
$LN5@Draw:
; Line 710
	mov	eax, DWORD PTR _NumColors$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_BMP__ReadPalette
	add	esp, 8
; Line 711
	push	OFFSET __DrawLineScaled_Pal
	movzx	eax, WORD PTR _BitCount$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _Denom$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Num$[ebp]
	push	edx
	mov	eax, DWORD PTR _Height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__DrawBitmapScaled
	add	esp, 40					; 00000028H
	mov	DWORD PTR _Ret$[ebp], eax
; Line 712
	jmp	$LN6@Draw
$LN4@Draw:
; Line 714
	push	OFFSET __DrawLineScaled_16bpp
	movzx	eax, WORD PTR _BitCount$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _Denom$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Num$[ebp]
	push	edx
	mov	eax, DWORD PTR _Height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__DrawBitmapScaled
	add	esp, 40					; 00000028H
	mov	DWORD PTR _Ret$[ebp], eax
; Line 715
	jmp	SHORT $LN6@Draw
$LN3@Draw:
; Line 717
	push	OFFSET __DrawLineScaled_RGB
	movzx	eax, WORD PTR _BitCount$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _Denom$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Num$[ebp]
	push	edx
	mov	eax, DWORD PTR _Height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__DrawBitmapScaled
	add	esp, 40					; 00000028H
	mov	DWORD PTR _Ret$[ebp], eax
; Line 718
	jmp	SHORT $LN6@Draw
$LN2@Draw:
; Line 720
	push	OFFSET __DrawLineScaled_RGB
	movzx	eax, WORD PTR _BitCount$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _Denom$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Num$[ebp]
	push	edx
	mov	eax, DWORD PTR _Height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__DrawBitmapScaled
	add	esp, 40					; 00000028H
	mov	DWORD PTR _Ret$[ebp], eax
$LN6@Draw:
; Line 723
	jmp	SHORT $LN12@Draw
$LN1@Draw:
; Line 726
	mov	eax, DWORD PTR _NumColors$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_BMP__ReadPalette
	add	esp, 8
; Line 727
	mov	eax, DWORD PTR _Denom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Num$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Compression$[ebp]
	push	edx
	mov	eax, DWORD PTR _Height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__DrawBitmapScaled_RLE
	add	esp, 32					; 00000020H
	mov	DWORD PTR _Ret$[ebp], eax
$LN12@Draw:
; Line 731
	call	_WM__GetNextIVR
	test	eax, eax
	jne	$LN13@Draw
$LN14@Draw:
; Line 734
	mov	eax, DWORD PTR _Ret$[ebp]
$LN16@Draw:
; Line 735
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@Draw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN26@Draw:
	DD	6
	DD	$LN25@Draw
$LN25@Draw:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN19@Draw
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN20@Draw
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN21@Draw
	DD	-60					; ffffffc4H
	DD	2
	DD	$LN22@Draw
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN23@Draw
	DD	-84					; ffffffacH
	DD	4
	DD	$LN24@Draw
$LN24@Draw:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN23@Draw:
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN22@Draw:
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN21@Draw:
	DB	72					; 00000048H
	DB	101					; 00000065H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	0
$LN20@Draw:
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN19@Draw:
	DB	114					; 00000072H
	DB	0
	npad	2
$LN27@Draw:
	DD	$LN5@Draw
	DD	$LN4@Draw
	DD	$LN3@Draw
	DD	$LN2@Draw
	DD	$LN6@Draw
$LN18@Draw:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
__Draw	ENDP
_TEXT	ENDS
EXTRN	_LCD_FillRect:PROC
EXTRN	_LCD_DrawPixel:PROC
EXTRN	_LCD_SetColor:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawLineScaled_Pal
_TEXT	SEGMENT
tv95 = -268						; size = 4
tv70 = -268						; size = 4
_Color$8491 = -68					; size = 4
_NumReps$ = -56						; size = 4
_SkipCnt$ = -44						; size = 4
_PixelPos$ = -32					; size = 4
_Current$ = -20						; size = 4
_Compare$ = -8						; size = 4
_pData$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xSize$ = 20						; size = 4
_Num$ = 24						; size = 4
_Denom$ = 28						; size = 4
_NumLines$ = 32						; size = 4
_BytesPerPixel$ = 36					; size = 4
_Bpp$ = 40						; size = 4
__DrawLineScaled_Pal PROC				; COMDAT
; Line 138
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 141
	mov	eax, DWORD PTR _BytesPerPixel$[ebp]
	mov	DWORD PTR _BytesPerPixel$[ebp], eax
; Line 142
	mov	DWORD PTR _PixelPos$[ebp], 0
; Line 146
	mov	eax, DWORD PTR _Denom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _Current$[ebp], eax
; Line 147
	mov	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
$LN10@DrawLineSc:
; Line 150
	mov	DWORD PTR _SkipCnt$[ebp], 0
$LN7@DrawLineSc:
; Line 154
	mov	eax, DWORD PTR _Current$[ebp]
	add	eax, DWORD PTR _Num$[ebp]
	mov	DWORD PTR _Current$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jae	SHORT $LN6@DrawLineSc
; Line 155
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	add	eax, 1
	mov	DWORD PTR _SkipCnt$[ebp], eax
; Line 156
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	ecx, DWORD PTR _xSize$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _xSize$[ebp], ecx
	test	eax, eax
	jne	SHORT $LN13@DrawLineSc
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN14@DrawLineSc
$LN13@DrawLineSc:
	mov	DWORD PTR tv70[ebp], 0
$LN14@DrawLineSc:
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN5@DrawLineSc
; Line 157
	jmp	$LN11@DrawLineSc
$LN5@DrawLineSc:
; Line 159
	jmp	SHORT $LN7@DrawLineSc
$LN6@DrawLineSc:
; Line 163
	mov	eax, DWORD PTR _Bpp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _SkipCnt$[ebp]
	push	ecx
	lea	edx, DWORD PTR _PixelPos$[ebp]
	push	edx
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	call	__GetColor
	add	esp, 16					; 00000010H
	mov	DWORD PTR _Color$8491[ebp], eax
; Line 164
	mov	eax, DWORD PTR _Color$8491[ebp]
	push	eax
	call	_LCD_SetColor
	add	esp, 4
; Line 168
	mov	DWORD PTR _NumReps$[ebp], 1
$LN4@DrawLineSc:
; Line 169
	mov	eax, DWORD PTR _Compare$[ebp]
	add	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jb	SHORT $LN3@DrawLineSc
; Line 170
	mov	eax, DWORD PTR _NumReps$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumReps$[ebp], eax
; Line 171
	jmp	SHORT $LN4@DrawLineSc
$LN3@DrawLineSc:
; Line 175
	cmp	DWORD PTR _NumReps$[ebp], 1
	jne	SHORT $LN2@DrawLineSc
	cmp	DWORD PTR _NumLines$[ebp], 1
	jne	SHORT $LN2@DrawLineSc
; Line 176
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_LCD_DrawPixel
	add	esp, 8
; Line 177
	jmp	SHORT $LN1@DrawLineSc
$LN2@DrawLineSc:
; Line 178
	mov	eax, DWORD PTR _NumLines$[ebp]
	mov	ecx, DWORD PTR _y0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _NumReps$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
$LN1@DrawLineSc:
; Line 180
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _NumReps$[ebp]
	mov	DWORD PTR _x0$[ebp], eax
; Line 181
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR tv95[ebp], eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _xSize$[ebp], ecx
	cmp	DWORD PTR tv95[ebp], 0
	jne	$LN10@DrawLineSc
$LN11@DrawLineSc:
; Line 182
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@DrawLineSc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN17@DrawLineSc:
	DD	1
	DD	$LN16@DrawLineSc
$LN16@DrawLineSc:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN15@DrawLineSc
$LN15@DrawLineSc:
	DB	80					; 00000050H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__DrawLineScaled_Pal ENDP
_TEXT	ENDS
EXTRN	_LCD_Index2Color:PROC
EXTRN	_LCD__aConvTable:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetColor
_TEXT	SEGMENT
tv64 = -268						; size = 4
_pData$ = -68						; size = 4
_Mask$ = -53						; size = 1
_Odd$ = -44						; size = 4
_Shift$ = -32						; size = 4
_Index$ = -20						; size = 4
_Color$ = -8						; size = 4
_ppData$ = 8						; size = 4
_pPixelPos$ = 12					; size = 4
_SkipCnt$ = 16						; size = 4
_Bpp$ = 20						; size = 4
__GetColor PROC						; COMDAT
; Line 88
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 93
	mov	eax, DWORD PTR _ppData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pData$[ebp], ecx
; Line 94
	mov	eax, DWORD PTR _Bpp$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN6@GetColor
	cmp	DWORD PTR tv64[ebp], 4
	je	SHORT $LN4@GetColor
	cmp	DWORD PTR tv64[ebp], 8
	je	$LN2@GetColor
	jmp	$LN1@GetColor
$LN6@GetColor:
; Line 96
	mov	eax, DWORD PTR _pPixelPos$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 7
	mov	DWORD PTR _Shift$[ebp], ecx
; Line 97
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Shift$[ebp]
	sar	eax, cl
	mov	BYTE PTR _Mask$[ebp], al
; Line 98
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [eax]
	movzx	eax, BYTE PTR _Mask$[ebp]
	and	edx, eax
	mov	ecx, 7
	sub	ecx, DWORD PTR _Shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR _Index$[ebp], edx
; Line 99
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	cmp	edx, 7
	jbe	SHORT $LN5@GetColor
; Line 100
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	shr	edx, 3
	add	edx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pData$[ebp], edx
$LN5@GetColor:
; Line 102
	jmp	SHORT $LN7@GetColor
$LN4@GetColor:
; Line 104
	mov	eax, DWORD PTR _pPixelPos$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	mov	DWORD PTR _Odd$[ebp], ecx
; Line 105
	mov	eax, DWORD PTR _Odd$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 106
	mov	eax, 240				; 000000f0H
	mov	ecx, DWORD PTR _Shift$[ebp]
	sar	eax, cl
	mov	BYTE PTR _Mask$[ebp], al
; Line 107
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [eax]
	movzx	eax, BYTE PTR _Mask$[ebp]
	and	edx, eax
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR _Index$[ebp], edx
; Line 108
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	mov	ecx, DWORD PTR _Odd$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	cmp	edx, 1
	jbe	SHORT $LN3@GetColor
; Line 109
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	mov	ecx, DWORD PTR _Odd$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	shr	edx, 1
	add	edx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pData$[ebp], edx
$LN3@GetColor:
; Line 111
	jmp	SHORT $LN7@GetColor
$LN2@GetColor:
; Line 113
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Index$[ebp], ecx
; Line 114
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _pData$[ebp], edx
; Line 115
	jmp	SHORT $LN7@GetColor
$LN1@GetColor:
; Line 117
	xor	eax, eax
	jmp	SHORT $LN9@GetColor
$LN7@GetColor:
; Line 119
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _LCD__aConvTable[eax*4]
	push	ecx
	call	_LCD_Index2Color
	add	esp, 4
	mov	DWORD PTR _Color$[ebp], eax
; Line 120
	mov	eax, DWORD PTR _ppData$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 121
	mov	eax, DWORD PTR _pPixelPos$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _SkipCnt$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	mov	ecx, DWORD PTR _pPixelPos$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 122
	mov	eax, DWORD PTR _Color$[ebp]
$LN9@GetColor:
; Line 123
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetColor ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawLineScaled_RGB
_TEXT	SEGMENT
tv134 = -292						; size = 4
tv70 = -292						; size = 4
_Color$8531 = -92					; size = 4
_b$8530 = -77						; size = 1
_g$8529 = -65						; size = 1
_r$8528 = -53						; size = 1
_NumReps$ = -44						; size = 4
_SkipCnt$ = -32						; size = 4
_Current$ = -20						; size = 4
_Compare$ = -8						; size = 4
_pData$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xSize$ = 20						; size = 4
_Num$ = 24						; size = 4
_Denom$ = 28						; size = 4
_NumLines$ = 32						; size = 4
_BytesPerPixel$ = 36					; size = 4
_Bpp$ = 40						; size = 4
__DrawLineScaled_RGB PROC				; COMDAT
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 199
	mov	eax, DWORD PTR _Bpp$[ebp]
	mov	DWORD PTR _Bpp$[ebp], eax
; Line 203
	mov	eax, DWORD PTR _Denom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _Current$[ebp], eax
; Line 204
	mov	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
$LN10@DrawLineSc@2:
; Line 209
	mov	DWORD PTR _SkipCnt$[ebp], 0
$LN7@DrawLineSc@2:
; Line 213
	mov	eax, DWORD PTR _Current$[ebp]
	add	eax, DWORD PTR _Num$[ebp]
	mov	DWORD PTR _Current$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jae	SHORT $LN6@DrawLineSc@2
; Line 214
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	add	eax, 1
	mov	DWORD PTR _SkipCnt$[ebp], eax
; Line 215
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	ecx, DWORD PTR _xSize$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _xSize$[ebp], ecx
	test	eax, eax
	jne	SHORT $LN13@DrawLineSc@2
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN14@DrawLineSc@2
$LN13@DrawLineSc@2:
	mov	DWORD PTR tv70[ebp], 0
$LN14@DrawLineSc@2:
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN5@DrawLineSc@2
; Line 216
	jmp	$LN11@DrawLineSc@2
$LN5@DrawLineSc@2:
; Line 218
	jmp	SHORT $LN7@DrawLineSc@2
$LN6@DrawLineSc@2:
; Line 222
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$8530[ebp], cl
; Line 223
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR _g$8529[ebp], cl
; Line 224
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cl, BYTE PTR [eax+2]
	mov	BYTE PTR _r$8528[ebp], cl
; Line 225
	movzx	eax, BYTE PTR _b$8530[ebp]
	shl	eax, 16					; 00000010H
	movzx	ecx, BYTE PTR _g$8529[ebp]
	shl	ecx, 8
	or	eax, ecx
	movzx	edx, BYTE PTR _r$8528[ebp]
	or	eax, edx
	mov	DWORD PTR _Color$8531[ebp], eax
; Line 229
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _BytesPerPixel$[ebp]
	add	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 233
	mov	DWORD PTR _NumReps$[ebp], 1
$LN4@DrawLineSc@2:
; Line 234
	mov	eax, DWORD PTR _Compare$[ebp]
	add	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jb	SHORT $LN3@DrawLineSc@2
; Line 235
	mov	eax, DWORD PTR _NumReps$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumReps$[ebp], eax
; Line 236
	jmp	SHORT $LN4@DrawLineSc@2
$LN3@DrawLineSc@2:
; Line 240
	mov	eax, DWORD PTR _Color$8531[ebp]
	push	eax
	call	_LCD_SetColor
	add	esp, 4
; Line 241
	cmp	DWORD PTR _NumReps$[ebp], 1
	jne	SHORT $LN2@DrawLineSc@2
	cmp	DWORD PTR _NumLines$[ebp], 1
	jne	SHORT $LN2@DrawLineSc@2
; Line 242
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_LCD_DrawPixel
	add	esp, 8
; Line 243
	jmp	SHORT $LN1@DrawLineSc@2
$LN2@DrawLineSc@2:
; Line 244
	mov	eax, DWORD PTR _NumLines$[ebp]
	mov	ecx, DWORD PTR _y0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _NumReps$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
$LN1@DrawLineSc@2:
; Line 246
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _NumReps$[ebp]
	mov	DWORD PTR _x0$[ebp], eax
; Line 247
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR tv134[ebp], eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _xSize$[ebp], ecx
	cmp	DWORD PTR tv134[ebp], 0
	jne	$LN10@DrawLineSc@2
$LN11@DrawLineSc@2:
; Line 248
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawLineScaled_RGB ENDP
_TEXT	ENDS
EXTRN	_LCD_Index2Color_M555:PROC
EXTRN	_GUI__Read16:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawLineScaled_16bpp
_TEXT	SEGMENT
tv129 = -268						; size = 4
tv70 = -268						; size = 4
_Color$8570 = -68					; size = 4
_Index$8569 = -56					; size = 2
_NumReps$ = -44						; size = 4
_SkipCnt$ = -32						; size = 4
_Current$ = -20						; size = 4
_Compare$ = -8						; size = 4
_pData$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xSize$ = 20						; size = 4
_Num$ = 24						; size = 4
_Denom$ = 28						; size = 4
_NumLines$ = 32						; size = 4
_BytesPerPixel$ = 36					; size = 4
_Bpp$ = 40						; size = 4
__DrawLineScaled_16bpp PROC				; COMDAT
; Line 262
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 265
	mov	eax, DWORD PTR _Bpp$[ebp]
	mov	DWORD PTR _Bpp$[ebp], eax
; Line 269
	mov	eax, DWORD PTR _Denom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _Current$[ebp], eax
; Line 270
	mov	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
$LN10@DrawLineSc@3:
; Line 275
	mov	DWORD PTR _SkipCnt$[ebp], 0
$LN7@DrawLineSc@3:
; Line 279
	mov	eax, DWORD PTR _Current$[ebp]
	add	eax, DWORD PTR _Num$[ebp]
	mov	DWORD PTR _Current$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jae	SHORT $LN6@DrawLineSc@3
; Line 280
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	add	eax, 1
	mov	DWORD PTR _SkipCnt$[ebp], eax
; Line 281
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	ecx, DWORD PTR _xSize$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _xSize$[ebp], ecx
	test	eax, eax
	jne	SHORT $LN13@DrawLineSc@3
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN14@DrawLineSc@3
$LN13@DrawLineSc@3:
	mov	DWORD PTR tv70[ebp], 0
$LN14@DrawLineSc@3:
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN5@DrawLineSc@3
; Line 282
	jmp	$LN11@DrawLineSc@3
$LN5@DrawLineSc@3:
; Line 284
	jmp	SHORT $LN7@DrawLineSc@3
$LN6@DrawLineSc@3:
; Line 288
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _Index$8569[ebp], ax
; Line 289
	movzx	eax, WORD PTR _Index$8569[ebp]
	push	eax
	call	_LCD_Index2Color_M555
	add	esp, 4
	mov	DWORD PTR _Color$8570[ebp], eax
; Line 293
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	imul	eax, DWORD PTR _BytesPerPixel$[ebp]
	add	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 297
	mov	DWORD PTR _NumReps$[ebp], 1
$LN4@DrawLineSc@3:
; Line 298
	mov	eax, DWORD PTR _Compare$[ebp]
	add	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jb	SHORT $LN3@DrawLineSc@3
; Line 299
	mov	eax, DWORD PTR _NumReps$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumReps$[ebp], eax
; Line 300
	jmp	SHORT $LN4@DrawLineSc@3
$LN3@DrawLineSc@3:
; Line 304
	mov	eax, DWORD PTR _Color$8570[ebp]
	push	eax
	call	_LCD_SetColor
	add	esp, 4
; Line 305
	cmp	DWORD PTR _NumReps$[ebp], 1
	jne	SHORT $LN2@DrawLineSc@3
	cmp	DWORD PTR _NumLines$[ebp], 1
	jne	SHORT $LN2@DrawLineSc@3
; Line 306
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_LCD_DrawPixel
	add	esp, 8
; Line 307
	jmp	SHORT $LN1@DrawLineSc@3
$LN2@DrawLineSc@3:
; Line 308
	mov	eax, DWORD PTR _NumLines$[ebp]
	mov	ecx, DWORD PTR _y0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _NumReps$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
$LN1@DrawLineSc@3:
; Line 310
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _NumReps$[ebp]
	mov	DWORD PTR _x0$[ebp], eax
; Line 311
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR tv129[ebp], eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _xSize$[ebp], ecx
	cmp	DWORD PTR tv129[ebp], 0
	jne	$LN10@DrawLineSc@3
$LN11@DrawLineSc@3:
; Line 312
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawLineScaled_16bpp ENDP
_TEXT	ENDS
EXTRN	_GUI_BMP__ReadData:PROC
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitmapScaled
_TEXT	SEGMENT
tv148 = -316						; size = 4
tv94 = -316						; size = 4
tv71 = -316						; size = 4
$T8925 = -305						; size = 1
$T8926 = -293						; size = 1
_Current$ = -92						; size = 4
_Compare$ = -80						; size = 4
_pData$ = -68						; size = 4
_NumReps$ = -56						; size = 4
_SkipCnt$ = -44						; size = 4
_Step$ = -32						; size = 4
_BytesPerLine$ = -20					; size = 4
_y$ = -8						; size = 4
_pContext$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_XSize$ = 20						; size = 4
_YSize$ = 24						; size = 4
_Num$ = 28						; size = 4
_Denom$ = 32						; size = 4
_BytesPerPixel$ = 36					; size = 4
_Bpp$ = 40						; size = 4
_pfDrawLineScaled$ = 44					; size = 4
__DrawBitmapScaled PROC					; COMDAT
; Line 326
	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T8926[ebp], 0
	mov	BYTE PTR $T8925[ebp], 0
; Line 330
	mov	eax, DWORD PTR _Denom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _Current$[ebp], eax
; Line 331
	mov	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
; Line 332
	mov	eax, DWORD PTR _Denom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Num$[ebp]
	push	ecx
	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _YSize$[ebp]
	push	eax
	call	__GetStep
	add	esp, 16					; 00000010H
	mov	DWORD PTR _Step$[ebp], eax
; Line 333
	cmp	DWORD PTR _Step$[ebp], 0
	jne	SHORT $LN18@DrawBitmap
; Line 334
	mov	eax, 1
	jmp	$LN19@DrawBitmap
$LN18@DrawBitmap:
; Line 336
	mov	eax, DWORD PTR _Bpp$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv71[ebp], ecx
	cmp	DWORD PTR tv71[ebp], 31			; 0000001fH
	ja	SHORT $LN11@DrawBitmap
	mov	edx, DWORD PTR tv71[ebp]
	movzx	eax, BYTE PTR $LN29@DrawBitmap[edx]
	jmp	DWORD PTR $LN33@DrawBitmap[eax*4]
$LN15@DrawBitmap:
; Line 338
	mov	eax, DWORD PTR _XSize$[ebp]
	add	eax, 31					; 0000001fH
	sar	eax, 5
	shl	eax, 2
	mov	BYTE PTR $T8925[ebp], 1
	mov	DWORD PTR _BytesPerLine$[ebp], eax
; Line 339
	jmp	SHORT $LN11@DrawBitmap
$LN14@DrawBitmap:
; Line 341
	mov	eax, DWORD PTR _XSize$[ebp]
	lea	ecx, DWORD PTR [eax*4+31]
	sar	ecx, 5
	shl	ecx, 2
	mov	BYTE PTR $T8925[ebp], 1
	mov	DWORD PTR _BytesPerLine$[ebp], ecx
; Line 342
	jmp	SHORT $LN11@DrawBitmap
$LN13@DrawBitmap:
; Line 344
	mov	eax, DWORD PTR _XSize$[ebp]
	add	eax, 3
	sar	eax, 2
	shl	eax, 2
	mov	BYTE PTR $T8925[ebp], 1
	mov	DWORD PTR _BytesPerLine$[ebp], eax
; Line 345
	jmp	SHORT $LN11@DrawBitmap
$LN12@DrawBitmap:
; Line 349
	mov	eax, DWORD PTR _BytesPerPixel$[ebp]
	shl	eax, 3
	imul	eax, DWORD PTR _XSize$[ebp]
	add	eax, 31					; 0000001fH
	sar	eax, 5
	shl	eax, 2
	mov	BYTE PTR $T8925[ebp], 1
	mov	DWORD PTR _BytesPerLine$[ebp], eax
$LN11@DrawBitmap:
; Line 356
	mov	DWORD PTR _SkipCnt$[ebp], 0
$LN8@DrawBitmap:
; Line 360
	mov	eax, DWORD PTR _Current$[ebp]
	add	eax, DWORD PTR _Num$[ebp]
	mov	DWORD PTR _Current$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jae	SHORT $LN6@DrawBitmap
; Line 361
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	add	eax, 1
	mov	DWORD PTR _SkipCnt$[ebp], eax
; Line 362
	jmp	SHORT $LN8@DrawBitmap
$LN6@DrawBitmap:
; Line 366
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	mov	ecx, DWORD PTR _SkipCnt$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _SkipCnt$[ebp], ecx
	test	eax, eax
	jl	SHORT $LN21@DrawBitmap
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN22@DrawBitmap
$LN21@DrawBitmap:
	mov	DWORD PTR tv94[ebp], 0
$LN22@DrawBitmap:
	cmp	DWORD PTR tv94[ebp], 0
	je	SHORT $LN5@DrawBitmap
; Line 368
	cmp	BYTE PTR $T8925[ebp], 0
	jne	SHORT $LN25@DrawBitmap
	push	OFFSET $LN26@DrawBitmap
	call	__RTC_UninitUse
	add	esp, 4
$LN25@DrawBitmap:
	push	0
	mov	BYTE PTR $T8926[ebp], 1
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BytesPerLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN4@DrawBitmap
; Line 369
	mov	eax, 1
	jmp	$LN19@DrawBitmap
$LN4@DrawBitmap:
; Line 371
	jmp	SHORT $LN6@DrawBitmap
$LN5@DrawBitmap:
; Line 375
	mov	DWORD PTR _NumReps$[ebp], 1
$LN3@DrawBitmap:
; Line 376
	mov	eax, DWORD PTR _Compare$[ebp]
	add	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jb	SHORT $LN2@DrawBitmap
; Line 377
	mov	eax, DWORD PTR _NumReps$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumReps$[ebp], eax
; Line 378
	jmp	SHORT $LN3@DrawBitmap
$LN2@DrawBitmap:
; Line 382
	cmp	DWORD PTR _Step$[ebp], 0
	jge	SHORT $LN23@DrawBitmap
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _NumReps$[ebp]
	add	eax, 1
	mov	DWORD PTR tv148[ebp], eax
	jmp	SHORT $LN24@DrawBitmap
$LN23@DrawBitmap:
	mov	ecx, DWORD PTR _y0$[ebp]
	add	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR tv148[ebp], ecx
$LN24@DrawBitmap:
	cmp	BYTE PTR $T8926[ebp], 0
	jne	SHORT $LN27@DrawBitmap
	push	OFFSET $LN28@DrawBitmap
	call	__RTC_UninitUse
	add	esp, 4
$LN27@DrawBitmap:
	mov	esi, esp
	mov	edx, DWORD PTR _Bpp$[ebp]
	push	edx
	mov	eax, DWORD PTR _BytesPerPixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NumReps$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Denom$[ebp]
	push	edx
	mov	eax, DWORD PTR _Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _XSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv148[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	call	DWORD PTR _pfDrawLineScaled$[ebp]
	add	esp, 36					; 00000024H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 383
	mov	eax, DWORD PTR _Step$[ebp]
	imul	eax, DWORD PTR _NumReps$[ebp]
	add	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y$[ebp], eax
; Line 384
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _YSize$[ebp]
	jge	SHORT $LN9@DrawBitmap
	cmp	DWORD PTR _y$[ebp], 0
	jge	$LN11@DrawBitmap
$LN9@DrawBitmap:
; Line 385
	xor	eax, eax
$LN19@DrawBitmap:
; Line 386
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@DrawBitmap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN32@DrawBitmap:
	DD	2
	DD	$LN31@DrawBitmap
$LN31@DrawBitmap:
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN28@DrawBitmap
	DD	-8					; fffffff8H
	DD	4
	DD	$LN30@DrawBitmap
$LN30@DrawBitmap:
	DB	121					; 00000079H
	DB	0
$LN28@DrawBitmap:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN26@DrawBitmap:
	DB	66					; 00000042H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	80					; 00000050H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
	npad	3
$LN33@DrawBitmap:
	DD	$LN15@DrawBitmap
	DD	$LN14@DrawBitmap
	DD	$LN13@DrawBitmap
	DD	$LN12@DrawBitmap
	DD	$LN11@DrawBitmap
$LN29@DrawBitmap:
	DB	0
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
__DrawBitmapScaled ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetStep
_TEXT	SEGMENT
_pYSize$ = 8						; size = 4
_pY$ = 12						; size = 4
_Num$ = 16						; size = 4
_Denom$ = 20						; size = 4
__GetStep PROC						; COMDAT
; Line 70
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 71
	mov	eax, DWORD PTR _pYSize$[ebp]
	mov	eax, DWORD PTR [eax]
	imul	eax, DWORD PTR _Num$[ebp]
	cdq
	idiv	DWORD PTR _Denom$[ebp]
	mov	ecx, DWORD PTR _pYSize$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 72
	mov	eax, DWORD PTR _pYSize$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN4@GetStep
; Line 73
	mov	eax, DWORD PTR _pYSize$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _pY$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 74
	or	eax, -1
	jmp	SHORT $LN5@GetStep
	jmp	SHORT $LN5@GetStep
$LN4@GetStep:
; Line 75
	mov	eax, DWORD PTR _pYSize$[ebp]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN2@GetStep
; Line 76
	mov	eax, DWORD PTR _pYSize$[ebp]
	mov	ecx, DWORD PTR [eax]
	neg	ecx
	mov	edx, DWORD PTR _pYSize$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 77
	mov	eax, DWORD PTR _pY$[ebp]
	mov	DWORD PTR [eax], 0
; Line 78
	mov	eax, 1
	jmp	SHORT $LN5@GetStep
; Line 79
	jmp	SHORT $LN5@GetStep
$LN2@GetStep:
; Line 80
	xor	eax, eax
$LN5@GetStep:
; Line 82
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetStep ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitmapScaled_RLE
_TEXT	SEGMENT
tv131 = -308						; size = 4
tv79 = -308						; size = 4
_Current$ = -108					; size = 4
_Compare$ = -96						; size = 4
_NumReps$ = -84						; size = 4
_SkipCnt$ = -72						; size = 4
_Step$ = -60						; size = 4
_y$ = -48						; size = 4
_ContextBmp$ = -36					; size = 28
__$ArrayPad$ = -4					; size = 4
_pContext$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_XSize$ = 20						; size = 4
_YSize$ = 24						; size = 4
_Compression$ = 28					; size = 4
_Num$ = 32						; size = 4
_Denom$ = 36						; size = 4
__DrawBitmapScaled_RLE PROC				; COMDAT
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 631
	mov	DWORD PTR _ContextBmp$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _ContextBmp$[ebp+4], eax
	mov	DWORD PTR _ContextBmp$[ebp+8], eax
	mov	DWORD PTR _ContextBmp$[ebp+12], eax
	mov	DWORD PTR _ContextBmp$[ebp+16], eax
	mov	DWORD PTR _ContextBmp$[ebp+20], eax
	mov	DWORD PTR _ContextBmp$[ebp+24], eax
; Line 634
	mov	eax, DWORD PTR _XSize$[ebp]
	mov	DWORD PTR _ContextBmp$[ebp+12], eax
; Line 635
	mov	eax, DWORD PTR _Compression$[ebp]
	mov	DWORD PTR _ContextBmp$[ebp+20], eax
; Line 636
	mov	eax, DWORD PTR _Denom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _Current$[ebp], eax
; Line 637
	mov	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
; Line 638
	mov	eax, DWORD PTR _Denom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Num$[ebp]
	push	ecx
	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _YSize$[ebp]
	push	eax
	call	__GetStep
	add	esp, 16					; 00000010H
	mov	DWORD PTR _Step$[ebp], eax
; Line 639
	cmp	DWORD PTR _Step$[ebp], 0
	jne	SHORT $LN11@DrawBitmap@2
; Line 640
	mov	eax, 1
	jmp	$LN13@DrawBitmap@2
$LN11@DrawBitmap@2:
; Line 646
	mov	DWORD PTR _SkipCnt$[ebp], 0
$LN8@DrawBitmap@2:
; Line 650
	mov	eax, DWORD PTR _Current$[ebp]
	add	eax, DWORD PTR _Num$[ebp]
	mov	DWORD PTR _Current$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jae	SHORT $LN6@DrawBitmap@2
; Line 651
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	add	eax, 1
	mov	DWORD PTR _SkipCnt$[ebp], eax
; Line 652
	jmp	SHORT $LN8@DrawBitmap@2
$LN6@DrawBitmap@2:
; Line 656
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	mov	ecx, DWORD PTR _SkipCnt$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _SkipCnt$[ebp], ecx
	test	eax, eax
	jle	SHORT $LN15@DrawBitmap@2
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN16@DrawBitmap@2
$LN15@DrawBitmap@2:
	mov	DWORD PTR tv79[ebp], 0
$LN16@DrawBitmap@2:
	cmp	DWORD PTR tv79[ebp], 0
	je	SHORT $LN5@DrawBitmap@2
; Line 658
	lea	eax, DWORD PTR _ContextBmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__SkipLine_RLE
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN4@DrawBitmap@2
; Line 659
	mov	eax, 1
	jmp	$LN13@DrawBitmap@2
$LN4@DrawBitmap@2:
; Line 661
	jmp	SHORT $LN6@DrawBitmap@2
$LN5@DrawBitmap@2:
; Line 665
	mov	DWORD PTR _NumReps$[ebp], 1
$LN3@DrawBitmap@2:
; Line 666
	mov	eax, DWORD PTR _Compare$[ebp]
	add	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jb	SHORT $LN2@DrawBitmap@2
; Line 667
	mov	eax, DWORD PTR _NumReps$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumReps$[ebp], eax
; Line 668
	jmp	SHORT $LN3@DrawBitmap@2
$LN2@DrawBitmap@2:
; Line 672
	cmp	DWORD PTR _Step$[ebp], 0
	jge	SHORT $LN17@DrawBitmap@2
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _NumReps$[ebp]
	add	eax, 1
	mov	DWORD PTR tv131[ebp], eax
	jmp	SHORT $LN18@DrawBitmap@2
$LN17@DrawBitmap@2:
	mov	ecx, DWORD PTR _y0$[ebp]
	add	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR tv131[ebp], ecx
$LN18@DrawBitmap@2:
	lea	edx, DWORD PTR _ContextBmp$[ebp]
	push	edx
	mov	eax, DWORD PTR _NumReps$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Denom$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Num$[ebp]
	push	edx
	mov	eax, DWORD PTR _XSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv131[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__DrawLineScaled_RLE
	add	esp, 32					; 00000020H
; Line 673
	mov	eax, DWORD PTR _Step$[ebp]
	imul	eax, DWORD PTR _NumReps$[ebp]
	add	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y$[ebp], eax
; Line 674
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _YSize$[ebp]
	jge	SHORT $LN9@DrawBitmap@2
	cmp	DWORD PTR _y$[ebp], 0
	jge	$LN11@DrawBitmap@2
$LN9@DrawBitmap@2:
; Line 675
	xor	eax, eax
$LN13@DrawBitmap@2:
; Line 676
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@DrawBitmap@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN22@DrawBitmap@2:
	DD	2
	DD	$LN21@DrawBitmap@2
$LN21@DrawBitmap@2:
	DD	-36					; ffffffdcH
	DD	28					; 0000001cH
	DD	$LN19@DrawBitmap@2
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN20@DrawBitmap@2
$LN20@DrawBitmap@2:
	DB	121					; 00000079H
	DB	0
$LN19@DrawBitmap@2:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
__DrawBitmapScaled_RLE ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SkipLine_RLE
_TEXT	SEGMENT
_i$ = -8						; size = 4
_pContext$ = 8						; size = 4
_pContextBmp$ = 12					; size = 4
__SkipLine_RLE PROC					; COMDAT
; Line 555
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 557
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@SkipLine_R
$LN2@SkipLine_R:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@SkipLine_R:
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN1@SkipLine_R
; Line 558
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetColorIndex_RLE
	add	esp, 12					; 0000000cH
; Line 559
	jmp	SHORT $LN2@SkipLine_R
$LN1@SkipLine_R:
; Line 560
	mov	eax, 1
; Line 561
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SkipLine_RLE ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetColorIndex_RLE
_TEXT	SEGMENT
tv310 = -220						; size = 4
tv304 = -220						; size = 4
tv298 = -220						; size = 4
tv293 = -220						; size = 4
tv257 = -220						; size = 4
tv219 = -220						; size = 4
tv200 = -220						; size = 4
tv188 = -220						; size = 4
tv170 = -220						; size = 4
tv145 = -220						; size = 4
tv80 = -220						; size = 4
_DoLoop$8646 = -20					; size = 4
_pData$ = -8						; size = 4
_pContext$ = 8						; size = 4
_SkipCnt$ = 12						; size = 4
_pContextBmp$ = 16					; size = 4
__GetColorIndex_RLE PROC				; COMDAT
; Line 392
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN53@GetColorIn:
; Line 395
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	$LN50@GetColorIn
; Line 397
	mov	DWORD PTR _DoLoop$8646[ebp], 1
$LN49@GetColorIn:
; Line 399
	push	0
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN46@GetColorIn
; Line 400
	mov	eax, 1
	jmp	$LN54@GetColorIn
$LN46@GetColorIn:
; Line 402
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+24], dl
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 1
	mov	DWORD PTR _pData$[ebp], eax
; Line 403
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+25], dl
; Line 404
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	jne	$LN45@GetColorIn
; Line 405
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	cl, BYTE PTR [eax+25]
	mov	BYTE PTR tv80[ebp], cl
	cmp	BYTE PTR tv80[ebp], 0
	je	SHORT $LN42@GetColorIn
	cmp	BYTE PTR tv80[ebp], 1
	je	SHORT $LN39@GetColorIn
	cmp	BYTE PTR tv80[ebp], 2
	je	SHORT $LN37@GetColorIn
	jmp	$LN34@GetColorIn
$LN42@GetColorIn:
; Line 407
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR _pContextBmp$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN41@GetColorIn
; Line 409
	mov	DWORD PTR _DoLoop$8646[ebp], 0
; Line 410
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [eax+8], 5
; Line 411
	jmp	SHORT $LN40@GetColorIn
$LN41@GetColorIn:
; Line 412
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [eax+16], 0
$LN40@GetColorIn:
; Line 414
	jmp	$LN43@GetColorIn
$LN39@GetColorIn:
; Line 416
	mov	DWORD PTR _DoLoop$8646[ebp], 0
; Line 417
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR _pContextBmp$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN38@GetColorIn
; Line 418
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [eax+8], 5
$LN38@GetColorIn:
; Line 420
	jmp	$LN43@GetColorIn
$LN37@GetColorIn:
; Line 422
	push	0
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN36@GetColorIn
; Line 423
	mov	eax, 1
	jmp	$LN54@GetColorIn
$LN36@GetColorIn:
; Line 425
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	imul	ecx, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [eax]
	add	ecx, edx
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 426
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [eax+8], 6
; Line 427
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR _pContextBmp$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN35@GetColorIn
; Line 428
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [eax+16], 0
$LN35@GetColorIn:
; Line 430
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	add	ecx, DWORD PTR [edx+16]
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 431
	mov	DWORD PTR _DoLoop$8646[ebp], 0
; Line 432
	jmp	SHORT $LN43@GetColorIn
$LN34@GetColorIn:
; Line 434
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv145[ebp], ecx
	cmp	DWORD PTR tv145[ebp], 1
	je	SHORT $LN30@GetColorIn
	cmp	DWORD PTR tv145[ebp], 2
	je	SHORT $LN31@GetColorIn
	jmp	SHORT $LN43@GetColorIn
$LN31@GetColorIn:
; Line 436
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [eax+8], 3
; Line 437
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 438
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	add	ecx, 1
	sar	ecx, 1
	and	ecx, 1
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	BYTE PTR [edx+27], cl
; Line 439
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	BYTE PTR [eax+26], 0
; Line 440
	mov	DWORD PTR _DoLoop$8646[ebp], 0
; Line 441
	jmp	SHORT $LN43@GetColorIn
$LN30@GetColorIn:
; Line 443
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [eax+8], 1
; Line 444
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 445
	mov	DWORD PTR _DoLoop$8646[ebp], 0
$LN43@GetColorIn:
; Line 450
	jmp	SHORT $LN48@GetColorIn
$LN45@GetColorIn:
; Line 451
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv170[ebp], ecx
	cmp	DWORD PTR tv170[ebp], 1
	je	SHORT $LN25@GetColorIn
	cmp	DWORD PTR tv170[ebp], 2
	je	SHORT $LN26@GetColorIn
	jmp	SHORT $LN48@GetColorIn
$LN26@GetColorIn:
; Line 453
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [eax+8], 4
; Line 454
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 455
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	BYTE PTR [eax+26], 0
; Line 456
	mov	DWORD PTR _DoLoop$8646[ebp], 0
; Line 457
	jmp	SHORT $LN48@GetColorIn
$LN25@GetColorIn:
; Line 459
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	eax, DWORD PTR _LCD__aConvTable[ecx*4]
	mov	DWORD PTR [edx], eax
; Line 460
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [eax+8], 2
; Line 461
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 462
	mov	DWORD PTR _DoLoop$8646[ebp], 0
$LN48@GetColorIn:
; Line 466
	cmp	DWORD PTR _DoLoop$8646[ebp], 0
	jne	$LN49@GetColorIn
$LN50@GetColorIn:
; Line 468
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv188[ebp], ecx
	mov	edx, DWORD PTR tv188[ebp]
	sub	edx, 1
	mov	DWORD PTR tv188[ebp], edx
	cmp	DWORD PTR tv188[ebp], 5
	ja	$LN52@GetColorIn
	mov	eax, DWORD PTR tv188[ebp]
	jmp	DWORD PTR $LN59@GetColorIn[eax*4]
$LN22@GetColorIn:
; Line 471
	push	0
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN21@GetColorIn
; Line 472
	mov	eax, 1
	jmp	$LN54@GetColorIn
$LN21@GetColorIn:
; Line 474
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	eax, DWORD PTR _LCD__aConvTable[ecx*4]
	mov	DWORD PTR [edx], eax
; Line 475
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv200[ebp], ecx
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	eax, DWORD PTR tv200[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv200[ebp], 0
	jne	SHORT $LN20@GetColorIn
; Line 476
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 477
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	and	ecx, 1
	je	SHORT $LN20@GetColorIn
; Line 478
	push	0
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN20@GetColorIn
; Line 479
	mov	eax, 1
	jmp	$LN54@GetColorIn
$LN20@GetColorIn:
; Line 483
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 484
	jmp	$LN52@GetColorIn
$LN17@GetColorIn:
; Line 487
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv219[ebp], ecx
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	eax, DWORD PTR tv219[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv219[ebp], 0
	jne	SHORT $LN16@GetColorIn
; Line 488
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN16@GetColorIn:
; Line 490
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 491
	jmp	$LN52@GetColorIn
$LN15@GetColorIn:
; Line 495
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	movzx	ecx, BYTE PTR [eax+26]
	test	ecx, ecx
	jne	SHORT $LN14@GetColorIn
; Line 496
	push	0
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN13@GetColorIn
; Line 497
	mov	eax, 1
	jmp	$LN54@GetColorIn
$LN13@GetColorIn:
; Line 499
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+25], dl
; Line 500
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	sar	ecx, 4
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	eax, DWORD PTR _LCD__aConvTable[ecx*4]
	mov	DWORD PTR [edx], eax
; Line 501
	jmp	SHORT $LN12@GetColorIn
$LN14@GetColorIn:
; Line 502
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	and	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	eax, DWORD PTR _LCD__aConvTable[ecx*4]
	mov	DWORD PTR [edx], eax
$LN12@GetColorIn:
; Line 504
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	movzx	ecx, BYTE PTR [eax+26]
	xor	ecx, 1
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	BYTE PTR [edx+26], cl
; Line 505
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 506
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv257[ebp], ecx
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	eax, DWORD PTR tv257[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv257[ebp], 0
	jne	SHORT $LN11@GetColorIn
; Line 507
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 509
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	movzx	ecx, BYTE PTR [eax+27]
	test	ecx, ecx
	je	SHORT $LN11@GetColorIn
; Line 510
	push	0
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN11@GetColorIn
; Line 511
	mov	eax, 1
	jmp	$LN54@GetColorIn
$LN11@GetColorIn:
; Line 515
	jmp	$LN52@GetColorIn
$LN8@GetColorIn:
; Line 518
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	movzx	ecx, BYTE PTR [eax+26]
	test	ecx, ecx
	jne	SHORT $LN7@GetColorIn
; Line 519
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	sar	ecx, 4
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	eax, DWORD PTR _LCD__aConvTable[ecx*4]
	mov	DWORD PTR [edx], eax
; Line 520
	jmp	SHORT $LN6@GetColorIn
$LN7@GetColorIn:
; Line 521
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	and	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	eax, DWORD PTR _LCD__aConvTable[ecx*4]
	mov	DWORD PTR [edx], eax
$LN6@GetColorIn:
; Line 523
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	movzx	ecx, BYTE PTR [eax+26]
	xor	ecx, 1
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	BYTE PTR [edx+26], cl
; Line 524
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 525
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv293[ebp], ecx
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	eax, DWORD PTR tv293[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv293[ebp], 0
	jne	SHORT $LN5@GetColorIn
; Line 526
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN5@GetColorIn:
; Line 528
	jmp	SHORT $LN52@GetColorIn
$LN4@GetColorIn:
; Line 532
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR _LCD__aConvTable
	mov	DWORD PTR [eax], ecx
; Line 533
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	DWORD PTR tv298[ebp], ecx
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	eax, DWORD PTR tv298[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR _pContextBmp$[ebp]
	mov	edx, DWORD PTR tv298[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN2@GetColorIn
; Line 534
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN2@GetColorIn:
; Line 538
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR _LCD__aConvTable
	mov	DWORD PTR [eax], ecx
; Line 539
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv304[ebp], ecx
	mov	edx, DWORD PTR _pContextBmp$[ebp]
	mov	eax, DWORD PTR tv304[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv304[ebp], 0
	jne	SHORT $LN52@GetColorIn
; Line 540
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN52@GetColorIn:
; Line 544
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	mov	DWORD PTR tv310[ebp], eax
	mov	ecx, DWORD PTR _SkipCnt$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _SkipCnt$[ebp], ecx
	cmp	DWORD PTR tv310[ebp], 0
	jne	$LN53@GetColorIn
; Line 545
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	mov	eax, DWORD PTR [eax]
$LN54@GetColorIn:
; Line 546
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN58@GetColorIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN58@GetColorIn:
	DD	1
	DD	$LN57@GetColorIn
$LN57@GetColorIn:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN56@GetColorIn
$LN56@GetColorIn:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
	npad	2
$LN59@GetColorIn:
	DD	$LN22@GetColorIn
	DD	$LN17@GetColorIn
	DD	$LN15@GetColorIn
	DD	$LN8@GetColorIn
	DD	$LN4@GetColorIn
	DD	$LN2@GetColorIn
__GetColorIndex_RLE ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawLineScaled_RLE
_TEXT	SEGMENT
tv70 = -256						; size = 4
_ColorIndex$8739 = -56					; size = 4
_NumReps$ = -44						; size = 4
_SkipCnt$ = -32						; size = 4
_Current$ = -20						; size = 4
_Compare$ = -8						; size = 4
_pContext$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xSize$ = 20						; size = 4
_Num$ = 24						; size = 4
_Denom$ = 28						; size = 4
_NumLines$ = 32						; size = 4
_pContextBmp$ = 36					; size = 4
__DrawLineScaled_RLE PROC				; COMDAT
; Line 581
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 587
	mov	eax, DWORD PTR _Denom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _Current$[ebp], eax
; Line 588
	mov	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
$LN10@DrawLineSc@4:
; Line 591
	mov	DWORD PTR _SkipCnt$[ebp], 0
$LN7@DrawLineSc@4:
; Line 595
	mov	eax, DWORD PTR _Current$[ebp]
	add	eax, DWORD PTR _Num$[ebp]
	mov	DWORD PTR _Current$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jae	SHORT $LN6@DrawLineSc@4
; Line 596
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	add	eax, 1
	mov	DWORD PTR _SkipCnt$[ebp], eax
; Line 597
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	ecx, DWORD PTR _xSize$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _xSize$[ebp], ecx
	test	eax, eax
	jne	SHORT $LN13@DrawLineSc@4
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN14@DrawLineSc@4
$LN13@DrawLineSc@4:
	mov	DWORD PTR tv70[ebp], 0
$LN14@DrawLineSc@4:
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN5@DrawLineSc@4
; Line 598
	xor	eax, eax
	jmp	$LN11@DrawLineSc@4
$LN5@DrawLineSc@4:
; Line 600
	jmp	SHORT $LN7@DrawLineSc@4
$LN6@DrawLineSc@4:
; Line 604
	mov	eax, DWORD PTR _pContextBmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _SkipCnt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	__GetColorIndex_RLE
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ColorIndex$8739[ebp], eax
; Line 605
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR _ColorIndex$8739[ebp]
	mov	DWORD PTR [eax], ecx
; Line 609
	mov	DWORD PTR _NumReps$[ebp], 1
$LN4@DrawLineSc@4:
; Line 610
	mov	eax, DWORD PTR _Compare$[ebp]
	add	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jb	SHORT $LN3@DrawLineSc@4
; Line 611
	mov	eax, DWORD PTR _NumReps$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumReps$[ebp], eax
; Line 612
	jmp	SHORT $LN4@DrawLineSc@4
$LN3@DrawLineSc@4:
; Line 616
	cmp	DWORD PTR _NumReps$[ebp], 1
	jne	SHORT $LN2@DrawLineSc@4
	cmp	DWORD PTR _NumLines$[ebp], 1
	jne	SHORT $LN2@DrawLineSc@4
; Line 617
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_LCD_DrawPixel
	add	esp, 8
; Line 618
	jmp	SHORT $LN1@DrawLineSc@4
$LN2@DrawLineSc@4:
; Line 619
	mov	eax, DWORD PTR _NumLines$[ebp]
	mov	ecx, DWORD PTR _y0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _NumReps$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
$LN1@DrawLineSc@4:
; Line 621
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _NumReps$[ebp]
	mov	DWORD PTR _x0$[ebp], eax
; Line 622
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN10@DrawLineSc@4
; Line 623
	xor	eax, eax
$LN11@DrawLineSc@4:
; Line 624
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawLineScaled_RLE ENDP
_TEXT	ENDS
PUBLIC	_GUI_BMP_DrawScaled
EXTRN	_GUI_BMP__GetData:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_BMP_DrawScaled
_TEXT	SEGMENT
_Param$ = -8						; size = 4
_pFileData$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_Num$ = 20						; size = 4
_Denom$ = 24						; size = 4
_GUI_BMP_DrawScaled PROC				; COMDAT
; Line 763
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 765
	mov	eax, DWORD PTR _pFileData$[ebp]
	mov	DWORD PTR _Param$[ebp], eax
; Line 766
	mov	eax, DWORD PTR _Denom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Num$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Param$[ebp]
	push	ecx
	push	OFFSET _GUI_BMP__GetData
	call	_GUI_BMP_DrawScaledEx
	add	esp, 24					; 00000018H
; Line 767
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GUI_BMP_Dr@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@GUI_BMP_Dr@2:
	DD	1
	DD	$LN4@GUI_BMP_Dr@2
$LN4@GUI_BMP_Dr@2:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@GUI_BMP_Dr@2
$LN3@GUI_BMP_Dr@2:
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_GUI_BMP_DrawScaled ENDP
_TEXT	ENDS
END
