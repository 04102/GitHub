; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\WM\WM_ResizeWindow.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_WM_ResizeWindow
EXTRN	_WM__SendMsgNoData:PROC
EXTRN	_GUI__IntersectRect:PROC
EXTRN	_WM__UpdateChildPositions:PROC
EXTRN	_WM__InvalidateRectEx:PROC
EXTRN	_GUI_MergeRect:PROC
EXTRN	_WM__InvalidateDrawAndDescs:PROC
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\wm\wm_resizewindow.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _WM_ResizeWindow
_TEXT	SEGMENT
_pWin$ = -56						; size = 4
_rMerge$ = -44						; size = 8
_rNew$ = -28						; size = 8
_rOld$ = -12						; size = 8
_hWin$ = 8						; size = 4
_dx$ = 12						; size = 4
_dy$ = 16						; size = 4
_WM_ResizeWindow PROC					; COMDAT
; Line 40
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 43
	mov	eax, DWORD PTR _dx$[ebp]
	or	eax, DWORD PTR _dy$[ebp]
	je	SHORT $LN9@WM_ResizeW
	cmp	DWORD PTR _hWin$[ebp], 0
	jne	SHORT $LN10@WM_ResizeW
$LN9@WM_ResizeW:
; Line 44
	jmp	$LN11@WM_ResizeW
$LN10@WM_ResizeW:
; Line 47
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 48
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rOld$[ebp], ecx
	mov	DWORD PTR _rOld$[ebp+4], edx
; Line 49
	mov	eax, DWORD PTR _rOld$[ebp]
	mov	DWORD PTR _rNew$[ebp], eax
	mov	ecx, DWORD PTR _rOld$[ebp+4]
	mov	DWORD PTR _rNew$[ebp+4], ecx
; Line 50
	cmp	DWORD PTR _dx$[ebp], 0
	je	SHORT $LN8@WM_ResizeW
; Line 51
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 128				; 00000080H
	je	SHORT $LN7@WM_ResizeW
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 512				; 00000200H
	jne	SHORT $LN7@WM_ResizeW
; Line 52
	movsx	eax, WORD PTR _rNew$[ebp]
	sub	eax, DWORD PTR _dx$[ebp]
	mov	WORD PTR _rNew$[ebp], ax
; Line 53
	jmp	SHORT $LN8@WM_ResizeW
$LN7@WM_ResizeW:
; Line 54
	movsx	eax, WORD PTR _rNew$[ebp+4]
	add	eax, DWORD PTR _dx$[ebp]
	mov	WORD PTR _rNew$[ebp+4], ax
$LN8@WM_ResizeW:
; Line 57
	cmp	DWORD PTR _dy$[ebp], 0
	je	SHORT $LN5@WM_ResizeW
; Line 58
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 256				; 00000100H
	je	SHORT $LN4@WM_ResizeW
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 1024				; 00000400H
	jne	SHORT $LN4@WM_ResizeW
; Line 59
	movsx	eax, WORD PTR _rNew$[ebp+2]
	sub	eax, DWORD PTR _dy$[ebp]
	mov	WORD PTR _rNew$[ebp+2], ax
; Line 60
	jmp	SHORT $LN5@WM_ResizeW
$LN4@WM_ResizeW:
; Line 61
	movsx	eax, WORD PTR _rNew$[ebp+6]
	add	eax, DWORD PTR _dy$[ebp]
	mov	WORD PTR _rNew$[ebp+6], ax
$LN5@WM_ResizeW:
; Line 64
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN2@WM_ResizeW
; Line 65
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM__InvalidateDrawAndDescs
	add	esp, 4
$LN2@WM_ResizeW:
; Line 67
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR _rNew$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rNew$[ebp+4]
	mov	DWORD PTR [eax+4], edx
; Line 68
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 2
	je	SHORT $LN1@WM_ResizeW
; Line 69
	lea	eax, DWORD PTR _rNew$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rOld$[ebp]
	push	ecx
	lea	edx, DWORD PTR _rMerge$[ebp]
	push	edx
	call	_GUI_MergeRect
	add	esp, 12					; 0000000cH
; Line 70
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _pWin$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	lea	ecx, DWORD PTR _rMerge$[ebp]
	push	ecx
	call	_WM__InvalidateRectEx
	add	esp, 12					; 0000000cH
$LN1@WM_ResizeW:
; Line 72
	movsx	eax, WORD PTR _rNew$[ebp+6]
	movsx	ecx, WORD PTR _rOld$[ebp+6]
	sub	eax, ecx
	push	eax
	movsx	edx, WORD PTR _rNew$[ebp+4]
	movsx	eax, WORD PTR _rOld$[ebp+4]
	sub	edx, eax
	push	edx
	movsx	ecx, WORD PTR _rNew$[ebp+2]
	movsx	edx, WORD PTR _rOld$[ebp+2]
	sub	ecx, edx
	push	ecx
	movsx	eax, WORD PTR _rNew$[ebp]
	movsx	ecx, WORD PTR _rOld$[ebp]
	sub	eax, ecx
	push	eax
	mov	edx, DWORD PTR _pWin$[ebp]
	push	edx
	call	_WM__UpdateChildPositions
	add	esp, 20					; 00000014H
; Line 73
	mov	eax, DWORD PTR _pWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	add	ecx, 8
	push	ecx
	call	_GUI__IntersectRect
	add	esp, 8
; Line 74
	push	5
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM__SendMsgNoData
	add	esp, 8
$LN11@WM_ResizeW:
; Line 76
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@WM_ResizeW
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN17@WM_ResizeW:
	DD	3
	DD	$LN16@WM_ResizeW
$LN16@WM_ResizeW:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN13@WM_ResizeW
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN14@WM_ResizeW
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN15@WM_ResizeW
$LN15@WM_ResizeW:
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
$LN14@WM_ResizeW:
	DB	114					; 00000072H
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
$LN13@WM_ResizeW:
	DB	114					; 00000072H
	DB	79					; 0000004fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
_WM_ResizeWindow ENDP
_TEXT	ENDS
END
