; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\DUII\GaugeScreen.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?currentRPMStr@@3PADA				; currentRPMStr
PUBLIC	?elapsedStr@@3PADA				; elapsedStr
PUBLIC	?maxRPM@@3HA					; maxRPM
PUBLIC	?speedStr@@3PADA				; speedStr
PUBLIC	?gearStr@@3PADA					; gearStr
PUBLIC	?maxRPMStr@@3PADA				; maxRPMStr
PUBLIC	?gsHolding@@3HA					; gsHolding
PUBLIC	?lapStr@@3PADA					; lapStr
_BSS	SEGMENT
?currentRPMStr@@3PADA DB 0aH DUP (?)			; currentRPMStr
	ALIGN	4

?elapsedStr@@3PADA DB 014H DUP (?)			; elapsedStr
?maxRPM@@3HA DD	01H DUP (?)				; maxRPM
?speedStr@@3PADA DB 014H DUP (?)			; speedStr
?gearStr@@3PADA DB 05H DUP (?)				; gearStr
	ALIGN	4

?maxRPMStr@@3PADA DB 014H DUP (?)			; maxRPMStr
?gsHolding@@3HA DD 01H DUP (?)				; gsHolding
?lapStr@@3PADA DB 0aH DUP (?)				; lapStr
	ALIGN	4

_pGauge	DD	01H DUP (?)
_pPredictiveLap DD 01H DUP (?)
_pLapTime DD	01H DUP (?)
_pSpeed	DD	01H DUP (?)
_pYellow DD	01H DUP (?)
_pRed	DD	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
_PeakRPMRect DW	019aH
	DW	0d2H
	DW	01ddH
	DW	0eaH
_RPMRect DW	019aH
	DW	093H
	DW	01ddH
	DW	0abH
_ElapsedTimeRect DW 00H
	DW	09bH
	DW	0d1H
	DW	0dcH
_AnalogGaugeEditRect DW 00H
	DW	03cH
	DW	0c8H
	DW	064H
_SpeedRect DW	05aH
	DW	0aH
	DW	0c8H
	DW	02aH
_DataElementRect DW 032H
	DW	03dH
	DW	0c8H
	DW	05dH
_LapRect DW	05aH
	DW	06fH
	DW	0c8H
	DW	08fH
_NameRect DW	05H
	DW	037H
	DW	070H
	DW	04fH
_UnitsRect DW	05H
	DW	04dH
	DW	070H
	DW	065H
_config	DD	FLAT:_pData
	DD	FLAT:_pName
	DD	FLAT:_pUnits
$SG17269 DB	'%d', 00H
$SG17376 DB	00H
$SG17271 DB	'%u', 00H
$SG17377 DB	00H
$SG17275 DB	'  ', 00H
$SG17378 DB	00H
$SG17277 DB	'%u ', 00H
$SG17280 DB	'%u', 00H
$SG17386 DB	00H
$SG17288 DB	'%u', 00H
	ORG $+1
$SG17290 DB	'%02d:%02d', 00H
	ORG $+2
$SG17293 DB	'%d:%02d:%02d', 00H
	ORG $+3
$SG17295 DB	'%d:%02d', 00H
$SG17301 DB	'mph', 00H
$SG17302 DB	'kph', 00H
$SG17306 DB	'Lap', 00H
$SG17316 DB	'session time', 00H
CONST	ENDS
PUBLIC	??_GDigitalStringOutput@@QAEPAXI@Z		; DigitalStringOutput::`scalar deleting destructor'
PUBLIC	??_GPredictiveLapTimer@@QAEPAXI@Z		; PredictiveLapTimer::`scalar deleting destructor'
PUBLIC	??_GGauge@@QAEPAXI@Z				; Gauge::`scalar deleting destructor'
PUBLIC	?GSDrawConfigrect@@YAXXZ			; GSDrawConfigrect
PUBLIC	__real@0000000000000000
PUBLIC	__cbGaugeCallback
EXTRN	_WM_DefaultProc:PROC
EXTRN	_GUI_MEMDEV_Delete:PROC
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_DrawSignalStrength:PROC
EXTRN	_SlideOutVisible:PROC
EXTRN	_GUI_SelectLCD:PROC
EXTRN	_GUI_MEMDEV_CopyToLCD:PROC
EXTRN	_CheckWarningPopups:PROC
EXTRN	_bmthreewayarrow:BYTE
EXTRN	_GUI_FontD48:BYTE
EXTRN	_bmBestLapEver:BYTE
EXTRN	_bmBestLapSession:BYTE
EXTRN	?DrawControl@DigitalStringOutput@@QAEXXZ:PROC	; DigitalStringOutput::DrawControl
EXTRN	?UpdatePredictiveLapControl@@YAXPAVPredictiveLapTimer@@M@Z:PROC ; UpdatePredictiveLapControl
EXTRN	?DrawControl@Gauge@@QAEXXZ:PROC			; Gauge::DrawControl
EXTRN	_DisplayConfigurableItem:PROC
EXTRN	_GUI_DispStringInRect:PROC
EXTRN	_GUI_FontD32:BYTE
EXTRN	_GUI_FillRect:PROC
EXTRN	_GUI_DispStringAt:PROC
EXTRN	_sysData:BYTE
EXTRN	_GUI_SetFont:PROC
EXTRN	_GUI_Font24B_ASCII:BYTE
EXTRN	_GUI_SetColor:PROC
EXTRN	_GUI_SetTextMode:PROC
EXTRN	_GUI_DrawBitmap:PROC
EXTRN	_bmLeftHalfDarkAsphalt:BYTE
EXTRN	_GUI_MEMDEV_Select:PROC
EXTRN	_lockupSemaphore:BYTE
EXTRN	_CS_IsVisible:PROC
EXTRN	_DataValues:BYTE
EXTRN	?SetValue@DigitalStringOutput@@QAEXPAD@Z:PROC	; DigitalStringOutput::SetValue
EXTRN	_formatLapTime:PROC
EXTRN	_selectedRaceMode:DWORD
EXTRN	_vehicleData:BYTE
EXTRN	?SetValue@Gauge@@QAEXM@Z:PROC			; Gauge::SetValue
EXTRN	_sprintf:PROC
EXTRN	_GetValue:PROC
EXTRN	_configureGaugeMode:BYTE
EXTRN	_boxStartTime:DWORD
EXTRN	_GUI_GetTime:PROC
EXTRN	_drawFlag:BYTE
EXTRN	_WM_InvalidateWindow:PROC
EXTRN	_WM_RestartTimer:PROC
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
_mem	DD	01H DUP (?)
_firsttimethrough DB 01H DUP (?)
	ALIGN	4

_predictiveLap DD 01H DUP (?)
_hGaugeScreen DD 01H DUP (?)
_hScreenTimer DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __real@0000000000000000
; File c:\duii\duii\gaugescreen.cpp
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __cbGaugeCallback
_TEXT	SEGMENT
tv343 = -492						; size = 4
tv337 = -492						; size = 4
tv331 = -492						; size = 4
tv321 = -492						; size = 4
tv270 = -492						; size = 4
tv230 = -492						; size = 4
tv64 = -492						; size = 4
$T17421 = -484						; size = 8
$T17422 = -468						; size = 8
$T17423 = -452						; size = 8
$T17424 = -436						; size = 8
$T17425 = -420						; size = 8
$T17426 = -404						; size = 8
$T17427 = -388						; size = 8
$T17428 = -372						; size = 8
$T17431 = -356						; size = 4
$T17432 = -344						; size = 4
$T17435 = -332						; size = 4
$T17436 = -320						; size = 4
$T17437 = -308						; size = 4
$T17438 = -296						; size = 4
$T17441 = -284						; size = 4
$T17442 = -272						; size = 4
$T17445 = -260						; size = 4
$T17446 = -248						; size = 4
_time$17286 = -44					; size = 4
_maxRPM$17285 = -32					; size = 4
_gear$17264 = -20					; size = 4
_rpm$17263 = -8						; size = 4
_pMsg$ = 8						; size = 4
__cbGaugeCallback PROC					; COMDAT
; Line 140
	push	ebp
	mov	ebp, esp
	sub	esp, 492				; 000001ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-492]
	mov	ecx, 123				; 0000007bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 141
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 11			; 0000000bH
	je	$LN8@cbGaugeCal
	cmp	DWORD PTR tv64[ebp], 15			; 0000000fH
	je	$LN27@cbGaugeCal
	cmp	DWORD PTR tv64[ebp], 275		; 00000113H
	je	SHORT $LN40@cbGaugeCal
	jmp	$LN1@cbGaugeCal
$LN40@cbGaugeCal:
; Line 144
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _hScreenTimer
	jne	$LN28@cbGaugeCal
; Line 148
	push	25					; 00000019H
	mov	eax, DWORD PTR _hScreenTimer
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
; Line 149
	mov	eax, DWORD PTR _hGaugeScreen
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 152
	movzx	eax, BYTE PTR _drawFlag
	test	eax, eax
	je	SHORT $LN37@cbGaugeCal
; Line 154
	call	_GUI_GetTime
	sub	eax, DWORD PTR _boxStartTime
	cmp	eax, 5000				; 00001388H
	jle	SHORT $LN37@cbGaugeCal
; Line 156
	mov	BYTE PTR _configureGaugeMode, 0
; Line 157
	mov	BYTE PTR _drawFlag, 0
$LN37@cbGaugeCal:
; Line 162
	push	14					; 0000000eH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17421[ebp], eax
	mov	DWORD PTR $T17421[ebp+4], edx
	fld	DWORD PTR $T17421[ebp]
	call	__ftol2_sse
	push	eax
	push	OFFSET $SG17269
	push	OFFSET ?speedStr@@3PADA			; speedStr
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 164
	push	53					; 00000035H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17422[ebp], eax
	mov	DWORD PTR $T17422[ebp+4], edx
	mov	eax, DWORD PTR $T17422[ebp]
	mov	DWORD PTR _rpm$17263[ebp], eax
	fild	DWORD PTR _rpm$17263[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pGauge
	call	?SetValue@Gauge@@QAEXM@Z		; Gauge::SetValue
; Line 165
	mov	eax, DWORD PTR _rpm$17263[ebp]
	push	eax
	push	OFFSET $SG17271
	push	OFFSET ?currentRPMStr@@3PADA		; currentRPMStr
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 167
	push	74					; 0000004aH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17423[ebp], eax
	mov	DWORD PTR $T17423[ebp+4], edx
	mov	eax, DWORD PTR $T17423[ebp]
	mov	DWORD PTR _gear$17264[ebp], eax
; Line 168
	fld	DWORD PTR _vehicleData+80
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN35@cbGaugeCal
	cmp	DWORD PTR _gear$17264[ebp], 0
	jg	SHORT $LN36@cbGaugeCal
$LN35@cbGaugeCal:
; Line 169
	push	OFFSET $SG17275
	push	OFFSET ?gearStr@@3PADA			; gearStr
	call	_sprintf
	add	esp, 8
	jmp	SHORT $LN34@cbGaugeCal
$LN36@cbGaugeCal:
; Line 170
	mov	eax, DWORD PTR _gear$17264[ebp]
	push	eax
	push	OFFSET $SG17277
	push	OFFSET ?gearStr@@3PADA			; gearStr
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN34@cbGaugeCal:
; Line 172
	cmp	DWORD PTR _selectedRaceMode, 0
	jne	$LN33@cbGaugeCal
; Line 176
	push	36					; 00000024H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17424[ebp], eax
	mov	DWORD PTR $T17424[ebp+4], edx
	mov	eax, DWORD PTR $T17424[ebp]
	push	eax
	push	OFFSET $SG17280
	push	OFFSET ?lapStr@@3PADA			; lapStr
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 182
	push	31					; 0000001fH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17425[ebp], eax
	mov	DWORD PTR $T17425[ebp+4], edx
	fld	DWORD PTR $T17425[ebp]
	fstp	DWORD PTR _predictiveLap
; Line 184
	push	32					; 00000020H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17426[ebp], eax
	mov	DWORD PTR $T17426[ebp+4], edx
	push	0
	mov	eax, DWORD PTR $T17426[ebp]
	push	eax
	call	_formatLapTime
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _pLapTime
	call	?SetValue@DigitalStringOutput@@QAEXPAD@Z ; DigitalStringOutput::SetValue
; Line 185
	push	78					; 0000004eH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17427[ebp], eax
	mov	DWORD PTR $T17427[ebp+4], edx
	mov	eax, DWORD PTR $T17427[ebp]
	mov	DWORD PTR ?gsHolding@@3HA, eax		; gsHolding
; Line 187
	jmp	$LN28@cbGaugeCal
$LN33@cbGaugeCal:
; Line 191
	push	68					; 00000044H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17428[ebp], eax
	mov	DWORD PTR $T17428[ebp+4], edx
	mov	eax, DWORD PTR $T17428[ebp]
	mov	DWORD PTR _maxRPM$17285[ebp], eax
; Line 192
	mov	eax, DWORD PTR _maxRPM$17285[ebp]
	push	eax
	push	OFFSET $SG17288
	push	OFFSET ?maxRPMStr@@3PADA		; maxRPMStr
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 194
	mov	eax, DWORD PTR _DataValues+272
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR _time$17286[ebp], eax
; Line 195
	cmp	DWORD PTR _time$17286[ebp], 3600	; 00000e10H
	jge	SHORT $LN31@cbGaugeCal
; Line 196
	mov	eax, DWORD PTR _time$17286[ebp]
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	push	edx
	mov	eax, DWORD PTR _time$17286[ebp]
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	push	eax
	push	OFFSET $SG17290
	push	OFFSET ?elapsedStr@@3PADA		; elapsedStr
	call	_sprintf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN28@cbGaugeCal
$LN31@cbGaugeCal:
; Line 197
	cmp	DWORD PTR _time$17286[ebp], 36000	; 00008ca0H
	jge	SHORT $LN29@cbGaugeCal
; Line 198
	mov	eax, DWORD PTR _time$17286[ebp]
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	push	edx
	mov	eax, DWORD PTR _time$17286[ebp]
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	push	edx
	mov	eax, DWORD PTR _time$17286[ebp]
	cdq
	mov	ecx, 3600				; 00000e10H
	idiv	ecx
	push	eax
	push	OFFSET $SG17293
	push	OFFSET ?elapsedStr@@3PADA		; elapsedStr
	call	_sprintf
	add	esp, 20					; 00000014H
; Line 199
	jmp	SHORT $LN28@cbGaugeCal
$LN29@cbGaugeCal:
; Line 200
	mov	eax, DWORD PTR _time$17286[ebp]
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	push	edx
	mov	eax, DWORD PTR _time$17286[ebp]
	cdq
	mov	ecx, 3600				; 00000e10H
	idiv	ecx
	push	eax
	push	OFFSET $SG17295
	push	OFFSET ?elapsedStr@@3PADA		; elapsedStr
	call	_sprintf
	add	esp, 16					; 00000010H
$LN28@cbGaugeCal:
; Line 203
	jmp	$LN41@cbGaugeCal
$LN27@cbGaugeCal:
; Line 206
	push	1
	call	_CS_IsVisible
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN25@cbGaugeCal
	movzx	eax, BYTE PTR _firsttimethrough
	test	eax, eax
	je	$LN9@cbGaugeCal
$LN25@cbGaugeCal:
; Line 208
	movzx	eax, BYTE PTR _lockupSemaphore
	test	eax, eax
	je	SHORT $LN24@cbGaugeCal
; Line 209
	jmp	$LN41@cbGaugeCal
	jmp	SHORT $LN23@cbGaugeCal
$LN24@cbGaugeCal:
; Line 210
	mov	BYTE PTR _lockupSemaphore, 1
$LN23@cbGaugeCal:
; Line 212
	mov	BYTE PTR _firsttimethrough, 0
; Line 214
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_Select
	add	esp, 4
; Line 217
	push	0
	push	0
	push	OFFSET _bmLeftHalfDarkAsphalt
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 221
	push	2
	call	_GUI_SetTextMode
	add	esp, 4
; Line 225
	push	65280					; 0000ff00H
	call	_GUI_SetColor
	add	esp, 4
; Line 226
	push	OFFSET _GUI_Font24B_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 227
	cmp	DWORD PTR _sysData+100, 0
	jne	SHORT $LN45@cbGaugeCal
	mov	DWORD PTR tv230[ebp], OFFSET $SG17301
	jmp	SHORT $LN46@cbGaugeCal
$LN45@cbGaugeCal:
	mov	DWORD PTR tv230[ebp], OFFSET $SG17302
$LN46@cbGaugeCal:
	push	20					; 00000014H
	push	5
	mov	eax, DWORD PTR tv230[ebp]
	push	eax
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 228
	push	51					; 00000033H
	push	200					; 000000c8H
	push	49					; 00000031H
	push	0
	call	_GUI_FillRect
	add	esp, 16					; 00000010H
; Line 231
	push	OFFSET _GUI_FontD32
	call	_GUI_SetFont
	add	esp, 4
; Line 232
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 233
	push	1
	push	OFFSET _SpeedRect
	push	OFFSET ?speedStr@@3PADA			; speedStr
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 235
	push	33023					; 000080ffH
	call	_GUI_SetColor
	add	esp, 4
; Line 236
	push	OFFSET _GUI_FontD32
	call	_GUI_SetFont
	add	esp, 4
; Line 238
	push	OFFSET _config
	call	_DisplayConfigurableItem
	add	esp, 4
; Line 239
	push	103					; 00000067H
	push	200					; 000000c8H
	push	101					; 00000065H
	push	0
	call	_GUI_FillRect
	add	esp, 16					; 00000010H
; Line 242
	mov	ecx, DWORD PTR _pGauge
	call	?DrawControl@Gauge@@QAEXXZ		; Gauge::DrawControl
; Line 244
	cmp	DWORD PTR _selectedRaceMode, 0
	jne	$LN22@cbGaugeCal
; Line 247
	push	16776960				; 00ffff00H
	call	_GUI_SetColor
	add	esp, 4
; Line 248
	push	OFFSET _GUI_FontD32
	call	_GUI_SetFont
	add	esp, 4
; Line 249
	push	1
	push	OFFSET _LapRect
	push	OFFSET ?lapStr@@3PADA			; lapStr
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 253
	push	ecx
	fld	DWORD PTR _predictiveLap
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _pPredictiveLap
	push	eax
	call	?UpdatePredictiveLapControl@@YAXPAVPredictiveLapTimer@@M@Z ; UpdatePredictiveLapControl
	add	esp, 8
; Line 256
	mov	ecx, DWORD PTR _pLapTime
	call	?DrawControl@DigitalStringOutput@@QAEXXZ ; DigitalStringOutput::DrawControl
; Line 259
	push	16776960				; 00ffff00H
	call	_GUI_SetColor
	add	esp, 4
; Line 260
	push	152					; 00000098H
	push	200					; 000000c8H
	push	150					; 00000096H
	push	0
	call	_GUI_FillRect
	add	esp, 16					; 00000010H
; Line 261
	push	OFFSET _GUI_Font24B_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 262
	push	123					; 0000007bH
	push	5
	push	OFFSET $SG17306
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 265
	cmp	DWORD PTR ?gsHolding@@3HA, 0		; gsHolding
	je	SHORT $LN19@cbGaugeCal
; Line 266
	mov	eax, DWORD PTR _DataValues+632
	mov	DWORD PTR tv270[ebp], eax
	cmp	DWORD PTR tv270[ebp], 1
	je	SHORT $LN17@cbGaugeCal
	cmp	DWORD PTR tv270[ebp], 2
	je	SHORT $LN16@cbGaugeCal
	jmp	SHORT $LN19@cbGaugeCal
; Line 269
	jmp	SHORT $LN19@cbGaugeCal
$LN17@cbGaugeCal:
; Line 272
	push	110					; 0000006eH
	push	45					; 0000002dH
	push	OFFSET _bmBestLapSession
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 273
	jmp	SHORT $LN19@cbGaugeCal
$LN16@cbGaugeCal:
; Line 276
	push	110					; 0000006eH
	push	45					; 0000002dH
	push	OFFSET _bmBestLapEver
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
$LN19@cbGaugeCal:
; Line 280
	jmp	SHORT $LN15@cbGaugeCal
$LN22@cbGaugeCal:
; Line 283
	movsx	eax, WORD PTR _ElapsedTimeRect+2
	sub	eax, 30					; 0000001eH
	push	eax
	push	40					; 00000028H
	push	OFFSET $SG17316
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 286
	push	OFFSET _GUI_FontD48
	call	_GUI_SetFont
	add	esp, 4
; Line 287
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 288
	push	2
	push	OFFSET _ElapsedTimeRect
	push	OFFSET ?elapsedStr@@3PADA		; elapsedStr
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
$LN15@cbGaugeCal:
; Line 292
	mov	eax, DWORD PTR ?maxRPM@@3HA		; maxRPM
	cmp	eax, DWORD PTR _vehicleData+20
	jl	SHORT $LN14@cbGaugeCal
; Line 293
	push	255					; 000000ffH
	call	_GUI_SetColor
	add	esp, 4
	jmp	SHORT $LN11@cbGaugeCal
$LN14@cbGaugeCal:
; Line 294
	mov	eax, DWORD PTR ?maxRPM@@3HA		; maxRPM
	cmp	eax, DWORD PTR _vehicleData+36
	jl	SHORT $LN12@cbGaugeCal
; Line 295
	push	65535					; 0000ffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 296
	jmp	SHORT $LN11@cbGaugeCal
$LN12@cbGaugeCal:
; Line 297
	push	8421504					; 00808080H
	call	_GUI_SetColor
	add	esp, 4
$LN11@cbGaugeCal:
; Line 298
	push	OFFSET _GUI_Font24B_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 299
	push	1
	push	OFFSET _PeakRPMRect
	push	OFFSET ?maxRPMStr@@3PADA		; maxRPMStr
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 302
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 303
	push	1
	push	OFFSET _RPMRect
	push	OFFSET ?currentRPMStr@@3PADA		; currentRPMStr
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 306
	push	OFFSET _GUI_FontD32
	call	_GUI_SetFont
	add	esp, 4
; Line 307
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 308
	push	156					; 0000009cH
	push	332					; 0000014cH
	push	OFFSET ?gearStr@@3PADA			; gearStr
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 311
	movzx	eax, BYTE PTR _drawFlag
	test	eax, eax
	je	SHORT $LN10@cbGaugeCal
; Line 312
	call	?GSDrawConfigrect@@YAXXZ		; GSDrawConfigrect
$LN10@cbGaugeCal:
; Line 315
	push	229					; 000000e5H
	push	0
	push	OFFSET _bmthreewayarrow
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 326
	call	_CheckWarningPopups
; Line 327
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_CopyToLCD
	add	esp, 4
; Line 328
	call	_GUI_SelectLCD
; Line 330
	call	_SlideOutVisible
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@cbGaugeCal
; Line 331
	call	_DrawSignalStrength
$LN9@cbGaugeCal:
; Line 333
	jmp	$LN41@cbGaugeCal
$LN8@cbGaugeCal:
; Line 336
	cmp	DWORD PTR _pGauge, 0
	je	SHORT $LN7@cbGaugeCal
; Line 338
	mov	eax, DWORD PTR _pGauge
	mov	DWORD PTR $T17432[ebp], eax
	mov	ecx, DWORD PTR $T17432[ebp]
	mov	DWORD PTR $T17431[ebp], ecx
	cmp	DWORD PTR $T17431[ebp], 0
	je	SHORT $LN47@cbGaugeCal
	push	1
	mov	ecx, DWORD PTR $T17431[ebp]
	call	??_GGauge@@QAEPAXI@Z
	mov	DWORD PTR tv321[ebp], eax
	jmp	SHORT $LN48@cbGaugeCal
$LN47@cbGaugeCal:
	mov	DWORD PTR tv321[ebp], 0
$LN48@cbGaugeCal:
; Line 339
	mov	DWORD PTR _pGauge, 0
$LN7@cbGaugeCal:
; Line 348
	cmp	DWORD PTR _pYellow, 0
	je	SHORT $LN6@cbGaugeCal
; Line 350
	mov	eax, DWORD PTR _pYellow
	mov	DWORD PTR $T17435[ebp], eax
	mov	ecx, DWORD PTR $T17435[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 351
	mov	DWORD PTR _pYellow, 0
$LN6@cbGaugeCal:
; Line 353
	cmp	DWORD PTR _pRed, 0
	je	SHORT $LN5@cbGaugeCal
; Line 355
	mov	eax, DWORD PTR _pRed
	mov	DWORD PTR $T17436[ebp], eax
	mov	ecx, DWORD PTR $T17436[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 356
	mov	DWORD PTR _pRed, 0
$LN5@cbGaugeCal:
; Line 358
	cmp	DWORD PTR _pPredictiveLap, 0
	je	SHORT $LN4@cbGaugeCal
; Line 360
	mov	eax, DWORD PTR _pPredictiveLap
	mov	DWORD PTR $T17438[ebp], eax
	mov	ecx, DWORD PTR $T17438[ebp]
	mov	DWORD PTR $T17437[ebp], ecx
	cmp	DWORD PTR $T17437[ebp], 0
	je	SHORT $LN49@cbGaugeCal
	push	1
	mov	ecx, DWORD PTR $T17437[ebp]
	call	??_GPredictiveLapTimer@@QAEPAXI@Z
	mov	DWORD PTR tv331[ebp], eax
	jmp	SHORT $LN50@cbGaugeCal
$LN49@cbGaugeCal:
	mov	DWORD PTR tv331[ebp], 0
$LN50@cbGaugeCal:
; Line 361
	mov	DWORD PTR _pPredictiveLap, 0
$LN4@cbGaugeCal:
; Line 363
	cmp	DWORD PTR _pLapTime, 0
	je	SHORT $LN3@cbGaugeCal
; Line 365
	mov	eax, DWORD PTR _pLapTime
	mov	DWORD PTR $T17442[ebp], eax
	mov	ecx, DWORD PTR $T17442[ebp]
	mov	DWORD PTR $T17441[ebp], ecx
	cmp	DWORD PTR $T17441[ebp], 0
	je	SHORT $LN51@cbGaugeCal
	push	1
	mov	ecx, DWORD PTR $T17441[ebp]
	call	??_GDigitalStringOutput@@QAEPAXI@Z
	mov	DWORD PTR tv337[ebp], eax
	jmp	SHORT $LN52@cbGaugeCal
$LN51@cbGaugeCal:
	mov	DWORD PTR tv337[ebp], 0
$LN52@cbGaugeCal:
; Line 366
	mov	DWORD PTR _pLapTime, 0
$LN3@cbGaugeCal:
; Line 368
	cmp	DWORD PTR _pSpeed, 0
	je	SHORT $LN2@cbGaugeCal
; Line 370
	mov	eax, DWORD PTR _pSpeed
	mov	DWORD PTR $T17446[ebp], eax
	mov	ecx, DWORD PTR $T17446[ebp]
	mov	DWORD PTR $T17445[ebp], ecx
	cmp	DWORD PTR $T17445[ebp], 0
	je	SHORT $LN53@cbGaugeCal
	push	1
	mov	ecx, DWORD PTR $T17445[ebp]
	call	??_GDigitalStringOutput@@QAEPAXI@Z
	mov	DWORD PTR tv343[ebp], eax
	jmp	SHORT $LN54@cbGaugeCal
$LN53@cbGaugeCal:
	mov	DWORD PTR tv343[ebp], 0
$LN54@cbGaugeCal:
; Line 371
	mov	DWORD PTR _pSpeed, 0
$LN2@cbGaugeCal:
; Line 373
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_Delete
	add	esp, 4
; Line 374
	jmp	SHORT $LN41@cbGaugeCal
$LN1@cbGaugeCal:
; Line 377
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN41@cbGaugeCal:
; Line 379
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 492				; 000001ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__cbGaugeCallback ENDP
_TEXT	ENDS
EXTRN	??1Gauge@@QAE@XZ:PROC				; Gauge::~Gauge
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GGauge@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GGauge@@QAEPAXI@Z PROC				; Gauge::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Gauge@@QAE@XZ			; Gauge::~Gauge
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGauge@@QAEPAXI@Z ENDP				; Gauge::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1PredictiveLapTimer@@QAE@XZ:PROC		; PredictiveLapTimer::~PredictiveLapTimer
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GPredictiveLapTimer@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GPredictiveLapTimer@@QAEPAXI@Z PROC			; PredictiveLapTimer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PredictiveLapTimer@@QAE@XZ		; PredictiveLapTimer::~PredictiveLapTimer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPredictiveLapTimer@@QAEPAXI@Z ENDP			; PredictiveLapTimer::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1DigitalStringOutput@@QAE@XZ:PROC		; DigitalStringOutput::~DigitalStringOutput
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GDigitalStringOutput@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GDigitalStringOutput@@QAEPAXI@Z PROC			; DigitalStringOutput::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DigitalStringOutput@@QAE@XZ		; DigitalStringOutput::~DigitalStringOutput
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDigitalStringOutput@@QAEPAXI@Z ENDP			; DigitalStringOutput::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_GUI_DrawRect:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GSDrawConfigrect@@YAXXZ
_TEXT	SEGMENT
?GSDrawConfigrect@@YAXXZ PROC				; GSDrawConfigrect, COMDAT
; Line 385
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 386
	push	255					; 000000ffH
	call	_GUI_SetColor
	add	esp, 4
; Line 387
	movsx	eax, WORD PTR _AnalogGaugeEditRect+6
	add	eax, 1
	push	eax
	movsx	ecx, WORD PTR _AnalogGaugeEditRect+4
	add	ecx, 4
	push	ecx
	movsx	edx, WORD PTR _AnalogGaugeEditRect+2
	sub	edx, 5
	push	edx
	movsx	eax, WORD PTR _AnalogGaugeEditRect
	push	eax
	call	_GUI_DrawRect
	add	esp, 16					; 00000010H
; Line 390
	movsx	eax, WORD PTR _AnalogGaugeEditRect+6
	push	eax
	movsx	ecx, WORD PTR _AnalogGaugeEditRect+4
	add	ecx, 3
	push	ecx
	movsx	edx, WORD PTR _AnalogGaugeEditRect+2
	sub	edx, 4
	push	edx
	movsx	eax, WORD PTR _AnalogGaugeEditRect
	add	eax, 1
	push	eax
	call	_GUI_DrawRect
	add	esp, 16					; 00000010H
; Line 391
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GSDrawConfigrect@@YAXXZ ENDP				; GSDrawConfigrect
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	__real@447a0000
PUBLIC	__real@43fa0000
PUBLIC	_Display_GaugeScreen
EXTRN	_GUI_MEMDEV_Create:PROC
EXTRN	_WM_CreateTimer:PROC
EXTRN	?SetValue@PredictiveLapTimer@@QAEXM@Z:PROC	; PredictiveLapTimer::SetValue
EXTRN	??0PredictiveLapTimer@@QAE@HHHHMMJ@Z:PROC	; PredictiveLapTimer::PredictiveLapTimer
EXTRN	_GetPredictiveScale:PROC
EXTRN	??0DigitalStringOutput@@QAE@HHHHW4DigitalOptions@@JUGUI_FONT@@K@Z:PROC ; DigitalStringOutput::DigitalStringOutput
EXTRN	?ShowDigital@Gauge@@QAEX_N@Z:PROC		; Gauge::ShowDigital
EXTRN	??0Gauge@@QAE@HHHMMPAD00PAVAlarm@@MMHHDJPBUGUI_BITMAP@@@Z:PROC ; Gauge::Gauge
EXTRN	_bmDefaultGauge:BYTE
EXTRN	_SystemError:PROC
EXTRN	_WM_CreateWindowAsChild:PROC
EXTRN	_CalculateScaleTop:PROC
EXTRN	??0Alarm@@QAE@_NMMKKW4AlarmType@@PAV0@2@Z:PROC	; Alarm::Alarm
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _Display_GaugeScreen
_TEXT	SEGMENT
tv168 = -344						; size = 4
tv132 = -344						; size = 4
tv262 = -340						; size = 4
tv248 = -340						; size = 4
tv225 = -340						; size = 4
tv207 = -340						; size = 4
tv187 = -340						; size = 4
tv81 = -340						; size = 4
$T17472 = -332						; size = 4
$T17473 = -320						; size = 4
$T17476 = -308						; size = 4
$T17477 = -296						; size = 4
$T17480 = -284						; size = 4
$T17481 = -272						; size = 4
$T17484 = -260						; size = 4
$T17485 = -248						; size = 4
$T17488 = -236						; size = 4
$T17489 = -224						; size = 4
$T17492 = -212						; size = 4
$T17493 = -200						; size = 4
_hParent$ = 8						; size = 4
_Display_GaugeScreen PROC				; COMDAT
; Line 398
	push	ebp
	mov	ebp, esp
	sub	esp, 344				; 00000158H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-344]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 405
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17473[ebp], eax
	cmp	DWORD PTR $T17473[ebp], 0
	je	SHORT $LN12@Display_Ga
	push	0
	push	0
	push	1
	push	32896					; 00008080H
	push	65535					; 0000ffffH
	fild	DWORD PTR _vehicleData+36
	push	ecx
	fstp	DWORD PTR [esp]
	fild	DWORD PTR _vehicleData+32
	push	ecx
	fstp	DWORD PTR [esp]
	push	1
	mov	ecx, DWORD PTR $T17473[ebp]
	call	??0Alarm@@QAE@_NMMKKW4AlarmType@@PAV0@2@Z ; Alarm::Alarm
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN13@Display_Ga
$LN12@Display_Ga:
	mov	DWORD PTR tv81[ebp], 0
$LN13@Display_Ga:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR $T17472[ebp], eax
	mov	ecx, DWORD PTR $T17472[ebp]
	mov	DWORD PTR _pYellow, ecx
; Line 407
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17477[ebp], eax
	cmp	DWORD PTR $T17477[ebp], 0
	je	SHORT $LN14@Display_Ga
	push	0
	mov	eax, DWORD PTR _pYellow
	push	eax
	push	3
	push	128					; 00000080H
	push	255					; 000000ffH
	mov	ecx, DWORD PTR _vehicleData+20
	push	ecx
	call	_CalculateScaleTop
	add	esp, 4
	mov	DWORD PTR tv248[ebp], eax
	fild	DWORD PTR tv248[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fild	DWORD PTR _vehicleData+36
	push	ecx
	fstp	DWORD PTR [esp]
	push	1
	mov	ecx, DWORD PTR $T17477[ebp]
	call	??0Alarm@@QAE@_NMMKKW4AlarmType@@PAV0@2@Z ; Alarm::Alarm
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN15@Display_Ga
$LN14@Display_Ga:
	mov	DWORD PTR tv132[ebp], 0
$LN15@Display_Ga:
	mov	edx, DWORD PTR tv132[ebp]
	mov	DWORD PTR $T17476[ebp], edx
	mov	eax, DWORD PTR $T17476[ebp]
	mov	DWORD PTR _pRed, eax
; Line 409
	mov	BYTE PTR _firsttimethrough, 1
; Line 410
	mov	BYTE PTR _drawFlag, 0
; Line 412
	push	0
	push	OFFSET __cbGaugeCallback
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	call	_WM_CreateWindowAsChild
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hGaugeScreen, eax
	cmp	DWORD PTR _hGaugeScreen, 0
	jg	SHORT $LN9@Display_Ga
; Line 413
	call	_SystemError
$LN9@Display_Ga:
; Line 415
	push	252					; 000000fcH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17481[ebp], eax
	cmp	DWORD PTR $T17481[ebp], 0
	je	$LN16@Display_Ga
	push	OFFSET _bmDefaultGauge
	mov	eax, DWORD PTR _hGaugeScreen
	push	eax
	push	0
	push	1000					; 000003e8H
	push	0
	push	ecx
	fld	DWORD PTR __real@43fa0000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@447a0000
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pRed
	push	ecx
	push	OFFSET $SG17376
	push	OFFSET $SG17377
	push	OFFSET $SG17378
	mov	edx, DWORD PTR _vehicleData+20
	push	edx
	call	_CalculateScaleTop
	add	esp, 4
	mov	DWORD PTR tv262[ebp], eax
	fild	DWORD PTR tv262[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	136					; 00000088H
	push	0
	push	208					; 000000d0H
	mov	ecx, DWORD PTR $T17481[ebp]
	call	??0Gauge@@QAE@HHHMMPAD00PAVAlarm@@MMHHDJPBUGUI_BITMAP@@@Z ; Gauge::Gauge
	mov	DWORD PTR tv168[ebp], eax
	jmp	SHORT $LN17@Display_Ga
$LN16@Display_Ga:
	mov	DWORD PTR tv168[ebp], 0
$LN17@Display_Ga:
	mov	eax, DWORD PTR tv168[ebp]
	mov	DWORD PTR $T17480[ebp], eax
	mov	ecx, DWORD PTR $T17480[ebp]
	mov	DWORD PTR _pGauge, ecx
	cmp	DWORD PTR _pGauge, 0
	ja	SHORT $LN8@Display_Ga
; Line 416
	call	_SystemError
$LN8@Display_Ga:
; Line 417
	push	0
	mov	ecx, DWORD PTR _pGauge
	call	?ShowDigital@Gauge@@QAEX_N@Z		; Gauge::ShowDigital
; Line 419
	cmp	DWORD PTR _selectedRaceMode, 0
	jne	$LN7@Display_Ga
; Line 421
	push	284					; 0000011cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17485[ebp], eax
	cmp	DWORD PTR $T17485[ebp], 0
	je	SHORT $LN18@Display_Ga
	push	16777215				; 00ffffffH
	sub	esp, 36					; 00000024H
	mov	ecx, 9
	mov	esi, OFFSET _GUI_FontD48
	mov	edi, esp
	rep movsd
	mov	eax, DWORD PTR _hGaugeScreen
	push	eax
	push	0
	push	48					; 00000030H
	push	210					; 000000d2H
	push	163					; 000000a3H
	push	0
	mov	ecx, DWORD PTR $T17485[ebp]
	call	??0DigitalStringOutput@@QAE@HHHHW4DigitalOptions@@JUGUI_FONT@@K@Z ; DigitalStringOutput::DigitalStringOutput
	mov	DWORD PTR tv187[ebp], eax
	jmp	SHORT $LN19@Display_Ga
$LN18@Display_Ga:
	mov	DWORD PTR tv187[ebp], 0
$LN19@Display_Ga:
	mov	ecx, DWORD PTR tv187[ebp]
	mov	DWORD PTR $T17484[ebp], ecx
	mov	edx, DWORD PTR $T17484[ebp]
	mov	DWORD PTR _pLapTime, edx
	cmp	DWORD PTR _pLapTime, 0
	ja	SHORT $LN6@Display_Ga
; Line 422
	call	_SystemError
	jmp	SHORT $LN5@Display_Ga
$LN6@Display_Ga:
; Line 423
	push	OFFSET $SG17386
	mov	ecx, DWORD PTR _pLapTime
	call	?SetValue@DigitalStringOutput@@QAEXPAD@Z ; DigitalStringOutput::SetValue
$LN5@Display_Ga:
; Line 425
	push	52					; 00000034H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17489[ebp], eax
	cmp	DWORD PTR $T17489[ebp], 0
	je	SHORT $LN20@Display_Ga
	mov	eax, DWORD PTR _hGaugeScreen
	push	eax
	call	_GetPredictiveScale
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	call	_GetPredictiveScale
	push	ecx
	fstp	DWORD PTR [esp]
	push	50					; 00000032H
	push	207					; 000000cfH
	push	220					; 000000dcH
	push	30					; 0000001eH
	mov	ecx, DWORD PTR $T17489[ebp]
	call	??0PredictiveLapTimer@@QAE@HHHHMMJ@Z	; PredictiveLapTimer::PredictiveLapTimer
	mov	DWORD PTR tv207[ebp], eax
	jmp	SHORT $LN21@Display_Ga
$LN20@Display_Ga:
	mov	DWORD PTR tv207[ebp], 0
$LN21@Display_Ga:
	mov	ecx, DWORD PTR tv207[ebp]
	mov	DWORD PTR $T17488[ebp], ecx
	mov	edx, DWORD PTR $T17488[ebp]
	mov	DWORD PTR _pPredictiveLap, edx
	cmp	DWORD PTR _pPredictiveLap, 0
	ja	SHORT $LN4@Display_Ga
; Line 426
	call	_SystemError
	jmp	SHORT $LN3@Display_Ga
$LN4@Display_Ga:
; Line 427
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pPredictiveLap
	call	?SetValue@PredictiveLapTimer@@QAEXM@Z	; PredictiveLapTimer::SetValue
$LN3@Display_Ga:
	jmp	$LN1@Display_Ga
$LN7@Display_Ga:
; Line 429
	push	284					; 0000011cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17493[ebp], eax
	cmp	DWORD PTR $T17493[ebp], 0
	je	SHORT $LN22@Display_Ga
	push	16777215				; 00ffffffH
	sub	esp, 36					; 00000024H
	mov	ecx, 9
	mov	esi, OFFSET _GUI_FontD48
	mov	edi, esp
	rep movsd
	mov	eax, DWORD PTR _hGaugeScreen
	push	eax
	push	0
	push	48					; 00000030H
	push	140					; 0000008cH
	push	10					; 0000000aH
	push	45					; 0000002dH
	mov	ecx, DWORD PTR $T17493[ebp]
	call	??0DigitalStringOutput@@QAE@HHHHW4DigitalOptions@@JUGUI_FONT@@K@Z ; DigitalStringOutput::DigitalStringOutput
	mov	DWORD PTR tv225[ebp], eax
	jmp	SHORT $LN23@Display_Ga
$LN22@Display_Ga:
	mov	DWORD PTR tv225[ebp], 0
$LN23@Display_Ga:
	mov	ecx, DWORD PTR tv225[ebp]
	mov	DWORD PTR $T17492[ebp], ecx
	mov	edx, DWORD PTR $T17492[ebp]
	mov	DWORD PTR _pSpeed, edx
	cmp	DWORD PTR _pSpeed, 0
	ja	SHORT $LN1@Display_Ga
; Line 430
	call	_SystemError
$LN1@Display_Ga:
; Line 432
	mov	eax, DWORD PTR _hGaugeScreen
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 434
	push	0
	push	25					; 00000019H
	push	0
	mov	eax, DWORD PTR _hGaugeScreen
	push	eax
	call	_WM_CreateTimer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hScreenTimer, eax
; Line 437
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	call	_GUI_MEMDEV_Create
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mem, eax
; Line 439
	mov	eax, DWORD PTR _hGaugeScreen
; Line 440
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 344				; 00000158H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Display_GaugeScreen ENDP
_TEXT	ENDS
PUBLIC	_IfAnalogConfigGaugePressed
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _IfAnalogConfigGaugePressed
_TEXT	SEGMENT
_lastx$ = 8						; size = 4
_lasty$ = 12						; size = 4
_IfAnalogConfigGaugePressed PROC			; COMDAT
; Line 446
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 447
	movsx	eax, WORD PTR _AnalogGaugeEditRect
	cmp	DWORD PTR _lastx$[ebp], eax
	jl	SHORT $LN2@IfAnalogCo
	movsx	eax, WORD PTR _AnalogGaugeEditRect+4
	cmp	DWORD PTR _lastx$[ebp], eax
	jg	SHORT $LN2@IfAnalogCo
	movsx	eax, WORD PTR _AnalogGaugeEditRect+2
	cmp	DWORD PTR _lasty$[ebp], eax
	jl	SHORT $LN2@IfAnalogCo
	movsx	eax, WORD PTR _AnalogGaugeEditRect+6
	cmp	DWORD PTR _lasty$[ebp], eax
	jg	SHORT $LN2@IfAnalogCo
; Line 448
	mov	al, 1
	jmp	SHORT $LN3@IfAnalogCo
	jmp	SHORT $LN3@IfAnalogCo
$LN2@IfAnalogCo:
; Line 449
	xor	al, al
$LN3@IfAnalogCo:
; Line 450
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_IfAnalogConfigGaugePressed ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??__EpData@@YAXXZ
text$yc	SEGMENT
??__EpData@@YAXXZ PROC					; `dynamic initializer for 'pData'', COMDAT
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _DataElementRect
	mov	DWORD PTR _pData, eax
	mov	ecx, DWORD PTR _DataElementRect+4
	mov	DWORD PTR _pData+4, ecx
	mov	DWORD PTR _pData+8, 1
	mov	DWORD PTR _pData+12, 33023		; 000080ffH
	mov	DWORD PTR _pData+16, OFFSET _GUI_FontD32
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__EpData@@YAXXZ ENDP					; `dynamic initializer for 'pData''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EpName@@YAXXZ
text$yc	SEGMENT
??__EpName@@YAXXZ PROC					; `dynamic initializer for 'pName'', COMDAT
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _NameRect
	mov	DWORD PTR _pName, eax
	mov	ecx, DWORD PTR _NameRect+4
	mov	DWORD PTR _pName+4, ecx
	mov	DWORD PTR _pName+8, 0
	mov	DWORD PTR _pName+12, 33023		; 000080ffH
	mov	DWORD PTR _pName+16, OFFSET _GUI_Font24B_ASCII
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__EpName@@YAXXZ ENDP					; `dynamic initializer for 'pName''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EpUnits@@YAXXZ
text$yc	SEGMENT
??__EpUnits@@YAXXZ PROC					; `dynamic initializer for 'pUnits'', COMDAT
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _UnitsRect
	mov	DWORD PTR _pUnits, eax
	mov	ecx, DWORD PTR _UnitsRect+4
	mov	DWORD PTR _pUnits+4, ecx
	mov	DWORD PTR _pUnits+8, 0
	mov	DWORD PTR _pUnits+12, 33023		; 000080ffH
	mov	DWORD PTR _pUnits+16, OFFSET _GUI_Font24B_ASCII
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__EpUnits@@YAXXZ ENDP					; `dynamic initializer for 'pUnits''
text$yc	ENDS
_BSS	SEGMENT
_pData	DB	014H DUP (?)
_pUnits	DB	014H DUP (?)
_pName	DB	014H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_pData$initializer$ DD FLAT:??__EpData@@YAXXZ
_pName$initializer$ DD FLAT:??__EpName@@YAXXZ
_pUnits$initializer$ DD FLAT:??__EpUnits@@YAXXZ
CRT$XCU	ENDS
END
