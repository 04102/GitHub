; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Antialias\GUIAA_Lib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_AA_Init
EXTRN	_GUI_Context:BYTE
EXTRN	_GUI_ALLOC_GetFixedBlock:PROC
EXTRN	_LCD_GetVXSizeMax:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
__ClipRect_HL DQ 01H DUP (?)
__x1	DD	01H DUP (?)
__x0	DD	01H DUP (?)
__pBuffer DD	01H DUP (?)
__pLCD_HLPrev DD 01H DUP (?)
__DrawAPICopy DQ 01H DUP (?)
__BufferSize DD	01H DUP (?)
__pAABuffer DD	01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\antialias\guiaa_lib.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_AA_Init
_TEXT	SEGMENT
_r$ = -8						; size = 4
_x0$ = 8						; size = 4
_x1$ = 12						; size = 4
_GUI_AA_Init PROC					; COMDAT
; Line 180
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 181
	mov	DWORD PTR _r$[ebp], 0
; Line 183
	cmp	DWORD PTR __pAABuffer, 0
	jne	SHORT $LN5@GUI_AA_Ini
; Line 184
	call	_LCD_GetVXSizeMax
	mov	DWORD PTR __BufferSize, eax
; Line 185
	mov	eax, DWORD PTR __BufferSize
	push	eax
	call	_GUI_ALLOC_GetFixedBlock
	add	esp, 4
	mov	DWORD PTR __pAABuffer, eax
; Line 186
	cmp	DWORD PTR __pAABuffer, 0
	jne	SHORT $LN5@GUI_AA_Ini
; Line 187
	mov	DWORD PTR _r$[ebp], 1
$LN5@GUI_AA_Ini:
; Line 195
	cmp	DWORD PTR _x0$[ebp], 0
	jge	SHORT $LN3@GUI_AA_Ini
; Line 196
	mov	DWORD PTR _x0$[ebp], 0
$LN3@GUI_AA_Ini:
; Line 198
	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _x0$[ebp]
	mov	ecx, DWORD PTR __BufferSize
	sub	ecx, 1
	cmp	eax, ecx
	jle	SHORT $LN2@GUI_AA_Ini
; Line 199
	mov	eax, DWORD PTR __BufferSize
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _x1$[ebp], edx
$LN2@GUI_AA_Ini:
; Line 202
	mov	eax, DWORD PTR _x1$[ebp]
	cmp	eax, DWORD PTR _x0$[ebp]
	jge	SHORT $LN1@GUI_AA_Ini
; Line 203
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x1$[ebp], eax
; Line 204
	mov	DWORD PTR _r$[ebp], 1
$LN1@GUI_AA_Ini:
; Line 206
	mov	eax, DWORD PTR _GUI_Context+88
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __DrawAPICopy, ecx
	mov	DWORD PTR __DrawAPICopy+4, edx
; Line 207
	mov	eax, DWORD PTR _GUI_Context+88
	mov	DWORD PTR __pLCD_HLPrev, eax
; Line 208
	mov	DWORD PTR __DrawAPICopy, OFFSET __DrawHLine
; Line 209
	mov	DWORD PTR _GUI_Context+88, OFFSET __DrawAPICopy
; Line 210
	mov	eax, DWORD PTR __pAABuffer
	mov	DWORD PTR __pBuffer, eax
; Line 211
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR __x0, eax
; Line 212
	mov	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR __x1, eax
; Line 213
	call	__CleanLine
; Line 214
	call	_CalcClipRectHL
; Line 215
	mov	DWORD PTR _GUI_Context+20, OFFSET __ClipRect_HL
; Line 216
	mov	eax, DWORD PTR _r$[ebp]
; Line 217
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_AA_Init ENDP
_TEXT	ENDS
EXTRN	_GUI__memset:PROC
_BSS	SEGMENT
__x1_InUse DD	01H DUP (?)
__x0_InUse DD	01H DUP (?)
__y	DD	01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __CleanLine
_TEXT	SEGMENT
__CleanLine PROC					; COMDAT
; Line 53
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 54
	mov	eax, DWORD PTR __x1
	sub	eax, DWORD PTR __x0
	add	eax, 1
	push	eax
	push	0
	mov	ecx, DWORD PTR __pBuffer
	push	ecx
	call	_GUI__memset
	add	esp, 12					; 0000000cH
; Line 55
	mov	DWORD PTR __y, -16383			; ffffc001H
; Line 56
	mov	DWORD PTR __x0_InUse, 16383		; 00003fffH
; Line 57
	mov	DWORD PTR __x1_InUse, -16383		; ffffc001H
; Line 58
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__CleanLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawHLine
_TEXT	SEGMENT
_pDest$ = -68						; size = 4
_iRem$ = -56						; size = 4
_x1_Off$ = -44						; size = 4
_x0_Off$ = -32						; size = 4
_x1Real$ = -20						; size = 4
_x0Real$ = -8						; size = 4
_x0$ = 8						; size = 4
_y$ = 12						; size = 4
_x1$ = 16						; size = 4
__DrawHLine PROC					; COMDAT
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 111
	mov	eax, DWORD PTR _x1$[ebp]
	cmp	eax, DWORD PTR _x0$[ebp]
	jge	SHORT $LN11@DrawHLine
; Line 112
	jmp	$LN12@DrawHLine
$LN11@DrawHLine:
; Line 114
	movzx	ecx, BYTE PTR _GUI_Context+92
	mov	eax, DWORD PTR _y$[ebp]
	cdq
	idiv	ecx
	cmp	eax, DWORD PTR __y
	je	SHORT $LN10@DrawHLine
; Line 115
	call	__FlushLine
; Line 116
	movzx	ecx, BYTE PTR _GUI_Context+92
	mov	eax, DWORD PTR _y$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR __y, eax
$LN10@DrawHLine:
; Line 118
	movzx	ecx, BYTE PTR _GUI_Context+92
	mov	eax, DWORD PTR _x0$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _x0Real$[ebp], eax
; Line 119
	movzx	ecx, BYTE PTR _GUI_Context+92
	mov	eax, DWORD PTR _x1$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _x1Real$[ebp], eax
; Line 121
	mov	eax, DWORD PTR _x0Real$[ebp]
	cmp	eax, DWORD PTR __x0_InUse
	jge	SHORT $LN9@DrawHLine
; Line 122
	mov	eax, DWORD PTR _x0Real$[ebp]
	mov	DWORD PTR __x0_InUse, eax
$LN9@DrawHLine:
; Line 124
	mov	eax, DWORD PTR _x1Real$[ebp]
	cmp	eax, DWORD PTR __x1_InUse
	jle	SHORT $LN8@DrawHLine
; Line 125
	mov	eax, DWORD PTR _x1Real$[ebp]
	mov	DWORD PTR __x1_InUse, eax
$LN8@DrawHLine:
; Line 128
	mov	eax, DWORD PTR _x0Real$[ebp]
	cmp	eax, DWORD PTR __x0
	jge	SHORT $LN7@DrawHLine
; Line 129
	movzx	eax, BYTE PTR _GUI_Context+92
	imul	eax, DWORD PTR __x0
	mov	DWORD PTR _x0$[ebp], eax
$LN7@DrawHLine:
; Line 131
	mov	eax, DWORD PTR _x1Real$[ebp]
	cmp	eax, DWORD PTR __x1
	jle	SHORT $LN6@DrawHLine
; Line 132
	mov	eax, DWORD PTR __x1
	add	eax, 1
	movzx	ecx, BYTE PTR _GUI_Context+92
	imul	eax, ecx
	sub	eax, 1
	mov	DWORD PTR _x1$[ebp], eax
$LN6@DrawHLine:
; Line 135
	mov	eax, DWORD PTR _x1$[ebp]
	cmp	eax, DWORD PTR _x0$[ebp]
	jge	SHORT $LN5@DrawHLine
; Line 136
	jmp	$LN12@DrawHLine
$LN5@DrawHLine:
; Line 140
	movzx	ecx, BYTE PTR _GUI_Context+92
	mov	eax, DWORD PTR _x0$[ebp]
	cdq
	idiv	ecx
	sub	eax, DWORD PTR __x0
	mov	DWORD PTR _x0_Off$[ebp], eax
; Line 141
	movzx	ecx, BYTE PTR _GUI_Context+92
	mov	eax, DWORD PTR _x1$[ebp]
	cdq
	idiv	ecx
	sub	eax, DWORD PTR __x0
	mov	DWORD PTR _x1_Off$[ebp], eax
; Line 142
	mov	eax, DWORD PTR _x1_Off$[ebp]
	sub	eax, DWORD PTR _x0_Off$[ebp]
	add	eax, 1
	mov	DWORD PTR _iRem$[ebp], eax
; Line 143
	mov	eax, DWORD PTR __pBuffer
	add	eax, DWORD PTR _x0_Off$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 144
	cmp	DWORD PTR _iRem$[ebp], 1
	jne	SHORT $LN4@DrawHLine
; Line 145
	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _x0$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	movzx	edx, BYTE PTR [ecx]
	lea	eax, DWORD PTR [edx+eax+1]
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
; Line 146
	jmp	$LN12@DrawHLine
$LN4@DrawHLine:
; Line 148
	mov	eax, DWORD PTR __x0
	mov	ecx, DWORD PTR _x0_Off$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	movzx	eax, BYTE PTR _GUI_Context+92
	imul	edx, eax
	sub	edx, DWORD PTR _x0$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	movzx	eax, BYTE PTR [ecx]
	add	eax, edx
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
$LN2@DrawHLine:
; Line 150
	mov	eax, DWORD PTR _iRem$[ebp]
	sub	eax, 1
	mov	DWORD PTR _iRem$[ebp], eax
	cmp	DWORD PTR _iRem$[ebp], 1
	jle	SHORT $LN1@DrawHLine
; Line 151
	movzx	eax, BYTE PTR _GUI_Context+92
	mov	ecx, DWORD PTR _pDest$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _pDest$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pDest$[ebp], ecx
; Line 152
	jmp	SHORT $LN2@DrawHLine
$LN1@DrawHLine:
; Line 154
	mov	eax, DWORD PTR _x1$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _x1_Off$[ebp]
	add	ecx, DWORD PTR __x0
	movzx	edx, BYTE PTR _GUI_Context+92
	imul	ecx, edx
	sub	eax, ecx
	mov	ecx, DWORD PTR _pDest$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [eax], dl
$LN12@DrawHLine:
; Line 157
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawHLine ENDP
_TEXT	ENDS
EXTRN	_LCD_SetPixelAA:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __FlushLine
_TEXT	SEGMENT
_IMax$ = -56						; size = 4
_iEnd$ = -44						; size = 4
_j$ = -32						; size = 4
_i$ = -20						; size = 4
_Intens$ = -8						; size = 4
__FlushLine PROC					; COMDAT
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 66
	mov	eax, DWORD PTR __x1_InUse
	sub	eax, DWORD PTR __x0
	mov	DWORD PTR _iEnd$[ebp], eax
; Line 67
	movzx	eax, BYTE PTR _GUI_Context+92
	movzx	ecx, BYTE PTR _GUI_Context+92
	imul	eax, ecx
	mov	DWORD PTR _IMax$[ebp], eax
; Line 69
	mov	eax, DWORD PTR __BufferSize
	sub	eax, 1
	cmp	DWORD PTR _iEnd$[ebp], eax
	jle	SHORT $LN12@FlushLine
; Line 70
	mov	eax, DWORD PTR __BufferSize
	sub	eax, 1
	mov	DWORD PTR _iEnd$[ebp], eax
$LN12@FlushLine:
; Line 72
	mov	eax, DWORD PTR __x0_InUse
	sub	eax, DWORD PTR __x0
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN11@FlushLine
$LN10@FlushLine:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@FlushLine:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _iEnd$[ebp]
	jg	$LN9@FlushLine
; Line 73
	mov	eax, DWORD PTR __pBuffer
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Intens$[ebp], ecx
; Line 74
	cmp	DWORD PTR _Intens$[ebp], 0
	je	$LN8@FlushLine
; Line 76
	mov	eax, DWORD PTR _Intens$[ebp]
	cmp	eax, DWORD PTR _IMax$[ebp]
	jne	$LN7@FlushLine
; Line 77
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _j$[ebp], eax
$LN6@FlushLine:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _iEnd$[ebp]
	jge	SHORT $LN5@FlushLine
; Line 78
	mov	eax, DWORD PTR __pBuffer
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	ecx, DWORD PTR _IMax$[ebp]
	je	SHORT $LN4@FlushLine
; Line 79
	jmp	SHORT $LN5@FlushLine
$LN4@FlushLine:
; Line 81
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 82
	jmp	SHORT $LN6@FlushLine
$LN5@FlushLine:
; Line 84
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _i$[ebp]
	je	SHORT $LN3@FlushLine
; Line 85
	mov	eax, DWORD PTR __x0
	add	eax, DWORD PTR _j$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR __y
	push	ecx
	mov	edx, DWORD PTR __x0
	add	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR __pLCD_HLPrev
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 86
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], eax
; Line 87
	jmp	SHORT $LN2@FlushLine
$LN3@FlushLine:
; Line 88
	mov	esi, esp
	mov	eax, DWORD PTR __y
	push	eax
	mov	ecx, DWORD PTR __x0
	add	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _GUI_Context+88
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@FlushLine:
; Line 90
	jmp	SHORT $LN8@FlushLine
$LN7@FlushLine:
; Line 91
	mov	ecx, DWORD PTR _Intens$[ebp]
	imul	ecx, 15					; 0000000fH
	mov	eax, DWORD PTR _IMax$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, ecx
	cdq
	idiv	DWORD PTR _IMax$[ebp]
	push	eax
	mov	edx, DWORD PTR __y
	push	edx
	mov	eax, DWORD PTR __x0
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_LCD_SetPixelAA
	add	esp, 12					; 0000000cH
$LN8@FlushLine:
; Line 94
	jmp	$LN10@FlushLine
$LN9@FlushLine:
; Line 95
	call	__CleanLine
; Line 96
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FlushLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _CalcClipRectHL
_TEXT	SEGMENT
_CalcClipRectHL PROC					; COMDAT
; Line 163
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 164
	movsx	eax, WORD PTR _GUI_Context+8
	movzx	ecx, BYTE PTR _GUI_Context+92
	imul	eax, ecx
	mov	WORD PTR __ClipRect_HL, ax
; Line 165
	movsx	eax, WORD PTR _GUI_Context+10
	movzx	ecx, BYTE PTR _GUI_Context+92
	imul	eax, ecx
	mov	WORD PTR __ClipRect_HL+2, ax
; Line 166
	movsx	eax, WORD PTR _GUI_Context+12
	add	eax, 1
	movzx	ecx, BYTE PTR _GUI_Context+92
	imul	eax, ecx
	sub	eax, 1
	mov	WORD PTR __ClipRect_HL+4, ax
; Line 167
	movsx	eax, WORD PTR _GUI_Context+14
	add	eax, 1
	movzx	ecx, BYTE PTR _GUI_Context+92
	imul	eax, ecx
	sub	eax, 1
	mov	WORD PTR __ClipRect_HL+6, ax
; Line 168
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CalcClipRectHL ENDP
_TEXT	ENDS
PUBLIC	_GUI_AA_Init_HiRes
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_AA_Init_HiRes
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_x1$ = 12						; size = 4
_GUI_AA_Init_HiRes PROC					; COMDAT
; Line 223
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 224
	movzx	ecx, BYTE PTR _GUI_Context+92
	mov	eax, DWORD PTR _x0$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _x0$[ebp], eax
; Line 225
	movzx	ecx, BYTE PTR _GUI_Context+92
	mov	eax, DWORD PTR _x1$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _x1$[ebp], eax
; Line 226
	mov	eax, DWORD PTR _x1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_GUI_AA_Init
	add	esp, 8
; Line 227
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_AA_Init_HiRes ENDP
_TEXT	ENDS
PUBLIC	_GUI_AA_SetFactor
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_AA_SetFactor
_TEXT	SEGMENT
_Factor$ = 8						; size = 4
_GUI_AA_SetFactor PROC					; COMDAT
; Line 233
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 234
	mov	al, BYTE PTR _Factor$[ebp]
	mov	BYTE PTR _GUI_Context+92, al
; Line 235
	call	_CalcClipRectHL
; Line 236
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_AA_SetFactor ENDP
_TEXT	ENDS
PUBLIC	_GUI_AA_GetFactor
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_AA_GetFactor
_TEXT	SEGMENT
_GUI_AA_GetFactor PROC					; COMDAT
; Line 242
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 243
	movzx	eax, BYTE PTR _GUI_Context+92
; Line 244
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_AA_GetFactor ENDP
_TEXT	ENDS
PUBLIC	_GUI_AA_DisableHiRes
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_AA_DisableHiRes
_TEXT	SEGMENT
_GUI_AA_DisableHiRes PROC				; COMDAT
; Line 250
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 251
	mov	BYTE PTR _GUI_Context+93, 0
; Line 252
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_AA_DisableHiRes ENDP
_TEXT	ENDS
PUBLIC	_GUI_AA_EnableHiRes
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_AA_EnableHiRes
_TEXT	SEGMENT
_GUI_AA_EnableHiRes PROC				; COMDAT
; Line 258
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 259
	mov	BYTE PTR _GUI_Context+93, 1
; Line 260
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_AA_EnableHiRes ENDP
_TEXT	ENDS
PUBLIC	_GUI_AA_HiRes2Pixel
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_AA_HiRes2Pixel
_TEXT	SEGMENT
tv68 = -196						; size = 4
_HiRes$ = 8						; size = 4
_GUI_AA_HiRes2Pixel PROC				; COMDAT
; Line 266
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 267
	movzx	eax, BYTE PTR _GUI_Context+92
	test	eax, eax
	je	SHORT $LN3@GUI_AA_HiR
	movzx	ecx, BYTE PTR _GUI_Context+92
	mov	eax, DWORD PTR _HiRes$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@GUI_AA_HiR
$LN3@GUI_AA_HiR:
	mov	edx, DWORD PTR _HiRes$[ebp]
	mov	DWORD PTR tv68[ebp], edx
$LN4@GUI_AA_HiR:
	mov	ax, WORD PTR tv68[ebp]
; Line 268
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_AA_HiRes2Pixel ENDP
_TEXT	ENDS
PUBLIC	_GUI_AA_Exit
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_AA_Exit
_TEXT	SEGMENT
_GUI_AA_Exit PROC					; COMDAT
; Line 274
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 275
	call	__FlushLine
; Line 277
	mov	eax, DWORD PTR __pLCD_HLPrev
	mov	DWORD PTR _GUI_Context+88, eax
; Line 278
	mov	DWORD PTR _GUI_Context+20, OFFSET _GUI_Context+8
; Line 279
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_AA_Exit ENDP
_TEXT	ENDS
END
