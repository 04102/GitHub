; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_SetAlpha.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
__Alpha_API DD	05H
	DD	FLAT:__DrawBitmap
	DD	FLAT:__DrawHLine
	DD	FLAT:__DrawVLine
	DD	FLAT:__FillRect
	DD	FLAT:__GetPixelIndex
	DD	FLAT:__SetPixelIndex
	DD	FLAT:__XorPixel
	DD	FLAT:__SetOrg
	DD	FLAT:__GetDevFunc
	DD	FLAT:__GetDevProp
	DD	FLAT:__GetDevData
	DD	FLAT:__GetRect
CONST	ENDS
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_setalpha.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __GetPixelIndex
_TEXT	SEGMENT
_PixelIndex$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__GetPixelIndex PROC					; COMDAT
; Line 223
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 226
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 227
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _PixelIndex$[ebp], eax
; Line 228
	mov	eax, DWORD PTR _PixelIndex$[ebp]
; Line 229
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetPixelIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetPixelIndex
_TEXT	SEGMENT
_Color$ = -56						; size = 4
_ColorNew$ = -44					; size = 4
_ColorOld$ = -32					; size = 4
_IndexNew$ = -20					; size = 4
_IndexOld$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_ColorIndex$ = 20					; size = 4
__SetPixelIndex PROC					; COMDAT
; Line 235
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 239
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 240
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexOld$[ebp], eax
; Line 241
	mov	esi, esp
	mov	eax, DWORD PTR _IndexOld$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ColorOld$[ebp], eax
; Line 242
	mov	esi, esp
	mov	eax, DWORD PTR _ColorIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Color$[ebp], eax
; Line 243
	mov	eax, DWORD PTR _ColorOld$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Color$[ebp]
	push	ecx
	call	__MixColors
	add	esp, 8
	mov	DWORD PTR _ColorNew$[ebp], eax
; Line 244
	mov	esi, esp
	mov	eax, DWORD PTR _ColorNew$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexNew$[ebp], eax
; Line 245
	mov	esi, esp
	mov	eax, DWORD PTR _IndexNew$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 246
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetPixelIndex ENDP
_TEXT	ENDS
EXTRN	_GUI__MixColors:PROC
EXTRN	_GUI_Context:BYTE
_BSS	SEGMENT
__aAlpha DB	01H DUP (?)
	ALIGN	4

__SuppressMixing DD 01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __MixColors
_TEXT	SEGMENT
_r$ = -20						; size = 4
_Intens$ = -5						; size = 1
_Color$ = 8						; size = 4
_BkColor$ = 12						; size = 4
__MixColors PROC					; COMDAT
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 61
	cmp	DWORD PTR __SuppressMixing, 0
	je	SHORT $LN2@MixColors
; Line 62
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	ecx, DWORD PTR _GUI_Context[eax*4+72]
	mov	edx, DWORD PTR [ecx+24]
	mov	al, BYTE PTR __aAlpha[edx]
	mov	BYTE PTR _Intens$[ebp], al
; Line 63
	mov	eax, DWORD PTR _Color$[ebp]
	and	eax, 16777215				; 00ffffffH
	movzx	ecx, BYTE PTR _Intens$[ebp]
	shl	ecx, 24					; 00000018H
	or	eax, ecx
	mov	DWORD PTR _r$[ebp], eax
; Line 64
	jmp	SHORT $LN1@MixColors
$LN2@MixColors:
; Line 65
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	ecx, DWORD PTR _GUI_Context[eax*4+72]
	mov	edx, DWORD PTR [ecx+24]
	movzx	eax, BYTE PTR __aAlpha[edx]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	BYTE PTR _Intens$[ebp], cl
; Line 66
	movzx	eax, BYTE PTR _Intens$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BkColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Color$[ebp]
	push	edx
	call	_GUI__MixColors
	add	esp, 12					; 0000000cH
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _r$[ebp], eax
$LN1@MixColors:
; Line 68
	mov	eax, DWORD PTR _r$[ebp]
; Line 96
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__MixColors ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __XorPixel
_TEXT	SEGMENT
_PixelIndex$ = -20					; size = 4
_IndexMask$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__XorPixel PROC						; COMDAT
; Line 252
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 256
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__GetPixelIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _PixelIndex$[ebp], eax
; Line 257
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$[ebp], eax
; Line 258
	mov	eax, DWORD PTR _PixelIndex$[ebp]
	xor	eax, DWORD PTR _IndexMask$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 259
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__XorPixel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitmap
_TEXT	SEGMENT
tv66 = -208						; size = 4
_i$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xSize$ = 20						; size = 4
_ySize$ = 24						; size = 4
_BitsPerPixel$ = 28					; size = 4
_BytesPerLine$ = 32					; size = 4
_pData$ = 36						; size = 4
_Diff$ = 40						; size = 4
_pTrans$ = 44						; size = 4
__DrawBitmap PROC					; COMDAT
; Line 579
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 581
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@DrawBitmap
$LN10@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	$LN12@DrawBitmap
; Line 582
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR tv66[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 31			; 0000001fH
	ja	$LN7@DrawBitmap
	mov	edx, DWORD PTR tv66[ebp]
	movzx	eax, BYTE PTR $LN14@DrawBitmap[edx]
	jmp	DWORD PTR $LN15@DrawBitmap[eax*4]
$LN6@DrawBitmap:
; Line 584
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine1BPP
	add	esp, 28					; 0000001cH
; Line 585
	jmp	$LN7@DrawBitmap
$LN5@DrawBitmap:
; Line 587
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine2BPP
	add	esp, 28					; 0000001cH
; Line 588
	jmp	$LN7@DrawBitmap
$LN4@DrawBitmap:
; Line 590
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine4BPP
	add	esp, 28					; 0000001cH
; Line 591
	jmp	SHORT $LN7@DrawBitmap
$LN3@DrawBitmap:
; Line 593
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__DrawBitLine8BPP
	add	esp, 24					; 00000018H
; Line 594
	jmp	SHORT $LN7@DrawBitmap
$LN2@DrawBitmap:
; Line 596
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__DrawBitLine16BPP
	add	esp, 20					; 00000014H
; Line 597
	jmp	SHORT $LN7@DrawBitmap
$LN1@DrawBitmap:
; Line 599
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__DrawBitLine32BPP
	add	esp, 20					; 00000014H
$LN7@DrawBitmap:
; Line 602
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 603
	jmp	$LN10@DrawBitmap
$LN12@DrawBitmap:
; Line 604
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@DrawBitmap:
	DD	$LN6@DrawBitmap
	DD	$LN5@DrawBitmap
	DD	$LN4@DrawBitmap
	DD	$LN3@DrawBitmap
	DD	$LN2@DrawBitmap
	DD	$LN1@DrawBitmap
	DD	$LN7@DrawBitmap
$LN14@DrawBitmap:
	DB	0
	DB	1
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
__DrawBitmap ENDP
_TEXT	ENDS
EXTRN	_GUI__CompactPixelIndices:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
_BSS	SEGMENT
__pIndex DD	01H DUP (?)
__pColor DD	01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __DrawBitLine1BPP
_TEXT	SEGMENT
tv86 = -352						; size = 4
tv68 = -352						; size = 4
_Pixel$9359 = -152					; size = 4
_ColorNew$ = -140					; size = 4
_Color$ = -128						; size = 4
_pfColor2Index$ = -116					; size = 4
_pfIndex2Color$ = -104					; size = 4
_BitsPerPixel$ = -92					; size = 4
_IndexMask$ = -80					; size = 4
_NumPixels$ = -68					; size = 4
_i$ = -56						; size = 4
_Color1$ = -44						; size = 4
_Color0$ = -32						; size = 4
_Index1$ = -20						; size = 4
_Index0$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xSize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine1BPP PROC					; COMDAT
; Line 265
	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 275
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Index0$[ebp], ecx
; Line 276
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Index1$[ebp], ecx
; Line 277
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 278
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv68[ebp], eax
	cmp	DWORD PTR tv68[ebp], 3
	ja	$LN20@DrawBitLin
	mov	ecx, DWORD PTR tv68[ebp]
	jmp	DWORD PTR $LN28@DrawBitLin[ecx*4]
$LN17@DrawBitLin:
; Line 280
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR _NumPixels$[ebp], eax
; Line 281
	lea	eax, DWORD PTR _pfColor2Index$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pfIndex2Color$[ebp]
	push	ecx
	call	__GetPointers
	add	esp, 8
; Line 282
	mov	eax, DWORD PTR _pfIndex2Color$[ebp]
	push	eax
	mov	ecx, DWORD PTR __pColor
	push	ecx
	mov	edx, DWORD PTR __pIndex
	push	edx
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__GetLine
	add	esp, 28					; 0000001cH
; Line 283
	mov	esi, esp
	mov	eax, DWORD PTR _Index0$[ebp]
	push	eax
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Color0$[ebp], eax
; Line 284
	mov	esi, esp
	mov	eax, DWORD PTR _Index1$[ebp]
	push	eax
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Color1$[ebp], eax
; Line 285
	mov	DWORD PTR _i$[ebp], 0
$LN16@DrawBitLin:
; Line 287
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN22@DrawBitLin
	mov	ecx, DWORD PTR _Color1$[ebp]
	mov	DWORD PTR tv86[ebp], ecx
	jmp	SHORT $LN23@DrawBitLin
$LN22@DrawBitLin:
	mov	edx, DWORD PTR _Color0$[ebp]
	mov	DWORD PTR tv86[ebp], edx
$LN23@DrawBitLin:
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR _Color$[ebp], eax
; Line 288
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR __pColor
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	call	__MixColors
	add	esp, 8
	mov	DWORD PTR _ColorNew$[ebp], eax
; Line 289
	mov	esi, esp
	mov	eax, DWORD PTR _ColorNew$[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR __pIndex
	mov	DWORD PTR [edx+ecx*4], eax
; Line 290
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN13@DrawBitLin
; Line 291
	mov	DWORD PTR _Diff$[ebp], 0
; Line 292
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN13@DrawBitLin:
; Line 294
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 295
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN16@DrawBitLin
; Line 296
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	__GetBitsPerPixel
	add	esp, 4
	mov	DWORD PTR _BitsPerPixel$[ebp], eax
; Line 297
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NumPixels$[ebp]
	push	ecx
	mov	edx, DWORD PTR __pIndex
	push	edx
	call	_GUI__CompactPixelIndices
	add	esp, 12					; 0000000cH
; Line 298
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __pIndex
	push	eax
	push	0
	mov	ecx, DWORD PTR _BitsPerPixel$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _NumPixels$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 299
	jmp	$LN20@DrawBitLin
$LN12@DrawBitLin:
; Line 301
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR _NumPixels$[ebp], eax
; Line 302
	lea	eax, DWORD PTR _pfColor2Index$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pfIndex2Color$[ebp]
	push	ecx
	call	__GetPointers
	add	esp, 8
; Line 303
	mov	eax, DWORD PTR _pfIndex2Color$[ebp]
	push	eax
	mov	ecx, DWORD PTR __pColor
	push	ecx
	mov	edx, DWORD PTR __pIndex
	push	edx
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__GetLine
	add	esp, 28					; 0000001cH
; Line 304
	mov	esi, esp
	mov	eax, DWORD PTR _Index1$[ebp]
	push	eax
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Color1$[ebp], eax
; Line 305
	mov	DWORD PTR _i$[ebp], 0
$LN11@DrawBitLin:
; Line 307
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN8@DrawBitLin
; Line 308
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR __pColor
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _Color1$[ebp]
	push	eax
	call	__MixColors
	add	esp, 8
	mov	DWORD PTR _ColorNew$[ebp], eax
; Line 309
	mov	esi, esp
	mov	eax, DWORD PTR _ColorNew$[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR __pIndex
	mov	DWORD PTR [edx+ecx*4], eax
$LN8@DrawBitLin:
; Line 311
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 312
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN10@DrawBitLin
; Line 313
	mov	DWORD PTR _Diff$[ebp], 0
; Line 314
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN10@DrawBitLin:
; Line 316
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN11@DrawBitLin
; Line 317
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	__GetBitsPerPixel
	add	esp, 4
	mov	DWORD PTR _BitsPerPixel$[ebp], eax
; Line 318
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NumPixels$[ebp]
	push	ecx
	mov	edx, DWORD PTR __pIndex
	push	edx
	call	_GUI__CompactPixelIndices
	add	esp, 12					; 0000000cH
; Line 319
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __pIndex
	push	eax
	push	0
	mov	ecx, DWORD PTR _BitsPerPixel$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _NumPixels$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 320
	jmp	$LN20@DrawBitLin
$LN6@DrawBitLin:
; Line 323
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$[ebp], eax
$LN5@DrawBitLin:
; Line 325
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN2@DrawBitLin
; Line 326
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__GetPixelIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Pixel$9359[ebp], eax
; Line 327
	mov	eax, DWORD PTR _Pixel$9359[ebp]
	xor	eax, DWORD PTR _IndexMask$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
$LN2@DrawBitLin:
; Line 329
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 330
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN4@DrawBitLin
; Line 331
	mov	DWORD PTR _Diff$[ebp], 0
; Line 332
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN4@DrawBitLin:
; Line 334
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	SHORT $LN5@DrawBitLin
$LN20@DrawBitLin:
; Line 337
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@DrawBitLin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN27@DrawBitLin:
	DD	2
	DD	$LN26@DrawBitLin
$LN26@DrawBitLin:
	DD	-104					; ffffff98H
	DD	4
	DD	$LN24@DrawBitLin
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN25@DrawBitLin
$LN25@DrawBitLin:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	50					; 00000032H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN24@DrawBitLin:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	50					; 00000032H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN28@DrawBitLin:
	DD	$LN17@DrawBitLin
	DD	$LN6@DrawBitLin
	DD	$LN12@DrawBitLin
	DD	$LN6@DrawBitLin
__DrawBitLine1BPP ENDP
_TEXT	ENDS
EXTRN	_GUI_GetpfColor2IndexEx:PROC
EXTRN	_GUI_GetpfIndex2ColorEx:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetPointers
_TEXT	SEGMENT
_ppfIndex2Color$ = 8					; size = 4
_ppfColor2Index$ = 12					; size = 4
__GetPointers PROC					; COMDAT
; Line 142
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 143
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_GUI_GetpfIndex2ColorEx
	add	esp, 4
	mov	ecx, DWORD PTR _ppfIndex2Color$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 144
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_GUI_GetpfColor2IndexEx
	add	esp, 4
	mov	ecx, DWORD PTR _ppfColor2Index$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 145
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetPointers ENDP
_TEXT	ENDS
EXTRN	_LCD_GetBitsPerPixelEx:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetBitsPerPixel
_TEXT	SEGMENT
_BitsPerPixel$ = -8					; size = 4
_LayerIndex$ = 8					; size = 4
__GetBitsPerPixel PROC					; COMDAT
; Line 151
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 154
	mov	eax, DWORD PTR _LayerIndex$[ebp]
	mov	DWORD PTR _LayerIndex$[ebp], eax
; Line 155
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_LCD_GetBitsPerPixelEx
	add	esp, 4
	mov	DWORD PTR _BitsPerPixel$[ebp], eax
; Line 156
	cmp	DWORD PTR _BitsPerPixel$[ebp], 24	; 00000018H
	jne	SHORT $LN1@GetBitsPer
; Line 157
	mov	DWORD PTR _BitsPerPixel$[ebp], 32	; 00000020H
$LN1@GetBitsPer:
; Line 159
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
; Line 160
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetBitsPerPixel ENDP
_TEXT	ENDS
EXTRN	_GUI__ExpandPixelIndices:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetLine
_TEXT	SEGMENT
_pReadRect$ = -68					; size = 4
_BitsPerPixel$ = -56					; size = 4
_Expand$ = -44						; size = 4
_x1$ = -32						; size = 4
_i$ = -20						; size = 4
_p$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_NumPixels$ = 20					; size = 4
_pBuffer$ = 24						; size = 4
_pColor$ = 28						; size = 4
_pfIndex2Color$ = 32					; size = 4
__GetLine PROC						; COMDAT
; Line 166
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 174
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 176
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx], 4
	jne	SHORT $LN11@GetLine
; Line 177
	mov	DWORD PTR _pReadRect$[ebp], OFFSET __ReadRectFromMemdev
; Line 178
	mov	DWORD PTR _Expand$[ebp], 0
; Line 179
	jmp	SHORT $LN10@GetLine
$LN11@GetLine:
; Line 183
	mov	esi, esp
	push	1
	lea	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pReadRect$[ebp], eax
; Line 184
	mov	DWORD PTR _Expand$[ebp], 1
$LN10@GetLine:
; Line 189
	mov	eax, DWORD PTR _NumPixels$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _x1$[ebp], edx
; Line 190
	cmp	DWORD PTR _pReadRect$[ebp], 0
	je	SHORT $LN9@GetLine
; Line 194
	mov	esi, esp
	mov	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x1$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pReadRect$[ebp]
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 195
	cmp	DWORD PTR _Expand$[ebp], 0
	je	SHORT $LN8@GetLine
; Line 199
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	__GetBitsPerPixel
	add	esp, 4
	mov	DWORD PTR _BitsPerPixel$[ebp], eax
; Line 200
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NumPixels$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBuffer$[ebp]
	push	edx
	call	_GUI__ExpandPixelIndices
	add	esp, 12					; 0000000cH
$LN8@GetLine:
; Line 202
	jmp	SHORT $LN7@GetLine
$LN9@GetLine:
; Line 206
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 207
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN6@GetLine
$LN5@GetLine:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@GetLine:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _x1$[ebp]
	jg	SHORT $LN7@GetLine
; Line 208
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 209
	jmp	SHORT $LN5@GetLine
$LN7@GetLine:
; Line 214
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@GetLine
$LN2@GetLine:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@GetLine:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _NumPixels$[ebp]
	jge	SHORT $LN12@GetLine
; Line 215
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pColor$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 216
	jmp	SHORT $LN2@GetLine
$LN12@GetLine:
; Line 217
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetLine ENDP
_TEXT	ENDS
EXTRN	_memcpy:PROC
EXTRN	_GUI_MEMDEV_GetDataPtr:PROC
EXTRN	_GUI_MEMDEV_GetBitsPerPixel:PROC
EXTRN	_GUI_MEMDEV_GetXSize:PROC
EXTRN	_GUI_MEMDEV_GetYPos:PROC
EXTRN	_GUI_MEMDEV_GetXPos:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __ReadRectFromMemdev
_TEXT	SEGMENT
_NumPixels$ = -80					; size = 4
_xSize$ = -68						; size = 4
_y0m$ = -56						; size = 4
_x0m$ = -44						; size = 4
_p$ = -32						; size = 4
_BitsPerPixel$ = -20					; size = 4
_BytesPerPixel$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_pBuffer$ = 28						; size = 4
__ReadRectFromMemdev PROC				; COMDAT
; Line 106
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 111
	mov	eax, DWORD PTR _y1$[ebp]
	mov	DWORD PTR _y1$[ebp], eax
; Line 112
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 113
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_MEMDEV_GetXPos
	add	esp, 4
	mov	DWORD PTR _x0m$[ebp], eax
; Line 114
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_MEMDEV_GetYPos
	add	esp, 4
	mov	DWORD PTR _y0m$[ebp], eax
; Line 115
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_MEMDEV_GetXSize
	add	esp, 4
	mov	DWORD PTR _xSize$[ebp], eax
; Line 116
	mov	eax, DWORD PTR _y0$[ebp]
	cmp	eax, DWORD PTR _y0m$[ebp]
	jge	SHORT $LN6@ReadRectFr
; Line 117
	jmp	$LN7@ReadRectFr
$LN6@ReadRectFr:
; Line 119
	mov	eax, DWORD PTR _x0$[ebp]
	cmp	eax, DWORD PTR _x0m$[ebp]
	jge	SHORT $LN5@ReadRectFr
; Line 120
	jmp	$LN7@ReadRectFr
$LN5@ReadRectFr:
; Line 122
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_MEMDEV_GetBitsPerPixel
	add	esp, 4
	mov	DWORD PTR _BitsPerPixel$[ebp], eax
; Line 123
	cmp	DWORD PTR _BitsPerPixel$[ebp], 8
	jg	SHORT $LN4@ReadRectFr
; Line 124
	mov	DWORD PTR _BytesPerPixel$[ebp], 1
	jmp	SHORT $LN3@ReadRectFr
$LN4@ReadRectFr:
; Line 125
	cmp	DWORD PTR _BitsPerPixel$[ebp], 16	; 00000010H
	jg	SHORT $LN2@ReadRectFr
; Line 126
	mov	DWORD PTR _BytesPerPixel$[ebp], 2
; Line 127
	jmp	SHORT $LN3@ReadRectFr
$LN2@ReadRectFr:
; Line 128
	mov	DWORD PTR _BytesPerPixel$[ebp], 4
$LN3@ReadRectFr:
; Line 130
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_MEMDEV_GetDataPtr
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 131
	mov	eax, DWORD PTR _y0$[ebp]
	sub	eax, DWORD PTR _y0m$[ebp]
	imul	eax, DWORD PTR _xSize$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	sub	ecx, DWORD PTR _x0m$[ebp]
	add	eax, ecx
	imul	eax, DWORD PTR _BytesPerPixel$[ebp]
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 132
	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _x0$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
; Line 133
	mov	eax, DWORD PTR _NumPixels$[ebp]
	imul	eax, DWORD PTR _BytesPerPixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBuffer$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 134
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NumPixels$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBuffer$[ebp]
	push	edx
	call	_GUI__ExpandPixelIndices
	add	esp, 12					; 0000000cH
$LN7@ReadRectFr:
; Line 135
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ReadRectFromMemdev ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine2BPP
_TEXT	SEGMENT
tv131 = -340						; size = 4
tv81 = -340						; size = 4
tv68 = -340						; size = 4
_Index$9414 = -140					; size = 4
_Shift$9413 = -128					; size = 4
_PixelIndex$9407 = -116					; size = 4
_Index$9405 = -104					; size = 4
_Shift$9404 = -92					; size = 4
_Index$9397 = -80					; size = 4
_Shift$9396 = -68					; size = 4
_PixelIndex$9390 = -56					; size = 4
_Index$9389 = -44					; size = 4
_Shift$9388 = -32					; size = 4
_CurrentPixel$ = -20					; size = 4
_Pixels$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xSize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine2BPP PROC					; COMDAT
; Line 343
	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 344
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixels$[ebp], ecx
; Line 345
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _CurrentPixel$[ebp], eax
; Line 346
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 347
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv68[ebp], eax
	je	SHORT $LN24@DrawBitLin@2
	cmp	DWORD PTR tv68[ebp], 2
	je	$LN13@DrawBitLin@2
	jmp	$LN27@DrawBitLin@2
$LN24@DrawBitLin@2:
; Line 349
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN17@DrawBitLin@2
$LN22@DrawBitLin@2:
; Line 351
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$9388[ebp], eax
; Line 352
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$9388[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$9388[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$9389[ebp], eax
; Line 353
	mov	eax, DWORD PTR _Index$9389[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$9390[ebp], edx
; Line 354
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv81[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _PixelIndex$9390[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv81[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 355
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN21@DrawBitLin@2
; Line 356
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 357
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN21@DrawBitLin@2:
; Line 359
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN22@DrawBitLin@2
; Line 360
	jmp	$LN18@DrawBitLin@2
$LN17@DrawBitLin@2:
; Line 362
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$9396[ebp], eax
; Line 363
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$9396[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$9396[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$9397[ebp], eax
; Line 364
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _Index$9397[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv131[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 365
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN16@DrawBitLin@2
; Line 366
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 367
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN16@DrawBitLin@2:
; Line 369
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN17@DrawBitLin@2
$LN18@DrawBitLin@2:
; Line 371
	jmp	$LN27@DrawBitLin@2
$LN13@DrawBitLin@2:
; Line 373
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN5@DrawBitLin@2
$LN11@DrawBitLin@2:
; Line 375
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$9404[ebp], eax
; Line 376
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$9404[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$9404[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$9405[ebp], eax
; Line 377
	cmp	DWORD PTR _Index$9405[ebp], 0
	je	SHORT $LN8@DrawBitLin@2
; Line 378
	mov	eax, DWORD PTR _Index$9405[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$9407[ebp], edx
; Line 379
	mov	eax, DWORD PTR _PixelIndex$9407[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
$LN8@DrawBitLin@2:
; Line 381
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 382
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN10@DrawBitLin@2
; Line 383
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 384
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN10@DrawBitLin@2:
; Line 386
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN11@DrawBitLin@2
; Line 387
	jmp	$LN27@DrawBitLin@2
$LN5@DrawBitLin@2:
; Line 389
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$9413[ebp], eax
; Line 390
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$9413[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$9413[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$9414[ebp], eax
; Line 391
	cmp	DWORD PTR _Index$9414[ebp], 0
	je	SHORT $LN2@DrawBitLin@2
; Line 392
	mov	eax, DWORD PTR _Index$9414[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
$LN2@DrawBitLin@2:
; Line 394
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 395
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN4@DrawBitLin@2
; Line 396
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 397
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN4@DrawBitLin@2:
; Line 399
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN5@DrawBitLin@2
$LN27@DrawBitLin@2:
; Line 403
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine2BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine4BPP
_TEXT	SEGMENT
tv131 = -340						; size = 4
tv81 = -340						; size = 4
tv68 = -340						; size = 4
_Index$9470 = -140					; size = 4
_Shift$9469 = -128					; size = 4
_PixelIndex$9463 = -116					; size = 4
_Index$9461 = -104					; size = 4
_Shift$9460 = -92					; size = 4
_Index$9453 = -80					; size = 4
_Shift$9452 = -68					; size = 4
_PixelIndex$9446 = -56					; size = 4
_Index$9445 = -44					; size = 4
_Shift$9444 = -32					; size = 4
_CurrentPixel$ = -20					; size = 4
_Pixels$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xSize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine4BPP PROC					; COMDAT
; Line 409
	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 410
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixels$[ebp], ecx
; Line 411
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _CurrentPixel$[ebp], eax
; Line 412
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 413
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv68[ebp], eax
	je	SHORT $LN24@DrawBitLin@3
	cmp	DWORD PTR tv68[ebp], 2
	je	$LN13@DrawBitLin@3
	jmp	$LN27@DrawBitLin@3
$LN24@DrawBitLin@3:
; Line 415
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN17@DrawBitLin@3
$LN22@DrawBitLin@3:
; Line 417
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$9444[ebp], eax
; Line 418
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$9444[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$9444[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$9445[ebp], eax
; Line 419
	mov	eax, DWORD PTR _Index$9445[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$9446[ebp], edx
; Line 420
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv81[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _PixelIndex$9446[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv81[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 421
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN21@DrawBitLin@3
; Line 422
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 423
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN21@DrawBitLin@3:
; Line 425
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN22@DrawBitLin@3
; Line 426
	jmp	$LN18@DrawBitLin@3
$LN17@DrawBitLin@3:
; Line 428
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$9452[ebp], eax
; Line 429
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$9452[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$9452[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$9453[ebp], eax
; Line 430
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _Index$9453[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv131[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 431
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN16@DrawBitLin@3
; Line 432
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 433
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN16@DrawBitLin@3:
; Line 435
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN17@DrawBitLin@3
$LN18@DrawBitLin@3:
; Line 437
	jmp	$LN27@DrawBitLin@3
$LN13@DrawBitLin@3:
; Line 439
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN5@DrawBitLin@3
$LN11@DrawBitLin@3:
; Line 441
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$9460[ebp], eax
; Line 442
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$9460[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$9460[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$9461[ebp], eax
; Line 443
	cmp	DWORD PTR _Index$9461[ebp], 0
	je	SHORT $LN8@DrawBitLin@3
; Line 444
	mov	eax, DWORD PTR _Index$9461[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$9463[ebp], edx
; Line 445
	mov	eax, DWORD PTR _PixelIndex$9463[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
$LN8@DrawBitLin@3:
; Line 447
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 448
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN10@DrawBitLin@3
; Line 449
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 450
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN10@DrawBitLin@3:
; Line 452
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN11@DrawBitLin@3
; Line 453
	jmp	$LN27@DrawBitLin@3
$LN5@DrawBitLin@3:
; Line 455
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$9469[ebp], eax
; Line 456
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$9469[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$9469[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$9470[ebp], eax
; Line 457
	cmp	DWORD PTR _Index$9470[ebp], 0
	je	SHORT $LN2@DrawBitLin@3
; Line 458
	mov	eax, DWORD PTR _Index$9470[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
$LN2@DrawBitLin@3:
; Line 460
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 461
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN4@DrawBitLin@3
; Line 462
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 463
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN4@DrawBitLin@3:
; Line 465
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN5@DrawBitLin@3
$LN27@DrawBitLin@3:
; Line 469
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine4BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine8BPP
_TEXT	SEGMENT
tv66 = -208						; size = 4
_Pixel$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xSize$ = 24						; size = 4
_pTrans$ = 28						; size = 4
__DrawBitLine8BPP PROC					; COMDAT
; Line 475
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 477
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv66[ebp], eax
	je	SHORT $LN20@DrawBitLin@4
	cmp	DWORD PTR tv66[ebp], 2
	je	$LN11@DrawBitLin@4
	jmp	$LN23@DrawBitLin@4
$LN20@DrawBitLin@4:
; Line 479
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	SHORT $LN19@DrawBitLin@4
	jmp	SHORT $LN18@DrawBitLin@4
$LN17@DrawBitLin@4:
; Line 480
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN18@DrawBitLin@4:
	cmp	DWORD PTR _xSize$[ebp], 0
	jle	SHORT $LN16@DrawBitLin@4
; Line 481
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixel$[ebp], ecx
; Line 482
	mov	eax, DWORD PTR _Pixel$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 483
	jmp	SHORT $LN17@DrawBitLin@4
$LN16@DrawBitLin@4:
; Line 484
	jmp	SHORT $LN15@DrawBitLin@4
$LN19@DrawBitLin@4:
; Line 485
	jmp	SHORT $LN14@DrawBitLin@4
$LN13@DrawBitLin@4:
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN14@DrawBitLin@4:
	cmp	DWORD PTR _xSize$[ebp], 0
	jle	SHORT $LN15@DrawBitLin@4
; Line 486
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 487
	jmp	SHORT $LN13@DrawBitLin@4
$LN15@DrawBitLin@4:
; Line 489
	jmp	$LN23@DrawBitLin@4
$LN11@DrawBitLin@4:
; Line 491
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	SHORT $LN10@DrawBitLin@4
	jmp	SHORT $LN9@DrawBitLin@4
$LN8@DrawBitLin@4:
; Line 492
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN9@DrawBitLin@4:
	cmp	DWORD PTR _xSize$[ebp], 0
	jle	SHORT $LN7@DrawBitLin@4
; Line 493
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixel$[ebp], ecx
; Line 494
	cmp	DWORD PTR _Pixel$[ebp], 0
	je	SHORT $LN6@DrawBitLin@4
; Line 495
	mov	eax, DWORD PTR _Pixel$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
$LN6@DrawBitLin@4:
; Line 497
	jmp	SHORT $LN8@DrawBitLin@4
$LN7@DrawBitLin@4:
; Line 498
	jmp	SHORT $LN23@DrawBitLin@4
$LN10@DrawBitLin@4:
; Line 499
	jmp	SHORT $LN4@DrawBitLin@4
$LN3@DrawBitLin@4:
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN4@DrawBitLin@4:
	cmp	DWORD PTR _xSize$[ebp], 0
	jle	SHORT $LN23@DrawBitLin@4
; Line 500
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixel$[ebp], ecx
; Line 501
	cmp	DWORD PTR _Pixel$[ebp], 0
	je	SHORT $LN1@DrawBitLin@4
; Line 502
	mov	eax, DWORD PTR _Pixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
$LN1@DrawBitLin@4:
; Line 504
	jmp	SHORT $LN3@DrawBitLin@4
$LN23@DrawBitLin@4:
; Line 508
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine8BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine16BPP
_TEXT	SEGMENT
_pfColor2Index$ = -116					; size = 4
_pfIndex2Color$ = -104					; size = 4
_BitsPerPixel$ = -92					; size = 4
_NumPixels$ = -80					; size = 4
_pColor$ = -68						; size = 4
_pIndex$ = -56						; size = 4
_Index$ = -44						; size = 2
_ColorNew$ = -32					; size = 4
_ColorBk$ = -20						; size = 4
_Color$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xSize$ = 24						; size = 4
__DrawBitLine16BPP PROC					; COMDAT
; Line 514
	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 523
	lea	eax, DWORD PTR _pfColor2Index$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pfIndex2Color$[ebp]
	push	ecx
	call	__GetPointers
	add	esp, 8
; Line 524
	mov	eax, DWORD PTR _pfIndex2Color$[ebp]
	push	eax
	mov	ecx, DWORD PTR __pColor
	push	ecx
	mov	edx, DWORD PTR __pIndex
	push	edx
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__GetLine
	add	esp, 28					; 0000001cH
; Line 525
	mov	eax, DWORD PTR __pColor
	mov	DWORD PTR _pColor$[ebp], eax
; Line 526
	mov	eax, DWORD PTR __pIndex
	mov	DWORD PTR _pIndex$[ebp], eax
; Line 527
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR _NumPixels$[ebp], eax
$LN3@DrawBitLin@5:
; Line 529
	mov	eax, DWORD PTR _pColor$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ColorBk$[ebp], ecx
	mov	edx, DWORD PTR _pColor$[ebp]
	add	edx, 4
	mov	DWORD PTR _pColor$[ebp], edx
; Line 530
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _Index$[ebp], cx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
; Line 531
	movzx	eax, WORD PTR _Index$[ebp]
	mov	esi, esp
	push	eax
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Color$[ebp], eax
; Line 532
	mov	eax, DWORD PTR _ColorBk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Color$[ebp]
	push	ecx
	call	__MixColors
	add	esp, 8
	mov	DWORD PTR _ColorNew$[ebp], eax
; Line 533
	mov	esi, esp
	mov	eax, DWORD PTR _ColorNew$[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _pIndex$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _pIndex$[ebp]
	add	edx, 4
	mov	DWORD PTR _pIndex$[ebp], edx
; Line 534
	mov	eax, DWORD PTR _NumPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
	jne	SHORT $LN3@DrawBitLin@5
; Line 535
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	__GetBitsPerPixel
	add	esp, 4
	mov	DWORD PTR _BitsPerPixel$[ebp], eax
; Line 536
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __pIndex
	push	edx
	call	_GUI__CompactPixelIndices
	add	esp, 12					; 0000000cH
; Line 537
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __pIndex
	push	eax
	push	0
	mov	ecx, DWORD PTR _BitsPerPixel$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _xSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 538
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@DrawBitLin@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@DrawBitLin@5:
	DD	2
	DD	$LN8@DrawBitLin@5
$LN8@DrawBitLin@5:
	DD	-104					; ffffff98H
	DD	4
	DD	$LN6@DrawBitLin@5
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN7@DrawBitLin@5
$LN7@DrawBitLin@5:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	50					; 00000032H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN6@DrawBitLin@5:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	50					; 00000032H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
__DrawBitLine16BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine32BPP
_TEXT	SEGMENT
_pfColor2Index$ = -116					; size = 4
_pfIndex2Color$ = -104					; size = 4
_BitsPerPixel$ = -92					; size = 4
_NumPixels$ = -80					; size = 4
_pColor$ = -68						; size = 4
_pIndex$ = -56						; size = 4
_Index$ = -44						; size = 4
_ColorNew$ = -32					; size = 4
_ColorBk$ = -20						; size = 4
_Color$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xSize$ = 24						; size = 4
__DrawBitLine32BPP PROC					; COMDAT
; Line 544
	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 553
	lea	eax, DWORD PTR _pfColor2Index$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pfIndex2Color$[ebp]
	push	ecx
	call	__GetPointers
	add	esp, 8
; Line 554
	mov	eax, DWORD PTR _pfIndex2Color$[ebp]
	push	eax
	mov	ecx, DWORD PTR __pColor
	push	ecx
	mov	edx, DWORD PTR __pIndex
	push	edx
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__GetLine
	add	esp, 28					; 0000001cH
; Line 555
	mov	eax, DWORD PTR __pColor
	mov	DWORD PTR _pColor$[ebp], eax
; Line 556
	mov	eax, DWORD PTR __pIndex
	mov	DWORD PTR _pIndex$[ebp], eax
; Line 557
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR _NumPixels$[ebp], eax
$LN3@DrawBitLin@6:
; Line 559
	mov	eax, DWORD PTR _pColor$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ColorBk$[ebp], ecx
	mov	edx, DWORD PTR _pColor$[ebp]
	add	edx, 4
	mov	DWORD PTR _pColor$[ebp], edx
; Line 560
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Index$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 561
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Color$[ebp], eax
; Line 562
	mov	eax, DWORD PTR _ColorBk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Color$[ebp]
	push	ecx
	call	__MixColors
	add	esp, 8
	mov	DWORD PTR _ColorNew$[ebp], eax
; Line 563
	mov	esi, esp
	mov	eax, DWORD PTR _ColorNew$[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _pIndex$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _pIndex$[ebp]
	add	edx, 4
	mov	DWORD PTR _pIndex$[ebp], edx
; Line 564
	mov	eax, DWORD PTR _NumPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
	jne	SHORT $LN3@DrawBitLin@6
; Line 565
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	__GetBitsPerPixel
	add	esp, 4
	mov	DWORD PTR _BitsPerPixel$[ebp], eax
; Line 566
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __pIndex
	push	edx
	call	_GUI__CompactPixelIndices
	add	esp, 12					; 0000000cH
; Line 567
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __pIndex
	push	eax
	push	0
	mov	ecx, DWORD PTR _BitsPerPixel$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _xSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 568
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@DrawBitLin@6
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@DrawBitLin@6:
	DD	2
	DD	$LN8@DrawBitLin@6
$LN8@DrawBitLin@6:
	DD	-104					; ffffff98H
	DD	4
	DD	$LN6@DrawBitLin@6
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN7@DrawBitLin@6
$LN7@DrawBitLin@6:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	50					; 00000032H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN6@DrawBitLin@6:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	50					; 00000032H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
__DrawBitLine32BPP ENDP
_TEXT	ENDS
EXTRN	_LCD_Index2Color:PROC
EXTRN	_LCD_pColorIndex:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawHLine
_TEXT	SEGMENT
_ColorNew$ = -80					; size = 4
_Color$ = -68						; size = 4
_pfColor2Index$ = -56					; size = 4
_pfIndex2Color$ = -44					; size = 4
_BitsPerPixel$ = -32					; size = 4
_NumPixels$ = -20					; size = 4
_i$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y$ = 16						; size = 4
_x1$ = 20						; size = 4
__DrawHLine PROC					; COMDAT
; Line 610
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 619
	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _x0$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
; Line 620
	lea	eax, DWORD PTR _pfColor2Index$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pfIndex2Color$[ebp]
	push	ecx
	call	__GetPointers
	add	esp, 8
; Line 621
	mov	eax, DWORD PTR _pfIndex2Color$[ebp]
	push	eax
	mov	ecx, DWORD PTR __pColor
	push	ecx
	mov	edx, DWORD PTR __pIndex
	push	edx
	mov	eax, DWORD PTR _NumPixels$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__GetLine
	add	esp, 28					; 0000001cH
; Line 625
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_LCD_Index2Color
	add	esp, 4
	mov	DWORD PTR _Color$[ebp], eax
; Line 626
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@DrawHLine
$LN2@DrawHLine:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@DrawHLine:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _NumPixels$[ebp]
	jge	SHORT $LN1@DrawHLine
; Line 627
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR __pColor
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	call	__MixColors
	add	esp, 8
	mov	DWORD PTR _ColorNew$[ebp], eax
; Line 628
	mov	esi, esp
	mov	eax, DWORD PTR _ColorNew$[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR __pIndex
	mov	DWORD PTR [edx+ecx*4], eax
; Line 629
	jmp	SHORT $LN2@DrawHLine
$LN1@DrawHLine:
; Line 633
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	__GetBitsPerPixel
	add	esp, 4
	mov	DWORD PTR _BitsPerPixel$[ebp], eax
; Line 634
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NumPixels$[ebp]
	push	ecx
	mov	edx, DWORD PTR __pIndex
	push	edx
	call	_GUI__CompactPixelIndices
	add	esp, 12					; 0000000cH
; Line 635
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __pIndex
	push	eax
	push	0
	mov	ecx, DWORD PTR _BitsPerPixel$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _NumPixels$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 636
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@DrawHLine
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@DrawHLine:
	DD	2
	DD	$LN8@DrawHLine
$LN8@DrawHLine:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN6@DrawHLine
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN7@DrawHLine
$LN7@DrawHLine:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	50					; 00000032H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN6@DrawHLine:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	50					; 00000032H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
__DrawHLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawVLine
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y0$ = 16						; size = 4
_y1$ = 20						; size = 4
__DrawVLine PROC					; COMDAT
; Line 642
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 643
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 1
	je	SHORT $LN8@DrawVLine
	jmp	SHORT $LN7@DrawVLine
$LN6@DrawVLine:
; Line 644
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
$LN7@DrawVLine:
	mov	eax, DWORD PTR _y0$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jg	SHORT $LN5@DrawVLine
; Line 645
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__XorPixel
	add	esp, 12					; 0000000cH
; Line 646
	jmp	SHORT $LN6@DrawVLine
$LN5@DrawVLine:
; Line 647
	jmp	SHORT $LN9@DrawVLine
$LN8@DrawVLine:
; Line 648
	jmp	SHORT $LN3@DrawVLine
$LN2@DrawVLine:
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
$LN3@DrawVLine:
	mov	eax, DWORD PTR _y0$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jg	SHORT $LN9@DrawVLine
; Line 649
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 650
	jmp	SHORT $LN2@DrawVLine
$LN9@DrawVLine:
; Line 652
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawVLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __FillRect
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
__FillRect PROC						; COMDAT
; Line 658
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 659
	jmp	SHORT $LN3@FillRect
$LN2@FillRect:
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
$LN3@FillRect:
	mov	eax, DWORD PTR _y0$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jg	SHORT $LN4@FillRect
; Line 660
	mov	eax, DWORD PTR _x1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawHLine
	add	esp, 16					; 00000010H
; Line 661
	jmp	SHORT $LN2@FillRect
$LN4@FillRect:
; Line 662
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FillRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevData
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevData PROC					; COMDAT
; Line 668
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 669
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 670
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR _Index$[ebp], eax
; Line 671
	xor	eax, eax
; Line 672
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevData ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetOrg
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__SetOrg PROC						; COMDAT
; Line 678
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 679
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 680
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 681
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetOrg ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevFunc
_TEXT	SEGMENT
_ppDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevFunc PROC					; COMDAT
; Line 682
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 683
	mov	eax, DWORD PTR _ppDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ppDevice$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
; Line 684
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppDevice$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 685
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevFunc ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevProp
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevProp PROC					; COMDAT
; Line 686
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 687
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 688
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+40]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 689
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevProp ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetRect
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_pRect$ = 12						; size = 4
__GetRect PROC						; COMDAT
; Line 690
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 691
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 692
	mov	esi, esp
	mov	eax, DWORD PTR _pRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+48]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 693
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetRect ENDP
_TEXT	ENDS
PUBLIC	_GUI__AlphaSuppressMixing
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI__AlphaSuppressMixing
_TEXT	SEGMENT
_r$ = -8						; size = 4
_OnOff$ = 8						; size = 4
_GUI__AlphaSuppressMixing PROC				; COMDAT
; Line 799
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 802
	mov	eax, DWORD PTR __SuppressMixing
	mov	DWORD PTR _r$[ebp], eax
; Line 803
	cmp	DWORD PTR _OnOff$[ebp], 0
	je	SHORT $LN2@GUI__Alpha
; Line 804
	mov	DWORD PTR __SuppressMixing, 1
; Line 805
	jmp	SHORT $LN1@GUI__Alpha
$LN2@GUI__Alpha:
; Line 806
	mov	DWORD PTR __SuppressMixing, 0
$LN1@GUI__Alpha:
; Line 808
	mov	eax, DWORD PTR _r$[ebp]
; Line 809
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI__AlphaSuppressMixing ENDP
_TEXT	ENDS
PUBLIC	_GUI_SetAlpha
EXTRN	_GUI_DEVICE_Link:PROC
EXTRN	_GUI_DEVICE_Unlink:PROC
EXTRN	_GUI_DEVICE__GetpDevice:PROC
_BSS	SEGMENT
__apDevice DD	01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT _GUI_SetAlpha
_TEXT	SEGMENT
_LayerIndex$ = -32					; size = 4
_OldAlpha$ = -20					; size = 4
_pDevice$ = -8						; size = 4
_Alpha$ = 8						; size = 1
_GUI_SetAlpha PROC					; COMDAT
; Line 822
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 826
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	ecx, DWORD PTR _GUI_Context[eax*4+72]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _LayerIndex$[ebp], edx
; Line 827
	mov	eax, DWORD PTR _LayerIndex$[ebp]
	movzx	ecx, BYTE PTR __aAlpha[eax]
	mov	DWORD PTR _OldAlpha$[ebp], ecx
; Line 828
	movzx	eax, BYTE PTR _Alpha$[ebp]
	test	eax, eax
	jne	SHORT $LN6@GUI_SetAlp
; Line 829
	push	5
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_GUI_DEVICE__GetpDevice
	add	esp, 8
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 830
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN5@GUI_SetAlp
; Line 834
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	_GUI_DEVICE_Unlink
	add	esp, 4
; Line 838
	mov	eax, DWORD PTR _LayerIndex$[ebp]
	mov	cl, BYTE PTR _Alpha$[ebp]
	mov	BYTE PTR __aAlpha[eax], cl
$LN5@GUI_SetAlp:
; Line 840
	jmp	SHORT $LN4@GUI_SetAlp
$LN6@GUI_SetAlp:
; Line 841
	call	__InitAlpha
	test	eax, eax
	jne	SHORT $LN4@GUI_SetAlp
; Line 845
	push	5
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_GUI_DEVICE__GetpDevice
	add	esp, 8
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 846
	cmp	DWORD PTR _pDevice$[ebp], 0
	jne	SHORT $LN2@GUI_SetAlp
; Line 850
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	ecx, DWORD PTR __apDevice[eax*4]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 851
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN2@GUI_SetAlp
; Line 855
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	_GUI_DEVICE_Link
	add	esp, 4
$LN2@GUI_SetAlp:
; Line 861
	mov	eax, DWORD PTR _LayerIndex$[ebp]
	mov	cl, BYTE PTR _Alpha$[ebp]
	mov	BYTE PTR __aAlpha[eax], cl
$LN4@GUI_SetAlp:
; Line 864
	mov	eax, DWORD PTR _OldAlpha$[ebp]
; Line 865
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_SetAlpha ENDP
_TEXT	ENDS
EXTRN	_GUI_DEVICE_Delete:PROC
EXTRN	_GUI_DEVICE_Create:PROC
EXTRN	_GUI_ALLOC_FreeFixedBlock:PROC
EXTRN	_GUI_ALLOC_GetFixedBlock:PROC
EXTRN	_LCD_GetVXSizeMax:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __InitAlpha
_TEXT	SEGMENT
_j$ = -32						; size = 4
_i$ = -20						; size = 4
_xSize$ = -8						; size = 4
__InitAlpha PROC					; COMDAT
; Line 734
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 736
	cmp	DWORD PTR __pIndex, 0
	jne	$LN13@InitAlpha
; Line 740
	call	_LCD_GetVXSizeMax
	mov	DWORD PTR _xSize$[ebp], eax
; Line 744
	mov	eax, DWORD PTR _xSize$[ebp]
	shl	eax, 2
	push	eax
	call	_GUI_ALLOC_GetFixedBlock
	add	esp, 4
	mov	DWORD PTR __pIndex, eax
; Line 745
	cmp	DWORD PTR __pIndex, 0
	jne	SHORT $LN12@InitAlpha
; Line 746
	mov	eax, 1
	jmp	$LN14@InitAlpha
$LN12@InitAlpha:
; Line 748
	cmp	DWORD PTR __pColor, 0
	jne	$LN13@InitAlpha
; Line 752
	mov	eax, DWORD PTR _xSize$[ebp]
	shl	eax, 2
	push	eax
	call	_GUI_ALLOC_GetFixedBlock
	add	esp, 4
	mov	DWORD PTR __pColor, eax
; Line 753
	cmp	DWORD PTR __pColor, 0
	jne	SHORT $LN10@InitAlpha
; Line 757
	mov	eax, DWORD PTR __pIndex
	push	eax
	call	_GUI_ALLOC_FreeFixedBlock
	add	esp, 4
; Line 758
	mov	eax, 1
	jmp	$LN14@InitAlpha
$LN10@InitAlpha:
; Line 765
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@InitAlpha
$LN8@InitAlpha:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@InitAlpha:
	cmp	DWORD PTR _i$[ebp], 1
	jge	$LN13@InitAlpha
; Line 766
	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR __apDevice[eax*4], 0
	jne	$LN6@InitAlpha
; Line 767
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	0
	push	0
	push	OFFSET __Alpha_API
	call	_GUI_DEVICE_Create
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR __apDevice[ecx*4], eax
; Line 768
	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR __apDevice[eax*4], 0
	jne	SHORT $LN6@InitAlpha
; Line 772
	mov	eax, DWORD PTR __pIndex
	push	eax
	call	_GUI_ALLOC_FreeFixedBlock
	add	esp, 4
; Line 773
	mov	eax, DWORD PTR __pColor
	push	eax
	call	_GUI_ALLOC_FreeFixedBlock
	add	esp, 4
; Line 774
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@InitAlpha
$LN3@InitAlpha:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@InitAlpha:
	cmp	DWORD PTR _j$[ebp], 1
	jge	SHORT $LN2@InitAlpha
; Line 775
	mov	eax, DWORD PTR _j$[ebp]
	cmp	DWORD PTR __apDevice[eax*4], 0
	je	SHORT $LN1@InitAlpha
; Line 776
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR __apDevice[eax*4]
	push	ecx
	call	_GUI_DEVICE_Delete
	add	esp, 4
$LN1@InitAlpha:
; Line 778
	jmp	SHORT $LN3@InitAlpha
$LN2@InitAlpha:
; Line 779
	mov	eax, 1
	jmp	SHORT $LN14@InitAlpha
$LN6@InitAlpha:
; Line 782
	jmp	$LN8@InitAlpha
$LN13@InitAlpha:
; Line 785
	xor	eax, eax
$LN14@InitAlpha:
; Line 786
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__InitAlpha ENDP
_TEXT	ENDS
END
