; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI__Wrap.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI__Wrap_pfGetWordWrap
PUBLIC	_GUI__Wrap_pfGetCharWrap
_DATA	SEGMENT
_GUI__Wrap_pfGetWordWrap DD FLAT:__GetWordWrap
_GUI__Wrap_pfGetCharWrap DD FLAT:__GetCharWrap
_DATA	ENDS
EXTRN	_GUI_GetCharDistX:PROC
EXTRN	_GUI_UC__GetCharCodeInc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui__wrap.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __GetWordWrap
_TEXT	SEGMENT
_FirstChar$ = -80					; size = 2
_PrevChar$ = -68					; size = 2
_Char$ = -56						; size = 2
_CharDist$ = -44					; size = 4
_WordWrap$ = -32					; size = 4
_NumChars$ = -20					; size = 4
_xDist$ = -8						; size = 4
_s$ = 8							; size = 4
_xSize$ = 12						; size = 4
_pxDist$ = 16						; size = 4
__GetWordWrap PROC					; COMDAT
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 65
	mov	DWORD PTR _xDist$[ebp], 0
	mov	DWORD PTR _NumChars$[ebp], 0
	mov	DWORD PTR _WordWrap$[ebp], 0
	mov	DWORD PTR _CharDist$[ebp], 0
; Line 66
	xor	eax, eax
	mov	WORD PTR _PrevChar$[ebp], ax
	xor	eax, eax
	mov	WORD PTR _FirstChar$[ebp], ax
$LN14@GetWordWra:
; Line 67
	mov	eax, 1
	test	eax, eax
	je	$LN13@GetWordWra
; Line 68
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_GUI_UC__GetCharCodeInc
	add	esp, 4
	mov	WORD PTR _Char$[ebp], ax
; Line 69
	movzx	eax, WORD PTR _FirstChar$[ebp]
	test	eax, eax
	jne	SHORT $LN12@GetWordWra
; Line 70
	mov	ax, WORD PTR _Char$[ebp]
	mov	WORD PTR _FirstChar$[ebp], ax
$LN12@GetWordWra:
; Line 73
	movzx	eax, WORD PTR _Char$[ebp]
	push	eax
	call	__IsLineEnd
	add	esp, 4
	test	eax, eax
	je	SHORT $LN11@GetWordWra
; Line 74
	mov	eax, DWORD PTR _NumChars$[ebp]
	mov	DWORD PTR _WordWrap$[ebp], eax
; Line 75
	jmp	$LN13@GetWordWra
$LN11@GetWordWra:
; Line 78
	movzx	eax, WORD PTR _Char$[ebp]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN10@GetWordWra
	movzx	eax, WORD PTR _FirstChar$[ebp]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN10@GetWordWra
; Line 79
	xor	eax, eax
	mov	WORD PTR _FirstChar$[ebp], ax
; Line 80
	mov	eax, DWORD PTR _NumChars$[ebp]
	mov	DWORD PTR _WordWrap$[ebp], eax
	jmp	SHORT $LN9@GetWordWra
$LN10@GetWordWra:
; Line 82
	movzx	eax, WORD PTR _Char$[ebp]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN8@GetWordWra
	movzx	eax, WORD PTR _Char$[ebp]
	movzx	ecx, WORD PTR _PrevChar$[ebp]
	cmp	eax, ecx
	je	SHORT $LN8@GetWordWra
; Line 83
	mov	eax, DWORD PTR _NumChars$[ebp]
	mov	DWORD PTR _WordWrap$[ebp], eax
	jmp	SHORT $LN9@GetWordWra
$LN8@GetWordWra:
; Line 85
	movzx	eax, WORD PTR _Char$[ebp]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN9@GetWordWra
	movzx	eax, WORD PTR _PrevChar$[ebp]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN9@GetWordWra
; Line 86
	mov	eax, DWORD PTR _NumChars$[ebp]
	mov	DWORD PTR _WordWrap$[ebp], eax
$LN9@GetWordWra:
; Line 88
	mov	ax, WORD PTR _Char$[ebp]
	mov	WORD PTR _PrevChar$[ebp], ax
; Line 89
	movzx	eax, WORD PTR _Char$[ebp]
	push	eax
	call	_GUI_GetCharDistX
	add	esp, 4
	mov	DWORD PTR _CharDist$[ebp], eax
; Line 90
	mov	eax, DWORD PTR _xDist$[ebp]
	add	eax, DWORD PTR _CharDist$[ebp]
	mov	DWORD PTR _xDist$[ebp], eax
; Line 91
	mov	eax, DWORD PTR _xDist$[ebp]
	cmp	eax, DWORD PTR _xSize$[ebp]
	jle	SHORT $LN4@GetWordWra
	cmp	DWORD PTR _NumChars$[ebp], 0
	jne	SHORT $LN5@GetWordWra
$LN4@GetWordWra:
; Line 92
	mov	eax, DWORD PTR _NumChars$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumChars$[ebp], eax
; Line 93
	jmp	SHORT $LN3@GetWordWra
$LN5@GetWordWra:
; Line 94
	jmp	SHORT $LN13@GetWordWra
$LN3@GetWordWra:
; Line 96
	jmp	$LN14@GetWordWra
$LN13@GetWordWra:
; Line 97
	cmp	DWORD PTR _WordWrap$[ebp], 0
	jne	SHORT $LN2@GetWordWra
; Line 98
	mov	eax, DWORD PTR _NumChars$[ebp]
	mov	DWORD PTR _WordWrap$[ebp], eax
$LN2@GetWordWra:
; Line 100
	cmp	DWORD PTR _pxDist$[ebp], 0
	je	SHORT $LN1@GetWordWra
; Line 101
	mov	eax, DWORD PTR _xDist$[ebp]
	sub	eax, DWORD PTR _CharDist$[ebp]
	mov	DWORD PTR _xDist$[ebp], eax
; Line 102
	mov	eax, DWORD PTR _pxDist$[ebp]
	mov	ecx, DWORD PTR _xDist$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@GetWordWra:
; Line 104
	mov	eax, DWORD PTR _WordWrap$[ebp]
; Line 105
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetWordWrap ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __IsLineEnd
_TEXT	SEGMENT
_Char$ = 8						; size = 2
__IsLineEnd PROC					; COMDAT
; Line 45
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 46
	movzx	eax, WORD PTR _Char$[ebp]
	test	eax, eax
	je	SHORT $LN1@IsLineEnd
	movzx	eax, WORD PTR _Char$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN2@IsLineEnd
$LN1@IsLineEnd:
; Line 47
	mov	eax, 1
	jmp	SHORT $LN3@IsLineEnd
$LN2@IsLineEnd:
; Line 49
	xor	eax, eax
$LN3@IsLineEnd:
; Line 50
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__IsLineEnd ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetCharWrap
_TEXT	SEGMENT
_Char$ = -32						; size = 2
_NumChars$ = -20					; size = 4
_xDist$ = -8						; size = 4
_s$ = 8							; size = 4
_xSize$ = 12						; size = 4
__GetCharWrap PROC					; COMDAT
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 112
	mov	DWORD PTR _xDist$[ebp], 0
	mov	DWORD PTR _NumChars$[ebp], 0
$LN5@GetCharWra:
; Line 114
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_GUI_UC__GetCharCodeInc
	add	esp, 4
	mov	WORD PTR _Char$[ebp], ax
	movzx	ecx, WORD PTR _Char$[ebp]
	test	ecx, ecx
	je	SHORT $LN4@GetCharWra
; Line 115
	movzx	eax, WORD PTR _Char$[ebp]
	push	eax
	call	_GUI_GetCharDistX
	add	esp, 4
	add	eax, DWORD PTR _xDist$[ebp]
	mov	DWORD PTR _xDist$[ebp], eax
; Line 116
	cmp	DWORD PTR _NumChars$[ebp], 0
	je	SHORT $LN1@GetCharWra
	mov	eax, DWORD PTR _xDist$[ebp]
	cmp	eax, DWORD PTR _xSize$[ebp]
	jg	SHORT $LN2@GetCharWra
$LN1@GetCharWra:
	movzx	eax, WORD PTR _Char$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN3@GetCharWra
$LN2@GetCharWra:
; Line 117
	jmp	SHORT $LN4@GetCharWra
$LN3@GetCharWra:
; Line 119
	mov	eax, DWORD PTR _NumChars$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumChars$[ebp], eax
; Line 120
	jmp	SHORT $LN5@GetCharWra
$LN4@GetCharWra:
; Line 121
	mov	eax, DWORD PTR _NumChars$[ebp]
; Line 122
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetCharWrap ENDP
_TEXT	ENDS
PUBLIC	_GUI__WrapGetNumCharsDisp
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI__WrapGetNumCharsDisp
_TEXT	SEGMENT
_pText$ = 8						; size = 4
_xSize$ = 12						; size = 4
_WrapMode$ = 16						; size = 4
_GUI__WrapGetNumCharsDisp PROC				; COMDAT
; Line 182
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 183
	push	0
	mov	eax, DWORD PTR _WrapMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pText$[ebp]
	push	edx
	call	__WrapGetNumCharsDisp
	add	esp, 16					; 00000010H
; Line 184
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI__WrapGetNumCharsDisp ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __WrapGetNumCharsDisp
_TEXT	SEGMENT
tv64 = -208						; size = 4
_r$ = -8						; size = 4
_pText$ = 8						; size = 4
_xSize$ = 12						; size = 4
_WrapMode$ = 16						; size = 4
_pxDist$ = 20						; size = 4
__WrapGetNumCharsDisp PROC				; COMDAT
; Line 152
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 154
	mov	eax, DWORD PTR _WrapMode$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN3@WrapGetNum
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN2@WrapGetNum
	jmp	SHORT $LN1@WrapGetNum
$LN3@WrapGetNum:
; Line 156
	mov	esi, esp
	mov	eax, DWORD PTR _pxDist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pText$[ebp]
	push	edx
	call	DWORD PTR _GUI__Wrap_pfGetWordWrap
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r$[ebp], eax
; Line 157
	jmp	SHORT $LN4@WrapGetNum
$LN2@WrapGetNum:
; Line 159
	mov	esi, esp
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	DWORD PTR _GUI__Wrap_pfGetCharWrap
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r$[ebp], eax
; Line 160
	jmp	SHORT $LN4@WrapGetNum
$LN1@WrapGetNum:
; Line 162
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	call	__GetNoWrap
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax
$LN4@WrapGetNum:
; Line 164
	mov	eax, DWORD PTR _r$[ebp]
; Line 165
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__WrapGetNumCharsDisp ENDP
_TEXT	ENDS
EXTRN	_GUI__GetLineNumChars:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetNoWrap
_TEXT	SEGMENT
_s$ = 8							; size = 4
__GetNoWrap PROC					; COMDAT
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 57
	push	32767					; 00007fffH
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_GUI__GetLineNumChars
	add	esp, 8
; Line 58
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetNoWrap ENDP
_TEXT	ENDS
PUBLIC	_GUI__WrapGetNumCharsToNextLine
EXTRN	_GUI_UC__NumChars2NumBytes:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI__WrapGetNumCharsToNextLine
_TEXT	SEGMENT
_xDistChar$8439 = -44					; size = 4
_Char$ = -32						; size = 2
_xDist$ = -20						; size = 4
_NumChars$ = -8						; size = 4
_pText$ = 8						; size = 4
_xSize$ = 12						; size = 4
_WrapMode$ = 16						; size = 4
_GUI__WrapGetNumCharsToNextLine PROC			; COMDAT
; Line 190
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 194
	lea	eax, DWORD PTR _xDist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _WrapMode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	call	__WrapGetNumCharsDisp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _NumChars$[ebp], eax
; Line 195
	mov	eax, DWORD PTR _NumChars$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	add	eax, DWORD PTR _pText$[ebp]
	mov	DWORD PTR _pText$[ebp], eax
; Line 196
	lea	eax, DWORD PTR _pText$[ebp]
	push	eax
	call	_GUI_UC__GetCharCodeInc
	add	esp, 4
	mov	WORD PTR _Char$[ebp], ax
; Line 197
	movzx	eax, WORD PTR _Char$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN5@GUI__WrapG
; Line 198
	mov	eax, DWORD PTR _NumChars$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumChars$[ebp], eax
; Line 199
	jmp	SHORT $LN4@GUI__WrapG
$LN5@GUI__WrapG:
; Line 200
	cmp	DWORD PTR _WrapMode$[ebp], 1
	jne	SHORT $LN4@GUI__WrapG
	movzx	eax, WORD PTR _Char$[ebp]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN4@GUI__WrapG
; Line 201
	movzx	eax, WORD PTR _Char$[ebp]
	push	eax
	call	_GUI_GetCharDistX
	add	esp, 4
	mov	DWORD PTR _xDistChar$8439[ebp], eax
$LN2@GUI__WrapG:
; Line 202
	movzx	eax, WORD PTR _Char$[ebp]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN4@GUI__WrapG
	mov	eax, DWORD PTR _xSize$[ebp]
	cmp	eax, DWORD PTR _xDist$[ebp]
	jl	SHORT $LN4@GUI__WrapG
; Line 203
	mov	eax, DWORD PTR _NumChars$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumChars$[ebp], eax
; Line 204
	mov	eax, DWORD PTR _xDist$[ebp]
	add	eax, DWORD PTR _xDistChar$8439[ebp]
	mov	DWORD PTR _xDist$[ebp], eax
; Line 205
	lea	eax, DWORD PTR _pText$[ebp]
	push	eax
	call	_GUI_UC__GetCharCodeInc
	add	esp, 4
	mov	WORD PTR _Char$[ebp], ax
; Line 206
	jmp	SHORT $LN2@GUI__WrapG
$LN4@GUI__WrapG:
; Line 209
	mov	eax, DWORD PTR _NumChars$[ebp]
; Line 210
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@GUI__WrapG
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@GUI__WrapG:
	DD	1
	DD	$LN9@GUI__WrapG
$LN9@GUI__WrapG:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@GUI__WrapG
$LN8@GUI__WrapG:
	DB	120					; 00000078H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_GUI__WrapGetNumCharsToNextLine ENDP
_TEXT	ENDS
PUBLIC	_GUI__WrapGetNumBytesToNextLine
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI__WrapGetNumBytesToNextLine
_TEXT	SEGMENT
_NumBytes$ = -20					; size = 4
_NumChars$ = -8						; size = 4
_pText$ = 8						; size = 4
_xSize$ = 12						; size = 4
_WrapMode$ = 16						; size = 4
_GUI__WrapGetNumBytesToNextLine PROC			; COMDAT
; Line 216
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 218
	mov	eax, DWORD PTR _WrapMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pText$[ebp]
	push	edx
	call	_GUI__WrapGetNumCharsToNextLine
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _NumChars$[ebp], eax
; Line 219
	mov	eax, DWORD PTR _NumChars$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	mov	DWORD PTR _NumBytes$[ebp], eax
; Line 220
	mov	eax, DWORD PTR _NumBytes$[ebp]
; Line 221
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI__WrapGetNumBytesToNextLine ENDP
_TEXT	ENDS
END
