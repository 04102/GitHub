; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\DUII\DigitalGaugeScreen.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
_pPredictiveLap DD 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
_LapNumRect DW	05H
	DW	0aH
	DW	050H
	DW	02aH
_ElapsedTimeRect DW 055H
	DW	0aH
	DW	0127H
	DW	02aH
_configurableItemRect DW 0136H
	DW	0aH
	DW	01d6H
	DW	05fH
_LapTimeRect DW	023H
	DW	06eH
	DW	0190H
	DW	0c8H
_DataElementRect DW 0136H
	DW	0aH
	DW	01d6H
	DW	02aH
_NameRect DW	0136H
	DW	02fH
	DW	01d6H
	DW	047H
_UnitsRect DW	0136H
	DW	047H
	DW	01d6H
	DW	05fH
_config	DD	FLAT:_pData
	DD	FLAT:_pName
	DD	FLAT:_pUnits
$SG16845 DB	'%d', 00H
	ORG $+1
$SG16848 DB	'Lap', 00H
$SG16849 DB	'elapsed', 00H
CONST	ENDS
PUBLIC	??_GPredictiveLapTimer@@QAEPAXI@Z		; PredictiveLapTimer::`scalar deleting destructor'
PUBLIC	?DGDrawConfigRect@@YAXXZ			; DGDrawConfigRect
PUBLIC	__$ArrayPad$
PUBLIC	__cbDigitalGaugeCallback
EXTRN	_WM_DefaultProc:PROC
EXTRN	_GUI_MEMDEV_Delete:PROC
EXTRN	_DrawSignalStrength:PROC
EXTRN	_SlideOutVisible:PROC
EXTRN	_GUI_SelectLCD:PROC
EXTRN	_GUI_MEMDEV_CopyToLCD:PROC
EXTRN	_CheckWarningPopups:PROC
EXTRN	_bmthreewayarrow:BYTE
EXTRN	?UpdatePredictiveLapControl@@YAXPAVPredictiveLapTimer@@M@Z:PROC ; UpdatePredictiveLapControl
EXTRN	_formatLapTime:PROC
EXTRN	_GUI_FontD80:BYTE
EXTRN	_bmBestLapEver:BYTE
EXTRN	_bmBestLapSession:BYTE
EXTRN	_DataValues:BYTE
EXTRN	_GUI_DispStringHCenterAt:PROC
EXTRN	_GUI_DispStringAt:PROC
EXTRN	_GUI_Font24B_ASCII:BYTE
EXTRN	_DisplayConfigurableItem:PROC
EXTRN	_formatElapsedTime:PROC
EXTRN	_GUI_FillRect:PROC
EXTRN	_GUI_DispStringInRect:PROC
EXTRN	_sprintf:PROC
EXTRN	_GetValue:PROC
EXTRN	_GUI_SetFont:PROC
EXTRN	_GUI_FontD32:BYTE
EXTRN	_GUI_SetColor:PROC
EXTRN	_GUI_SetTextMode:PROC
EXTRN	_GUI_DrawBitmap:PROC
EXTRN	_bmDarkAsphalt:BYTE
EXTRN	_GUI_MEMDEV_Select:PROC
EXTRN	_lockupSemaphore:BYTE
EXTRN	_CS_IsVisible:PROC
EXTRN	_configureGaugeMode:BYTE
EXTRN	_boxStartTime:DWORD
EXTRN	_GUI_GetTime:PROC
EXTRN	_drawFlag:BYTE
EXTRN	_WM_InvalidateWindow:PROC
EXTRN	_WM_RestartTimer:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
_mem	DD	01H DUP (?)
_firsttimethrough DB 01H DUP (?)
	ALIGN	4

_hDigitalGaugeScreen DD 01H DUP (?)
_hScreenTimer DD 01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\duii\duii\digitalgaugescreen.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __cbDigitalGaugeCallback
_TEXT	SEGMENT
tv197 = -316						; size = 4
tv159 = -316						; size = 4
tv64 = -316						; size = 4
$T16907 = -308						; size = 8
$T16908 = -292						; size = 8
$T16909 = -276						; size = 8
$T16910 = -260						; size = 8
$T16911 = -244						; size = 4
$T16912 = -232						; size = 4
_scratch$16841 = -28					; size = 20
__$ArrayPad$ = -4					; size = 4
_pMsg$ = 8						; size = 4
__cbDigitalGaugeCallback PROC				; COMDAT
; Line 96
	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 97
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 11			; 0000000bH
	je	$LN4@cbDigitalG
	cmp	DWORD PTR tv64[ebp], 15			; 0000000fH
	je	SHORT $LN17@cbDigitalG
	cmp	DWORD PTR tv64[ebp], 275		; 00000113H
	je	SHORT $LN21@cbDigitalG
	jmp	$LN1@cbDigitalG
$LN21@cbDigitalG:
; Line 100
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _hScreenTimer
	jne	SHORT $LN18@cbDigitalG
; Line 102
	push	25					; 00000019H
	mov	eax, DWORD PTR _hScreenTimer
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
; Line 103
	mov	eax, DWORD PTR _hDigitalGaugeScreen
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 106
	movzx	eax, BYTE PTR _drawFlag
	test	eax, eax
	je	SHORT $LN18@cbDigitalG
; Line 108
	call	_GUI_GetTime
	sub	eax, DWORD PTR _boxStartTime
	cmp	eax, 5000				; 00001388H
	jle	SHORT $LN18@cbDigitalG
; Line 110
	mov	BYTE PTR _configureGaugeMode, 0
; Line 111
	mov	BYTE PTR _drawFlag, 0
$LN18@cbDigitalG:
; Line 115
	jmp	$LN22@cbDigitalG
$LN17@cbDigitalG:
; Line 118
	push	7
	call	_CS_IsVisible
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN15@cbDigitalG
	movzx	eax, BYTE PTR _firsttimethrough
	test	eax, eax
	je	$LN16@cbDigitalG
$LN15@cbDigitalG:
; Line 124
	movzx	eax, BYTE PTR _lockupSemaphore
	test	eax, eax
	je	SHORT $LN14@cbDigitalG
; Line 125
	jmp	$LN22@cbDigitalG
	jmp	SHORT $LN13@cbDigitalG
$LN14@cbDigitalG:
; Line 126
	mov	BYTE PTR _lockupSemaphore, 1
$LN13@cbDigitalG:
; Line 128
	mov	BYTE PTR _firsttimethrough, 0
; Line 130
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_Select
	add	esp, 4
; Line 133
	push	0
	push	0
	push	OFFSET _bmDarkAsphalt
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 136
	push	2
	call	_GUI_SetTextMode
	add	esp, 4
; Line 139
	push	16776960				; 00ffff00H
	call	_GUI_SetColor
	add	esp, 4
; Line 140
	push	OFFSET _GUI_FontD32
	call	_GUI_SetFont
	add	esp, 4
; Line 141
	push	36					; 00000024H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T16907[ebp], eax
	mov	DWORD PTR $T16907[ebp+4], edx
	mov	eax, DWORD PTR $T16907[ebp]
	push	eax
	push	OFFSET $SG16845
	lea	ecx, DWORD PTR _scratch$16841[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 142
	push	0
	push	OFFSET _LapNumRect
	lea	eax, DWORD PTR _scratch$16841[ebp]
	push	eax
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 145
	push	3
	push	150					; 00000096H
	push	0
	push	0
	call	_GUI_FillRect
	add	esp, 16					; 00000010H
; Line 148
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 149
	push	1
	push	OFFSET _ElapsedTimeRect
	call	_formatElapsedTime
	push	eax
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 152
	push	33023					; 000080ffH
	call	_GUI_SetColor
	add	esp, 4
; Line 153
	push	3
	push	480					; 000001e0H
	push	0
	push	330					; 0000014aH
	call	_GUI_FillRect
	add	esp, 16					; 00000010H
; Line 156
	push	OFFSET _config
	call	_DisplayConfigurableItem
	add	esp, 4
; Line 159
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 160
	push	OFFSET _GUI_Font24B_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 161
	push	45					; 0000002dH
	push	5
	push	OFFSET $SG16848
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 163
	push	65535					; 0000ffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 164
	push	45					; 0000002dH
	push	240					; 000000f0H
	push	OFFSET $SG16849
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 167
	push	78					; 0000004eH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T16908[ebp], eax
	mov	DWORD PTR $T16908[ebp+4], edx
	cmp	DWORD PTR $T16908[ebp], 0
	je	SHORT $LN10@cbDigitalG
; Line 168
	mov	eax, DWORD PTR _DataValues+632
	mov	DWORD PTR tv159[ebp], eax
	cmp	DWORD PTR tv159[ebp], 1
	je	SHORT $LN8@cbDigitalG
	cmp	DWORD PTR tv159[ebp], 2
	je	SHORT $LN7@cbDigitalG
	jmp	SHORT $LN10@cbDigitalG
; Line 171
	jmp	SHORT $LN10@cbDigitalG
$LN8@cbDigitalG:
; Line 174
	push	10					; 0000000aH
	push	100					; 00000064H
	push	OFFSET _bmBestLapSession
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 175
	jmp	SHORT $LN10@cbDigitalG
$LN7@cbDigitalG:
; Line 178
	push	10					; 0000000aH
	push	100					; 00000064H
	push	OFFSET _bmBestLapEver
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
$LN10@cbDigitalG:
; Line 183
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 184
	push	OFFSET _GUI_FontD32
	call	_GUI_SetFont
	add	esp, 4
; Line 185
	push	OFFSET _GUI_FontD80
	call	_GUI_SetFont
	add	esp, 4
; Line 186
	push	32					; 00000020H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T16909[ebp], eax
	mov	DWORD PTR $T16909[ebp+4], edx
	push	1
	push	OFFSET _LapTimeRect
	push	0
	mov	eax, DWORD PTR $T16909[ebp]
	push	eax
	call	_formatLapTime
	add	esp, 8
	push	eax
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 196
	push	31					; 0000001fH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T16910[ebp], eax
	mov	DWORD PTR $T16910[ebp+4], edx
	push	ecx
	fld	DWORD PTR $T16910[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _pPredictiveLap
	push	eax
	call	?UpdatePredictiveLapControl@@YAXPAVPredictiveLapTimer@@M@Z ; UpdatePredictiveLapControl
	add	esp, 8
; Line 198
	push	229					; 000000e5H
	push	0
	push	OFFSET _bmthreewayarrow
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 209
	call	_CheckWarningPopups
; Line 212
	movzx	eax, BYTE PTR _drawFlag
	test	eax, eax
	je	SHORT $LN6@cbDigitalG
; Line 213
	call	?DGDrawConfigRect@@YAXXZ		; DGDrawConfigRect
$LN6@cbDigitalG:
; Line 215
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_CopyToLCD
	add	esp, 4
; Line 216
	call	_GUI_SelectLCD
$LN16@cbDigitalG:
; Line 219
	call	_SlideOutVisible
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@cbDigitalG
; Line 220
	call	_DrawSignalStrength
$LN5@cbDigitalG:
; Line 222
	jmp	$LN22@cbDigitalG
$LN4@cbDigitalG:
; Line 225
	cmp	DWORD PTR _pPredictiveLap, 0
	je	SHORT $LN3@cbDigitalG
; Line 227
	mov	eax, DWORD PTR _pPredictiveLap
	mov	DWORD PTR $T16912[ebp], eax
	mov	ecx, DWORD PTR $T16912[ebp]
	mov	DWORD PTR $T16911[ebp], ecx
	cmp	DWORD PTR $T16911[ebp], 0
	je	SHORT $LN26@cbDigitalG
	push	1
	mov	ecx, DWORD PTR $T16911[ebp]
	call	??_GPredictiveLapTimer@@QAEPAXI@Z
	mov	DWORD PTR tv197[ebp], eax
	jmp	SHORT $LN27@cbDigitalG
$LN26@cbDigitalG:
	mov	DWORD PTR tv197[ebp], 0
$LN27@cbDigitalG:
; Line 228
	mov	DWORD PTR _pPredictiveLap, 0
$LN3@cbDigitalG:
; Line 230
	cmp	DWORD PTR _mem, 0
	je	SHORT $LN2@cbDigitalG
; Line 232
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_Delete
	add	esp, 4
; Line 233
	mov	DWORD PTR _mem, 0
$LN2@cbDigitalG:
; Line 235
	jmp	SHORT $LN22@cbDigitalG
$LN1@cbDigitalG:
; Line 238
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN22@cbDigitalG:
; Line 240
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@cbDigitalG
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN30@cbDigitalG:
	DD	1
	DD	$LN29@cbDigitalG
$LN29@cbDigitalG:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN28@cbDigitalG
$LN28@cbDigitalG:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
__cbDigitalGaugeCallback ENDP
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??1PredictiveLapTimer@@QAE@XZ:PROC		; PredictiveLapTimer::~PredictiveLapTimer
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GPredictiveLapTimer@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GPredictiveLapTimer@@QAEPAXI@Z PROC			; PredictiveLapTimer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PredictiveLapTimer@@QAE@XZ		; PredictiveLapTimer::~PredictiveLapTimer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPredictiveLapTimer@@QAEPAXI@Z ENDP			; PredictiveLapTimer::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_GUI_DrawRect:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DGDrawConfigRect@@YAXXZ
_TEXT	SEGMENT
?DGDrawConfigRect@@YAXXZ PROC				; DGDrawConfigRect, COMDAT
; Line 243
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 244
	push	255					; 000000ffH
	call	_GUI_SetColor
	add	esp, 4
; Line 245
	movsx	eax, WORD PTR _configurableItemRect+6
	push	eax
	movsx	ecx, WORD PTR _configurableItemRect+4
	add	ecx, 4
	push	ecx
	movsx	edx, WORD PTR _configurableItemRect+2
	sub	edx, 4
	push	edx
	movsx	eax, WORD PTR _configurableItemRect
	sub	eax, 4
	push	eax
	call	_GUI_DrawRect
	add	esp, 16					; 00000010H
; Line 247
	movsx	eax, WORD PTR _configurableItemRect+6
	sub	eax, 1
	push	eax
	movsx	ecx, WORD PTR _configurableItemRect+4
	add	ecx, 3
	push	ecx
	movsx	edx, WORD PTR _configurableItemRect+2
	sub	edx, 3
	push	edx
	movsx	eax, WORD PTR _configurableItemRect
	sub	eax, 3
	push	eax
	call	_GUI_DrawRect
	add	esp, 16					; 00000010H
; Line 248
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DGDrawConfigRect@@YAXXZ ENDP				; DGDrawConfigRect
_TEXT	ENDS
PUBLIC	_Display_DigitalGaugeScreen
EXTRN	_WM_CreateTimer:PROC
EXTRN	_GUI_MEMDEV_Create:PROC
EXTRN	??0PredictiveLapTimer@@QAE@HHHHMMJ@Z:PROC	; PredictiveLapTimer::PredictiveLapTimer
EXTRN	_GetPredictiveScale:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	_SystemError:PROC
EXTRN	_WM_CreateWindowAsChild:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _Display_DigitalGaugeScreen
_TEXT	SEGMENT
tv91 = -220						; size = 4
$T16937 = -212						; size = 4
$T16938 = -200						; size = 4
_hParent$ = 8						; size = 4
_Display_DigitalGaugeScreen PROC			; COMDAT
; Line 251
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 252
	mov	BYTE PTR _firsttimethrough, 1
; Line 253
	mov	BYTE PTR _drawFlag, 0
; Line 255
	push	0
	push	OFFSET __cbDigitalGaugeCallback
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	call	_WM_CreateWindowAsChild
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hDigitalGaugeScreen, eax
	cmp	DWORD PTR _hDigitalGaugeScreen, 0
	jg	SHORT $LN2@Display_Di
; Line 256
	call	_SystemError
$LN2@Display_Di:
; Line 258
	push	52					; 00000034H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T16938[ebp], eax
	cmp	DWORD PTR $T16938[ebp], 0
	je	SHORT $LN5@Display_Di
	mov	eax, DWORD PTR _hDigitalGaugeScreen
	push	eax
	call	_GetPredictiveScale
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	call	_GetPredictiveScale
	push	ecx
	fstp	DWORD PTR [esp]
	push	50					; 00000032H
	push	400					; 00000190H
	push	212					; 000000d4H
	push	50					; 00000032H
	mov	ecx, DWORD PTR $T16938[ebp]
	call	??0PredictiveLapTimer@@QAE@HHHHMMJ@Z	; PredictiveLapTimer::PredictiveLapTimer
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN6@Display_Di
$LN5@Display_Di:
	mov	DWORD PTR tv91[ebp], 0
$LN6@Display_Di:
	mov	ecx, DWORD PTR tv91[ebp]
	mov	DWORD PTR $T16937[ebp], ecx
	mov	edx, DWORD PTR $T16937[ebp]
	mov	DWORD PTR _pPredictiveLap, edx
	cmp	DWORD PTR _pPredictiveLap, 0
	ja	SHORT $LN1@Display_Di
; Line 259
	call	_SystemError
$LN1@Display_Di:
; Line 266
	mov	eax, DWORD PTR _hDigitalGaugeScreen
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 269
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	call	_GUI_MEMDEV_Create
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mem, eax
; Line 271
	push	0
	push	25					; 00000019H
	push	0
	mov	eax, DWORD PTR _hDigitalGaugeScreen
	push	eax
	call	_WM_CreateTimer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hScreenTimer, eax
; Line 273
	mov	eax, DWORD PTR _hDigitalGaugeScreen
; Line 274
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Display_DigitalGaugeScreen ENDP
_TEXT	ENDS
PUBLIC	_IfDigitalConfigGaugePressed
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _IfDigitalConfigGaugePressed
_TEXT	SEGMENT
_lastx$ = 8						; size = 4
_lasty$ = 12						; size = 4
_IfDigitalConfigGaugePressed PROC			; COMDAT
; Line 280
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 281
	movsx	eax, WORD PTR _configurableItemRect
	cmp	DWORD PTR _lastx$[ebp], eax
	jl	SHORT $LN2@IfDigitalC
	movsx	eax, WORD PTR _configurableItemRect+4
	cmp	DWORD PTR _lastx$[ebp], eax
	jg	SHORT $LN2@IfDigitalC
	movsx	eax, WORD PTR _configurableItemRect+2
	cmp	DWORD PTR _lasty$[ebp], eax
	jl	SHORT $LN2@IfDigitalC
	movsx	eax, WORD PTR _configurableItemRect+6
	cmp	DWORD PTR _lasty$[ebp], eax
	jg	SHORT $LN2@IfDigitalC
; Line 282
	mov	al, 1
	jmp	SHORT $LN3@IfDigitalC
	jmp	SHORT $LN3@IfDigitalC
$LN2@IfDigitalC:
; Line 283
	xor	al, al
$LN3@IfDigitalC:
; Line 284
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_IfDigitalConfigGaugePressed ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??__EpData@@YAXXZ
text$yc	SEGMENT
??__EpData@@YAXXZ PROC					; `dynamic initializer for 'pData'', COMDAT
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _DataElementRect
	mov	DWORD PTR _pData, eax
	mov	ecx, DWORD PTR _DataElementRect+4
	mov	DWORD PTR _pData+4, ecx
	mov	DWORD PTR _pData+8, 1
	mov	DWORD PTR _pData+12, 33023		; 000080ffH
	mov	DWORD PTR _pData+16, OFFSET _GUI_FontD32
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__EpData@@YAXXZ ENDP					; `dynamic initializer for 'pData''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EpName@@YAXXZ
text$yc	SEGMENT
??__EpName@@YAXXZ PROC					; `dynamic initializer for 'pName'', COMDAT
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _NameRect
	mov	DWORD PTR _pName, eax
	mov	ecx, DWORD PTR _NameRect+4
	mov	DWORD PTR _pName+4, ecx
	mov	DWORD PTR _pName+8, 1
	mov	DWORD PTR _pName+12, 16777215		; 00ffffffH
	mov	DWORD PTR _pName+16, OFFSET _GUI_Font24B_ASCII
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__EpName@@YAXXZ ENDP					; `dynamic initializer for 'pName''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EpUnits@@YAXXZ
text$yc	SEGMENT
??__EpUnits@@YAXXZ PROC					; `dynamic initializer for 'pUnits'', COMDAT
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _UnitsRect
	mov	DWORD PTR _pUnits, eax
	mov	ecx, DWORD PTR _UnitsRect+4
	mov	DWORD PTR _pUnits+4, ecx
	mov	DWORD PTR _pUnits+8, 1
	mov	DWORD PTR _pUnits+12, 16777215		; 00ffffffH
	mov	DWORD PTR _pUnits+16, OFFSET _GUI_Font24B_ASCII
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__EpUnits@@YAXXZ ENDP					; `dynamic initializer for 'pUnits''
text$yc	ENDS
_BSS	SEGMENT
_pData	DB	014H DUP (?)
_pUnits	DB	014H DUP (?)
_pName	DB	014H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_pData$initializer$ DD FLAT:??__EpData@@YAXXZ
_pName$initializer$ DD FLAT:??__EpName@@YAXXZ
_pUnits$initializer$ DD FLAT:??__EpUnits@@YAXXZ
CRT$XCU	ENDS
END
