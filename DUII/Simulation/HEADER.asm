; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Widget\HEADER.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_HEADER__DefaultProps
PUBLIC	_HEADER__pDefaultCursor
PUBLIC	_HEADER__DefaultBorderH
PUBLIC	_HEADER__DefaultBorderV
PUBLIC	_HEADER__pSkinDefault
EXTRN	_HEADER__SkinClassic:BYTE
EXTRN	_GUI_CursorHeaderM:BYTE
EXTRN	_GUI_Font13_1:BYTE
_BSS	SEGMENT
_HEADER__DefaultBorderV DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_HEADER__DefaultProps DD FLAT:_GUI_Font13_1
	DD	0aaaaaaH
	DD	00H
	DD	00H
	DD	00H
_HEADER__pDefaultCursor DD FLAT:_GUI_CursorHeaderM
_HEADER__DefaultBorderH DD 02H
_HEADER__pSkinDefault DD FLAT:_HEADER__SkinClassic
$SG12903 DB	'HEADER.c: Wrong handle type or Object not init''ed', 00H
	ORG $+2
$SG12968 DB	'HEADER_Create failed', 00H
_DATA	ENDS
PUBLIC	_HEADER_LockH
EXTRN	_GUI_ErrorOut:PROC
EXTRN	_GUI_ALLOC_LockH:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\widget\header.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _HEADER_LockH
_TEXT	SEGMENT
_p$ = -8						; size = 4
_h$ = 8							; size = 4
_HEADER_LockH PROC					; COMDAT
; Line 453
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 454
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 455
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@HEADER_Loc
; Line 456
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+112], 1212498244		; 48454144H
	je	SHORT $LN2@HEADER_Loc
; Line 457
	push	OFFSET $SG12903
	call	_GUI_ErrorOut
	add	esp, 4
; Line 458
	xor	eax, eax
	jmp	SHORT $LN3@HEADER_Loc
$LN2@HEADER_Loc:
; Line 461
	mov	eax, DWORD PTR _p$[ebp]
$LN3@HEADER_Loc:
; Line 462
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_HEADER_LockH ENDP
_TEXT	ENDS
PUBLIC	_HEADER_Callback
EXTRN	_WM_DefaultProc:PROC
EXTRN	_WIDGET_HandleActive:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _HEADER_Callback
_TEXT	SEGMENT
tv69 = -208						; size = 4
_hObj$ = -8						; size = 4
_pMsg$ = 8						; size = 4
_HEADER_Callback PROC					; COMDAT
; Line 475
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 477
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _hObj$[ebp], ecx
; Line 479
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WIDGET_HandleActive
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@HEADER_Cal
; Line 480
	jmp	$LN10@HEADER_Cal
$LN9@HEADER_Cal:
; Line 483
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv69[ebp], ecx
	mov	edx, DWORD PTR tv69[ebp]
	sub	edx, 11					; 0000000bH
	mov	DWORD PTR tv69[ebp], edx
	cmp	DWORD PTR tv69[ebp], 6
	ja	SHORT $LN1@HEADER_Cal
	mov	eax, DWORD PTR tv69[ebp]
	jmp	DWORD PTR $LN12@HEADER_Cal[eax*4]
$LN6@HEADER_Cal:
; Line 485
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__Paint
	add	esp, 4
; Line 486
	jmp	SHORT $LN10@HEADER_Cal
$LN5@HEADER_Cal:
; Line 488
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__OnPidStateChange
	add	esp, 8
; Line 489
	jmp	SHORT $LN10@HEADER_Cal
$LN4@HEADER_Cal:
; Line 492
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__OnTouch
	add	esp, 8
; Line 493
	jmp	SHORT $LN10@HEADER_Cal
$LN3@HEADER_Cal:
; Line 497
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__OnMouseOver
	add	esp, 8
; Line 498
	jmp	SHORT $LN10@HEADER_Cal
$LN2@HEADER_Cal:
; Line 501
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__FreeAttached
	add	esp, 4
$LN1@HEADER_Cal:
; Line 503
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN10@HEADER_Cal:
; Line 506
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@HEADER_Cal:
	DD	$LN2@HEADER_Cal
	DD	$LN4@HEADER_Cal
	DD	$LN1@HEADER_Cal
	DD	$LN1@HEADER_Cal
	DD	$LN6@HEADER_Cal
	DD	$LN3@HEADER_Cal
	DD	$LN5@HEADER_Cal
_HEADER_Callback ENDP
_TEXT	ENDS
EXTRN	_GUI_ALLOC_UnlockH:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Paint
_TEXT	SEGMENT
_pfPaint$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__Paint	PROC						; COMDAT
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 125
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 126
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pfPaint$[ebp], edx
; Line 127
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 128
	cmp	DWORD PTR _pfPaint$[ebp], 0
	je	SHORT $LN2@Paint
; Line 129
	mov	esi, esp
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	DWORD PTR _pfPaint$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Paint:
; Line 131
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Paint	ENDP
_TEXT	ENDS
EXTRN	_GUI_ARRAY_Delete:PROC
EXTRN	_GUI_ALLOC_Free:PROC
EXTRN	_GUI_ARRAY_GetpItemLocked:PROC
EXTRN	_GUI_ARRAY_GetNumItems:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __FreeAttached
_TEXT	SEGMENT
_pColumn$12737 = -56					; size = 4
_Columns$ = -44						; size = 4
_pObj$ = -32						; size = 4
_NumItems$ = -20					; size = 4
_i$ = -8						; size = 4
_hObj$ = 8						; size = 4
__FreeAttached PROC					; COMDAT
; Line 154
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 158
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 159
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _Columns$[ebp], ecx
; Line 160
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 161
	mov	eax, DWORD PTR _Columns$[ebp]
	push	eax
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	mov	DWORD PTR _NumItems$[ebp], eax
; Line 162
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@FreeAttach
$LN3@FreeAttach:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@FreeAttach:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _NumItems$[ebp]
	jge	SHORT $LN2@FreeAttach
; Line 163
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Columns$[ebp]
	push	ecx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pColumn$12737[ebp], eax
; Line 164
	mov	eax, DWORD PTR _pColumn$12737[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@FreeAttach
; Line 165
	mov	eax, DWORD PTR _pColumn$12737[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN1@FreeAttach:
; Line 167
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pColumn$12737[ebp], 0
; Line 168
	jmp	SHORT $LN3@FreeAttach
$LN2@FreeAttach:
; Line 170
	mov	eax, DWORD PTR _Columns$[ebp]
	push	eax
	call	_GUI_ARRAY_Delete
	add	esp, 4
; Line 171
	call	__RestoreOldCursor
; Line 172
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FreeAttached ENDP
_TEXT	ENDS
EXTRN	_GUI_CURSOR_SelectEx:PROC
EXTRN	_GUI_CURSOR_GetStateEx:PROC
_BSS	SEGMENT
__pOldCursor DD	01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __RestoreOldCursor
_TEXT	SEGMENT
__RestoreOldCursor PROC					; COMDAT
; Line 137
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 138
	cmp	DWORD PTR __pOldCursor, 0
	je	SHORT $LN3@RestoreOld
; Line 140
	push	0
	call	_GUI_CURSOR_GetStateEx
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@RestoreOld
; Line 141
	push	0
	mov	eax, DWORD PTR __pOldCursor
	push	eax
	call	_GUI_CURSOR_SelectEx
	add	esp, 8
$LN1@RestoreOld:
; Line 144
	mov	DWORD PTR __pOldCursor, 0
$LN3@RestoreOld:
; Line 146
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__RestoreOldCursor ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __OnMouseOver
_TEXT	SEGMENT
_ScrollPos$ = -32					; size = 4
_pState$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pMsg$ = 12						; size = 4
__OnMouseOver PROC					; COMDAT
; Line 341
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 345
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 346
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _ScrollPos$[ebp], ecx
; Line 347
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 348
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pState$[ebp], ecx
; Line 349
	cmp	DWORD PTR _pState$[ebp], 0
	je	SHORT $LN2@OnMouseOve
; Line 350
	push	-1
	mov	eax, DWORD PTR _pState$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pState$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _ScrollPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__HandlePID
	add	esp, 16					; 00000010H
$LN2@OnMouseOve:
; Line 352
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__OnMouseOver ENDP
_TEXT	ENDS
PUBLIC	_HEADER_SetItemWidth
PUBLIC	_HEADER_GetItemWidth
EXTRN	_WM_ReleaseCapture:PROC
EXTRN	_WM_SetCapture:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __HandlePID
_TEXT	SEGMENT
_NewSize$12820 = -56					; size = 4
_CaptureItem$ = -44					; size = 4
_CapturePosX$ = -32					; size = 4
_Hit$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_Pressed$ = 20						; size = 4
__HandlePID PROC					; COMDAT
; Line 279
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 285
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 286
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__GetDividerIndex
	add	esp, 16					; 00000010H
	mov	DWORD PTR _Hit$[ebp], eax
; Line 288
	cmp	DWORD PTR _Pressed$[ebp], 1
	jne	SHORT $LN10@HandlePID
	cmp	DWORD PTR _Hit$[ebp], 0
	jl	SHORT $LN10@HandlePID
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+84], -1
	jne	SHORT $LN10@HandlePID
; Line 289
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+84], ecx
; Line 290
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Hit$[ebp]
	mov	DWORD PTR [eax+88], ecx
$LN10@HandlePID:
; Line 292
	cmp	DWORD PTR _Pressed$[ebp], 0
	jg	SHORT $LN9@HandlePID
; Line 293
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+84], -1
$LN9@HandlePID:
; Line 295
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR _CapturePosX$[ebp], ecx
; Line 296
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _CaptureItem$[ebp], ecx
; Line 297
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 299
	cmp	DWORD PTR _Hit$[ebp], 0
	jl	SHORT $LN8@HandlePID
; Line 300
	push	1
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_SetCapture
	add	esp, 8
; Line 302
	cmp	DWORD PTR __pOldCursor, 0
	jne	SHORT $LN8@HandlePID
; Line 303
	push	0
	call	_GUI_CURSOR_GetStateEx
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@HandlePID
; Line 304
	push	0
	mov	eax, DWORD PTR _HEADER__pDefaultCursor
	push	eax
	call	_GUI_CURSOR_SelectEx
	add	esp, 8
	mov	DWORD PTR __pOldCursor, eax
$LN8@HandlePID:
; Line 310
	cmp	DWORD PTR _CapturePosX$[ebp], 0
	jl	SHORT $LN5@HandlePID
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _CapturePosX$[ebp]
	je	SHORT $LN5@HandlePID
	cmp	DWORD PTR _Pressed$[ebp], 1
	jne	SHORT $LN5@HandlePID
; Line 311
	mov	eax, DWORD PTR _CaptureItem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_HEADER_GetItemWidth
	add	esp, 8
	add	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR _CapturePosX$[ebp]
	mov	DWORD PTR _NewSize$12820[ebp], eax
; Line 312
	js	SHORT $LN5@HandlePID
; Line 313
	mov	eax, DWORD PTR _NewSize$12820[ebp]
	push	eax
	mov	ecx, DWORD PTR _CaptureItem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_HEADER_SetItemWidth
	add	esp, 12					; 0000000cH
; Line 314
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__LimitDragWitdh
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@HandlePID
; Line 315
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _CapturePosX$[ebp], eax
$LN5@HandlePID:
; Line 320
	cmp	DWORD PTR _Pressed$[ebp], 0
	jg	SHORT $LN2@HandlePID
; Line 322
	cmp	DWORD PTR _Hit$[ebp], -1
	jne	SHORT $LN2@HandlePID
; Line 325
	call	__RestoreOldCursor
; Line 326
	mov	DWORD PTR _CapturePosX$[ebp], -1
; Line 327
	call	_WM_ReleaseCapture
$LN2@HandlePID:
; Line 330
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 331
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _CapturePosX$[ebp]
	mov	DWORD PTR [eax+84], ecx
; Line 332
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 333
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__HandlePID ENDP
_TEXT	ENDS
EXTRN	_WM_GetWindowSizeY:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetDividerIndex
_TEXT	SEGMENT
_Width$12772 = -80					; size = 4
_pColumn$12763 = -68					; size = 4
_NumColumns$12757 = -56					; size = 4
_Index$12756 = -44					; size = 4
_xPos$12755 = -32					; size = 4
_LastFixedPos$ = -20					; size = 4
_Item$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
__GetDividerIndex PROC					; COMDAT
; Line 179
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 182
	mov	DWORD PTR _Item$[ebp], -1
; Line 183
	mov	DWORD PTR _LastFixedPos$[ebp], 0
; Line 184
	cmp	DWORD PTR _y$[ebp], 0
	jl	$LN14@GetDivider
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetWindowSizeY
	add	esp, 4
	cmp	DWORD PTR _y$[ebp], eax
	jge	$LN14@GetDivider
; Line 185
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN14@GetDivider
; Line 188
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	mov	DWORD PTR _NumColumns$12757[ebp], eax
; Line 189
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN12@GetDivider
; Line 190
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _xPos$12755[ebp], ecx
; Line 191
	jmp	SHORT $LN11@GetDivider
$LN12@GetDivider:
; Line 192
	mov	DWORD PTR _xPos$12755[ebp], 0
$LN11@GetDivider:
; Line 194
	mov	DWORD PTR _Index$12756[ebp], 0
	jmp	SHORT $LN10@GetDivider
$LN9@GetDivider:
	mov	eax, DWORD PTR _Index$12756[ebp]
	add	eax, 1
	mov	DWORD PTR _Index$12756[ebp], eax
$LN10@GetDivider:
	mov	eax, DWORD PTR _Index$12756[ebp]
	cmp	eax, DWORD PTR _NumColumns$12757[ebp]
	jae	$LN14@GetDivider
; Line 196
	mov	eax, DWORD PTR _Index$12756[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pColumn$12763[ebp], eax
; Line 197
	mov	eax, DWORD PTR _pColumn$12763[ebp]
	mov	ecx, DWORD PTR _xPos$12755[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _xPos$12755[ebp], ecx
; Line 198
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pColumn$12763[ebp], 0
; Line 199
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Index$12756[ebp]
	cmp	ecx, DWORD PTR [eax+108]
	jae	SHORT $LN7@GetDivider
; Line 200
	mov	eax, DWORD PTR _xPos$12755[ebp]
	mov	DWORD PTR _LastFixedPos$[ebp], eax
	jmp	SHORT $LN6@GetDivider
$LN7@GetDivider:
; Line 201
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN6@GetDivider
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Index$12756[ebp]
	cmp	ecx, DWORD PTR [eax+108]
	jne	SHORT $LN6@GetDivider
; Line 202
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _xPos$12755[ebp]
	sub	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _xPos$12755[ebp], ecx
$LN6@GetDivider:
; Line 204
	mov	eax, DWORD PTR _xPos$12755[ebp]
	cmp	eax, DWORD PTR _LastFixedPos$[ebp]
	jl	SHORT $LN4@GetDivider
; Line 205
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 4
	cmp	DWORD PTR _xPos$12755[ebp], eax
	jl	SHORT $LN4@GetDivider
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 4
	cmp	DWORD PTR _xPos$12755[ebp], eax
	jg	SHORT $LN4@GetDivider
; Line 206
	mov	eax, DWORD PTR _Index$12756[ebp]
	mov	DWORD PTR _Item$[ebp], eax
; Line 207
	mov	eax, DWORD PTR _NumColumns$12757[ebp]
	sub	eax, 1
	cmp	DWORD PTR _Index$12756[ebp], eax
	jae	SHORT $LN4@GetDivider
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _xPos$12755[ebp]
	jge	SHORT $LN4@GetDivider
; Line 209
	mov	eax, DWORD PTR _Index$12756[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pColumn$12763[ebp], eax
; Line 210
	mov	eax, DWORD PTR _pColumn$12763[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Width$12772[ebp], ecx
; Line 211
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pColumn$12763[ebp], 0
; Line 212
	cmp	DWORD PTR _Width$12772[ebp], 0
	jne	SHORT $LN4@GetDivider
; Line 213
	jmp	SHORT $LN14@GetDivider
$LN4@GetDivider:
; Line 218
	jmp	$LN9@GetDivider
$LN14@GetDivider:
; Line 221
	mov	eax, DWORD PTR _Item$[ebp]
; Line 222
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDividerIndex ENDP
_TEXT	ENDS
EXTRN	_WM_GetWindowSizeX:PROC
EXTRN	_WM_GetScrollbarV:PROC
EXTRN	_WM_GetParent:PROC
EXTRN	_WM_GetClientRectEx:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __LimitDragWitdh
_TEXT	SEGMENT
_CaptureItem$ = -96					; size = 4
_hParent$ = -84						; size = 4
_hVScroll$ = -72					; size = 4
_Rect$ = -60						; size = 8
_SumX$ = -44						; size = 4
_i$ = -32						; size = 4
_DragLimit$ = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__LimitDragWitdh PROC					; COMDAT
; Line 236
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 242
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 243
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _CaptureItem$[ebp], ecx
; Line 244
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+116]
	mov	DWORD PTR _DragLimit$[ebp], ecx
; Line 245
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 246
	cmp	DWORD PTR _DragLimit$[ebp], 0
	je	$LN10@LimitDragW
; Line 248
	lea	eax, DWORD PTR _Rect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_GetClientRectEx
	add	esp, 8
; Line 249
	movsx	eax, WORD PTR _Rect$[ebp+4]
	mov	DWORD PTR _DragLimit$[ebp], eax
; Line 251
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetParent
	add	esp, 4
	mov	DWORD PTR _hParent$[ebp], eax
; Line 252
	cmp	DWORD PTR _hParent$[ebp], 0
	je	SHORT $LN9@LimitDragW
; Line 253
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetParent
	add	esp, 4
	push	eax
	call	_WM_GetScrollbarV
	add	esp, 4
	mov	DWORD PTR _hVScroll$[ebp], eax
; Line 254
	cmp	DWORD PTR _hVScroll$[ebp], 0
	je	SHORT $LN9@LimitDragW
; Line 255
	mov	eax, DWORD PTR _hVScroll$[ebp]
	push	eax
	call	_WM_GetWindowSizeX
	add	esp, 4
	mov	ecx, DWORD PTR _DragLimit$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _DragLimit$[ebp], ecx
$LN9@LimitDragW:
; Line 259
	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _SumX$[ebp], eax
	jmp	SHORT $LN7@LimitDragW
$LN6@LimitDragW:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@LimitDragW:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _CaptureItem$[ebp]
	jg	SHORT $LN5@LimitDragW
; Line 260
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_HEADER_GetItemWidth
	add	esp, 8
	add	eax, DWORD PTR _SumX$[ebp]
	mov	DWORD PTR _SumX$[ebp], eax
; Line 261
	jmp	SHORT $LN6@LimitDragW
$LN5@LimitDragW:
; Line 263
	mov	eax, DWORD PTR _SumX$[ebp]
	cmp	eax, DWORD PTR _DragLimit$[ebp]
	jle	SHORT $LN10@LimitDragW
; Line 264
	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _SumX$[ebp], eax
	jmp	SHORT $LN3@LimitDragW
$LN2@LimitDragW:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@LimitDragW:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _CaptureItem$[ebp]
	jge	SHORT $LN1@LimitDragW
; Line 265
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_HEADER_GetItemWidth
	add	esp, 8
	add	eax, DWORD PTR _SumX$[ebp]
	mov	DWORD PTR _SumX$[ebp], eax
; Line 266
	jmp	SHORT $LN2@LimitDragW
$LN1@LimitDragW:
; Line 267
	mov	eax, DWORD PTR _DragLimit$[ebp]
	sub	eax, DWORD PTR _SumX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _CaptureItem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_HEADER_SetItemWidth
	add	esp, 12					; 0000000cH
; Line 268
	mov	eax, 1
	jmp	SHORT $LN11@LimitDragW
$LN10@LimitDragW:
; Line 271
	xor	eax, eax
$LN11@LimitDragW:
; Line 272
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@LimitDragW
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@LimitDragW:
	DD	1
	DD	$LN14@LimitDragW
$LN14@LimitDragW:
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN13@LimitDragW
$LN13@LimitDragW:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
__LimitDragWitdh ENDP
_TEXT	ENDS
EXTRN	_WM_NotifyParent:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __OnTouch
_TEXT	SEGMENT
_pState$ = -44						; size = 4
_ScrollPos$ = -32					; size = 4
_Notification$ = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pMsg$ = 12						; size = 4
__OnTouch PROC						; COMDAT
; Line 403
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 409
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 410
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _ScrollPos$[ebp], ecx
; Line 411
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 412
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pState$[ebp], ecx
; Line 413
	cmp	DWORD PTR _pState$[ebp], 0
	je	SHORT $LN4@OnTouch
; Line 414
	mov	eax, DWORD PTR _pState$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _pState$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pState$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _ScrollPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__HandlePID
	add	esp, 16					; 00000010H
; Line 415
	mov	eax, DWORD PTR _pState$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN3@OnTouch
; Line 416
	mov	DWORD PTR _Notification$[ebp], 1
; Line 417
	jmp	SHORT $LN2@OnTouch
$LN3@OnTouch:
; Line 418
	mov	DWORD PTR _Notification$[ebp], 2
$LN2@OnTouch:
; Line 420
	jmp	SHORT $LN1@OnTouch
$LN4@OnTouch:
; Line 421
	mov	DWORD PTR _Notification$[ebp], 3
$LN1@OnTouch:
; Line 423
	mov	eax, DWORD PTR _Notification$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_NotifyParent
	add	esp, 8
; Line 424
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__OnTouch ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __OnPidStateChange
_TEXT	SEGMENT
_pState$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pMsg$ = 12						; size = 4
__OnPidStateChange PROC					; COMDAT
; Line 431
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 434
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 435
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pState$[ebp], ecx
; Line 436
	mov	eax, DWORD PTR _pState$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 1
	jne	SHORT $LN1@OnPidState
	mov	eax, DWORD PTR _pState$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	jne	SHORT $LN1@OnPidState
; Line 437
	mov	eax, DWORD PTR _pState$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pState$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pObj$[ebp]
	add	eax, DWORD PTR [ecx+92]
	push	eax
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__GetItemIndex
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [ecx+96], eax
$LN1@OnPidState:
; Line 439
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 440
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__OnPidStateChange ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetItemIndex
_TEXT	SEGMENT
_pColumn$12861 = -80					; size = 4
_Width$12860 = -68					; size = 4
_NumColumns$12854 = -56					; size = 4
_Index$12853 = -44					; size = 4
_xPos$12852 = -32					; size = 4
_LastFixedPos$ = -20					; size = 4
_Item$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
__GetItemIndex PROC					; COMDAT
; Line 359
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 362
	mov	DWORD PTR _Item$[ebp], -1
; Line 363
	mov	DWORD PTR _LastFixedPos$[ebp], 0
; Line 364
	cmp	DWORD PTR _y$[ebp], 0
	jl	$LN12@GetItemInd
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetWindowSizeY
	add	esp, 4
	cmp	DWORD PTR _y$[ebp], eax
	jge	$LN12@GetItemInd
; Line 365
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN12@GetItemInd
; Line 368
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	mov	DWORD PTR _NumColumns$12854[ebp], eax
; Line 369
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN10@GetItemInd
; Line 370
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _xPos$12852[ebp], ecx
; Line 371
	jmp	SHORT $LN9@GetItemInd
$LN10@GetItemInd:
; Line 372
	mov	DWORD PTR _xPos$12852[ebp], 0
$LN9@GetItemInd:
; Line 374
	mov	DWORD PTR _Index$12853[ebp], 0
	jmp	SHORT $LN8@GetItemInd
$LN7@GetItemInd:
	mov	eax, DWORD PTR _Index$12853[ebp]
	add	eax, 1
	mov	DWORD PTR _Index$12853[ebp], eax
$LN8@GetItemInd:
	mov	eax, DWORD PTR _Index$12853[ebp]
	cmp	eax, DWORD PTR _NumColumns$12854[ebp]
	jae	$LN12@GetItemInd
; Line 377
	mov	eax, DWORD PTR _Index$12853[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pColumn$12861[ebp], eax
; Line 378
	mov	eax, DWORD PTR _pColumn$12861[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Width$12860[ebp], ecx
; Line 379
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pColumn$12861[ebp], 0
; Line 380
	mov	eax, DWORD PTR _xPos$12852[ebp]
	cmp	eax, DWORD PTR _LastFixedPos$[ebp]
	jl	SHORT $LN5@GetItemInd
; Line 381
	mov	eax, DWORD PTR _xPos$12852[ebp]
	add	eax, 4
	cmp	DWORD PTR _x$[ebp], eax
	jle	SHORT $LN5@GetItemInd
	mov	eax, DWORD PTR _Width$12860[ebp]
	mov	ecx, DWORD PTR _xPos$12852[ebp]
	lea	edx, DWORD PTR [ecx+eax-4]
	cmp	DWORD PTR _x$[ebp], edx
	jge	SHORT $LN5@GetItemInd
; Line 382
	mov	eax, DWORD PTR _Index$12853[ebp]
	mov	DWORD PTR _Item$[ebp], eax
; Line 383
	jmp	SHORT $LN12@GetItemInd
$LN5@GetItemInd:
; Line 386
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Index$12853[ebp]
	cmp	ecx, DWORD PTR [eax+108]
	jae	SHORT $LN3@GetItemInd
; Line 387
	mov	eax, DWORD PTR _xPos$12852[ebp]
	mov	DWORD PTR _LastFixedPos$[ebp], eax
	jmp	SHORT $LN2@GetItemInd
$LN3@GetItemInd:
; Line 388
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN2@GetItemInd
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Index$12853[ebp]
	cmp	ecx, DWORD PTR [eax+108]
	jne	SHORT $LN2@GetItemInd
; Line 389
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _xPos$12852[ebp]
	sub	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _xPos$12852[ebp], ecx
$LN2@GetItemInd:
; Line 391
	mov	eax, DWORD PTR _xPos$12852[ebp]
	add	eax, DWORD PTR _Width$12860[ebp]
	mov	DWORD PTR _xPos$12852[ebp], eax
; Line 392
	jmp	$LN7@GetItemInd
$LN12@GetItemInd:
; Line 395
	mov	eax, DWORD PTR _Item$[ebp]
; Line 396
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetItemIndex ENDP
_TEXT	ENDS
PUBLIC	_HEADER_CreateEx
PUBLIC	_HEADER_Create
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _HEADER_Create
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xsize$ = 16						; size = 4
_ysize$ = 20						; size = 4
_hParent$ = 24						; size = 4
_Id$ = 28						; size = 4
_Flags$ = 32						; size = 4
_ExFlags$ = 36						; size = 4
_HEADER_Create PROC					; COMDAT
; Line 518
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 519
	mov	eax, DWORD PTR _Id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ExFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ysize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_HEADER_CreateEx
	add	esp, 32					; 00000020H
; Line 520
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_HEADER_Create ENDP
_TEXT	ENDS
EXTRN	_WIDGET__Init:PROC
EXTRN	_GUI_ARRAY_Create:PROC
EXTRN	_WM_CreateWindowAsChild:PROC
EXTRN	_GUI_GetYDistOfFont:PROC
EXTRN	_WIDGET_GetDefaultEffect:PROC
EXTRN	_WM_GetInsideRectEx:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _HEADER_CreateEx
_TEXT	SEGMENT
_Columns$12963 = -60					; size = 4
_pObj$12962 = -48					; size = 4
_pEffect$12957 = -36					; size = 4
_Rect$12955 = -24					; size = 8
_hObj$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xsize$ = 16						; size = 4
_ysize$ = 20						; size = 4
_hParent$ = 24						; size = 4
_WinFlags$ = 28						; size = 4
_ExFlags$ = 32						; size = 4
_Id$ = 36						; size = 4
_HEADER_CreateEx PROC					; COMDAT
; Line 528
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 530
	mov	eax, DWORD PTR _ExFlags$[ebp]
	mov	DWORD PTR _ExFlags$[ebp], eax
; Line 533
	cmp	DWORD PTR _xsize$[ebp], 0
	jne	SHORT $LN5@HEADER_Cre
	cmp	DWORD PTR _x0$[ebp], 0
	jne	SHORT $LN5@HEADER_Cre
	cmp	DWORD PTR _y0$[ebp], 0
	jne	SHORT $LN5@HEADER_Cre
; Line 535
	lea	eax, DWORD PTR _Rect$12955[ebp]
	push	eax
	mov	ecx, DWORD PTR _hParent$[ebp]
	push	ecx
	call	_WM_GetInsideRectEx
	add	esp, 8
; Line 536
	movsx	eax, WORD PTR _Rect$12955[ebp+4]
	movsx	ecx, WORD PTR _Rect$12955[ebp]
	sub	eax, ecx
	add	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
; Line 537
	movsx	eax, WORD PTR _Rect$12955[ebp]
	mov	DWORD PTR _x0$[ebp], eax
; Line 538
	movsx	eax, WORD PTR _Rect$12955[ebp+2]
	mov	DWORD PTR _y0$[ebp], eax
$LN5@HEADER_Cre:
; Line 540
	cmp	DWORD PTR _ysize$[ebp], 0
	jne	SHORT $LN4@HEADER_Cre
; Line 541
	call	_WIDGET_GetDefaultEffect
	mov	DWORD PTR _pEffect$12957[ebp], eax
; Line 542
	mov	eax, DWORD PTR _HEADER__DefaultProps
	push	eax
	call	_GUI_GetYDistOfFont
	add	esp, 4
	mov	DWORD PTR _ysize$[ebp], eax
; Line 543
	mov	eax, DWORD PTR _HEADER__DefaultBorderV
	mov	ecx, DWORD PTR _ysize$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _ysize$[ebp], edx
; Line 544
	mov	eax, DWORD PTR _pEffect$12957[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ysize$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _ysize$[ebp], eax
$LN4@HEADER_Cre:
; Line 546
	mov	eax, DWORD PTR _WinFlags$[ebp]
	or	eax, 640				; 00000280H
	mov	DWORD PTR _WinFlags$[ebp], eax
; Line 548
	push	72					; 00000048H
	push	OFFSET _HEADER_Callback
	mov	eax, DWORD PTR _WinFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hParent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ysize$[ebp]
	push	edx
	mov	eax, DWORD PTR _xsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	_WM_CreateWindowAsChild
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hObj$[ebp], eax
; Line 549
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN3@HEADER_Cre
; Line 552
	call	_GUI_ARRAY_Create
	mov	DWORD PTR _Columns$12963[ebp], eax
; Line 553
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$12962[ebp], eax
; Line 555
	mov	eax, DWORD PTR _pObj$12962[ebp]
	mov	ecx, DWORD PTR _Columns$12963[ebp]
	mov	DWORD PTR [eax+80], ecx
; Line 557
	push	0
	mov	eax, DWORD PTR _Id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$12962[ebp]
	push	ecx
	call	_WIDGET__Init
	add	esp, 12					; 0000000cH
; Line 559
	mov	eax, DWORD PTR _pObj$12962[ebp]
	mov	DWORD PTR [eax+112], 1212498244		; 48454144H
; Line 560
	mov	eax, DWORD PTR _pObj$12962[ebp]
	add	eax, 56					; 00000038H
	mov	ecx, DWORD PTR _HEADER__DefaultProps
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _HEADER__DefaultProps+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _HEADER__DefaultProps+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _HEADER__DefaultProps+12
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _HEADER__DefaultProps+16
	mov	DWORD PTR [eax+16], ecx
; Line 561
	mov	eax, DWORD PTR _pObj$12962[ebp]
	mov	DWORD PTR [eax+84], -1
; Line 562
	mov	eax, DWORD PTR _pObj$12962[ebp]
	mov	DWORD PTR [eax+88], -1
; Line 563
	mov	eax, DWORD PTR _pObj$12962[ebp]
	mov	DWORD PTR [eax+92], 0
; Line 564
	mov	eax, DWORD PTR _pObj$12962[ebp]
	mov	DWORD PTR [eax+100], -1
; Line 565
	mov	eax, DWORD PTR _pObj$12962[ebp]
	mov	ecx, DWORD PTR _HEADER__pSkinDefault
	mov	DWORD PTR [eax+76], ecx
; Line 566
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$12962[ebp], 0
; Line 567
	mov	esi, esp
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _HEADER__pSkinDefault
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 568
	jmp	SHORT $LN2@HEADER_Cre
$LN3@HEADER_Cre:
; Line 569
	cmp	DWORD PTR _hObj$[ebp], 0
	jne	SHORT $LN2@HEADER_Cre
	push	OFFSET $SG12968
	call	_GUI_ErrorOut
	add	esp, 4
$LN2@HEADER_Cre:
; Line 572
	mov	eax, DWORD PTR _hObj$[ebp]
; Line 573
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@HEADER_Cre
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@HEADER_Cre:
	DD	1
	DD	$LN9@HEADER_Cre
$LN9@HEADER_Cre:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN8@HEADER_Cre
$LN8@HEADER_Cre:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_HEADER_CreateEx ENDP
_TEXT	ENDS
PUBLIC	_HEADER_SetHeight
PUBLIC	_HEADER_SetFont
EXTRN	_WM_InvalidateWindow:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _HEADER_SetFont
_TEXT	SEGMENT
_pObj$12975 = -8					; size = 4
_hObj$ = 8						; size = 4
_pFont$ = 12						; size = 4
_HEADER_SetFont PROC					; COMDAT
; Line 591
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 592
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN2@HEADER_Set
; Line 595
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$12975[ebp], eax
; Line 596
	mov	eax, DWORD PTR _pObj$12975[ebp]
	mov	ecx, DWORD PTR _pFont$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 597
	mov	eax, DWORD PTR _pFont$[ebp]
	push	eax
	call	_GUI_GetYDistOfFont
	add	esp, 4
	mov	ecx, DWORD PTR _pObj$12975[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	ecx, DWORD PTR [edx]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_SetHeight
	add	esp, 8
; Line 598
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 599
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$12975[ebp], 0
$LN2@HEADER_Set:
; Line 602
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_HEADER_SetFont ENDP
_TEXT	ENDS
EXTRN	_WM_SetSize:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _HEADER_SetHeight
_TEXT	SEGMENT
_Rect$12983 = -12					; size = 8
_hObj$ = 8						; size = 4
_Height$ = 12						; size = 4
_HEADER_SetHeight PROC					; COMDAT
; Line 608
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 609
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN2@HEADER_Set@2
; Line 611
	lea	eax, DWORD PTR _Rect$12983[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_GetClientRectEx
	add	esp, 8
; Line 612
	mov	eax, DWORD PTR _Height$[ebp]
	push	eax
	movsx	ecx, WORD PTR _Rect$12983[ebp+4]
	movsx	edx, WORD PTR _Rect$12983[ebp]
	sub	ecx, edx
	add	ecx, 1
	push	ecx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_SetSize
	add	esp, 12					; 0000000cH
; Line 613
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetParent
	add	esp, 4
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN2@HEADER_Set@2:
; Line 615
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@HEADER_Set@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@HEADER_Set@2:
	DD	1
	DD	$LN5@HEADER_Set@2
$LN5@HEADER_Set@2:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN4@HEADER_Set@2
$LN4@HEADER_Set@2:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_HEADER_SetHeight ENDP
_TEXT	ENDS
PUBLIC	_HEADER_SetTextAlign
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _HEADER_SetTextAlign
_TEXT	SEGMENT
_pColumn$12994 = -20					; size = 4
_pObj$12992 = -8					; size = 4
_hObj$ = 8						; size = 4
_Index$ = 12						; size = 4
_Align$ = 16						; size = 4
_HEADER_SetTextAlign PROC				; COMDAT
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 622
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN3@HEADER_Set@3
; Line 625
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$12992[ebp], eax
; Line 626
	mov	eax, DWORD PTR _pObj$12992[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	cmp	DWORD PTR _Index$[ebp], eax
	ja	SHORT $LN1@HEADER_Set@3
; Line 628
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$12992[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pColumn$12994[ebp], eax
; Line 629
	mov	eax, DWORD PTR _pColumn$12994[ebp]
	mov	cx, WORD PTR _Align$[ebp]
	mov	WORD PTR [eax+4], cx
; Line 630
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pColumn$12994[ebp], 0
; Line 631
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN1@HEADER_Set@3:
; Line 633
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$12992[ebp], 0
$LN3@HEADER_Set@3:
; Line 636
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_HEADER_SetTextAlign ENDP
_TEXT	ENDS
PUBLIC	_HEADER_SetScrollPos
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _HEADER_SetScrollPos
_TEXT	SEGMENT
_pObj$13004 = -8					; size = 4
_hObj$ = 8						; size = 4
_ScrollPos$ = 12					; size = 4
_HEADER_SetScrollPos PROC				; COMDAT
; Line 642
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 643
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN3@HEADER_Set@4
	cmp	DWORD PTR _ScrollPos$[ebp], 0
	jl	SHORT $LN3@HEADER_Set@4
; Line 646
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$13004[ebp], eax
; Line 647
	mov	eax, DWORD PTR _pObj$13004[ebp]
	mov	ecx, DWORD PTR _ScrollPos$[ebp]
	cmp	ecx, DWORD PTR [eax+92]
	je	SHORT $LN1@HEADER_Set@4
; Line 648
	mov	eax, DWORD PTR _pObj$13004[ebp]
	mov	ecx, DWORD PTR _ScrollPos$[ebp]
	mov	DWORD PTR [eax+92], ecx
; Line 649
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 650
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetParent
	add	esp, 4
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN1@HEADER_Set@4:
; Line 652
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$13004[ebp], 0
$LN3@HEADER_Set@4:
; Line 655
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_HEADER_SetScrollPos ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_HEADER_AddItem
EXTRN	_strcpy:PROC
EXTRN	_GUI_ARRAY_AddItem:PROC
EXTRN	_GUI_GetStringDistX:PROC
EXTRN	_GUI_SetFont:PROC
EXTRN	_strlen:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _HEADER_AddItem
_TEXT	SEGMENT
tv71 = -296						; size = 4
_pColumn$13029 = -96					; size = 4
_pFont$13025 = -84					; size = 4
_Len$13021 = -72					; size = 4
_Index$13020 = -60					; size = 4
_Columns$13019 = -48					; size = 4
_Column$13018 = -36					; size = 16
_pObj$13017 = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_hObj$ = 8						; size = 4
_Width$ = 12						; size = 4
_s$ = 16						; size = 4
_Align$ = 20						; size = 4
_HEADER_AddItem PROC					; COMDAT
; Line 661
	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 662
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN8@HEADER_Add
; Line 670
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$13017[ebp], eax
; Line 671
	mov	eax, DWORD PTR _pObj$13017[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _Columns$13019[ebp], ecx
; Line 672
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN10@HEADER_Add
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN11@HEADER_Add
$LN10@HEADER_Add:
	mov	DWORD PTR tv71[ebp], 0
$LN11@HEADER_Add:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _Len$13021[ebp], ecx
; Line 673
	cmp	DWORD PTR _Width$[ebp], 0
	jne	SHORT $LN5@HEADER_Add
	cmp	DWORD PTR _Len$13021[ebp], 0
	je	$LN8@HEADER_Add
$LN5@HEADER_Add:
; Line 674
	cmp	DWORD PTR _Width$[ebp], 0
	jne	SHORT $LN4@HEADER_Add
; Line 676
	mov	eax, DWORD PTR _pObj$13017[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_GUI_SetFont
	add	esp, 4
	mov	DWORD PTR _pFont$13025[ebp], eax
; Line 677
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_GUI_GetStringDistX
	add	esp, 4
	mov	ecx, DWORD PTR _pObj$13017[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	ecx, DWORD PTR [edx]
	add	ecx, DWORD PTR _HEADER__DefaultBorderH
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _Width$[ebp], edx
; Line 678
	mov	eax, DWORD PTR _pFont$13025[ebp]
	push	eax
	call	_GUI_SetFont
	add	esp, 4
$LN4@HEADER_Add:
; Line 680
	mov	eax, DWORD PTR _Width$[ebp]
	mov	DWORD PTR _Column$13018[ebp], eax
; Line 681
	mov	ax, WORD PTR _Align$[ebp]
	mov	WORD PTR _Column$13018[ebp+4], ax
; Line 682
	mov	DWORD PTR _Column$13018[ebp+8], 0
; Line 683
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$13017[ebp], 0
; Line 684
	mov	eax, DWORD PTR _Columns$13019[ebp]
	push	eax
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	mov	DWORD PTR _Index$13020[ebp], eax
; Line 685
	mov	eax, DWORD PTR _Len$13021[ebp]
	add	eax, 17					; 00000011H
	push	eax
	lea	ecx, DWORD PTR _Column$13018[ebp]
	push	ecx
	mov	edx, DWORD PTR _Columns$13019[ebp]
	push	edx
	call	_GUI_ARRAY_AddItem
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@HEADER_Add
; Line 687
	mov	eax, DWORD PTR _Index$13020[ebp]
	push	eax
	mov	ecx, DWORD PTR _Columns$13019[ebp]
	push	ecx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pColumn$13029[ebp], eax
; Line 688
	cmp	DWORD PTR _Len$13021[ebp], 0
	je	SHORT $LN2@HEADER_Add
; Line 689
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pColumn$13029[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 690
	jmp	SHORT $LN1@HEADER_Add
$LN2@HEADER_Add:
; Line 691
	mov	eax, DWORD PTR _pColumn$13029[ebp]
	mov	BYTE PTR [eax+12], 0
$LN1@HEADER_Add:
; Line 693
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pColumn$13029[ebp], 0
; Line 694
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 695
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetParent
	add	esp, 4
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN8@HEADER_Add:
; Line 700
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@HEADER_Add
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@HEADER_Add:
	DD	1
	DD	$LN13@HEADER_Add
$LN13@HEADER_Add:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN12@HEADER_Add
$LN12@HEADER_Add:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	110					; 0000006eH
	DB	0
_HEADER_AddItem ENDP
_TEXT	ENDS
PUBLIC	_HEADER_DeleteItem
EXTRN	_GUI_ARRAY_DeleteItem:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _HEADER_DeleteItem
_TEXT	SEGMENT
_pObj$13040 = -8					; size = 4
_hObj$ = 8						; size = 4
_Index$ = 12						; size = 4
_HEADER_DeleteItem PROC					; COMDAT
; Line 706
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 707
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN3@HEADER_Del
; Line 710
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$13040[ebp], eax
; Line 711
	mov	eax, DWORD PTR _pObj$13040[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	cmp	DWORD PTR _Index$[ebp], eax
	jae	SHORT $LN1@HEADER_Del
; Line 712
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$13040[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	call	_GUI_ARRAY_DeleteItem
	add	esp, 8
; Line 713
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 714
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetParent
	add	esp, 4
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN1@HEADER_Del:
; Line 716
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$13040[ebp], 0
$LN3@HEADER_Del:
; Line 719
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_HEADER_DeleteItem ENDP
_TEXT	ENDS
PUBLIC	_HEADER_SetItemText
EXTRN	_GUI_ARRAY_ResizeItemLocked:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _HEADER_SetItemText
_TEXT	SEGMENT
_pColumn$13055 = -32					; size = 4
_pObj$13052 = -20					; size = 4
_Columns$13051 = -8					; size = 4
_hObj$ = 8						; size = 4
_Index$ = 12						; size = 4
_s$ = 16						; size = 4
_HEADER_SetItemText PROC				; COMDAT
; Line 725
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 726
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN4@HEADER_Set@5
; Line 730
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$13052[ebp], eax
; Line 731
	mov	eax, DWORD PTR _pObj$13052[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _Columns$13051[ebp], ecx
; Line 732
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$13052[ebp], 0
; Line 733
	mov	eax, DWORD PTR _Columns$13051[ebp]
	push	eax
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	cmp	DWORD PTR _Index$[ebp], eax
	jae	SHORT $LN4@HEADER_Set@5
; Line 735
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _Index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Columns$13051[ebp]
	push	edx
	call	_GUI_ARRAY_ResizeItemLocked
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pColumn$13055[ebp], eax
; Line 736
	cmp	DWORD PTR _pColumn$13055[ebp], 0
	je	SHORT $LN4@HEADER_Set@5
; Line 737
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pColumn$13055[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 738
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pColumn$13055[ebp], 0
$LN4@HEADER_Set@5:
; Line 743
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_HEADER_SetItemText ENDP
_TEXT	ENDS
EXTRN	_WM__SendMessage:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _HEADER_SetItemWidth
_TEXT	SEGMENT
_Msg$13075 = -56					; size = 16
_pColumn$13072 = -32					; size = 4
_pObj$13069 = -20					; size = 4
_Columns$13068 = -8					; size = 4
_hObj$ = 8						; size = 4
_Index$ = 12						; size = 4
_Width$ = 16						; size = 4
_HEADER_SetItemWidth PROC				; COMDAT
; Line 749
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 750
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN5@HEADER_Set@6
	cmp	DWORD PTR _Width$[ebp], 0
	jl	$LN5@HEADER_Set@6
; Line 754
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$13069[ebp], eax
; Line 755
	mov	eax, DWORD PTR _pObj$13069[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _Columns$13068[ebp], ecx
; Line 756
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$13069[ebp], 0
; Line 757
	mov	eax, DWORD PTR _Columns$13068[ebp]
	push	eax
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	cmp	DWORD PTR _Index$[ebp], eax
	ja	$LN5@HEADER_Set@6
; Line 759
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Columns$13068[ebp]
	push	ecx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pColumn$13072[ebp], eax
; Line 760
	cmp	DWORD PTR _pColumn$13072[ebp], 0
	je	SHORT $LN2@HEADER_Set@6
; Line 762
	mov	eax, DWORD PTR _pColumn$13072[ebp]
	mov	ecx, DWORD PTR _Width$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 763
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pColumn$13072[ebp], 0
; Line 764
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetParent
	add	esp, 4
	mov	DWORD PTR _Msg$13075[ebp+4], eax
; Line 765
	mov	DWORD PTR _Msg$13075[ebp], 37		; 00000025H
; Line 766
	mov	eax, DWORD PTR _hObj$[ebp]
	mov	DWORD PTR _Msg$13075[ebp+8], eax
; Line 767
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 768
	lea	eax, DWORD PTR _Msg$13075[ebp]
	push	eax
	mov	ecx, DWORD PTR _Msg$13075[ebp+4]
	push	ecx
	call	_WM__SendMessage
	add	esp, 8
; Line 769
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetParent
	add	esp, 4
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 770
	jmp	SHORT $LN5@HEADER_Set@6
$LN2@HEADER_Set@6:
; Line 771
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pColumn$13072[ebp], 0
$LN5@HEADER_Set@6:
; Line 776
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@HEADER_Set@6
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@HEADER_Set@6:
	DD	1
	DD	$LN8@HEADER_Set@6
$LN8@HEADER_Set@6:
	DD	-56					; ffffffc8H
	DD	16					; 00000010H
	DD	$LN7@HEADER_Set@6
$LN7@HEADER_Set@6:
	DB	77					; 0000004dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
_HEADER_SetItemWidth ENDP
_TEXT	ENDS
PUBLIC	_HEADER_GetHeight
EXTRN	_GUI_MoveRect:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _HEADER_GetHeight
_TEXT	SEGMENT
_Rect$13084 = -24					; size = 8
_Height$ = -8						; size = 4
_hObj$ = 8						; size = 4
_HEADER_GetHeight PROC					; COMDAT
; Line 782
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 783
	mov	DWORD PTR _Height$[ebp], 0
; Line 784
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN1@HEADER_Get
; Line 786
	lea	eax, DWORD PTR _Rect$13084[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_GetClientRectEx
	add	esp, 8
; Line 787
	movsx	eax, WORD PTR _Rect$13084[ebp+2]
	neg	eax
	push	eax
	movsx	ecx, WORD PTR _Rect$13084[ebp]
	neg	ecx
	push	ecx
	lea	edx, DWORD PTR _Rect$13084[ebp]
	push	edx
	call	_GUI_MoveRect
	add	esp, 12					; 0000000cH
; Line 788
	movsx	eax, WORD PTR _Rect$13084[ebp+6]
	movsx	ecx, WORD PTR _Rect$13084[ebp+2]
	sub	eax, ecx
	add	eax, 1
	mov	DWORD PTR _Height$[ebp], eax
$LN1@HEADER_Get:
; Line 790
	mov	eax, DWORD PTR _Height$[ebp]
; Line 791
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@HEADER_Get
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@HEADER_Get:
	DD	1
	DD	$LN5@HEADER_Get
$LN5@HEADER_Get:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN4@HEADER_Get
$LN4@HEADER_Get:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_HEADER_GetHeight ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _HEADER_GetItemWidth
_TEXT	SEGMENT
_pColumn$13094 = -32					; size = 4
_pObj$13092 = -20					; size = 4
_Width$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Index$ = 12						; size = 4
_HEADER_GetItemWidth PROC				; COMDAT
; Line 797
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 798
	mov	DWORD PTR _Width$[ebp], 0
; Line 799
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN2@HEADER_Get@2
; Line 802
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$13092[ebp], eax
; Line 803
	mov	eax, DWORD PTR _pObj$13092[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	cmp	DWORD PTR _Index$[ebp], eax
	ja	SHORT $LN1@HEADER_Get@2
; Line 805
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$13092[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pColumn$13094[ebp], eax
; Line 806
	mov	eax, DWORD PTR _pColumn$13094[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Width$[ebp], ecx
; Line 807
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pColumn$13094[ebp], 0
$LN1@HEADER_Get@2:
; Line 809
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$13092[ebp], 0
$LN2@HEADER_Get@2:
; Line 812
	mov	eax, DWORD PTR _Width$[ebp]
; Line 813
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_HEADER_GetItemWidth ENDP
_TEXT	ENDS
PUBLIC	_HEADER_GetNumItems
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _HEADER_GetNumItems
_TEXT	SEGMENT
_pObj$13103 = -20					; size = 4
_NumCols$ = -8						; size = 4
_hObj$ = 8						; size = 4
_HEADER_GetNumItems PROC				; COMDAT
; Line 819
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 820
	mov	DWORD PTR _NumCols$[ebp], 0
; Line 821
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN1@HEADER_Get@3
; Line 824
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$13103[ebp], eax
; Line 825
	mov	eax, DWORD PTR _pObj$13103[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	mov	DWORD PTR _NumCols$[ebp], eax
; Line 826
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$13103[ebp], 0
$LN1@HEADER_Get@3:
; Line 829
	mov	eax, DWORD PTR _NumCols$[ebp]
; Line 830
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_HEADER_GetNumItems ENDP
_TEXT	ENDS
PUBLIC	_HEADER_SetDirIndicator
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _HEADER_SetDirIndicator
_TEXT	SEGMENT
_pObj$13113 = -8					; size = 4
_hObj$ = 8						; size = 4
_Column$ = 12						; size = 4
_Reverse$ = 16						; size = 4
_HEADER_SetDirIndicator PROC				; COMDAT
; Line 836
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 837
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN4@HEADER_Set@7
; Line 840
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$13113[ebp], eax
; Line 841
	mov	eax, DWORD PTR _pObj$13113[ebp]
	mov	ecx, DWORD PTR [eax+100]
	cmp	ecx, DWORD PTR _Column$[ebp]
	jne	SHORT $LN1@HEADER_Set@7
	mov	eax, DWORD PTR _pObj$13113[ebp]
	mov	ecx, DWORD PTR [eax+104]
	cmp	ecx, DWORD PTR _Reverse$[ebp]
	je	SHORT $LN2@HEADER_Set@7
$LN1@HEADER_Set@7:
; Line 842
	mov	eax, DWORD PTR _pObj$13113[ebp]
	mov	ecx, DWORD PTR _Column$[ebp]
	mov	DWORD PTR [eax+100], ecx
; Line 843
	mov	eax, DWORD PTR _pObj$13113[ebp]
	mov	ecx, DWORD PTR _Reverse$[ebp]
	mov	DWORD PTR [eax+104], ecx
; Line 844
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN2@HEADER_Set@7:
; Line 846
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$13113[ebp], 0
$LN4@HEADER_Set@7:
; Line 849
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_HEADER_SetDirIndicator ENDP
_TEXT	ENDS
END
