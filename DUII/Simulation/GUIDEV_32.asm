; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\MemDev\GUIDEV_32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_MEMDEV_DEVICE_32
_DATA	SEGMENT
$SG10018 DB	'_XY2PTR: parameters out of bounds', 00H
	ORG $+2
$SG10049 DB	'GUIDEV.c: DrawBitLine1BPP, Act= %d, Border= %d, Clip= %d'
	DB	00H
_DATA	ENDS
CONST	SEGMENT
_aID	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	09H
	DD	0aH
	DD	0bH
	DD	0cH
	DD	0dH
	DD	0eH
	DD	0fH
_GUI_MEMDEV_DEVICE_32 DD 04H
	DD	FLAT:__DrawBitmap
	DD	FLAT:__DrawHLine
	DD	FLAT:__DrawVLine
	DD	FLAT:__FillRect
	DD	FLAT:__GetPixelIndex
	DD	FLAT:__SetPixelIndex
	DD	FLAT:__XorPixel
	DD	FLAT:__SetOrg
	DD	FLAT:__GetDevFunc
	DD	FLAT:__GetDevProp
	DD	FLAT:__GetDevData
	DD	FLAT:__GetRect
CONST	ENDS
EXTRN	_GUI_USAGE_AddRect:PROC
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\memdev\guidev_32.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __DrawBitmap
_TEXT	SEGMENT
tv170 = -256						; size = 4
tv71 = -256						; size = 4
_pDest$ = -56						; size = 4
_BytesPerLineDest$ = -44				; size = 4
_pUsage$ = -32						; size = 4
_pDev$ = -20						; size = 4
_i$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xsize$ = 20						; size = 4
_ysize$ = 24						; size = 4
_BitsPerPixel$ = 28					; size = 4
_BytesPerLine$ = 32					; size = 4
_pData$ = 36						; size = 4
_Diff$ = 40						; size = 4
_pTrans$ = 44						; size = 4
__DrawBitmap PROC					; COMDAT
; Line 532
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 534
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 535
	mov	eax, DWORD PTR _pDev$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN29@DrawBitmap
	mov	ecx, DWORD PTR _pDev$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN30@DrawBitmap
$LN29@DrawBitmap:
	mov	DWORD PTR tv71[ebp], 0
$LN30@DrawBitmap:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _pUsage$[ebp], eax
; Line 538
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _BytesPerLineDest$[ebp], ecx
; Line 539
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x0$[ebp], eax
; Line 541
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN26@DrawBitmap
; Line 542
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 2
	jne	SHORT $LN26@DrawBitmap
; Line 543
	mov	eax, DWORD PTR _ysize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pUsage$[ebp]
	push	ecx
	call	_GUI_USAGE_AddRect
	add	esp, 20					; 00000014H
$LN26@DrawBitmap:
; Line 546
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pDest$[ebp], eax
; Line 567
	cmp	DWORD PTR _BitsPerPixel$[ebp], 24	; 00000018H
	jl	SHORT $LN24@DrawBitmap
; Line 568
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN23@DrawBitmap
$LN22@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN23@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ysize$[ebp]
	jge	SHORT $LN21@DrawBitmap
; Line 569
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine32BPP_DDB
	add	esp, 28					; 0000001cH
; Line 570
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 571
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, DWORD PTR _BytesPerLineDest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 572
	jmp	SHORT $LN22@DrawBitmap
$LN21@DrawBitmap:
; Line 573
	jmp	$LN27@DrawBitmap
	jmp	SHORT $LN20@DrawBitmap
$LN24@DrawBitmap:
; Line 574
	cmp	DWORD PTR _BitsPerPixel$[ebp], 16	; 00000010H
	jne	SHORT $LN20@DrawBitmap
; Line 575
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@DrawBitmap
$LN17@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN18@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ysize$[ebp]
	jge	SHORT $LN16@DrawBitmap
; Line 576
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine16BPP
	add	esp, 28					; 0000001cH
; Line 577
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 578
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, DWORD PTR _BytesPerLineDest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 579
	jmp	SHORT $LN17@DrawBitmap
$LN16@DrawBitmap:
; Line 580
	jmp	$LN27@DrawBitmap
$LN20@DrawBitmap:
; Line 584
	cmp	DWORD PTR _BitsPerPixel$[ebp], 8
	jne	$LN15@DrawBitmap
; Line 585
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@DrawBitmap
$LN13@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ysize$[ebp]
	jge	SHORT $LN12@DrawBitmap
; Line 586
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	SHORT $LN11@DrawBitmap
; Line 587
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTrans$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__DrawBitLine8BPP
	add	esp, 32					; 00000020H
; Line 588
	jmp	SHORT $LN10@DrawBitmap
$LN11@DrawBitmap:
; Line 589
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine8BPP_DDB
	add	esp, 28					; 0000001cH
$LN10@DrawBitmap:
; Line 591
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 592
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, DWORD PTR _BytesPerLineDest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 593
	jmp	SHORT $LN13@DrawBitmap
$LN12@DrawBitmap:
; Line 594
	jmp	$LN27@DrawBitmap
$LN15@DrawBitmap:
; Line 597
	cmp	DWORD PTR _pTrans$[ebp], 0
	jne	SHORT $LN9@DrawBitmap
; Line 598
	mov	DWORD PTR _pTrans$[ebp], OFFSET _aID
$LN9@DrawBitmap:
; Line 600
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@DrawBitmap
$LN7@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ysize$[ebp]
	jge	$LN27@DrawBitmap
; Line 601
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR tv170[ebp], eax
	cmp	DWORD PTR tv170[ebp], 1
	je	SHORT $LN3@DrawBitmap
	cmp	DWORD PTR tv170[ebp], 2
	je	SHORT $LN2@DrawBitmap
	cmp	DWORD PTR tv170[ebp], 4
	je	SHORT $LN1@DrawBitmap
	jmp	$LN4@DrawBitmap
$LN3@DrawBitmap:
; Line 603
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pTrans$[ebp]
	push	edx
	mov	eax, DWORD PTR _xsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Diff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine1BPP
	add	esp, 40					; 00000028H
; Line 604
	jmp	SHORT $LN4@DrawBitmap
$LN2@DrawBitmap:
; Line 606
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTrans$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _Diff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pUsage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__DrawBitLine2BPP
	add	esp, 36					; 00000024H
; Line 607
	jmp	SHORT $LN4@DrawBitmap
$LN1@DrawBitmap:
; Line 609
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTrans$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _Diff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pUsage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__DrawBitLine4BPP
	add	esp, 36					; 00000024H
$LN4@DrawBitmap:
; Line 612
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 613
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, DWORD PTR _BytesPerLineDest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 614
	jmp	$LN7@DrawBitmap
$LN27@DrawBitmap:
; Line 615
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitmap ENDP
_TEXT	ENDS
EXTRN	_GUI__MixColors:PROC
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitLine32BPP_DDB
_TEXT	SEGMENT
_Color$ = -32						; size = 4
_Alpha$ = -17						; size = 1
_Dist$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_pUsage$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_pSrc$ = 24						; size = 4
_xSize$ = 28						; size = 4
_pDest$ = 32						; size = 4
__DrawBitLine32BPP_DDB PROC				; COMDAT
; Line 67
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 72
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 73
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN6@DrawBitLin
; Line 74
	mov	esi, esp
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pUsage$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@DrawBitLin:
; Line 77
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSrc$[ebp]
	push	ecx
	call	__GetDistToNextAlpha
	add	esp, 8
	mov	DWORD PTR _Dist$[ebp], eax
; Line 78
	cmp	DWORD PTR _Dist$[ebp], 0
	je	SHORT $LN3@DrawBitLin
; Line 79
	mov	eax, DWORD PTR _Dist$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _pSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDest$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 80
	mov	eax, DWORD PTR _Dist$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pDest$[ebp], edx
; Line 81
	mov	eax, DWORD PTR _Dist$[ebp]
	mov	ecx, DWORD PTR _pSrc$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pSrc$[ebp], edx
; Line 82
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, DWORD PTR _Dist$[ebp]
	mov	DWORD PTR _xSize$[ebp], eax
; Line 83
	jmp	SHORT $LN5@DrawBitLin
$LN3@DrawBitLin:
; Line 84
	mov	eax, DWORD PTR _pSrc$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Color$[ebp], ecx
; Line 85
	mov	eax, DWORD PTR _Color$[ebp]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _Alpha$[ebp], al
; Line 86
	movzx	eax, BYTE PTR _Alpha$[ebp]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN1@DrawBitLin
; Line 87
	movzx	eax, BYTE PTR _Alpha$[ebp]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _Color$[ebp]
	push	ecx
	call	_GUI__MixColors
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@DrawBitLin:
; Line 89
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDest$[ebp], eax
; Line 90
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 4
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 91
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
$LN5@DrawBitLin:
; Line 93
	cmp	DWORD PTR _xSize$[ebp], 0
	jne	$LN6@DrawBitLin
; Line 94
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine32BPP_DDB ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDistToNextAlpha
_TEXT	SEGMENT
_Alpha$ = -17						; size = 1
_Dist$ = -8						; size = 4
_pSrc$ = 8						; size = 4
_xsize$ = 12						; size = 4
__GetDistToNextAlpha PROC				; COMDAT
; Line 51
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 52
	mov	DWORD PTR _Dist$[ebp], 0
$LN5@GetDistToN:
; Line 55
	mov	eax, DWORD PTR _pSrc$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR _Alpha$[ebp], cl
	mov	edx, DWORD PTR _pSrc$[ebp]
	add	edx, 4
	mov	DWORD PTR _pSrc$[ebp], edx
; Line 56
	movzx	eax, BYTE PTR _Alpha$[ebp]
	test	eax, eax
	jne	SHORT $LN4@GetDistToN
; Line 57
	mov	eax, DWORD PTR _Dist$[ebp]
	add	eax, 1
	mov	DWORD PTR _Dist$[ebp], eax
$LN4@GetDistToN:
; Line 59
	movzx	eax, BYTE PTR _Alpha$[ebp]
	test	eax, eax
	jne	SHORT $LN3@GetDistToN
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN5@GetDistToN
$LN3@GetDistToN:
; Line 60
	mov	eax, DWORD PTR _Dist$[ebp]
; Line 61
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDistToNextAlpha ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine16BPP
_TEXT	SEGMENT
_Index$10004 = -20					; size = 2
_Color$10003 = -8					; size = 4
_pDevice$ = 8						; size = 4
_pUsage$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_pSrc$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pDest$ = 32						; size = 4
__DrawBitLine16BPP PROC					; COMDAT
; Line 100
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 101
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN4@DrawBitLin@2
; Line 102
	mov	esi, esp
	mov	eax, DWORD PTR _xsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pUsage$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@DrawBitLin@2:
; Line 108
	mov	eax, DWORD PTR _pSrc$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _Index$10004[ebp], cx
; Line 109
	movzx	eax, WORD PTR _Index$10004[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Color$10003[ebp], eax
; Line 110
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	ecx, DWORD PTR _Color$10003[ebp]
	mov	DWORD PTR [eax], ecx
; Line 111
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN1@DrawBitLin@2
; Line 112
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DrawBitLin@2:
; Line 114
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 115
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDest$[ebp], eax
; Line 116
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 117
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN4@DrawBitLin@2
; Line 118
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine16BPP ENDP
_TEXT	ENDS
EXTRN	_GUI_ErrorOut2:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __XY2PTR
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_pDev$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__XY2PTR PROC						; COMDAT
; Line 144
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 145
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 146
	mov	eax, DWORD PTR _pDev$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _pData$[ebp], eax
; Line 148
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [edx+8]
	add	ecx, eax
	xor	edx, edx
	cmp	DWORD PTR _x$[ebp], ecx
	setge	dl
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	xor	eax, eax
	cmp	DWORD PTR _x$[ebp], ecx
	setl	al
	or	edx, eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [ecx+6]
	mov	ecx, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [ecx+10]
	add	eax, ecx
	xor	ecx, ecx
	cmp	DWORD PTR _y$[ebp], eax
	setge	cl
	or	edx, ecx
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	xor	eax, eax
	cmp	DWORD PTR _y$[ebp], ecx
	setl	al
	or	edx, eax
	je	SHORT $LN1@XY2PTR
; Line 149
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	push	OFFSET $SG10018
	call	_GUI_ErrorOut2
	add	esp, 12					; 0000000cH
$LN1@XY2PTR:
; Line 152
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _pDev$[ebp]
	imul	edx, DWORD PTR [eax+12]
	add	edx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pData$[ebp], edx
; Line 153
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [edx+4]
	shl	ecx, 2
	sub	eax, ecx
; Line 154
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__XY2PTR ENDP
_TEXT	ENDS
EXTRN	_GUI_ErrorOut3:PROC
EXTRN	_LCD_aMirror:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitLine1BPP
_TEXT	SEGMENT
tv81 = -244						; size = 4
_PixelCnt$ = -44					; size = 4
_pixels$ = -32						; size = 4
_IndexMask$ = -20					; size = 4
_Index1$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_pUsage$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_p$ = 24						; size = 4
_Diff$ = 28						; size = 4
_xsize$ = 32						; size = 4
_pTrans$ = 36						; size = 4
_pDev$ = 40						; size = 4
_pDest$ = 44						; size = 4
__DrawBitLine1BPP PROC					; COMDAT
; Line 162
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 168
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 169
	mov	eax, 8
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _PixelCnt$[ebp], eax
; Line 170
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _LCD_aMirror[ecx]
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	edx, cl
	mov	DWORD PTR _pixels$[ebp], edx
; Line 172
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	cmp	DWORD PTR _x$[ebp], ecx
	jge	SHORT $LN42@DrawBitLin@3
	movsx	eax, WORD PTR _GUI_Context+8
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	push	OFFSET $SG10049
	call	_GUI_ErrorOut3
	add	esp, 16					; 00000010H
$LN42@DrawBitLin@3:
; Line 174
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv81[ebp], eax
	cmp	DWORD PTR tv81[ebp], 3
	ja	$LN43@DrawBitLin@3
	mov	ecx, DWORD PTR tv81[ebp]
	jmp	DWORD PTR $LN45@DrawBitLin@3[ecx*4]
$LN38@DrawBitLin@3:
; Line 178
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jbe	SHORT $LN35@DrawBitLin@3
; Line 179
	mov	eax, DWORD PTR _xsize$[ebp]
	mov	DWORD PTR _PixelCnt$[ebp], eax
$LN35@DrawBitLin@3:
; Line 181
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, DWORD PTR _PixelCnt$[ebp]
	mov	DWORD PTR _xsize$[ebp], eax
$LN34@DrawBitLin@3:
; Line 184
	mov	eax, DWORD PTR _pixels$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR _pDest$[ebp]
	add	ecx, 4
	mov	DWORD PTR _pDest$[ebp], ecx
; Line 185
	mov	eax, DWORD PTR _pixels$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pixels$[ebp], eax
; Line 186
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _PixelCnt$[ebp], eax
	jne	SHORT $LN34@DrawBitLin@3
; Line 188
	cmp	DWORD PTR _xsize$[ebp], 0
	jne	SHORT $LN31@DrawBitLin@3
; Line 189
	jmp	$LN43@DrawBitLin@3
$LN31@DrawBitLin@3:
; Line 191
	mov	DWORD PTR _PixelCnt$[ebp], 8
; Line 192
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _LCD_aMirror[edx]
	mov	DWORD PTR _pixels$[ebp], eax
; Line 193
	mov	eax, 1
	test	eax, eax
	jne	SHORT $LN38@DrawBitLin@3
$LN30@DrawBitLin@3:
; Line 195
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Index1$[ebp], ecx
$LN29@DrawBitLin@3:
; Line 198
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jbe	SHORT $LN26@DrawBitLin@3
; Line 199
	mov	eax, DWORD PTR _xsize$[ebp]
	mov	DWORD PTR _PixelCnt$[ebp], eax
$LN26@DrawBitLin@3:
; Line 201
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, DWORD PTR _PixelCnt$[ebp]
	mov	DWORD PTR _xsize$[ebp], eax
; Line 202
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	$LN17@DrawBitLin@3
$LN24@DrawBitLin@3:
; Line 204
	cmp	DWORD PTR _pixels$[ebp], 0
	jne	SHORT $LN21@DrawBitLin@3
; Line 205
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pDest$[ebp], edx
; Line 206
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _PixelCnt$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 207
	jmp	SHORT $LN22@DrawBitLin@3
$LN21@DrawBitLin@3:
; Line 209
	mov	eax, DWORD PTR _pixels$[ebp]
	and	eax, 1
	je	SHORT $LN20@DrawBitLin@3
; Line 210
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 211
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	ecx, DWORD PTR _Index1$[ebp]
	mov	DWORD PTR [eax], ecx
$LN20@DrawBitLin@3:
; Line 213
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 214
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDest$[ebp], eax
; Line 215
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _PixelCnt$[ebp], eax
	jne	SHORT $LN19@DrawBitLin@3
; Line 216
	jmp	SHORT $LN22@DrawBitLin@3
$LN19@DrawBitLin@3:
; Line 218
	mov	eax, DWORD PTR _pixels$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pixels$[ebp], eax
; Line 219
	mov	eax, 1
	test	eax, eax
	jne	SHORT $LN24@DrawBitLin@3
$LN22@DrawBitLin@3:
; Line 220
	jmp	SHORT $LN18@DrawBitLin@3
$LN17@DrawBitLin@3:
; Line 222
	cmp	DWORD PTR _pixels$[ebp], 0
	jne	SHORT $LN14@DrawBitLin@3
; Line 223
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pDest$[ebp], edx
; Line 224
	jmp	SHORT $LN18@DrawBitLin@3
$LN14@DrawBitLin@3:
; Line 226
	mov	eax, DWORD PTR _pixels$[ebp]
	and	eax, 1
	je	SHORT $LN13@DrawBitLin@3
; Line 227
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	ecx, DWORD PTR _Index1$[ebp]
	mov	DWORD PTR [eax], ecx
$LN13@DrawBitLin@3:
; Line 229
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDest$[ebp], eax
; Line 230
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _PixelCnt$[ebp], eax
	jne	SHORT $LN12@DrawBitLin@3
; Line 231
	jmp	SHORT $LN18@DrawBitLin@3
$LN12@DrawBitLin@3:
; Line 233
	mov	eax, DWORD PTR _pixels$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pixels$[ebp], eax
; Line 234
	mov	eax, 1
	test	eax, eax
	jne	SHORT $LN17@DrawBitLin@3
$LN18@DrawBitLin@3:
; Line 237
	cmp	DWORD PTR _xsize$[ebp], 0
	jne	SHORT $LN11@DrawBitLin@3
; Line 238
	jmp	$LN43@DrawBitLin@3
$LN11@DrawBitLin@3:
; Line 240
	mov	DWORD PTR _PixelCnt$[ebp], 8
; Line 241
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _LCD_aMirror[edx]
	mov	DWORD PTR _pixels$[ebp], eax
; Line 242
	mov	eax, 1
	test	eax, eax
	jne	$LN29@DrawBitLin@3
$LN10@DrawBitLin@3:
; Line 245
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$[ebp], eax
$LN9@DrawBitLin@3:
; Line 248
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jbe	SHORT $LN6@DrawBitLin@3
; Line 249
	mov	eax, DWORD PTR _xsize$[ebp]
	mov	DWORD PTR _PixelCnt$[ebp], eax
$LN6@DrawBitLin@3:
; Line 251
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, DWORD PTR _PixelCnt$[ebp]
	mov	DWORD PTR _xsize$[ebp], eax
$LN5@DrawBitLin@3:
; Line 254
	mov	eax, DWORD PTR _pixels$[ebp]
	and	eax, 1
	je	SHORT $LN2@DrawBitLin@3
; Line 255
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	ecx, DWORD PTR _IndexMask$[ebp]
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	DWORD PTR [edx], ecx
$LN2@DrawBitLin@3:
; Line 257
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDest$[ebp], eax
; Line 258
	mov	eax, DWORD PTR _pixels$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pixels$[ebp], eax
; Line 259
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _PixelCnt$[ebp], eax
	jne	SHORT $LN5@DrawBitLin@3
; Line 261
	cmp	DWORD PTR _xsize$[ebp], 0
	jne	SHORT $LN1@DrawBitLin@3
; Line 262
	jmp	SHORT $LN43@DrawBitLin@3
$LN1@DrawBitLin@3:
; Line 264
	mov	DWORD PTR _PixelCnt$[ebp], 8
; Line 265
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _LCD_aMirror[edx]
	mov	DWORD PTR _pixels$[ebp], eax
; Line 266
	mov	eax, 1
	test	eax, eax
	jne	SHORT $LN9@DrawBitLin@3
$LN43@DrawBitLin@3:
; Line 268
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN45@DrawBitLin@3:
	DD	$LN38@DrawBitLin@3
	DD	$LN10@DrawBitLin@3
	DD	$LN30@DrawBitLin@3
	DD	$LN10@DrawBitLin@3
__DrawBitLine1BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine2BPP
_TEXT	SEGMENT
tv72 = -220						; size = 4
_PixelCnt$ = -17					; size = 1
_pixels$ = -5						; size = 1
_pDevice$ = 8						; size = 4
_pUsage$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_p$ = 24						; size = 4
_Diff$ = 28						; size = 4
_xsize$ = 32						; size = 4
_pTrans$ = 36						; size = 4
_pDest$ = 40						; size = 4
__DrawBitLine2BPP PROC					; COMDAT
; Line 276
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 280
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 281
	mov	eax, 4
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
; Line 282
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _Diff$[ebp]
	shl	ecx, 1
	shl	edx, cl
	mov	BYTE PTR _pixels$[ebp], dl
; Line 283
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv72[ebp], eax
	je	SHORT $PixelLoopWrite$10120
	cmp	DWORD PTR tv72[ebp], 1
	je	$PixelLoopXor$10136
	cmp	DWORD PTR tv72[ebp], 2
	je	SHORT $PixelLoopTrans$10127
	jmp	$LN24@DrawBitLin@4
$PixelLoopWrite$10120:
; Line 286
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jle	SHORT $LN20@DrawBitLin@4
; Line 287
	mov	al, BYTE PTR _xsize$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
$LN20@DrawBitLin@4:
; Line 289
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	mov	ecx, DWORD PTR _xsize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _xsize$[ebp], ecx
$LN19@DrawBitLin@4:
; Line 291
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 6
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR _pDest$[ebp]
	add	ecx, 4
	mov	DWORD PTR _pDest$[ebp], ecx
; Line 292
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 2
	mov	BYTE PTR _pixels$[ebp], al
; Line 293
	mov	al, BYTE PTR _PixelCnt$[ebp]
	sub	al, 1
	mov	BYTE PTR _PixelCnt$[ebp], al
	movzx	ecx, BYTE PTR _PixelCnt$[ebp]
	test	ecx, ecx
	jne	SHORT $LN19@DrawBitLin@4
; Line 294
	cmp	DWORD PTR _xsize$[ebp], 0
	je	SHORT $LN16@DrawBitLin@4
; Line 295
	mov	BYTE PTR _PixelCnt$[ebp], 4
; Line 296
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 297
	jmp	SHORT $PixelLoopWrite$10120
$LN16@DrawBitLin@4:
; Line 299
	jmp	$LN24@DrawBitLin@4
$PixelLoopTrans$10127:
; Line 302
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jle	SHORT $LN14@DrawBitLin@4
; Line 303
	mov	al, BYTE PTR _xsize$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
$LN14@DrawBitLin@4:
; Line 304
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	mov	ecx, DWORD PTR _xsize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _xsize$[ebp], ecx
$LN13@DrawBitLin@4:
; Line 306
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 192				; 000000c0H
	je	SHORT $LN10@DrawBitLin@4
; Line 307
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 6
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx], eax
; Line 308
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN10@DrawBitLin@4
; Line 309
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@DrawBitLin@4:
; Line 312
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDest$[ebp], eax
; Line 313
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 314
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 2
	mov	BYTE PTR _pixels$[ebp], al
; Line 315
	mov	al, BYTE PTR _PixelCnt$[ebp]
	sub	al, 1
	mov	BYTE PTR _PixelCnt$[ebp], al
	movzx	ecx, BYTE PTR _PixelCnt$[ebp]
	test	ecx, ecx
	jne	SHORT $LN13@DrawBitLin@4
; Line 316
	cmp	DWORD PTR _xsize$[ebp], 0
	je	SHORT $LN8@DrawBitLin@4
; Line 317
	mov	BYTE PTR _PixelCnt$[ebp], 4
; Line 318
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 319
	jmp	$PixelLoopTrans$10127
$LN8@DrawBitLin@4:
; Line 321
	jmp	SHORT $LN24@DrawBitLin@4
$PixelLoopXor$10136:
; Line 324
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jle	SHORT $LN6@DrawBitLin@4
; Line 325
	mov	al, BYTE PTR _xsize$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
$LN6@DrawBitLin@4:
; Line 326
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	mov	ecx, DWORD PTR _xsize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _xsize$[ebp], ecx
$LN5@DrawBitLin@4:
; Line 328
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 192				; 000000c0H
	je	SHORT $LN2@DrawBitLin@4
; Line 329
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	DWORD PTR [edx], ecx
$LN2@DrawBitLin@4:
; Line 330
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDest$[ebp], eax
; Line 331
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 2
	mov	BYTE PTR _pixels$[ebp], al
; Line 332
	mov	al, BYTE PTR _PixelCnt$[ebp]
	sub	al, 1
	mov	BYTE PTR _PixelCnt$[ebp], al
	movzx	ecx, BYTE PTR _PixelCnt$[ebp]
	test	ecx, ecx
	jne	SHORT $LN5@DrawBitLin@4
; Line 333
	cmp	DWORD PTR _xsize$[ebp], 0
	je	SHORT $LN24@DrawBitLin@4
; Line 334
	mov	BYTE PTR _PixelCnt$[ebp], 4
; Line 335
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 336
	jmp	SHORT $PixelLoopXor$10136
$LN24@DrawBitLin@4:
; Line 340
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine2BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine4BPP
_TEXT	SEGMENT
tv72 = -232						; size = 4
_i$10172 = -32						; size = 4
_PixelCnt$ = -17					; size = 1
_pixels$ = -5						; size = 1
_pDevice$ = 8						; size = 4
_pUsage$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_p$ = 24						; size = 4
_Diff$ = 28						; size = 4
_xsize$ = 32						; size = 4
_pTrans$ = 36						; size = 4
_pDest$ = 40						; size = 4
__DrawBitLine4BPP PROC					; COMDAT
; Line 348
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 352
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 353
	mov	eax, 2
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
; Line 354
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _Diff$[ebp]
	shl	ecx, 2
	shl	edx, cl
	mov	BYTE PTR _pixels$[ebp], dl
; Line 355
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv72[ebp], eax
	je	SHORT $LN27@DrawBitLin@5
	cmp	DWORD PTR tv72[ebp], 1
	je	$PixelLoopXor$10192
	cmp	DWORD PTR tv72[ebp], 2
	je	$LN20@DrawBitLin@5
	jmp	$LN30@DrawBitLin@5
$LN27@DrawBitLin@5:
; Line 361
	cmp	DWORD PTR _Diff$[ebp], 0
	je	SHORT $LN26@DrawBitLin@5
; Line 362
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 4
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx], eax
; Line 363
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDest$[ebp], eax
; Line 364
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
; Line 365
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
$LN26@DrawBitLin@5:
; Line 368
	cmp	DWORD PTR _xsize$[ebp], 2
	jl	SHORT $LN25@DrawBitLin@5
; Line 369
	mov	eax, DWORD PTR _xsize$[ebp]
	sar	eax, 1
	mov	DWORD PTR _i$10172[ebp], eax
; Line 370
	mov	eax, DWORD PTR _xsize$[ebp]
	and	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
$LN24@DrawBitLin@5:
; Line 372
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 4
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx], eax
; Line 373
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx+4], eax
; Line 374
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 8
	mov	DWORD PTR _pDest$[ebp], eax
; Line 375
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 376
	mov	eax, DWORD PTR _i$10172[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$10172[ebp], eax
	jne	SHORT $LN24@DrawBitLin@5
$LN25@DrawBitLin@5:
; Line 379
	cmp	DWORD PTR _xsize$[ebp], 0
	je	SHORT $LN21@DrawBitLin@5
; Line 380
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 4
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx], eax
$LN21@DrawBitLin@5:
; Line 382
	jmp	$LN30@DrawBitLin@5
$LN20@DrawBitLin@5:
; Line 388
	cmp	DWORD PTR _Diff$[ebp], 0
	je	SHORT $LN16@DrawBitLin@5
; Line 389
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 240				; 000000f0H
	je	SHORT $LN18@DrawBitLin@5
; Line 390
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 4
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx], eax
; Line 391
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN18@DrawBitLin@5
; Line 392
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@DrawBitLin@5:
; Line 395
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDest$[ebp], eax
; Line 396
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 397
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
; Line 398
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
$LN16@DrawBitLin@5:
; Line 401
	cmp	DWORD PTR _xsize$[ebp], 2
	jl	$LN15@DrawBitLin@5
; Line 403
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 240				; 000000f0H
	je	SHORT $LN14@DrawBitLin@5
; Line 404
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 4
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx], eax
; Line 405
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN14@DrawBitLin@5
; Line 406
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@DrawBitLin@5:
; Line 410
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 15					; 0000000fH
	mov	BYTE PTR _pixels$[ebp], al
	movzx	ecx, BYTE PTR _pixels$[ebp]
	test	ecx, ecx
	je	SHORT $LN12@DrawBitLin@5
; Line 411
	movzx	eax, BYTE PTR _pixels$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx+4], eax
; Line 412
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN12@DrawBitLin@5
; Line 413
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@DrawBitLin@5:
; Line 416
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 8
	mov	DWORD PTR _pDest$[ebp], eax
; Line 417
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 2
	mov	DWORD PTR _x$[ebp], eax
; Line 418
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 2
	mov	DWORD PTR _xsize$[ebp], eax
; Line 419
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 420
	jmp	$LN16@DrawBitLin@5
$LN15@DrawBitLin@5:
; Line 422
	cmp	DWORD PTR _xsize$[ebp], 0
	je	SHORT $LN10@DrawBitLin@5
; Line 423
	mov	al, BYTE PTR _pixels$[ebp]
	shr	al, 4
	mov	BYTE PTR _pixels$[ebp], al
	movzx	ecx, BYTE PTR _pixels$[ebp]
	test	ecx, ecx
	je	SHORT $LN10@DrawBitLin@5
; Line 424
	movzx	eax, BYTE PTR _pixels$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx], eax
; Line 425
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN10@DrawBitLin@5
; Line 426
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@DrawBitLin@5:
; Line 430
	jmp	SHORT $LN30@DrawBitLin@5
$PixelLoopXor$10192:
; Line 433
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jle	SHORT $LN6@DrawBitLin@5
; Line 434
	mov	al, BYTE PTR _xsize$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
$LN6@DrawBitLin@5:
; Line 435
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	mov	ecx, DWORD PTR _xsize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _xsize$[ebp], ecx
$LN5@DrawBitLin@5:
; Line 437
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 192				; 000000c0H
	je	SHORT $LN2@DrawBitLin@5
; Line 438
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	DWORD PTR [edx], ecx
$LN2@DrawBitLin@5:
; Line 440
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDest$[ebp], eax
; Line 441
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 4
	mov	BYTE PTR _pixels$[ebp], al
; Line 442
	mov	al, BYTE PTR _PixelCnt$[ebp]
	sub	al, 1
	mov	BYTE PTR _PixelCnt$[ebp], al
	movzx	ecx, BYTE PTR _PixelCnt$[ebp]
	test	ecx, ecx
	jne	SHORT $LN5@DrawBitLin@5
; Line 443
	cmp	DWORD PTR _xsize$[ebp], 0
	je	SHORT $LN30@DrawBitLin@5
; Line 444
	mov	BYTE PTR _PixelCnt$[ebp], 2
; Line 445
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 446
	jmp	SHORT $PixelLoopXor$10192
$LN30@DrawBitLin@5:
; Line 450
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine4BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine8BPP
_TEXT	SEGMENT
tv66 = -196						; size = 4
_pDevice$ = 8						; size = 4
_pUsage$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_pSrc$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
_pDest$ = 36						; size = 4
__DrawBitLine8BPP PROC					; COMDAT
; Line 457
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 458
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 459
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv66[ebp], eax
	je	SHORT $LN9@DrawBitLin@6
	cmp	DWORD PTR tv66[ebp], 2
	je	SHORT $LN5@DrawBitLin@6
	jmp	$LN13@DrawBitLin@6
$LN9@DrawBitLin@6:
; Line 462
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edx], ecx
; Line 463
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDest$[ebp], eax
; Line 464
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 465
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN9@DrawBitLin@6
; Line 466
	jmp	SHORT $LN13@DrawBitLin@6
$LN5@DrawBitLin@6:
; Line 469
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@DrawBitLin@6
; Line 470
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edx], ecx
; Line 471
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN2@DrawBitLin@6
; Line 472
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawBitLin@6:
; Line 475
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 476
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDest$[ebp], eax
; Line 477
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 478
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN5@DrawBitLin@6
$LN13@DrawBitLin@6:
; Line 481
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine8BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine8BPP_DDB
_TEXT	SEGMENT
tv66 = -196						; size = 4
_pDevice$ = 8						; size = 4
_pUsage$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_pSrc$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pDest$ = 32						; size = 4
__DrawBitLine8BPP_DDB PROC				; COMDAT
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 500
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 501
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv66[ebp], eax
	je	SHORT $LN7@DrawBitLin@7
	cmp	DWORD PTR tv66[ebp], 2
	je	SHORT $LN5@DrawBitLin@7
	jmp	SHORT $LN10@DrawBitLin@7
$LN7@DrawBitLin@7:
; Line 506
	mov	eax, DWORD PTR _xsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDest$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 508
	jmp	SHORT $LN10@DrawBitLin@7
$LN5@DrawBitLin@7:
; Line 511
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@DrawBitLin@7
; Line 512
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 513
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN2@DrawBitLin@7
; Line 514
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawBitLin@7:
; Line 517
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 518
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDest$[ebp], eax
; Line 519
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 520
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN5@DrawBitLin@7
$LN10@DrawBitLin@7:
; Line 523
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine8BPP_DDB ENDP
_TEXT	ENDS
EXTRN	_LCD_pColorIndex:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __FillRect
_TEXT	SEGMENT
_ColorIndex$ = -104					; size = 4
_IndexMask$ = -92					; size = 4
_pDest$ = -80						; size = 4
_pData$ = -68						; size = 4
_pDev$ = -56						; size = 4
_RemPixels$ = -44					; size = 4
_Len$ = -32						; size = 4
_Cnt$ = -20						; size = 4
_BytesPerLine$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
__FillRect PROC						; COMDAT
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 630
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 631
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 632
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pData$[ebp], eax
; Line 633
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _BytesPerLine$[ebp], ecx
; Line 634
	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _x0$[ebp]
	add	eax, 1
	mov	DWORD PTR _Len$[ebp], eax
; Line 635
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ColorIndex$[ebp], ecx
; Line 637
	mov	eax, DWORD PTR _pDev$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN13@FillRect
; Line 638
	mov	eax, DWORD PTR _y1$[ebp]
	sub	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _Len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	push	eax
	call	_GUI_USAGE_AddRect
	add	esp, 20					; 00000014H
$LN13@FillRect:
; Line 639
	jmp	SHORT $LN12@FillRect
$LN11@FillRect:
; Line 641
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
$LN12@FillRect:
	mov	eax, DWORD PTR _y0$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jg	$LN14@FillRect
; Line 642
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 1
	je	SHORT $LN9@FillRect
; Line 643
	mov	eax, DWORD PTR _Len$[ebp]
	mov	DWORD PTR _RemPixels$[ebp], eax
; Line 644
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 645
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$[ebp], eax
$LN8@FillRect:
; Line 647
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	ecx, DWORD PTR _IndexMask$[ebp]
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 648
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDest$[ebp], eax
; Line 649
	mov	eax, DWORD PTR _RemPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _RemPixels$[ebp], eax
	jne	SHORT $LN8@FillRect
; Line 650
	jmp	SHORT $LN5@FillRect
$LN9@FillRect:
; Line 656
	cmp	DWORD PTR _Len$[ebp], 0
	jle	SHORT $LN5@FillRect
; Line 657
	mov	eax, DWORD PTR _Len$[ebp]
	mov	DWORD PTR _Cnt$[ebp], eax
; Line 658
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
$LN3@FillRect:
; Line 660
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	ecx, DWORD PTR _ColorIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 4
	mov	DWORD PTR _pDest$[ebp], edx
; Line 661
	mov	eax, DWORD PTR _Cnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Cnt$[ebp], eax
	jne	SHORT $LN3@FillRect
$LN5@FillRect:
; Line 667
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 668
	jmp	$LN11@FillRect
$LN14@FillRect:
; Line 669
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FillRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawHLine
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y$ = 16						; size = 4
_x1$ = 20						; size = 4
__DrawHLine PROC					; COMDAT
; Line 675
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 676
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__FillRect
	add	esp, 20					; 00000014H
; Line 677
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawHLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawVLine
_TEXT	SEGMENT
tv70 = -292						; size = 4
_NumPixels$10408 = -92					; size = 4
_IndexMask$10393 = -80					; size = 4
_ColorIndex$ = -68					; size = 4
_BytesPerLine$ = -56					; size = 4
_pData$ = -44						; size = 4
_pUsage$ = -32						; size = 4
_hUsage$ = -20						; size = 4
_pDev$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y0$ = 16						; size = 4
_y1$ = 20						; size = 4
__DrawVLine PROC					; COMDAT
; Line 683
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 691
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 692
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 693
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _hUsage$[ebp], ecx
; Line 694
	cmp	DWORD PTR _hUsage$[ebp], 0
	je	SHORT $LN17@DrawVLine
	mov	eax, DWORD PTR _hUsage$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN18@DrawVLine
$LN17@DrawVLine:
	mov	DWORD PTR tv70[ebp], 0
$LN18@DrawVLine:
	mov	ecx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _pUsage$[ebp], ecx
; Line 695
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pData$[ebp], eax
; Line 696
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _BytesPerLine$[ebp], ecx
; Line 697
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ColorIndex$[ebp], ecx
; Line 698
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 1
	je	SHORT $LN14@DrawVLine
; Line 700
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$10393[ebp], eax
$LN13@DrawVLine:
; Line 702
	cmp	DWORD PTR _hUsage$[ebp], 0
	je	SHORT $LN10@DrawVLine
; Line 703
	mov	esi, esp
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@DrawVLine:
; Line 705
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	ecx, DWORD PTR _IndexMask$10393[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 706
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	add	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pData$[ebp], ecx
; Line 707
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
	mov	ecx, DWORD PTR _y0$[ebp]
	cmp	ecx, DWORD PTR _y1$[ebp]
	jle	SHORT $LN13@DrawVLine
; Line 708
	jmp	SHORT $LN15@DrawVLine
$LN14@DrawVLine:
; Line 709
	cmp	DWORD PTR _hUsage$[ebp], 0
	je	SHORT $LN8@DrawVLine
$LN7@DrawVLine:
; Line 711
	mov	esi, esp
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 712
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _ColorIndex$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 713
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 714
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
	mov	ecx, DWORD PTR _y0$[ebp]
	cmp	ecx, DWORD PTR _y1$[ebp]
	jle	SHORT $LN7@DrawVLine
; Line 715
	jmp	SHORT $LN15@DrawVLine
$LN8@DrawVLine:
; Line 717
	mov	eax, DWORD PTR _y1$[ebp]
	sub	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumPixels$10408[ebp], eax
$LN3@DrawVLine:
; Line 719
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _ColorIndex$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 720
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 721
	mov	eax, DWORD PTR _NumPixels$10408[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$10408[ebp], eax
	jne	SHORT $LN3@DrawVLine
$LN15@DrawVLine:
; Line 724
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawVLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetPixelIndex
_TEXT	SEGMENT
_pData$ = -32						; size = 4
_hUsage$ = -20						; size = 4
_pDev$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_Index$ = 20						; size = 4
__SetPixelIndex PROC					; COMDAT
; Line 730
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 735
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 736
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 737
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _hUsage$[ebp], ecx
; Line 738
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pData$[ebp], eax
; Line 739
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _Index$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 740
	cmp	DWORD PTR _hUsage$[ebp], 0
	je	SHORT $LN2@SetPixelIn
; Line 741
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hUsage$[ebp]
	push	edx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _hUsage$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SetPixelIn:
; Line 743
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetPixelIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __XorPixel
_TEXT	SEGMENT
_pData$ = -44						; size = 4
_hUsage$ = -32						; size = 4
_pDev$ = -20						; size = 4
_IndexMask$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__XorPixel PROC						; COMDAT
; Line 749
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 755
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 756
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 757
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _hUsage$[ebp], ecx
; Line 758
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pData$[ebp], eax
; Line 759
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$[ebp], eax
; Line 760
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	ecx, DWORD PTR _IndexMask$[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 761
	cmp	DWORD PTR _hUsage$[ebp], 0
	je	SHORT $LN2@XorPixel
; Line 762
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hUsage$[ebp]
	push	edx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _hUsage$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@XorPixel:
; Line 764
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__XorPixel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetPixelIndex
_TEXT	SEGMENT
_pData$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__GetPixelIndex PROC					; COMDAT
; Line 770
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 773
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 774
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pData$[ebp], eax
; Line 775
	mov	eax, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 776
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetPixelIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetRect
_TEXT	SEGMENT
_pDev$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_pRect$ = 12						; size = 4
__GetRect PROC						; COMDAT
; Line 782
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 783
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 784
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	ecx, DWORD PTR _pDev$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax], dx
; Line 785
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	ecx, DWORD PTR _pDev$[ebp]
	mov	dx, WORD PTR [ecx+6]
	mov	WORD PTR [eax+2], dx
; Line 786
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [edx+8]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	edx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [edx+4], cx
; Line 787
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [edx+10]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	edx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [edx+6], cx
; Line 788
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevData
_TEXT	SEGMENT
tv64 = -196						; size = 4
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevData PROC					; COMDAT
; Line 794
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 795
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 796
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN1@GetDevData
	jmp	SHORT $LN2@GetDevData
$LN1@GetDevData:
; Line 798
	mov	eax, OFFSET _GUI_MEMDEV_DEVICE_32
	jmp	SHORT $LN4@GetDevData
$LN2@GetDevData:
; Line 800
	xor	eax, eax
$LN4@GetDevData:
; Line 801
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevData ENDP
_TEXT	ENDS
EXTRN	_GUI_MEMDEV__WriteToActiveAlpha:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetDevFunc
_TEXT	SEGMENT
tv64 = -196						; size = 4
_ppDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevFunc PROC					; COMDAT
; Line 807
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 808
	mov	eax, DWORD PTR _ppDevice$[ebp]
	mov	DWORD PTR _ppDevice$[ebp], eax
; Line 809
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 22			; 00000016H
	je	SHORT $LN1@GetDevFunc
	jmp	SHORT $LN2@GetDevFunc
$LN1@GetDevFunc:
; Line 811
	mov	eax, OFFSET _GUI_MEMDEV__WriteToActiveAlpha
	jmp	SHORT $LN4@GetDevFunc
$LN2@GetDevFunc:
; Line 814
	xor	eax, eax
$LN4@GetDevFunc:
; Line 815
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevFunc ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevProp
_TEXT	SEGMENT
tv64 = -196						; size = 4
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevProp PROC					; COMDAT
; Line 821
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 822
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 823
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 8
	je	SHORT $LN1@GetDevProp
	jmp	SHORT $LN2@GetDevProp
$LN1@GetDevProp:
; Line 825
	mov	eax, 32					; 00000020H
	jmp	SHORT $LN4@GetDevProp
$LN2@GetDevProp:
; Line 827
	xor	eax, eax
$LN4@GetDevProp:
; Line 828
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevProp ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetOrg
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__SetOrg PROC						; COMDAT
; Line 834
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 835
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 836
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 837
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetOrg ENDP
_TEXT	ENDS
END
