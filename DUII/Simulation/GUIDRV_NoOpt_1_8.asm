; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\DisplayDriver\GUIDRV_NoOpt_1_8.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUIDRV__NoOpt_XorPixel
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\displaydriver\guidrv_noopt_1_8.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUIDRV__NoOpt_XorPixel
_TEXT	SEGMENT
_IndexMask$ = -20					; size = 4
_PixelIndex$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_GUIDRV__NoOpt_XorPixel PROC				; COMDAT
; Line 305
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 309
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _PixelIndex$[ebp], eax
; Line 310
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$[ebp], eax
; Line 311
	mov	eax, DWORD PTR _PixelIndex$[ebp]
	xor	eax, DWORD PTR _IndexMask$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 312
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUIDRV__NoOpt_XorPixel ENDP
_TEXT	ENDS
PUBLIC	_GUIDRV__NoOpt_DrawHLine
EXTRN	_LCD_pColorIndex:DWORD
EXTRN	_GUI_Context:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUIDRV__NoOpt_DrawHLine
_TEXT	SEGMENT
_pfXorPixel$ = -32					; size = 4
_pfSetPixelIndex$ = -20					; size = 4
_ColorIndex$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y$ = 16						; size = 4
_x1$ = 20						; size = 4
_GUIDRV__NoOpt_DrawHLine PROC				; COMDAT
; Line 318
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 323
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 1
	je	SHORT $LN8@GUIDRV__No
; Line 324
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _pfXorPixel$[ebp], edx
	jmp	SHORT $LN7@GUIDRV__No
$LN6@GUIDRV__No:
; Line 325
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, 1
	mov	DWORD PTR _x0$[ebp], eax
$LN7@GUIDRV__No:
	mov	eax, DWORD PTR _x0$[ebp]
	cmp	eax, DWORD PTR _x1$[ebp]
	jg	SHORT $LN5@GUIDRV__No
; Line 326
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfXorPixel$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 327
	jmp	SHORT $LN6@GUIDRV__No
$LN5@GUIDRV__No:
; Line 328
	jmp	SHORT $LN9@GUIDRV__No
$LN8@GUIDRV__No:
; Line 329
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _pfSetPixelIndex$[ebp], edx
; Line 330
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ColorIndex$[ebp], ecx
	jmp	SHORT $LN3@GUIDRV__No
$LN2@GUIDRV__No:
; Line 331
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, 1
	mov	DWORD PTR _x0$[ebp], eax
$LN3@GUIDRV__No:
	mov	eax, DWORD PTR _x0$[ebp]
	cmp	eax, DWORD PTR _x1$[ebp]
	jg	SHORT $LN9@GUIDRV__No
; Line 332
	mov	esi, esp
	mov	eax, DWORD PTR _ColorIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 333
	jmp	SHORT $LN2@GUIDRV__No
$LN9@GUIDRV__No:
; Line 335
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUIDRV__NoOpt_DrawHLine ENDP
_TEXT	ENDS
PUBLIC	_GUIDRV__NoOpt_DrawVLine
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUIDRV__NoOpt_DrawVLine
_TEXT	SEGMENT
_pfXorPixel$ = -32					; size = 4
_pfSetPixelIndex$ = -20					; size = 4
_ColorIndex$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y0$ = 16						; size = 4
_y1$ = 20						; size = 4
_GUIDRV__NoOpt_DrawVLine PROC				; COMDAT
; Line 341
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 346
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 1
	je	SHORT $LN8@GUIDRV__No@2
; Line 347
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _pfXorPixel$[ebp], edx
	jmp	SHORT $LN7@GUIDRV__No@2
$LN6@GUIDRV__No@2:
; Line 348
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
$LN7@GUIDRV__No@2:
	mov	eax, DWORD PTR _y0$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jg	SHORT $LN5@GUIDRV__No@2
; Line 349
	mov	esi, esp
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfXorPixel$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 350
	jmp	SHORT $LN6@GUIDRV__No@2
$LN5@GUIDRV__No@2:
; Line 351
	jmp	SHORT $LN9@GUIDRV__No@2
$LN8@GUIDRV__No@2:
; Line 352
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _pfSetPixelIndex$[ebp], edx
; Line 353
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ColorIndex$[ebp], ecx
	jmp	SHORT $LN3@GUIDRV__No@2
$LN2@GUIDRV__No@2:
; Line 354
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
$LN3@GUIDRV__No@2:
	mov	eax, DWORD PTR _y0$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jg	SHORT $LN9@GUIDRV__No@2
; Line 355
	mov	esi, esp
	mov	eax, DWORD PTR _ColorIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 356
	jmp	SHORT $LN2@GUIDRV__No@2
$LN9@GUIDRV__No@2:
; Line 358
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUIDRV__NoOpt_DrawVLine ENDP
_TEXT	ENDS
PUBLIC	_GUIDRV__NoOpt_FillRect
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUIDRV__NoOpt_FillRect
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_GUIDRV__NoOpt_FillRect PROC				; COMDAT
; Line 364
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 365
	jmp	SHORT $LN3@GUIDRV__No@3
$LN2@GUIDRV__No@3:
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
$LN3@GUIDRV__No@3:
	mov	eax, DWORD PTR _y0$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jg	SHORT $LN4@GUIDRV__No@3
; Line 366
	mov	eax, DWORD PTR _x1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	_GUIDRV__NoOpt_DrawHLine
	add	esp, 16					; 00000010H
; Line 367
	jmp	SHORT $LN2@GUIDRV__No@3
$LN4@GUIDRV__No@3:
; Line 368
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUIDRV__NoOpt_FillRect ENDP
_TEXT	ENDS
PUBLIC	_GUIDRV__NoOpt_DrawBitmap
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUIDRV__NoOpt_DrawBitmap
_TEXT	SEGMENT
tv64 = -208						; size = 4
_i$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xSize$ = 20						; size = 4
_ySize$ = 24						; size = 4
_BitsPerPixel$ = 28					; size = 4
_BytesPerLine$ = 32					; size = 4
_pData$ = 36						; size = 4
_Diff$ = 40						; size = 4
_pTrans$ = 44						; size = 4
_GUIDRV__NoOpt_DrawBitmap PROC				; COMDAT
; Line 379
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 382
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 31			; 0000001fH
	ja	$LN27@GUIDRV__No@4
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN29@GUIDRV__No@4[edx]
	jmp	DWORD PTR $LN30@GUIDRV__No@4[eax*4]
$LN24@GUIDRV__No@4:
; Line 384
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN23@GUIDRV__No@4
$LN22@GUIDRV__No@4:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN23@GUIDRV__No@4:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN21@GUIDRV__No@4
; Line 385
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine1BPP
	add	esp, 28					; 0000001cH
; Line 386
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 387
	jmp	SHORT $LN22@GUIDRV__No@4
$LN21@GUIDRV__No@4:
; Line 388
	jmp	$LN27@GUIDRV__No@4
$LN20@GUIDRV__No@4:
; Line 390
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@GUIDRV__No@4
$LN18@GUIDRV__No@4:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN19@GUIDRV__No@4:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN17@GUIDRV__No@4
; Line 391
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine2BPP
	add	esp, 28					; 0000001cH
; Line 392
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 393
	jmp	SHORT $LN18@GUIDRV__No@4
$LN17@GUIDRV__No@4:
; Line 394
	jmp	$LN27@GUIDRV__No@4
$LN16@GUIDRV__No@4:
; Line 396
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@GUIDRV__No@4
$LN14@GUIDRV__No@4:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@GUIDRV__No@4:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN13@GUIDRV__No@4
; Line 397
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine4BPP
	add	esp, 28					; 0000001cH
; Line 398
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 399
	jmp	SHORT $LN14@GUIDRV__No@4
$LN13@GUIDRV__No@4:
; Line 400
	jmp	$LN27@GUIDRV__No@4
$LN12@GUIDRV__No@4:
; Line 402
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@GUIDRV__No@4
$LN10@GUIDRV__No@4:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@GUIDRV__No@4:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN9@GUIDRV__No@4
; Line 403
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__DrawBitLine8BPP
	add	esp, 24					; 00000018H
; Line 404
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 405
	jmp	SHORT $LN10@GUIDRV__No@4
$LN9@GUIDRV__No@4:
; Line 406
	jmp	$LN27@GUIDRV__No@4
$LN8@GUIDRV__No@4:
; Line 408
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@GUIDRV__No@4
$LN6@GUIDRV__No@4:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@GUIDRV__No@4:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN5@GUIDRV__No@4
; Line 409
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__DrawBitLine16BPP
	add	esp, 20					; 00000014H
; Line 410
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 411
	jmp	SHORT $LN6@GUIDRV__No@4
$LN5@GUIDRV__No@4:
; Line 412
	jmp	SHORT $LN27@GUIDRV__No@4
$LN4@GUIDRV__No@4:
; Line 414
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@GUIDRV__No@4
$LN2@GUIDRV__No@4:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@GUIDRV__No@4:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN27@GUIDRV__No@4
; Line 415
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__DrawBitLine32BPP
	add	esp, 20					; 00000014H
; Line 416
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 417
	jmp	SHORT $LN2@GUIDRV__No@4
$LN27@GUIDRV__No@4:
; Line 420
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN30@GUIDRV__No@4:
	DD	$LN24@GUIDRV__No@4
	DD	$LN20@GUIDRV__No@4
	DD	$LN16@GUIDRV__No@4
	DD	$LN12@GUIDRV__No@4
	DD	$LN8@GUIDRV__No@4
	DD	$LN4@GUIDRV__No@4
	DD	$LN27@GUIDRV__No@4
$LN29@GUIDRV__No@4:
	DB	0
	DB	1
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
_GUIDRV__NoOpt_DrawBitmap ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine1BPP
_TEXT	SEGMENT
tv79 = -272						; size = 4
tv75 = -268						; size = 4
tv70 = -268						; size = 4
_pfSetPixelIndex$ = -68					; size = 4
_pfGetPixelIndex$ = -56					; size = 4
_Pixel$ = -44						; size = 4
_Index1$ = -32						; size = 4
_Index0$ = -20						; size = 4
_IndexMask$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine1BPP PROC					; COMDAT
; Line 35
	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 40
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _pfSetPixelIndex$[ebp], edx
; Line 41
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Index0$[ebp], ecx
; Line 42
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Index1$[ebp], ecx
; Line 43
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 44
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv70[ebp], eax
	cmp	DWORD PTR tv70[ebp], 3
	ja	$LN20@DrawBitLin
	mov	ecx, DWORD PTR tv70[ebp]
	jmp	DWORD PTR $LN24@DrawBitLin[ecx*4]
$LN16@DrawBitLin:
; Line 47
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN22@DrawBitLin
	mov	ecx, DWORD PTR _Index1$[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN23@DrawBitLin
$LN22@DrawBitLin:
	mov	edx, DWORD PTR _Index0$[ebp]
	mov	DWORD PTR tv75[ebp], edx
$LN23@DrawBitLin:
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR tv75[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv79[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 48
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN15@DrawBitLin
; Line 49
	mov	DWORD PTR _Diff$[ebp], 0
; Line 50
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN15@DrawBitLin:
; Line 52
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN16@DrawBitLin
; Line 53
	jmp	$LN20@DrawBitLin
$LN11@DrawBitLin:
; Line 56
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN8@DrawBitLin
; Line 57
	mov	esi, esp
	mov	eax, DWORD PTR _Index1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@DrawBitLin:
; Line 59
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 60
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN10@DrawBitLin
; Line 61
	mov	DWORD PTR _Diff$[ebp], 0
; Line 62
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN10@DrawBitLin:
; Line 64
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN11@DrawBitLin
; Line 65
	jmp	$LN20@DrawBitLin
$LN6@DrawBitLin:
; Line 68
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _pfGetPixelIndex$[ebp], edx
; Line 69
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$[ebp], eax
$LN5@DrawBitLin:
; Line 71
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN2@DrawBitLin
; Line 72
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfGetPixelIndex$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Pixel$[ebp], eax
; Line 73
	mov	eax, DWORD PTR _Pixel$[ebp]
	xor	eax, DWORD PTR _IndexMask$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawBitLin:
; Line 75
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 76
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN4@DrawBitLin
; Line 77
	mov	DWORD PTR _Diff$[ebp], 0
; Line 78
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN4@DrawBitLin:
; Line 80
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN5@DrawBitLin
$LN20@DrawBitLin:
; Line 83
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN24@DrawBitLin:
	DD	$LN16@DrawBitLin
	DD	$LN6@DrawBitLin
	DD	$LN11@DrawBitLin
	DD	$LN6@DrawBitLin
__DrawBitLine1BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine2BPP
_TEXT	SEGMENT
tv133 = -268						; size = 4
tv83 = -268						; size = 4
tv70 = -268						; size = 4
_pfSetPixelIndex$ = -68					; size = 4
_Index$ = -56						; size = 4
_Shift$ = -44						; size = 4
_CurrentPixel$ = -32					; size = 4
_PixelIndex$ = -20					; size = 4
_Pixels$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine2BPP PROC					; COMDAT
; Line 89
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 94
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _pfSetPixelIndex$[ebp], edx
; Line 95
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixels$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _CurrentPixel$[ebp], eax
; Line 97
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 98
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv70[ebp], eax
	je	SHORT $LN24@DrawBitLin@2
	cmp	DWORD PTR tv70[ebp], 2
	je	$LN13@DrawBitLin@2
	jmp	$LN27@DrawBitLin@2
$LN24@DrawBitLin@2:
; Line 100
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN17@DrawBitLin@2
$LN22@DrawBitLin@2:
; Line 102
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$[ebp], eax
; Line 103
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 104
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$[ebp], edx
; Line 105
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR _PixelIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 106
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN21@DrawBitLin@2
; Line 107
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 108
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN21@DrawBitLin@2:
; Line 110
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN22@DrawBitLin@2
; Line 111
	jmp	$LN18@DrawBitLin@2
$LN17@DrawBitLin@2:
; Line 113
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$[ebp], eax
; Line 114
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 115
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv133[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR _Index$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv133[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 116
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN16@DrawBitLin@2
; Line 117
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 118
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN16@DrawBitLin@2:
; Line 120
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN17@DrawBitLin@2
$LN18@DrawBitLin@2:
; Line 122
	jmp	$LN27@DrawBitLin@2
$LN13@DrawBitLin@2:
; Line 124
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN5@DrawBitLin@2
$LN11@DrawBitLin@2:
; Line 126
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$[ebp], eax
; Line 127
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 128
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN8@DrawBitLin@2
; Line 129
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$[ebp], edx
; Line 130
	mov	esi, esp
	mov	eax, DWORD PTR _PixelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@DrawBitLin@2:
; Line 132
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 133
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN10@DrawBitLin@2
; Line 134
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 135
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN10@DrawBitLin@2:
; Line 137
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN11@DrawBitLin@2
; Line 138
	jmp	$LN27@DrawBitLin@2
$LN5@DrawBitLin@2:
; Line 140
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$[ebp], eax
; Line 141
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 142
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN2@DrawBitLin@2
; Line 143
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawBitLin@2:
; Line 145
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 146
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN4@DrawBitLin@2
; Line 147
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 148
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN4@DrawBitLin@2:
; Line 150
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN5@DrawBitLin@2
$LN27@DrawBitLin@2:
; Line 154
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine2BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine4BPP
_TEXT	SEGMENT
tv133 = -268						; size = 4
tv83 = -268						; size = 4
tv70 = -268						; size = 4
_pfSetPixelIndex$ = -68					; size = 4
_Index$ = -56						; size = 4
_Shift$ = -44						; size = 4
_CurrentPixel$ = -32					; size = 4
_PixelIndex$ = -20					; size = 4
_Pixels$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine4BPP PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 165
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _pfSetPixelIndex$[ebp], edx
; Line 166
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixels$[ebp], ecx
; Line 167
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _CurrentPixel$[ebp], eax
; Line 168
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 169
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv70[ebp], eax
	je	SHORT $LN24@DrawBitLin@3
	cmp	DWORD PTR tv70[ebp], 2
	je	$LN13@DrawBitLin@3
	jmp	$LN27@DrawBitLin@3
$LN24@DrawBitLin@3:
; Line 171
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN17@DrawBitLin@3
$LN22@DrawBitLin@3:
; Line 173
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 174
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 175
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$[ebp], edx
; Line 176
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR _PixelIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 177
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN21@DrawBitLin@3
; Line 178
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 179
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN21@DrawBitLin@3:
; Line 181
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN22@DrawBitLin@3
; Line 182
	jmp	$LN18@DrawBitLin@3
$LN17@DrawBitLin@3:
; Line 184
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 185
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 186
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv133[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR _Index$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv133[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 187
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN16@DrawBitLin@3
; Line 188
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 189
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN16@DrawBitLin@3:
; Line 191
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN17@DrawBitLin@3
$LN18@DrawBitLin@3:
; Line 193
	jmp	$LN27@DrawBitLin@3
$LN13@DrawBitLin@3:
; Line 195
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN5@DrawBitLin@3
$LN11@DrawBitLin@3:
; Line 197
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 198
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 199
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN8@DrawBitLin@3
; Line 200
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$[ebp], edx
; Line 201
	mov	esi, esp
	mov	eax, DWORD PTR _PixelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@DrawBitLin@3:
; Line 203
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 204
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN10@DrawBitLin@3
; Line 205
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 206
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN10@DrawBitLin@3:
; Line 208
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN11@DrawBitLin@3
; Line 209
	jmp	$LN27@DrawBitLin@3
$LN5@DrawBitLin@3:
; Line 211
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 212
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 213
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN2@DrawBitLin@3
; Line 214
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawBitLin@3:
; Line 216
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 217
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN4@DrawBitLin@3
; Line 218
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 219
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN4@DrawBitLin@3:
; Line 221
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN5@DrawBitLin@3
$LN27@DrawBitLin@3:
; Line 225
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine4BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine8BPP
_TEXT	SEGMENT
tv68 = -220						; size = 4
_pfSetPixelIndex$ = -20					; size = 4
_Pixel$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xsize$ = 24						; size = 4
_pTrans$ = 28						; size = 4
__DrawBitLine8BPP PROC					; COMDAT
; Line 231
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 235
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _pfSetPixelIndex$[ebp], edx
; Line 236
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv68[ebp], eax
	je	SHORT $LN20@DrawBitLin@4
	cmp	DWORD PTR tv68[ebp], 2
	je	$LN11@DrawBitLin@4
	jmp	$LN23@DrawBitLin@4
$LN20@DrawBitLin@4:
; Line 238
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	SHORT $LN19@DrawBitLin@4
	jmp	SHORT $LN18@DrawBitLin@4
$LN17@DrawBitLin@4:
; Line 239
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN18@DrawBitLin@4:
	cmp	DWORD PTR _xsize$[ebp], 0
	jle	SHORT $LN16@DrawBitLin@4
; Line 240
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixel$[ebp], ecx
; Line 241
	mov	esi, esp
	mov	eax, DWORD PTR _Pixel$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 242
	jmp	SHORT $LN17@DrawBitLin@4
$LN16@DrawBitLin@4:
; Line 243
	jmp	SHORT $LN15@DrawBitLin@4
$LN19@DrawBitLin@4:
; Line 244
	jmp	SHORT $LN14@DrawBitLin@4
$LN13@DrawBitLin@4:
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN14@DrawBitLin@4:
	cmp	DWORD PTR _xsize$[ebp], 0
	jle	SHORT $LN15@DrawBitLin@4
; Line 245
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 246
	jmp	SHORT $LN13@DrawBitLin@4
$LN15@DrawBitLin@4:
; Line 248
	jmp	$LN23@DrawBitLin@4
$LN11@DrawBitLin@4:
; Line 250
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	SHORT $LN10@DrawBitLin@4
	jmp	SHORT $LN9@DrawBitLin@4
$LN8@DrawBitLin@4:
; Line 251
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN9@DrawBitLin@4:
	cmp	DWORD PTR _xsize$[ebp], 0
	jle	SHORT $LN7@DrawBitLin@4
; Line 252
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixel$[ebp], ecx
; Line 253
	cmp	DWORD PTR _Pixel$[ebp], 0
	je	SHORT $LN6@DrawBitLin@4
; Line 254
	mov	esi, esp
	mov	eax, DWORD PTR _Pixel$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@DrawBitLin@4:
; Line 256
	jmp	SHORT $LN8@DrawBitLin@4
$LN7@DrawBitLin@4:
; Line 257
	jmp	SHORT $LN23@DrawBitLin@4
$LN10@DrawBitLin@4:
; Line 258
	jmp	SHORT $LN4@DrawBitLin@4
$LN3@DrawBitLin@4:
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN4@DrawBitLin@4:
	cmp	DWORD PTR _xsize$[ebp], 0
	jle	SHORT $LN23@DrawBitLin@4
; Line 259
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixel$[ebp], ecx
; Line 260
	cmp	DWORD PTR _Pixel$[ebp], 0
	je	SHORT $LN1@DrawBitLin@4
; Line 261
	mov	esi, esp
	mov	eax, DWORD PTR _Pixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DrawBitLin@4:
; Line 263
	jmp	SHORT $LN3@DrawBitLin@4
$LN23@DrawBitLin@4:
; Line 267
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine8BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine16BPP
_TEXT	SEGMENT
_pfSetPixelIndex$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xSize$ = 24						; size = 4
__DrawBitLine16BPP PROC					; COMDAT
; Line 273
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 276
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _pfSetPixelIndex$[ebp], edx
	jmp	SHORT $LN3@DrawBitLin@5
$LN2@DrawBitLin@5:
; Line 277
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
$LN3@DrawBitLin@5:
	cmp	DWORD PTR _xSize$[ebp], 0
	jle	SHORT $LN4@DrawBitLin@5
; Line 278
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 279
	jmp	SHORT $LN2@DrawBitLin@5
$LN4@DrawBitLin@5:
; Line 280
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine16BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine32BPP
_TEXT	SEGMENT
_pfSetPixelIndex$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xSize$ = 24						; size = 4
__DrawBitLine32BPP PROC					; COMDAT
; Line 286
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 289
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _pfSetPixelIndex$[ebp], edx
	jmp	SHORT $LN3@DrawBitLin@6
$LN2@DrawBitLin@6:
; Line 290
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
$LN3@DrawBitLin@6:
	cmp	DWORD PTR _xSize$[ebp], 0
	jle	SHORT $LN4@DrawBitLin@6
; Line 291
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 292
	jmp	SHORT $LN2@DrawBitLin@6
$LN4@DrawBitLin@6:
; Line 293
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine32BPP ENDP
_TEXT	ENDS
END
