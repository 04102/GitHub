; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\DUII\RPMSweepScreen.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?rpm@@3HA					; rpm
PUBLIC	?predictiveLap@@3MA				; predictiveLap
PUBLIC	?holding@@3HA					; holding
PUBLIC	?altitude@@3MA					; altitude
PUBLIC	?lapTime@@3HA					; lapTime
PUBLIC	?lap@@3HA					; lap
PUBLIC	?speed@@3MA					; speed
PUBLIC	?gear@@3HA					; gear
_BSS	SEGMENT
?rpm@@3HA DD	01H DUP (?)				; rpm
?predictiveLap@@3MA DD 01H DUP (?)			; predictiveLap
?holding@@3HA DD 01H DUP (?)				; holding
?altitude@@3MA DD 01H DUP (?)				; altitude
?lapTime@@3HA DD 01H DUP (?)				; lapTime
?lap@@3HA DD	01H DUP (?)				; lap
?speed@@3MA DD	01H DUP (?)				; speed
?gear@@3HA DD	01H DUP (?)				; gear
_pSweep	DD	01H DUP (?)
_pMPH	DD	01H DUP (?)
_pLapTimer DD	01H DUP (?)
_pPredictiveLap DD 01H DUP (?)
_pYellow DD	01H DUP (?)
_pRed	DD	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
_LapRect DW	0154H
	DW	071H
	DW	01d1H
	DW	09bH
_DataElementRect DW 05H
	DW	03cH
	DW	08cH
	DW	05cH
_NameRect DW	05H
	DW	064H
	DW	08cH
	DW	078H
_UnitsRect DW	05H
	DW	078H
	DW	08cH
	DW	08cH
_SweepTachEditRect DW 00H
	DW	03cH
	DW	05aH
	DW	087H
_config	DD	FLAT:_pData
	DD	FLAT:_pName
	DD	FLAT:_pUnits
$SG17507 DB	'%d', 00H
$SG17593 DB	00H
$SG17510 DB	'Lap', 00H
$SG17523 DB	'session time', 00H
	ORG $+3
$SG17525 DB	'%02d:%02d', 00H
	ORG $+2
$SG17528 DB	'%d:%02d:%02d', 00H
	ORG $+3
$SG17530 DB	'%d:%02d', 00H
$SG17591 DB	'kph', 00H
$SG17592 DB	'mph', 00H
$SG17622 DB	'mph', 00H
$SG17623 DB	'kph', 00H
$SG17624 DB	'Recording Starts: %d%s', 00H
	ORG $+1
$SG17627 DB	'Recording Stops: %ds', 00H
CONST	ENDS
PUBLIC	?SweepHighlightConfigGauge@@YAXXZ		; SweepHighlightConfigGauge
EXTRN	_GUI_DrawRect:PROC
EXTRN	_GUI_SetColor:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\duii\rpmsweepscreen.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?SweepHighlightConfigGauge@@YAXXZ
_TEXT	SEGMENT
?SweepHighlightConfigGauge@@YAXXZ PROC			; SweepHighlightConfigGauge, COMDAT
; Line 81
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 82
	push	255					; 000000ffH
	call	_GUI_SetColor
	add	esp, 4
; Line 83
	movsx	eax, WORD PTR _SweepTachEditRect+6
	add	eax, 4
	push	eax
	movsx	ecx, WORD PTR _SweepTachEditRect+4
	add	ecx, 20					; 00000014H
	push	ecx
	movsx	edx, WORD PTR _SweepTachEditRect+2
	sub	edx, 2
	push	edx
	movsx	eax, WORD PTR _SweepTachEditRect
	push	eax
	call	_GUI_DrawRect
	add	esp, 16					; 00000010H
; Line 86
	movsx	eax, WORD PTR _SweepTachEditRect+6
	add	eax, 3
	push	eax
	movsx	ecx, WORD PTR _SweepTachEditRect+4
	add	ecx, 19					; 00000013H
	push	ecx
	movsx	edx, WORD PTR _SweepTachEditRect+2
	sub	edx, 1
	push	edx
	movsx	eax, WORD PTR _SweepTachEditRect
	add	eax, 1
	push	eax
	call	_GUI_DrawRect
	add	esp, 16					; 00000010H
; Line 87
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SweepHighlightConfigGauge@@YAXXZ ENDP			; SweepHighlightConfigGauge
_TEXT	ENDS
PUBLIC	??_GDigitalStringOutput@@QAEPAXI@Z		; DigitalStringOutput::`scalar deleting destructor'
PUBLIC	??_GPredictiveLapTimer@@QAEPAXI@Z		; PredictiveLapTimer::`scalar deleting destructor'
PUBLIC	??_GRPMSweep@@QAEPAXI@Z				; RPMSweep::`scalar deleting destructor'
PUBLIC	??_GDigitalDisplay@@QAEPAXI@Z			; DigitalDisplay::`scalar deleting destructor'
PUBLIC	__real@408f400000000000
PUBLIC	?UpdatePredictiveLapControl@@YAXPAVPredictiveLapTimer@@M@Z ; UpdatePredictiveLapControl
PUBLIC	__real@0000000000000000
PUBLIC	__$ArrayPad$
PUBLIC	__cbRPMSweepCallback
EXTRN	_WM_DefaultProc:PROC
EXTRN	_GUI_MEMDEV_Delete:PROC
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_GUI_SelectLCD:PROC
EXTRN	_GUI_MEMDEV_CopyToLCD:PROC
EXTRN	_bmthreewayarrow:BYTE
EXTRN	_DrawSignalStrength:PROC
EXTRN	_SlideOutVisible:PROC
EXTRN	_CheckWarningPopups:PROC
EXTRN	_DisplayConfigurableItem:PROC
EXTRN	_GetConfigurableItem:PROC
EXTRN	_GUI_DispStringHCenterAt:PROC
EXTRN	_GUI_FontD48:BYTE
EXTRN	?DrawControl@DigitalStringOutput@@QAEXXZ:PROC	; DigitalStringOutput::DrawControl
EXTRN	?SetValue@DigitalStringOutput@@QAEXPAD@Z:PROC	; DigitalStringOutput::SetValue
EXTRN	_formatLapTime:PROC
EXTRN	_bmBestLapEver:BYTE
EXTRN	_GUI_DrawBitmap:PROC
EXTRN	_bmBestLapSession:BYTE
EXTRN	_DataValues:BYTE
EXTRN	_GUI_DispStringInRect:PROC
EXTRN	_GUI_FontD32:BYTE
EXTRN	_GUI_DispStringAt:PROC
EXTRN	_sprintf:PROC
EXTRN	_GUI_SetFont:PROC
EXTRN	_GUI_Font32B_ASCII:BYTE
EXTRN	_selectedRaceMode:DWORD
EXTRN	?DrawControl@DigitalDisplay@@QAEXXZ:PROC	; DigitalDisplay::DrawControl
EXTRN	?SetValue@DigitalDisplay@@QAEXM@Z:PROC		; DigitalDisplay::SetValue
EXTRN	?DrawControl@RPMSweep@@QAEXXZ:PROC		; RPMSweep::DrawControl
EXTRN	?SetGear@RPMSweep@@QAEXH@Z:PROC			; RPMSweep::SetGear
EXTRN	_vehicleData:BYTE
EXTRN	?SetValue@RPMSweep@@QAEXM@Z:PROC		; RPMSweep::SetValue
EXTRN	_GUI_Clear:PROC
EXTRN	_GUI_MEMDEV_Select:PROC
EXTRN	_lockupSemaphore:BYTE
EXTRN	_CS_IsVisible:PROC
EXTRN	_GetValue:PROC
EXTRN	_configureGaugeMode:BYTE
EXTRN	_boxStartTime:DWORD
EXTRN	_GUI_GetTime:PROC
EXTRN	_drawFlag:BYTE
EXTRN	_WM_InvalidateWindow:PROC
EXTRN	_WM_RestartTimer:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
_BSS	SEGMENT
_mem	DD	01H DUP (?)
_firsttimethrough DB 01H DUP (?)
	ALIGN	4

_hRPMScreen DD	01H DUP (?)
_hScreenTimer DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT __cbRPMSweepCallback
_TEXT	SEGMENT
tv298 = -552						; size = 4
tv292 = -552						; size = 4
tv282 = -552						; size = 4
tv276 = -552						; size = 4
tv160 = -552						; size = 4
tv64 = -552						; size = 4
$T17661 = -544						; size = 8
$T17662 = -528						; size = 8
$T17663 = -512						; size = 8
$T17664 = -496						; size = 8
$T17665 = -480						; size = 8
$T17666 = -464						; size = 8
$T17667 = -448						; size = 8
$T17668 = -432						; size = 8
$T17669 = -416						; size = 4
$T17670 = -404						; size = 4
$T17673 = -392						; size = 4
$T17674 = -380						; size = 4
$T17677 = -368						; size = 4
$T17678 = -356						; size = 4
$T17679 = -344						; size = 4
$T17680 = -332						; size = 4
$T17683 = -320						; size = 4
$T17684 = -308						; size = 4
_scratch$17522 = -104					; size = 30
_time$17521 = -64					; size = 4
_pos$17506 = -52					; size = 4
_scratch$17505 = -40					; size = 30
__$ArrayPad$ = -4					; size = 4
_pMsg$ = 8						; size = 4
__cbRPMSweepCallback PROC				; COMDAT
; Line 90
	push	ebp
	mov	ebp, esp
	sub	esp, 552				; 00000228H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-552]
	mov	ecx, 138				; 0000008aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 91
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 11			; 0000000bH
	je	$LN8@cbRPMSweep
	cmp	DWORD PTR tv64[ebp], 15			; 0000000fH
	je	$LN31@cbRPMSweep
	cmp	DWORD PTR tv64[ebp], 275		; 00000113H
	je	SHORT $LN35@cbRPMSweep
	jmp	$LN1@cbRPMSweep
$LN35@cbRPMSweep:
; Line 94
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _hScreenTimer
	jne	$LN34@cbRPMSweep
; Line 96
	push	25					; 00000019H
	mov	eax, DWORD PTR _hScreenTimer
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
; Line 97
	mov	eax, DWORD PTR _hRPMScreen
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 100
	movzx	eax, BYTE PTR _drawFlag
	test	eax, eax
	je	SHORT $LN32@cbRPMSweep
; Line 102
	call	_GUI_GetTime
	sub	eax, DWORD PTR _boxStartTime
	cmp	eax, 5000				; 00001388H
	jle	SHORT $LN32@cbRPMSweep
; Line 104
	mov	BYTE PTR _configureGaugeMode, 0
; Line 105
	mov	BYTE PTR _drawFlag, 0
$LN32@cbRPMSweep:
; Line 110
	push	53					; 00000035H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17661[ebp], eax
	mov	DWORD PTR $T17661[ebp+4], edx
	mov	eax, DWORD PTR $T17661[ebp]
	mov	DWORD PTR ?rpm@@3HA, eax		; rpm
; Line 111
	push	74					; 0000004aH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17662[ebp], eax
	mov	DWORD PTR $T17662[ebp+4], edx
	mov	eax, DWORD PTR $T17662[ebp]
	mov	DWORD PTR ?gear@@3HA, eax		; gear
; Line 112
	push	14					; 0000000eH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17663[ebp], eax
	mov	DWORD PTR $T17663[ebp+4], edx
	fld	DWORD PTR $T17663[ebp]
	fstp	DWORD PTR ?speed@@3MA			; speed
; Line 113
	push	36					; 00000024H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17664[ebp], eax
	mov	DWORD PTR $T17664[ebp+4], edx
	mov	eax, DWORD PTR $T17664[ebp]
	mov	DWORD PTR ?lap@@3HA, eax		; lap
; Line 114
	push	78					; 0000004eH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17665[ebp], eax
	mov	DWORD PTR $T17665[ebp+4], edx
	mov	eax, DWORD PTR $T17665[ebp]
	mov	DWORD PTR ?holding@@3HA, eax		; holding
; Line 115
	push	31					; 0000001fH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17666[ebp], eax
	mov	DWORD PTR $T17666[ebp+4], edx
	fld	DWORD PTR $T17666[ebp]
	fstp	DWORD PTR ?predictiveLap@@3MA		; predictiveLap
; Line 116
	push	32					; 00000020H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17667[ebp], eax
	mov	DWORD PTR $T17667[ebp+4], edx
	mov	eax, DWORD PTR $T17667[ebp]
	mov	DWORD PTR ?lapTime@@3HA, eax		; lapTime
; Line 117
	push	19					; 00000013H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17668[ebp], eax
	mov	DWORD PTR $T17668[ebp+4], edx
	fld	DWORD PTR $T17668[ebp]
	fstp	DWORD PTR ?altitude@@3MA		; altitude
$LN34@cbRPMSweep:
; Line 119
	jmp	$LN36@cbRPMSweep
$LN31@cbRPMSweep:
; Line 122
	push	6
	call	_CS_IsVisible
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN29@cbRPMSweep
	movzx	eax, BYTE PTR _firsttimethrough
	test	eax, eax
	je	$LN28@cbRPMSweep
$LN29@cbRPMSweep:
; Line 124
	movzx	eax, BYTE PTR _lockupSemaphore
	test	eax, eax
	jne	$LN28@cbRPMSweep
; Line 126
	mov	BYTE PTR _lockupSemaphore, 1
; Line 128
	mov	BYTE PTR _firsttimethrough, 0
; Line 130
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_Select
	add	esp, 4
; Line 131
	call	_GUI_Clear
; Line 133
	fild	DWORD PTR ?rpm@@3HA			; rpm
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pSweep
	call	?SetValue@RPMSweep@@QAEXM@Z		; RPMSweep::SetValue
; Line 134
	fld	DWORD PTR _vehicleData+80
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN27@cbRPMSweep
; Line 135
	mov	eax, DWORD PTR ?gear@@3HA		; gear
	push	eax
	mov	ecx, DWORD PTR _pSweep
	call	?SetGear@RPMSweep@@QAEXH@Z		; RPMSweep::SetGear
$LN27@cbRPMSweep:
; Line 136
	mov	ecx, DWORD PTR _pSweep
	call	?DrawControl@RPMSweep@@QAEXXZ		; RPMSweep::DrawControl
; Line 138
	push	ecx
	fld	DWORD PTR ?speed@@3MA			; speed
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pMPH
	call	?SetValue@DigitalDisplay@@QAEXM@Z	; DigitalDisplay::SetValue
; Line 139
	mov	ecx, DWORD PTR _pMPH
	call	?DrawControl@DigitalDisplay@@QAEXXZ	; DigitalDisplay::DrawControl
; Line 141
	cmp	DWORD PTR _selectedRaceMode, 0
	jne	$LN26@cbRPMSweep
; Line 147
	push	OFFSET _GUI_Font32B_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 148
	push	16776960				; 00ffff00H
	call	_GUI_SetColor
	add	esp, 4
; Line 149
	mov	eax, DWORD PTR ?lap@@3HA		; lap
	push	eax
	push	OFFSET $SG17507
	lea	ecx, DWORD PTR _scratch$17505[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 150
	cmp	DWORD PTR ?lap@@3HA, 99			; lap, 00000063H
	jle	SHORT $LN25@cbRPMSweep
; Line 151
	mov	DWORD PTR _pos$17506[ebp], 340		; 00000154H
	jmp	SHORT $LN24@cbRPMSweep
$LN25@cbRPMSweep:
; Line 152
	mov	DWORD PTR _pos$17506[ebp], 360		; 00000168H
$LN24@cbRPMSweep:
; Line 153
	push	118					; 00000076H
	mov	eax, DWORD PTR _pos$17506[ebp]
	push	eax
	push	OFFSET $SG17510
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 154
	push	OFFSET _GUI_FontD32
	call	_GUI_SetFont
	add	esp, 4
; Line 155
	push	1
	push	OFFSET _LapRect
	lea	eax, DWORD PTR _scratch$17505[ebp]
	push	eax
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 158
	cmp	DWORD PTR ?holding@@3HA, 0		; holding
	je	SHORT $LN21@cbRPMSweep
; Line 159
	mov	eax, DWORD PTR _DataValues+632
	mov	DWORD PTR tv160[ebp], eax
	cmp	DWORD PTR tv160[ebp], 1
	je	SHORT $LN19@cbRPMSweep
	cmp	DWORD PTR tv160[ebp], 2
	je	SHORT $LN18@cbRPMSweep
	jmp	SHORT $LN21@cbRPMSweep
; Line 162
	jmp	SHORT $LN21@cbRPMSweep
$LN19@cbRPMSweep:
; Line 165
	movsx	eax, WORD PTR _LapRect+2
	add	eax, 5
	push	eax
	movsx	ecx, WORD PTR _LapRect
	sub	ecx, 40					; 00000028H
	push	ecx
	push	OFFSET _bmBestLapSession
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 166
	jmp	SHORT $LN21@cbRPMSweep
$LN18@cbRPMSweep:
; Line 169
	movsx	eax, WORD PTR _LapRect+2
	add	eax, 5
	push	eax
	movsx	ecx, WORD PTR _LapRect
	sub	ecx, 40					; 00000028H
	push	ecx
	push	OFFSET _bmBestLapEver
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
$LN21@cbRPMSweep:
; Line 173
	push	OFFSET _GUI_FontD32
	call	_GUI_SetFont
	add	esp, 4
; Line 174
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 177
	push	ecx
	fld	DWORD PTR ?predictiveLap@@3MA		; predictiveLap
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _pPredictiveLap
	push	eax
	call	?UpdatePredictiveLapControl@@YAXPAVPredictiveLapTimer@@M@Z ; UpdatePredictiveLapControl
	add	esp, 8
; Line 180
	push	0
	mov	eax, DWORD PTR ?lapTime@@3HA		; lapTime
	push	eax
	call	_formatLapTime
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _pLapTimer
	call	?SetValue@DigitalStringOutput@@QAEXPAD@Z ; DigitalStringOutput::SetValue
; Line 181
	mov	ecx, DWORD PTR _pLapTimer
	call	?DrawControl@DigitalStringOutput@@QAEXXZ ; DigitalStringOutput::DrawControl
; Line 183
	jmp	$LN17@cbRPMSweep
$LN26@cbRPMSweep:
; Line 190
	push	13882323				; 00d3d3d3H
	call	_GUI_SetColor
	add	esp, 4
; Line 191
	push	OFFSET _GUI_Font32B_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 192
	push	160					; 000000a0H
	push	270					; 0000010eH
	push	OFFSET $SG17523
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 195
	mov	eax, DWORD PTR _DataValues+272
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR _time$17521[ebp], eax
; Line 196
	cmp	DWORD PTR _time$17521[ebp], 3600	; 00000e10H
	jge	SHORT $LN16@cbRPMSweep
; Line 197
	mov	eax, DWORD PTR _time$17521[ebp]
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	push	edx
	mov	eax, DWORD PTR _time$17521[ebp]
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	push	eax
	push	OFFSET $SG17525
	lea	edx, DWORD PTR _scratch$17522[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN13@cbRPMSweep
$LN16@cbRPMSweep:
; Line 198
	cmp	DWORD PTR _time$17521[ebp], 36000	; 00008ca0H
	jge	SHORT $LN14@cbRPMSweep
; Line 199
	mov	eax, DWORD PTR _time$17521[ebp]
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	push	edx
	mov	eax, DWORD PTR _time$17521[ebp]
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	push	edx
	mov	eax, DWORD PTR _time$17521[ebp]
	cdq
	mov	ecx, 3600				; 00000e10H
	idiv	ecx
	push	eax
	push	OFFSET $SG17528
	lea	edx, DWORD PTR _scratch$17522[ebp]
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H
; Line 200
	jmp	SHORT $LN13@cbRPMSweep
$LN14@cbRPMSweep:
; Line 201
	mov	eax, DWORD PTR _time$17521[ebp]
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	push	edx
	mov	eax, DWORD PTR _time$17521[ebp]
	cdq
	mov	ecx, 3600				; 00000e10H
	idiv	ecx
	push	eax
	push	OFFSET $SG17530
	lea	edx, DWORD PTR _scratch$17522[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
$LN13@cbRPMSweep:
; Line 202
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 203
	push	OFFSET _GUI_FontD48
	call	_GUI_SetFont
	add	esp, 4
; Line 204
	push	200					; 000000c8H
	push	348					; 0000015cH
	lea	eax, DWORD PTR _scratch$17522[ebp]
	push	eax
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
$LN17@cbRPMSweep:
; Line 208
	call	_GetConfigurableItem
	cmp	eax, 19					; 00000013H
	jne	SHORT $LN11@cbRPMSweep
; Line 209
	fld	DWORD PTR ?altitude@@3MA		; altitude
	fcomp	QWORD PTR __real@408f400000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN11@cbRPMSweep
; Line 210
	push	OFFSET _GUI_Font32B_ASCII
	call	_GUI_SetFont
	add	esp, 4
$LN11@cbRPMSweep:
; Line 211
	push	OFFSET _config
	call	_DisplayConfigurableItem
	add	esp, 4
; Line 214
	movzx	eax, BYTE PTR _drawFlag
	test	eax, eax
	je	SHORT $LN10@cbRPMSweep
; Line 215
	call	?SweepHighlightConfigGauge@@YAXXZ	; SweepHighlightConfigGauge
$LN10@cbRPMSweep:
; Line 226
	call	_CheckWarningPopups
; Line 228
	call	_SlideOutVisible
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@cbRPMSweep
; Line 229
	call	_DrawSignalStrength
$LN9@cbRPMSweep:
; Line 231
	push	229					; 000000e5H
	push	0
	push	OFFSET _bmthreewayarrow
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 233
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_CopyToLCD
	add	esp, 4
; Line 234
	call	_GUI_SelectLCD
$LN28@cbRPMSweep:
; Line 237
	jmp	$LN36@cbRPMSweep
$LN8@cbRPMSweep:
; Line 240
	cmp	DWORD PTR _pMPH, 0
	je	SHORT $LN7@cbRPMSweep
; Line 242
	mov	eax, DWORD PTR _pMPH
	mov	DWORD PTR $T17670[ebp], eax
	mov	ecx, DWORD PTR $T17670[ebp]
	mov	DWORD PTR $T17669[ebp], ecx
	cmp	DWORD PTR $T17669[ebp], 0
	je	SHORT $LN40@cbRPMSweep
	push	1
	mov	ecx, DWORD PTR $T17669[ebp]
	call	??_GDigitalDisplay@@QAEPAXI@Z
	mov	DWORD PTR tv276[ebp], eax
	jmp	SHORT $LN41@cbRPMSweep
$LN40@cbRPMSweep:
	mov	DWORD PTR tv276[ebp], 0
$LN41@cbRPMSweep:
; Line 243
	mov	DWORD PTR _pMPH, 0
$LN7@cbRPMSweep:
; Line 245
	cmp	DWORD PTR _pSweep, 0
	je	SHORT $LN6@cbRPMSweep
; Line 247
	mov	eax, DWORD PTR _pSweep
	mov	DWORD PTR $T17674[ebp], eax
	mov	ecx, DWORD PTR $T17674[ebp]
	mov	DWORD PTR $T17673[ebp], ecx
	cmp	DWORD PTR $T17673[ebp], 0
	je	SHORT $LN42@cbRPMSweep
	push	1
	mov	ecx, DWORD PTR $T17673[ebp]
	call	??_GRPMSweep@@QAEPAXI@Z
	mov	DWORD PTR tv282[ebp], eax
	jmp	SHORT $LN43@cbRPMSweep
$LN42@cbRPMSweep:
	mov	DWORD PTR tv282[ebp], 0
$LN43@cbRPMSweep:
; Line 248
	mov	DWORD PTR _pSweep, 0
$LN6@cbRPMSweep:
; Line 257
	cmp	DWORD PTR _pYellow, 0
	je	SHORT $LN5@cbRPMSweep
; Line 259
	mov	eax, DWORD PTR _pYellow
	mov	DWORD PTR $T17677[ebp], eax
	mov	ecx, DWORD PTR $T17677[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 260
	mov	DWORD PTR _pYellow, 0
$LN5@cbRPMSweep:
; Line 262
	cmp	DWORD PTR _pRed, 0
	je	SHORT $LN4@cbRPMSweep
; Line 264
	mov	eax, DWORD PTR _pRed
	mov	DWORD PTR $T17678[ebp], eax
	mov	ecx, DWORD PTR $T17678[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 265
	mov	DWORD PTR _pRed, 0
$LN4@cbRPMSweep:
; Line 267
	cmp	DWORD PTR _pPredictiveLap, 0
	je	SHORT $LN3@cbRPMSweep
; Line 269
	mov	eax, DWORD PTR _pPredictiveLap
	mov	DWORD PTR $T17680[ebp], eax
	mov	ecx, DWORD PTR $T17680[ebp]
	mov	DWORD PTR $T17679[ebp], ecx
	cmp	DWORD PTR $T17679[ebp], 0
	je	SHORT $LN44@cbRPMSweep
	push	1
	mov	ecx, DWORD PTR $T17679[ebp]
	call	??_GPredictiveLapTimer@@QAEPAXI@Z
	mov	DWORD PTR tv292[ebp], eax
	jmp	SHORT $LN45@cbRPMSweep
$LN44@cbRPMSweep:
	mov	DWORD PTR tv292[ebp], 0
$LN45@cbRPMSweep:
; Line 270
	mov	DWORD PTR _pPredictiveLap, 0
$LN3@cbRPMSweep:
; Line 272
	cmp	DWORD PTR _pLapTimer, 0
	je	SHORT $LN2@cbRPMSweep
; Line 274
	mov	eax, DWORD PTR _pLapTimer
	mov	DWORD PTR $T17684[ebp], eax
	mov	ecx, DWORD PTR $T17684[ebp]
	mov	DWORD PTR $T17683[ebp], ecx
	cmp	DWORD PTR $T17683[ebp], 0
	je	SHORT $LN46@cbRPMSweep
	push	1
	mov	ecx, DWORD PTR $T17683[ebp]
	call	??_GDigitalStringOutput@@QAEPAXI@Z
	mov	DWORD PTR tv298[ebp], eax
	jmp	SHORT $LN47@cbRPMSweep
$LN46@cbRPMSweep:
	mov	DWORD PTR tv298[ebp], 0
$LN47@cbRPMSweep:
; Line 275
	mov	DWORD PTR _pLapTimer, 0
$LN2@cbRPMSweep:
; Line 277
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_Delete
	add	esp, 4
; Line 279
	jmp	SHORT $LN36@cbRPMSweep
$LN1@cbRPMSweep:
; Line 282
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN36@cbRPMSweep:
; Line 284
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN51@cbRPMSweep
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 552				; 00000228H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN51@cbRPMSweep:
	DD	2
	DD	$LN50@cbRPMSweep
$LN50@cbRPMSweep:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN48@cbRPMSweep
	DD	-104					; ffffff98H
	DD	30					; 0000001eH
	DD	$LN49@cbRPMSweep
$LN49@cbRPMSweep:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
$LN48@cbRPMSweep:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
__cbRPMSweepCallback ENDP
_TEXT	ENDS
EXTRN	??1DigitalDisplay@@QAE@XZ:PROC			; DigitalDisplay::~DigitalDisplay
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GDigitalDisplay@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GDigitalDisplay@@QAEPAXI@Z PROC			; DigitalDisplay::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DigitalDisplay@@QAE@XZ		; DigitalDisplay::~DigitalDisplay
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDigitalDisplay@@QAEPAXI@Z ENDP			; DigitalDisplay::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1RPMSweep@@QAE@XZ:PROC			; RPMSweep::~RPMSweep
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GRPMSweep@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GRPMSweep@@QAEPAXI@Z PROC				; RPMSweep::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RPMSweep@@QAE@XZ			; RPMSweep::~RPMSweep
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRPMSweep@@QAEPAXI@Z ENDP				; RPMSweep::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1PredictiveLapTimer@@QAE@XZ:PROC		; PredictiveLapTimer::~PredictiveLapTimer
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GPredictiveLapTimer@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GPredictiveLapTimer@@QAEPAXI@Z PROC			; PredictiveLapTimer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PredictiveLapTimer@@QAE@XZ		; PredictiveLapTimer::~PredictiveLapTimer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPredictiveLapTimer@@QAEPAXI@Z ENDP			; PredictiveLapTimer::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1DigitalStringOutput@@QAE@XZ:PROC		; DigitalStringOutput::~DigitalStringOutput
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GDigitalStringOutput@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GDigitalStringOutput@@QAEPAXI@Z PROC			; DigitalStringOutput::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DigitalStringOutput@@QAE@XZ		; DigitalStringOutput::~DigitalStringOutput
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDigitalStringOutput@@QAEPAXI@Z ENDP			; DigitalStringOutput::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@437a0000
PUBLIC	__real@00000000
PUBLIC	_Display_RPMSweepScreen
EXTRN	_GUI_MEMDEV_Create:PROC
EXTRN	_WM_CreateTimer:PROC
EXTRN	??0DigitalStringOutput@@QAE@HHHHW4DigitalOptions@@JUGUI_FONT@@K@Z:PROC ; DigitalStringOutput::DigitalStringOutput
EXTRN	??0PredictiveLapTimer@@QAE@HHHHMMJ@Z:PROC	; PredictiveLapTimer::PredictiveLapTimer
EXTRN	_GetPredictiveScale:PROC
EXTRN	??0DigitalDisplay@@QAE@HHHHPAD0MMHHW4DigitalOptions@@PAVAlarm@@_NUGUI_FONT@@4J@Z:PROC ; DigitalDisplay::DigitalDisplay
EXTRN	_sysData:BYTE
EXTRN	??0RPMSweep@@QAE@HHHHHHHHPAVAlarm@@_N@Z:PROC	; RPMSweep::RPMSweep
EXTRN	_SystemError:PROC
EXTRN	_WM_CreateWindowAsChild:PROC
EXTRN	_CalculateScaleTop:PROC
EXTRN	??0Alarm@@QAE@_NMMKKW4AlarmType@@PAV0@2@Z:PROC	; Alarm::Alarm
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT __real@437a0000
CONST	SEGMENT
__real@437a0000 DD 0437a0000r			; 250
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _Display_RPMSweepScreen
_TEXT	SEGMENT
tv225 = -344						; size = 4
tv167 = -344						; size = 4
tv132 = -344						; size = 4
tv282 = -340						; size = 4
tv260 = -340						; size = 4
tv244 = -340						; size = 4
tv186 = -340						; size = 4
tv81 = -340						; size = 4
tv154 = -337						; size = 1
$T17709 = -332						; size = 4
$T17710 = -320						; size = 4
$T17713 = -308						; size = 4
$T17714 = -296						; size = 4
$T17717 = -284						; size = 4
$T17718 = -272						; size = 4
$T17723 = -260						; size = 4
$T17724 = -248						; size = 4
$T17729 = -236						; size = 4
$T17730 = -224						; size = 4
$T17733 = -212						; size = 4
$T17734 = -200						; size = 4
_hParent$ = 8						; size = 4
_Display_RPMSweepScreen PROC				; COMDAT
; Line 287
	push	ebp
	mov	ebp, esp
	sub	esp, 344				; 00000158H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-344]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 294
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17710[ebp], eax
	cmp	DWORD PTR $T17710[ebp], 0
	je	SHORT $LN9@Display_RP
	push	0
	push	0
	push	1
	push	32896					; 00008080H
	push	65535					; 0000ffffH
	fild	DWORD PTR _vehicleData+36
	push	ecx
	fstp	DWORD PTR [esp]
	fild	DWORD PTR _vehicleData+32
	push	ecx
	fstp	DWORD PTR [esp]
	push	1
	mov	ecx, DWORD PTR $T17710[ebp]
	call	??0Alarm@@QAE@_NMMKKW4AlarmType@@PAV0@2@Z ; Alarm::Alarm
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN10@Display_RP
$LN9@Display_RP:
	mov	DWORD PTR tv81[ebp], 0
$LN10@Display_RP:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR $T17709[ebp], eax
	mov	ecx, DWORD PTR $T17709[ebp]
	mov	DWORD PTR _pYellow, ecx
; Line 296
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17714[ebp], eax
	cmp	DWORD PTR $T17714[ebp], 0
	je	SHORT $LN11@Display_RP
	push	0
	mov	eax, DWORD PTR _pYellow
	push	eax
	push	3
	push	128					; 00000080H
	push	255					; 000000ffH
	mov	ecx, DWORD PTR _vehicleData+20
	push	ecx
	call	_CalculateScaleTop
	add	esp, 4
	mov	DWORD PTR tv282[ebp], eax
	fild	DWORD PTR tv282[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fild	DWORD PTR _vehicleData+36
	push	ecx
	fstp	DWORD PTR [esp]
	push	1
	mov	ecx, DWORD PTR $T17714[ebp]
	call	??0Alarm@@QAE@_NMMKKW4AlarmType@@PAV0@2@Z ; Alarm::Alarm
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN12@Display_RP
$LN11@Display_RP:
	mov	DWORD PTR tv132[ebp], 0
$LN12@Display_RP:
	mov	edx, DWORD PTR tv132[ebp]
	mov	DWORD PTR $T17713[ebp], edx
	mov	eax, DWORD PTR $T17713[ebp]
	mov	DWORD PTR _pRed, eax
; Line 298
	mov	BYTE PTR _firsttimethrough, 1
; Line 299
	mov	BYTE PTR _drawFlag, 0
; Line 300
	mov	DWORD PTR ?rpm@@3HA, 0			; rpm
	mov	eax, DWORD PTR ?rpm@@3HA		; rpm
	mov	DWORD PTR ?gear@@3HA, eax		; gear
	mov	ecx, DWORD PTR ?gear@@3HA		; gear
	mov	DWORD PTR ?lap@@3HA, ecx		; lap
	mov	edx, DWORD PTR ?lap@@3HA		; lap
	mov	DWORD PTR ?holding@@3HA, edx		; holding
	mov	eax, DWORD PTR ?holding@@3HA		; holding
	mov	DWORD PTR ?lapTime@@3HA, eax		; lapTime
; Line 301
	fldz
	fstp	DWORD PTR ?speed@@3MA			; speed
	fld	DWORD PTR ?speed@@3MA			; speed
	fstp	DWORD PTR ?predictiveLap@@3MA		; predictiveLap
	fld	DWORD PTR ?predictiveLap@@3MA		; predictiveLap
	fstp	DWORD PTR ?altitude@@3MA		; altitude
; Line 303
	push	0
	push	OFFSET __cbRPMSweepCallback
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	call	_WM_CreateWindowAsChild
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hRPMScreen, eax
	cmp	DWORD PTR _hRPMScreen, 0
	jg	SHORT $LN6@Display_RP
; Line 304
	call	_SystemError
$LN6@Display_RP:
; Line 306
	push	132					; 00000084H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17718[ebp], eax
	cmp	DWORD PTR $T17718[ebp], 0
	je	SHORT $LN15@Display_RP
	cmp	DWORD PTR _DataValues+592, 0
	jl	SHORT $LN13@Display_RP
	fld	DWORD PTR _vehicleData+80
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN13@Display_RP
	mov	BYTE PTR tv154[ebp], 1
	jmp	SHORT $LN14@Display_RP
$LN13@Display_RP:
	mov	BYTE PTR tv154[ebp], 0
$LN14@Display_RP:
	movzx	eax, BYTE PTR tv154[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRed
	push	ecx
	push	500					; 000001f4H
	push	1000					; 000003e8H
	mov	edx, DWORD PTR _vehicleData+20
	push	edx
	call	_CalculateScaleTop
	add	esp, 4
	push	eax
	push	0
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	mov	ecx, DWORD PTR $T17718[ebp]
	call	??0RPMSweep@@QAE@HHHHHHHHPAVAlarm@@_N@Z	; RPMSweep::RPMSweep
	mov	DWORD PTR tv167[ebp], eax
	jmp	SHORT $LN16@Display_RP
$LN15@Display_RP:
	mov	DWORD PTR tv167[ebp], 0
$LN16@Display_RP:
	mov	eax, DWORD PTR tv167[ebp]
	mov	DWORD PTR $T17717[ebp], eax
	mov	ecx, DWORD PTR $T17717[ebp]
	mov	DWORD PTR _pSweep, ecx
	cmp	DWORD PTR _pSweep, 0
	ja	SHORT $LN5@Display_RP
; Line 307
	call	_SystemError
$LN5@Display_RP:
; Line 310
	push	216					; 000000d8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17724[ebp], eax
	cmp	DWORD PTR $T17724[ebp], 0
	je	$LN19@Display_RP
	cmp	DWORD PTR _sysData+100, 1
	jne	SHORT $LN17@Display_RP
	mov	DWORD PTR tv186[ebp], OFFSET $SG17591
	jmp	SHORT $LN18@Display_RP
$LN17@Display_RP:
	mov	DWORD PTR tv186[ebp], OFFSET $SG17592
$LN18@Display_RP:
	mov	eax, DWORD PTR _hRPMScreen
	push	eax
	sub	esp, 36					; 00000024H
	mov	ecx, 9
	mov	esi, OFFSET _GUI_Font32B_ASCII
	mov	edi, esp
	rep movsd
	sub	esp, 36					; 00000024H
	mov	ecx, 9
	mov	esi, OFFSET _GUI_FontD32
	mov	edi, esp
	rep movsd
	push	0
	push	0
	push	0
	push	0
	push	0
	push	ecx
	fld	DWORD PTR __real@437a0000
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR tv186[ebp]
	push	ecx
	push	OFFSET $SG17593
	push	50					; 00000032H
	push	150					; 00000096H
	push	5
	push	5
	mov	ecx, DWORD PTR $T17724[ebp]
	call	??0DigitalDisplay@@QAE@HHHHPAD0MMHHW4DigitalOptions@@PAVAlarm@@_NUGUI_FONT@@4J@Z ; DigitalDisplay::DigitalDisplay
	mov	DWORD PTR tv225[ebp], eax
	jmp	SHORT $LN20@Display_RP
$LN19@Display_RP:
	mov	DWORD PTR tv225[ebp], 0
$LN20@Display_RP:
	mov	edx, DWORD PTR tv225[ebp]
	mov	DWORD PTR $T17723[ebp], edx
	mov	eax, DWORD PTR $T17723[ebp]
	mov	DWORD PTR _pMPH, eax
	cmp	DWORD PTR _pMPH, 0
	ja	SHORT $LN4@Display_RP
; Line 311
	call	_SystemError
$LN4@Display_RP:
; Line 313
	cmp	DWORD PTR _selectedRaceMode, 0
	jne	$LN1@Display_RP
; Line 315
	push	52					; 00000034H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17730[ebp], eax
	cmp	DWORD PTR $T17730[ebp], 0
	je	SHORT $LN21@Display_RP
	mov	eax, DWORD PTR _hRPMScreen
	push	eax
	call	_GetPredictiveScale
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	call	_GetPredictiveScale
	push	ecx
	fstp	DWORD PTR [esp]
	push	50					; 00000032H
	push	345					; 00000159H
	push	220					; 000000dcH
	push	130					; 00000082H
	mov	ecx, DWORD PTR $T17730[ebp]
	call	??0PredictiveLapTimer@@QAE@HHHHMMJ@Z	; PredictiveLapTimer::PredictiveLapTimer
	mov	DWORD PTR tv244[ebp], eax
	jmp	SHORT $LN22@Display_RP
$LN21@Display_RP:
	mov	DWORD PTR tv244[ebp], 0
$LN22@Display_RP:
	mov	ecx, DWORD PTR tv244[ebp]
	mov	DWORD PTR $T17729[ebp], ecx
	mov	edx, DWORD PTR $T17729[ebp]
	mov	DWORD PTR _pPredictiveLap, edx
	cmp	DWORD PTR _pPredictiveLap, 0
	ja	SHORT $LN2@Display_RP
; Line 316
	call	_SystemError
$LN2@Display_RP:
; Line 318
	push	284					; 0000011cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17734[ebp], eax
	cmp	DWORD PTR $T17734[ebp], 0
	je	SHORT $LN23@Display_RP
	push	16777215				; 00ffffffH
	sub	esp, 36					; 00000024H
	mov	ecx, 9
	mov	esi, OFFSET _GUI_FontD48
	mov	edi, esp
	rep movsd
	mov	eax, DWORD PTR _hRPMScreen
	push	eax
	push	0
	push	60					; 0000003cH
	push	245					; 000000f5H
	push	160					; 000000a0H
	push	225					; 000000e1H
	mov	ecx, DWORD PTR $T17734[ebp]
	call	??0DigitalStringOutput@@QAE@HHHHW4DigitalOptions@@JUGUI_FONT@@K@Z ; DigitalStringOutput::DigitalStringOutput
	mov	DWORD PTR tv260[ebp], eax
	jmp	SHORT $LN24@Display_RP
$LN23@Display_RP:
	mov	DWORD PTR tv260[ebp], 0
$LN24@Display_RP:
	mov	ecx, DWORD PTR tv260[ebp]
	mov	DWORD PTR $T17733[ebp], ecx
	mov	edx, DWORD PTR $T17733[ebp]
	mov	DWORD PTR _pLapTimer, edx
	cmp	DWORD PTR _pLapTimer, 0
	ja	SHORT $LN1@Display_RP
; Line 319
	call	_SystemError
$LN1@Display_RP:
; Line 322
	push	0
	push	25					; 00000019H
	push	0
	mov	eax, DWORD PTR _hRPMScreen
	push	eax
	call	_WM_CreateTimer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hScreenTimer, eax
; Line 325
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	call	_GUI_MEMDEV_Create
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mem, eax
; Line 327
	mov	eax, DWORD PTR _hRPMScreen
; Line 328
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 344				; 00000158H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Display_RPMSweepScreen ENDP
_TEXT	ENDS
PUBLIC	_IfRPMSweepConfigGaugePressed
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _IfRPMSweepConfigGaugePressed
_TEXT	SEGMENT
_lastx$ = 8						; size = 4
_lasty$ = 12						; size = 4
_IfRPMSweepConfigGaugePressed PROC			; COMDAT
; Line 334
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 335
	movsx	eax, WORD PTR _SweepTachEditRect
	cmp	DWORD PTR _lastx$[ebp], eax
	jl	SHORT $LN2@IfRPMSweep
	movsx	eax, WORD PTR _SweepTachEditRect+4
	cmp	DWORD PTR _lastx$[ebp], eax
	jg	SHORT $LN2@IfRPMSweep
	movsx	eax, WORD PTR _SweepTachEditRect+2
	cmp	DWORD PTR _lasty$[ebp], eax
	jl	SHORT $LN2@IfRPMSweep
	movsx	eax, WORD PTR _SweepTachEditRect+6
	cmp	DWORD PTR _lasty$[ebp], eax
	jg	SHORT $LN2@IfRPMSweep
; Line 336
	mov	al, 1
	jmp	SHORT $LN3@IfRPMSweep
	jmp	SHORT $LN3@IfRPMSweep
$LN2@IfRPMSweep:
; Line 337
	xor	al, al
$LN3@IfRPMSweep:
; Line 338
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_IfRPMSweepConfigGaugePressed ENDP
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3f1f122f
PUBLIC	__$ArrayPad$
EXTRN	?DrawControl@PredictiveLapTimer@@QAEXXZ:PROC	; PredictiveLapTimer::DrawControl
EXTRN	?SetValue@PredictiveLapTimer@@QAEXM@Z:PROC	; PredictiveLapTimer::SetValue
EXTRN	?SetValue@PredictiveLapTimer@@QAEXPAD@Z:PROC	; PredictiveLapTimer::SetValue
EXTRN	_unsavedSysData:BYTE
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f1f122f
CONST	SEGMENT
__real@3f1f122f DD 03f1f122fr			; 0.621371
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?UpdatePredictiveLapControl@@YAXPAVPredictiveLapTimer@@M@Z
_TEXT	SEGMENT
tv128 = -264						; size = 8
tv73 = -260						; size = 4
_ftemp$17617 = -60					; size = 4
_scratch$ = -48						; size = 40
__$ArrayPad$ = -4					; size = 4
_pPredictiveLap$ = 8					; size = 4
_predictiveLap$ = 12					; size = 4
?UpdatePredictiveLapControl@@YAXPAVPredictiveLapTimer@@M@Z PROC ; UpdatePredictiveLapControl, COMDAT
; Line 349
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 353
	movzx	eax, BYTE PTR _unsavedSysData+221
	test	eax, eax
	je	$LN7@UpdatePred
; Line 354
	mov	eax, DWORD PTR _sysData+236
	and	eax, -65536				; ffff0000H
	shr	eax, 16					; 00000010H
	mov	DWORD PTR tv128[ebp], eax
	mov	DWORD PTR tv128[ebp+4], 0
	fild	QWORD PTR tv128[ebp]
	fstp	DWORD PTR _ftemp$17617[ebp]
; Line 355
	cmp	DWORD PTR _sysData+100, 0
	jne	SHORT $LN6@UpdatePred
; Line 356
	fld	DWORD PTR _ftemp$17617[ebp]
	fmul	DWORD PTR __real@3f1f122f
	fstp	DWORD PTR _ftemp$17617[ebp]
$LN6@UpdatePred:
; Line 358
	cmp	DWORD PTR _sysData+100, 0
	jne	SHORT $LN10@UpdatePred
	mov	DWORD PTR tv73[ebp], OFFSET $SG17622
	jmp	SHORT $LN11@UpdatePred
$LN10@UpdatePred:
	mov	DWORD PTR tv73[ebp], OFFSET $SG17623
$LN11@UpdatePred:
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	fld	DWORD PTR _ftemp$17617[ebp]
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	push	eax
	push	OFFSET $SG17624
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 359
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPredictiveLap$[ebp]
	call	?SetValue@PredictiveLapTimer@@QAEXPAD@Z	; PredictiveLapTimer::SetValue
	jmp	SHORT $LN1@UpdatePred
$LN7@UpdatePred:
; Line 361
	cmp	DWORD PTR _unsavedSysData+224, 0
	je	SHORT $LN4@UpdatePred
; Line 363
	mov	eax, DWORD PTR _unsavedSysData+224
	push	eax
	push	OFFSET $SG17627
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 364
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPredictiveLap$[ebp]
	call	?SetValue@PredictiveLapTimer@@QAEXPAD@Z	; PredictiveLapTimer::SetValue
	jmp	SHORT $LN1@UpdatePred
$LN4@UpdatePred:
; Line 366
	cmp	DWORD PTR ?lap@@3HA, 0			; lap
	jne	SHORT $LN2@UpdatePred
; Line 367
	push	OFFSET _sysData+160
	mov	ecx, DWORD PTR _pPredictiveLap$[ebp]
	call	?SetValue@PredictiveLapTimer@@QAEXPAD@Z	; PredictiveLapTimer::SetValue
	jmp	SHORT $LN1@UpdatePred
$LN2@UpdatePred:
; Line 368
	push	ecx
	fld	DWORD PTR _predictiveLap$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pPredictiveLap$[ebp]
	call	?SetValue@PredictiveLapTimer@@QAEXM@Z	; PredictiveLapTimer::SetValue
$LN1@UpdatePred:
; Line 370
	mov	ecx, DWORD PTR _pPredictiveLap$[ebp]
	call	?DrawControl@PredictiveLapTimer@@QAEXXZ	; PredictiveLapTimer::DrawControl
; Line 371
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@UpdatePred
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@UpdatePred:
	DD	1
	DD	$LN13@UpdatePred
$LN13@UpdatePred:
	DD	-48					; ffffffd0H
	DD	40					; 00000028H
	DD	$LN12@UpdatePred
$LN12@UpdatePred:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
?UpdatePredictiveLapControl@@YAXPAVPredictiveLapTimer@@M@Z ENDP ; UpdatePredictiveLapControl
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??__EpData@@YAXXZ
text$yc	SEGMENT
??__EpData@@YAXXZ PROC					; `dynamic initializer for 'pData'', COMDAT
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _DataElementRect
	mov	DWORD PTR _pData, eax
	mov	ecx, DWORD PTR _DataElementRect+4
	mov	DWORD PTR _pData+4, ecx
	mov	DWORD PTR _pData+8, 0
	mov	DWORD PTR _pData+12, 33023		; 000080ffH
	mov	DWORD PTR _pData+16, OFFSET _GUI_FontD32
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__EpData@@YAXXZ ENDP					; `dynamic initializer for 'pData''
text$yc	ENDS
EXTRN	_GUI_Font20B_ASCII:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__EpName@@YAXXZ
text$yc	SEGMENT
??__EpName@@YAXXZ PROC					; `dynamic initializer for 'pName'', COMDAT
; Line 65
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _NameRect
	mov	DWORD PTR _pName, eax
	mov	ecx, DWORD PTR _NameRect+4
	mov	DWORD PTR _pName+4, ecx
	mov	DWORD PTR _pName+8, 0
	mov	DWORD PTR _pName+12, 13882323		; 00d3d3d3H
	mov	DWORD PTR _pName+16, OFFSET _GUI_Font20B_ASCII
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__EpName@@YAXXZ ENDP					; `dynamic initializer for 'pName''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EpUnits@@YAXXZ
text$yc	SEGMENT
??__EpUnits@@YAXXZ PROC					; `dynamic initializer for 'pUnits'', COMDAT
; Line 66
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _UnitsRect
	mov	DWORD PTR _pUnits, eax
	mov	ecx, DWORD PTR _UnitsRect+4
	mov	DWORD PTR _pUnits+4, ecx
	mov	DWORD PTR _pUnits+8, 0
	mov	DWORD PTR _pUnits+12, 13882323		; 00d3d3d3H
	mov	DWORD PTR _pUnits+16, OFFSET _GUI_Font20B_ASCII
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__EpUnits@@YAXXZ ENDP					; `dynamic initializer for 'pUnits''
text$yc	ENDS
_BSS	SEGMENT
_pData	DB	014H DUP (?)
_pUnits	DB	014H DUP (?)
_pName	DB	014H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_pData$initializer$ DD FLAT:??__EpData@@YAXXZ
_pName$initializer$ DD FLAT:??__EpName@@YAXXZ
_pUnits$initializer$ DD FLAT:??__EpUnits@@YAXXZ
CRT$XCU	ENDS
END
