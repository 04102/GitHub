; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_XBF_PropExt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_XBF_APIList_Prop_Ext
EXTRN	_GUI_XBF__GetCharInfo:PROC
EXTRN	_GUI_XBF__IsInFont:PROC
EXTRN	_GUI_XBF__GetFontInfo:PROC
EXTRN	_GUI_XBF__GetCharDistX:PROC
CONST	SEGMENT
__APIList DD	00H
	DD	00H
	DD	FLAT:__DispLine
_GUI_XBF_APIList_Prop_Ext DD FLAT:__DispChar
	DD	FLAT:_GUI_XBF__GetCharDistX
	DD	FLAT:_GUI_XBF__GetFontInfo
	DD	FLAT:_GUI_XBF__IsInFont
	DD	FLAT:_GUI_XBF__GetCharInfo
	DD	FLAT:__APIList
CONST	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_LCD_FillRect:PROC
EXTRN	_GUI_SetColor:PROC
EXTRN	_GUI_GetBkColor:PROC
EXTRN	_GUI_GetColor:PROC
EXTRN	_LCD_DrawBitmap:PROC
EXTRN	_LCD_pBkColorIndex:DWORD
EXTRN	_GUI__Read16:PROC
EXTRN	_LCD_SetDrawMode:PROC
EXTRN	_GUI__CharHasTrans:BYTE
EXTRN	_GUI_XBF__GetOffAndSize:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_xbf_propext.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __DispChar
_TEXT	SEGMENT
_yPos$ = -472						; size = 4
_xPos$ = -460						; size = 4
_NumLines$ = -448					; size = 4
_RemLines$ = -436					; size = 4
_NumBytes$ = -424					; size = 2
_BytesPerLine$ = -412					; size = 2
_MaxLines$ = -400					; size = 2
_YSize$ = -388						; size = 2
_XSize$ = -376						; size = 2
_Size$ = -364						; size = 2
_yOff$ = -352						; size = 2
_xOff$ = -340						; size = 2
_xDist$ = -328						; size = 2
_iOff$ = -316						; size = 4
_Off$ = -304						; size = 4
_YDist$ = -292						; size = 4
_YMag$ = -280						; size = 4
_pXBF_Data$ = -268					; size = 4
_pBuffer$ = -256					; size = 4
_aBuffer$ = -244					; size = 200
_OldDrawMode$ = -36					; size = 4
_DrawMode$ = -24					; size = 4
_OldColor$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_c$ = 8							; size = 2
__DispChar PROC						; COMDAT
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 668				; 0000029cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-668]
	mov	ecx, 167				; 000000a7H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 51
	lea	eax, DWORD PTR _aBuffer$[ebp]
	mov	DWORD PTR _pBuffer$[ebp], eax
; Line 52
	mov	eax, DWORD PTR _GUI_Context+28
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pXBF_Data$[ebp], ecx
; Line 53
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	jl	SHORT $LN11@DispChar
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	jle	SHORT $LN12@DispChar
$LN11@DispChar:
; Line 54
	jmp	$LN13@DispChar
$LN12@DispChar:
; Line 59
	lea	eax, DWORD PTR _Size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Off$[ebp]
	push	ecx
	movzx	edx, WORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _pXBF_Data$[ebp]
	push	eax
	call	_GUI_XBF__GetOffAndSize
	add	esp, 16					; 00000010H
; Line 60
	cmp	DWORD PTR _Off$[ebp], 0
	jne	SHORT $LN10@DispChar
; Line 61
	jmp	$LN13@DispChar
$LN10@DispChar:
; Line 63
	movsx	eax, WORD PTR _GUI_Context+42
	mov	DWORD PTR _DrawMode$[ebp], eax
; Line 64
	movzx	eax, BYTE PTR _GUI__CharHasTrans
	test	eax, eax
	je	SHORT $LN9@DispChar
; Line 65
	mov	eax, DWORD PTR _DrawMode$[ebp]
	or	eax, 2
	mov	DWORD PTR _DrawMode$[ebp], eax
$LN9@DispChar:
; Line 67
	mov	eax, DWORD PTR _DrawMode$[ebp]
	push	eax
	call	_LCD_SetDrawMode
	add	esp, 4
	mov	DWORD PTR _OldDrawMode$[ebp], eax
; Line 71
	movzx	eax, WORD PTR _Size$[ebp]
	cmp	eax, 200				; 000000c8H
	jle	$LN8@DispChar
; Line 75
	mov	esi, esp
	lea	eax, DWORD PTR _aBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 76
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _xDist$[ebp], ax
; Line 77
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _XSize$[ebp], ax
; Line 78
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _YSize$[ebp], ax
; Line 79
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _xOff$[ebp], ax
; Line 80
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _yOff$[ebp], ax
; Line 81
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _BytesPerLine$[ebp], ax
; Line 82
	mov	eax, DWORD PTR _Off$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _iOff$[ebp], eax
; Line 83
	movzx	ecx, WORD PTR _BytesPerLine$[ebp]
	mov	eax, 188				; 000000bcH
	cdq
	idiv	ecx
	mov	WORD PTR _MaxLines$[ebp], ax
; Line 84
	movzx	eax, WORD PTR _YSize$[ebp]
	mov	DWORD PTR _RemLines$[ebp], eax
; Line 85
	movsx	eax, WORD PTR _GUI_Context+34
	movsx	ecx, WORD PTR _xOff$[ebp]
	add	eax, ecx
	mov	DWORD PTR _xPos$[ebp], eax
; Line 86
	movsx	eax, WORD PTR _GUI_Context+36
	movsx	ecx, WORD PTR _yOff$[ebp]
	add	eax, ecx
	mov	DWORD PTR _yPos$[ebp], eax
$LN7@DispChar:
; Line 94
	movzx	eax, WORD PTR _MaxLines$[ebp]
	mov	DWORD PTR _NumLines$[ebp], eax
; Line 95
	mov	eax, DWORD PTR _NumLines$[ebp]
	cmp	eax, DWORD PTR _RemLines$[ebp]
	jle	SHORT $LN4@DispChar
; Line 96
	mov	eax, DWORD PTR _RemLines$[ebp]
	mov	DWORD PTR _NumLines$[ebp], eax
$LN4@DispChar:
; Line 98
	movzx	eax, WORD PTR _BytesPerLine$[ebp]
	imul	eax, DWORD PTR _NumLines$[ebp]
	mov	WORD PTR _NumBytes$[ebp], ax
; Line 99
	mov	esi, esp
	lea	eax, DWORD PTR _aBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	movzx	eax, WORD PTR _NumBytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iOff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pXBF_Data$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 109
	mov	eax, DWORD PTR _LCD_pBkColorIndex
	push	eax
	lea	ecx, DWORD PTR _aBuffer$[ebp]
	push	ecx
	movzx	edx, WORD PTR _BytesPerLine$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+27]
	push	ecx
	mov	edx, DWORD PTR _GUI_Context+28
	movzx	eax, BYTE PTR [edx+26]
	push	eax
	mov	ecx, DWORD PTR _NumLines$[ebp]
	push	ecx
	movzx	edx, WORD PTR _XSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _yPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xPos$[ebp]
	push	ecx
	call	_LCD_DrawBitmap
	add	esp, 40					; 00000028H
; Line 110
	movzx	eax, WORD PTR _NumBytes$[ebp]
	add	eax, DWORD PTR _iOff$[ebp]
	mov	DWORD PTR _iOff$[ebp], eax
; Line 111
	mov	eax, DWORD PTR _RemLines$[ebp]
	sub	eax, DWORD PTR _NumLines$[ebp]
	mov	DWORD PTR _RemLines$[ebp], eax
; Line 112
	mov	eax, DWORD PTR _yPos$[ebp]
	add	eax, DWORD PTR _NumLines$[ebp]
	mov	DWORD PTR _yPos$[ebp], eax
; Line 113
	cmp	DWORD PTR _RemLines$[ebp], 0
	jne	$LN7@DispChar
; Line 114
	jmp	$LN3@DispChar
$LN8@DispChar:
; Line 118
	mov	esi, esp
	lea	eax, DWORD PTR _aBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	movzx	eax, WORD PTR _Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pXBF_Data$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 119
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _xDist$[ebp], ax
; Line 120
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _XSize$[ebp], ax
; Line 121
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _YSize$[ebp], ax
; Line 122
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _xOff$[ebp], ax
; Line 123
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _yOff$[ebp], ax
; Line 124
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _BytesPerLine$[ebp], ax
; Line 133
	mov	eax, DWORD PTR _LCD_pBkColorIndex
	push	eax
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	push	ecx
	movzx	edx, WORD PTR _BytesPerLine$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+27]
	push	ecx
	mov	edx, DWORD PTR _GUI_Context+28
	movzx	eax, BYTE PTR [edx+26]
	push	eax
	movzx	ecx, WORD PTR _YSize$[ebp]
	push	ecx
	movzx	edx, WORD PTR _XSize$[ebp]
	push	edx
	movsx	eax, WORD PTR _GUI_Context+36
	movsx	ecx, WORD PTR _yOff$[ebp]
	add	eax, ecx
	push	eax
	movsx	edx, WORD PTR _GUI_Context+34
	movsx	eax, WORD PTR _xOff$[ebp]
	add	edx, eax
	push	edx
	call	_LCD_DrawBitmap
	add	esp, 40					; 00000028H
$LN3@DispChar:
; Line 138
	mov	eax, DWORD PTR _DrawMode$[ebp]
	and	eax, 2
	jne	$LN2@DispChar
; Line 139
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+25]
	mov	edx, DWORD PTR _GUI_Context+28
	movzx	eax, BYTE PTR [edx+24]
	cmp	ecx, eax
	jle	$LN2@DispChar
; Line 140
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+27]
	mov	DWORD PTR _YMag$[ebp], ecx
; Line 141
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+25]
	imul	ecx, DWORD PTR _YMag$[ebp]
	mov	DWORD PTR _YDist$[ebp], ecx
; Line 142
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+24]
	imul	ecx, DWORD PTR _YMag$[ebp]
	mov	WORD PTR _YSize$[ebp], cx
; Line 143
	call	_GUI_GetColor
	mov	DWORD PTR _OldColor$[ebp], eax
; Line 144
	call	_GUI_GetBkColor
	push	eax
	call	_GUI_SetColor
	add	esp, 4
; Line 148
	movsx	eax, WORD PTR _GUI_Context+36
	add	eax, DWORD PTR _YDist$[ebp]
	push	eax
	movsx	ecx, WORD PTR _GUI_Context+34
	movzx	edx, WORD PTR _XSize$[ebp]
	add	ecx, edx
	push	ecx
	movsx	eax, WORD PTR _GUI_Context+36
	movzx	ecx, WORD PTR _YSize$[ebp]
	add	eax, ecx
	push	eax
	movsx	edx, WORD PTR _GUI_Context+34
	push	edx
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
; Line 149
	mov	eax, DWORD PTR _OldColor$[ebp]
	push	eax
	call	_GUI_SetColor
	add	esp, 4
$LN2@DispChar:
; Line 155
	mov	eax, DWORD PTR _OldDrawMode$[ebp]
	push	eax
	call	_LCD_SetDrawMode
	add	esp, 4
; Line 156
	movsx	eax, WORD PTR _xDist$[ebp]
	movsx	ecx, WORD PTR _GUI_Context+34
	add	ecx, eax
	mov	WORD PTR _GUI_Context+34, cx
$LN13@DispChar:
; Line 157
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@DispChar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 668				; 0000029cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@DispChar:
	DD	4
	DD	$LN19@DispChar
$LN19@DispChar:
	DD	-244					; ffffff0cH
	DD	200					; 000000c8H
	DD	$LN15@DispChar
	DD	-256					; ffffff00H
	DD	4
	DD	$LN16@DispChar
	DD	-304					; fffffed0H
	DD	4
	DD	$LN17@DispChar
	DD	-364					; fffffe94H
	DD	2
	DD	$LN18@DispChar
$LN18@DispChar:
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN17@DispChar:
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN16@DispChar:
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN15@DispChar:
	DB	97					; 00000061H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
__DispChar ENDP
_TEXT	ENDS
EXTRN	_GUIPROP_EXT__ClearLine:PROC
EXTRN	_GUI_ENC_APIList_EXT:BYTE
EXTRN	_GUIPROP_EXT__SetfpClearLine:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DispLine
_TEXT	SEGMENT
_s$ = 8							; size = 4
_Len$ = 12						; size = 4
__DispLine PROC						; COMDAT
; Line 194
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 195
	push	OFFSET __ClearLine
	call	_GUIPROP_EXT__SetfpClearLine
	add	esp, 4
; Line 196
	mov	esi, esp
	mov	eax, DWORD PTR _Len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	DWORD PTR _GUI_ENC_APIList_EXT+8
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 197
	push	OFFSET _GUIPROP_EXT__ClearLine
	call	_GUIPROP_EXT__SetfpClearLine
	add	esp, 4
; Line 198
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DispLine ENDP
_TEXT	ENDS
EXTRN	_GUI__GetOverlap:PROC
EXTRN	_GUI_UC__GetCharCodeInc:PROC
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __ClearLine
_TEXT	SEGMENT
tv70 = -280						; size = 4
$T8433 = -269						; size = 1
_OldColor$ = -68					; size = 4
_DispPosY$ = -56					; size = 4
_DispPosX$ = -44					; size = 4
_yDist$ = -32						; size = 4
_XDist$ = -20						; size = 2
_c$ = -8						; size = 2
_s$ = 8							; size = 4
_Len$ = 12						; size = 4
__ClearLine PROC					; COMDAT
; Line 163
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T8433[ebp], 0
; Line 168
	call	_GUI_GetColor
	mov	DWORD PTR _OldColor$[ebp], eax
; Line 169
	movsx	eax, WORD PTR _GUI_Context+42
	and	eax, 4
	je	SHORT $LN5@ClearLine
	call	_GUI_GetColor
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN6@ClearLine
$LN5@ClearLine:
	call	_GUI_GetBkColor
	mov	DWORD PTR tv70[ebp], eax
$LN6@ClearLine:
	mov	ecx, DWORD PTR tv70[ebp]
	push	ecx
	call	_GUI_SetColor
	add	esp, 4
; Line 170
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+25]
	mov	edx, DWORD PTR _GUI_Context+28
	movzx	eax, BYTE PTR [edx+27]
	imul	ecx, eax
	mov	DWORD PTR _yDist$[ebp], ecx
; Line 171
	movsx	eax, WORD PTR _GUI_Context+34
	mov	DWORD PTR _DispPosX$[ebp], eax
; Line 172
	movsx	eax, WORD PTR _GUI_Context+36
	mov	DWORD PTR _DispPosY$[ebp], eax
; Line 173
	xor	eax, eax
	mov	WORD PTR _XDist$[ebp], ax
$LN2@ClearLine:
; Line 174
	mov	eax, DWORD PTR _Len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Len$[ebp], eax
	js	SHORT $LN1@ClearLine
; Line 175
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_GUI_UC__GetCharCodeInc
	add	esp, 4
	mov	BYTE PTR $T8433[ebp], 1
	mov	WORD PTR _c$[ebp], ax
; Line 176
	cmp	BYTE PTR $T8433[ebp], 0
	jne	SHORT $LN7@ClearLine
	push	OFFSET $LN8@ClearLine
	call	__RTC_UninitUse
	add	esp, 4
$LN7@ClearLine:
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	call	_GUI_XBF__GetCharDistX
	add	esp, 4
	movsx	ecx, WORD PTR _XDist$[ebp]
	add	ecx, eax
	mov	WORD PTR _XDist$[ebp], cx
; Line 177
	jmp	SHORT $LN2@ClearLine
$LN1@ClearLine:
; Line 178
	cmp	BYTE PTR $T8433[ebp], 0
	jne	SHORT $LN9@ClearLine
	push	OFFSET $LN8@ClearLine
	call	__RTC_UninitUse
	add	esp, 4
$LN9@ClearLine:
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	call	_GUI__GetOverlap
	add	esp, 4
	movsx	ecx, WORD PTR _XDist$[ebp]
	add	ecx, eax
	mov	WORD PTR _XDist$[ebp], cx
; Line 182
	mov	eax, DWORD PTR _DispPosY$[ebp]
	add	eax, DWORD PTR _yDist$[ebp]
	push	eax
	movsx	ecx, WORD PTR _XDist$[ebp]
	add	ecx, DWORD PTR _DispPosX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _DispPosY$[ebp]
	push	edx
	mov	eax, DWORD PTR _DispPosX$[ebp]
	push	eax
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
; Line 183
	mov	eax, DWORD PTR _OldColor$[ebp]
	push	eax
	call	_GUI_SetColor
	add	esp, 4
; Line 187
	mov	BYTE PTR _GUI__CharHasTrans, 1
; Line 188
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@ClearLine:
$LN8@ClearLine:
	DB	99					; 00000063H
	DB	0
__ClearLine ENDP
_TEXT	ENDS
END
