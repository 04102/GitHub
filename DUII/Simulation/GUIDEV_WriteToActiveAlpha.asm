; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\MemDev\GUIDEV_WriteToActiveAlpha.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_MEMDEV__WriteToActiveAlpha
EXTRN	_LCD_DrawBitmap:PROC
EXTRN	_GUI__CompactPixelIndicesEx:PROC
EXTRN	_GUI_GetpfColor2IndexEx:PROC
EXTRN	_GUI_GetpfIndex2ColorEx:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_GUI_ALLOC_LockH:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
_pConvert DD	01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\memdev\guidev_writetoactivealpha.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_MEMDEV__WriteToActiveAlpha
_TEXT	SEGMENT
tv146 = -328						; size = 4
tv95 = -328						; size = 4
_pfColor2Index_DST$ = -128				; size = 4
_pfIndex2Color_DST$ = -116				; size = 4
_pfIndex2Color_DEV$ = -104				; size = 4
_BytesPerPixel_DST$ = -92				; size = 4
_BitsPerPixel_DST$ = -80				; size = 4
_ConversionRequired$ = -68				; size = 4
_i$ = -56						; size = 4
_xSizeDevice$ = -44					; size = 4
_ySizeDevice$ = -32					; size = 4
_pDev$ = -20						; size = 4
_pDevice$ = -8						; size = 4
_hMem$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_GUI_MEMDEV__WriteToActiveAlpha PROC			; COMDAT
; Line 140
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 153
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 154
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	DWORD PTR _xSizeDevice$[ebp], ecx
; Line 155
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	mov	DWORD PTR _ySizeDevice$[ebp], ecx
; Line 156
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _pfIndex2Color_DEV$[ebp], eax
; Line 157
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pDev$[ebp], 0
; Line 161
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	ecx, DWORD PTR _GUI_Context[eax*4+72]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 162
	mov	esi, esp
	push	8
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _BitsPerPixel_DST$[ebp], eax
; Line 163
	cmp	DWORD PTR _BitsPerPixel_DST$[ebp], 8
	ja	SHORT $LN8@GUI_MEMDEV
; Line 164
	mov	DWORD PTR _BytesPerPixel_DST$[ebp], 1
	jmp	SHORT $LN7@GUI_MEMDEV
$LN8@GUI_MEMDEV:
; Line 165
	cmp	DWORD PTR _BitsPerPixel_DST$[ebp], 16	; 00000010H
	ja	SHORT $LN6@GUI_MEMDEV
; Line 166
	mov	DWORD PTR _BytesPerPixel_DST$[ebp], 2
; Line 167
	jmp	SHORT $LN7@GUI_MEMDEV
$LN6@GUI_MEMDEV:
; Line 168
	mov	DWORD PTR _BytesPerPixel_DST$[ebp], 4
$LN7@GUI_MEMDEV:
; Line 173
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_GUI_GetpfIndex2ColorEx
	add	esp, 4
	mov	DWORD PTR _pfIndex2Color_DST$[ebp], eax
; Line 174
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_GUI_GetpfColor2IndexEx
	add	esp, 4
	mov	DWORD PTR _pfColor2Index_DST$[ebp], eax
; Line 175
	mov	eax, DWORD PTR _pfIndex2Color_DEV$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR _pfIndex2Color_DST$[ebp]
	setne	cl
	mov	DWORD PTR _ConversionRequired$[ebp], ecx
; Line 179
	mov	DWORD PTR _i$[ebp], 0
$LN4@GUI_MEMDEV:
; Line 184
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv95[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _pfIndex2Color_DST$[ebp]
	push	edx
	mov	eax, DWORD PTR _ConversionRequired$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSizeDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hMem$[ebp]
	push	edx
	mov	eax, DWORD PTR tv95[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__DoAlphaBlending
	add	esp, 28					; 0000001cH
; Line 188
	cmp	DWORD PTR _ConversionRequired$[ebp], 0
	je	SHORT $LN1@GUI_MEMDEV
; Line 189
	mov	eax, DWORD PTR _pfColor2Index_DST$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BitsPerPixel_DST$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xSizeDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pConvert
	push	eax
	call	_GUI__CompactPixelIndicesEx
	add	esp, 16					; 00000010H
$LN1@GUI_MEMDEV:
; Line 194
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR tv146[ebp], eax
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 1
	mov	DWORD PTR _y$[ebp], ecx
	push	0
	mov	edx, DWORD PTR _pConvert
	push	edx
	push	0
	mov	eax, DWORD PTR _BytesPerPixel_DST$[ebp]
	shl	eax, 3
	push	eax
	push	1
	push	1
	push	1
	mov	ecx, DWORD PTR _xSizeDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv146[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_LCD_DrawBitmap
	add	esp, 40					; 00000028H
; Line 195
	mov	eax, DWORD PTR _ySizeDevice$[ebp]
	sub	eax, 1
	mov	DWORD PTR _ySizeDevice$[ebp], eax
	jne	$LN4@GUI_MEMDEV
; Line 196
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV__WriteToActiveAlpha ENDP
_TEXT	ENDS
EXTRN	_GUI__MixColors:PROC
EXTRN	_GUI__ExpandPixelIndicesEx:PROC
EXTRN	_GUI_ReadRectEx:PROC
EXTRN	_LCD_GetBitsPerPixel:PROC
EXTRN	_GUI_ALLOC_GetFixedBlock:PROC
EXTRN	_LCD_GetVXSizeMax:PROC
EXTRN	_GUI_MEMDEV_GetDataPtr:PROC
_BSS	SEGMENT
_pCurrent DD	01H DUP (?)
?VXSizeMax@?1??_DoAlphaBlending@@9@9 DD 01H DUP (?)	; `_DoAlphaBlending'::`2'::VXSizeMax
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __DoAlphaBlending
_TEXT	SEGMENT
_pDevice$ = -128					; size = 4
_Index$ = -116						; size = 4
_Read$ = -104						; size = 4
_xSizeOrg$ = -92					; size = 4
_xOff$ = -80						; size = 4
_Off$ = -68						; size = 4
_x0$ = -56						; size = 4
_BitsPerPixelCurrent$ = -44				; size = 4
_Alpha$ = -29						; size = 1
_Color$ = -20						; size = 4
_pData$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_yOff$ = 16						; size = 4
_hMem$ = 20						; size = 4
_xSize$ = 24						; size = 4
_ConversionRequired$ = 28				; size = 4
_pfIndex2Color$ = 32					; size = 4
__DoAlphaBlending PROC					; COMDAT
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 61
	mov	DWORD PTR _Read$[ebp], 0
; Line 62
	mov	DWORD PTR _Index$[ebp], 0
; Line 66
	mov	eax, DWORD PTR _ConversionRequired$[ebp]
	mov	DWORD PTR _ConversionRequired$[ebp], eax
; Line 67
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetDataPtr
	add	esp, 4
	mov	ecx, DWORD PTR _xSize$[ebp]
	imul	ecx, DWORD PTR _yOff$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _pData$[ebp], edx
; Line 71
	cmp	DWORD PTR _pConvert, 0
	jne	SHORT $LN14@DoAlphaBle
; Line 72
	call	_LCD_GetVXSizeMax
	mov	DWORD PTR ?VXSizeMax@?1??_DoAlphaBlending@@9@9, eax
; Line 73
	mov	eax, DWORD PTR ?VXSizeMax@?1??_DoAlphaBlending@@9@9
	shl	eax, 2
	push	eax
	call	_GUI_ALLOC_GetFixedBlock
	add	esp, 4
	mov	DWORD PTR _pConvert, eax
$LN14@DoAlphaBle:
; Line 75
	mov	eax, DWORD PTR _xSize$[ebp]
	cmp	eax, DWORD PTR ?VXSizeMax@?1??_DoAlphaBlending@@9@9
	jle	SHORT $LN13@DoAlphaBle
; Line 76
	mov	eax, DWORD PTR ?VXSizeMax@?1??_DoAlphaBlending@@9@9
	mov	DWORD PTR _xSize$[ebp], eax
$LN13@DoAlphaBle:
; Line 78
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR _xSizeOrg$[ebp], eax
; Line 79
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	ecx, DWORD PTR _GUI_Context[eax*4+72]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 80
	call	_LCD_GetBitsPerPixel
	mov	DWORD PTR _BitsPerPixelCurrent$[ebp], eax
; Line 81
	mov	DWORD PTR _xOff$[ebp], 0
$LN12@DoAlphaBle:
; Line 83
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Color$[ebp], ecx
	mov	edx, DWORD PTR _pData$[ebp]
	add	edx, 4
	mov	DWORD PTR _pData$[ebp], edx
; Line 84
	mov	eax, DWORD PTR _xOff$[ebp]
	add	eax, 1
	mov	DWORD PTR _xOff$[ebp], eax
; Line 85
	mov	eax, DWORD PTR _Color$[ebp]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _Alpha$[ebp], al
; Line 86
	movzx	eax, BYTE PTR _Alpha$[ebp]
	test	eax, eax
	je	$LN9@DoAlphaBle
; Line 90
	cmp	DWORD PTR _pCurrent, 0
	jne	SHORT $LN8@DoAlphaBle
; Line 91
	mov	eax, DWORD PTR ?VXSizeMax@?1??_DoAlphaBlending@@9@9
	shl	eax, 2
	push	eax
	call	_GUI_ALLOC_GetFixedBlock
	add	esp, 4
	mov	DWORD PTR _pCurrent, eax
; Line 92
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetDataPtr
	add	esp, 4
	mov	ecx, DWORD PTR _xSizeOrg$[ebp]
	imul	ecx, DWORD PTR _yOff$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _xOff$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _pData$[ebp], ecx
$LN8@DoAlphaBle:
; Line 97
	cmp	DWORD PTR _Read$[ebp], 0
	jne	$LN7@DoAlphaBle
; Line 98
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR _x0$[ebp], eax
; Line 99
	movsx	eax, WORD PTR _GUI_Context+8
	cmp	eax, DWORD PTR _x0$[ebp]
	jle	SHORT $LN6@DoAlphaBle
; Line 100
	movsx	eax, WORD PTR _GUI_Context+8
	sub	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _Off$[ebp], eax
; Line 101
	movsx	eax, WORD PTR _GUI_Context+8
	mov	DWORD PTR _x0$[ebp], eax
; Line 102
	jmp	SHORT $LN5@DoAlphaBle
$LN6@DoAlphaBle:
; Line 103
	mov	DWORD PTR _Off$[ebp], 0
$LN5@DoAlphaBle:
; Line 105
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Index$[ebp]
	mov	edx, DWORD PTR _pCurrent
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _Off$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSizeOrg$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	_GUI_ReadRectEx
	add	esp, 24					; 00000018H
; Line 106
	mov	DWORD PTR _Read$[ebp], 1
; Line 108
	cmp	DWORD PTR _BitsPerPixelCurrent$[ebp], 24 ; 00000018H
	jge	SHORT $LN7@DoAlphaBle
; Line 109
	mov	eax, DWORD PTR _pfIndex2Color$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BitsPerPixelCurrent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pCurrent
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_GUI__ExpandPixelIndicesEx
	add	esp, 16					; 00000010H
$LN7@DoAlphaBle:
; Line 112
	movzx	eax, BYTE PTR _Alpha$[ebp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN3@DoAlphaBle
; Line 116
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pConvert
	mov	edx, DWORD PTR _Index$[ebp]
	mov	esi, DWORD PTR _pCurrent
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 117
	jmp	SHORT $LN2@DoAlphaBle
$LN3@DoAlphaBle:
; Line 121
	movzx	eax, BYTE PTR _Alpha$[ebp]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _Index$[ebp]
	mov	eax, DWORD PTR _pCurrent
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _Color$[ebp]
	push	edx
	call	_GUI__MixColors
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _Index$[ebp]
	mov	edx, DWORD PTR _pConvert
	mov	DWORD PTR [edx+ecx*4], eax
$LN2@DoAlphaBle:
; Line 123
	jmp	SHORT $LN1@DoAlphaBle
$LN9@DoAlphaBle:
; Line 124
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pConvert
	mov	edx, DWORD PTR _Color$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
$LN1@DoAlphaBle:
; Line 126
	mov	eax, DWORD PTR _Index$[ebp]
	add	eax, 1
	mov	DWORD PTR _Index$[ebp], eax
; Line 127
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN12@DoAlphaBle
; Line 128
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DoAlphaBlending ENDP
_TEXT	ENDS
END
