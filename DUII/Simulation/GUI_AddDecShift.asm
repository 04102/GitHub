; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_AddDecShift.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_Pow10
_DATA	SEGMENT
$SG8375	DB	'Can not display more than 10 dec. digits', 00H
_DATA	ENDS
CONST	SEGMENT
_GUI_Pow10 DD	01H
	DD	0aH
	DD	064H
	DD	03e8H
	DD	02710H
	DD	0186a0H
	DD	0f4240H
	DD	0989680H
	DD	05f5e100H
	DD	03b9aca00H
CONST	ENDS
PUBLIC	_GUI_Long2Len
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_adddecshift.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_Long2Len
_TEXT	SEGMENT
tv66 = -220						; size = 4
_v$ = -20						; size = 4
_Len$ = -8						; size = 4
_vSign$ = 8						; size = 4
_GUI_Long2Len PROC					; COMDAT
; Line 82
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 83
	mov	DWORD PTR _Len$[ebp], 1
; Line 84
	cmp	DWORD PTR _vSign$[ebp], 0
	jle	SHORT $LN6@GUI_Long2L
	mov	eax, DWORD PTR _vSign$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN7@GUI_Long2L
$LN6@GUI_Long2L:
	mov	ecx, DWORD PTR _vSign$[ebp]
	neg	ecx
	mov	DWORD PTR tv66[ebp], ecx
$LN7@GUI_Long2L:
	mov	edx, DWORD PTR tv66[ebp]
	mov	DWORD PTR _v$[ebp], edx
$LN3@GUI_Long2L:
; Line 85
	mov	eax, DWORD PTR _Len$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	cmp	ecx, DWORD PTR _GUI_Pow10[eax*4]
	jb	SHORT $LN2@GUI_Long2L
	cmp	DWORD PTR _Len$[ebp], 10		; 0000000aH
	jge	SHORT $LN2@GUI_Long2L
; Line 86
	mov	eax, DWORD PTR _Len$[ebp]
	add	eax, 1
	mov	DWORD PTR _Len$[ebp], eax
; Line 87
	jmp	SHORT $LN3@GUI_Long2L
$LN2@GUI_Long2L:
; Line 88
	cmp	DWORD PTR _vSign$[ebp], 0
	jge	SHORT $LN1@GUI_Long2L
; Line 89
	mov	eax, DWORD PTR _Len$[ebp]
	add	eax, 1
	mov	DWORD PTR _Len$[ebp], eax
$LN1@GUI_Long2L:
; Line 91
	mov	eax, DWORD PTR _Len$[ebp]
; Line 92
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_Long2Len ENDP
_TEXT	ENDS
PUBLIC	_GUI_AddSign
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_AddSign
_TEXT	SEGMENT
_v$ = 8							; size = 4
_ps$ = 12						; size = 4
_GUI_AddSign PROC					; COMDAT
; Line 98
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 99
	cmp	DWORD PTR _v$[ebp], 0
	jle	SHORT $LN1@GUI_AddSig
; Line 100
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx], 43			; 0000002bH
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 101
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx], 0
$LN1@GUI_AddSig:
; Line 103
	mov	eax, DWORD PTR _v$[ebp]
; Line 104
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_AddSign ENDP
_TEXT	ENDS
PUBLIC	_GUI_AddDecShift
EXTRN	_GUI_DecChar:BYTE
EXTRN	_GUI_ErrorOut:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_AddDecShift
_TEXT	SEGMENT
tv88 = -232						; size = 4
_Overflow$ = -29					; size = 1
_d$ = -20						; size = 4
_c$ = -5						; size = 1
_v$ = 8							; size = 4
_Len$ = 12						; size = 1
_Shift$ = 16						; size = 1
_ps$ = 20						; size = 4
_GUI_AddDecShift PROC					; COMDAT
; Line 116
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 124
	cmp	DWORD PTR _v$[ebp], -2147483648		; 80000000H
	jne	SHORT $LN10@GUI_AddDec
; Line 125
	mov	BYTE PTR _Overflow$[ebp], 1
; Line 126
	mov	eax, DWORD PTR _v$[ebp]
	add	eax, 1
	mov	DWORD PTR _v$[ebp], eax
; Line 127
	mov	eax, DWORD PTR _v$[ebp]
	imul	eax, -1
	mov	DWORD PTR _v$[ebp], eax
; Line 128
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx], 45			; 0000002dH
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 129
	mov	al, BYTE PTR _Len$[ebp]
	sub	al, 1
	mov	BYTE PTR _Len$[ebp], al
; Line 130
	jmp	SHORT $LN9@GUI_AddDec
$LN10@GUI_AddDec:
; Line 131
	mov	BYTE PTR _Overflow$[ebp], 0
; Line 132
	mov	eax, DWORD PTR _ps$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	__Check_NegLong
	add	esp, 8
	movzx	edx, BYTE PTR _Len$[ebp]
	sub	edx, eax
	mov	BYTE PTR _Len$[ebp], dl
$LN9@GUI_AddDec:
; Line 134
	movzx	eax, BYTE PTR _Shift$[ebp]
	test	eax, eax
	je	SHORT $LN8@GUI_AddDec
; Line 135
	mov	al, BYTE PTR _Len$[ebp]
	sub	al, 1
	mov	BYTE PTR _Len$[ebp], al
$LN8@GUI_AddDec:
; Line 138
	movzx	eax, BYTE PTR _Len$[ebp]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN6@GUI_AddDec
; Line 139
	mov	BYTE PTR _Len$[ebp], 10			; 0000000aH
; Line 140
	push	OFFSET $SG8375
	call	_GUI_ErrorOut
	add	esp, 4
$LN6@GUI_AddDec:
; Line 143
	movzx	eax, BYTE PTR _Len$[ebp]
	test	eax, eax
	je	$LN5@GUI_AddDec
; Line 144
	movzx	eax, BYTE PTR _Shift$[ebp]
	movzx	ecx, BYTE PTR _Len$[ebp]
	mov	dl, BYTE PTR _Len$[ebp]
	sub	dl, 1
	mov	BYTE PTR _Len$[ebp], dl
	cmp	ecx, eax
	jne	SHORT $LN13@GUI_AddDec
	mov	DWORD PTR tv88[ebp], 1
	jmp	SHORT $LN14@GUI_AddDec
$LN13@GUI_AddDec:
	mov	DWORD PTR tv88[ebp], 0
$LN14@GUI_AddDec:
	cmp	DWORD PTR tv88[ebp], 0
	je	SHORT $LN4@GUI_AddDec
; Line 145
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR _GUI_DecChar
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ps$[ebp]
	mov	DWORD PTR [edx], ecx
$LN4@GUI_AddDec:
; Line 147
	movzx	eax, BYTE PTR _Len$[ebp]
	mov	ecx, DWORD PTR _GUI_Pow10[eax*4]
	mov	DWORD PTR _d$[ebp], ecx
; Line 148
	mov	eax, DWORD PTR _v$[ebp]
	cdq
	idiv	DWORD PTR _d$[ebp]
	mov	BYTE PTR _c$[ebp], al
; Line 149
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 9
	jle	SHORT $LN3@GUI_AddDec
; Line 150
	jmp	SHORT $LN5@GUI_AddDec
$LN3@GUI_AddDec:
; Line 152
	movzx	eax, BYTE PTR _c$[ebp]
	imul	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _v$[ebp], ecx
; Line 153
	movzx	eax, BYTE PTR _Len$[ebp]
	test	eax, eax
	jne	SHORT $LN2@GUI_AddDec
; Line 154
	movzx	eax, BYTE PTR _Overflow$[ebp]
	test	eax, eax
	je	SHORT $LN2@GUI_AddDec
; Line 155
	mov	al, BYTE PTR _c$[ebp]
	add	al, 1
	mov	BYTE PTR _c$[ebp], al
$LN2@GUI_AddDec:
; Line 158
	movzx	eax, BYTE PTR _c$[ebp]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ps$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 159
	jmp	$LN6@GUI_AddDec
$LN5@GUI_AddDec:
; Line 160
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx], 0
; Line 161
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_AddDecShift ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Check_NegLong
_TEXT	SEGMENT
_pv$ = 8						; size = 4
_ps$ = 12						; size = 4
__Check_NegLong PROC					; COMDAT
; Line 63
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 64
	mov	eax, DWORD PTR _pv$[ebp]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN1@Check_NegL
; Line 65
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx], 45			; 0000002dH
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 66
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax]
	neg	ecx
	mov	edx, DWORD PTR _pv$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 67
	mov	eax, 1
	jmp	SHORT $LN2@Check_NegL
$LN1@Check_NegL:
; Line 69
	xor	eax, eax
$LN2@Check_NegL:
; Line 70
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__Check_NegLong ENDP
_TEXT	ENDS
END
