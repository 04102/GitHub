; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\DUII\ConfigurableGaugeCommon.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_configureGaugeMode
_DATA	SEGMENT
COMM	_boxStartTime:DWORD
COMM	_drawFlag:BYTE
_DATA	ENDS
_BSS	SEGMENT
_configureGaugeMode DB 01H DUP (?)
$SG18155 DB	01H DUP (?)
$SG18156 DB	01H DUP (?)
$SG18206 DB	01H DUP (?)
$SG18218 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG18055 DB	'AEM ', 00H
	ORG $+3
$SG18056 DB	'PLX ', 00H
	ORG $+3
$SG18059 DB	'Analog %d', 00H
	ORG $+2
$SG18060 DB	'Disabled', 00H
	ORG $+3
$SG18069 DB	'Digital %d', 00H
	ORG $+1
$SG18070 DB	'Disabled', 00H
	ORG $+3
$SG18083 DB	'%d', 00H
	ORG $+1
$SG18088 DB	'%d', 00H
	ORG $+1
$SG18092 DB	'%0.2f', 00H
	ORG $+2
$SG18094 DB	'%0.1f', 00H
	ORG $+2
$SG18105 DB	'0', 00H
	ORG $+2
$SG18109 DB	'%0.0f', 00H
	ORG $+2
$SG18113 DB	'%0.0f', 00H
	ORG $+2
$SG18117 DB	'%0.1f', 00H
	ORG $+2
$SG18121 DB	'%0.2f', 00H
	ORG $+2
$SG18123 DB	'%0.2f', 00H
	ORG $+2
$SG18138 DB	'%02d:%02d', 00H
	ORG $+2
$SG18140 DB	'%02d:%02d', 00H
	ORG $+2
$SG18146 DB	'elapsed', 00H
$SG18147 DB	'time', 00H
	ORG $+3
$SG18149 DB	'GPS', 00H
$SG18150 DB	'time', 00H
	ORG $+3
$SG18152 DB	'Best', 00H
	ORG $+3
$SG18153 DB	'Lap', 00H
$SG18176 DB	'mph', 00H
$SG18177 DB	'kph', 00H
$SG18178 DB	'vmax', 00H
	ORG $+3
$SG18180 DB	'mph', 00H
$SG18181 DB	'kph', 00H
$SG18182 DB	'vmin', 00H
	ORG $+3
$SG18184 DB	'Volts', 00H
	ORG $+2
$SG18185 DB	'Battery', 00H
$SG18187 DB	'Gs', 00H
	ORG $+1
$SG18188 DB	'Accel/Bk', 00H
	ORG $+3
$SG18190 DB	'Gs', 00H
	ORG $+1
$SG18191 DB	'Lateral', 00H
$SG18193 DB	'Gs', 00H
	ORG $+1
$SG18194 DB	'Vertical', 00H
	ORG $+3
$SG18196 DB	'Gs', 00H
	ORG $+1
$SG18197 DB	'Total', 00H
	ORG $+2
$SG18199 DB	'secs', 00H
	ORG $+3
$SG18200 DB	'Gap', 00H
$SG18202 DB	'feet', 00H
	ORG $+3
$SG18203 DB	'meters', 00H
	ORG $+1
$SG18204 DB	'Altitude', 00H
	ORG $+3
$SG18207 DB	'rpm', 00H
$SG18219 DB	'mph', 00H
$SG18220 DB	'kph', 00H
_DATA	ENDS
PUBLIC	_ScreenIsConfigurable
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\duii\configurablegaugecommon.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _ScreenIsConfigurable
_TEXT	SEGMENT
_screenID$ = 8						; size = 4
_ScreenIsConfigurable PROC				; COMDAT
; Line 70
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 71
	cmp	DWORD PTR _screenID$[ebp], 1
	je	SHORT $LN2@ScreenIsCo
	cmp	DWORD PTR _screenID$[ebp], 6
	je	SHORT $LN2@ScreenIsCo
	cmp	DWORD PTR _screenID$[ebp], 7
	je	SHORT $LN2@ScreenIsCo
	cmp	DWORD PTR _screenID$[ebp], 0
	jne	SHORT $LN3@ScreenIsCo
$LN2@ScreenIsCo:
; Line 72
	mov	al, 1
	jmp	SHORT $LN4@ScreenIsCo
	jmp	SHORT $LN4@ScreenIsCo
$LN3@ScreenIsCo:
; Line 73
	xor	al, al
$LN4@ScreenIsCo:
; Line 74
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ScreenIsConfigurable ENDP
_TEXT	ENDS
PUBLIC	_ConfigureGauge
EXTRN	_GUI_GetTime:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ConfigureGauge
_TEXT	SEGMENT
_ConfigureGauge PROC					; COMDAT
; Line 80
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 81
	mov	BYTE PTR _configureGaugeMode, 1
; Line 82
	mov	BYTE PTR _drawFlag, 1
; Line 83
	call	_GUI_GetTime
	mov	DWORD PTR _boxStartTime, eax
; Line 84
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ConfigureGauge ENDP
_TEXT	ENDS
PUBLIC	_ButtonPressIsOnConfigurableGauge
EXTRN	_IfGMeterConfigGaugePressed:PROC
EXTRN	_IfDigitalConfigGaugePressed:PROC
EXTRN	_IfRPMSweepConfigGaugePressed:PROC
EXTRN	_IfAnalogConfigGaugePressed:PROC
EXTRN	_GetCurrentScreenID:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ButtonPressIsOnConfigurableGauge
_TEXT	SEGMENT
_screenID$ = -8						; size = 4
_lastx$ = 8						; size = 4
_lasty$ = 12						; size = 4
_ButtonPressIsOnConfigurableGauge PROC			; COMDAT
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 97
	call	_GetCurrentScreenID
	mov	DWORD PTR _screenID$[ebp], eax
	cmp	DWORD PTR _screenID$[ebp], 1
	jne	SHORT $LN8@ButtonPres
; Line 98
	mov	eax, DWORD PTR _lasty$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lastx$[ebp]
	push	ecx
	call	_IfAnalogConfigGaugePressed
	add	esp, 8
	jmp	SHORT $LN9@ButtonPres
	jmp	SHORT $LN9@ButtonPres
$LN8@ButtonPres:
; Line 99
	cmp	DWORD PTR _screenID$[ebp], 6
	jne	SHORT $LN6@ButtonPres
; Line 100
	mov	eax, DWORD PTR _lasty$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lastx$[ebp]
	push	ecx
	call	_IfRPMSweepConfigGaugePressed
	add	esp, 8
	jmp	SHORT $LN9@ButtonPres
	jmp	SHORT $LN9@ButtonPres
$LN6@ButtonPres:
; Line 101
	cmp	DWORD PTR _screenID$[ebp], 7
	jne	SHORT $LN4@ButtonPres
; Line 102
	mov	eax, DWORD PTR _lasty$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lastx$[ebp]
	push	ecx
	call	_IfDigitalConfigGaugePressed
	add	esp, 8
	jmp	SHORT $LN9@ButtonPres
	jmp	SHORT $LN9@ButtonPres
$LN4@ButtonPres:
; Line 103
	cmp	DWORD PTR _screenID$[ebp], 0
	jne	SHORT $LN2@ButtonPres
; Line 104
	mov	eax, DWORD PTR _lasty$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lastx$[ebp]
	push	ecx
	call	_IfGMeterConfigGaugePressed
	add	esp, 8
	jmp	SHORT $LN9@ButtonPres
	jmp	SHORT $LN9@ButtonPres
$LN2@ButtonPres:
; Line 105
	xor	al, al
$LN9@ButtonPres:
; Line 106
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ButtonPressIsOnConfigurableGauge ENDP
_TEXT	ENDS
PUBLIC	_SetConfigurableItem
PUBLIC	_GetConfigurableItem
PUBLIC	_ProcessGaugeButton
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ProcessGaugeButton
_TEXT	SEGMENT
tv71 = -196						; size = 4
_lastx$ = 8						; size = 4
_lasty$ = 12						; size = 4
_ProcessGaugeButton PROC				; COMDAT
; Line 114
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 115
	mov	eax, DWORD PTR _lasty$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lastx$[ebp]
	push	ecx
	call	_ButtonPressIsOnConfigurableGauge
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	$LN24@ProcessGau
; Line 117
	call	_GUI_GetTime
	mov	DWORD PTR _boxStartTime, eax
; Line 118
	call	_GetConfigurableItem
	mov	DWORD PTR tv71[ebp], eax
	cmp	DWORD PTR tv71[ebp], 81			; 00000051H
	ja	SHORT $LN20@ProcessGau
	mov	eax, DWORD PTR tv71[ebp]
	movzx	ecx, BYTE PTR $LN26@ProcessGau[eax]
	jmp	DWORD PTR $LN27@ProcessGau[ecx*4]
$LN20@ProcessGau:
; Line 121
	push	37					; 00000025H
	call	_SetConfigurableItem
	add	esp, 4
	jmp	$LN24@ProcessGau
$LN19@ProcessGau:
; Line 122
	push	54					; 00000036H
	call	_SetConfigurableItem
	add	esp, 4
	jmp	$LN24@ProcessGau
$LN18@ProcessGau:
; Line 123
	push	55					; 00000037H
	call	_SetConfigurableItem
	add	esp, 4
	jmp	$LN24@ProcessGau
$LN17@ProcessGau:
; Line 124
	push	56					; 00000038H
	call	_SetConfigurableItem
	add	esp, 4
	jmp	$LN24@ProcessGau
$LN16@ProcessGau:
; Line 125
	push	57					; 00000039H
	call	_SetConfigurableItem
	add	esp, 4
	jmp	$LN24@ProcessGau
$LN15@ProcessGau:
; Line 126
	push	58					; 0000003aH
	call	_SetConfigurableItem
	add	esp, 4
	jmp	$LN24@ProcessGau
$LN14@ProcessGau:
; Line 127
	push	59					; 0000003bH
	call	_SetConfigurableItem
	add	esp, 4
	jmp	$LN24@ProcessGau
$LN13@ProcessGau:
; Line 128
	push	71					; 00000047H
	call	_SetConfigurableItem
	add	esp, 4
	jmp	$LN24@ProcessGau
$LN12@ProcessGau:
; Line 129
	push	0
	call	_SetConfigurableItem
	add	esp, 4
	jmp	$LN24@ProcessGau
$LN11@ProcessGau:
; Line 130
	push	1
	call	_SetConfigurableItem
	add	esp, 4
	jmp	SHORT $LN24@ProcessGau
$LN10@ProcessGau:
; Line 131
	push	2
	call	_SetConfigurableItem
	add	esp, 4
	jmp	SHORT $LN24@ProcessGau
$LN9@ProcessGau:
; Line 132
	push	80					; 00000050H
	call	_SetConfigurableItem
	add	esp, 4
	jmp	SHORT $LN24@ProcessGau
$LN8@ProcessGau:
; Line 133
	push	31					; 0000001fH
	call	_SetConfigurableItem
	add	esp, 4
	jmp	SHORT $LN24@ProcessGau
$LN7@ProcessGau:
; Line 134
	push	81					; 00000051H
	call	_SetConfigurableItem
	add	esp, 4
	jmp	SHORT $LN24@ProcessGau
$LN6@ProcessGau:
; Line 135
	push	19					; 00000013H
	call	_SetConfigurableItem
	add	esp, 4
	jmp	SHORT $LN24@ProcessGau
$LN5@ProcessGau:
; Line 136
	push	34					; 00000022H
	call	_SetConfigurableItem
	add	esp, 4
	jmp	SHORT $LN24@ProcessGau
$LN4@ProcessGau:
; Line 137
	push	18					; 00000012H
	call	_SetConfigurableItem
	add	esp, 4
	jmp	SHORT $LN24@ProcessGau
$LN3@ProcessGau:
; Line 138
	push	14					; 0000000eH
	call	_SetConfigurableItem
	add	esp, 4
	jmp	SHORT $LN24@ProcessGau
$LN2@ProcessGau:
; Line 139
	push	53					; 00000035H
	call	_SetConfigurableItem
	add	esp, 4
	jmp	SHORT $LN24@ProcessGau
$LN1@ProcessGau:
; Line 140
	push	38					; 00000026H
	call	_SetConfigurableItem
	add	esp, 4
$LN24@ProcessGau:
; Line 143
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@ProcessGau:
	DD	$LN11@ProcessGau
	DD	$LN10@ProcessGau
	DD	$LN9@ProcessGau
	DD	$LN2@ProcessGau
	DD	$LN3@ProcessGau
	DD	$LN5@ProcessGau
	DD	$LN7@ProcessGau
	DD	$LN4@ProcessGau
	DD	$LN19@ProcessGau
	DD	$LN1@ProcessGau
	DD	$LN18@ProcessGau
	DD	$LN17@ProcessGau
	DD	$LN16@ProcessGau
	DD	$LN15@ProcessGau
	DD	$LN14@ProcessGau
	DD	$LN13@ProcessGau
	DD	$LN12@ProcessGau
	DD	$LN8@ProcessGau
	DD	$LN6@ProcessGau
	DD	$LN20@ProcessGau
$LN26@ProcessGau:
	DB	0
	DB	1
	DB	2
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	3
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	4
	DB	5
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	6
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	7
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	8
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	16					; 00000010H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	17					; 00000011H
	DB	18					; 00000012H
_ProcessGaugeButton ENDP
_TEXT	ENDS
EXTRN	_sysData:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetConfigurableItem
_TEXT	SEGMENT
_GetConfigurableItem PROC				; COMDAT
; Line 146
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 147
	mov	eax, DWORD PTR _sysData+232
	and	eax, 255				; 000000ffH
; Line 148
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GetConfigurableItem ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _SetConfigurableItem
_TEXT	SEGMENT
_item$ = 8						; size = 4
_SetConfigurableItem PROC				; COMDAT
; Line 151
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 152
	mov	eax, DWORD PTR _sysData+232
	and	eax, -256				; ffffff00H
	or	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR _sysData+232, eax
; Line 153
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SetConfigurableItem ENDP
_TEXT	ENDS
PUBLIC	_FormatAnalogData
PUBLIC	_GetInputID
PUBLIC	__$ArrayPad$
PUBLIC	_ShowInput
EXTRN	_sprintf:PROC
EXTRN	_strncmp:PROC
EXTRN	_GUI_DispStringInRect:PROC
EXTRN	_GUI_SetFont:PROC
EXTRN	_GetValue:PROC
EXTRN	_GUI_SetColor:PROC
EXTRN	_vehicleData:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ShowInput
_TEXT	SEGMENT
$T18264 = -272						; size = 8
_pStr$ = -64						; size = 4
_scratch$ = -52						; size = 30
_ftemp$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_config$ = 8						; size = 4
_input$ = 12						; size = 4
_ShowInput PROC						; COMDAT
; Line 163
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 167
	mov	eax, DWORD PTR _input$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+147]
	test	ecx, ecx
	je	$LN5@ShowInput
; Line 170
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_GUI_SetColor
	add	esp, 4
; Line 171
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_GetInputID
	add	esp, 4
	push	eax
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T18264[ebp], eax
	mov	DWORD PTR $T18264[ebp+4], edx
	fld	DWORD PTR $T18264[ebp]
	fstp	DWORD PTR _ftemp$[ebp]
; Line 172
	push	ecx
	fld	DWORD PTR _ftemp$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_FormatAnalogData
	add	esp, 8
; Line 173
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_GUI_SetFont
	add	esp, 4
; Line 174
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 177
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_GUI_SetColor
	add	esp, 4
; Line 178
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_GUI_SetFont
	add	esp, 4
; Line 180
	push	4
	push	OFFSET $SG18055
	mov	eax, DWORD PTR _input$[ebp]
	shl	eax, 6
	add	eax, OFFSET _vehicleData+120
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN3@ShowInput
	push	4
	push	OFFSET $SG18056
	mov	eax, DWORD PTR _input$[ebp]
	shl	eax, 6
	add	eax, OFFSET _vehicleData+120
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@ShowInput
$LN3@ShowInput:
; Line 181
	mov	eax, DWORD PTR _input$[ebp]
	shl	eax, 6
	add	eax, OFFSET _vehicleData+124
	mov	DWORD PTR _pStr$[ebp], eax
	jmp	SHORT $LN2@ShowInput
$LN4@ShowInput:
; Line 182
	mov	eax, DWORD PTR _input$[ebp]
	shl	eax, 6
	add	eax, OFFSET _vehicleData+120
	mov	DWORD PTR _pStr$[ebp], eax
$LN2@ShowInput:
; Line 183
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pStr$[ebp]
	push	edx
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 186
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_GUI_SetColor
	add	esp, 4
; Line 187
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_GUI_SetFont
	add	esp, 4
; Line 188
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	shl	edx, 6
	add	edx, OFFSET _vehicleData+137
	push	edx
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 190
	jmp	$LN1@ShowInput
$LN5@ShowInput:
; Line 193
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_GUI_SetColor
	add	esp, 4
; Line 194
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_GUI_SetFont
	add	esp, 4
; Line 195
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	push	OFFSET $SG18059
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 196
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 199
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_GUI_SetColor
	add	esp, 4
; Line 200
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_GUI_SetFont
	add	esp, 4
; Line 201
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG18060
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
$LN1@ShowInput:
; Line 203
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ShowInput
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@ShowInput:
	DD	1
	DD	$LN9@ShowInput
$LN9@ShowInput:
	DD	-52					; ffffffccH
	DD	30					; 0000001eH
	DD	$LN8@ShowInput
$LN8@ShowInput:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_ShowInput ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ShowDigitalInput
EXTRN	_GetDigitalText:PROC
EXTRN	_GUI_Font32B_ASCII:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ShowDigitalInput
_TEXT	SEGMENT
_scratch$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_config$ = 8						; size = 4
_input$ = 12						; size = 4
_ShowDigitalInput PROC					; COMDAT
; Line 212
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 215
	mov	eax, DWORD PTR _input$[ebp]
	imul	eax, 47					; 0000002fH
	movzx	ecx, BYTE PTR _vehicleData[eax+419]
	test	ecx, ecx
	je	$LN2@ShowDigita
; Line 218
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_GUI_SetColor
	add	esp, 4
; Line 219
	push	OFFSET _GUI_Font32B_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 220
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	push	1
	call	_GetDigitalText
	add	esp, 8
	push	eax
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 223
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_GUI_SetColor
	add	esp, 4
; Line 224
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_GUI_SetFont
	add	esp, 4
; Line 225
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	imul	edx, 47					; 0000002fH
	add	edx, OFFSET _vehicleData+376
	push	edx
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 227
	jmp	$LN3@ShowDigita
$LN2@ShowDigita:
; Line 230
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_GUI_SetColor
	add	esp, 4
; Line 231
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_GUI_SetFont
	add	esp, 4
; Line 232
	mov	eax, DWORD PTR _input$[ebp]
	add	eax, 4
	push	eax
	push	OFFSET $SG18069
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 233
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 236
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_GUI_SetColor
	add	esp, 4
; Line 237
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_GUI_SetFont
	add	esp, 4
; Line 238
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG18070
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
$LN3@ShowDigita:
; Line 240
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@ShowDigita
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@ShowDigita:
	DD	1
	DD	$LN6@ShowDigita
$LN6@ShowDigita:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN5@ShowDigita
$LN5@ShowDigita:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_ShowDigitalInput ENDP
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	__$ArrayPad$
PUBLIC	_ShowOtherInput
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ShowOtherInput
_TEXT	SEGMENT
$T18281 = -276						; size = 8
$T18282 = -260						; size = 8
_scratch$ = -52						; size = 30
_ftemp$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_config$ = 8						; size = 4
_input$ = 12						; size = 4
_pLabel$ = 16						; size = 4
_pUnits$ = 20						; size = 4
_ShowOtherInput PROC					; COMDAT
; Line 244
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 249
	cmp	DWORD PTR _input$[ebp], 53		; 00000035H
	jne	SHORT $LN12@ShowOtherI
; Line 250
	push	53					; 00000035H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T18281[ebp], eax
	mov	DWORD PTR $T18281[ebp+4], edx
	mov	eax, DWORD PTR $T18281[ebp]
	push	eax
	push	OFFSET $SG18083
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 251
	jmp	$LN5@ShowOtherI
$LN12@ShowOtherI:
; Line 253
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T18282[ebp], eax
	mov	DWORD PTR $T18282[ebp+4], edx
	fld	DWORD PTR $T18282[ebp]
	fstp	DWORD PTR _ftemp$[ebp]
; Line 254
	cmp	DWORD PTR _input$[ebp], 19		; 00000013H
	je	SHORT $LN9@ShowOtherI
	cmp	DWORD PTR _input$[ebp], 14		; 0000000eH
	jne	SHORT $LN10@ShowOtherI
$LN9@ShowOtherI:
; Line 255
	fld	DWORD PTR _ftemp$[ebp]
	call	__ftol2_sse
	push	eax
	push	OFFSET $SG18088
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN5@ShowOtherI
$LN10@ShowOtherI:
; Line 256
	cmp	DWORD PTR _input$[ebp], 31		; 0000001fH
	je	SHORT $LN6@ShowOtherI
	cmp	DWORD PTR _input$[ebp], 80		; 00000050H
	je	SHORT $LN6@ShowOtherI
	cmp	DWORD PTR _input$[ebp], 0
	je	SHORT $LN6@ShowOtherI
	cmp	DWORD PTR _input$[ebp], 1
	je	SHORT $LN6@ShowOtherI
	cmp	DWORD PTR _input$[ebp], 2
	jne	SHORT $LN7@ShowOtherI
$LN6@ShowOtherI:
; Line 257
	fld	DWORD PTR _ftemp$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG18092
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN5@ShowOtherI
$LN7@ShowOtherI:
; Line 258
	fld	DWORD PTR _ftemp$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG18094
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
$LN5@ShowOtherI:
; Line 262
	cmp	DWORD PTR _input$[ebp], 31		; 0000001fH
	jne	SHORT $LN4@ShowOtherI
; Line 264
	fldz
	fcomp	DWORD PTR _ftemp$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@ShowOtherI
; Line 265
	push	65280					; 0000ff00H
	call	_GUI_SetColor
	add	esp, 4
	jmp	SHORT $LN2@ShowOtherI
$LN3@ShowOtherI:
; Line 266
	push	255					; 000000ffH
	call	_GUI_SetColor
	add	esp, 4
$LN2@ShowOtherI:
; Line 268
	jmp	SHORT $LN1@ShowOtherI
$LN4@ShowOtherI:
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_GUI_SetColor
	add	esp, 4
$LN1@ShowOtherI:
; Line 271
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_GUI_SetFont
	add	esp, 4
; Line 272
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 275
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_GUI_SetColor
	add	esp, 4
; Line 276
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_GUI_SetFont
	add	esp, 4
; Line 277
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pLabel$[ebp]
	push	edx
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 280
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_GUI_SetColor
	add	esp, 4
; Line 281
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_GUI_SetFont
	add	esp, 4
; Line 282
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _pUnits$[ebp]
	push	edx
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 283
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@ShowOtherI
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@ShowOtherI:
	DD	1
	DD	$LN16@ShowOtherI
$LN16@ShowOtherI:
	DD	-52					; ffffffccH
	DD	30					; 0000001eH
	DD	$LN15@ShowOtherI
$LN15@ShowOtherI:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_ShowOtherInput ENDP
_TEXT	ENDS
PUBLIC	__real@bfb999999999999a
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@bff0000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@c024000000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@c059000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@0000000000000000
EXTRN	_strcpy:PROC
;	COMDAT __real@bfb999999999999a
CONST	SEGMENT
__real@bfb999999999999a DQ 0bfb999999999999ar	; -0.1
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@c024000000000000
CONST	SEGMENT
__real@c024000000000000 DQ 0c024000000000000r	; -10
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@c059000000000000
CONST	SEGMENT
__real@c059000000000000 DQ 0c059000000000000r	; -100
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _FormatAnalogData
_TEXT	SEGMENT
_pStr$ = 8						; size = 4
_dValue$ = 12						; size = 4
_FormatAnalogData PROC					; COMDAT
; Line 292
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 293
	fld	DWORD PTR _dValue$[ebp]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN14@FormatAnal
; Line 294
	push	OFFSET $SG18105
	mov	eax, DWORD PTR _pStr$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
	jmp	$LN1@FormatAnal
$LN14@FormatAnal:
; Line 295
	fld	DWORD PTR _dValue$[ebp]
	fcomp	QWORD PTR __real@408f400000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN11@FormatAnal
	fld	DWORD PTR _dValue$[ebp]
	fcomp	QWORD PTR __real@c059000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN12@FormatAnal
$LN11@FormatAnal:
; Line 296
	fld	DWORD PTR _dValue$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG18109
	mov	eax, DWORD PTR _pStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
	jmp	$LN1@FormatAnal
$LN12@FormatAnal:
; Line 297
	fld	DWORD PTR _dValue$[ebp]
	fcomp	QWORD PTR __real@4059000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN8@FormatAnal
	fld	DWORD PTR _dValue$[ebp]
	fcomp	QWORD PTR __real@c024000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN9@FormatAnal
$LN8@FormatAnal:
; Line 298
	fld	DWORD PTR _dValue$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG18113
	mov	eax, DWORD PTR _pStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
	jmp	$LN1@FormatAnal
$LN9@FormatAnal:
; Line 299
	fld	DWORD PTR _dValue$[ebp]
	fcomp	QWORD PTR __real@4024000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN5@FormatAnal
	fld	DWORD PTR _dValue$[ebp]
	fcomp	QWORD PTR __real@bff0000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@FormatAnal
$LN5@FormatAnal:
; Line 300
	fld	DWORD PTR _dValue$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG18117
	mov	eax, DWORD PTR _pStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN1@FormatAnal
$LN6@FormatAnal:
; Line 301
	fld	DWORD PTR _dValue$[ebp]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN2@FormatAnal
	fld	DWORD PTR _dValue$[ebp]
	fcomp	QWORD PTR __real@bfb999999999999a
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@FormatAnal
$LN2@FormatAnal:
; Line 302
	fld	DWORD PTR _dValue$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG18121
	mov	eax, DWORD PTR _pStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN1@FormatAnal
$LN3@FormatAnal:
; Line 303
	fld	DWORD PTR _dValue$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG18123
	mov	eax, DWORD PTR _pStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
$LN1@FormatAnal:
; Line 304
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FormatAnalogData ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ShowTime
EXTRN	_GetTimeString:PROC
EXTRN	_formatLapTime:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ShowTime
_TEXT	SEGMENT
tv135 = -288						; size = 4
$T18312 = -280						; size = 8
$T18313 = -264						; size = 8
_time$18136 = -56					; size = 4
_pText2$ = -44						; size = 4
_pText1$ = -32						; size = 4
_scratch$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_config$ = 8						; size = 4
_item$ = 12						; size = 4
_ShowTime PROC						; COMDAT
; Line 308
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 311
	cmp	DWORD PTR _item$[ebp], 81		; 00000051H
	jne	SHORT $LN12@ShowTime
; Line 313
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T18312[ebp], eax
	mov	DWORD PTR $T18312[ebp+4], edx
	push	0
	mov	ecx, DWORD PTR $T18312[ebp]
	push	ecx
	call	_formatLapTime
	add	esp, 8
	push	eax
	lea	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
	jmp	$LN11@ShowTime
$LN12@ShowTime:
; Line 315
	cmp	DWORD PTR _item$[ebp], 18		; 00000012H
	jne	SHORT $LN10@ShowTime
; Line 317
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	push	3
	call	_GetTimeString
	add	esp, 8
; Line 319
	jmp	$LN11@ShowTime
$LN10@ShowTime:
; Line 323
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T18313[ebp], eax
	mov	DWORD PTR $T18313[ebp+4], edx
	mov	eax, DWORD PTR $T18313[ebp]
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR _time$18136[ebp], eax
; Line 326
	cmp	DWORD PTR _time$18136[ebp], 6000	; 00001770H
	jae	SHORT $LN8@ShowTime
; Line 327
	mov	eax, DWORD PTR _time$18136[ebp]
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	push	edx
	mov	eax, DWORD PTR _time$18136[ebp]
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	push	eax
	push	OFFSET $SG18138
	lea	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN11@ShowTime
$LN8@ShowTime:
; Line 328
	mov	eax, DWORD PTR _time$18136[ebp]
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	push	edx
	mov	eax, DWORD PTR _time$18136[ebp]
	xor	edx, edx
	mov	ecx, 3600				; 00000e10H
	div	ecx
	push	eax
	push	OFFSET $SG18140
	lea	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
$LN11@ShowTime:
; Line 332
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_GUI_SetColor
	add	esp, 4
; Line 333
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_GUI_SetFont
	add	esp, 4
; Line 334
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 337
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_GUI_SetColor
	add	esp, 4
; Line 338
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_GUI_SetFont
	add	esp, 4
; Line 339
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR tv135[ebp], eax
	cmp	DWORD PTR tv135[ebp], 18		; 00000012H
	je	SHORT $LN3@ShowTime
	cmp	DWORD PTR tv135[ebp], 35		; 00000023H
	je	SHORT $LN4@ShowTime
	cmp	DWORD PTR tv135[ebp], 81		; 00000051H
	je	SHORT $LN2@ShowTime
	jmp	SHORT $LN1@ShowTime
$LN4@ShowTime:
; Line 341
	mov	DWORD PTR _pText1$[ebp], OFFSET $SG18146
	mov	DWORD PTR _pText2$[ebp], OFFSET $SG18147
	jmp	SHORT $LN5@ShowTime
$LN3@ShowTime:
; Line 342
	mov	DWORD PTR _pText1$[ebp], OFFSET $SG18149
	mov	DWORD PTR _pText2$[ebp], OFFSET $SG18150
	jmp	SHORT $LN5@ShowTime
$LN2@ShowTime:
; Line 343
	mov	DWORD PTR _pText1$[ebp], OFFSET $SG18152
	mov	DWORD PTR _pText2$[ebp], OFFSET $SG18153
	jmp	SHORT $LN5@ShowTime
$LN1@ShowTime:
; Line 344
	mov	DWORD PTR _pText1$[ebp], OFFSET $SG18155
	mov	DWORD PTR _pText2$[ebp], OFFSET $SG18156
$LN5@ShowTime:
; Line 346
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pText1$[ebp]
	push	edx
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 347
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _pText2$[ebp]
	push	edx
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 348
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@ShowTime
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@ShowTime:
	DD	1
	DD	$LN16@ShowTime
$LN16@ShowTime:
	DD	-20					; ffffffecH
	DD	10					; 0000000aH
	DD	$LN15@ShowTime
$LN15@ShowTime:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_ShowTime ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _GetInputID
_TEXT	SEGMENT
tv64 = -196						; size = 4
_input$ = 8						; size = 4
_GetInputID PROC					; COMDAT
; Line 354
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 355
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN3@GetInputID
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN2@GetInputID
	cmp	DWORD PTR tv64[ebp], 3
	je	SHORT $LN1@GetInputID
; Line 358
	mov	eax, 54					; 00000036H
	jmp	SHORT $LN7@GetInputID
$LN3@GetInputID:
; Line 359
	mov	eax, 55					; 00000037H
	jmp	SHORT $LN7@GetInputID
$LN2@GetInputID:
; Line 360
	mov	eax, 56					; 00000038H
	jmp	SHORT $LN7@GetInputID
$LN1@GetInputID:
; Line 361
	mov	eax, 57					; 00000039H
$LN7@GetInputID:
; Line 363
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GetInputID ENDP
_TEXT	ENDS
PUBLIC	_DisplayConfigurableItem
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayConfigurableItem
_TEXT	SEGMENT
tv164 = -196						; size = 4
tv135 = -196						; size = 4
tv73 = -196						; size = 4
tv67 = -196						; size = 4
tv65 = -196						; size = 4
_config$ = 8						; size = 4
_DisplayConfigurableItem PROC				; COMDAT
; Line 372
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 373
	call	_GetConfigurableItem
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 81			; 00000051H
	ja	SHORT $LN20@DisplayCon
	mov	eax, DWORD PTR tv65[ebp]
	movzx	ecx, BYTE PTR $LN33@DisplayCon[eax]
	jmp	DWORD PTR $LN34@DisplayCon[ecx*4]
$LN20@DisplayCon:
; Line 377
	cmp	DWORD PTR _sysData+100, 0
	jne	SHORT $LN25@DisplayCon
	mov	DWORD PTR tv67[ebp], OFFSET $SG18176
	jmp	SHORT $LN26@DisplayCon
$LN25@DisplayCon:
	mov	DWORD PTR tv67[ebp], OFFSET $SG18177
$LN26@DisplayCon:
	mov	eax, DWORD PTR tv67[ebp]
	push	eax
	push	OFFSET $SG18178
	push	38					; 00000026H
	mov	ecx, DWORD PTR _config$[ebp]
	push	ecx
	call	_ShowOtherInput
	add	esp, 16					; 00000010H
; Line 378
	jmp	$LN23@DisplayCon
$LN19@DisplayCon:
; Line 381
	cmp	DWORD PTR _sysData+100, 0
	jne	SHORT $LN27@DisplayCon
	mov	DWORD PTR tv73[ebp], OFFSET $SG18180
	jmp	SHORT $LN28@DisplayCon
$LN27@DisplayCon:
	mov	DWORD PTR tv73[ebp], OFFSET $SG18181
$LN28@DisplayCon:
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	push	OFFSET $SG18182
	push	37					; 00000025H
	mov	ecx, DWORD PTR _config$[ebp]
	push	ecx
	call	_ShowOtherInput
	add	esp, 16					; 00000010H
; Line 382
	jmp	$LN23@DisplayCon
$LN18@DisplayCon:
; Line 385
	push	OFFSET $SG18184
	push	OFFSET $SG18185
	push	71					; 00000047H
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	call	_ShowOtherInput
	add	esp, 16					; 00000010H
; Line 386
	jmp	$LN23@DisplayCon
$LN17@DisplayCon:
; Line 389
	push	OFFSET $SG18187
	push	OFFSET $SG18188
	push	0
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	call	_ShowOtherInput
	add	esp, 16					; 00000010H
; Line 390
	jmp	$LN23@DisplayCon
$LN16@DisplayCon:
; Line 393
	push	OFFSET $SG18190
	push	OFFSET $SG18191
	push	1
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	call	_ShowOtherInput
	add	esp, 16					; 00000010H
; Line 394
	jmp	$LN23@DisplayCon
$LN15@DisplayCon:
; Line 397
	push	OFFSET $SG18193
	push	OFFSET $SG18194
	push	2
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	call	_ShowOtherInput
	add	esp, 16					; 00000010H
; Line 398
	jmp	$LN23@DisplayCon
$LN14@DisplayCon:
; Line 401
	push	OFFSET $SG18196
	push	OFFSET $SG18197
	push	80					; 00000050H
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	call	_ShowOtherInput
	add	esp, 16					; 00000010H
; Line 402
	jmp	$LN23@DisplayCon
$LN13@DisplayCon:
; Line 405
	push	OFFSET $SG18199
	push	OFFSET $SG18200
	push	31					; 0000001fH
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	call	_ShowOtherInput
	add	esp, 16					; 00000010H
; Line 406
	jmp	$LN23@DisplayCon
$LN12@DisplayCon:
; Line 409
	cmp	DWORD PTR _sysData+100, 0
	jne	SHORT $LN29@DisplayCon
	mov	DWORD PTR tv135[ebp], OFFSET $SG18202
	jmp	SHORT $LN30@DisplayCon
$LN29@DisplayCon:
	mov	DWORD PTR tv135[ebp], OFFSET $SG18203
$LN30@DisplayCon:
	mov	eax, DWORD PTR tv135[ebp]
	push	eax
	push	OFFSET $SG18204
	push	19					; 00000013H
	mov	ecx, DWORD PTR _config$[ebp]
	push	ecx
	call	_ShowOtherInput
	add	esp, 16					; 00000010H
; Line 410
	jmp	$LN23@DisplayCon
$LN11@DisplayCon:
; Line 413
	push	OFFSET $SG18206
	push	OFFSET $SG18207
	push	53					; 00000035H
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	call	_ShowOtherInput
	add	esp, 16					; 00000010H
; Line 414
	jmp	$LN23@DisplayCon
$LN10@DisplayCon:
; Line 417
	push	0
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	call	_ShowInput
	add	esp, 8
; Line 418
	jmp	$LN23@DisplayCon
$LN9@DisplayCon:
; Line 421
	push	1
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	call	_ShowInput
	add	esp, 8
; Line 422
	jmp	$LN23@DisplayCon
$LN8@DisplayCon:
; Line 425
	push	2
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	call	_ShowInput
	add	esp, 8
; Line 426
	jmp	$LN23@DisplayCon
$LN7@DisplayCon:
; Line 429
	push	3
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	call	_ShowInput
	add	esp, 8
; Line 430
	jmp	$LN23@DisplayCon
$LN6@DisplayCon:
; Line 433
	push	0
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	call	_ShowDigitalInput
	add	esp, 8
; Line 434
	jmp	SHORT $LN23@DisplayCon
$LN5@DisplayCon:
; Line 437
	push	1
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	call	_ShowDigitalInput
	add	esp, 8
; Line 438
	jmp	SHORT $LN23@DisplayCon
$LN4@DisplayCon:
; Line 441
	push	35					; 00000023H
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	call	_ShowTime
	add	esp, 8
; Line 442
	jmp	SHORT $LN23@DisplayCon
$LN3@DisplayCon:
; Line 445
	push	18					; 00000012H
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	call	_ShowTime
	add	esp, 8
; Line 446
	jmp	SHORT $LN23@DisplayCon
$LN2@DisplayCon:
; Line 449
	push	81					; 00000051H
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	call	_ShowTime
	add	esp, 8
; Line 450
	jmp	SHORT $LN23@DisplayCon
$LN1@DisplayCon:
; Line 457
	cmp	DWORD PTR _sysData+100, 0
	jne	SHORT $LN31@DisplayCon
	mov	DWORD PTR tv164[ebp], OFFSET $SG18219
	jmp	SHORT $LN32@DisplayCon
$LN31@DisplayCon:
	mov	DWORD PTR tv164[ebp], OFFSET $SG18220
$LN32@DisplayCon:
	push	OFFSET $SG18218
	mov	eax, DWORD PTR tv164[ebp]
	push	eax
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _config$[ebp]
	push	ecx
	call	_ShowOtherInput
	add	esp, 16					; 00000010H
$LN23@DisplayCon:
; Line 460
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN34@DisplayCon:
	DD	$LN17@DisplayCon
	DD	$LN16@DisplayCon
	DD	$LN15@DisplayCon
	DD	$LN1@DisplayCon
	DD	$LN3@DisplayCon
	DD	$LN12@DisplayCon
	DD	$LN13@DisplayCon
	DD	$LN4@DisplayCon
	DD	$LN19@DisplayCon
	DD	$LN11@DisplayCon
	DD	$LN10@DisplayCon
	DD	$LN9@DisplayCon
	DD	$LN8@DisplayCon
	DD	$LN7@DisplayCon
	DD	$LN6@DisplayCon
	DD	$LN5@DisplayCon
	DD	$LN18@DisplayCon
	DD	$LN14@DisplayCon
	DD	$LN2@DisplayCon
	DD	$LN20@DisplayCon
$LN33@DisplayCon:
	DB	0
	DB	1
	DB	2
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	3
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	4
	DB	5
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	6
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	7
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	8
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	16					; 00000010H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	17					; 00000011H
	DB	18					; 00000012H
_DisplayConfigurableItem ENDP
_TEXT	ENDS
END
