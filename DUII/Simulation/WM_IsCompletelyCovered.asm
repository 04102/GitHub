; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\WM\WM_IsCompletelyCovered.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_WM_IsCompletelyCovered
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\wm\wm_iscompletelycovered.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _WM_IsCompletelyCovered
_TEXT	SEGMENT
_r$ = -8						; size = 4
_hWin$ = 8						; size = 4
_WM_IsCompletelyCovered PROC				; COMDAT
; Line 358
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 359
	mov	DWORD PTR _r$[ebp], 0
; Line 360
	cmp	DWORD PTR _hWin$[ebp], 0
	je	SHORT $LN1@WM_IsCompl
; Line 362
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	__IsCompletelyCovered
	add	esp, 4
	movzx	ecx, al
	mov	DWORD PTR _r$[ebp], ecx
$LN1@WM_IsCompl:
; Line 365
	mov	al, BYTE PTR _r$[ebp]
; Line 366
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_IsCompletelyCovered ENDP
_TEXT	ENDS
EXTRN	_LCD_GetVYSizeEx:PROC
EXTRN	_LCD_GetVXSizeEx:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	@_RTC_CheckStackVars@8:PROC
_BSS	SEGMENT
__Context DB	01cH DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __IsCompletelyCovered
_TEXT	SEGMENT
_Rect$ = -12						; size = 8
_hWin$ = 8						; size = 4
__IsCompletelyCovered PROC				; COMDAT
; Line 335
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 336
	xor	eax, eax
	mov	WORD PTR _Rect$[ebp], ax
	xor	eax, eax
	mov	DWORD PTR _Rect$[ebp+2], eax
	mov	WORD PTR _Rect$[ebp+6], ax
; Line 337
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_LCD_GetVXSizeEx
	add	esp, 4
	mov	WORD PTR _Rect$[ebp+4], ax
; Line 338
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_LCD_GetVYSizeEx
	add	esp, 4
	mov	WORD PTR _Rect$[ebp+6], ax
; Line 339
	mov	eax, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR __Context, eax
; Line 340
	mov	DWORD PTR __Context+24, 0
; Line 341
	lea	eax, DWORD PTR _Rect$[ebp]
	push	eax
	call	__InitRectSearch
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@IsComplete
; Line 342
	xor	al, al
	jmp	SHORT $LN2@IsComplete
$LN1@IsComplete:
; Line 344
	mov	al, 1
$LN2@IsComplete:
; Line 345
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@IsComplete
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@IsComplete:
	DD	1
	DD	$LN5@IsComplete
$LN5@IsComplete:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN4@IsComplete
$LN4@IsComplete:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
__IsCompletelyCovered ENDP
_TEXT	ENDS
EXTRN	_WM__ClipAtParentBorders:PROC
EXTRN	_GUI__IntersectRect:PROC
EXTRN	_GUI_ALLOC_h2p:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __InitRectSearch
_TEXT	SEGMENT
_pAWin$ = -24						; size = 4
_r$ = -12						; size = 8
_pMaxRect$ = 8						; size = 4
__InitRectSearch PROC					; COMDAT
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 305
	mov	eax, DWORD PTR __Context+24
	add	eax, 1
	mov	DWORD PTR __Context+24, eax
	cmp	DWORD PTR __Context+24, 1
	jle	SHORT $LN5@InitRectSe
; Line 306
	mov	eax, 1
	jmp	$LN6@InitRectSe
$LN5@InitRectSe:
; Line 308
	mov	eax, DWORD PTR __Context
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pAWin$[ebp], eax
; Line 309
	mov	DWORD PTR __Context+20, -1
; Line 310
	mov	eax, DWORD PTR _pAWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 2
	je	SHORT $LN4@InitRectSe
; Line 311
	mov	eax, DWORD PTR _pAWin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _r$[ebp], ecx
	mov	DWORD PTR _r$[ebp+4], edx
; Line 312
	jmp	SHORT $LN3@InitRectSe
$LN4@InitRectSe:
; Line 313
	mov	eax, DWORD PTR __Context+24
	sub	eax, 1
	mov	DWORD PTR __Context+24, eax
; Line 314
	xor	eax, eax
	jmp	SHORT $LN6@InitRectSe
$LN3@InitRectSe:
; Line 317
	cmp	DWORD PTR _pMaxRect$[ebp], 0
	je	SHORT $LN2@InitRectSe
; Line 318
	mov	eax, DWORD PTR _pMaxRect$[ebp]
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	_GUI__IntersectRect
	add	esp, 8
$LN2@InitRectSe:
; Line 321
	mov	eax, DWORD PTR __Context
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	_WM__ClipAtParentBorders
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@InitRectSe
; Line 322
	mov	eax, DWORD PTR __Context+24
	sub	eax, 1
	mov	DWORD PTR __Context+24, eax
; Line 323
	xor	eax, eax
	jmp	SHORT $LN6@InitRectSe
$LN1@InitRectSe:
; Line 326
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR __Context+4, eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR __Context+8, ecx
; Line 327
	call	__GetNextRect
$LN6@InitRectSe:
; Line 328
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@InitRectSe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@InitRectSe:
	DD	1
	DD	$LN9@InitRectSe
$LN9@InitRectSe:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN8@InitRectSe
$LN8@InitRectSe:
	DB	114					; 00000072H
	DB	0
__InitRectSearch ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetNextRect
_TEXT	SEGMENT
__GetNextRect PROC					; COMDAT
; Line 283
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 284
	cmp	DWORD PTR __Context+24, 1
	jle	SHORT $LN2@GetNextRec
; Line 285
	mov	eax, DWORD PTR __Context+24
	sub	eax, 1
	mov	DWORD PTR __Context+24, eax
; Line 286
	xor	eax, eax
	jmp	SHORT $LN3@GetNextRec
$LN2@GetNextRec:
; Line 288
	mov	eax, DWORD PTR __Context+20
	add	eax, 1
	mov	DWORD PTR __Context+20, eax
; Line 290
	call	__FindNextRect
	test	eax, eax
	jne	SHORT $LN1@GetNextRec
; Line 291
	mov	eax, DWORD PTR __Context+24
	sub	eax, 1
	mov	DWORD PTR __Context+24, eax
; Line 292
	xor	eax, eax
	jmp	SHORT $LN3@GetNextRec
$LN1@GetNextRec:
; Line 294
	mov	eax, 1
$LN3@GetNextRec:
; Line 295
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetNextRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __FindNextRect
_TEXT	SEGMENT
_pParent$ = -48						; size = 4
_pAWin$ = -36						; size = 4
_r$ = -24						; size = 8
_hParent$ = -8						; size = 4
__FindNextRect PROC					; COMDAT
; Line 181
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 186
	mov	eax, DWORD PTR __Context+12
	mov	DWORD PTR _r$[ebp], eax
	mov	ecx, DWORD PTR __Context+16
	mov	DWORD PTR _r$[ebp+4], ecx
; Line 193
	cmp	DWORD PTR __Context+20, 0
	jne	SHORT $LN18@FindNextRe
; Line 194
	mov	ax, WORD PTR __Context+4
	mov	WORD PTR _r$[ebp], ax
; Line 195
	mov	ax, WORD PTR __Context+6
	mov	WORD PTR _r$[ebp+2], ax
; Line 196
	jmp	SHORT $LN17@FindNextRe
$LN18@FindNextRe:
; Line 197
	movsx	eax, WORD PTR __Context+16
	add	eax, 1
	mov	WORD PTR _r$[ebp], ax
; Line 198
	mov	ax, WORD PTR __Context+14
	mov	WORD PTR _r$[ebp+2], ax
; Line 199
	movsx	eax, WORD PTR _r$[ebp]
	movsx	ecx, WORD PTR __Context+8
	cmp	eax, ecx
	jle	SHORT $LN17@FindNextRe
$NextStripe$9537:
; Line 201
	mov	ax, WORD PTR __Context+4
	mov	WORD PTR _r$[ebp], ax
; Line 202
	movsx	eax, WORD PTR __Context+18
	add	eax, 1
	mov	WORD PTR _r$[ebp+2], ax
$LN17@FindNextRe:
; Line 209
	movsx	eax, WORD PTR _r$[ebp+2]
	movsx	ecx, WORD PTR __Context+10
	cmp	eax, ecx
	jle	SHORT $LN15@FindNextRe
; Line 210
	xor	eax, eax
	jmp	$LN19@FindNextRe
$LN15@FindNextRe:
; Line 217
	mov	eax, DWORD PTR __Context
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pAWin$[ebp], eax
; Line 218
	movsx	eax, WORD PTR _r$[ebp]
	movsx	ecx, WORD PTR __Context+4
	cmp	eax, ecx
	jne	SHORT $Find_x0$9547
; Line 219
	mov	ax, WORD PTR __Context+10
	mov	WORD PTR _r$[ebp+6], ax
; Line 220
	mov	ax, WORD PTR __Context+8
	mov	WORD PTR _r$[ebp+4], ax
; Line 223
	mov	eax, DWORD PTR __Context
	mov	DWORD PTR _hParent$[ebp], eax
	jmp	SHORT $LN13@FindNextRe
$LN12@FindNextRe:
	mov	eax, DWORD PTR _pParent$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _hParent$[ebp], ecx
$LN13@FindNextRe:
	cmp	DWORD PTR _hParent$[ebp], 0
	je	SHORT $LN11@FindNextRe
; Line 224
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pParent$[ebp], eax
; Line 225
	push	0
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pParent$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	__Findy1
	add	esp, 12					; 0000000cH
; Line 226
	jmp	SHORT $LN12@FindNextRe
$LN11@FindNextRe:
; Line 228
	push	0
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAWin$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	__Findy1
	add	esp, 12					; 0000000cH
$Find_x0$9547:
; Line 236
	mov	ax, WORD PTR _r$[ebp]
	mov	WORD PTR _r$[ebp+4], ax
; Line 239
	mov	eax, DWORD PTR __Context
	mov	DWORD PTR _hParent$[ebp], eax
	jmp	SHORT $LN10@FindNextRe
$LN9@FindNextRe:
; Line 240
	mov	eax, DWORD PTR _pParent$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _hParent$[ebp], ecx
$LN10@FindNextRe:
	cmp	DWORD PTR _hParent$[ebp], 0
	je	SHORT $LN8@FindNextRe
; Line 241
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pParent$[ebp], eax
; Line 242
	push	0
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pParent$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	__Findx0
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@FindNextRe
; Line 243
	jmp	SHORT $Find_x0$9547
$LN7@FindNextRe:
; Line 245
	jmp	SHORT $LN9@FindNextRe
$LN8@FindNextRe:
; Line 247
	push	0
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAWin$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	__Findx0
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN6@FindNextRe
; Line 248
	jmp	SHORT $Find_x0$9547
$LN6@FindNextRe:
; Line 255
	mov	ax, WORD PTR __Context+8
	mov	WORD PTR _r$[ebp+4], ax
; Line 256
	movsx	eax, WORD PTR _r$[ebp+4]
	movsx	ecx, WORD PTR _r$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN5@FindNextRe
; Line 257
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR __Context+12, eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR __Context+16, ecx
; Line 258
	jmp	$NextStripe$9537
$LN5@FindNextRe:
; Line 264
	mov	eax, DWORD PTR __Context
	mov	DWORD PTR _hParent$[ebp], eax
	jmp	SHORT $LN4@FindNextRe
$LN3@FindNextRe:
; Line 265
	mov	eax, DWORD PTR _pParent$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _hParent$[ebp], ecx
$LN4@FindNextRe:
	cmp	DWORD PTR _hParent$[ebp], 0
	je	SHORT $LN2@FindNextRe
; Line 266
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pParent$[ebp], eax
; Line 267
	push	0
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pParent$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	__Findx1
	add	esp, 12					; 0000000cH
; Line 268
	jmp	SHORT $LN3@FindNextRe
$LN2@FindNextRe:
; Line 270
	push	0
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAWin$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	__Findx1
	add	esp, 12					; 0000000cH
; Line 272
	cmp	DWORD PTR __Context+20, 200		; 000000c8H
	jle	SHORT $LN1@FindNextRe
; Line 273
	xor	eax, eax
	jmp	SHORT $LN19@FindNextRe
$LN1@FindNextRe:
; Line 275
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR __Context+12, eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR __Context+16, ecx
; Line 276
	mov	eax, 1
$LN19@FindNextRe:
; Line 277
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@FindNextRe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN24@FindNextRe:
	DD	1
	DD	$LN23@FindNextRe
$LN23@FindNextRe:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN22@FindNextRe
$LN22@FindNextRe:
	DB	114					; 00000072H
	DB	0
__FindNextRect ENDP
_TEXT	ENDS
EXTRN	_GUI_RectsIntersect:PROC
EXTRN	_GUI__IntersectRects:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Findy1
_TEXT	SEGMENT
_pChild$9466 = -60					; size = 4
_hChild$9465 = -48					; size = 4
_rWinClipped$9455 = -36					; size = 8
_Status$9452 = -20					; size = 4
_pWin$ = -8						; size = 4
_iWin$ = 8						; size = 4
_pRect$ = 12						; size = 4
_pParentRect$ = 16					; size = 4
__Findy1 PROC						; COMDAT
; Line 69
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 71
	jmp	SHORT $LN16@Findy1
$LN15@Findy1:
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _iWin$[ebp], ecx
$LN16@Findy1:
	cmp	DWORD PTR _iWin$[ebp], 0
	je	$LN17@Findy1
; Line 73
	mov	eax, DWORD PTR _iWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _Status$9452[ebp], edx
; Line 75
	mov	eax, DWORD PTR _Status$9452[ebp]
	and	eax, 2
	je	$LN13@Findy1
; Line 77
	cmp	DWORD PTR _pParentRect$[ebp], 0
	je	SHORT $LN12@Findy1
; Line 78
	mov	eax, DWORD PTR _pParentRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	push	ecx
	lea	edx, DWORD PTR _rWinClipped$9455[ebp]
	push	edx
	call	_GUI__IntersectRects
	add	esp, 12					; 0000000cH
; Line 79
	jmp	SHORT $LN11@Findy1
$LN12@Findy1:
; Line 80
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rWinClipped$9455[ebp], ecx
	mov	DWORD PTR _rWinClipped$9455[ebp+4], edx
$LN11@Findy1:
; Line 83
	lea	eax, DWORD PTR _rWinClipped$9455[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	call	_GUI_RectsIntersect
	add	esp, 8
	test	eax, eax
	je	$LN13@Findy1
; Line 84
	mov	eax, DWORD PTR _Status$9452[ebp]
	and	eax, 1
	jne	SHORT $LN9@Findy1
; Line 85
	mov	eax, DWORD PTR _pWin$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _pRect$[ebp]
	movsx	eax, WORD PTR [edx+2]
	cmp	ecx, eax
	jle	SHORT $LN8@Findy1
; Line 86
	movsx	eax, WORD PTR _rWinClipped$9455[ebp+2]
	sub	eax, 1
	mov	ecx, DWORD PTR _pRect$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	cmp	eax, edx
	jge	SHORT $LN7@Findy1
	movsx	eax, WORD PTR _rWinClipped$9455[ebp+2]
	sub	eax, 1
	mov	ecx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [ecx+6], ax
$LN7@Findy1:
; Line 87
	jmp	SHORT $LN6@Findy1
$LN8@Findy1:
; Line 88
	movsx	eax, WORD PTR _rWinClipped$9455[ebp+6]
	mov	ecx, DWORD PTR _pRect$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	cmp	eax, edx
	jge	SHORT $LN6@Findy1
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	cx, WORD PTR _rWinClipped$9455[ebp+6]
	mov	WORD PTR [eax+6], cx
$LN6@Findy1:
; Line 90
	jmp	SHORT $LN13@Findy1
$LN9@Findy1:
; Line 94
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _hChild$9465[ebp], ecx
	jmp	SHORT $LN3@Findy1
$LN2@Findy1:
	mov	eax, DWORD PTR _pChild$9466[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hChild$9465[ebp], ecx
$LN3@Findy1:
	cmp	DWORD PTR _hChild$9465[ebp], 0
	je	SHORT $LN13@Findy1
; Line 95
	mov	eax, DWORD PTR _hChild$9465[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pChild$9466[ebp], eax
; Line 96
	lea	eax, DWORD PTR _rWinClipped$9455[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hChild$9465[ebp]
	push	edx
	call	__Findy1
	add	esp, 12					; 0000000cH
; Line 97
	jmp	SHORT $LN2@Findy1
$LN13@Findy1:
; Line 101
	jmp	$LN15@Findy1
$LN17@Findy1:
; Line 102
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@Findy1
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN21@Findy1:
	DD	1
	DD	$LN20@Findy1
$LN20@Findy1:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN19@Findy1
$LN19@Findy1:
	DB	114					; 00000072H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
__Findy1 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Findx0
_TEXT	SEGMENT
_pChild$9494 = -72					; size = 4
_hChild$9493 = -60					; size = 4
_rWinClipped$9487 = -48					; size = 8
_Status$9484 = -32					; size = 4
_r$ = -20						; size = 4
_pWin$ = -8						; size = 4
_hWin$ = 8						; size = 4
_pRect$ = 12						; size = 4
_pParentRect$ = 16					; size = 4
__Findx0 PROC						; COMDAT
; Line 108
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 110
	mov	DWORD PTR _r$[ebp], 0
	jmp	SHORT $LN13@Findx0
$LN12@Findx0:
; Line 111
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hWin$[ebp], ecx
$LN13@Findx0:
	cmp	DWORD PTR _hWin$[ebp], 0
	je	$LN11@Findx0
; Line 113
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _Status$9484[ebp], edx
; Line 114
	mov	eax, DWORD PTR _Status$9484[ebp]
	and	eax, 2
	je	$LN10@Findx0
; Line 116
	cmp	DWORD PTR _pParentRect$[ebp], 0
	je	SHORT $LN9@Findx0
; Line 117
	mov	eax, DWORD PTR _pParentRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	push	ecx
	lea	edx, DWORD PTR _rWinClipped$9487[ebp]
	push	edx
	call	_GUI__IntersectRects
	add	esp, 12					; 0000000cH
; Line 118
	jmp	SHORT $LN8@Findx0
$LN9@Findx0:
; Line 119
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rWinClipped$9487[ebp], ecx
	mov	DWORD PTR _rWinClipped$9487[ebp+4], edx
$LN8@Findx0:
; Line 122
	lea	eax, DWORD PTR _rWinClipped$9487[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	call	_GUI_RectsIntersect
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@Findx0
; Line 123
	mov	eax, DWORD PTR _Status$9484[ebp]
	and	eax, 1
	jne	SHORT $LN6@Findx0
; Line 124
	movsx	eax, WORD PTR _rWinClipped$9487[ebp+4]
	add	eax, 1
	mov	ecx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [ecx], ax
; Line 125
	mov	DWORD PTR _r$[ebp], 1
; Line 126
	jmp	SHORT $LN10@Findx0
$LN6@Findx0:
; Line 130
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _hChild$9493[ebp], ecx
	jmp	SHORT $LN4@Findx0
$LN3@Findx0:
	mov	eax, DWORD PTR _pChild$9494[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hChild$9493[ebp], ecx
$LN4@Findx0:
	cmp	DWORD PTR _hChild$9493[ebp], 0
	je	SHORT $LN10@Findx0
; Line 131
	mov	eax, DWORD PTR _hChild$9493[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pChild$9494[ebp], eax
; Line 132
	lea	eax, DWORD PTR _rWinClipped$9487[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hChild$9493[ebp]
	push	edx
	call	__Findx0
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@Findx0
; Line 133
	mov	DWORD PTR _r$[ebp], 1
$LN1@Findx0:
; Line 135
	jmp	SHORT $LN3@Findx0
$LN10@Findx0:
; Line 139
	jmp	$LN12@Findx0
$LN11@Findx0:
; Line 140
	mov	eax, DWORD PTR _r$[ebp]
; Line 141
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@Findx0
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@Findx0:
	DD	1
	DD	$LN17@Findx0
$LN17@Findx0:
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN16@Findx0
$LN16@Findx0:
	DB	114					; 00000072H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
__Findx0 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Findx1
_TEXT	SEGMENT
_pChild$9522 = -60					; size = 4
_hChild$9521 = -48					; size = 4
_rWinClipped$9515 = -36					; size = 8
_Status$9512 = -20					; size = 4
_pWin$ = -8						; size = 4
_hWin$ = 8						; size = 4
_pRect$ = 12						; size = 4
_pParentRect$ = 16					; size = 4
__Findx1 PROC						; COMDAT
; Line 147
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 149
	jmp	SHORT $LN12@Findx1
$LN11@Findx1:
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hWin$[ebp], ecx
$LN12@Findx1:
	cmp	DWORD PTR _hWin$[ebp], 0
	je	$LN13@Findx1
; Line 151
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _Status$9512[ebp], edx
; Line 152
	mov	eax, DWORD PTR _Status$9512[ebp]
	and	eax, 2
	je	$LN9@Findx1
; Line 154
	cmp	DWORD PTR _pParentRect$[ebp], 0
	je	SHORT $LN8@Findx1
; Line 155
	mov	eax, DWORD PTR _pParentRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	push	ecx
	lea	edx, DWORD PTR _rWinClipped$9515[ebp]
	push	edx
	call	_GUI__IntersectRects
	add	esp, 12					; 0000000cH
; Line 156
	jmp	SHORT $LN7@Findx1
$LN8@Findx1:
; Line 157
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rWinClipped$9515[ebp], ecx
	mov	DWORD PTR _rWinClipped$9515[ebp+4], edx
$LN7@Findx1:
; Line 160
	lea	eax, DWORD PTR _rWinClipped$9515[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	call	_GUI_RectsIntersect
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@Findx1
; Line 161
	mov	eax, DWORD PTR _Status$9512[ebp]
	and	eax, 1
	jne	SHORT $LN5@Findx1
; Line 162
	movsx	eax, WORD PTR _rWinClipped$9515[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [ecx+4], ax
; Line 163
	jmp	SHORT $LN9@Findx1
$LN5@Findx1:
; Line 167
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _hChild$9521[ebp], ecx
	jmp	SHORT $LN3@Findx1
$LN2@Findx1:
	mov	eax, DWORD PTR _pChild$9522[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hChild$9521[ebp], ecx
$LN3@Findx1:
	cmp	DWORD PTR _hChild$9521[ebp], 0
	je	SHORT $LN9@Findx1
; Line 168
	mov	eax, DWORD PTR _hChild$9521[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pChild$9522[ebp], eax
; Line 169
	lea	eax, DWORD PTR _rWinClipped$9515[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hChild$9521[ebp]
	push	edx
	call	__Findx1
	add	esp, 12					; 0000000cH
; Line 170
	jmp	SHORT $LN2@Findx1
$LN9@Findx1:
; Line 174
	jmp	$LN11@Findx1
$LN13@Findx1:
; Line 175
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@Findx1
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN17@Findx1:
	DD	1
	DD	$LN16@Findx1
$LN16@Findx1:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN15@Findx1
$LN15@Findx1:
	DB	114					; 00000072H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
__Findx1 ENDP
_TEXT	ENDS
END
