; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\DUII\AnalogInputSettings.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_RenameUnitsPaint
PUBLIC	_DisplayRenameUnits
PUBLIC	_RenameInputPaint
PUBLIC	_DisplayRenameInput
PUBLIC	_AlarmPaint
PUBLIC	_DisplayAlarm
PUBLIC	_ScalePaint
PUBLIC	_DisplayScale
PUBLIC	_AnalogInputSettingsScreenList
EXTRN	_BUTTON_CreateIndirect:PROC
EXTRN	_TEXT_CreateIndirect:PROC
EXTRN	_FRAMEWIN_CreateIndirect:PROC
_DATA	SEGMENT
COMM	_hValueLowButton:DWORD
COMM	_hValueHighButton:DWORD
COMM	_hVoltsLowButton:DWORD
COMM	_gathering:DWORD
COMM	_hLED1Button:DWORD
COMM	_hLED2Button:DWORD
COMM	_hUpperAlarmConditionButton:DWORD
COMM	_hAlarmConditionButton:DWORD
COMM	_hAlarmValueButton:DWORD
COMM	_hUpperAlarmValueButton:DWORD
COMM	_hVoltsRangeButton:DWORD
COMM	_alarmValueString:BYTE:0bH
COMM	_hVoltsHighButton:DWORD
COMM	_hFilteringLevelButton:DWORD
_DATA	ENDS
_BSS	SEGMENT
_pRenameInput DD 01H DUP (?)
_pRenameUnits DD 01H DUP (?)
_pAlarmValue DD	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
_InvalidRangeResources DD FLAT:_FRAMEWIN_CreateIndirect
	DD	FLAT:$SG19823
	DW	00H
	DW	028H
	DW	014H
	DW	017cH
	DW	0dcH
	DW	00H
	DD	00H
	DD	FLAT:_TEXT_CreateIndirect
	DD	FLAT:$SG19824
	DW	00H
	DW	00H
	DW	0aH
	DW	0168H
	DW	01eH
	DW	02H
	ORG $+4
	DD	FLAT:_TEXT_CreateIndirect
	DD	FLAT:$SG19825
	DW	00H
	DW	00H
	DW	028H
	DW	0168H
	DW	01eH
	DW	02H
	ORG $+4
	DD	FLAT:_TEXT_CreateIndirect
	DD	FLAT:$SG19826
	DW	00H
	DW	00H
	DW	046H
	DW	0168H
	DW	01eH
	DW	02H
	ORG $+4
	DD	FLAT:_BUTTON_CreateIndirect
	DD	FLAT:$SG19827
	DW	01H
	DW	023H
	DW	073H
	DW	078H
	DW	03cH
	ORG $+6
	DD	FLAT:_BUTTON_CreateIndirect
	DD	FLAT:$SG19828
	DW	02H
	DW	0c3H
	DW	073H
	DW	078H
	DW	03cH
	ORG $+6
_InvalidOrderResources DD FLAT:_FRAMEWIN_CreateIndirect
	DD	FLAT:$SG19830
	DW	00H
	DW	028H
	DW	014H
	DW	017cH
	DW	0dcH
	DW	00H
	DD	00H
	DD	FLAT:_TEXT_CreateIndirect
	DD	FLAT:$SG19831
	DW	00H
	DW	00H
	DW	0aH
	DW	0168H
	DW	01eH
	DW	02H
	ORG $+4
	DD	FLAT:_TEXT_CreateIndirect
	DD	FLAT:$SG19832
	DW	00H
	DW	00H
	DW	028H
	DW	0168H
	DW	01eH
	DW	02H
	ORG $+4
	DD	FLAT:_TEXT_CreateIndirect
	DD	FLAT:$SG19833
	DW	00H
	DW	00H
	DW	046H
	DW	0168H
	DW	01eH
	DW	02H
	ORG $+4
	DD	FLAT:_BUTTON_CreateIndirect
	DD	FLAT:$SG19834
	DW	01H
	DW	023H
	DW	073H
	DW	078H
	DW	03cH
	ORG $+6
	DD	FLAT:_BUTTON_CreateIndirect
	DD	FLAT:$SG19835
	DW	02H
	DW	0c3H
	DW	073H
	DW	078H
	DW	03cH
	ORG $+6
_InvalidAlarmOrderResources DD FLAT:_FRAMEWIN_CreateIndirect
	DD	FLAT:$SG19837
	DW	00H
	DW	028H
	DW	014H
	DW	017cH
	DW	0dcH
	DW	00H
	DD	00H
	DD	FLAT:_TEXT_CreateIndirect
	DD	FLAT:$SG19838
	DW	00H
	DW	00H
	DW	0aH
	DW	0168H
	DW	01eH
	DW	02H
	ORG $+4
	DD	FLAT:_TEXT_CreateIndirect
	DD	FLAT:$SG19839
	DW	00H
	DW	00H
	DW	028H
	DW	0168H
	DW	01eH
	DW	02H
	ORG $+4
	DD	FLAT:_TEXT_CreateIndirect
	DD	FLAT:$SG19840
	DW	00H
	DW	00H
	DW	046H
	DW	0168H
	DW	01eH
	DW	02H
	ORG $+4
	DD	FLAT:_BUTTON_CreateIndirect
	DD	FLAT:$SG19841
	DW	01H
	DW	023H
	DW	073H
	DW	078H
	DW	03cH
	ORG $+6
	DD	FLAT:_BUTTON_CreateIndirect
	DD	FLAT:$SG19842
	DW	02H
	DW	0c3H
	DW	073H
	DW	078H
	DW	03cH
	ORG $+6
CONST	ENDS
_DATA	SEGMENT
_AnalogInputSettingsScreenList DD 00H
	DD	FLAT:_DisplayScale
	DD	FLAT:_ScalePaint
	DD	01H
	DD	FLAT:_DisplayAlarm
	DD	FLAT:_AlarmPaint
	DD	02H
	DD	FLAT:_DisplayRenameInput
	DD	FLAT:_RenameInputPaint
	DD	03H
	DD	FLAT:_DisplayRenameUnits
	DD	FLAT:_RenameUnitsPaint
	DD	0ffffffffH
	DD	00H
	DD	00H
$SG19667 DB	'%.2f', 00H
	ORG $+3
$SG19668 DB	'Enter Lower Alarm Value', 00H
$SG19670 DB	'%.2f', 00H
	ORG $+3
$SG19671 DB	'Enter Upper Alarm Value', 00H
$SG19708 DB	'Volts', 00H
	ORG $+2
$SG19709 DB	'Value', 00H
	ORG $+2
$SG19710 DB	'LOW', 00H
$SG19711 DB	'HIGH', 00H
	ORG $+3
$SG19712 DB	'%f', 00H
	ORG $+1
$SG19713 DB	'%f', 00H
	ORG $+1
$SG19714 DB	'%f', 00H
	ORG $+1
$SG19715 DB	'%f', 00H
	ORG $+1
$SG19716 DB	'Voltage', 00H
$SG19717 DB	'Range', 00H
	ORG $+2
$SG19718 DB	'Filtering', 00H
	ORG $+2
$SG19719 DB	'Level', 00H
	ORG $+2
$SG19721 DB	'%d', 00H
	ORG $+1
$SG19730 DB	'NONE', 00H
	ORG $+3
$SG19732 DB	'LOW', 00H
$SG19734 DB	'MEDIUM', 00H
	ORG $+1
$SG19736 DB	'HIGH', 00H
	ORG $+3
$SG19738 DB	'VERY', 0aH, 'HIGH', 00H
	ORG $+2
$SG19755 DB	'Alarm Indicator', 00H
$SG19756 DB	'Alarm Level', 00H
$SG19757 DB	'Lower', 00H
	ORG $+2
$SG19758 DB	'Upper', 00H
	ORG $+2
$SG19760 DB	'LED 1 Enabled', 00H
	ORG $+2
$SG19762 DB	'LED 1 Disabled', 00H
	ORG $+1
$SG19764 DB	'LED 2 Enabled', 00H
	ORG $+2
$SG19766 DB	'LED 2 Disabled', 00H
	ORG $+1
$SG19767 DB	'%.2f', 00H
	ORG $+3
$SG19768 DB	'%.2f', 00H
	ORG $+3
$SG19773 DB	'Rename Input %d', 00H
$SG19781 DB	'Rename Units %d', 00H
$SG19823 DB	'Settings Error', 00H
	ORG $+1
$SG19824 DB	'The specified voltage values are', 00H
	ORG $+3
$SG19825 DB	'outside the selected range.', 00H
$SG19826 DB	'Would you like to auto-fix or go back?', 00H
	ORG $+1
$SG19827 DB	'Auto-fix', 00H
	ORG $+3
$SG19828 DB	'Go Back', 00H
$SG19830 DB	'Settings Error', 00H
	ORG $+1
$SG19831 DB	'The selected high and low voltage', 00H
	ORG $+2
$SG19832 DB	'values are in the wrong order.', 00H
	ORG $+1
$SG19833 DB	'Would you like to auto-fix or go back?', 00H
	ORG $+1
$SG19834 DB	'Auto-fix', 00H
	ORG $+3
$SG19835 DB	'Go Back', 00H
$SG19837 DB	'Settings Error', 00H
	ORG $+1
$SG19838 DB	'The selected high and low alarm', 00H
$SG19839 DB	'values are in the wrong order.', 00H
	ORG $+1
$SG19840 DB	'Would you like to auto-fix or go back?', 00H
	ORG $+1
$SG19841 DB	'Auto-fix', 00H
	ORG $+3
$SG19842 DB	'Go Back', 00H
_DATA	ENDS
PUBLIC	_GetAnalogInputSettingsWindowHandle
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
_hAnalogInputSettings DD 01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\duii\duii\analoginputsettings.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GetAnalogInputSettingsWindowHandle
_TEXT	SEGMENT
_GetAnalogInputSettingsWindowHandle PROC		; COMDAT
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 159
	mov	eax, DWORD PTR _hAnalogInputSettings
; Line 160
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GetAnalogInputSettingsWindowHandle ENDP
_TEXT	ENDS
PUBLIC	_SetAnalogInputSettingsWindowHandle
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SetAnalogInputSettingsWindowHandle
_TEXT	SEGMENT
_hWin$ = 8						; size = 4
_SetAnalogInputSettingsWindowHandle PROC		; COMDAT
; Line 163
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 164
	mov	eax, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR _hAnalogInputSettings, eax
; Line 165
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SetAnalogInputSettingsWindowHandle ENDP
_TEXT	ENDS
PUBLIC	_AISKillKeyboard
EXTRN	_WM_InvalidateWindow:PROC
EXTRN	_SetScreenType:PROC
EXTRN	_screen_scrolling:DWORD
EXTRN	_InputCleanUpKeyboards:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _AISKillKeyboard
_TEXT	SEGMENT
_AISKillKeyboard PROC					; COMDAT
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 169
	call	_InputCleanUpKeyboards
; Line 175
	mov	DWORD PTR _screen_scrolling, 1
; Line 176
	push	15					; 0000000fH
	call	_SetScreenType
	add	esp, 4
; Line 177
	mov	eax, DWORD PTR _hAnalogInputSettings
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 178
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AISKillKeyboard ENDP
_TEXT	ENDS
PUBLIC	_SetFilteringText
PUBLIC	_AnalogInputSettingsIgnoreNextKeyRelease
PUBLIC	_AnalogInputSettingsCallback
EXTRN	_WM_DefaultProc:PROC
EXTRN	_notifyConfigChange:PROC
EXTRN	_CreateKeyboard:PROC
EXTRN	_sprintf:PROC
EXTRN	_WM_GetParent:PROC
EXTRN	_WM_GetId:PROC
EXTRN	_DrawInfo:PROC
EXTRN	_GetScreenType:PROC
EXTRN	_WM_InvalidateRect:PROC
EXTRN	_InfoTimeRect:QWORD
EXTRN	_WM_RestartTimer:PROC
EXTRN	_hScreenTimer:DWORD
EXTRN	_vehicleData:BYTE
EXTRN	_globalInput:BYTE
EXTRN	_atof:PROC
EXTRN	_DisplayNewScreenList:PROC
EXTRN	_GetLastScreen:PROC
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _AnalogInputSettingsCallback
_TEXT	SEGMENT
tv306 = -220						; size = 4
tv209 = -220						; size = 4
tv188 = -220						; size = 4
tv146 = -220						; size = 4
tv145 = -220						; size = 4
tv64 = -220						; size = 4
_Id$ = -20						; size = 4
_NCode$ = -8						; size = 4
_pMsg$ = 8						; size = 4
_AnalogInputSettingsCallback PROC			; COMDAT
; Line 182
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 185
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 28			; 0000001cH
	jg	SHORT $LN60@AnalogInpu
	cmp	DWORD PTR tv64[ebp], 28			; 0000001cH
	je	SHORT $LN52@AnalogInpu
	cmp	DWORD PTR tv64[ebp], 1
	je	$LN45@AnalogInpu
	cmp	DWORD PTR tv64[ebp], 15			; 0000000fH
	je	$LN44@AnalogInpu
	cmp	DWORD PTR tv64[ebp], 27			; 0000001bH
	je	SHORT $LN55@AnalogInpu
	jmp	$LN1@AnalogInpu
$LN60@AnalogInpu:
	cmp	DWORD PTR tv64[ebp], 38			; 00000026H
	je	$LN42@AnalogInpu
	cmp	DWORD PTR tv64[ebp], 275		; 00000113H
	je	$LN47@AnalogInpu
	jmp	$LN1@AnalogInpu
$LN55@AnalogInpu:
; Line 188
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _pAlarmValue
	jne	SHORT $LN54@AnalogInpu
; Line 190
	call	_AISKillKeyboard
	jmp	SHORT $LN53@AnalogInpu
$LN54@AnalogInpu:
; Line 192
	mov	eax, DWORD PTR _hAnalogInputSettings
	push	eax
	push	10					; 0000000aH
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	10					; 0000000aH
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
$LN53@AnalogInpu:
; Line 193
	jmp	$LN56@AnalogInpu
$LN52@AnalogInpu:
; Line 196
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _pAlarmValue
	jne	SHORT $LN51@AnalogInpu
; Line 198
	cmp	DWORD PTR _gathering, 1
	jne	SHORT $LN50@AnalogInpu
; Line 199
	push	OFFSET _alarmValueString
	call	_atof
	add	esp, 4
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fstp	DWORD PTR _vehicleData[eax+156]
	jmp	SHORT $LN49@AnalogInpu
$LN50@AnalogInpu:
; Line 200
	push	OFFSET _alarmValueString
	call	_atof
	add	esp, 4
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fstp	DWORD PTR _vehicleData[eax+152]
$LN49@AnalogInpu:
; Line 201
	call	_AISKillKeyboard
	jmp	SHORT $LN48@AnalogInpu
$LN51@AnalogInpu:
; Line 203
	mov	eax, DWORD PTR _hAnalogInputSettings
	push	eax
	push	10					; 0000000aH
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	10					; 0000000aH
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
$LN48@AnalogInpu:
; Line 204
	jmp	$LN56@AnalogInpu
$LN47@AnalogInpu:
; Line 207
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _hScreenTimer
	jne	SHORT $LN46@AnalogInpu
; Line 209
	push	125					; 0000007dH
	mov	eax, DWORD PTR _hScreenTimer
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
; Line 212
	push	OFFSET _InfoTimeRect
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_WM_InvalidateRect
	add	esp, 8
$LN46@AnalogInpu:
; Line 214
	jmp	$LN56@AnalogInpu
$LN45@AnalogInpu:
; Line 217
	call	_AnalogInputSettingsIgnoreNextKeyRelease
; Line 218
	jmp	$LN56@AnalogInpu
$LN44@AnalogInpu:
; Line 221
	call	_GetScreenType
	cmp	eax, 15					; 0000000fH
	jne	SHORT $LN43@AnalogInpu
; Line 224
	mov	esi, esp
	mov	eax, DWORD PTR _hAnalogInputSettings
	push	eax
	push	15					; 0000000fH
	call	_GetLastScreen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _AnalogInputSettingsScreenList[eax+8]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 228
	call	_DrawInfo
$LN43@AnalogInpu:
; Line 230
	jmp	$LN56@AnalogInpu
$LN42@AnalogInpu:
; Line 233
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_WM_GetId
	add	esp, 4
	mov	DWORD PTR _Id$[ebp], eax
; Line 234
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _NCode$[ebp], ecx
; Line 235
	mov	eax, DWORD PTR _NCode$[ebp]
	mov	DWORD PTR tv145[ebp], eax
	cmp	DWORD PTR tv145[ebp], 2
	je	SHORT $LN39@AnalogInpu
	jmp	$LN40@AnalogInpu
$LN39@AnalogInpu:
; Line 238
	mov	eax, DWORD PTR _Id$[ebp]
	mov	DWORD PTR tv146[ebp], eax
	mov	ecx, DWORD PTR tv146[ebp]
	sub	ecx, 2049				; 00000801H
	mov	DWORD PTR tv146[ebp], ecx
	cmp	DWORD PTR tv146[ebp], 14		; 0000000eH
	ja	$LN37@AnalogInpu
	mov	edx, DWORD PTR tv146[ebp]
	jmp	DWORD PTR $LN62@AnalogInpu[edx*4]
$LN36@AnalogInpu:
; Line 241
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+180]
	test	ecx, ecx
	je	SHORT $LN35@AnalogInpu
; Line 242
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+180], 0
	jmp	SHORT $LN34@AnalogInpu
$LN35@AnalogInpu:
; Line 243
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+180], 1
$LN34@AnalogInpu:
; Line 244
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_WM_GetParent
	add	esp, 4
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 245
	jmp	$LN37@AnalogInpu
$LN33@AnalogInpu:
; Line 248
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+181]
	test	ecx, ecx
	je	SHORT $LN32@AnalogInpu
; Line 249
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+181], 0
	jmp	SHORT $LN31@AnalogInpu
$LN32@AnalogInpu:
; Line 250
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+181], 1
$LN31@AnalogInpu:
; Line 251
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_WM_GetParent
	add	esp, 4
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 252
	jmp	$LN37@AnalogInpu
$LN30@AnalogInpu:
; Line 255
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	cl, BYTE PTR _vehicleData[eax+148]
	mov	BYTE PTR tv188[ebp], cl
	cmp	BYTE PTR tv188[ebp], 2
	je	SHORT $LN27@AnalogInpu
	jmp	SHORT $LN26@AnalogInpu
$LN27@AnalogInpu:
; Line 261
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+148], 0
; Line 262
	jmp	SHORT $LN28@AnalogInpu
$LN26@AnalogInpu:
; Line 264
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+148], 2
$LN28@AnalogInpu:
; Line 267
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_WM_GetParent
	add	esp, 4
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 268
	jmp	$LN37@AnalogInpu
$LN25@AnalogInpu:
; Line 271
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	cl, BYTE PTR _vehicleData[eax+149]
	mov	BYTE PTR tv209[ebp], cl
	cmp	BYTE PTR tv209[ebp], 1
	je	SHORT $LN22@AnalogInpu
	jmp	SHORT $LN21@AnalogInpu
$LN22@AnalogInpu:
; Line 277
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+149], 0
; Line 278
	jmp	SHORT $LN23@AnalogInpu
$LN21@AnalogInpu:
; Line 280
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+149], 1
$LN23@AnalogInpu:
; Line 283
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_WM_GetParent
	add	esp, 4
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 284
	jmp	$LN37@AnalogInpu
$LN20@AnalogInpu:
; Line 288
	mov	DWORD PTR _gathering, 0
; Line 289
	call	_InputCleanUpKeyboards
; Line 290
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+152]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG19667
	push	OFFSET _alarmValueString
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 291
	push	0
	mov	eax, DWORD PTR _hAnalogInputSettings
	push	eax
	push	0
	push	9
	push	1
	push	2
	push	OFFSET _alarmValueString
	push	OFFSET $SG19668
	call	_CreateKeyboard
	add	esp, 32					; 00000020H
	mov	DWORD PTR _pAlarmValue, eax
; Line 292
	mov	DWORD PTR _screen_scrolling, 0
; Line 293
	push	17					; 00000011H
	call	_SetScreenType
	add	esp, 4
; Line 295
	jmp	$LN37@AnalogInpu
$LN19@AnalogInpu:
; Line 299
	mov	DWORD PTR _gathering, 1
; Line 300
	call	_InputCleanUpKeyboards
; Line 301
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+156]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG19670
	push	OFFSET _alarmValueString
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 302
	push	0
	mov	eax, DWORD PTR _hAnalogInputSettings
	push	eax
	push	0
	push	9
	push	1
	push	2
	push	OFFSET _alarmValueString
	push	OFFSET $SG19671
	call	_CreateKeyboard
	add	esp, 32					; 00000020H
	mov	DWORD PTR _pAlarmValue, eax
; Line 303
	mov	DWORD PTR _screen_scrolling, 0
; Line 304
	push	17					; 00000011H
	call	_SetScreenType
	add	esp, 4
; Line 306
	jmp	$LN37@AnalogInpu
$LN18@AnalogInpu:
; Line 309
	mov	eax, DWORD PTR _hAnalogInputSettings
	push	eax
	push	0
	push	18					; 00000012H
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 310
	jmp	$LN37@AnalogInpu
$LN17@AnalogInpu:
; Line 313
	mov	eax, DWORD PTR _hAnalogInputSettings
	push	eax
	push	1
	push	18					; 00000012H
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 314
	jmp	$LN37@AnalogInpu
$LN16@AnalogInpu:
; Line 317
	mov	eax, DWORD PTR _hAnalogInputSettings
	push	eax
	push	2
	push	18					; 00000012H
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 318
	jmp	$LN37@AnalogInpu
$LN15@AnalogInpu:
; Line 321
	mov	eax, DWORD PTR _hAnalogInputSettings
	push	eax
	push	3
	push	18					; 00000012H
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 322
	jmp	$LN37@AnalogInpu
$LN14@AnalogInpu:
; Line 325
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+160]
	cmp	ecx, 5
	jne	SHORT $LN13@AnalogInpu
; Line 326
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+160], 10	; 0000000aH
	jmp	SHORT $LN10@AnalogInpu
$LN13@AnalogInpu:
; Line 327
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+160]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN11@AnalogInpu
; Line 328
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+160], 20	; 00000014H
	jmp	SHORT $LN10@AnalogInpu
$LN11@AnalogInpu:
; Line 329
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+160], 5
$LN10@AnalogInpu:
; Line 330
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_WM_GetParent
	add	esp, 4
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 331
	call	_notifyConfigChange
; Line 332
	jmp	$LN37@AnalogInpu
$LN9@AnalogInpu:
; Line 335
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+147]
	mov	DWORD PTR tv306[ebp], ecx
	mov	edx, DWORD PTR tv306[ebp]
	sub	edx, 5
	mov	DWORD PTR tv306[ebp], edx
	cmp	DWORD PTR tv306[ebp], 46		; 0000002eH
	ja	SHORT $LN6@AnalogInpu
	mov	eax, DWORD PTR tv306[ebp]
	movzx	ecx, BYTE PTR $LN61@AnalogInpu[eax]
	jmp	DWORD PTR $LN63@AnalogInpu[ecx*4]
$LN6@AnalogInpu:
; Line 338
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+147], 5
	jmp	SHORT $LN7@AnalogInpu
$LN5@AnalogInpu:
; Line 339
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+147], 11	; 0000000bH
	jmp	SHORT $LN7@AnalogInpu
$LN4@AnalogInpu:
; Line 340
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+147], 21	; 00000015H
	jmp	SHORT $LN7@AnalogInpu
$LN3@AnalogInpu:
; Line 341
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+147], 51	; 00000033H
	jmp	SHORT $LN7@AnalogInpu
$LN2@AnalogInpu:
; Line 342
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+147], 1
$LN7@AnalogInpu:
; Line 344
	call	_SetFilteringText
$LN37@AnalogInpu:
$LN40@AnalogInpu:
; Line 349
	jmp	SHORT $LN56@AnalogInpu
$LN1@AnalogInpu:
; Line 352
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN56@AnalogInpu:
; Line 354
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN62@AnalogInpu:
	DD	$LN36@AnalogInpu
	DD	$LN33@AnalogInpu
	DD	$LN30@AnalogInpu
	DD	$LN20@AnalogInpu
	DD	$LN37@AnalogInpu
	DD	$LN37@AnalogInpu
	DD	$LN37@AnalogInpu
	DD	$LN18@AnalogInpu
	DD	$LN17@AnalogInpu
	DD	$LN16@AnalogInpu
	DD	$LN15@AnalogInpu
	DD	$LN14@AnalogInpu
	DD	$LN25@AnalogInpu
	DD	$LN19@AnalogInpu
	DD	$LN9@AnalogInpu
$LN63@AnalogInpu:
	DD	$LN5@AnalogInpu
	DD	$LN4@AnalogInpu
	DD	$LN3@AnalogInpu
	DD	$LN2@AnalogInpu
	DD	$LN6@AnalogInpu
$LN61@AnalogInpu:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_AnalogInputSettingsCallback ENDP
_TEXT	ENDS
EXTRN	_bmTinyBlackButton:BYTE
EXTRN	_BUTTON_SetSkinClassic:PROC
EXTRN	_BUTTON_SetTextColor:PROC
EXTRN	_BUTTON_SetBitmap:PROC
EXTRN	_bmMiniButton:BYTE
EXTRN	_BUTTON_CreateEx:PROC
EXTRN	_BUTTON_SetDefaultBkColor:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayScale
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_DisplayScale PROC					; COMDAT
; Line 358
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 359
	push	0
	push	255					; 000000ffH
	call	_BUTTON_SetDefaultBkColor
	add	esp, 8
; Line 361
	push	2056					; 00000808H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	53					; 00000035H
	push	180					; 000000b4H
	push	76					; 0000004cH
	push	25					; 00000019H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hVoltsLowButton, eax
; Line 362
	push	OFFSET _bmMiniButton
	push	0
	mov	eax, DWORD PTR _hVoltsLowButton
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 363
	push	65280					; 0000ff00H
	push	0
	mov	eax, DWORD PTR _hVoltsLowButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 364
	push	16777215				; 00ffffffH
	push	1
	mov	eax, DWORD PTR _hVoltsLowButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 365
	mov	eax, DWORD PTR _hVoltsLowButton
	push	eax
	call	_BUTTON_SetSkinClassic
	add	esp, 4
; Line 367
	push	2057					; 00000809H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	53					; 00000035H
	push	180					; 000000b4H
	push	138					; 0000008aH
	push	25					; 00000019H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hVoltsHighButton, eax
; Line 368
	push	OFFSET _bmMiniButton
	push	0
	mov	eax, DWORD PTR _hVoltsHighButton
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 369
	push	255					; 000000ffH
	push	0
	mov	eax, DWORD PTR _hVoltsHighButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 370
	push	16777215				; 00ffffffH
	push	1
	mov	eax, DWORD PTR _hVoltsHighButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 371
	mov	eax, DWORD PTR _hVoltsHighButton
	push	eax
	call	_BUTTON_SetSkinClassic
	add	esp, 4
; Line 373
	push	2058					; 0000080aH
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	53					; 00000035H
	push	180					; 000000b4H
	push	76					; 0000004cH
	push	284					; 0000011cH
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hValueLowButton, eax
; Line 374
	push	OFFSET _bmMiniButton
	push	0
	mov	eax, DWORD PTR _hValueLowButton
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 375
	push	65280					; 0000ff00H
	push	0
	mov	eax, DWORD PTR _hValueLowButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 376
	push	16777215				; 00ffffffH
	push	1
	mov	eax, DWORD PTR _hValueLowButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 377
	mov	eax, DWORD PTR _hValueLowButton
	push	eax
	call	_BUTTON_SetSkinClassic
	add	esp, 4
; Line 379
	push	2059					; 0000080bH
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	53					; 00000035H
	push	180					; 000000b4H
	push	138					; 0000008aH
	push	284					; 0000011cH
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hValueHighButton, eax
; Line 380
	push	OFFSET _bmMiniButton
	push	0
	mov	eax, DWORD PTR _hValueHighButton
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 381
	push	255					; 000000ffH
	push	0
	mov	eax, DWORD PTR _hValueHighButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 382
	push	16777215				; 00ffffffH
	push	1
	mov	eax, DWORD PTR _hValueHighButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 383
	mov	eax, DWORD PTR _hValueHighButton
	push	eax
	call	_BUTTON_SetSkinClassic
	add	esp, 4
; Line 385
	push	2060					; 0000080cH
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	53					; 00000035H
	push	90					; 0000005aH
	push	200					; 000000c8H
	push	284					; 0000011cH
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hVoltsRangeButton, eax
; Line 386
	push	OFFSET _bmTinyBlackButton
	push	0
	mov	eax, DWORD PTR _hVoltsRangeButton
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 387
	push	16777215				; 00ffffffH
	push	0
	mov	eax, DWORD PTR _hVoltsRangeButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 388
	push	16777215				; 00ffffffH
	push	1
	mov	eax, DWORD PTR _hVoltsRangeButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 389
	mov	eax, DWORD PTR _hVoltsRangeButton
	push	eax
	call	_BUTTON_SetSkinClassic
	add	esp, 4
; Line 391
	push	2063					; 0000080fH
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	53					; 00000035H
	push	90					; 0000005aH
	push	200					; 000000c8H
	push	114					; 00000072H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hFilteringLevelButton, eax
; Line 392
	push	OFFSET _bmTinyBlackButton
	push	0
	mov	eax, DWORD PTR _hFilteringLevelButton
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 393
	push	16777215				; 00ffffffH
	push	0
	mov	eax, DWORD PTR _hFilteringLevelButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 394
	push	16777215				; 00ffffffH
	push	1
	mov	eax, DWORD PTR _hFilteringLevelButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 395
	mov	eax, DWORD PTR _hFilteringLevelButton
	push	eax
	call	_BUTTON_SetSkinClassic
	add	esp, 4
; Line 396
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayScale ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_bmleftarrow:BYTE
EXTRN	_GUI_DispStringAt:PROC
EXTRN	_BUTTON_SetText:PROC
EXTRN	_trimn:PROC
EXTRN	_GUI_DispStringHCenterAt:PROC
EXTRN	_bmScale:BYTE
EXTRN	_bmAnalog:BYTE
EXTRN	_bm3:BYTE
EXTRN	_bm2:BYTE
EXTRN	_bm1:BYTE
EXTRN	_bm0:BYTE
EXTRN	_GUI_DrawBitmap:PROC
EXTRN	_bmBackgroundWithPanel:BYTE
EXTRN	_GUI_SetTextMode:PROC
EXTRN	_GUI_SetColor:PROC
EXTRN	_GUI_SetFont:PROC
EXTRN	_GUI_Font24_ASCII:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ScalePaint
_TEXT	SEGMENT
tv71 = -252						; size = 4
_pBanner$ = -52						; size = 4
_scratch$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_hParent$ = 8						; size = 4
_ScalePaint PROC					; COMDAT
; Line 399
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 403
	push	OFFSET _GUI_Font24_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 404
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 405
	push	2
	call	_GUI_SetTextMode
	add	esp, 4
; Line 407
	push	0
	push	0
	push	OFFSET _bmBackgroundWithPanel
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 409
	mov	al, BYTE PTR _globalInput
	mov	BYTE PTR tv71[ebp], al
	cmp	BYTE PTR tv71[ebp], 1
	je	SHORT $LN4@ScalePaint
	cmp	BYTE PTR tv71[ebp], 2
	je	SHORT $LN3@ScalePaint
	cmp	BYTE PTR tv71[ebp], 3
	je	SHORT $LN2@ScalePaint
; Line 412
	mov	DWORD PTR _pBanner$[ebp], OFFSET _bm0
	jmp	SHORT $LN6@ScalePaint
$LN4@ScalePaint:
; Line 413
	mov	DWORD PTR _pBanner$[ebp], OFFSET _bm1
	jmp	SHORT $LN6@ScalePaint
$LN3@ScalePaint:
; Line 414
	mov	DWORD PTR _pBanner$[ebp], OFFSET _bm2
	jmp	SHORT $LN6@ScalePaint
$LN2@ScalePaint:
; Line 415
	mov	DWORD PTR _pBanner$[ebp], OFFSET _bm3
$LN6@ScalePaint:
; Line 417
	push	0
	push	0
	push	OFFSET _bmAnalog
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 418
	push	0
	push	224					; 000000e0H
	mov	eax, DWORD PTR _pBanner$[ebp]
	push	eax
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 419
	push	0
	push	253					; 000000fdH
	push	OFFSET _bmScale
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 421
	push	48					; 00000030H
	push	115					; 00000073H
	push	OFFSET $SG19708
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 422
	push	48					; 00000030H
	push	374					; 00000176H
	push	OFFSET $SG19709
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 424
	push	91					; 0000005bH
	push	245					; 000000f5H
	push	OFFSET $SG19710
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 425
	push	153					; 00000099H
	push	245					; 000000f5H
	push	OFFSET $SG19711
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 427
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+164]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG19712
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 428
	push	9
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_trimn
	add	esp, 8
; Line 429
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hVoltsLowButton
	push	ecx
	call	_BUTTON_SetText
	add	esp, 8
; Line 431
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+168]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG19713
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 432
	push	9
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_trimn
	add	esp, 8
; Line 433
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hVoltsHighButton
	push	ecx
	call	_BUTTON_SetText
	add	esp, 8
; Line 435
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+172]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG19714
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 436
	push	9
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_trimn
	add	esp, 8
; Line 437
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hValueLowButton
	push	ecx
	call	_BUTTON_SetText
	add	esp, 8
; Line 439
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+176]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG19715
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 440
	push	9
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_trimn
	add	esp, 8
; Line 441
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hValueHighButton
	push	ecx
	call	_BUTTON_SetText
	add	esp, 8
; Line 443
	push	204					; 000000ccH
	push	384					; 00000180H
	push	OFFSET $SG19716
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 444
	push	226					; 000000e2H
	push	384					; 00000180H
	push	OFFSET $SG19717
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 445
	push	204					; 000000ccH
	push	30					; 0000001eH
	push	OFFSET $SG19718
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 446
	push	226					; 000000e2H
	push	53					; 00000035H
	push	OFFSET $SG19719
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 448
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+160]
	test	ecx, ecx
	jne	SHORT $LN1@ScalePaint
; Line 449
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+160], 10	; 0000000aH
$LN1@ScalePaint:
; Line 450
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+160]
	push	ecx
	push	OFFSET $SG19721
	lea	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 451
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hVoltsRangeButton
	push	ecx
	call	_BUTTON_SetText
	add	esp, 8
; Line 453
	call	_SetFilteringText
; Line 455
	push	229					; 000000e5H
	push	0
	push	OFFSET _bmleftarrow
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 456
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ScalePaint
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@ScalePaint:
	DD	1
	DD	$LN11@ScalePaint
$LN11@ScalePaint:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN10@ScalePaint
$LN10@ScalePaint:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_ScalePaint ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _SetFilteringText
_TEXT	SEGMENT
tv69 = -208						; size = 4
_pText$ = -8						; size = 4
_SetFilteringText PROC					; COMDAT
; Line 459
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 462
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+147]
	mov	DWORD PTR tv69[ebp], ecx
	mov	edx, DWORD PTR tv69[ebp]
	sub	edx, 5
	mov	DWORD PTR tv69[ebp], edx
	cmp	DWORD PTR tv69[ebp], 46			; 0000002eH
	ja	SHORT $LN5@SetFilteri
	mov	eax, DWORD PTR tv69[ebp]
	movzx	ecx, BYTE PTR $LN10@SetFilteri[eax]
	jmp	DWORD PTR $LN11@SetFilteri[ecx*4]
$LN5@SetFilteri:
; Line 465
	mov	DWORD PTR _pText$[ebp], OFFSET $SG19730
	jmp	SHORT $LN6@SetFilteri
$LN4@SetFilteri:
; Line 466
	mov	DWORD PTR _pText$[ebp], OFFSET $SG19732
	jmp	SHORT $LN6@SetFilteri
$LN3@SetFilteri:
; Line 467
	mov	DWORD PTR _pText$[ebp], OFFSET $SG19734
	jmp	SHORT $LN6@SetFilteri
$LN2@SetFilteri:
; Line 468
	mov	DWORD PTR _pText$[ebp], OFFSET $SG19736
	jmp	SHORT $LN6@SetFilteri
$LN1@SetFilteri:
; Line 469
	mov	DWORD PTR _pText$[ebp], OFFSET $SG19738
$LN6@SetFilteri:
; Line 471
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hFilteringLevelButton
	push	ecx
	call	_BUTTON_SetText
	add	esp, 8
; Line 472
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@SetFilteri:
	DD	$LN4@SetFilteri
	DD	$LN3@SetFilteri
	DD	$LN2@SetFilteri
	DD	$LN1@SetFilteri
	DD	$LN5@SetFilteri
$LN10@SetFilteri:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_SetFilteringText ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _DisplayAlarm
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_DisplayAlarm PROC					; COMDAT
; Line 475
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 476
	push	0
	push	0
	call	_BUTTON_SetDefaultBkColor
	add	esp, 8
; Line 478
	push	2049					; 00000801H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	53					; 00000035H
	push	180					; 000000b4H
	push	90					; 0000005aH
	push	40					; 00000028H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hLED1Button, eax
; Line 479
	push	OFFSET _bmMiniButton
	push	0
	mov	eax, DWORD PTR _hLED1Button
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 480
	mov	eax, DWORD PTR _hLED1Button
	push	eax
	call	_BUTTON_SetSkinClassic
	add	esp, 4
; Line 482
	push	2050					; 00000802H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	53					; 00000035H
	push	180					; 000000b4H
	push	150					; 00000096H
	push	40					; 00000028H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hLED2Button, eax
; Line 483
	push	OFFSET _bmMiniButton
	push	0
	mov	eax, DWORD PTR _hLED2Button
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 484
	mov	eax, DWORD PTR _hLED2Button
	push	eax
	call	_BUTTON_SetSkinClassic
	add	esp, 4
; Line 487
	push	2051					; 00000803H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	53					; 00000035H
	push	90					; 0000005aH
	push	120					; 00000078H
	push	261					; 00000105H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hAlarmConditionButton, eax
; Line 488
	push	OFFSET _bmTinyBlackButton
	push	0
	mov	eax, DWORD PTR _hAlarmConditionButton
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 489
	push	16777215				; 00ffffffH
	push	0
	mov	eax, DWORD PTR _hAlarmConditionButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 490
	push	16777215				; 00ffffffH
	push	1
	mov	eax, DWORD PTR _hAlarmConditionButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 491
	mov	eax, DWORD PTR _hAlarmConditionButton
	push	eax
	call	_BUTTON_SetSkinClassic
	add	esp, 4
; Line 494
	push	2052					; 00000804H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	53					; 00000035H
	push	90					; 0000005aH
	push	180					; 000000b4H
	push	261					; 00000105H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hAlarmValueButton, eax
; Line 495
	push	OFFSET _bmTinyBlackButton
	push	0
	mov	eax, DWORD PTR _hAlarmValueButton
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 496
	push	16777215				; 00ffffffH
	push	0
	mov	eax, DWORD PTR _hAlarmValueButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 497
	push	16777215				; 00ffffffH
	push	1
	mov	eax, DWORD PTR _hAlarmValueButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 498
	mov	eax, DWORD PTR _hAlarmValueButton
	push	eax
	call	_BUTTON_SetSkinClassic
	add	esp, 4
; Line 501
	push	2061					; 0000080dH
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	53					; 00000035H
	push	90					; 0000005aH
	push	120					; 00000078H
	push	361					; 00000169H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hUpperAlarmConditionButton, eax
; Line 502
	push	OFFSET _bmTinyBlackButton
	push	0
	mov	eax, DWORD PTR _hUpperAlarmConditionButton
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 503
	push	16777215				; 00ffffffH
	push	0
	mov	eax, DWORD PTR _hUpperAlarmConditionButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 504
	push	16777215				; 00ffffffH
	push	1
	mov	eax, DWORD PTR _hUpperAlarmConditionButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 505
	mov	eax, DWORD PTR _hUpperAlarmConditionButton
	push	eax
	call	_BUTTON_SetSkinClassic
	add	esp, 4
; Line 508
	push	2062					; 0000080eH
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	53					; 00000035H
	push	90					; 0000005aH
	push	180					; 000000b4H
	push	361					; 00000169H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hUpperAlarmValueButton, eax
; Line 509
	push	OFFSET _bmTinyBlackButton
	push	0
	mov	eax, DWORD PTR _hUpperAlarmValueButton
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 510
	push	16777215				; 00ffffffH
	push	0
	mov	eax, DWORD PTR _hUpperAlarmValueButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 511
	push	16777215				; 00ffffffH
	push	1
	mov	eax, DWORD PTR _hUpperAlarmValueButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 512
	mov	eax, DWORD PTR _hUpperAlarmValueButton
	push	eax
	call	_BUTTON_SetSkinClassic
	add	esp, 4
; Line 513
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayAlarm ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_GetAlarmTriggerText:PROC
EXTRN	_GUI_DrawRoundedRect:PROC
EXTRN	_bmAlarmText:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _AlarmPaint
_TEXT	SEGMENT
tv71 = -252						; size = 4
_pBanner$ = -52						; size = 4
_scratch$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_hParent$ = 8						; size = 4
_AlarmPaint PROC					; COMDAT
; Line 516
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 520
	push	OFFSET _GUI_Font24_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 521
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 522
	push	2
	call	_GUI_SetTextMode
	add	esp, 4
; Line 524
	push	0
	push	0
	push	OFFSET _bmBackgroundWithPanel
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 527
	mov	al, BYTE PTR _globalInput
	mov	BYTE PTR tv71[ebp], al
	cmp	BYTE PTR tv71[ebp], 1
	je	SHORT $LN7@AlarmPaint
	cmp	BYTE PTR tv71[ebp], 2
	je	SHORT $LN6@AlarmPaint
	cmp	BYTE PTR tv71[ebp], 3
	je	SHORT $LN5@AlarmPaint
; Line 530
	mov	DWORD PTR _pBanner$[ebp], OFFSET _bm0
	jmp	SHORT $LN9@AlarmPaint
$LN7@AlarmPaint:
; Line 531
	mov	DWORD PTR _pBanner$[ebp], OFFSET _bm1
	jmp	SHORT $LN9@AlarmPaint
$LN6@AlarmPaint:
; Line 532
	mov	DWORD PTR _pBanner$[ebp], OFFSET _bm2
	jmp	SHORT $LN9@AlarmPaint
$LN5@AlarmPaint:
; Line 533
	mov	DWORD PTR _pBanner$[ebp], OFFSET _bm3
$LN9@AlarmPaint:
; Line 535
	push	0
	push	0
	push	OFFSET _bmAnalog
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 536
	push	0
	push	224					; 000000e0H
	mov	eax, DWORD PTR _pBanner$[ebp]
	push	eax
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 537
	push	0
	push	253					; 000000fdH
	push	OFFSET _bmAlarmText
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 541
	push	10					; 0000000aH
	push	255					; 000000ffH
	push	233					; 000000e9H
	push	50					; 00000032H
	push	28					; 0000001cH
	call	_GUI_DrawRoundedRect
	add	esp, 20					; 00000014H
; Line 542
	push	55					; 00000037H
	push	131					; 00000083H
	push	OFFSET $SG19755
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 545
	push	10					; 0000000aH
	push	255					; 000000ffH
	push	460					; 000001ccH
	push	50					; 00000032H
	push	252					; 000000fcH
	call	_GUI_DrawRoundedRect
	add	esp, 20					; 00000014H
; Line 546
	push	55					; 00000037H
	push	356					; 00000164H
	push	OFFSET $SG19756
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 547
	push	90					; 0000005aH
	push	304					; 00000130H
	push	OFFSET $SG19757
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 548
	push	90					; 0000005aH
	push	408					; 00000198H
	push	OFFSET $SG19758
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 550
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+180]
	test	ecx, ecx
	je	SHORT $LN4@AlarmPaint
; Line 552
	push	255					; 000000ffH
	push	0
	mov	eax, DWORD PTR _hLED1Button
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 553
	push	255					; 000000ffH
	push	1
	mov	eax, DWORD PTR _hLED1Button
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 554
	push	OFFSET $SG19760
	mov	eax, DWORD PTR _hLED1Button
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
; Line 556
	jmp	SHORT $LN3@AlarmPaint
$LN4@AlarmPaint:
; Line 558
	push	16777215				; 00ffffffH
	push	0
	mov	eax, DWORD PTR _hLED1Button
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 559
	push	16777215				; 00ffffffH
	push	1
	mov	eax, DWORD PTR _hLED1Button
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 560
	push	OFFSET $SG19762
	mov	eax, DWORD PTR _hLED1Button
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
$LN3@AlarmPaint:
; Line 563
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+181]
	test	ecx, ecx
	je	SHORT $LN2@AlarmPaint
; Line 565
	push	255					; 000000ffH
	push	0
	mov	eax, DWORD PTR _hLED2Button
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 566
	push	255					; 000000ffH
	push	1
	mov	eax, DWORD PTR _hLED2Button
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 567
	push	OFFSET $SG19764
	mov	eax, DWORD PTR _hLED2Button
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
; Line 569
	jmp	SHORT $LN1@AlarmPaint
$LN2@AlarmPaint:
; Line 571
	push	16777215				; 00ffffffH
	push	0
	mov	eax, DWORD PTR _hLED2Button
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 572
	push	16777215				; 00ffffffH
	push	1
	mov	eax, DWORD PTR _hLED2Button
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 573
	push	OFFSET $SG19766
	mov	eax, DWORD PTR _hLED2Button
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
$LN1@AlarmPaint:
; Line 576
	push	0
	movzx	eax, BYTE PTR _globalInput
	push	eax
	call	_GetAlarmTriggerText
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _hAlarmConditionButton
	push	ecx
	call	_BUTTON_SetText
	add	esp, 8
; Line 577
	push	1
	movzx	eax, BYTE PTR _globalInput
	push	eax
	call	_GetAlarmTriggerText
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _hUpperAlarmConditionButton
	push	ecx
	call	_BUTTON_SetText
	add	esp, 8
; Line 580
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+152]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG19767
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 581
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hAlarmValueButton
	push	ecx
	call	_BUTTON_SetText
	add	esp, 8
; Line 582
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+156]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG19768
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 583
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hUpperAlarmValueButton
	push	ecx
	call	_BUTTON_SetText
	add	esp, 8
; Line 585
	push	229					; 000000e5H
	push	0
	push	OFFSET _bmleftarrow
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 586
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@AlarmPaint
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@AlarmPaint:
	DD	1
	DD	$LN14@AlarmPaint
$LN14@AlarmPaint:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN13@AlarmPaint
$LN13@AlarmPaint:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_AlarmPaint ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayRenameInput
_TEXT	SEGMENT
_scratch$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_hParent$ = 8						; size = 4
_DisplayRenameInput PROC				; COMDAT
; Line 590
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 593
	call	_InputCleanUpKeyboards
; Line 597
	movzx	eax, BYTE PTR _globalInput
	push	eax
	push	OFFSET $SG19773
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 598
	push	1
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	2
	push	12					; 0000000cH
	push	0
	push	1
	movzx	ecx, BYTE PTR _globalInput
	shl	ecx, 6
	add	ecx, OFFSET _vehicleData+120
	push	ecx
	lea	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_CreateKeyboard
	add	esp, 32					; 00000020H
	mov	DWORD PTR _pRenameInput, eax
; Line 599
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@DisplayRen
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@DisplayRen:
	DD	1
	DD	$LN4@DisplayRen
$LN4@DisplayRen:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN3@DisplayRen
$LN3@DisplayRen:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_DisplayRenameInput ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _RenameInputPaint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_RenameInputPaint PROC					; COMDAT
; Line 602
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 603
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_RenameInputPaint ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayRenameUnits
_TEXT	SEGMENT
_scratch$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_hParent$ = 8						; size = 4
_DisplayRenameUnits PROC				; COMDAT
; Line 606
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 609
	call	_InputCleanUpKeyboards
; Line 613
	movzx	eax, BYTE PTR _globalInput
	push	eax
	push	OFFSET $SG19781
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 614
	push	1
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	3
	push	9
	push	0
	push	1
	movzx	ecx, BYTE PTR _globalInput
	shl	ecx, 6
	add	ecx, OFFSET _vehicleData+137
	push	ecx
	lea	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_CreateKeyboard
	add	esp, 32					; 00000020H
	mov	DWORD PTR _pRenameUnits, eax
; Line 615
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@DisplayRen@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@DisplayRen@2:
	DD	1
	DD	$LN4@DisplayRen@2
$LN4@DisplayRen@2:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN3@DisplayRen@2
$LN3@DisplayRen@2:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_DisplayRenameUnits ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _RenameUnitsPaint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_RenameUnitsPaint PROC					; COMDAT
; Line 618
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 619
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_RenameUnitsPaint ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _AnalogInputSettingsIgnoreNextKeyRelease
_TEXT	SEGMENT
_AnalogInputSettingsIgnoreNextKeyRelease PROC		; COMDAT
; Line 623
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 625
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_AnalogInputSettingsIgnoreNextKeyRelease ENDP
_TEXT	ENDS
PUBLIC	_DeleteAnalogKeyboards
EXTRN	_DestroyKeyboard:PROC
EXTRN	_DeleteAnalogScaleKeyboards:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DeleteAnalogKeyboards
_TEXT	SEGMENT
_DeleteAnalogKeyboards PROC				; COMDAT
; Line 629
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 630
	call	_DeleteAnalogScaleKeyboards
; Line 631
	cmp	DWORD PTR _pAlarmValue, 0
	je	SHORT $LN3@DeleteAnal
; Line 633
	mov	eax, DWORD PTR _pAlarmValue
	push	eax
	call	_DestroyKeyboard
	add	esp, 4
; Line 634
	mov	DWORD PTR _pAlarmValue, 0
$LN3@DeleteAnal:
; Line 636
	cmp	DWORD PTR _pRenameUnits, 0
	je	SHORT $LN2@DeleteAnal
; Line 638
	mov	eax, DWORD PTR _pRenameUnits
	push	eax
	call	_DestroyKeyboard
	add	esp, 4
; Line 639
	mov	DWORD PTR _pRenameUnits, 0
$LN2@DeleteAnal:
; Line 641
	cmp	DWORD PTR _pRenameInput, 0
	je	SHORT $LN4@DeleteAnal
; Line 643
	mov	eax, DWORD PTR _pRenameInput
	push	eax
	call	_DestroyKeyboard
	add	esp, 4
; Line 644
	mov	DWORD PTR _pRenameInput, 0
$LN4@DeleteAnal:
; Line 646
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DeleteAnalogKeyboards ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	__real@00000000
PUBLIC	_InvalidAnalogDataPopUp
PUBLIC	_ValidateAnalogData
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ValidateAnalogData
_TEXT	SEGMENT
tv213 = -232						; size = 4
tv207 = -232						; size = 4
tv189 = -232						; size = 4
tv177 = -232						; size = 4
_temp$19821 = -32					; size = 4
_temp$19808 = -20					; size = 4
_pData$ = -8						; size = 4
_ValidateAnalogData PROC				; COMDAT
; Line 663
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 666
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	add	eax, OFFSET _vehicleData+120
	mov	DWORD PTR _pData$[ebp], eax
; Line 668
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	fld	DWORD PTR [ecx+44]
	fcomp	DWORD PTR [eax+48]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN12@ValidateAn
; Line 670
	push	1
	call	_InvalidAnalogDataPopUp
	add	esp, 4
	cmp	eax, 2
	jne	SHORT $LN15@ValidateAn
; Line 671
	xor	al, al
	jmp	$LN17@ValidateAn
; Line 672
	jmp	SHORT $LN12@ValidateAn
$LN15@ValidateAn:
; Line 675
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	fld	DWORD PTR [eax+48]
	fld	DWORD PTR [ecx+44]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN13@ValidateAn
; Line 677
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	mov	DWORD PTR tv177[ebp], ecx
	fild	DWORD PTR tv177[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	fstp	DWORD PTR [edx+48]
; Line 678
	mov	eax, DWORD PTR _pData$[ebp]
	fldz
	fstp	DWORD PTR [eax+44]
; Line 680
	jmp	SHORT $LN12@ValidateAn
$LN13@ValidateAn:
; Line 684
	mov	eax, DWORD PTR _pData$[ebp]
	fld	DWORD PTR [eax+48]
	fstp	DWORD PTR _temp$19808[ebp]
; Line 685
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	fld	DWORD PTR [ecx+44]
	fstp	DWORD PTR [eax+48]
; Line 686
	mov	eax, DWORD PTR _pData$[ebp]
	fld	DWORD PTR _temp$19808[ebp]
	fstp	DWORD PTR [eax+44]
$LN12@ValidateAn:
; Line 690
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	mov	DWORD PTR tv189[ebp], ecx
	fild	DWORD PTR tv189[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	fcomp	DWORD PTR [edx+48]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN10@ValidateAn
	mov	eax, DWORD PTR _pData$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	$LN5@ValidateAn
$LN10@ValidateAn:
; Line 692
	push	0
	call	_InvalidAnalogDataPopUp
	add	esp, 4
	cmp	eax, 2
	jne	SHORT $LN9@ValidateAn
; Line 693
	xor	al, al
	jmp	$LN17@ValidateAn
; Line 694
	jmp	SHORT $LN5@ValidateAn
$LN9@ValidateAn:
; Line 697
	mov	eax, DWORD PTR _pData$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN7@ValidateAn
; Line 698
	mov	eax, DWORD PTR _pData$[ebp]
	fldz
	fstp	DWORD PTR [eax+44]
$LN7@ValidateAn:
; Line 699
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	mov	DWORD PTR tv207[ebp], ecx
	fild	DWORD PTR tv207[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	fcomp	DWORD PTR [edx+48]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN5@ValidateAn
; Line 701
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	mov	DWORD PTR tv213[ebp], ecx
	fild	DWORD PTR tv213[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	fstp	DWORD PTR [edx+48]
; Line 702
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	fld	DWORD PTR [ecx+44]
	fcomp	DWORD PTR [eax+48]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN5@ValidateAn
; Line 703
	mov	eax, DWORD PTR _pData$[ebp]
	fldz
	fstp	DWORD PTR [eax+44]
$LN5@ValidateAn:
; Line 709
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	cmp	ecx, 2
	jne	SHORT $LN1@ValidateAn
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax+29]
	cmp	ecx, 1
	jne	SHORT $LN1@ValidateAn
; Line 711
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	fld	DWORD PTR [ecx+36]
	fcomp	DWORD PTR [eax+32]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@ValidateAn
; Line 713
	push	2
	call	_InvalidAnalogDataPopUp
	add	esp, 4
	cmp	eax, 2
	jne	SHORT $LN2@ValidateAn
; Line 714
	xor	al, al
	jmp	SHORT $LN17@ValidateAn
; Line 715
	jmp	SHORT $LN1@ValidateAn
$LN2@ValidateAn:
; Line 719
	mov	eax, DWORD PTR _pData$[ebp]
	fld	DWORD PTR [eax+32]
	fstp	DWORD PTR _temp$19821[ebp]
; Line 720
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	fld	DWORD PTR [ecx+36]
	fstp	DWORD PTR [eax+32]
; Line 721
	mov	eax, DWORD PTR _pData$[ebp]
	fld	DWORD PTR _temp$19821[ebp]
	fstp	DWORD PTR [eax+36]
$LN1@ValidateAn:
; Line 726
	mov	al, 1
$LN17@ValidateAn:
; Line 727
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ValidateAnalogData ENDP
_TEXT	ENDS
EXTRN	_GUI_ExecDialogBox:PROC
EXTRN	_popupCallback:PROC
EXTRN	_WM_GetDesktopWindow:PROC
EXTRN	_SetPopupDefaults:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _InvalidAnalogDataPopUp
_TEXT	SEGMENT
tv65 = -196						; size = 4
_screen$ = 8						; size = 4
_InvalidAnalogDataPopUp PROC				; COMDAT
; Line 761
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 762
	push	1
	call	_SetPopupDefaults
	add	esp, 4
; Line 764
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 0
	je	SHORT $LN3@InvalidAna
	cmp	DWORD PTR tv65[ebp], 1
	je	SHORT $LN2@InvalidAna
	cmp	DWORD PTR tv65[ebp], 2
	je	SHORT $LN1@InvalidAna
	jmp	SHORT $LN4@InvalidAna
$LN3@InvalidAna:
; Line 767
	push	10					; 0000000aH
	push	10					; 0000000aH
	call	_WM_GetDesktopWindow
	push	eax
	push	OFFSET _popupCallback
	push	6
	push	OFFSET _InvalidRangeResources
	call	_GUI_ExecDialogBox
	add	esp, 24					; 00000018H
	jmp	SHORT $LN6@InvalidAna
$LN2@InvalidAna:
; Line 769
	push	10					; 0000000aH
	push	10					; 0000000aH
	call	_WM_GetDesktopWindow
	push	eax
	push	OFFSET _popupCallback
	push	6
	push	OFFSET _InvalidOrderResources
	call	_GUI_ExecDialogBox
	add	esp, 24					; 00000018H
	jmp	SHORT $LN6@InvalidAna
$LN1@InvalidAna:
; Line 771
	push	10					; 0000000aH
	push	10					; 0000000aH
	call	_WM_GetDesktopWindow
	push	eax
	push	OFFSET _popupCallback
	push	6
	push	OFFSET _InvalidAlarmOrderResources
	call	_GUI_ExecDialogBox
	add	esp, 24					; 00000018H
	jmp	SHORT $LN6@InvalidAna
$LN4@InvalidAna:
; Line 774
	xor	eax, eax
$LN6@InvalidAna:
; Line 775
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_InvalidAnalogDataPopUp ENDP
_TEXT	ENDS
END
