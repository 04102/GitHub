; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_CharM.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUIMONO_DispChar
EXTRN	_LCD_FillRect:PROC
EXTRN	_LCD_DrawBitmap:PROC
EXTRN	_LCD_pBkColorIndex:DWORD
EXTRN	_LCD_SetDrawMode:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_charm.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUIMONO_DispChar
_TEXT	SEGMENT
_OldMode$8363 = -161					; size = 1
_YSize$8362 = -152					; size = 4
_XSize$8361 = -140					; size = 4
_DrawMode$8360 = -128					; size = 4
_BytesPerChar$8359 = -116				; size = 4
_ptl$8355 = -104					; size = 4
_pti$8350 = -92						; size = 4
_FirstChar$ = -80					; size = 4
_pMono$ = -68						; size = 4
_y$ = -56						; size = 4
_x$ = -44						; size = 4
_pd$ = -32						; size = 4
_c1$ = -20						; size = 4
_c0$ = -8						; size = 4
_c$ = 8							; size = 2
_GUIMONO_DispChar PROC					; COMDAT
; Line 41
	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 44
	movsx	eax, WORD PTR _GUI_Context+34
	mov	DWORD PTR _x$[ebp], eax
; Line 45
	movsx	eax, WORD PTR _GUI_Context+36
	mov	DWORD PTR _y$[ebp], eax
; Line 47
	mov	eax, DWORD PTR _GUI_Context+28
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pMono$[ebp], ecx
; Line 48
	mov	eax, DWORD PTR _pMono$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	mov	DWORD PTR _FirstChar$[ebp], ecx
; Line 51
	movzx	eax, WORD PTR _c$[ebp]
	movzx	ecx, WORD PTR _FirstChar$[ebp]
	cmp	eax, ecx
	jl	SHORT $LN10@GUIMONO_Di
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pMono$[ebp]
	movzx	edx, WORD PTR [ecx+14]
	cmp	eax, edx
	jg	SHORT $LN10@GUIMONO_Di
; Line 52
	mov	eax, DWORD PTR _pMono$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pd$[ebp], ecx
; Line 53
	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, DWORD PTR _FirstChar$[ebp]
	mov	DWORD PTR _c0$[ebp], eax
; Line 54
	mov	DWORD PTR _c1$[ebp], -1
; Line 55
	jmp	$LN9@GUIMONO_Di
$LN10@GUIMONO_Di:
; Line 57
	mov	eax, DWORD PTR _pMono$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pti$8350[ebp], ecx
; Line 58
	mov	eax, DWORD PTR _pMono$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _pd$[ebp], ecx
; Line 59
	cmp	DWORD PTR _pti$8350[ebp], 0
	je	SHORT $LN8@GUIMONO_Di
; Line 60
	mov	eax, DWORD PTR _pti$8350[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _FirstChar$[ebp], ecx
; Line 61
	movzx	eax, WORD PTR _c$[ebp]
	movzx	ecx, WORD PTR _FirstChar$[ebp]
	cmp	eax, ecx
	jl	SHORT $LN7@GUIMONO_Di
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pti$8350[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	jg	SHORT $LN7@GUIMONO_Di
; Line 63
	mov	eax, DWORD PTR _pti$8350[ebp]
	movzx	ecx, WORD PTR [eax]
	movzx	edx, WORD PTR _c$[ebp]
	sub	edx, ecx
	mov	WORD PTR _c$[ebp], dx
; Line 64
	mov	eax, DWORD PTR _pti$8350[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _ptl$8355[ebp], ecx
; Line 65
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _ptl$8355[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _ptl$8355[ebp], edx
; Line 66
	mov	eax, DWORD PTR _ptl$8355[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	DWORD PTR _c0$[ebp], ecx
; Line 67
	mov	eax, DWORD PTR _ptl$8355[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _c1$[ebp], ecx
; Line 68
	jmp	SHORT $LN6@GUIMONO_Di
$LN7@GUIMONO_Di:
; Line 69
	mov	DWORD PTR _c1$[ebp], -1
	mov	eax, DWORD PTR _c1$[ebp]
	mov	DWORD PTR _c0$[ebp], eax
$LN6@GUIMONO_Di:
; Line 71
	jmp	SHORT $LN9@GUIMONO_Di
$LN8@GUIMONO_Di:
; Line 72
	mov	DWORD PTR _c1$[ebp], -1
	mov	eax, DWORD PTR _c1$[ebp]
	mov	DWORD PTR _c0$[ebp], eax
$LN9@GUIMONO_Di:
; Line 76
	cmp	DWORD PTR _c0$[ebp], -1
	je	$LN4@GUIMONO_Di
; Line 77
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+24]
	mov	edx, DWORD PTR _pMono$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	imul	ecx, eax
	mov	DWORD PTR _BytesPerChar$8359[ebp], ecx
; Line 79
	mov	eax, DWORD PTR _pMono$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	mov	DWORD PTR _XSize$8361[ebp], ecx
; Line 80
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+24]
	mov	DWORD PTR _YSize$8362[ebp], ecx
; Line 82
	movsx	eax, WORD PTR _GUI_Context+42
	mov	DWORD PTR _DrawMode$8360[ebp], eax
; Line 85
	mov	eax, DWORD PTR _DrawMode$8360[ebp]
	push	eax
	call	_LCD_SetDrawMode
	add	esp, 4
	mov	BYTE PTR _OldMode$8363[ebp], al
; Line 93
	mov	eax, DWORD PTR _LCD_pBkColorIndex
	push	eax
	mov	ecx, DWORD PTR _c0$[ebp]
	imul	ecx, DWORD PTR _BytesPerChar$8359[ebp]
	add	ecx, DWORD PTR _pd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pMono$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	push	eax
	push	1
	mov	ecx, DWORD PTR _GUI_Context+28
	movzx	edx, BYTE PTR [ecx+27]
	push	edx
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+26]
	push	ecx
	mov	edx, DWORD PTR _YSize$8362[ebp]
	push	edx
	mov	eax, DWORD PTR _XSize$8361[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_LCD_DrawBitmap
	add	esp, 40					; 00000028H
; Line 94
	cmp	DWORD PTR _c1$[ebp], -1
	je	SHORT $LN3@GUIMONO_Di
; Line 95
	mov	eax, DWORD PTR _DrawMode$8360[ebp]
	or	eax, 2
	push	eax
	call	_LCD_SetDrawMode
	add	esp, 4
; Line 103
	mov	eax, DWORD PTR _LCD_pBkColorIndex
	push	eax
	mov	ecx, DWORD PTR _c1$[ebp]
	imul	ecx, DWORD PTR _BytesPerChar$8359[ebp]
	add	ecx, DWORD PTR _pd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pMono$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	push	eax
	push	1
	mov	ecx, DWORD PTR _GUI_Context+28
	movzx	edx, BYTE PTR [ecx+27]
	push	edx
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+26]
	push	ecx
	mov	edx, DWORD PTR _YSize$8362[ebp]
	push	edx
	mov	eax, DWORD PTR _XSize$8361[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_LCD_DrawBitmap
	add	esp, 40					; 00000028H
$LN3@GUIMONO_Di:
; Line 106
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+25]
	mov	edx, DWORD PTR _GUI_Context+28
	movzx	eax, BYTE PTR [edx+24]
	cmp	ecx, eax
	jle	SHORT $LN2@GUIMONO_Di
; Line 107
	cmp	DWORD PTR _DrawMode$8360[ebp], 2
	je	SHORT $LN2@GUIMONO_Di
; Line 108
	mov	eax, DWORD PTR _DrawMode$8360[ebp]
	xor	eax, 4
	push	eax
	call	_LCD_SetDrawMode
	add	esp, 4
; Line 112
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+25]
	add	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _GUI_Context+28
	movzx	eax, BYTE PTR [edx+26]
	imul	eax, DWORD PTR _XSize$8361[ebp]
	add	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _GUI_Context+28
	movzx	edx, BYTE PTR [ecx+24]
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+27]
	imul	edx, ecx
	add	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
$LN2@GUIMONO_Di:
; Line 115
	movzx	eax, BYTE PTR _OldMode$8363[ebp]
	push	eax
	call	_LCD_SetDrawMode
	add	esp, 4
$LN4@GUIMONO_Di:
; Line 118
	mov	eax, DWORD PTR _pMono$[ebp]
	movzx	ecx, BYTE PTR [eax+17]
	movsx	edx, WORD PTR _GUI_Context+34
	add	edx, ecx
	mov	WORD PTR _GUI_Context+34, dx
; Line 119
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 360				; 00000168H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUIMONO_DispChar ENDP
_TEXT	ENDS
PUBLIC	_GUIMONO_GetCharDistX
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUIMONO_GetCharDistX
_TEXT	SEGMENT
_pMono$ = -8						; size = 4
_c$ = 8							; size = 2
_GUIMONO_GetCharDistX PROC				; COMDAT
; Line 125
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 126
	mov	eax, DWORD PTR _GUI_Context+28
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pMono$[ebp], ecx
; Line 127
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR _c$[ebp], ax
; Line 128
	mov	eax, DWORD PTR _pMono$[ebp]
	movzx	eax, BYTE PTR [eax+17]
; Line 129
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUIMONO_GetCharDistX ENDP
_TEXT	ENDS
PUBLIC	_GUIMONO_GetFontInfo
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUIMONO_GetFontInfo
_TEXT	SEGMENT
_pFont$ = 8						; size = 4
_pfi$ = 12						; size = 4
_GUIMONO_GetFontInfo PROC				; COMDAT
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 136
	mov	eax, DWORD PTR _pFont$[ebp]
	mov	DWORD PTR _pFont$[ebp], eax
; Line 137
	mov	eax, 2
	mov	ecx, DWORD PTR _pfi$[ebp]
	mov	WORD PTR [ecx], ax
; Line 138
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUIMONO_GetFontInfo ENDP
_TEXT	ENDS
PUBLIC	_GUIMONO_IsInFont
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUIMONO_IsInFont
_TEXT	SEGMENT
_pList$8390 = -44					; size = 4
_pti$8387 = -32						; size = 4
_FirstChar$ = -20					; size = 4
_pMono$ = -8						; size = 4
_pFont$ = 8						; size = 4
_c$ = 12						; size = 2
_GUIMONO_IsInFont PROC					; COMDAT
; Line 144
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 145
	mov	eax, DWORD PTR _pFont$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pMono$[ebp], ecx
; Line 146
	mov	eax, DWORD PTR _pMono$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	mov	DWORD PTR _FirstChar$[ebp], ecx
; Line 148
	movzx	eax, WORD PTR _c$[ebp]
	movzx	ecx, WORD PTR _FirstChar$[ebp]
	cmp	eax, ecx
	jl	SHORT $LN5@GUIMONO_Is
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pMono$[ebp]
	movzx	edx, WORD PTR [ecx+14]
	cmp	eax, edx
	jg	SHORT $LN5@GUIMONO_Is
; Line 149
	mov	al, 1
	jmp	SHORT $LN6@GUIMONO_Is
; Line 150
	jmp	SHORT $LN4@GUIMONO_Is
$LN5@GUIMONO_Is:
; Line 153
	mov	eax, DWORD PTR _pMono$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pti$8387[ebp], ecx
; Line 154
	cmp	DWORD PTR _pti$8387[ebp], 0
	je	SHORT $LN4@GUIMONO_Is
; Line 155
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pti$8387[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	jl	SHORT $LN4@GUIMONO_Is
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pti$8387[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	jg	SHORT $LN4@GUIMONO_Is
; Line 157
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pti$8387[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _pti$8387[ebp]
	movzx	edx, WORD PTR [ecx]
	shl	edx, 2
	sub	eax, edx
	mov	DWORD PTR _pList$8390[ebp], eax
; Line 158
	mov	eax, DWORD PTR _pList$8390[ebp]
	movsx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jl	SHORT $LN4@GUIMONO_Is
; Line 159
	mov	al, 1
	jmp	SHORT $LN6@GUIMONO_Is
$LN4@GUIMONO_Is:
; Line 164
	xor	al, al
$LN6@GUIMONO_Is:
; Line 165
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUIMONO_IsInFont ENDP
_TEXT	ENDS
END
