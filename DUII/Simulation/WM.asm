; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\WM\WM.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_WM__aBkColor:DWORD
COMM	_WM_pfPollPID:DWORD
COMM	_WM__pFirstCriticalHandle:DWORD
COMM	_WM__ahDesktopWin:DWORD
COMM	_WM_IsActive:BYTE
COMM	_WM__PaintCallbackCnt:BYTE
COMM	_WM__CaptureReleaseAuto:BYTE
COMM	_WM__NumInvalidWindows:WORD
COMM	_WM__TransWindowCnt:DWORD
COMM	_WM__FirstWin:DWORD
COMM	_WM__NumWindows:WORD
COMM	_WM__pfShowInvalid:DWORD
COMM	_WM__ahWinFocus:DWORD
COMM	_WM__hATransWindow:DWORD
COMM	_WM__ahCapture:DWORD
COMM	_WM__CreateFlags:DWORD
$SG9856	DB	'Function may not be called from within a paint event', 00H
	ORG $+3
$SG9868	DB	'WM_CreateWindow: No memory to create window', 00H
$SG9897	DB	'Function may not be called from within a paint event', 00H
	ORG $+3
$SG9906	DB	'WM_DeleteWindow: Invalid handle', 00H
$SG9913	DB	'Function may not be called from within a paint event', 00H
_DATA	ENDS
PUBLIC	_WM__InvalidateRect
PUBLIC	_WM__InvalidateParent
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\wm\wm.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _WM__InvalidateParent
_TEXT	SEGMENT
_Flags$ = -20						; size = 2
_pWin$ = -8						; size = 4
_pInvalidRect$ = 8					; size = 4
_hParent$ = 12						; size = 4
_hStop$ = 16						; size = 4
_WM__InvalidateParent PROC				; COMDAT
; Line 211
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 215
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 216
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 16352				; 00003fe0H
	add	ecx, 32					; 00000020H
	mov	WORD PTR _Flags$[ebp], cx
; Line 217
	movzx	eax, WORD PTR _Flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hStop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hParent$[ebp]
	push	edx
	mov	eax, DWORD PTR _pInvalidRect$[ebp]
	push	eax
	call	_WM__InvalidateRect
	add	esp, 16					; 00000010H
; Line 218
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__InvalidateParent ENDP
_TEXT	ENDS
PUBLIC	_WM__Invalidate1Abs
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__Invalidate1Abs
_TEXT	SEGMENT
_hWin$ = 8						; size = 4
_pRect$ = 12						; size = 4
_WM__Invalidate1Abs PROC				; COMDAT
; Line 280
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 281
	push	32					; 00000020H
	mov	eax, DWORD PTR _pRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	__Invalidate1Abs
	add	esp, 12					; 0000000cH
; Line 282
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__Invalidate1Abs ENDP
_TEXT	ENDS
PUBLIC	_WM__RectIsNZ
EXTRN	_GUI_MergeRect:PROC
EXTRN	_GUI__IntersectRects:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Invalidate1Abs
_TEXT	SEGMENT
_Status$ = -36						; size = 4
_pWin$ = -24						; size = 4
_r$ = -12						; size = 8
_hWin$ = 8						; size = 4
_pRect$ = 12						; size = 4
_Flags$ = 16						; size = 2
__Invalidate1Abs PROC					; COMDAT
; Line 226
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 231
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 232
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _Status$[ebp], ecx
; Line 233
	mov	eax, DWORD PTR _Status$[ebp]
	and	eax, 2
	jne	SHORT $LN7@Invalidate
; Line 234
	jmp	$LN8@Invalidate
$LN7@Invalidate:
; Line 236
	mov	eax, DWORD PTR _pRect$[ebp]
	push	eax
	call	_WM__RectIsNZ
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@Invalidate
; Line 237
	jmp	$LN8@Invalidate
$LN6@Invalidate:
; Line 239
	mov	eax, DWORD PTR _Status$[ebp]
	and	eax, 2049				; 00000801H
	cmp	eax, 1
	jne	SHORT $LN5@Invalidate
; Line 240
	jmp	$LN8@Invalidate
$LN5@Invalidate:
; Line 243
	mov	eax, DWORD PTR _pWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	call	_GUI__IntersectRects
	add	esp, 12					; 0000000cH
; Line 244
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_WM__RectIsNZ
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@Invalidate
; Line 248
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 16416				; 00004020H
	je	SHORT $LN3@Invalidate
; Line 249
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _pWin$[ebp]
	add	edx, 8
	push	edx
	call	_GUI_MergeRect
	add	esp, 12					; 0000000cH
; Line 250
	jmp	SHORT $LN2@Invalidate
$LN3@Invalidate:
; Line 251
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+12], edx
; Line 252
	movzx	eax, WORD PTR _Flags$[ebp]
	mov	ecx, DWORD PTR _pWin$[ebp]
	or	eax, DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _pWin$[ebp]
	mov	DWORD PTR [edx+40], eax
; Line 253
	mov	ax, WORD PTR _WM__NumInvalidWindows
	add	ax, 1
	mov	WORD PTR _WM__NumInvalidWindows, ax
$LN2@Invalidate:
; Line 267
	cmp	DWORD PTR _WM__pfShowInvalid, 0
	je	SHORT $LN8@Invalidate
; Line 268
	mov	esi, esp
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	DWORD PTR _WM__pfShowInvalid
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@Invalidate:
; Line 272
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Invalidate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@Invalidate:
	DD	1
	DD	$LN11@Invalidate
$LN11@Invalidate:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN10@Invalidate
$LN10@Invalidate:
	DB	114					; 00000072H
	DB	0
__Invalidate1Abs ENDP
_TEXT	ENDS
PUBLIC	_WM__ClipAtParentBorders
EXTRN	_GUI__IntersectRect:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__ClipAtParentBorders
_TEXT	SEGMENT
_pWin$ = -8						; size = 4
_pRect$ = 8						; size = 4
_hWin$ = 12						; size = 4
_WM__ClipAtParentBorders PROC				; COMDAT
; Line 307
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN6@WM__ClipAt:
; Line 316
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 317
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 2
	jne	SHORT $LN3@WM__ClipAt
; Line 318
	xor	eax, eax
	jmp	SHORT $LN7@WM__ClipAt
$LN3@WM__ClipAt:
; Line 320
	mov	eax, DWORD PTR _pWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	call	_GUI__IntersectRect
	add	esp, 8
; Line 321
	mov	eax, DWORD PTR _pWin$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN2@WM__ClipAt
; Line 322
	jmp	SHORT $LN4@WM__ClipAt
$LN2@WM__ClipAt:
; Line 324
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _hWin$[ebp], ecx
; Line 325
	mov	eax, 1
	test	eax, eax
	jne	SHORT $LN6@WM__ClipAt
$LN4@WM__ClipAt:
; Line 330
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	__DesktopHandle2Index
	add	esp, 4
	test	eax, eax
	jge	SHORT $LN1@WM__ClipAt
; Line 331
	xor	eax, eax
	jmp	SHORT $LN7@WM__ClipAt
$LN1@WM__ClipAt:
; Line 333
	mov	eax, 1
$LN7@WM__ClipAt:
; Line 334
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__ClipAtParentBorders ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DesktopHandle2Index
_TEXT	SEGMENT
_hDesktop$ = 8						; size = 4
__DesktopHandle2Index PROC				; COMDAT
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 131
	mov	eax, DWORD PTR _hDesktop$[ebp]
	cmp	eax, DWORD PTR _WM__ahDesktopWin
	jne	SHORT $LN1@DesktopHan
; Line 132
	xor	eax, eax
	jmp	SHORT $LN2@DesktopHan
$LN1@DesktopHan:
; Line 135
	or	eax, -1
$LN2@DesktopHan:
; Line 136
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__DesktopHandle2Index ENDP
_TEXT	ENDS
PUBLIC	_WM__ActivateClipRect
EXTRN	_GUI_Context:BYTE
_BSS	SEGMENT
__ClipContext DB 018H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT _WM__ActivateClipRect
_TEXT	SEGMENT
_pAWin$ = -24						; size = 4
_r$ = -12						; size = 8
_WM__ActivateClipRect PROC				; COMDAT
; Line 340
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 344
	movzx	eax, BYTE PTR _WM_IsActive
	test	eax, eax
	je	SHORT $LN3@WM__Activa
; Line 345
	push	OFFSET __ClipContext+8
	call	__SetClipRectUserIntersect
	add	esp, 4
; Line 346
	jmp	SHORT $LN4@WM__Activa
$LN3@WM__Activa:
; Line 347
	mov	eax, DWORD PTR _GUI_Context+60
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pAWin$[ebp], eax
; Line 348
	mov	eax, DWORD PTR _pAWin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _r$[ebp], ecx
	mov	DWORD PTR _r$[ebp+4], edx
; Line 350
	cmp	DWORD PTR _WM__hATransWindow, 0
	je	SHORT $LN1@WM__Activa
; Line 351
	mov	eax, DWORD PTR _WM__hATransWindow
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	_WM__ClipAtParentBorders
	add	esp, 8
$LN1@WM__Activa:
; Line 355
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__SetClipRectUserIntersect
	add	esp, 4
$LN4@WM__Activa:
; Line 357
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@WM__Activa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@WM__Activa:
	DD	1
	DD	$LN7@WM__Activa
$LN7@WM__Activa:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN6@WM__Activa
$LN6@WM__Activa:
	DB	114					; 00000072H
	DB	0
_WM__ActivateClipRect ENDP
_TEXT	ENDS
PUBLIC	_WM__Client2Screen
EXTRN	_LCD_SetClipRectEx:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __SetClipRectUserIntersect
_TEXT	SEGMENT
_r$9480 = -12						; size = 8
_prSrc$ = 8						; size = 4
__SetClipRectUserIntersect PROC				; COMDAT
; Line 188
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 189
	cmp	DWORD PTR _GUI_Context+56, 0
	jne	SHORT $LN2@SetClipRec
; Line 190
	mov	eax, DWORD PTR _prSrc$[ebp]
	push	eax
	call	_LCD_SetClipRectEx
	add	esp, 4
; Line 191
	jmp	SHORT $LN3@SetClipRec
$LN2@SetClipRec:
; Line 193
	mov	eax, DWORD PTR _GUI_Context+56
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _r$9480[ebp], ecx
	mov	DWORD PTR _r$9480[ebp+4], edx
; Line 194
	lea	eax, DWORD PTR _r$9480[ebp]
	push	eax
	call	__GethDrawWin
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	push	eax
	call	_WM__Client2Screen
	add	esp, 8
; Line 196
	mov	eax, DWORD PTR _prSrc$[ebp]
	push	eax
	lea	ecx, DWORD PTR _r$9480[ebp]
	push	ecx
	call	_GUI__IntersectRect
	add	esp, 8
; Line 197
	lea	eax, DWORD PTR _r$9480[ebp]
	push	eax
	call	_LCD_SetClipRectEx
	add	esp, 4
$LN3@SetClipRec:
; Line 199
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@SetClipRec
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@SetClipRec:
	DD	1
	DD	$LN6@SetClipRec
$LN6@SetClipRec:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN5@SetClipRec
$LN5@SetClipRec:
	DB	114					; 00000072H
	DB	0
__SetClipRectUserIntersect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GethDrawWin
_TEXT	SEGMENT
_h$ = -8						; size = 4
__GethDrawWin PROC					; COMDAT
; Line 170
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 174
	cmp	DWORD PTR _WM__hATransWindow, 0
	je	SHORT $LN2@GethDrawWi
; Line 175
	mov	eax, DWORD PTR _WM__hATransWindow
	mov	DWORD PTR _h$[ebp], eax
; Line 176
	jmp	SHORT $LN1@GethDrawWi
$LN2@GethDrawWi:
; Line 179
	mov	eax, DWORD PTR _GUI_Context+60
	mov	DWORD PTR _h$[ebp], eax
$LN1@GethDrawWi:
; Line 181
	mov	eax, DWORD PTR _h$[ebp]
; Line 182
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GethDrawWin ENDP
_TEXT	ENDS
PUBLIC	_WM__InsertWindowIntoList
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__InsertWindowIntoList
_TEXT	SEGMENT
_pNext$ = -80						; size = 4
_pi$ = -68						; size = 4
_pParent$ = -56						; size = 4
_pWin$ = -44						; size = 4
_hNext$ = -32						; size = 4
_hi$ = -20						; size = 4
_OnTop$ = -8						; size = 4
_hWin$ = 8						; size = 4
_hParent$ = 12						; size = 4
_WM__InsertWindowIntoList PROC				; COMDAT
; Line 368
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 377
	cmp	DWORD PTR _hParent$[ebp], 0
	je	$LN11@WM__Insert
; Line 378
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 379
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 380
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR _hParent$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 381
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pParent$[ebp], eax
; Line 382
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 8
	mov	DWORD PTR _OnTop$[ebp], ecx
; Line 383
	mov	eax, DWORD PTR _pParent$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _hi$[ebp], ecx
; Line 385
	cmp	DWORD PTR _hi$[ebp], 0
	jne	SHORT $LN9@WM__Insert
; Line 386
	mov	eax, DWORD PTR _pParent$[ebp]
	mov	ecx, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 387
	jmp	$LN11@WM__Insert
$LN9@WM__Insert:
; Line 390
	mov	eax, DWORD PTR _hi$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pi$[ebp], eax
; Line 391
	cmp	DWORD PTR _OnTop$[ebp], 0
	jne	SHORT $LN6@WM__Insert
; Line 392
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 8
	je	SHORT $LN6@WM__Insert
; Line 393
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR _hi$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 394
	mov	eax, DWORD PTR _pParent$[ebp]
	mov	ecx, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 395
	jmp	SHORT $LN11@WM__Insert
$LN6@WM__Insert:
; Line 400
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hNext$[ebp], ecx
	cmp	DWORD PTR _hNext$[ebp], 0
	jne	SHORT $LN3@WM__Insert
; Line 401
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 402
	jmp	SHORT $LN11@WM__Insert
$LN3@WM__Insert:
; Line 404
	mov	eax, DWORD PTR _hNext$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pNext$[ebp], eax
; Line 405
	cmp	DWORD PTR _OnTop$[ebp], 0
	jne	SHORT $LN2@WM__Insert
; Line 406
	mov	eax, DWORD PTR _pNext$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 8
	je	SHORT $LN2@WM__Insert
; Line 407
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 408
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR _hNext$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 409
	jmp	SHORT $LN11@WM__Insert
$LN2@WM__Insert:
; Line 412
	mov	eax, DWORD PTR _pNext$[ebp]
	mov	DWORD PTR _pi$[ebp], eax
; Line 413
	mov	eax, 1
	test	eax, eax
	jne	SHORT $LN6@WM__Insert
$LN11@WM__Insert:
; Line 418
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__InsertWindowIntoList ENDP
_TEXT	ENDS
PUBLIC	_WM__RemoveWindowFromList
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__RemoveWindowFromList
_TEXT	SEGMENT
_pi$ = -56						; size = 4
_pParent$ = -44						; size = 4
_pWin$ = -32						; size = 4
_hParent$ = -20						; size = 4
_hi$ = -8						; size = 4
_hWin$ = 8						; size = 4
_WM__RemoveWindowFromList PROC				; COMDAT
; Line 424
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 430
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 431
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _hParent$[ebp], ecx
; Line 432
	cmp	DWORD PTR _hParent$[ebp], 0
	je	SHORT $LN7@WM__Remove
; Line 433
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pParent$[ebp], eax
; Line 434
	mov	eax, DWORD PTR _pParent$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _hi$[ebp], ecx
; Line 435
	mov	eax, DWORD PTR _hi$[ebp]
	cmp	eax, DWORD PTR _hWin$[ebp]
	jne	SHORT $LN3@WM__Remove
; Line 436
	mov	eax, DWORD PTR _hi$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pi$[ebp], eax
; Line 437
	mov	eax, DWORD PTR _pParent$[ebp]
	mov	ecx, DWORD PTR _pi$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+28], edx
; Line 438
	jmp	SHORT $LN7@WM__Remove
$LN3@WM__Remove:
; Line 439
	cmp	DWORD PTR _hi$[ebp], 0
	je	SHORT $LN7@WM__Remove
; Line 440
	mov	eax, DWORD PTR _hi$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pi$[ebp], eax
; Line 441
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	ecx, DWORD PTR _hWin$[ebp]
	jne	SHORT $LN1@WM__Remove
; Line 442
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR _pWin$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
; Line 443
	jmp	SHORT $LN7@WM__Remove
$LN1@WM__Remove:
; Line 445
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hi$[ebp], ecx
; Line 446
	jmp	SHORT $LN3@WM__Remove
$LN7@WM__Remove:
; Line 449
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__RemoveWindowFromList ENDP
_TEXT	ENDS
PUBLIC	_WM__InvalidateRectEx
PUBLIC	_WM__DetachWindow
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__DetachWindow
_TEXT	SEGMENT
_hParent$ = -20						; size = 4
_pWin$ = -8						; size = 4
_hWin$ = 8						; size = 4
_WM__DetachWindow PROC					; COMDAT
; Line 459
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 462
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 463
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _hParent$[ebp], ecx
; Line 464
	cmp	DWORD PTR _hParent$[ebp], 0
	je	SHORT $LN2@WM__Detach
; Line 465
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _pWin$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	push	ecx
	call	_WM__InvalidateRectEx
	add	esp, 12					; 0000000cH
; Line 466
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM__RemoveWindowFromList
	add	esp, 4
; Line 467
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN2@WM__Detach:
; Line 469
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__DetachWindow ENDP
_TEXT	ENDS
EXTRN	_GUI_MoveRect:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__Client2Screen
_TEXT	SEGMENT
_pWin$ = 8						; size = 4
_pRect$ = 12						; size = 4
_WM__Client2Screen PROC					; COMDAT
; Line 491
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 492
	mov	eax, DWORD PTR _pWin$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	push	ecx
	mov	edx, DWORD PTR _pWin$[ebp]
	movsx	eax, WORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	call	_GUI_MoveRect
	add	esp, 12					; 0000000cH
; Line 493
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__Client2Screen ENDP
_TEXT	ENDS
PUBLIC	_WM__IsWindow
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__IsWindow
_TEXT	SEGMENT
_iWin$ = -8						; size = 4
_hWin$ = 8						; size = 4
_WM__IsWindow PROC					; COMDAT
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 501
	mov	eax, DWORD PTR _WM__FirstWin
	mov	DWORD PTR _iWin$[ebp], eax
	jmp	SHORT $LN4@WM__IsWind
$LN3@WM__IsWind:
	mov	eax, DWORD PTR _iWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _iWin$[ebp], ecx
$LN4@WM__IsWind:
	cmp	DWORD PTR _iWin$[ebp], 0
	je	SHORT $LN2@WM__IsWind
; Line 502
	mov	eax, DWORD PTR _iWin$[ebp]
	cmp	eax, DWORD PTR _hWin$[ebp]
	jne	SHORT $LN1@WM__IsWind
; Line 503
	mov	eax, 1
	jmp	SHORT $LN5@WM__IsWind
$LN1@WM__IsWind:
; Line 505
	jmp	SHORT $LN3@WM__IsWind
$LN2@WM__IsWind:
; Line 506
	xor	eax, eax
$LN5@WM__IsWind:
; Line 507
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__IsWindow ENDP
_TEXT	ENDS
PUBLIC	_WM__InvalidateDrawAndDescs
EXTRN	_WM_GetFirstChild:PROC
EXTRN	_GUI_MEMDEV_Delete:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__InvalidateDrawAndDescs
_TEXT	SEGMENT
_Status$ = -44						; size = 4
_hChild$ = -32						; size = 4
_pChild$ = -20						; size = 4
_pWin$ = -8						; size = 4
_hWin$ = 8						; size = 4
_WM__InvalidateDrawAndDescs PROC			; COMDAT
; Line 514
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 520
	cmp	DWORD PTR _hWin$[ebp], 0
	je	$LN7@WM__Invali
; Line 521
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 522
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _Status$[ebp], ecx
; Line 523
	mov	eax, DWORD PTR _Status$[ebp]
	and	eax, 2
	jne	SHORT $LN5@WM__Invali
; Line 524
	jmp	SHORT $LN7@WM__Invali
$LN5@WM__Invali:
; Line 526
	mov	eax, DWORD PTR _pWin$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN4@WM__Invali
; Line 527
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_GUI_MEMDEV_Delete
	add	esp, 4
; Line 528
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	DWORD PTR [eax+36], 0
$LN4@WM__Invali:
; Line 530
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_GetFirstChild
	add	esp, 4
	mov	DWORD PTR _hChild$[ebp], eax
	jmp	SHORT $LN3@WM__Invali
$LN2@WM__Invali:
	mov	eax, DWORD PTR _pChild$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hChild$[ebp], ecx
$LN3@WM__Invali:
	cmp	DWORD PTR _hChild$[ebp], 0
	je	SHORT $LN7@WM__Invali
; Line 531
	mov	eax, DWORD PTR _hChild$[ebp]
	push	eax
	call	_WM__InvalidateDrawAndDescs
	add	esp, 4
; Line 532
	mov	eax, DWORD PTR _hChild$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pChild$[ebp], eax
; Line 533
	jmp	SHORT $LN2@WM__Invali
$LN7@WM__Invali:
; Line 535
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__InvalidateDrawAndDescs ENDP
_TEXT	ENDS
PUBLIC	_WM_InvalidateWindowAndDescsEx
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_InvalidateWindowAndDescsEx
_TEXT	SEGMENT
_Status$ = -60						; size = 4
_hChild$ = -48						; size = 4
_pChild$ = -36						; size = 4
_pWin$ = -24						; size = 4
_Rect$ = -12						; size = 8
_hWin$ = 8						; size = 4
_pInvalidRect$ = 12					; size = 4
_Flags$ = 16						; size = 2
_WM_InvalidateWindowAndDescsEx PROC			; COMDAT
; Line 548
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 555
	cmp	DWORD PTR _hWin$[ebp], 0
	je	$LN7@WM_Invalid
; Line 556
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 557
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _Status$[ebp], ecx
; Line 558
	mov	eax, DWORD PTR _Status$[ebp]
	and	eax, 2
	jne	SHORT $LN5@WM_Invalid
; Line 559
	jmp	SHORT $LN7@WM_Invalid
$LN5@WM_Invalid:
; Line 561
	mov	eax, DWORD PTR _pWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInvalidRect$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Rect$[ebp]
	push	edx
	call	_GUI__IntersectRects
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@WM_Invalid
; Line 562
	jmp	SHORT $LN7@WM_Invalid
$LN4@WM_Invalid:
; Line 564
	movzx	eax, WORD PTR _Flags$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Rect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWin$[ebp]
	push	edx
	call	__Invalidate1Abs
	add	esp, 12					; 0000000cH
; Line 565
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_GetFirstChild
	add	esp, 4
	mov	DWORD PTR _hChild$[ebp], eax
	jmp	SHORT $LN3@WM_Invalid
$LN2@WM_Invalid:
	mov	eax, DWORD PTR _pChild$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hChild$[ebp], ecx
$LN3@WM_Invalid:
	cmp	DWORD PTR _hChild$[ebp], 0
	je	SHORT $LN7@WM_Invalid
; Line 566
	movzx	eax, WORD PTR _Flags$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Rect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hChild$[ebp]
	push	edx
	call	_WM_InvalidateWindowAndDescsEx
	add	esp, 12					; 0000000cH
; Line 567
	mov	eax, DWORD PTR _hChild$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pChild$[ebp], eax
; Line 568
	jmp	SHORT $LN2@WM_Invalid
$LN7@WM_Invalid:
; Line 570
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@WM_Invalid
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@WM_Invalid:
	DD	1
	DD	$LN10@WM_Invalid
$LN10@WM_Invalid:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN9@WM_Invalid
$LN9@WM_Invalid:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_WM_InvalidateWindowAndDescsEx ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _WM__InvalidateRect
_TEXT	SEGMENT
_Status$ = -60						; size = 4
_hi$ = -48						; size = 4
_pi$ = -36						; size = 4
_pParent$ = -24						; size = 4
_Rect$ = -12						; size = 8
_pInvalidRect$ = 8					; size = 4
_hParent$ = 12						; size = 4
_hStop$ = 16						; size = 4
_Flags$ = 20						; size = 2
_WM__InvalidateRect PROC				; COMDAT
; Line 592
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 600
	cmp	DWORD PTR _hParent$[ebp], 0
	jne	SHORT $LN9@WM__Invali@2
; Line 601
	jmp	$LN10@WM__Invali@2
$LN9@WM__Invali@2:
; Line 603
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pParent$[ebp], eax
; Line 604
	mov	eax, DWORD PTR _pParent$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _Status$[ebp], ecx
; Line 605
	mov	eax, DWORD PTR _Status$[ebp]
	and	eax, 2
	jne	SHORT $LN8@WM__Invali@2
; Line 606
	jmp	$LN10@WM__Invali@2
$LN8@WM__Invali@2:
; Line 608
	mov	eax, DWORD PTR _pParent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInvalidRect$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Rect$[ebp]
	push	edx
	call	_GUI__IntersectRects
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@WM__Invali@2
; Line 609
	jmp	$LN10@WM__Invali@2
$LN7@WM__Invali@2:
; Line 613
	mov	eax, DWORD PTR _Status$[ebp]
	and	eax, 2049				; 00000801H
	cmp	eax, 1
	jne	SHORT $LN6@WM__Invali@2
; Line 614
	movzx	eax, WORD PTR _Flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pParent$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _pParent$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	lea	edx, DWORD PTR _Rect$[ebp]
	push	edx
	call	_WM__InvalidateRect
	add	esp, 16					; 00000010H
; Line 615
	jmp	SHORT $LN5@WM__Invali@2
$LN6@WM__Invali@2:
; Line 616
	movzx	eax, WORD PTR _Flags$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Rect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hParent$[ebp]
	push	edx
	call	__Invalidate1Abs
	add	esp, 12					; 0000000cH
$LN5@WM__Invali@2:
; Line 619
	mov	eax, DWORD PTR _pParent$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _hi$[ebp], ecx
	jmp	SHORT $LN4@WM__Invali@2
$LN3@WM__Invali@2:
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hi$[ebp], ecx
$LN4@WM__Invali@2:
	cmp	DWORD PTR _hi$[ebp], 0
	je	SHORT $LN10@WM__Invali@2
; Line 620
	mov	eax, DWORD PTR _hi$[ebp]
	cmp	eax, DWORD PTR _hStop$[ebp]
	jne	SHORT $LN1@WM__Invali@2
; Line 621
	jmp	SHORT $LN10@WM__Invali@2
$LN1@WM__Invali@2:
; Line 623
	movzx	eax, WORD PTR _Flags$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Rect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hi$[ebp]
	push	edx
	call	_WM_InvalidateWindowAndDescsEx
	add	esp, 12					; 0000000cH
; Line 624
	mov	eax, DWORD PTR _hi$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pi$[ebp], eax
; Line 625
	jmp	SHORT $LN3@WM__Invali@2
$LN10@WM__Invali@2:
; Line 626
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@WM__Invali@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@WM__Invali@2:
	DD	1
	DD	$LN13@WM__Invali@2
$LN13@WM__Invali@2:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN12@WM__Invali@2
$LN12@WM__Invali@2:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_WM__InvalidateRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _WM__InvalidateRectEx
_TEXT	SEGMENT
_pInvalidRect$ = 8					; size = 4
_hParent$ = 12						; size = 4
_hStop$ = 16						; size = 4
_WM__InvalidateRectEx PROC				; COMDAT
; Line 632
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 633
	push	32					; 00000020H
	mov	eax, DWORD PTR _hStop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hParent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pInvalidRect$[ebp]
	push	edx
	call	_WM__InvalidateRect
	add	esp, 16					; 00000010H
; Line 634
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__InvalidateRectEx ENDP
_TEXT	ENDS
PUBLIC	_WM__RemoveFromLinList
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__RemoveFromLinList
_TEXT	SEGMENT
_hNext$ = -32						; size = 4
_hiWin$ = -20						; size = 4
_piWin$ = -8						; size = 4
_hWin$ = 8						; size = 4
_WM__RemoveFromLinList PROC				; COMDAT
; Line 640
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 645
	mov	eax, DWORD PTR _WM__FirstWin
	mov	DWORD PTR _hiWin$[ebp], eax
$LN3@WM__Remove@2:
	cmp	DWORD PTR _hiWin$[ebp], 0
	je	SHORT $LN4@WM__Remove@2
; Line 646
	mov	eax, DWORD PTR _hiWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _piWin$[ebp], eax
; Line 647
	mov	eax, DWORD PTR _piWin$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _hNext$[ebp], ecx
; Line 648
	mov	eax, DWORD PTR _hNext$[ebp]
	cmp	eax, DWORD PTR _hWin$[ebp]
	jne	SHORT $LN1@WM__Remove@2
; Line 649
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	ecx, DWORD PTR _piWin$[ebp]
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], edx
; Line 650
	jmp	SHORT $LN4@WM__Remove@2
$LN1@WM__Remove@2:
; Line 652
	mov	eax, DWORD PTR _hNext$[ebp]
	mov	DWORD PTR _hiWin$[ebp], eax
; Line 653
	jmp	SHORT $LN3@WM__Remove@2
$LN4@WM__Remove@2:
; Line 654
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__RemoveFromLinList ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _WM__RectIsNZ
_TEXT	SEGMENT
_pr$ = 8						; size = 4
_WM__RectIsNZ PROC					; COMDAT
; Line 681
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 682
	mov	eax, DWORD PTR _pr$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _pr$[ebp]
	movsx	eax, WORD PTR [edx+4]
	cmp	ecx, eax
	jle	SHORT $LN2@WM__RectIs
; Line 683
	xor	eax, eax
	jmp	SHORT $LN3@WM__RectIs
$LN2@WM__RectIs:
; Line 684
	mov	eax, DWORD PTR _pr$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _pr$[ebp]
	movsx	eax, WORD PTR [edx+6]
	cmp	ecx, eax
	jle	SHORT $LN1@WM__RectIs
; Line 685
	xor	eax, eax
	jmp	SHORT $LN3@WM__RectIs
$LN1@WM__RectIs:
; Line 686
	mov	eax, 1
$LN3@WM__RectIs:
; Line 687
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__RectIsNZ ENDP
_TEXT	ENDS
PUBLIC	_WM_SendMessage
EXTRN	_WM__SendMessage:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_SendMessage
_TEXT	SEGMENT
_hWin$ = 8						; size = 4
_pMsg$ = 12						; size = 4
_WM_SendMessage PROC					; COMDAT
; Line 815
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 816
	cmp	DWORD PTR _hWin$[ebp], 0
	je	SHORT $LN2@WM_SendMes
; Line 818
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	_WM__SendMessage
	add	esp, 8
$LN2@WM_SendMes:
; Line 821
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_SendMessage ENDP
_TEXT	ENDS
PUBLIC	_WM__SendMsgNoData
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__SendMsgNoData
_TEXT	SEGMENT
_Msg$ = -20						; size = 16
_hWin$ = 8						; size = 4
_MsgId$ = 12						; size = 1
_WM__SendMsgNoData PROC					; COMDAT
; Line 827
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 830
	mov	eax, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR _Msg$[ebp+4], eax
; Line 831
	movzx	eax, BYTE PTR _MsgId$[ebp]
	mov	DWORD PTR _Msg$[ebp], eax
; Line 832
	lea	eax, DWORD PTR _Msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	_WM__SendMessage
	add	esp, 8
; Line 833
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@WM__SendMs
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@WM__SendMs:
	DD	1
	DD	$LN4@WM__SendMs
$LN4@WM__SendMs:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN3@WM__SendMs
$LN3@WM__SendMs:
	DB	77					; 0000004dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
_WM__SendMsgNoData ENDP
_TEXT	ENDS
PUBLIC	_WM__GetClientRectWin
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__GetClientRectWin
_TEXT	SEGMENT
_pWin$ = 8						; size = 4
_pRect$ = 12						; size = 4
_WM__GetClientRectWin PROC				; COMDAT
; Line 842
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 843
	xor	eax, eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [ecx+2], ax
	xor	edx, edx
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [eax], dx
; Line 844
	mov	eax, DWORD PTR _pWin$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _pWin$[ebp]
	movsx	eax, WORD PTR [edx]
	sub	ecx, eax
	mov	edx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [edx+4], cx
; Line 845
	mov	eax, DWORD PTR _pWin$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _pWin$[ebp]
	movsx	eax, WORD PTR [edx+2]
	sub	ecx, eax
	mov	edx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [edx+6], cx
; Line 846
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__GetClientRectWin ENDP
_TEXT	ENDS
PUBLIC	_WM_InvalidateRect
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_InvalidateRect
_TEXT	SEGMENT
_Status$ = -52						; size = 4
_pWin$ = -40						; size = 4
_r$ = -28						; size = 8
_rPara$ = -12						; size = 8
_hWin$ = 8						; size = 4
_pRect$ = 12						; size = 4
_WM_InvalidateRect PROC					; COMDAT
; Line 870
	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 876
	cmp	DWORD PTR _hWin$[ebp], 0
	je	$LN8@WM_Invalid@2
; Line 878
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 879
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _Status$[ebp], ecx
; Line 880
	mov	eax, DWORD PTR _Status$[ebp]
	and	eax, 2
	je	$LN8@WM_Invalid@2
; Line 881
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _r$[ebp], ecx
	mov	DWORD PTR _r$[ebp+4], edx
; Line 882
	mov	eax, DWORD PTR _Status$[ebp]
	and	eax, 65536				; 00010000H
	je	SHORT $LN5@WM_Invalid@2
; Line 883
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM__InvalidateDrawAndDescs
	add	esp, 4
$LN5@WM_Invalid@2:
; Line 885
	cmp	DWORD PTR _pRect$[ebp], 0
	je	SHORT $LN4@WM_Invalid@2
; Line 886
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rPara$[ebp], ecx
	mov	DWORD PTR _rPara$[ebp+4], edx
; Line 887
	lea	eax, DWORD PTR _rPara$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	push	ecx
	call	_WM__Client2Screen
	add	esp, 8
; Line 888
	lea	eax, DWORD PTR _rPara$[ebp]
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	_GUI__IntersectRect
	add	esp, 8
$LN4@WM_Invalid@2:
; Line 890
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	_WM__ClipAtParentBorders
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@WM_Invalid@2
; Line 891
	mov	eax, DWORD PTR _Status$[ebp]
	and	eax, 2049				; 00000801H
	cmp	eax, 1
	jne	SHORT $LN2@WM_Invalid@2
; Line 892
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _pWin$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	_WM__InvalidateRectEx
	add	esp, 12					; 0000000cH
; Line 893
	jmp	SHORT $LN8@WM_Invalid@2
$LN2@WM_Invalid@2:
; Line 894
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	_WM__Invalidate1Abs
	add	esp, 8
$LN8@WM_Invalid@2:
; Line 900
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@WM_Invalid@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@WM_Invalid@2:
	DD	2
	DD	$LN12@WM_Invalid@2
$LN12@WM_Invalid@2:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN10@WM_Invalid@2
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN11@WM_Invalid@2
$LN11@WM_Invalid@2:
	DB	114					; 00000072H
	DB	0
$LN10@WM_Invalid@2:
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	0
_WM_InvalidateRect ENDP
_TEXT	ENDS
PUBLIC	_WM_InvalidateWindow
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_InvalidateWindow
_TEXT	SEGMENT
_hWin$ = 8						; size = 4
_WM_InvalidateWindow PROC				; COMDAT
; Line 908
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 909
	push	0
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_InvalidateRect
	add	esp, 8
; Line 910
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_InvalidateWindow ENDP
_TEXT	ENDS
PUBLIC	_WM_SelectWindow
PUBLIC	_WM_CreateWindowAsChild
EXTRN	_WM_BringToBottom:PROC
EXTRN	_GUI_ALLOC_AllocZero:PROC
EXTRN	_GUI_ErrorOut:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_CreateWindowAsChild
_TEXT	SEGMENT
_hWin$ = -32						; size = 4
_pParent$ = -20						; size = 4
_pWin$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_hParent$ = 24						; size = 4
_Style$ = 28						; size = 4
_cb$ = 32						; size = 4
_NumExtraBytes$ = 36					; size = 4
_WM_CreateWindowAsChild PROC				; COMDAT
; Line 924
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 929
	movzx	eax, BYTE PTR _WM__PaintCallbackCnt
	test	eax, eax
	je	SHORT $LN13@WM_CreateW
	push	OFFSET $SG9856
	call	_GUI_ErrorOut
	add	esp, 4
$LN13@WM_CreateW:
; Line 931
	mov	eax, DWORD PTR _Style$[ebp]
	or	eax, DWORD PTR _WM__CreateFlags
	mov	DWORD PTR _Style$[ebp], eax
; Line 933
	cmp	DWORD PTR _hParent$[ebp], 0
	jne	SHORT $LN12@WM_CreateW
; Line 934
	movzx	eax, WORD PTR _WM__NumWindows
	test	eax, eax
	je	SHORT $LN12@WM_CreateW
; Line 936
	mov	eax, DWORD PTR _WM__ahDesktopWin
	mov	DWORD PTR _hParent$[ebp], eax
$LN12@WM_CreateW:
; Line 942
	cmp	DWORD PTR _hParent$[ebp], -1
	jne	SHORT $LN10@WM_CreateW
; Line 943
	mov	DWORD PTR _hParent$[ebp], 0
$LN10@WM_CreateW:
; Line 945
	cmp	DWORD PTR _hParent$[ebp], 0
	je	SHORT $LN9@WM_CreateW
; Line 946
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pParent$[ebp], eax
; Line 947
	mov	eax, DWORD PTR _pParent$[ebp]
	movsx	ecx, WORD PTR [eax]
	add	ecx, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x0$[ebp], ecx
; Line 948
	mov	eax, DWORD PTR _pParent$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	add	ecx, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _y0$[ebp], ecx
; Line 949
	cmp	DWORD PTR _width$[ebp], 0
	jne	SHORT $LN8@WM_CreateW
; Line 950
	mov	eax, DWORD PTR _pParent$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _pParent$[ebp]
	movsx	eax, WORD PTR [edx]
	sub	ecx, eax
	add	ecx, 1
	mov	DWORD PTR _width$[ebp], ecx
$LN8@WM_CreateW:
; Line 952
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN9@WM_CreateW
; Line 953
	mov	eax, DWORD PTR _pParent$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _pParent$[ebp]
	movsx	eax, WORD PTR [edx+2]
	sub	ecx, eax
	add	ecx, 1
	mov	DWORD PTR _height$[ebp], ecx
$LN9@WM_CreateW:
; Line 956
	mov	eax, DWORD PTR _NumExtraBytes$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hWin$[ebp], eax
	cmp	DWORD PTR _hWin$[ebp], 0
	jne	SHORT $LN6@WM_CreateW
; Line 957
	push	OFFSET $SG9868
	call	_GUI_ErrorOut
	add	esp, 4
; Line 958
	jmp	$LN5@WM_CreateW
$LN6@WM_CreateW:
; Line 959
	mov	ax, WORD PTR _WM__NumWindows
	add	ax, 1
	mov	WORD PTR _WM__NumWindows, ax
; Line 960
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 961
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	cx, WORD PTR _x0$[ebp]
	mov	WORD PTR [eax], cx
; Line 962
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	cx, WORD PTR _y0$[ebp]
	mov	WORD PTR [eax+2], cx
; Line 963
	mov	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	WORD PTR [eax+4], dx
; Line 964
	mov	eax, DWORD PTR _height$[ebp]
	mov	ecx, DWORD PTR _y0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	WORD PTR [eax+6], dx
; Line 965
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR _cb$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 979
	mov	eax, DWORD PTR _Style$[ebp]
	and	eax, 81823				; 00013f9fH
	mov	ecx, DWORD PTR _pWin$[ebp]
	or	eax, DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _pWin$[ebp]
	mov	DWORD PTR [edx+40], eax
; Line 981
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	__AddToLinList
	add	esp, 4
; Line 982
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	_WM__InsertWindowIntoList
	add	esp, 8
; Line 984
	mov	eax, DWORD PTR _Style$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN4@WM_CreateW
; Line 985
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_SelectWindow
	add	esp, 4
$LN4@WM_CreateW:
; Line 989
	mov	eax, DWORD PTR _Style$[ebp]
	and	eax, 1
	je	SHORT $LN3@WM_CreateW
; Line 990
	mov	eax, DWORD PTR _WM__TransWindowCnt
	add	eax, 1
	mov	DWORD PTR _WM__TransWindowCnt, eax
$LN3@WM_CreateW:
; Line 993
	mov	eax, DWORD PTR _Style$[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $LN2@WM_CreateW
; Line 994
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_BringToBottom
	add	esp, 4
$LN2@WM_CreateW:
; Line 996
	mov	eax, DWORD PTR _Style$[ebp]
	and	eax, 2
	je	SHORT $LN1@WM_CreateW
; Line 997
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	or	ecx, 2
	mov	edx, DWORD PTR _pWin$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 998
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN1@WM_CreateW:
; Line 1005
	push	1
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM__SendMsgNoData
	add	esp, 8
$LN5@WM_CreateW:
; Line 1008
	mov	eax, DWORD PTR _hWin$[ebp]
; Line 1009
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_CreateWindowAsChild ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __AddToLinList
_TEXT	SEGMENT
_pNew$ = -20						; size = 4
_pFirst$ = -8						; size = 4
_hNew$ = 8						; size = 4
__AddToLinList PROC					; COMDAT
; Line 660
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 664
	cmp	DWORD PTR _WM__FirstWin, 0
	je	SHORT $LN2@AddToLinLi
; Line 665
	mov	eax, DWORD PTR _WM__FirstWin
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pFirst$[ebp], eax
; Line 666
	mov	eax, DWORD PTR _hNew$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pNew$[ebp], eax
; Line 667
	mov	eax, DWORD PTR _pNew$[ebp]
	mov	ecx, DWORD PTR _pFirst$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
; Line 668
	mov	eax, DWORD PTR _pFirst$[ebp]
	mov	ecx, DWORD PTR _hNew$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 669
	jmp	SHORT $LN3@AddToLinLi
$LN2@AddToLinLi:
; Line 670
	mov	eax, DWORD PTR _hNew$[ebp]
	mov	DWORD PTR _WM__FirstWin, eax
$LN3@AddToLinLi:
; Line 672
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__AddToLinList ENDP
_TEXT	ENDS
PUBLIC	_WM_CreateWindow
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_CreateWindow
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_Style$ = 24						; size = 4
_cb$ = 28						; size = 4
_NumExtraBytes$ = 32					; size = 4
_WM_CreateWindow PROC					; COMDAT
; Line 1015
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1016
	mov	eax, DWORD PTR _NumExtraBytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cb$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Style$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	call	_WM_CreateWindowAsChild
	add	esp, 32					; 00000020H
; Line 1017
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_CreateWindow ENDP
_TEXT	ENDS
PUBLIC	_WM_DeleteWindow
EXTRN	_GUI_Warn:PROC
EXTRN	_GUI_ALLOC_Free:PROC
EXTRN	_WM_NotifyParent:PROC
EXTRN	_WM__DeleteAssocTimer:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_DeleteWindow
_TEXT	SEGMENT
_pWin$ = -8						; size = 4
_hWin$ = 8						; size = 4
_WM_DeleteWindow PROC					; COMDAT
; Line 1029
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1032
	cmp	DWORD PTR _hWin$[ebp], 0
	jne	SHORT $LN9@WM_DeleteW
; Line 1033
	jmp	$LN10@WM_DeleteW
$LN9@WM_DeleteW:
; Line 1035
	movzx	eax, BYTE PTR _WM__PaintCallbackCnt
	test	eax, eax
	je	SHORT $LN8@WM_DeleteW
	push	OFFSET $SG9897
	call	_GUI_ErrorOut
	add	esp, 4
$LN8@WM_DeleteW:
; Line 1037
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM__IsWindow
	add	esp, 4
	test	eax, eax
	je	$LN7@WM_DeleteW
; Line 1039
	push	11					; 0000000bH
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM__SendMsgNoData
	add	esp, 8
; Line 1041
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM__DeleteAssocTimer
	add	esp, 4
; Line 1042
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 1045
	mov	eax, DWORD PTR _pWin$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN6@WM_DeleteW
; Line 1046
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_GUI_MEMDEV_Delete
	add	esp, 4
$LN6@WM_DeleteW:
; Line 1049
	call	_ResetNextDrawWin
; Line 1051
	mov	eax, DWORD PTR _WM__ahWinFocus
	cmp	eax, DWORD PTR _hWin$[ebp]
	jne	SHORT $LN5@WM_DeleteW
; Line 1052
	mov	DWORD PTR _WM__ahWinFocus, 0
$LN5@WM_DeleteW:
; Line 1054
	mov	eax, DWORD PTR _WM__ahCapture
	cmp	eax, DWORD PTR _hWin$[ebp]
	jne	SHORT $LN4@WM_DeleteW
; Line 1055
	mov	DWORD PTR _WM__ahCapture, 0
$LN4@WM_DeleteW:
; Line 1058
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	__CheckCriticalHandles
	add	esp, 4
; Line 1060
	push	7
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_NotifyParent
	add	esp, 8
; Line 1062
	mov	eax, DWORD PTR _pWin$[ebp]
	push	eax
	call	__DeleteAllChildren
	add	esp, 4
; Line 1066
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM__DetachWindow
	add	esp, 4
; Line 1068
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM__RemoveFromLinList
	add	esp, 4
; Line 1071
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 1
	je	SHORT $LN3@WM_DeleteW
; Line 1072
	mov	eax, DWORD PTR _WM__TransWindowCnt
	sub	eax, 1
	mov	DWORD PTR _WM__TransWindowCnt, eax
$LN3@WM_DeleteW:
; Line 1076
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32					; 00000020H
	je	SHORT $LN2@WM_DeleteW
; Line 1077
	mov	ax, WORD PTR _WM__NumInvalidWindows
	sub	ax, 1
	mov	WORD PTR _WM__NumInvalidWindows, ax
$LN2@WM_DeleteW:
; Line 1080
	mov	ax, WORD PTR _WM__NumWindows
	sub	ax, 1
	mov	WORD PTR _WM__NumWindows, ax
; Line 1081
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
; Line 1084
	mov	eax, DWORD PTR _WM__ahDesktopWin
	push	eax
	call	_WM_SelectWindow
	add	esp, 4
; Line 1088
	jmp	SHORT $LN10@WM_DeleteW
$LN7@WM_DeleteW:
; Line 1089
	push	OFFSET $SG9906
	call	_GUI_Warn
	add	esp, 4
$LN10@WM_DeleteW:
; Line 1092
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_DeleteWindow ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __CheckCriticalHandles
_TEXT	SEGMENT
_pCH$ = -8						; size = 4
_hWin$ = 8						; size = 4
__CheckCriticalHandles PROC				; COMDAT
; Line 100
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 103
	mov	eax, DWORD PTR _WM__pFirstCriticalHandle
	mov	DWORD PTR _pCH$[ebp], eax
	jmp	SHORT $LN4@CheckCriti
$LN3@CheckCriti:
	mov	eax, DWORD PTR _pCH$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pCH$[ebp], ecx
$LN4@CheckCriti:
	cmp	DWORD PTR _pCH$[ebp], 0
	je	SHORT $LN5@CheckCriti
; Line 104
	mov	eax, DWORD PTR _pCH$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _hWin$[ebp]
	jne	SHORT $LN1@CheckCriti
; Line 105
	mov	eax, DWORD PTR _pCH$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN1@CheckCriti:
; Line 107
	jmp	SHORT $LN3@CheckCriti
$LN5@CheckCriti:
; Line 108
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__CheckCriticalHandles ENDP
_TEXT	ENDS
_BSS	SEGMENT
__NextDrawWin DD 01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT _ResetNextDrawWin
_TEXT	SEGMENT
_ResetNextDrawWin PROC					; COMDAT
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 159
	mov	DWORD PTR __NextDrawWin, 0
; Line 160
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ResetNextDrawWin ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DeleteAllChildren
_TEXT	SEGMENT
_pParent$ = 8						; size = 4
__DeleteAllChildren PROC				; COMDAT
; Line 475
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN3@DeleteAllC:
; Line 477
	mov	eax, DWORD PTR _pParent$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_WM_DeleteWindow
	add	esp, 4
; Line 478
	mov	eax, DWORD PTR _pParent$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN3@DeleteAllC
; Line 479
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DeleteAllChildren ENDP
_TEXT	ENDS
EXTRN	_LCD_SetClipRectMax:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_SelectWindow
_TEXT	SEGMENT
_pObj$ = -20						; size = 4
_hWinPrev$ = -8						; size = 4
_hWin$ = 8						; size = 4
_WM_SelectWindow PROC					; COMDAT
; Line 1137
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1141
	movzx	eax, BYTE PTR _WM__PaintCallbackCnt
	test	eax, eax
	je	SHORT $LN2@WM_SelectW
	push	OFFSET $SG9913
	call	_GUI_ErrorOut
	add	esp, 4
$LN2@WM_SelectW:
; Line 1143
	mov	eax, DWORD PTR _GUI_Context+60
	mov	DWORD PTR _hWinPrev$[ebp], eax
; Line 1144
	cmp	DWORD PTR _hWin$[ebp], 0
	jne	SHORT $LN1@WM_SelectW
; Line 1145
	mov	eax, DWORD PTR _WM__FirstWin
	mov	DWORD PTR _hWin$[ebp], eax
$LN1@WM_SelectW:
; Line 1148
	mov	eax, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR _GUI_Context+60, eax
; Line 1152
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1153
	call	_LCD_SetClipRectMax
; Line 1154
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	DWORD PTR _GUI_Context+64, ecx
; Line 1155
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _GUI_Context+68, ecx
; Line 1157
	mov	eax, DWORD PTR _hWinPrev$[ebp]
; Line 1158
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_SelectWindow ENDP
_TEXT	ENDS
PUBLIC	_WM_GetActiveWindow
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_GetActiveWindow
_TEXT	SEGMENT
_WM_GetActiveWindow PROC				; COMDAT
; Line 1164
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1165
	mov	eax, DWORD PTR _GUI_Context+60
; Line 1166
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_GetActiveWindow ENDP
_TEXT	ENDS
PUBLIC	_WM__GetNextIVR
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__GetNextIVR
_TEXT	SEGMENT
_WM__GetNextIVR PROC					; COMDAT
; Line 1339
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1341
	movzx	eax, BYTE PTR _WM_IsActive
	test	eax, eax
	jne	SHORT $LN3@WM__GetNex
; Line 1342
	xor	eax, eax
	jmp	SHORT $LN4@WM__GetNex
$LN3@WM__GetNex:
; Line 1344
	cmp	DWORD PTR __ClipContext+20, 1
	jle	SHORT $LN2@WM__GetNex
; Line 1345
	mov	eax, DWORD PTR __ClipContext+20
	sub	eax, 1
	mov	DWORD PTR __ClipContext+20, eax
; Line 1346
	xor	eax, eax
	jmp	SHORT $LN4@WM__GetNex
$LN2@WM__GetNex:
; Line 1348
	mov	eax, DWORD PTR __ClipContext+16
	add	eax, 1
	mov	DWORD PTR __ClipContext+16, eax
; Line 1350
	call	__FindNext_IVR
	test	eax, eax
	jne	SHORT $LN1@WM__GetNex
; Line 1351
	mov	eax, DWORD PTR __ClipContext+20
	sub	eax, 1
	mov	DWORD PTR __ClipContext+20, eax
; Line 1352
	xor	eax, eax
	jmp	SHORT $LN4@WM__GetNex
$LN1@WM__GetNex:
; Line 1354
	call	_WM__ActivateClipRect
; Line 1356
	mov	eax, 1
$LN4@WM__GetNex:
; Line 1357
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__GetNextIVR ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __FindNext_IVR
_TEXT	SEGMENT
_pParent$ = -48						; size = 4
_pAWin$ = -36						; size = 4
_r$ = -24						; size = 8
_hParent$ = -8						; size = 4
__FindNext_IVR PROC					; COMDAT
; Line 1199
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1205
	mov	eax, DWORD PTR __ClipContext+8
	mov	DWORD PTR _r$[ebp], eax
	mov	ecx, DWORD PTR __ClipContext+12
	mov	DWORD PTR _r$[ebp+4], ecx
; Line 1212
	cmp	DWORD PTR __ClipContext+16, 0
	jne	SHORT $LN18@FindNext_I
; Line 1213
	mov	ax, WORD PTR __ClipContext
	mov	WORD PTR _r$[ebp], ax
; Line 1214
	mov	ax, WORD PTR __ClipContext+2
	mov	WORD PTR _r$[ebp+2], ax
; Line 1215
	jmp	SHORT $LN17@FindNext_I
$LN18@FindNext_I:
; Line 1216
	movsx	eax, WORD PTR __ClipContext+12
	add	eax, 1
	mov	WORD PTR _r$[ebp], ax
; Line 1217
	mov	ax, WORD PTR __ClipContext+10
	mov	WORD PTR _r$[ebp+2], ax
; Line 1218
	movsx	eax, WORD PTR _r$[ebp]
	movsx	ecx, WORD PTR __ClipContext+4
	cmp	eax, ecx
	jle	SHORT $LN17@FindNext_I
$NextStripe$9928:
; Line 1220
	mov	ax, WORD PTR __ClipContext
	mov	WORD PTR _r$[ebp], ax
; Line 1221
	movsx	eax, WORD PTR __ClipContext+14
	add	eax, 1
	mov	WORD PTR _r$[ebp+2], ax
$LN17@FindNext_I:
; Line 1228
	movsx	eax, WORD PTR _r$[ebp+2]
	movsx	ecx, WORD PTR __ClipContext+6
	cmp	eax, ecx
	jle	SHORT $LN15@FindNext_I
; Line 1229
	xor	eax, eax
	jmp	$LN19@FindNext_I
$LN15@FindNext_I:
; Line 1236
	mov	eax, DWORD PTR _GUI_Context+60
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pAWin$[ebp], eax
; Line 1237
	movsx	eax, WORD PTR _r$[ebp]
	movsx	ecx, WORD PTR __ClipContext
	cmp	eax, ecx
	jne	SHORT $Find_x0$9938
; Line 1238
	mov	ax, WORD PTR __ClipContext+6
	mov	WORD PTR _r$[ebp+6], ax
; Line 1239
	mov	ax, WORD PTR __ClipContext+4
	mov	WORD PTR _r$[ebp+4], ax
; Line 1242
	mov	eax, DWORD PTR _GUI_Context+60
	mov	DWORD PTR _hParent$[ebp], eax
	jmp	SHORT $LN13@FindNext_I
$LN12@FindNext_I:
	mov	eax, DWORD PTR _pParent$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _hParent$[ebp], ecx
$LN13@FindNext_I:
	cmp	DWORD PTR _hParent$[ebp], 0
	je	SHORT $LN11@FindNext_I
; Line 1243
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pParent$[ebp], eax
; Line 1244
	push	0
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pParent$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	__Findy1
	add	esp, 12					; 0000000cH
; Line 1245
	jmp	SHORT $LN12@FindNext_I
$LN11@FindNext_I:
; Line 1247
	push	0
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAWin$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	__Findy1
	add	esp, 12					; 0000000cH
$Find_x0$9938:
; Line 1255
	mov	ax, WORD PTR _r$[ebp]
	mov	WORD PTR _r$[ebp+4], ax
; Line 1265
	mov	eax, DWORD PTR _GUI_Context+60
	mov	DWORD PTR _hParent$[ebp], eax
	jmp	SHORT $LN10@FindNext_I
$LN9@FindNext_I:
; Line 1267
	mov	eax, DWORD PTR _pParent$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _hParent$[ebp], ecx
$LN10@FindNext_I:
	cmp	DWORD PTR _hParent$[ebp], 0
	je	SHORT $LN8@FindNext_I
; Line 1268
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pParent$[ebp], eax
; Line 1269
	push	0
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pParent$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	__Findx0
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@FindNext_I
; Line 1270
	jmp	SHORT $Find_x0$9938
$LN7@FindNext_I:
; Line 1272
	jmp	SHORT $LN9@FindNext_I
$LN8@FindNext_I:
; Line 1274
	push	0
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAWin$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	__Findx0
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN6@FindNext_I
; Line 1275
	jmp	SHORT $Find_x0$9938
$LN6@FindNext_I:
; Line 1282
	mov	ax, WORD PTR __ClipContext+4
	mov	WORD PTR _r$[ebp+4], ax
; Line 1283
	movsx	eax, WORD PTR _r$[ebp+4]
	movsx	ecx, WORD PTR _r$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN5@FindNext_I
; Line 1284
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR __ClipContext+8, eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR __ClipContext+12, ecx
; Line 1285
	jmp	$NextStripe$9928
$LN5@FindNext_I:
; Line 1299
	mov	eax, DWORD PTR _GUI_Context+60
	mov	DWORD PTR _hParent$[ebp], eax
	jmp	SHORT $LN4@FindNext_I
$LN3@FindNext_I:
; Line 1301
	mov	eax, DWORD PTR _pParent$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _hParent$[ebp], ecx
$LN4@FindNext_I:
	cmp	DWORD PTR _hParent$[ebp], 0
	je	SHORT $LN2@FindNext_I
; Line 1302
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pParent$[ebp], eax
; Line 1303
	push	0
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pParent$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	__Findx1
	add	esp, 12					; 0000000cH
; Line 1304
	jmp	SHORT $LN3@FindNext_I
$LN2@FindNext_I:
; Line 1306
	push	0
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAWin$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	__Findx1
	add	esp, 12					; 0000000cH
; Line 1308
	cmp	DWORD PTR __ClipContext+16, 200		; 000000c8H
	jle	SHORT $LN1@FindNext_I
; Line 1309
	xor	eax, eax
	jmp	SHORT $LN19@FindNext_I
$LN1@FindNext_I:
; Line 1311
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR __ClipContext+8, eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR __ClipContext+12, ecx
; Line 1312
	mov	eax, 1
$LN19@FindNext_I:
; Line 1313
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@FindNext_I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN24@FindNext_I:
	DD	1
	DD	$LN23@FindNext_I
$LN23@FindNext_I:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN22@FindNext_I
$LN22@FindNext_I:
	DB	114					; 00000072H
	DB	0
__FindNext_IVR ENDP
_TEXT	ENDS
EXTRN	_GUI_RectsIntersect:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Findy1
_TEXT	SEGMENT
_rWinClipped$ = -60					; size = 8
_Status$ = -44						; size = 4
_hChild$ = -32						; size = 4
_pChild$ = -20						; size = 4
_pWin$ = -8						; size = 4
_iWin$ = 8						; size = 4
_pRect$ = 12						; size = 4
_pParentRect$ = 16					; size = 4
__Findy1 PROC						; COMDAT
; Line 694
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 701
	jmp	SHORT $LN16@Findy1
$LN15@Findy1:
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _iWin$[ebp], ecx
$LN16@Findy1:
	cmp	DWORD PTR _iWin$[ebp], 0
	je	$LN17@Findy1
; Line 702
	mov	eax, DWORD PTR _iWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _Status$[ebp], edx
; Line 704
	mov	eax, DWORD PTR _Status$[ebp]
	and	eax, 2
	je	$LN13@Findy1
; Line 705
	cmp	DWORD PTR _pParentRect$[ebp], 0
	je	SHORT $LN12@Findy1
; Line 706
	mov	eax, DWORD PTR _pParentRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	push	ecx
	lea	edx, DWORD PTR _rWinClipped$[ebp]
	push	edx
	call	_GUI__IntersectRects
	add	esp, 12					; 0000000cH
; Line 707
	jmp	SHORT $LN11@Findy1
$LN12@Findy1:
; Line 708
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rWinClipped$[ebp], ecx
	mov	DWORD PTR _rWinClipped$[ebp+4], edx
$LN11@Findy1:
; Line 711
	lea	eax, DWORD PTR _rWinClipped$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	call	_GUI_RectsIntersect
	add	esp, 8
	test	eax, eax
	je	$LN13@Findy1
; Line 712
	mov	eax, DWORD PTR _Status$[ebp]
	and	eax, 1
	jne	SHORT $LN9@Findy1
; Line 713
	mov	eax, DWORD PTR _pWin$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _pRect$[ebp]
	movsx	eax, WORD PTR [edx+2]
	cmp	ecx, eax
	jle	SHORT $LN8@Findy1
; Line 714
	movsx	eax, WORD PTR _rWinClipped$[ebp+2]
	sub	eax, 1
	mov	ecx, DWORD PTR _pRect$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	cmp	eax, edx
	jge	SHORT $LN7@Findy1
	movsx	eax, WORD PTR _rWinClipped$[ebp+2]
	sub	eax, 1
	mov	ecx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [ecx+6], ax
$LN7@Findy1:
; Line 715
	jmp	SHORT $LN6@Findy1
$LN8@Findy1:
; Line 716
	movsx	eax, WORD PTR _rWinClipped$[ebp+6]
	mov	ecx, DWORD PTR _pRect$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	cmp	eax, edx
	jge	SHORT $LN6@Findy1
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	cx, WORD PTR _rWinClipped$[ebp+6]
	mov	WORD PTR [eax+6], cx
$LN6@Findy1:
; Line 718
	jmp	SHORT $LN13@Findy1
$LN9@Findy1:
; Line 720
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _hChild$[ebp], ecx
	jmp	SHORT $LN3@Findy1
$LN2@Findy1:
	mov	eax, DWORD PTR _pChild$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hChild$[ebp], ecx
$LN3@Findy1:
	cmp	DWORD PTR _hChild$[ebp], 0
	je	SHORT $LN13@Findy1
; Line 721
	mov	eax, DWORD PTR _hChild$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pChild$[ebp], eax
; Line 722
	lea	eax, DWORD PTR _rWinClipped$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hChild$[ebp]
	push	edx
	call	__Findy1
	add	esp, 12					; 0000000cH
; Line 723
	jmp	SHORT $LN2@Findy1
$LN13@Findy1:
; Line 727
	jmp	$LN15@Findy1
$LN17@Findy1:
; Line 728
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@Findy1
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN21@Findy1:
	DD	1
	DD	$LN20@Findy1
$LN20@Findy1:
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN19@Findy1
$LN19@Findy1:
	DB	114					; 00000072H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
__Findy1 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Findx0
_TEXT	SEGMENT
_rWinClipped$ = -72					; size = 8
_r$ = -56						; size = 4
_Status$ = -44						; size = 4
_hChild$ = -32						; size = 4
_pChild$ = -20						; size = 4
_pWin$ = -8						; size = 4
_hWin$ = 8						; size = 4
_pRect$ = 12						; size = 4
_pParentRect$ = 16					; size = 4
__Findx0 PROC						; COMDAT
; Line 734
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 739
	mov	DWORD PTR _r$[ebp], 0
	jmp	SHORT $LN13@Findx0
$LN12@Findx0:
; Line 742
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hWin$[ebp], ecx
$LN13@Findx0:
	cmp	DWORD PTR _hWin$[ebp], 0
	je	$LN11@Findx0
; Line 743
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _Status$[ebp], edx
; Line 744
	mov	eax, DWORD PTR _Status$[ebp]
	and	eax, 2
	je	$LN10@Findx0
; Line 745
	cmp	DWORD PTR _pParentRect$[ebp], 0
	je	SHORT $LN9@Findx0
; Line 746
	mov	eax, DWORD PTR _pParentRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	push	ecx
	lea	edx, DWORD PTR _rWinClipped$[ebp]
	push	edx
	call	_GUI__IntersectRects
	add	esp, 12					; 0000000cH
; Line 747
	jmp	SHORT $LN8@Findx0
$LN9@Findx0:
; Line 748
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rWinClipped$[ebp], ecx
	mov	DWORD PTR _rWinClipped$[ebp+4], edx
$LN8@Findx0:
; Line 751
	lea	eax, DWORD PTR _rWinClipped$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	call	_GUI_RectsIntersect
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@Findx0
; Line 752
	mov	eax, DWORD PTR _Status$[ebp]
	and	eax, 1
	jne	SHORT $LN6@Findx0
; Line 753
	movsx	eax, WORD PTR _rWinClipped$[ebp+4]
	add	eax, 1
	mov	ecx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [ecx], ax
; Line 754
	mov	DWORD PTR _r$[ebp], 1
; Line 755
	jmp	SHORT $LN10@Findx0
$LN6@Findx0:
; Line 757
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _hChild$[ebp], ecx
	jmp	SHORT $LN4@Findx0
$LN3@Findx0:
	mov	eax, DWORD PTR _pChild$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hChild$[ebp], ecx
$LN4@Findx0:
	cmp	DWORD PTR _hChild$[ebp], 0
	je	SHORT $LN10@Findx0
; Line 758
	mov	eax, DWORD PTR _hChild$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pChild$[ebp], eax
; Line 759
	lea	eax, DWORD PTR _rWinClipped$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hChild$[ebp]
	push	edx
	call	__Findx0
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@Findx0
; Line 760
	mov	DWORD PTR _r$[ebp], 1
$LN1@Findx0:
; Line 762
	jmp	SHORT $LN3@Findx0
$LN10@Findx0:
; Line 766
	jmp	$LN12@Findx0
$LN11@Findx0:
; Line 767
	mov	eax, DWORD PTR _r$[ebp]
; Line 768
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@Findx0
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@Findx0:
	DD	1
	DD	$LN17@Findx0
$LN17@Findx0:
	DD	-72					; ffffffb8H
	DD	8
	DD	$LN16@Findx0
$LN16@Findx0:
	DB	114					; 00000072H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
__Findx0 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Findx1
_TEXT	SEGMENT
_rWinClipped$9781 = -60					; size = 8
_Status$ = -44						; size = 4
_hChild$ = -32						; size = 4
_pChild$ = -20						; size = 4
_pWin$ = -8						; size = 4
_hWin$ = 8						; size = 4
_pRect$ = 12						; size = 4
_pParentRect$ = 16					; size = 4
__Findx1 PROC						; COMDAT
; Line 774
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 780
	jmp	SHORT $LN12@Findx1
$LN11@Findx1:
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hWin$[ebp], ecx
$LN12@Findx1:
	cmp	DWORD PTR _hWin$[ebp], 0
	je	$LN13@Findx1
; Line 781
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _Status$[ebp], edx
; Line 782
	mov	eax, DWORD PTR _Status$[ebp]
	and	eax, 2
	je	$LN9@Findx1
; Line 784
	cmp	DWORD PTR _pParentRect$[ebp], 0
	je	SHORT $LN8@Findx1
; Line 785
	mov	eax, DWORD PTR _pParentRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	push	ecx
	lea	edx, DWORD PTR _rWinClipped$9781[ebp]
	push	edx
	call	_GUI__IntersectRects
	add	esp, 12					; 0000000cH
; Line 786
	jmp	SHORT $LN7@Findx1
$LN8@Findx1:
; Line 787
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rWinClipped$9781[ebp], ecx
	mov	DWORD PTR _rWinClipped$9781[ebp+4], edx
$LN7@Findx1:
; Line 790
	lea	eax, DWORD PTR _rWinClipped$9781[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	call	_GUI_RectsIntersect
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@Findx1
; Line 791
	mov	eax, DWORD PTR _Status$[ebp]
	and	eax, 1
	jne	SHORT $LN5@Findx1
; Line 792
	movsx	eax, WORD PTR _rWinClipped$9781[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [ecx+4], ax
; Line 793
	jmp	SHORT $LN9@Findx1
$LN5@Findx1:
; Line 795
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _hChild$[ebp], ecx
	jmp	SHORT $LN3@Findx1
$LN2@Findx1:
	mov	eax, DWORD PTR _pChild$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hChild$[ebp], ecx
$LN3@Findx1:
	cmp	DWORD PTR _hChild$[ebp], 0
	je	SHORT $LN9@Findx1
; Line 796
	mov	eax, DWORD PTR _hChild$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pChild$[ebp], eax
; Line 797
	lea	eax, DWORD PTR _rWinClipped$9781[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hChild$[ebp]
	push	edx
	call	__Findx1
	add	esp, 12					; 0000000cH
; Line 798
	jmp	SHORT $LN2@Findx1
$LN9@Findx1:
; Line 802
	jmp	$LN11@Findx1
$LN13@Findx1:
; Line 803
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@Findx1
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN17@Findx1:
	DD	1
	DD	$LN16@Findx1
$LN16@Findx1:
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN15@Findx1
$LN15@Findx1:
	DB	114					; 00000072H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
__Findx1 ENDP
_TEXT	ENDS
PUBLIC	_WM__InitIVRSearch
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__InitIVRSearch
_TEXT	SEGMENT
_pWin$ = -52						; size = 4
_pAWin$ = -40						; size = 4
_rUser$ = -28						; size = 8
_r$ = -12						; size = 8
_pMaxRect$ = 8						; size = 4
_WM__InitIVRSearch PROC					; COMDAT
; Line 1371
	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1379
	movzx	eax, BYTE PTR _WM_IsActive
	test	eax, eax
	jne	SHORT $LN12@WM__InitIV
; Line 1380
	call	_WM__ActivateClipRect
; Line 1381
	mov	eax, 1
	jmp	$LN13@WM__InitIV
$LN12@WM__InitIV:
; Line 1384
	mov	eax, DWORD PTR __ClipContext+20
	add	eax, 1
	mov	DWORD PTR __ClipContext+20, eax
	cmp	DWORD PTR __ClipContext+20, 1
	jle	SHORT $LN11@WM__InitIV
; Line 1385
	mov	eax, 1
	jmp	$LN13@WM__InitIV
$LN11@WM__InitIV:
; Line 1387
	mov	eax, DWORD PTR _GUI_Context+60
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pAWin$[ebp], eax
; Line 1388
	mov	DWORD PTR __ClipContext+16, -1
; Line 1391
	movzx	eax, BYTE PTR _WM__PaintCallbackCnt
	test	eax, eax
	je	SHORT $LN10@WM__InitIV
; Line 1392
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAWin$[ebp]
	push	ecx
	call	_WM__GetInvalidRectAbs
	add	esp, 8
; Line 1393
	jmp	SHORT $LN9@WM__InitIV
$LN10@WM__InitIV:
; Line 1394
	mov	eax, DWORD PTR _pAWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 2
	je	SHORT $LN8@WM__InitIV
; Line 1395
	mov	eax, DWORD PTR _pAWin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _r$[ebp], ecx
	mov	DWORD PTR _r$[ebp+4], edx
; Line 1396
	jmp	SHORT $LN9@WM__InitIV
$LN8@WM__InitIV:
; Line 1397
	mov	eax, DWORD PTR __ClipContext+20
	sub	eax, 1
	mov	DWORD PTR __ClipContext+20, eax
; Line 1398
	xor	eax, eax
	jmp	$LN13@WM__InitIV
$LN9@WM__InitIV:
; Line 1402
	cmp	DWORD PTR _pMaxRect$[ebp], 0
	je	SHORT $LN6@WM__InitIV
; Line 1403
	mov	eax, DWORD PTR _pMaxRect$[ebp]
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	_GUI__IntersectRect
	add	esp, 8
$LN6@WM__InitIV:
; Line 1406
	cmp	DWORD PTR _GUI_Context+56, 0
	je	SHORT $LN5@WM__InitIV
; Line 1407
	mov	eax, DWORD PTR _pAWin$[ebp]
	mov	DWORD PTR _pWin$[ebp], eax
; Line 1408
	mov	eax, DWORD PTR _GUI_Context+56
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rUser$[ebp], ecx
	mov	DWORD PTR _rUser$[ebp+4], edx
; Line 1410
	cmp	DWORD PTR _WM__hATransWindow, 0
	je	SHORT $LN4@WM__InitIV
; Line 1411
	mov	eax, DWORD PTR _WM__hATransWindow
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
$LN4@WM__InitIV:
; Line 1414
	lea	eax, DWORD PTR _rUser$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	push	ecx
	call	_WM__Client2Screen
	add	esp, 8
; Line 1415
	lea	eax, DWORD PTR _rUser$[ebp]
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	_GUI__IntersectRect
	add	esp, 8
$LN5@WM__InitIV:
; Line 1419
	cmp	DWORD PTR _WM__hATransWindow, 0
	je	SHORT $LN3@WM__InitIV
; Line 1420
	mov	eax, DWORD PTR _WM__hATransWindow
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	_WM__ClipAtParentBorders
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@WM__InitIV
; Line 1421
	mov	eax, DWORD PTR __ClipContext+20
	sub	eax, 1
	mov	DWORD PTR __ClipContext+20, eax
; Line 1422
	xor	eax, eax
	jmp	SHORT $LN13@WM__InitIV
$LN3@WM__InitIV:
; Line 1427
	mov	eax, DWORD PTR _GUI_Context+60
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	_WM__ClipAtParentBorders
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@WM__InitIV
; Line 1428
	mov	eax, DWORD PTR __ClipContext+20
	sub	eax, 1
	mov	DWORD PTR __ClipContext+20, eax
; Line 1429
	xor	eax, eax
	jmp	SHORT $LN13@WM__InitIV
$LN1@WM__InitIV:
; Line 1432
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR __ClipContext, eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR __ClipContext+4, ecx
; Line 1433
	call	_WM__GetNextIVR
$LN13@WM__InitIV:
; Line 1434
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@WM__InitIV
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@WM__InitIV:
	DD	2
	DD	$LN17@WM__InitIV
$LN17@WM__InitIV:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN15@WM__InitIV
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN16@WM__InitIV
$LN16@WM__InitIV:
	DB	114					; 00000072H
	DB	85					; 00000055H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN15@WM__InitIV:
	DB	114					; 00000072H
	DB	0
_WM__InitIVRSearch ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _WM__GetInvalidRectAbs
_TEXT	SEGMENT
_pWin$ = 8						; size = 4
_pRect$ = 12						; size = 4
_WM__GetInvalidRectAbs PROC				; COMDAT
; Line 852
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 853
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
; Line 854
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__GetInvalidRectAbs ENDP
_TEXT	ENDS
PUBLIC	_WM_SetDefault
EXTRN	_GL_SetDefault:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_SetDefault
_TEXT	SEGMENT
_WM_SetDefault PROC					; COMDAT
; Line 1445
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1446
	call	_GL_SetDefault
; Line 1447
	mov	DWORD PTR _GUI_Context+56, 0
; Line 1448
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_SetDefault ENDP
_TEXT	ENDS
PUBLIC	_WM__Paint1
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__Paint1
_TEXT	SEGMENT
_InvalidRect$ = -48					; size = 8
_Status$ = -32						; size = 4
_Msg$ = -20						; size = 16
_hWin$ = 8						; size = 4
_pWin$ = 12						; size = 4
_WM__Paint1 PROC					; COMDAT
; Line 1454
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1459
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _Status$[ebp], ecx
; Line 1461
	mov	eax, DWORD PTR _pWin$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	$LN8@WM__Paint1
	mov	eax, DWORD PTR _Status$[ebp]
	and	eax, 2
	je	$LN8@WM__Paint1
; Line 1462
	mov	al, BYTE PTR _WM__PaintCallbackCnt
	add	al, 1
	mov	BYTE PTR _WM__PaintCallbackCnt, al
; Line 1463
	mov	eax, DWORD PTR _Status$[ebp]
	and	eax, 4096				; 00001000H
	je	SHORT $LN6@WM__Paint1
; Line 1465
	mov	eax, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR _Msg$[ebp+4], eax
; Line 1466
	mov	DWORD PTR _Msg$[ebp], 15		; 0000000fH
; Line 1467
	mov	eax, DWORD PTR _pWin$[ebp]
	add	eax, 8
	mov	DWORD PTR _Msg$[ebp+12], eax
; Line 1468
	call	_WM_SetDefault
; Line 1469
	lea	eax, DWORD PTR _Msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	_WM__SendMessage
	add	esp, 8
; Line 1470
	jmp	SHORT $LN5@WM__Paint1
$LN6@WM__Paint1:
; Line 1473
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _InvalidRect$[ebp], ecx
	mov	DWORD PTR _InvalidRect$[ebp+4], edx
; Line 1474
	lea	eax, DWORD PTR _InvalidRect$[ebp]
	push	eax
	call	_WM__InitIVRSearch
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@WM__Paint1
$LN3@WM__Paint1:
; Line 1475
	mov	eax, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR _Msg$[ebp+4], eax
; Line 1476
	mov	DWORD PTR _Msg$[ebp], 15		; 0000000fH
; Line 1477
	lea	eax, DWORD PTR _InvalidRect$[ebp]
	mov	DWORD PTR _Msg$[ebp+12], eax
; Line 1478
	call	_WM_SetDefault
; Line 1479
	lea	eax, DWORD PTR _Msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	_WM__SendMessage
	add	esp, 8
; Line 1480
	call	_WM__GetNextIVR
	test	eax, eax
	jne	SHORT $LN3@WM__Paint1
$LN5@WM__Paint1:
; Line 1482
	mov	al, BYTE PTR _WM__PaintCallbackCnt
	sub	al, 1
	mov	BYTE PTR _WM__PaintCallbackCnt, al
$LN8@WM__Paint1:
; Line 1484
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@WM__Paint1
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@WM__Paint1:
	DD	2
	DD	$LN12@WM__Paint1
$LN12@WM__Paint1:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN10@WM__Paint1
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN11@WM__Paint1
$LN11@WM__Paint1:
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN10@WM__Paint1:
	DB	77					; 0000004dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
_WM__Paint1 ENDP
_TEXT	ENDS
PUBLIC	_WM__Paint
EXTRN	_GUI_MEMDEV_Draw:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__Paint
_TEXT	SEGMENT
_Flags$ = -32						; size = 4
_Ret$ = -20						; size = 4
_pWin$ = -8						; size = 4
_hWin$ = 8						; size = 4
_WM__Paint PROC						; COMDAT
; Line 1728
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1730
	mov	DWORD PTR _Ret$[ebp], 0
; Line 1735
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 1736
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 16416				; 00004020H
	je	$LN8@WM__Paint
; Line 1737
	mov	eax, DWORD PTR _pWin$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	$LN7@WM__Paint
; Line 1738
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	add	ecx, 8
	push	ecx
	call	_WM__ClipAtParentBorders
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@WM__Paint
; Line 1739
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_SelectWindow
	add	esp, 4
; Line 1741
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 4
	je	SHORT $LN5@WM__Paint
; Line 1742
	mov	eax, DWORD PTR _pWin$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN4@WM__Paint
; Line 1746
	mov	DWORD PTR _Flags$[ebp], 1
; Line 1747
	jmp	SHORT $LN3@WM__Paint
$LN4@WM__Paint:
; Line 1751
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 1
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	mov	DWORD PTR _Flags$[ebp], ecx
$LN3@WM__Paint:
; Line 1753
	mov	eax, DWORD PTR _Flags$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	push	OFFSET __cbPaintMemDev
	mov	edx, DWORD PTR _pWin$[ebp]
	add	edx, 8
	push	edx
	call	_GUI_MEMDEV_Draw
	add	esp, 20					; 00000014H
; Line 1754
	jmp	SHORT $LN7@WM__Paint
$LN5@WM__Paint:
; Line 1757
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM__PaintWinAndOverlays
	add	esp, 4
; Line 1758
	mov	DWORD PTR _Ret$[ebp], 1
$LN7@WM__Paint:
; Line 1765
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 1766
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, -16417				; ffffbfdfH
	mov	edx, DWORD PTR _pWin$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 1767
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 8192				; 00002000H
	je	SHORT $LN1@WM__Paint
; Line 1768
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	or	ecx, 4
	mov	edx, DWORD PTR _pWin$[ebp]
	mov	DWORD PTR [edx+40], ecx
$LN1@WM__Paint:
; Line 1770
	mov	ax, WORD PTR _WM__NumInvalidWindows
	sub	ax, 1
	mov	WORD PTR _WM__NumInvalidWindows, ax
$LN8@WM__Paint:
; Line 1772
	mov	eax, DWORD PTR _Ret$[ebp]
; Line 1773
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__Paint ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _WM__PaintWinAndOverlays
_TEXT	SEGMENT
_pWin$ = -8						; size = 4
_hWin$ = 8						; size = 4
_WM__PaintWinAndOverlays PROC				; COMDAT
; Line 1663
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1666
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 1669
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 2049				; 00000801H
	cmp	ecx, 1
	je	SHORT $LN2@WM__PaintW
; Line 1671
	mov	eax, DWORD PTR _pWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	__Paint1
	add	esp, 8
; Line 1672
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
$LN2@WM__PaintW:
; Line 1675
	cmp	DWORD PTR _WM__TransWindowCnt, 0
	je	SHORT $LN3@WM__PaintW
; Line 1676
	mov	eax, DWORD PTR _pWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	__PaintTransChildren
	add	esp, 8
; Line 1681
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 1682
	mov	eax, DWORD PTR _pWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	__PaintTransTopSiblings
	add	esp, 8
$LN3@WM__PaintW:
; Line 1685
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__PaintWinAndOverlays ENDP
_TEXT	ENDS
EXTRN	_GUI_MEMDEV_Paint1Static:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Paint1
_TEXT	SEGMENT
tv67 = -208						; size = 4
_pfPaint1Func$ = -8					; size = 4
_hWin$ = 8						; size = 4
_pWin$ = 12						; size = 4
__Paint1 PROC						; COMDAT
; Line 1490
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1494
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN3@Paint1
	mov	DWORD PTR tv67[ebp], OFFSET _GUI_MEMDEV_Paint1Static
	jmp	SHORT $LN4@Paint1
$LN3@Paint1:
	mov	DWORD PTR tv67[ebp], OFFSET _WM__Paint1
$LN4@Paint1:
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _pfPaint1Func$[ebp], edx
; Line 1498
	mov	esi, esp
	mov	eax, DWORD PTR _pWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	DWORD PTR _pfPaint1Func$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1499
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Paint1 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __PaintTransChildren
_TEXT	SEGMENT
_InvalidRectPrev$10035 = -36				; size = 8
_pChild$ = -20						; size = 4
_hChild$ = -8						; size = 4
_hWin$ = 8						; size = 4
_pWin$ = 12						; size = 4
__PaintTransChildren PROC				; COMDAT
; Line 1563
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1567
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 2
	je	$LN8@PaintTrans
; Line 1568
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _hChild$[ebp], ecx
	jmp	SHORT $LN6@PaintTrans
$LN5@PaintTrans:
	mov	eax, DWORD PTR _pChild$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hChild$[ebp], ecx
$LN6@PaintTrans:
	cmp	DWORD PTR _hChild$[ebp], 0
	je	$LN8@PaintTrans
; Line 1569
	mov	eax, DWORD PTR _hChild$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pChild$[ebp], eax
; Line 1571
	mov	eax, DWORD PTR _pChild$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 3
	cmp	ecx, 3
	jne	$LN3@PaintTrans
; Line 1573
	mov	eax, DWORD PTR _pWin$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _pChild$[ebp]
	push	ecx
	call	_GUI_RectsIntersect
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@PaintTrans
; Line 1575
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _InvalidRectPrev$10035[ebp], ecx
	mov	DWORD PTR _InvalidRectPrev$10035[ebp+4], edx
; Line 1576
	mov	eax, DWORD PTR _pChild$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hChild$[ebp]
	push	ecx
	call	__Paint1Trans
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@PaintTrans
; Line 1581
	mov	eax, DWORD PTR _hChild$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pChild$[ebp], eax
; Line 1582
	mov	eax, DWORD PTR _pChild$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hChild$[ebp]
	push	ecx
	call	__PaintTransChildren
	add	esp, 8
; Line 1587
	mov	eax, DWORD PTR _hChild$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pChild$[ebp], eax
; Line 1588
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
$LN1@PaintTrans:
; Line 1590
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR _InvalidRectPrev$10035[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _InvalidRectPrev$10035[ebp+4]
	mov	DWORD PTR [eax+12], edx
$LN3@PaintTrans:
; Line 1593
	jmp	$LN5@PaintTrans
$LN8@PaintTrans:
; Line 1595
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@PaintTrans
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@PaintTrans:
	DD	1
	DD	$LN11@PaintTrans
$LN11@PaintTrans:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN10@PaintTrans
$LN10@PaintTrans:
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	0
__PaintTransChildren ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Paint1Trans
_TEXT	SEGMENT
_pAWin$ = -32						; size = 4
_yPrev$ = -20						; size = 4
_xPrev$ = -8						; size = 4
_hWin$ = 8						; size = 4
_pWin$ = 12						; size = 4
__Paint1Trans PROC					; COMDAT
; Line 1524
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1528
	mov	eax, DWORD PTR _GUI_Context+60
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pAWin$[ebp], eax
; Line 1530
	mov	eax, DWORD PTR _pWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAWin$[ebp]
	add	ecx, 8
	push	ecx
	call	_GUI_RectsIntersect
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@Paint1Tran
; Line 1532
	mov	eax, DWORD PTR _GUI_Context+64
	mov	DWORD PTR _xPrev$[ebp], eax
; Line 1533
	mov	eax, DWORD PTR _GUI_Context+68
	mov	DWORD PTR _yPrev$[ebp], eax
; Line 1535
	mov	eax, DWORD PTR _pAWin$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pWin$[ebp]
	add	edx, 8
	push	edx
	call	_GUI__IntersectRects
	add	esp, 12					; 0000000cH
; Line 1536
	mov	eax, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR _WM__hATransWindow, eax
; Line 1537
	mov	eax, DWORD PTR _pWin$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	DWORD PTR _GUI_Context+64, ecx
; Line 1538
	mov	eax, DWORD PTR _pWin$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _GUI_Context+68, ecx
; Line 1540
	mov	eax, DWORD PTR _pWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	__Paint1
	add	esp, 8
; Line 1542
	mov	DWORD PTR _WM__hATransWindow, 0
; Line 1543
	mov	eax, DWORD PTR _xPrev$[ebp]
	mov	DWORD PTR _GUI_Context+64, eax
; Line 1544
	mov	eax, DWORD PTR _yPrev$[ebp]
	mov	DWORD PTR _GUI_Context+68, eax
; Line 1545
	mov	eax, 1
	jmp	SHORT $LN2@Paint1Tran
$LN1@Paint1Tran:
; Line 1547
	xor	eax, eax
$LN2@Paint1Tran:
; Line 1548
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Paint1Trans ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __PaintTransTopSiblings
_TEXT	SEGMENT
_pParent$ = -20						; size = 4
_hParent$ = -8						; size = 4
_hWin$ = 8						; size = 4
_pWin$ = 12						; size = 4
__PaintTransTopSiblings PROC				; COMDAT
; Line 1610
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1614
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _hParent$[ebp], ecx
; Line 1615
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hWin$[ebp], ecx
$LN6@PaintTrans@2:
; Line 1616
	cmp	DWORD PTR _hParent$[ebp], 0
	je	$LN7@PaintTrans@2
	jmp	SHORT $LN4@PaintTrans@2
$LN3@PaintTrans@2:
; Line 1617
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hWin$[ebp], ecx
$LN4@PaintTrans@2:
	cmp	DWORD PTR _hWin$[ebp], 0
	je	SHORT $LN2@PaintTrans@2
; Line 1618
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 1620
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 3
	cmp	ecx, 3
	jne	SHORT $LN1@PaintTrans@2
; Line 1621
	mov	eax, DWORD PTR _pWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	__Paint1Trans
	add	esp, 8
; Line 1626
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
$LN1@PaintTrans@2:
; Line 1629
	mov	eax, DWORD PTR _pWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	__PaintTransChildren
	add	esp, 8
; Line 1634
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 1635
	jmp	SHORT $LN3@PaintTrans@2
$LN2@PaintTrans@2:
; Line 1636
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pParent$[ebp], eax
; Line 1637
	mov	eax, DWORD PTR _pParent$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hWin$[ebp], ecx
; Line 1638
	mov	eax, DWORD PTR _pParent$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _hParent$[ebp], ecx
; Line 1639
	jmp	$LN6@PaintTrans@2
$LN7@PaintTrans@2:
; Line 1640
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__PaintTransTopSiblings ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __cbPaintMemDev
_TEXT	SEGMENT
_pWin$ = -24						; size = 4
_Rect$ = -12						; size = 8
_p$ = 8							; size = 4
__cbPaintMemDev PROC					; COMDAT
; Line 1700
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1704
	mov	eax, DWORD PTR _GUI_Context+60
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 1705
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _Rect$[ebp], ecx
	mov	DWORD PTR _Rect$[ebp+4], edx
; Line 1706
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR _GUI_Context+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _GUI_Context+12
	mov	DWORD PTR [eax+12], edx
; Line 1707
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_WM__PaintWinAndOverlays
	add	esp, 4
; Line 1712
	mov	eax, DWORD PTR _GUI_Context+60
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 1713
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR _Rect$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _Rect$[ebp+4]
	mov	DWORD PTR [eax+12], edx
; Line 1714
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@cbPaintMem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@cbPaintMem:
	DD	1
	DD	$LN4@cbPaintMem
$LN4@cbPaintMem:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@cbPaintMem
$LN3@cbPaintMem:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
__cbPaintMemDev ENDP
_TEXT	ENDS
PUBLIC	_WM__DeleteSecure
_BSS	SEGMENT
__DeleteWindows DD 01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT _WM__DeleteSecure
_TEXT	SEGMENT
_pWin$ = -8						; size = 4
_hWin$ = 8						; size = 4
_WM__DeleteSecure PROC					; COMDAT
; Line 1811
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1814
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 1815
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	or	ecx, 32768				; 00008000H
	mov	edx, DWORD PTR _pWin$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 1816
	mov	DWORD PTR __DeleteWindows, 1
; Line 1817
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__DeleteSecure ENDP
_TEXT	ENDS
PUBLIC	_WM_Exec1
EXTRN	_WM_PollSimMsg:PROC
EXTRN	_GUI_PollKeyMsg:PROC
EXTRN	_WM_pfHandlePID:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_Exec1
_TEXT	SEGMENT
_WM_Exec1 PROC						; COMDAT
; Line 1846
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1848
	cmp	DWORD PTR __DeleteWindows, 0
	je	SHORT $LN8@WM_Exec1
; Line 1849
	call	__DeleteDelayed
$LN8@WM_Exec1:
; Line 1852
	cmp	DWORD PTR _WM_pfPollPID, 0
	je	SHORT $LN7@WM_Exec1
; Line 1853
	mov	esi, esp
	call	DWORD PTR _WM_pfPollPID
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@WM_Exec1:
; Line 1855
	cmp	DWORD PTR _WM_pfHandlePID, 0
	je	SHORT $LN6@WM_Exec1
; Line 1856
	mov	esi, esp
	call	DWORD PTR _WM_pfHandlePID
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN6@WM_Exec1
; Line 1857
	mov	eax, 1
	jmp	SHORT $LN9@WM_Exec1
$LN6@WM_Exec1:
; Line 1859
	movzx	eax, BYTE PTR _WM_IsActive
	test	eax, eax
	je	SHORT $LN4@WM_Exec1
; Line 1860
	call	_GUI_PollKeyMsg
	test	eax, eax
	je	SHORT $LN4@WM_Exec1
; Line 1861
	mov	eax, 1
	jmp	SHORT $LN9@WM_Exec1
$LN4@WM_Exec1:
; Line 1865
	call	_WM_PollSimMsg
	test	eax, eax
	je	SHORT $LN2@WM_Exec1
; Line 1866
	mov	eax, 1
	jmp	SHORT $LN9@WM_Exec1
$LN2@WM_Exec1:
; Line 1869
	movzx	eax, BYTE PTR _WM_IsActive
	test	eax, eax
	je	SHORT $LN1@WM_Exec1
	movzx	eax, WORD PTR _WM__NumInvalidWindows
	test	eax, eax
	je	SHORT $LN1@WM_Exec1
; Line 1871
	call	__DrawNext
; Line 1873
	mov	eax, 1
	jmp	SHORT $LN9@WM_Exec1
$LN1@WM_Exec1:
; Line 1875
	xor	eax, eax
$LN9@WM_Exec1:
; Line 1876
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_Exec1 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_GUI_RestoreContext:PROC
EXTRN	_GUI_SetBkColor:PROC
EXTRN	_GUI_SetColor:PROC
EXTRN	_GUI_SaveContext_W:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawNext
_TEXT	SEGMENT
tv65 = -364						; size = 4
_BkColorOld$ = -164					; size = 4
_ColorOld$ = -152					; size = 4
_ContextOld$ = -140					; size = 96
_iWin$ = -36						; size = 4
_UpdateRem$ = -24					; size = 4
_pWin$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__DrawNext PROC						; COMDAT
; Line 1779
	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1781
	mov	DWORD PTR _UpdateRem$[ebp], 1
; Line 1786
	cmp	DWORD PTR __NextDrawWin, 0
	jne	SHORT $LN6@DrawNext
	mov	eax, DWORD PTR _WM__FirstWin
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN7@DrawNext
$LN6@DrawNext:
	mov	ecx, DWORD PTR __NextDrawWin
	mov	DWORD PTR tv65[ebp], ecx
$LN7@DrawNext:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR _iWin$[ebp], edx
; Line 1788
	lea	eax, DWORD PTR _ContextOld$[ebp]
	push	eax
	call	_GUI_SaveContext_W
	add	esp, 4
; Line 1789
	mov	eax, DWORD PTR _GUI_Context+48
	mov	DWORD PTR _ColorOld$[ebp], eax
; Line 1790
	mov	eax, DWORD PTR _GUI_Context+52
	mov	DWORD PTR _BkColorOld$[ebp], eax
$LN3@DrawNext:
; Line 1792
	cmp	DWORD PTR _iWin$[ebp], 0
	je	SHORT $LN2@DrawNext
	cmp	DWORD PTR _UpdateRem$[ebp], 0
	je	SHORT $LN2@DrawNext
; Line 1793
	mov	eax, DWORD PTR _iWin$[ebp]
	push	eax
	call	_WM__Paint
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@DrawNext
; Line 1794
	mov	eax, DWORD PTR _UpdateRem$[ebp]
	sub	eax, 1
	mov	DWORD PTR _UpdateRem$[ebp], eax
$LN1@DrawNext:
; Line 1796
	mov	eax, DWORD PTR _iWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 1797
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _iWin$[ebp], ecx
; Line 1798
	jmp	SHORT $LN3@DrawNext
$LN2@DrawNext:
; Line 1799
	mov	eax, DWORD PTR _iWin$[ebp]
	mov	DWORD PTR __NextDrawWin, eax
; Line 1801
	mov	eax, DWORD PTR _ColorOld$[ebp]
	push	eax
	call	_GUI_SetColor
	add	esp, 4
; Line 1802
	mov	eax, DWORD PTR _BkColorOld$[ebp]
	push	eax
	call	_GUI_SetBkColor
	add	esp, 4
; Line 1804
	lea	eax, DWORD PTR _ContextOld$[ebp]
	push	eax
	call	_GUI_RestoreContext
	add	esp, 4
; Line 1805
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@DrawNext
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@DrawNext:
	DD	1
	DD	$LN9@DrawNext
$LN9@DrawNext:
	DD	-140					; ffffff74H
	DD	96					; 00000060H
	DD	$LN8@DrawNext
$LN8@DrawNext:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	79					; 0000004fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
__DrawNext ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DeleteDelayed
_TEXT	SEGMENT
_pWin$ = -32						; size = 4
_hWinDelete$ = -20					; size = 4
_hWin$ = -8						; size = 4
__DeleteDelayed PROC					; COMDAT
; Line 1823
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1828
	mov	eax, DWORD PTR _WM__FirstWin
	mov	DWORD PTR _hWin$[ebp], eax
$LN4@DeleteDela:
	cmp	DWORD PTR _hWin$[ebp], 0
	je	SHORT $LN3@DeleteDela
; Line 1829
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 1830
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@DeleteDela
; Line 1831
	mov	eax, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR _hWinDelete$[ebp], eax
; Line 1832
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _hWin$[ebp], ecx
; Line 1833
	mov	eax, DWORD PTR _hWinDelete$[ebp]
	push	eax
	call	_WM_DeleteWindow
	add	esp, 4
; Line 1834
	jmp	SHORT $LN1@DeleteDela
$LN2@DeleteDela:
; Line 1835
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _hWin$[ebp], ecx
$LN1@DeleteDela:
; Line 1837
	jmp	SHORT $LN4@DeleteDela
$LN3@DeleteDela:
; Line 1838
	mov	DWORD PTR __DeleteWindows, 0
; Line 1840
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DeleteDelayed ENDP
_TEXT	ENDS
PUBLIC	_WM_Exec
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_Exec
_TEXT	SEGMENT
_r$ = -8						; size = 4
_WM_Exec PROC						; COMDAT
; Line 1882
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1883
	mov	DWORD PTR _r$[ebp], 0
$LN2@WM_Exec:
; Line 1884
	call	_WM_Exec1
	test	eax, eax
	je	SHORT $LN1@WM_Exec
; Line 1885
	mov	DWORD PTR _r$[ebp], 1
; Line 1886
	jmp	SHORT $LN2@WM_Exec
$LN1@WM_Exec:
; Line 1887
	mov	eax, DWORD PTR _r$[ebp]
; Line 1888
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_Exec ENDP
_TEXT	ENDS
PUBLIC	_WM_Activate
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_Activate
_TEXT	SEGMENT
_WM_Activate PROC					; COMDAT
; Line 1929
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1930
	mov	BYTE PTR _WM_IsActive, 1
; Line 1931
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_Activate ENDP
_TEXT	ENDS
PUBLIC	_WM_Deactivate
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_Deactivate
_TEXT	SEGMENT
_WM_Deactivate PROC					; COMDAT
; Line 1937
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1938
	mov	BYTE PTR _WM_IsActive, 0
; Line 1940
	call	_LCD_SetClipRectMax
; Line 1942
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_Deactivate ENDP
_TEXT	ENDS
PUBLIC	_WM_DefaultProc
EXTRN	_WM_SendToParent:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_DefaultProc
_TEXT	SEGMENT
tv68 = -232						; size = 4
_pWin$ = -32						; size = 4
_p$ = -20						; size = 4
_hWin$ = -8						; size = 4
_pMsg$ = 8						; size = 4
_WM_DefaultProc PROC					; COMDAT
; Line 1954
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1959
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _hWin$[ebp], ecx
; Line 1960
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1961
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 1963
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv68[ebp], ecx
	mov	edx, DWORD PTR tv68[ebp]
	sub	edx, 14					; 0000000eH
	mov	DWORD PTR tv68[ebp], edx
	cmp	DWORD PTR tv68[ebp], 26			; 0000001aH
	ja	SHORT $LN6@WM_Default
	mov	eax, DWORD PTR tv68[ebp]
	movzx	ecx, BYTE PTR $LN10@WM_Default[eax]
	jmp	DWORD PTR $LN11@WM_Default[ecx*4]
$LN5@WM_Default:
; Line 1965
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	push	ecx
	call	_WM__GetClientRectWin
	add	esp, 8
; Line 1966
	jmp	SHORT $LN6@WM_Default
$LN4@WM_Default:
; Line 1968
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1969
	jmp	SHORT $LN8@WM_Default
$LN3@WM_Default:
; Line 1971
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	_WM_SendToParent
	add	esp, 8
; Line 1972
	jmp	SHORT $LN8@WM_Default
$LN2@WM_Default:
; Line 1974
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	DWORD PTR [eax+12], 268435455		; 0fffffffH
; Line 1975
	jmp	SHORT $LN8@WM_Default
$LN1@WM_Default:
; Line 1977
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 1978
	jmp	SHORT $LN8@WM_Default
$LN6@WM_Default:
; Line 1981
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 1982
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN8@WM_Default:
; Line 1983
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@WM_Default:
	DD	$LN3@WM_Default
	DD	$LN5@WM_Default
	DD	$LN4@WM_Default
	DD	$LN2@WM_Default
	DD	$LN1@WM_Default
	DD	$LN6@WM_Default
$LN10@WM_Default:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	2
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
_WM_DefaultProc ENDP
_TEXT	ENDS
PUBLIC	_WM_Init
EXTRN	_WM__aCHWinMouseOver:QWORD
EXTRN	_WM__aCHWinLast:QWORD
EXTRN	_WM__AddCriticalHandle:PROC
EXTRN	_WM__aCHWinModal:QWORD
_BSS	SEGMENT
__IsInited DB	01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT _WM_Init
_TEXT	SEGMENT
_i$ = -8						; size = 4
_WM_Init PROC						; COMDAT
; Line 1989
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1992
	movzx	eax, BYTE PTR __IsInited
	test	eax, eax
	jne	$LN5@WM_Init
; Line 1993
	mov	DWORD PTR _WM__FirstWin, 0
	mov	eax, DWORD PTR _WM__FirstWin
	mov	DWORD PTR __NextDrawWin, eax
; Line 1994
	mov	DWORD PTR _GUI_Context+56, 0
; Line 1995
	xor	eax, eax
	mov	WORD PTR _WM__NumInvalidWindows, ax
	mov	cx, WORD PTR _WM__NumInvalidWindows
	mov	WORD PTR _WM__NumWindows, cx
; Line 2000
	push	0
	push	OFFSET _cbBackWin
	push	2
	push	4095					; 00000fffH
	push	4095					; 00000fffH
	push	0
	push	0
	call	_WM_CreateWindow
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _WM__ahDesktopWin, eax
; Line 2001
	mov	DWORD PTR _WM__aBkColor, 268435455	; 0fffffffH
; Line 2002
	mov	eax, DWORD PTR _WM__ahDesktopWin
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 2015
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@WM_Init
$LN2@WM_Init:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@WM_Init:
	cmp	DWORD PTR _i$[ebp], 1
	jge	SHORT $LN1@WM_Init
; Line 2016
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR _WM__aCHWinModal[eax*8]
	push	ecx
	call	_WM__AddCriticalHandle
	add	esp, 4
; Line 2017
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR _WM__aCHWinLast[eax*8]
	push	ecx
	call	_WM__AddCriticalHandle
	add	esp, 4
; Line 2019
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR _WM__aCHWinMouseOver[eax*8]
	push	ecx
	call	_WM__AddCriticalHandle
	add	esp, 4
; Line 2021
	jmp	SHORT $LN2@WM_Init
$LN1@WM_Init:
; Line 2023
	mov	eax, DWORD PTR _WM__ahDesktopWin
	push	eax
	call	_WM_SelectWindow
	add	esp, 4
; Line 2024
	call	_WM_Activate
; Line 2025
	mov	BYTE PTR __IsInited, 1
$LN5@WM_Init:
; Line 2027
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_Init ENDP
_TEXT	ENDS
EXTRN	_GUI_Clear:PROC
EXTRN	_GUI_StoreKey:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _cbBackWin
_TEXT	SEGMENT
tv64 = -220						; size = 4
_LayerIndex$10154 = -20					; size = 4
_pKeyInfo$ = -8						; size = 4
_pMsg$ = 8						; size = 4
_cbBackWin PROC						; COMDAT
; Line 1898
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1900
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 14			; 0000000eH
	je	SHORT $LN5@cbBackWin
	cmp	DWORD PTR tv64[ebp], 15			; 0000000fH
	je	SHORT $LN3@cbBackWin
	jmp	SHORT $LN1@cbBackWin
$LN5@cbBackWin:
; Line 1902
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pKeyInfo$[ebp], ecx
; Line 1903
	mov	eax, DWORD PTR _pKeyInfo$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN4@cbBackWin
; Line 1904
	mov	eax, DWORD PTR _pKeyInfo$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_GUI_StoreKey
	add	esp, 4
$LN4@cbBackWin:
; Line 1906
	jmp	SHORT $LN8@cbBackWin
$LN3@cbBackWin:
; Line 1913
	mov	DWORD PTR _LayerIndex$10154[ebp], 0
; Line 1915
	mov	eax, DWORD PTR _LayerIndex$10154[ebp]
	cmp	DWORD PTR _WM__aBkColor[eax*4], 268435455 ; 0fffffffH
	je	SHORT $LN1@cbBackWin
; Line 1916
	mov	eax, DWORD PTR _LayerIndex$10154[ebp]
	mov	ecx, DWORD PTR _WM__aBkColor[eax*4]
	push	ecx
	call	_GUI_SetBkColor
	add	esp, 4
; Line 1917
	call	_GUI_Clear
$LN1@cbBackWin:
; Line 1921
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN8@cbBackWin:
; Line 1923
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbBackWin ENDP
_TEXT	ENDS
END
