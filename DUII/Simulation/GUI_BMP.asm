; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_BMP.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
__NextPixel_API DD FLAT:__NextPixel_Start
	DD	FLAT:__NextPixel_SetPixel
	DD	FLAT:__NextPixel_NextLine
	DD	FLAT:__NextPixel_End
_DATA	ENDS
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	_GUI_ALLOC_AllocNoInit:PROC
EXTRN	_GUI_ALLOC_GetMaxSize:PROC
EXTRN	_GUI_GetBitsPerPixelEx:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
__Context DB	030H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_bmp.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __NextPixel_Start
_TEXT	SEGMENT
tv74 = -256						; size = 4
tv70 = -256						; size = 4
_BytesPerLineDest$ = -56				; size = 4
_BitsPerPixel$ = -44					; size = 4
_BytesPerPixel$ = -32					; size = 4
_BufferSize$ = -20					; size = 4
_BufferSizeAvailable$ = -8				; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
__NextPixel_Start PROC					; COMDAT
; Line 95
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 101
	mov	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _y0$[ebp], eax
; Line 102
	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _x0$[ebp]
	add	eax, 1
	mov	DWORD PTR __Context+12, eax
; Line 107
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_GUI_GetBitsPerPixelEx
	add	esp, 4
	mov	DWORD PTR _BitsPerPixel$[ebp], eax
; Line 108
	cmp	DWORD PTR _BitsPerPixel$[ebp], 24	; 00000018H
	jge	SHORT $LN5@NextPixel_
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN6@NextPixel_
$LN5@NextPixel_:
	mov	DWORD PTR tv70[ebp], 32			; 00000020H
$LN6@NextPixel_:
	mov	ecx, DWORD PTR tv70[ebp]
	mov	DWORD PTR __Context+32, ecx
; Line 109
	cmp	DWORD PTR __Context+32, 8
	jg	SHORT $LN7@NextPixel_
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN8@NextPixel_
$LN7@NextPixel_:
	xor	eax, eax
	cmp	DWORD PTR __Context+32, 16		; 00000010H
	setg	al
	lea	eax, DWORD PTR [eax+eax+2]
	mov	DWORD PTR tv74[ebp], eax
$LN8@NextPixel_:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR _BytesPerPixel$[ebp], ecx
; Line 110
	mov	eax, DWORD PTR _BytesPerPixel$[ebp]
	imul	eax, DWORD PTR __Context+12
	mov	DWORD PTR _BytesPerLineDest$[ebp], eax
; Line 111
	call	_GUI_ALLOC_GetMaxSize
	mov	DWORD PTR _BufferSizeAvailable$[ebp], eax
; Line 112
	mov	eax, DWORD PTR _BufferSizeAvailable$[ebp]
	cmp	eax, DWORD PTR _BytesPerLineDest$[ebp]
	jae	SHORT $LN2@NextPixel_
; Line 113
	mov	eax, DWORD PTR _BufferSizeAvailable$[ebp]
	xor	edx, edx
	div	DWORD PTR _BytesPerPixel$[ebp]
	imul	eax, DWORD PTR _BytesPerPixel$[ebp]
	mov	DWORD PTR _BufferSize$[ebp], eax
; Line 114
	jmp	SHORT $LN1@NextPixel_
$LN2@NextPixel_:
; Line 115
	mov	eax, DWORD PTR _BytesPerLineDest$[ebp]
	mov	DWORD PTR _BufferSize$[ebp], eax
$LN1@NextPixel_:
; Line 117
	mov	eax, DWORD PTR _BufferSize$[ebp]
	cdq
	idiv	DWORD PTR _BytesPerPixel$[ebp]
	mov	DWORD PTR __Context+36, eax
; Line 118
	mov	DWORD PTR __Context+40, 0
; Line 119
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR __Context, eax
	mov	ecx, DWORD PTR __Context
	mov	DWORD PTR __Context+4, ecx
; Line 120
	mov	eax, DWORD PTR _y1$[ebp]
	mov	DWORD PTR __Context+8, eax
; Line 121
	mov	eax, DWORD PTR _BytesPerPixel$[ebp]
	mov	DWORD PTR __Context+28, eax
; Line 122
	mov	DWORD PTR __Context+44, 0
; Line 126
	mov	eax, DWORD PTR _BytesPerLineDest$[ebp]
	push	eax
	call	_GUI_ALLOC_AllocNoInit
	add	esp, 4
	mov	DWORD PTR __Context+16, eax
; Line 127
	mov	eax, DWORD PTR __Context+16
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR __Context+20, eax
; Line 128
	mov	eax, DWORD PTR __Context+20
	mov	DWORD PTR __Context+24, eax
; Line 129
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__NextPixel_Start ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __NextPixel_SetPixel
_TEXT	SEGMENT
tv65 = -244						; size = 4
tv64 = -244						; size = 4
_pData$9782 = -44					; size = 4
_pData$9779 = -32					; size = 4
_pData$9765 = -20					; size = 4
_Shift$9764 = -8					; size = 4
_PixelIndex$ = 8					; size = 4
__NextPixel_SetPixel PROC				; COMDAT
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 136
	mov	eax, DWORD PTR __Context+28
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN13@NextPixel_@2
	cmp	DWORD PTR tv64[ebp], 2
	je	$LN3@NextPixel_@2
	cmp	DWORD PTR tv64[ebp], 4
	je	$LN2@NextPixel_@2
	jmp	$LN14@NextPixel_@2
$LN13@NextPixel_@2:
; Line 140
	mov	eax, DWORD PTR __Context+24
	mov	DWORD PTR _pData$9765[ebp], eax
; Line 141
	mov	eax, DWORD PTR __Context+32
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 7
	ja	$LN11@NextPixel_@2
	mov	edx, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN18@NextPixel_@2[edx*4]
$LN10@NextPixel_@2:
; Line 143
	mov	eax, 7
	sub	eax, DWORD PTR __Context+44
	mov	DWORD PTR _Shift$9764[ebp], eax
; Line 144
	mov	eax, 1
	mov	ecx, DWORD PTR _Shift$9764[ebp]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR _pData$9765[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, eax
	mov	eax, DWORD PTR _pData$9765[ebp]
	mov	BYTE PTR [eax], dl
; Line 145
	mov	eax, DWORD PTR _PixelIndex$[ebp]
	mov	ecx, DWORD PTR _Shift$9764[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _pData$9765[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _pData$9765[ebp]
	mov	BYTE PTR [eax], dl
; Line 146
	mov	eax, DWORD PTR __Context+44
	add	eax, 1
	mov	DWORD PTR __Context+44, eax
; Line 147
	cmp	DWORD PTR __Context+44, 8
	jne	SHORT $LN9@NextPixel_@2
; Line 148
	mov	DWORD PTR __Context+44, 0
; Line 149
	mov	eax, DWORD PTR __Context+24
	add	eax, 1
	mov	DWORD PTR __Context+24, eax
$LN9@NextPixel_@2:
; Line 151
	jmp	$LN11@NextPixel_@2
$LN8@NextPixel_@2:
; Line 153
	mov	eax, 6
	sub	eax, DWORD PTR __Context+44
	mov	DWORD PTR _Shift$9764[ebp], eax
; Line 154
	mov	eax, 3
	mov	ecx, DWORD PTR _Shift$9764[ebp]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR _pData$9765[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, eax
	mov	eax, DWORD PTR _pData$9765[ebp]
	mov	BYTE PTR [eax], dl
; Line 155
	mov	eax, DWORD PTR _PixelIndex$[ebp]
	mov	ecx, DWORD PTR _Shift$9764[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _pData$9765[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _pData$9765[ebp]
	mov	BYTE PTR [eax], dl
; Line 156
	mov	eax, DWORD PTR __Context+44
	add	eax, 2
	mov	DWORD PTR __Context+44, eax
; Line 157
	cmp	DWORD PTR __Context+44, 8
	jne	SHORT $LN7@NextPixel_@2
; Line 158
	mov	DWORD PTR __Context+44, 0
; Line 159
	mov	eax, DWORD PTR __Context+24
	add	eax, 1
	mov	DWORD PTR __Context+24, eax
$LN7@NextPixel_@2:
; Line 161
	jmp	$LN11@NextPixel_@2
$LN6@NextPixel_@2:
; Line 163
	mov	eax, 4
	sub	eax, DWORD PTR __Context+44
	mov	DWORD PTR _Shift$9764[ebp], eax
; Line 164
	mov	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _Shift$9764[ebp]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR _pData$9765[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, eax
	mov	eax, DWORD PTR _pData$9765[ebp]
	mov	BYTE PTR [eax], dl
; Line 165
	mov	eax, DWORD PTR _PixelIndex$[ebp]
	mov	ecx, DWORD PTR _Shift$9764[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _pData$9765[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _pData$9765[ebp]
	mov	BYTE PTR [eax], dl
; Line 166
	mov	eax, DWORD PTR __Context+44
	add	eax, 4
	mov	DWORD PTR __Context+44, eax
; Line 167
	cmp	DWORD PTR __Context+44, 8
	jne	SHORT $LN5@NextPixel_@2
; Line 168
	mov	DWORD PTR __Context+44, 0
; Line 169
	mov	eax, DWORD PTR __Context+24
	add	eax, 1
	mov	DWORD PTR __Context+24, eax
$LN5@NextPixel_@2:
; Line 171
	jmp	SHORT $LN11@NextPixel_@2
$LN4@NextPixel_@2:
; Line 173
	mov	eax, DWORD PTR _pData$9765[ebp]
	mov	cl, BYTE PTR _PixelIndex$[ebp]
	mov	BYTE PTR [eax], cl
; Line 174
	mov	eax, DWORD PTR __Context+24
	add	eax, 1
	mov	DWORD PTR __Context+24, eax
$LN11@NextPixel_@2:
; Line 178
	jmp	SHORT $LN14@NextPixel_@2
$LN3@NextPixel_@2:
; Line 181
	mov	eax, DWORD PTR __Context+24
	mov	DWORD PTR _pData$9779[ebp], eax
; Line 182
	mov	eax, DWORD PTR _pData$9779[ebp]
	mov	cx, WORD PTR _PixelIndex$[ebp]
	mov	WORD PTR [eax], cx
; Line 183
	mov	eax, DWORD PTR __Context+24
	add	eax, 2
	mov	DWORD PTR __Context+24, eax
; Line 185
	jmp	SHORT $LN14@NextPixel_@2
$LN2@NextPixel_@2:
; Line 188
	mov	eax, DWORD PTR __Context+24
	mov	DWORD PTR _pData$9782[ebp], eax
; Line 189
	mov	eax, DWORD PTR _pData$9782[ebp]
	mov	ecx, DWORD PTR _PixelIndex$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 190
	mov	eax, DWORD PTR __Context+24
	add	eax, 4
	mov	DWORD PTR __Context+24, eax
$LN14@NextPixel_@2:
; Line 194
	mov	eax, DWORD PTR __Context+40
	add	eax, 1
	mov	DWORD PTR __Context+40, eax
	mov	ecx, DWORD PTR __Context+40
	cmp	ecx, DWORD PTR __Context+36
	jne	SHORT $LN16@NextPixel_@2
; Line 195
	call	__NextPixel_FlushBuffer
$LN16@NextPixel_@2:
; Line 197
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@NextPixel_@2:
	DD	$LN10@NextPixel_@2
	DD	$LN8@NextPixel_@2
	DD	$LN11@NextPixel_@2
	DD	$LN6@NextPixel_@2
	DD	$LN11@NextPixel_@2
	DD	$LN11@NextPixel_@2
	DD	$LN11@NextPixel_@2
	DD	$LN4@NextPixel_@2
__NextPixel_SetPixel ENDP
_TEXT	ENDS
EXTRN	_LCD_DrawBitmap:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __NextPixel_FlushBuffer
_TEXT	SEGMENT
_pTrans$ = -24						; size = 4
_aTrans$ = -12						; size = 8
__NextPixel_FlushBuffer PROC				; COMDAT
; Line 81
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 82
	mov	DWORD PTR _aTrans$[ebp], 0
	mov	DWORD PTR _aTrans$[ebp+4], 1
; Line 84
	mov	eax, DWORD PTR __Context+32
	sub	eax, 1
	neg	eax
	sbb	eax, eax
	not	eax
	lea	ecx, DWORD PTR _aTrans$[ebp]
	and	eax, ecx
	mov	DWORD PTR _pTrans$[ebp], eax
; Line 85
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Context+20
	push	ecx
	push	0
	mov	edx, DWORD PTR __Context+32
	push	edx
	push	1
	push	1
	push	1
	mov	eax, DWORD PTR __Context+12
	push	eax
	mov	ecx, DWORD PTR __Context+8
	push	ecx
	mov	edx, DWORD PTR __Context+4
	push	edx
	call	_LCD_DrawBitmap
	add	esp, 40					; 00000028H
; Line 86
	mov	eax, DWORD PTR __Context+4
	add	eax, DWORD PTR __Context+40
	mov	DWORD PTR __Context+4, eax
; Line 87
	mov	DWORD PTR __Context+40, 0
; Line 88
	mov	eax, DWORD PTR __Context+20
	mov	DWORD PTR __Context+24, eax
; Line 89
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@NextPixel_@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@NextPixel_@3:
	DD	1
	DD	$LN4@NextPixel_@3
$LN4@NextPixel_@3:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@NextPixel_@3
$LN3@NextPixel_@3:
	DB	97					; 00000061H
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
__NextPixel_FlushBuffer ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __NextPixel_NextLine
_TEXT	SEGMENT
__NextPixel_NextLine PROC				; COMDAT
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 204
	cmp	DWORD PTR __Context+40, 0
	je	SHORT $LN1@NextPixel_@4
; Line 205
	call	__NextPixel_FlushBuffer
$LN1@NextPixel_@4:
; Line 207
	mov	eax, DWORD PTR __Context
	mov	DWORD PTR __Context+4, eax
; Line 208
	mov	eax, DWORD PTR __Context+8
	sub	eax, 1
	mov	DWORD PTR __Context+8, eax
; Line 209
	mov	DWORD PTR __Context+44, 0
; Line 210
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__NextPixel_NextLine ENDP
_TEXT	ENDS
EXTRN	_GUI_ALLOC_Free:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __NextPixel_End
_TEXT	SEGMENT
__NextPixel_End PROC					; COMDAT
; Line 216
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 217
	cmp	DWORD PTR __Context+40, 0
	je	SHORT $LN1@NextPixel_@5
; Line 218
	call	__NextPixel_FlushBuffer
$LN1@NextPixel_@5:
; Line 220
	mov	eax, DWORD PTR __Context+16
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
; Line 221
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__NextPixel_End ENDP
_TEXT	ENDS
PUBLIC	_GUI_BMP__ReadData
PUBLIC	_GUI_BMP__ReadPalette
EXTRN	_LCD__aConvTable:BYTE
EXTRN	_LCD_Color2Index:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_BMP__ReadPalette
_TEXT	SEGMENT
_b$10103 = -53						; size = 1
_g$10102 = -41						; size = 1
_r$10101 = -29						; size = 1
_pData$ = -20						; size = 4
_i$ = -8						; size = 4
_pContext$ = 8						; size = 4
_NumColors$ = 12					; size = 4
_GUI_BMP__ReadPalette PROC				; COMDAT
; Line 831
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 834
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@GUI_BMP__R
$LN3@GUI_BMP__R:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@GUI_BMP__R:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _NumColors$[ebp]
	jge	SHORT $LN2@GUI_BMP__R
; Line 837
	push	0
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN1@GUI_BMP__R
; Line 838
	mov	eax, 1
	jmp	SHORT $LN5@GUI_BMP__R
$LN1@GUI_BMP__R:
; Line 840
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$10103[ebp], cl
; Line 841
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR _g$10102[ebp], cl
; Line 842
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cl, BYTE PTR [eax+2]
	mov	BYTE PTR _r$10101[ebp], cl
; Line 843
	movzx	eax, BYTE PTR _b$10103[ebp]
	shl	eax, 16					; 00000010H
	movzx	ecx, BYTE PTR _g$10102[ebp]
	shl	ecx, 8
	or	eax, ecx
	movzx	edx, BYTE PTR _r$10101[ebp]
	or	eax, edx
	push	eax
	call	_LCD_Color2Index
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _LCD__aConvTable[ecx*4], eax
; Line 844
	jmp	SHORT $LN3@GUI_BMP__R
$LN2@GUI_BMP__R:
; Line 845
	xor	eax, eax
$LN5@GUI_BMP__R:
; Line 846
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@GUI_BMP__R
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@GUI_BMP__R:
	DD	1
	DD	$LN8@GUI_BMP__R
$LN8@GUI_BMP__R:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@GUI_BMP__R
$LN7@GUI_BMP__R:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_GUI_BMP__ReadPalette ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _GUI_BMP__ReadData
_TEXT	SEGMENT
_pContext$ = 8						; size = 4
_NumBytes$ = 12						; size = 4
_ppData$ = 16						; size = 4
_StartOfFile$ = 20					; size = 4
_GUI_BMP__ReadData PROC					; COMDAT
; Line 852
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 853
	cmp	DWORD PTR _StartOfFile$[ebp], 0
	je	SHORT $LN2@GUI_BMP__R@2
; Line 854
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN2@GUI_BMP__R@2:
; Line 856
	mov	esi, esp
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _NumBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, DWORD PTR _NumBytes$[ebp]
	je	SHORT $LN1@GUI_BMP__R@2
; Line 857
	mov	eax, 1
	jmp	SHORT $LN3@GUI_BMP__R@2
$LN1@GUI_BMP__R@2:
; Line 859
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _NumBytes$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 860
	xor	eax, eax
$LN3@GUI_BMP__R@2:
; Line 861
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_BMP__ReadData ENDP
_TEXT	ENDS
PUBLIC	_GUI_BMP__GetData
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_BMP__GetData
_TEXT	SEGMENT
_pParam$ = -8						; size = 4
_p$ = 8							; size = 4
_ppData$ = 12						; size = 4
_NumBytesReq$ = 16					; size = 4
_Off$ = 20						; size = 4
_GUI_BMP__GetData PROC					; COMDAT
; Line 876
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 878
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pParam$[ebp], eax
; Line 879
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _Off$[ebp]
	mov	edx, DWORD PTR _ppData$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 880
	mov	eax, DWORD PTR _NumBytesReq$[ebp]
; Line 881
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_BMP__GetData ENDP
_TEXT	ENDS
PUBLIC	_GUI_BMP__Init
EXTRN	_GUI__Read32:PROC
EXTRN	_GUI__Read16:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_BMP__Init
_TEXT	SEGMENT
tv87 = -232						; size = 4
_pSrc$ = -32						; size = 4
_ClrUsed$ = -20						; size = 4
_Type$ = -8						; size = 2
_pContext$ = 8						; size = 4
_pWidth$ = 12						; size = 4
_pHeight$ = 16						; size = 4
_pBitCount$ = 20					; size = 4
_pNumColors$ = 24					; size = 4
_pCompression$ = 28					; size = 4
_GUI_BMP__Init PROC					; COMDAT
; Line 887
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 892
	push	1
	lea	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	push	54					; 00000036H
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN12@GUI_BMP__I
; Line 893
	mov	eax, 1
	jmp	$LN13@GUI_BMP__I
$LN12@GUI_BMP__I:
; Line 896
	lea	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _Type$[ebp], ax
; Line 897
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 899
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 4
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 900
	lea	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	call	_GUI__Read32
	add	esp, 4
	mov	ecx, DWORD PTR _pWidth$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 901
	lea	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	call	_GUI__Read32
	add	esp, 4
	mov	ecx, DWORD PTR _pHeight$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 902
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 903
	lea	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	ecx, DWORD PTR _pBitCount$[ebp]
	mov	WORD PTR [ecx], ax
; Line 904
	lea	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	call	_GUI__Read32
	add	esp, 4
	mov	ecx, DWORD PTR _pCompression$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 905
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 906
	lea	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	call	_GUI__Read32
	add	esp, 4
	mov	DWORD PTR _ClrUsed$[ebp], eax
; Line 908
	mov	eax, DWORD PTR _pBitCount$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR tv87[ebp], ecx
	cmp	DWORD PTR tv87[ebp], 32			; 00000020H
	ja	SHORT $LN4@GUI_BMP__I
	mov	edx, DWORD PTR tv87[ebp]
	movzx	eax, BYTE PTR $LN15@GUI_BMP__I[edx]
	jmp	DWORD PTR $LN19@GUI_BMP__I[eax*4]
$LN9@GUI_BMP__I:
; Line 909
	mov	eax, 1
	jmp	$LN13@GUI_BMP__I
$LN8@GUI_BMP__I:
; Line 910
	mov	eax, DWORD PTR _pNumColors$[ebp]
	mov	DWORD PTR [eax], 2
	jmp	SHORT $LN10@GUI_BMP__I
$LN7@GUI_BMP__I:
; Line 911
	mov	eax, DWORD PTR _pNumColors$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
	jmp	SHORT $LN10@GUI_BMP__I
$LN6@GUI_BMP__I:
; Line 912
	mov	eax, DWORD PTR _pNumColors$[ebp]
	mov	DWORD PTR [eax], 256			; 00000100H
	jmp	SHORT $LN10@GUI_BMP__I
$LN5@GUI_BMP__I:
; Line 915
	mov	eax, DWORD PTR _pNumColors$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN10@GUI_BMP__I
$LN4@GUI_BMP__I:
; Line 917
	mov	eax, 1
	jmp	SHORT $LN13@GUI_BMP__I
$LN10@GUI_BMP__I:
; Line 919
	mov	eax, DWORD PTR _pNumColors$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@GUI_BMP__I
	cmp	DWORD PTR _ClrUsed$[ebp], 0
	je	SHORT $LN3@GUI_BMP__I
; Line 920
	mov	eax, DWORD PTR _pNumColors$[ebp]
	mov	ecx, DWORD PTR _ClrUsed$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@GUI_BMP__I:
; Line 925
	mov	eax, DWORD PTR _pNumColors$[ebp]
	cmp	DWORD PTR [eax], 256			; 00000100H
	jg	SHORT $LN1@GUI_BMP__I
	movzx	eax, WORD PTR _Type$[ebp]
	cmp	eax, 19778				; 00004d42H
	jne	SHORT $LN1@GUI_BMP__I
	mov	eax, DWORD PTR _pCompression$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@GUI_BMP__I
	mov	eax, DWORD PTR _pCompression$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN2@GUI_BMP__I
	mov	eax, DWORD PTR _pCompression$[ebp]
	cmp	DWORD PTR [eax], 2
	je	SHORT $LN2@GUI_BMP__I
$LN1@GUI_BMP__I:
; Line 926
	mov	eax, 1
	jmp	SHORT $LN13@GUI_BMP__I
$LN2@GUI_BMP__I:
; Line 928
	xor	eax, eax
$LN13@GUI_BMP__I:
; Line 929
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@GUI_BMP__I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@GUI_BMP__I:
	DD	1
	DD	$LN17@GUI_BMP__I
$LN17@GUI_BMP__I:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN16@GUI_BMP__I
$LN16@GUI_BMP__I:
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
	npad	3
$LN19@GUI_BMP__I:
	DD	$LN9@GUI_BMP__I
	DD	$LN8@GUI_BMP__I
	DD	$LN7@GUI_BMP__I
	DD	$LN6@GUI_BMP__I
	DD	$LN5@GUI_BMP__I
	DD	$LN4@GUI_BMP__I
$LN15@GUI_BMP__I:
	DB	0
	DB	1
	DB	5
	DB	5
	DB	2
	DB	5
	DB	5
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
_GUI_BMP__Init ENDP
_TEXT	ENDS
PUBLIC	_GUI_BMP_GetXSizeEx
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_BMP_GetXSizeEx
_TEXT	SEGMENT
_pSrc$ = -28						; size = 4
_Context$ = -16						; size = 12
_pfGetData$ = 8						; size = 4
_p$ = 12						; size = 4
_GUI_BMP_GetXSizeEx PROC				; COMDAT
; Line 941
	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 944
	mov	eax, DWORD PTR _pfGetData$[ebp]
	mov	DWORD PTR _Context$[ebp], eax
; Line 945
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _Context$[ebp+8], eax
; Line 946
	push	1
	lea	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	push	26					; 0000001aH
	lea	ecx, DWORD PTR _Context$[ebp]
	push	ecx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN1@GUI_BMP_Ge
; Line 947
	mov	eax, 1
	jmp	SHORT $LN2@GUI_BMP_Ge
$LN1@GUI_BMP_Ge:
; Line 949
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 18					; 00000012H
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 950
	lea	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	call	_GUI__Read32
	add	esp, 4
$LN2@GUI_BMP_Ge:
; Line 951
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@GUI_BMP_Ge
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@GUI_BMP_Ge:
	DD	2
	DD	$LN6@GUI_BMP_Ge
$LN6@GUI_BMP_Ge:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN4@GUI_BMP_Ge
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN5@GUI_BMP_Ge
$LN5@GUI_BMP_Ge:
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
$LN4@GUI_BMP_Ge:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_GUI_BMP_GetXSizeEx ENDP
_TEXT	ENDS
PUBLIC	_GUI_BMP_GetXSize
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_BMP_GetXSize
_TEXT	SEGMENT
_Param$ = -8						; size = 4
_pBMP$ = 8						; size = 4
_GUI_BMP_GetXSize PROC					; COMDAT
; Line 956
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 957
	mov	DWORD PTR _Param$[ebp], 0
; Line 958
	mov	eax, DWORD PTR _pBMP$[ebp]
	mov	DWORD PTR _Param$[ebp], eax
; Line 959
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	push	OFFSET _GUI_BMP__GetData
	call	_GUI_BMP_GetXSizeEx
	add	esp, 8
; Line 960
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GUI_BMP_Ge@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@GUI_BMP_Ge@2:
	DD	1
	DD	$LN4@GUI_BMP_Ge@2
$LN4@GUI_BMP_Ge@2:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@GUI_BMP_Ge@2
$LN3@GUI_BMP_Ge@2:
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_GUI_BMP_GetXSize ENDP
_TEXT	ENDS
PUBLIC	_GUI_BMP_GetYSizeEx
EXTRN	_labs:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_BMP_GetYSizeEx
_TEXT	SEGMENT
_pSrc$ = -28						; size = 4
_Context$ = -16						; size = 12
_pfGetData$ = 8						; size = 4
_p$ = 12						; size = 4
_GUI_BMP_GetYSizeEx PROC				; COMDAT
; Line 966
	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 969
	mov	eax, DWORD PTR _pfGetData$[ebp]
	mov	DWORD PTR _Context$[ebp], eax
; Line 970
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _Context$[ebp+8], eax
; Line 971
	push	1
	lea	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	push	26					; 0000001aH
	lea	ecx, DWORD PTR _Context$[ebp]
	push	ecx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN1@GUI_BMP_Ge@3
; Line 972
	mov	eax, 1
	jmp	SHORT $LN2@GUI_BMP_Ge@3
$LN1@GUI_BMP_Ge@3:
; Line 974
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 22					; 00000016H
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 975
	lea	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	call	_GUI__Read32
	add	esp, 4
	push	eax
	call	_labs
	add	esp, 4
$LN2@GUI_BMP_Ge@3:
; Line 976
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@GUI_BMP_Ge@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@GUI_BMP_Ge@3:
	DD	2
	DD	$LN6@GUI_BMP_Ge@3
$LN6@GUI_BMP_Ge@3:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN4@GUI_BMP_Ge@3
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN5@GUI_BMP_Ge@3
$LN5@GUI_BMP_Ge@3:
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
$LN4@GUI_BMP_Ge@3:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_GUI_BMP_GetYSizeEx ENDP
_TEXT	ENDS
PUBLIC	_GUI_BMP_GetYSize
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_BMP_GetYSize
_TEXT	SEGMENT
_Param$ = -8						; size = 4
_pBMP$ = 8						; size = 4
_GUI_BMP_GetYSize PROC					; COMDAT
; Line 982
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 983
	mov	DWORD PTR _Param$[ebp], 0
; Line 984
	mov	eax, DWORD PTR _pBMP$[ebp]
	mov	DWORD PTR _Param$[ebp], eax
; Line 985
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	push	OFFSET _GUI_BMP__GetData
	call	_GUI_BMP_GetYSizeEx
	add	esp, 8
; Line 986
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GUI_BMP_Ge@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@GUI_BMP_Ge@4:
	DD	1
	DD	$LN4@GUI_BMP_Ge@4
$LN4@GUI_BMP_Ge@4:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@GUI_BMP_Ge@4
$LN3@GUI_BMP_Ge@4:
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_GUI_BMP_GetYSize ENDP
_TEXT	ENDS
PUBLIC	_GUI_BMP_DrawEx
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_BMP_DrawEx
_TEXT	SEGMENT
_Context$ = -16						; size = 12
_pfGetData$ = 8						; size = 4
_p$ = 12						; size = 4
_x0$ = 16						; size = 4
_y0$ = 20						; size = 4
_GUI_BMP_DrawEx PROC					; COMDAT
; Line 992
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 994
	mov	eax, DWORD PTR _pfGetData$[ebp]
	mov	DWORD PTR _Context$[ebp], eax
; Line 995
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _Context$[ebp+8], eax
; Line 996
	lea	eax, DWORD PTR _Context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	__Draw
	add	esp, 12					; 0000000cH
; Line 997
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GUI_BMP_Dr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@GUI_BMP_Dr:
	DD	1
	DD	$LN4@GUI_BMP_Dr
$LN4@GUI_BMP_Dr:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN3@GUI_BMP_Dr
$LN3@GUI_BMP_Dr:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_GUI_BMP_DrawEx ENDP
_TEXT	ENDS
EXTRN	_WM__GetNextIVR:PROC
EXTRN	_WM__InitIVRSearch:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Draw
_TEXT	SEGMENT
tv130 = -296						; size = 4
tv128 = -296						; size = 4
tv86 = -296						; size = 4
_Compression$ = -96					; size = 4
_NumColors$ = -84					; size = 4
_BitCount$ = -72					; size = 2
_Height$ = -60						; size = 4
_Width$ = -48						; size = 4
_Cnt$ = -36						; size = 4
_Ret$ = -24						; size = 4
_r$ = -12						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_pContext$ = 16						; size = 4
__Draw	PROC						; COMDAT
; Line 760
	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 764
	mov	DWORD PTR _Ret$[ebp], 0
; Line 765
	mov	DWORD PTR _Cnt$[ebp], 0
; Line 771
	lea	eax, DWORD PTR _Compression$[ebp]
	push	eax
	lea	ecx, DWORD PTR _NumColors$[ebp]
	push	ecx
	lea	edx, DWORD PTR _BitCount$[ebp]
	push	edx
	lea	eax, DWORD PTR _Height$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	_GUI_BMP__Init
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN18@Draw
; Line 772
	mov	eax, 1
	jmp	$LN19@Draw
$LN18@Draw:
; Line 777
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _GUI_Context+64
	mov	DWORD PTR _x0$[ebp], eax
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _GUI_Context+68
	mov	DWORD PTR _y0$[ebp], eax
; Line 778
	mov	ax, WORD PTR _x0$[ebp]
	mov	WORD PTR _r$[ebp], ax
	movsx	ecx, WORD PTR _r$[ebp]
	mov	edx, DWORD PTR _Width$[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	mov	WORD PTR _r$[ebp+4], ax
; Line 779
	mov	ax, WORD PTR _y0$[ebp]
	mov	WORD PTR _r$[ebp+2], ax
	movsx	ecx, WORD PTR _r$[ebp+2]
	mov	edx, DWORD PTR _Height$[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	mov	WORD PTR _r$[ebp+6], ax
; Line 780
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_WM__InitIVRSearch
	add	esp, 4
	test	eax, eax
	je	$LN17@Draw
$LN16@Draw:
; Line 782
	mov	eax, DWORD PTR _Cnt$[ebp]
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR _Cnt$[ebp]
	add	ecx, 1
	mov	DWORD PTR _Cnt$[ebp], ecx
	cmp	DWORD PTR tv86[ebp], 0
	je	SHORT $LN13@Draw
; Line 783
	lea	eax, DWORD PTR _Compression$[ebp]
	push	eax
	lea	ecx, DWORD PTR _NumColors$[ebp]
	push	ecx
	lea	edx, DWORD PTR _BitCount$[ebp]
	push	edx
	lea	eax, DWORD PTR _Height$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	_GUI_BMP__Init
	add	esp, 24					; 00000018H
	mov	DWORD PTR _Ret$[ebp], eax
$LN13@Draw:
; Line 785
	cmp	DWORD PTR _Ret$[ebp], 0
	jne	$LN15@Draw
; Line 787
	mov	eax, DWORD PTR _Compression$[ebp]
	mov	DWORD PTR tv128[ebp], eax
	cmp	DWORD PTR tv128[ebp], 0
	je	SHORT $LN9@Draw
	cmp	DWORD PTR tv128[ebp], 0
	jle	$LN15@Draw
	cmp	DWORD PTR tv128[ebp], 2
	jle	$LN1@Draw
	jmp	$LN15@Draw
$LN9@Draw:
; Line 789
	movzx	eax, WORD PTR _BitCount$[ebp]
	mov	DWORD PTR tv130[ebp], eax
	mov	ecx, DWORD PTR tv130[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv130[ebp], ecx
	cmp	DWORD PTR tv130[ebp], 31		; 0000001fH
	ja	$LN2@Draw
	mov	edx, DWORD PTR tv130[ebp]
	movzx	eax, BYTE PTR $LN21@Draw[edx]
	jmp	DWORD PTR $LN30@Draw[eax*4]
$LN6@Draw:
; Line 793
	mov	eax, DWORD PTR _NumColors$[ebp]
	push	eax
	movzx	ecx, WORD PTR _BitCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Height$[ebp]
	push	edx
	mov	eax, DWORD PTR _Width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__DrawBitmap_Pal
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _Ret$[ebp], eax
; Line 794
	jmp	SHORT $LN7@Draw
$LN5@Draw:
; Line 796
	mov	eax, DWORD PTR _Height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__DrawBitmap_16bpp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _Ret$[ebp], eax
; Line 797
	jmp	SHORT $LN7@Draw
$LN4@Draw:
; Line 799
	mov	eax, DWORD PTR _Height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__DrawBitmap_24bpp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _Ret$[ebp], eax
; Line 800
	jmp	SHORT $LN7@Draw
$LN3@Draw:
; Line 802
	mov	eax, DWORD PTR _Height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__DrawBitmap_32bpp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _Ret$[ebp], eax
; Line 803
	jmp	SHORT $LN7@Draw
$LN2@Draw:
; Line 805
	mov	DWORD PTR _Ret$[ebp], 1
$LN7@Draw:
; Line 807
	jmp	SHORT $LN15@Draw
$LN1@Draw:
; Line 810
	mov	eax, DWORD PTR _Compression$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NumColors$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Height$[ebp]
	push	edx
	mov	eax, DWORD PTR _Width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__DrawBitmap_RLE
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _Ret$[ebp], eax
$LN15@Draw:
; Line 815
	call	_WM__GetNextIVR
	test	eax, eax
	jne	$LN16@Draw
$LN17@Draw:
; Line 818
	mov	eax, DWORD PTR _Ret$[ebp]
$LN19@Draw:
; Line 819
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@Draw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN29@Draw:
	DD	6
	DD	$LN28@Draw
$LN28@Draw:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN22@Draw
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN23@Draw
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN24@Draw
	DD	-72					; ffffffb8H
	DD	2
	DD	$LN25@Draw
	DD	-84					; ffffffacH
	DD	4
	DD	$LN26@Draw
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN27@Draw
$LN27@Draw:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN26@Draw:
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN25@Draw:
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN24@Draw:
	DB	72					; 00000048H
	DB	101					; 00000065H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	0
$LN23@Draw:
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN22@Draw:
	DB	114					; 00000072H
	DB	0
	npad	2
$LN30@Draw:
	DD	$LN6@Draw
	DD	$LN5@Draw
	DD	$LN4@Draw
	DD	$LN3@Draw
	DD	$LN2@Draw
$LN21@Draw:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
__Draw	ENDP
_TEXT	ENDS
EXTRN	_LCD_DrawPixel:PROC
EXTRN	_LCD_FillRect:PROC
EXTRN	_LCD_DrawHLine:PROC
EXTRN	_LCD_pColorIndex:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitmap_RLE
_TEXT	SEGMENT
tv263 = -316						; size = 4
tv230 = -316						; size = 4
tv156 = -316						; size = 4
tv80 = -316						; size = 4
_i$9868 = -116						; size = 4
_Data$9832 = -101					; size = 1
_Cmd$9831 = -89						; size = 1
_ColorIndex$ = -80					; size = 4
_pData$ = -68						; size = 4
_Dy$ = -56						; size = 4
_Dx$ = -44						; size = 4
_EOI$ = -32						; size = 4
_y$ = -20						; size = 4
_x$ = -8						; size = 4
_pContext$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_XSize$ = 20						; size = 4
_YSize$ = 24						; size = 4
_NumColors$ = 28					; size = 4
_Compression$ = 32					; size = 4
__DrawBitmap_RLE PROC					; COMDAT
; Line 257
	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 261
	mov	DWORD PTR _EOI$[ebp], 0
; Line 262
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ColorIndex$[ebp], ecx
; Line 264
	mov	eax, DWORD PTR _NumColors$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_BMP__ReadPalette
	add	esp, 8
	test	eax, eax
	je	SHORT $LN39@DrawBitmap
; Line 265
	mov	eax, 1
	jmp	$LN40@DrawBitmap
$LN39@DrawBitmap:
; Line 268
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 269
	mov	eax, DWORD PTR _YSize$[ebp]
	mov	ecx, DWORD PTR _y0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _y$[ebp], edx
$LN38@DrawBitmap:
; Line 273
	push	0
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN35@DrawBitmap
; Line 274
	mov	eax, 1
	jmp	$LN40@DrawBitmap
$LN35@DrawBitmap:
; Line 276
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _Cmd$9831[ebp], cl
	mov	edx, DWORD PTR _pData$[ebp]
	add	edx, 1
	mov	DWORD PTR _pData$[ebp], edx
; Line 277
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _Data$9832[ebp], cl
; Line 278
	movzx	eax, BYTE PTR _Cmd$9831[ebp]
	test	eax, eax
	jne	$LN34@DrawBitmap
; Line 279
	mov	al, BYTE PTR _Data$9832[ebp]
	mov	BYTE PTR tv80[ebp], al
	cmp	BYTE PTR tv80[ebp], 0
	je	SHORT $LN31@DrawBitmap
	cmp	BYTE PTR tv80[ebp], 1
	je	SHORT $LN28@DrawBitmap
	cmp	BYTE PTR tv80[ebp], 2
	je	$LN25@DrawBitmap
	jmp	$LN23@DrawBitmap
$LN31@DrawBitmap:
; Line 281
	mov	eax, DWORD PTR _XSize$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	cmp	DWORD PTR _x$[ebp], edx
	jge	SHORT $LN30@DrawBitmap
; Line 282
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR _LCD__aConvTable
	mov	DWORD PTR [eax], ecx
; Line 283
	mov	eax, DWORD PTR _XSize$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_LCD_DrawHLine
	add	esp, 12					; 0000000cH
$LN30@DrawBitmap:
; Line 285
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 286
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 1
	mov	DWORD PTR _y$[ebp], eax
; Line 287
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _y0$[ebp]
	jge	SHORT $LN29@DrawBitmap
; Line 288
	mov	eax, 1
	jmp	$LN40@DrawBitmap
$LN29@DrawBitmap:
; Line 290
	jmp	$LN32@DrawBitmap
$LN28@DrawBitmap:
; Line 292
	mov	eax, DWORD PTR _XSize$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	cmp	DWORD PTR _x$[ebp], edx
	jge	SHORT $LN27@DrawBitmap
; Line 293
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR _LCD__aConvTable
	mov	DWORD PTR [eax], ecx
; Line 294
	mov	eax, DWORD PTR _XSize$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_LCD_DrawHLine
	add	esp, 12					; 0000000cH
$LN27@DrawBitmap:
; Line 296
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _y0$[ebp]
	jle	SHORT $LN26@DrawBitmap
; Line 297
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR _LCD__aConvTable
	mov	DWORD PTR [eax], ecx
; Line 298
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _XSize$[ebp]
	mov	edx, DWORD PTR _x0$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
$LN26@DrawBitmap:
; Line 300
	mov	DWORD PTR _EOI$[ebp], 1
; Line 301
	jmp	$LN32@DrawBitmap
$LN25@DrawBitmap:
; Line 303
	push	0
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN24@DrawBitmap
; Line 304
	mov	eax, 1
	jmp	$LN40@DrawBitmap
$LN24@DrawBitmap:
; Line 306
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Dx$[ebp], ecx
	mov	edx, DWORD PTR _pData$[ebp]
	add	edx, 1
	mov	DWORD PTR _pData$[ebp], edx
; Line 307
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Dy$[ebp], ecx
; Line 308
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR _LCD__aConvTable
	mov	DWORD PTR [eax], ecx
; Line 309
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _Dx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, DWORD PTR _Dy$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
; Line 310
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Dx$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 311
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _Dy$[ebp]
	mov	DWORD PTR _y$[ebp], eax
; Line 312
	jmp	$LN32@DrawBitmap
$LN23@DrawBitmap:
; Line 314
	mov	eax, DWORD PTR _Compression$[ebp]
	mov	DWORD PTR tv156[ebp], eax
	cmp	DWORD PTR tv156[ebp], 1
	je	$LN16@DrawBitmap
	cmp	DWORD PTR tv156[ebp], 2
	je	SHORT $LN20@DrawBitmap
	jmp	$LN32@DrawBitmap
$LN20@DrawBitmap:
; Line 316
	push	0
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	movzx	eax, BYTE PTR _Data$9832[ebp]
	add	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN19@DrawBitmap
; Line 317
	mov	eax, 1
	jmp	$LN40@DrawBitmap
$LN19@DrawBitmap:
; Line 319
	push	OFFSET _LCD__aConvTable
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	movzx	eax, BYTE PTR _Data$9832[ebp]
	add	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	push	4
	push	1
	push	1
	push	1
	movzx	ecx, BYTE PTR _Data$9832[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_LCD_DrawBitmap
	add	esp, 40					; 00000028H
; Line 320
	movzx	eax, BYTE PTR _Data$9832[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 322
	movzx	eax, BYTE PTR _Data$9832[ebp]
	add	eax, 1
	sar	eax, 1
	and	eax, 1
	je	SHORT $LN18@DrawBitmap
; Line 323
	push	0
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN18@DrawBitmap
; Line 324
	mov	eax, 1
	jmp	$LN40@DrawBitmap
$LN18@DrawBitmap:
; Line 327
	jmp	$LN32@DrawBitmap
$LN16@DrawBitmap:
; Line 329
	push	0
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _Data$9832[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN15@DrawBitmap
; Line 330
	mov	eax, 1
	jmp	$LN40@DrawBitmap
$LN15@DrawBitmap:
; Line 332
	push	OFFSET _LCD__aConvTable
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _Data$9832[ebp]
	push	ecx
	push	8
	push	1
	push	1
	push	1
	movzx	edx, BYTE PTR _Data$9832[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_LCD_DrawBitmap
	add	esp, 40					; 00000028H
; Line 333
	movzx	eax, BYTE PTR _Data$9832[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 335
	movzx	eax, BYTE PTR _Data$9832[ebp]
	and	eax, 1
	je	SHORT $LN32@DrawBitmap
; Line 336
	push	0
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN32@DrawBitmap
; Line 337
	mov	eax, 1
	jmp	$LN40@DrawBitmap
$LN32@DrawBitmap:
; Line 344
	jmp	$LN37@DrawBitmap
$LN34@DrawBitmap:
; Line 345
	mov	eax, DWORD PTR _Compression$[ebp]
	mov	DWORD PTR tv230[ebp], eax
	cmp	DWORD PTR tv230[ebp], 1
	je	$LN1@DrawBitmap
	cmp	DWORD PTR tv230[ebp], 2
	je	SHORT $LN9@DrawBitmap
	jmp	$LN37@DrawBitmap
$LN9@DrawBitmap:
; Line 347
	movzx	eax, BYTE PTR _Data$9832[ebp]
	and	eax, 15					; 0000000fH
	movzx	ecx, BYTE PTR _Data$9832[ebp]
	sar	ecx, 4
	cmp	eax, ecx
	jne	SHORT $LN8@DrawBitmap
; Line 348
	movzx	eax, BYTE PTR _Data$9832[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _LCD_pColorIndex
	mov	edx, DWORD PTR _LCD__aConvTable[eax*4]
	mov	DWORD PTR [ecx], edx
; Line 349
	movzx	eax, BYTE PTR _Cmd$9831[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_LCD_DrawHLine
	add	esp, 12					; 0000000cH
; Line 350
	movzx	eax, BYTE PTR _Cmd$9831[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 351
	jmp	SHORT $LN7@DrawBitmap
$LN8@DrawBitmap:
; Line 353
	mov	DWORD PTR _i$9868[ebp], 0
	jmp	SHORT $LN6@DrawBitmap
$LN5@DrawBitmap:
	mov	eax, DWORD PTR _i$9868[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9868[ebp], eax
$LN6@DrawBitmap:
	movzx	eax, BYTE PTR _Cmd$9831[ebp]
	cmp	DWORD PTR _i$9868[ebp], eax
	jge	SHORT $LN7@DrawBitmap
; Line 354
	mov	eax, DWORD PTR _i$9868[ebp]
	and	eax, 1
	jne	SHORT $LN3@DrawBitmap
; Line 355
	movzx	eax, BYTE PTR _Data$9832[ebp]
	sar	eax, 4
	mov	ecx, DWORD PTR _LCD_pColorIndex
	mov	edx, DWORD PTR _LCD__aConvTable[eax*4]
	mov	DWORD PTR [ecx], edx
; Line 356
	jmp	SHORT $LN2@DrawBitmap
$LN3@DrawBitmap:
; Line 357
	movzx	eax, BYTE PTR _Data$9832[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _LCD_pColorIndex
	mov	edx, DWORD PTR _LCD__aConvTable[eax*4]
	mov	DWORD PTR [ecx], edx
$LN2@DrawBitmap:
; Line 359
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv263[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR tv263[ebp]
	push	eax
	call	_LCD_DrawPixel
	add	esp, 8
; Line 360
	jmp	SHORT $LN5@DrawBitmap
$LN7@DrawBitmap:
; Line 362
	jmp	SHORT $LN37@DrawBitmap
$LN1@DrawBitmap:
; Line 364
	movzx	eax, BYTE PTR _Data$9832[ebp]
	mov	ecx, DWORD PTR _LCD_pColorIndex
	mov	edx, DWORD PTR _LCD__aConvTable[eax*4]
	mov	DWORD PTR [ecx], edx
; Line 365
	movzx	eax, BYTE PTR _Cmd$9831[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_LCD_DrawHLine
	add	esp, 12					; 0000000cH
; Line 366
	movzx	eax, BYTE PTR _Cmd$9831[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x$[ebp], eax
$LN37@DrawBitmap:
; Line 370
	cmp	DWORD PTR _EOI$[ebp], 0
	je	$LN38@DrawBitmap
; Line 371
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR _ColorIndex$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 372
	xor	eax, eax
$LN40@DrawBitmap:
; Line 373
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@DrawBitmap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN44@DrawBitmap:
	DD	1
	DD	$LN43@DrawBitmap
$LN43@DrawBitmap:
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN42@DrawBitmap
$LN42@DrawBitmap:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
__DrawBitmap_RLE ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitmap_Pal
_TEXT	SEGMENT
tv71 = -292						; size = 4
_Param$ = -92						; size = 24
_pData$ = -60						; size = 4
_BytesPerLine$ = -48					; size = 4
_SkipBytes$ = -36					; size = 4
_Step$ = -24						; size = 4
_y$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pContext$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_XSize$ = 20						; size = 4
_YSize$ = 24						; size = 4
_Bpp$ = 28						; size = 4
_NumColors$ = 32					; size = 4
__DrawBitmap_Pal PROC					; COMDAT
; Line 446
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 448
	mov	DWORD PTR _BytesPerLine$[ebp], 0
; Line 450
	mov	DWORD PTR _Param$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _Param$[ebp+4], eax
	mov	DWORD PTR _Param$[ebp+8], eax
	mov	DWORD PTR _Param$[ebp+12], eax
	mov	DWORD PTR _Param$[ebp+16], eax
	mov	DWORD PTR _Param$[ebp+20], eax
; Line 452
	mov	eax, DWORD PTR _NumColors$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_BMP__ReadPalette
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@DrawBitmap@2
; Line 453
	mov	eax, 1
	jmp	$LN16@DrawBitmap@2
$LN15@DrawBitmap@2:
; Line 455
	mov	eax, DWORD PTR _Bpp$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	cmp	DWORD PTR tv71[ebp], 1
	je	SHORT $LN12@DrawBitmap@2
	cmp	DWORD PTR tv71[ebp], 4
	je	SHORT $LN11@DrawBitmap@2
	cmp	DWORD PTR tv71[ebp], 8
	je	SHORT $LN10@DrawBitmap@2
	jmp	SHORT $LN13@DrawBitmap@2
$LN12@DrawBitmap@2:
; Line 457
	mov	eax, DWORD PTR _XSize$[ebp]
	add	eax, 31					; 0000001fH
	sar	eax, 5
	shl	eax, 2
	mov	DWORD PTR _BytesPerLine$[ebp], eax
; Line 458
	jmp	SHORT $LN13@DrawBitmap@2
$LN11@DrawBitmap@2:
; Line 460
	mov	eax, DWORD PTR _XSize$[ebp]
	lea	ecx, DWORD PTR [eax*4+31]
	sar	ecx, 5
	shl	ecx, 2
	mov	DWORD PTR _BytesPerLine$[ebp], ecx
; Line 461
	jmp	SHORT $LN13@DrawBitmap@2
$LN10@DrawBitmap@2:
; Line 463
	mov	eax, DWORD PTR _XSize$[ebp]
	add	eax, 3
	sar	eax, 2
	shl	eax, 2
	mov	DWORD PTR _BytesPerLine$[ebp], eax
$LN13@DrawBitmap@2:
; Line 469
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BytesPerLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Bpp$[ebp]
	push	edx
	mov	eax, DWORD PTR _YSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _XSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	call	__GetClipParam
	add	esp, 28					; 0000001cH
; Line 470
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _Param$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 474
	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _YSize$[ebp]
	push	ecx
	call	__GetStep
	add	esp, 8
	mov	DWORD PTR _Step$[ebp], eax
; Line 475
	cmp	DWORD PTR _Step$[ebp], 0
	jne	SHORT $LN9@DrawBitmap@2
; Line 476
	mov	eax, 1
	jmp	$LN16@DrawBitmap@2
$LN9@DrawBitmap@2:
; Line 481
	cmp	DWORD PTR _Step$[ebp], 0
	jge	SHORT $LN8@DrawBitmap@2
; Line 482
	cmp	DWORD PTR _Param$[ebp+20], 0
	jle	SHORT $LN7@DrawBitmap@2
; Line 483
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	imul	eax, DWORD PTR _Param$[ebp+20]
	mov	ecx, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 484
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _Param$[ebp+20]
	mov	DWORD PTR _y$[ebp], eax
$LN7@DrawBitmap@2:
; Line 486
	jmp	SHORT $LN6@DrawBitmap@2
$LN8@DrawBitmap@2:
; Line 487
	cmp	DWORD PTR _Param$[ebp+16], 0
	jle	SHORT $LN6@DrawBitmap@2
; Line 488
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	imul	eax, DWORD PTR _Param$[ebp+16]
	mov	ecx, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 489
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _Param$[ebp+16]
	mov	DWORD PTR _y$[ebp], eax
$LN6@DrawBitmap@2:
; Line 492
	mov	eax, DWORD PTR _Param$[ebp+16]
	add	eax, DWORD PTR _Param$[ebp+20]
	mov	ecx, DWORD PTR _YSize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _YSize$[ebp], ecx
; Line 496
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _Param$[ebp+12]
	mov	DWORD PTR _x0$[ebp], eax
; Line 497
	mov	eax, DWORD PTR _Param$[ebp+8]
	add	eax, DWORD PTR _Param$[ebp+12]
	mov	ecx, DWORD PTR _XSize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _XSize$[ebp], ecx
; Line 498
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	sub	eax, DWORD PTR _Param$[ebp+4]
	mov	DWORD PTR _SkipBytes$[ebp], eax
$LN4@DrawBitmap@2:
; Line 503
	push	0
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Param$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN1@DrawBitmap@2
; Line 504
	mov	eax, 1
	jmp	SHORT $LN16@DrawBitmap@2
$LN1@DrawBitmap@2:
; Line 506
	push	OFFSET _LCD__aConvTable
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _Bpp$[ebp]
	push	ecx
	push	1
	push	1
	push	1
	mov	edx, DWORD PTR _XSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_LCD_DrawBitmap
	add	esp, 40					; 00000028H
; Line 510
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _SkipBytes$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 511
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _Step$[ebp]
	mov	DWORD PTR _y$[ebp], eax
; Line 512
	mov	eax, DWORD PTR _YSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _YSize$[ebp], eax
	jne	SHORT $LN4@DrawBitmap@2
; Line 513
	xor	eax, eax
$LN16@DrawBitmap@2:
; Line 514
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@DrawBitmap@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN22@DrawBitmap@2:
	DD	3
	DD	$LN21@DrawBitmap@2
$LN21@DrawBitmap@2:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN18@DrawBitmap@2
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN19@DrawBitmap@2
	DD	-92					; ffffffa4H
	DD	24					; 00000018H
	DD	$LN20@DrawBitmap@2
$LN20@DrawBitmap@2:
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN19@DrawBitmap@2:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN18@DrawBitmap@2:
	DB	121					; 00000079H
	DB	0
__DrawBitmap_Pal ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetStep
_TEXT	SEGMENT
_pYSize$ = 8						; size = 4
_pY$ = 12						; size = 4
__GetStep PROC						; COMDAT
; Line 240
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 241
	mov	eax, DWORD PTR _pYSize$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN4@GetStep
; Line 242
	mov	eax, DWORD PTR _pYSize$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _pY$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 243
	or	eax, -1
	jmp	SHORT $LN5@GetStep
	jmp	SHORT $LN5@GetStep
$LN4@GetStep:
; Line 244
	mov	eax, DWORD PTR _pYSize$[ebp]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN2@GetStep
; Line 245
	mov	eax, DWORD PTR _pYSize$[ebp]
	mov	ecx, DWORD PTR [eax]
	neg	ecx
	mov	edx, DWORD PTR _pYSize$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 246
	mov	eax, DWORD PTR _pY$[ebp]
	mov	DWORD PTR [eax], 0
; Line 247
	mov	eax, 1
	jmp	SHORT $LN5@GetStep
; Line 248
	jmp	SHORT $LN5@GetStep
$LN2@GetStep:
; Line 249
	xor	eax, eax
$LN5@GetStep:
; Line 251
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetStep ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetClipParam
_TEXT	SEGMENT
tv84 = -208						; size = 4
_Diff$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_XSize$ = 16						; size = 4
_YSize$ = 20						; size = 4
_BitsPerPixel$ = 24					; size = 4
_BytesPerLine$ = 28					; size = 4
_pParam$ = 32						; size = 4
__GetClipParam PROC					; COMDAT
; Line 379
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 384
	movsx	eax, WORD PTR _GUI_Context+8
	sub	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _Diff$[ebp], eax
; Line 385
	cmp	DWORD PTR _Diff$[ebp], 0
	jle	SHORT $LN12@GetClipPar
; Line 386
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN12@GetClipPar:
; Line 391
	movsx	eax, WORD PTR _GUI_Context+10
	sub	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _Diff$[ebp], eax
; Line 392
	cmp	DWORD PTR _Diff$[ebp], 0
	jle	SHORT $LN11@GetClipPar
; Line 393
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN11@GetClipPar:
; Line 398
	mov	eax, DWORD PTR _XSize$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	movsx	eax, WORD PTR _GUI_Context+12
	sub	edx, eax
	mov	DWORD PTR _Diff$[ebp], edx
; Line 399
	cmp	DWORD PTR _Diff$[ebp], 0
	jle	SHORT $LN10@GetClipPar
; Line 400
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN10@GetClipPar:
; Line 405
	mov	eax, DWORD PTR _YSize$[ebp]
	mov	ecx, DWORD PTR _y0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	movsx	eax, WORD PTR _GUI_Context+14
	sub	edx, eax
	mov	DWORD PTR _Diff$[ebp], edx
; Line 406
	cmp	DWORD PTR _Diff$[ebp], 0
	jle	SHORT $LN9@GetClipPar
; Line 407
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN9@GetClipPar:
; Line 412
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR tv84[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv84[ebp], ecx
	cmp	DWORD PTR tv84[ebp], 31			; 0000001fH
	ja	$LN13@GetClipPar
	mov	edx, DWORD PTR tv84[ebp]
	movzx	eax, BYTE PTR $LN15@GetClipPar[edx]
	jmp	DWORD PTR $LN16@GetClipPar[eax*4]
$LN6@GetClipPar:
; Line 414
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sar	ecx, 3
	mov	edx, DWORD PTR _pParam$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 415
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 3
	mov	edx, DWORD PTR _pParam$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 416
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sar	ecx, 3
	mov	edx, DWORD PTR _BytesPerLine$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _pParam$[ebp]
	sub	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pParam$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 417
	jmp	$LN13@GetClipPar
$LN5@GetClipPar:
; Line 419
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sar	ecx, 1
	mov	edx, DWORD PTR _pParam$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 420
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 1
	mov	edx, DWORD PTR _pParam$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 421
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sar	ecx, 1
	mov	edx, DWORD PTR _BytesPerLine$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _pParam$[ebp]
	sub	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pParam$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 422
	jmp	$LN13@GetClipPar
$LN4@GetClipPar:
; Line 424
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR _pParam$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax], edx
; Line 425
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR _BytesPerLine$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pParam$[ebp]
	sub	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 426
	jmp	SHORT $LN13@GetClipPar
$LN3@GetClipPar:
; Line 428
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 1
	mov	edx, DWORD PTR _pParam$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 429
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	mov	edx, DWORD PTR _BytesPerLine$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _pParam$[ebp]
	sub	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pParam$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 430
	jmp	SHORT $LN13@GetClipPar
$LN2@GetClipPar:
; Line 432
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	imul	ecx, 3
	mov	edx, DWORD PTR _pParam$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 433
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 3
	mov	edx, DWORD PTR _BytesPerLine$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _pParam$[ebp]
	sub	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pParam$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 434
	jmp	SHORT $LN13@GetClipPar
$LN1@GetClipPar:
; Line 436
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 2
	mov	edx, DWORD PTR _pParam$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 437
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 2
	mov	edx, DWORD PTR _BytesPerLine$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _pParam$[ebp]
	sub	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pParam$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN13@GetClipPar:
; Line 440
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@GetClipPar:
	DD	$LN6@GetClipPar
	DD	$LN5@GetClipPar
	DD	$LN4@GetClipPar
	DD	$LN3@GetClipPar
	DD	$LN2@GetClipPar
	DD	$LN1@GetClipPar
	DD	$LN13@GetClipPar
$LN15@GetClipPar:
	DB	0
	DB	6
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
__GetClipParam ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_LCD_Index2Color_M555:PROC
EXTRN	_LCD_GetpfColor2IndexEx:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitmap_16bpp
_TEXT	SEGMENT
_Color$9980 = -164					; size = 4
_Value$9979 = -152					; size = 2
_Param$ = -140						; size = 24
_pData$ = -108						; size = 4
_SkipBytes$ = -96					; size = 4
_Step$ = -84						; size = 4
_y$ = -72						; size = 4
_x$ = -60						; size = 4
_BytesPerLine$ = -48					; size = 4
_pfColor2Index$ = -36					; size = 4
_pNextPixel_API$ = -24					; size = 4
_Index$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pContext$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_XSize$ = 20						; size = 4
_YSize$ = 24						; size = 4
__DrawBitmap_16bpp PROC					; COMDAT
; Line 520
	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 529
	mov	DWORD PTR _Param$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _Param$[ebp+4], eax
	mov	DWORD PTR _Param$[ebp+8], eax
	mov	DWORD PTR _Param$[ebp+12], eax
	mov	DWORD PTR _Param$[ebp+16], eax
	mov	DWORD PTR _Param$[ebp+20], eax
; Line 531
	mov	eax, DWORD PTR _XSize$[ebp]
	shl	eax, 4
	add	eax, 31					; 0000001fH
	sar	eax, 5
	shl	eax, 2
	mov	DWORD PTR _BytesPerLine$[ebp], eax
; Line 535
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BytesPerLine$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _YSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _XSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	__GetClipParam
	add	esp, 28					; 0000001cH
; Line 536
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _Param$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 540
	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _YSize$[ebp]
	push	ecx
	call	__GetStep
	add	esp, 8
	mov	DWORD PTR _Step$[ebp], eax
; Line 541
	cmp	DWORD PTR _Step$[ebp], 0
	jne	SHORT $LN13@DrawBitmap@3
; Line 542
	mov	eax, 1
	jmp	$LN14@DrawBitmap@3
$LN13@DrawBitmap@3:
; Line 547
	cmp	DWORD PTR _Step$[ebp], 0
	jge	SHORT $LN12@DrawBitmap@3
; Line 548
	cmp	DWORD PTR _Param$[ebp+20], 0
	jle	SHORT $LN11@DrawBitmap@3
; Line 549
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	imul	eax, DWORD PTR _Param$[ebp+20]
	mov	ecx, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 550
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _Param$[ebp+20]
	mov	DWORD PTR _y$[ebp], eax
$LN11@DrawBitmap@3:
; Line 552
	jmp	SHORT $LN10@DrawBitmap@3
$LN12@DrawBitmap@3:
; Line 553
	cmp	DWORD PTR _Param$[ebp+16], 0
	jle	SHORT $LN10@DrawBitmap@3
; Line 554
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	imul	eax, DWORD PTR _Param$[ebp+16]
	mov	ecx, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 555
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _Param$[ebp+16]
	mov	DWORD PTR _y$[ebp], eax
$LN10@DrawBitmap@3:
; Line 558
	mov	eax, DWORD PTR _Param$[ebp+16]
	add	eax, DWORD PTR _Param$[ebp+20]
	mov	ecx, DWORD PTR _YSize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _YSize$[ebp], ecx
; Line 562
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _Param$[ebp+12]
	mov	DWORD PTR _x0$[ebp], eax
; Line 563
	mov	eax, DWORD PTR _Param$[ebp+8]
	add	eax, DWORD PTR _Param$[ebp+12]
	mov	ecx, DWORD PTR _XSize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _XSize$[ebp], ecx
; Line 564
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	sub	eax, DWORD PTR _Param$[ebp+4]
	mov	DWORD PTR _SkipBytes$[ebp], eax
; Line 568
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_LCD_GetpfColor2IndexEx
	add	esp, 4
	mov	DWORD PTR _pfColor2Index$[ebp], eax
; Line 569
	mov	DWORD PTR _pNextPixel_API$[ebp], OFFSET __NextPixel_API
; Line 570
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _Param$[ebp+16]
	mov	ecx, DWORD PTR _YSize$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _XSize$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _Param$[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pNextPixel_API$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@DrawBitmap@3:
; Line 575
	push	0
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Param$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN5@DrawBitmap@3
; Line 576
	mov	eax, 1
	jmp	$LN14@DrawBitmap@3
$LN5@DrawBitmap@3:
; Line 578
	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN4@DrawBitmap@3
$LN3@DrawBitmap@3:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN4@DrawBitmap@3:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _XSize$[ebp]
	jge	SHORT $LN2@DrawBitmap@3
; Line 581
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _Value$9979[ebp], ax
; Line 582
	movzx	eax, WORD PTR _Value$9979[ebp]
	push	eax
	call	_LCD_Index2Color_M555
	add	esp, 4
	mov	DWORD PTR _Color$9980[ebp], eax
; Line 583
	mov	esi, esp
	mov	eax, DWORD PTR _Color$9980[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Index$[ebp], eax
; Line 584
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pNextPixel_API$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 585
	jmp	SHORT $LN3@DrawBitmap@3
$LN2@DrawBitmap@3:
; Line 586
	cmp	DWORD PTR _y$[ebp], 0
	je	SHORT $LN1@DrawBitmap@3
; Line 587
	mov	eax, DWORD PTR _pNextPixel_API$[ebp]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DrawBitmap@3:
; Line 592
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _SkipBytes$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 593
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _Step$[ebp]
	mov	DWORD PTR _y$[ebp], eax
; Line 594
	mov	eax, DWORD PTR _YSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _YSize$[ebp], eax
	jne	$LN8@DrawBitmap@3
; Line 595
	mov	eax, DWORD PTR _pNextPixel_API$[ebp]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 596
	xor	eax, eax
$LN14@DrawBitmap@3:
; Line 624
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@DrawBitmap@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 360				; 00000168H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@DrawBitmap@3:
	DD	3
	DD	$LN19@DrawBitmap@3
$LN19@DrawBitmap@3:
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN16@DrawBitmap@3
	DD	-108					; ffffff94H
	DD	4
	DD	$LN17@DrawBitmap@3
	DD	-140					; ffffff74H
	DD	24					; 00000018H
	DD	$LN18@DrawBitmap@3
$LN18@DrawBitmap@3:
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN17@DrawBitmap@3:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN16@DrawBitmap@3:
	DB	121					; 00000079H
	DB	0
__DrawBitmap_16bpp ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitmap_24bpp
_TEXT	SEGMENT
_BytesPerLine$ = -8					; size = 4
_pContext$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_XSize$ = 20						; size = 4
_YSize$ = 24						; size = 4
__DrawBitmap_24bpp PROC					; COMDAT
; Line 740
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 742
	mov	eax, DWORD PTR _XSize$[ebp]
	imul	eax, 24					; 00000018H
	add	eax, 31					; 0000001fH
	sar	eax, 5
	shl	eax, 2
	mov	DWORD PTR _BytesPerLine$[ebp], eax
; Line 743
	push	3
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _YSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _XSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	__DrawBitmap_RGB
	add	esp, 28					; 0000001cH
; Line 744
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitmap_24bpp ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_GUI_GetpfColor2IndexEx:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitmap_RGB
_TEXT	SEGMENT
_Color$10023 = -188					; size = 4
_b$10022 = -173						; size = 1
_g$10021 = -161						; size = 1
_r$10020 = -149						; size = 1
_pColor$10019 = -140					; size = 4
_Param$ = -128						; size = 24
_pData$ = -96						; size = 4
_SkipBytes$ = -84					; size = 4
_Step$ = -72						; size = 4
_y$ = -60						; size = 4
_x$ = -48						; size = 4
_pfColor2Index$ = -36					; size = 4
_pNextPixel_API$ = -24					; size = 4
_Index$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pContext$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_XSize$ = 20						; size = 4
_YSize$ = 24						; size = 4
_BytesPerLine$ = 28					; size = 4
_BytesPerPixel$ = 32					; size = 4
__DrawBitmap_RGB PROC					; COMDAT
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 384				; 00000180H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 638
	mov	DWORD PTR _Param$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _Param$[ebp+4], eax
	mov	DWORD PTR _Param$[ebp+8], eax
	mov	DWORD PTR _Param$[ebp+12], eax
	mov	DWORD PTR _Param$[ebp+16], eax
	mov	DWORD PTR _Param$[ebp+20], eax
; Line 643
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BytesPerLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _BytesPerPixel$[ebp]
	shl	edx, 3
	push	edx
	mov	eax, DWORD PTR _YSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _XSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	call	__GetClipParam
	add	esp, 28					; 0000001cH
; Line 644
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _Param$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 648
	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _YSize$[ebp]
	push	ecx
	call	__GetStep
	add	esp, 8
	mov	DWORD PTR _Step$[ebp], eax
; Line 649
	cmp	DWORD PTR _Step$[ebp], 0
	jne	SHORT $LN13@DrawBitmap@4
; Line 650
	mov	eax, 1
	jmp	$LN14@DrawBitmap@4
$LN13@DrawBitmap@4:
; Line 655
	cmp	DWORD PTR _Step$[ebp], 0
	jge	SHORT $LN12@DrawBitmap@4
; Line 656
	cmp	DWORD PTR _Param$[ebp+20], 0
	jle	SHORT $LN11@DrawBitmap@4
; Line 657
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	imul	eax, DWORD PTR _Param$[ebp+20]
	mov	ecx, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 658
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _Param$[ebp+20]
	mov	DWORD PTR _y$[ebp], eax
$LN11@DrawBitmap@4:
; Line 660
	jmp	SHORT $LN10@DrawBitmap@4
$LN12@DrawBitmap@4:
; Line 661
	cmp	DWORD PTR _Param$[ebp+16], 0
	jle	SHORT $LN10@DrawBitmap@4
; Line 662
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	imul	eax, DWORD PTR _Param$[ebp+16]
	mov	ecx, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 663
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _Param$[ebp+16]
	mov	DWORD PTR _y$[ebp], eax
$LN10@DrawBitmap@4:
; Line 666
	mov	eax, DWORD PTR _Param$[ebp+16]
	add	eax, DWORD PTR _Param$[ebp+20]
	mov	ecx, DWORD PTR _YSize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _YSize$[ebp], ecx
; Line 670
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _Param$[ebp+12]
	mov	DWORD PTR _x0$[ebp], eax
; Line 671
	mov	eax, DWORD PTR _Param$[ebp+8]
	add	eax, DWORD PTR _Param$[ebp+12]
	mov	ecx, DWORD PTR _XSize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _XSize$[ebp], ecx
; Line 672
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	sub	eax, DWORD PTR _Param$[ebp+4]
	mov	DWORD PTR _SkipBytes$[ebp], eax
; Line 676
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_GUI_GetpfColor2IndexEx
	add	esp, 4
	mov	DWORD PTR _pfColor2Index$[ebp], eax
; Line 677
	mov	DWORD PTR _pNextPixel_API$[ebp], OFFSET __NextPixel_API
; Line 678
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _Param$[ebp+16]
	mov	ecx, DWORD PTR _YSize$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _XSize$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _Param$[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pNextPixel_API$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@DrawBitmap@4:
; Line 683
	push	0
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Param$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	_GUI_BMP__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN5@DrawBitmap@4
; Line 684
	mov	eax, 1
	jmp	$LN14@DrawBitmap@4
$LN5@DrawBitmap@4:
; Line 686
	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN4@DrawBitmap@4
$LN3@DrawBitmap@4:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN4@DrawBitmap@4:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _XSize$[ebp]
	jge	$LN2@DrawBitmap@4
; Line 687
	mov	eax, DWORD PTR _x$[ebp]
	imul	eax, DWORD PTR _BytesPerPixel$[ebp]
	add	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pColor$10019[ebp], eax
; Line 690
	mov	eax, DWORD PTR _pColor$10019[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$10022[ebp], cl
; Line 691
	mov	eax, DWORD PTR _pColor$10019[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR _g$10021[ebp], cl
; Line 692
	mov	eax, DWORD PTR _pColor$10019[ebp]
	mov	cl, BYTE PTR [eax+2]
	mov	BYTE PTR _r$10020[ebp], cl
; Line 693
	movzx	eax, BYTE PTR _b$10022[ebp]
	shl	eax, 16					; 00000010H
	movzx	ecx, BYTE PTR _g$10021[ebp]
	shl	ecx, 8
	or	eax, ecx
	movzx	edx, BYTE PTR _r$10020[ebp]
	or	eax, edx
	mov	DWORD PTR _Color$10023[ebp], eax
; Line 694
	mov	esi, esp
	mov	eax, DWORD PTR _Color$10023[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Index$[ebp], eax
; Line 695
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pNextPixel_API$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 696
	jmp	$LN3@DrawBitmap@4
$LN2@DrawBitmap@4:
; Line 697
	cmp	DWORD PTR _y$[ebp], 0
	je	SHORT $LN1@DrawBitmap@4
; Line 698
	mov	eax, DWORD PTR _pNextPixel_API$[ebp]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DrawBitmap@4:
; Line 703
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _SkipBytes$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 704
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _Step$[ebp]
	mov	DWORD PTR _y$[ebp], eax
; Line 705
	mov	eax, DWORD PTR _YSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _YSize$[ebp], eax
	jne	$LN8@DrawBitmap@4
; Line 706
	mov	eax, DWORD PTR _pNextPixel_API$[ebp]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 707
	xor	eax, eax
$LN14@DrawBitmap@4:
; Line 734
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@DrawBitmap@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 384				; 00000180H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@DrawBitmap@4:
	DD	3
	DD	$LN19@DrawBitmap@4
$LN19@DrawBitmap@4:
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN16@DrawBitmap@4
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN17@DrawBitmap@4
	DD	-128					; ffffff80H
	DD	24					; 00000018H
	DD	$LN18@DrawBitmap@4
$LN18@DrawBitmap@4:
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN17@DrawBitmap@4:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN16@DrawBitmap@4:
	DB	121					; 00000079H
	DB	0
__DrawBitmap_RGB ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitmap_32bpp
_TEXT	SEGMENT
_BytesPerLine$ = -8					; size = 4
_pContext$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_XSize$ = 20						; size = 4
_YSize$ = 24						; size = 4
__DrawBitmap_32bpp PROC					; COMDAT
; Line 750
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 752
	mov	eax, DWORD PTR _XSize$[ebp]
	shl	eax, 2
	mov	DWORD PTR _BytesPerLine$[ebp], eax
; Line 753
	push	4
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _YSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _XSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	__DrawBitmap_RGB
	add	esp, 28					; 0000001cH
; Line 754
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitmap_32bpp ENDP
_TEXT	ENDS
PUBLIC	_GUI_BMP_Draw
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_BMP_Draw
_TEXT	SEGMENT
_Param$ = -8						; size = 4
_pBMP$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_GUI_BMP_Draw PROC					; COMDAT
; Line 1003
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1004
	mov	DWORD PTR _Param$[ebp], 0
; Line 1005
	mov	eax, DWORD PTR _pBMP$[ebp]
	mov	DWORD PTR _Param$[ebp], eax
; Line 1006
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Param$[ebp]
	push	edx
	push	OFFSET _GUI_BMP__GetData
	call	_GUI_BMP_DrawEx
	add	esp, 16					; 00000010H
; Line 1007
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GUI_BMP_Dr@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@GUI_BMP_Dr@2:
	DD	1
	DD	$LN4@GUI_BMP_Dr@2
$LN4@GUI_BMP_Dr@2:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@GUI_BMP_Dr@2
$LN3@GUI_BMP_Dr@2:
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_GUI_BMP_Draw ENDP
_TEXT	ENDS
END
