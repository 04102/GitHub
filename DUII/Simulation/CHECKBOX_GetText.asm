; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Widget\CHECKBOX_GetText.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_CHECKBOX_GetText
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_GUI_ALLOC_LockH:PROC
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_CHECKBOX_LockH:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\widget\checkbox_gettext.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _CHECKBOX_GetText
_TEXT	SEGMENT
_pText$11227 = -44					; size = 4
_hpText$11224 = -32					; size = 4
_pObj$11223 = -20					; size = 4
_Len$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pBuffer$ = 12						; size = 4
_MaxLen$ = 16						; size = 4
_CHECKBOX_GetText PROC					; COMDAT
; Line 38
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 39
	mov	DWORD PTR _Len$[ebp], 0
; Line 40
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN3@CHECKBOX_G
; Line 44
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_CHECKBOX_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$11223[ebp], eax
; Line 45
	mov	eax, DWORD PTR _pObj$11223[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	DWORD PTR _hpText$11224[ebp], ecx
; Line 46
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$11223[ebp], 0
; Line 47
	mov	eax, DWORD PTR _pObj$11223[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	SHORT $LN3@CHECKBOX_G
; Line 49
	mov	eax, DWORD PTR _hpText$11224[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$11227[ebp], eax
; Line 50
	mov	eax, DWORD PTR _pText$11227[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _Len$[ebp], eax
; Line 51
	mov	eax, DWORD PTR _MaxLen$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _Len$[ebp], eax
	jle	SHORT $LN1@CHECKBOX_G
; Line 52
	mov	eax, DWORD PTR _MaxLen$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Len$[ebp], eax
$LN1@CHECKBOX_G:
; Line 54
	mov	eax, DWORD PTR _Len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$11227[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBuffer$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 55
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$11227[ebp], 0
; Line 56
	mov	eax, DWORD PTR _pBuffer$[ebp]
	add	eax, DWORD PTR _Len$[ebp]
	mov	BYTE PTR [eax], 0
$LN3@CHECKBOX_G:
; Line 60
	mov	eax, DWORD PTR _Len$[ebp]
; Line 61
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CHECKBOX_GetText ENDP
_TEXT	ENDS
END
