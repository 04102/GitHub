; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\ConvertColor\GUICC_M8565.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_LCD_API_ColorConv_M8565
CONST	SEGMENT
_LCD_API_ColorConv_M8565 DD FLAT:__Color2Index_M8565
	DD	FLAT:_Index2Color_M8565
	DD	FLAT:__GetIndexMask_M8565
CONST	ENDS
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\convertcolor\guicc_m8565.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __Color2Index_M8565
_TEXT	SEGMENT
_Alpha$ = -44						; size = 4
_b$ = -32						; size = 4
_g$ = -20						; size = 4
_r$ = -8						; size = 4
_Color$ = 8						; size = 4
__Color2Index_M8565 PROC				; COMDAT
; Line 51
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 54
	mov	eax, DWORD PTR _Color$[ebp]
	and	eax, -16777216				; ff000000H
	xor	eax, -16777216				; ff000000H
	mov	DWORD PTR _Alpha$[ebp], eax
; Line 55
	mov	eax, DWORD PTR _Color$[ebp]
	shr	eax, 3
	and	eax, 31					; 0000001fH
	mov	DWORD PTR _r$[ebp], eax
; Line 56
	mov	eax, DWORD PTR _Color$[ebp]
	shr	eax, 10					; 0000000aH
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _g$[ebp], eax
; Line 57
	mov	eax, DWORD PTR _Color$[ebp]
	shr	eax, 19					; 00000013H
	and	eax, 31					; 0000001fH
	mov	DWORD PTR _b$[ebp], eax
; Line 58
	mov	eax, DWORD PTR _g$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	shl	ecx, 11					; 0000000bH
	add	eax, ecx
	or	eax, DWORD PTR _Alpha$[ebp]
; Line 59
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__Color2Index_M8565 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _Index2Color_M8565
_TEXT	SEGMENT
_Alpha$ = -44						; size = 4
_b$ = -32						; size = 4
_g$ = -20						; size = 4
_r$ = -8						; size = 4
_Index$ = 8						; size = 4
_Index2Color_M8565 PROC					; COMDAT
; Line 65
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 68
	mov	eax, DWORD PTR _Index$[ebp]
	and	eax, -16777216				; ff000000H
	xor	eax, -16777216				; ff000000H
	mov	DWORD PTR _Alpha$[ebp], eax
; Line 70
	mov	eax, DWORD PTR _Index$[ebp]
	and	eax, 31					; 0000001fH
	mov	DWORD PTR _b$[ebp], eax
; Line 71
	mov	eax, DWORD PTR _Index$[ebp]
	shr	eax, 5
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _g$[ebp], eax
; Line 72
	mov	eax, DWORD PTR _Index$[ebp]
	shr	eax, 11					; 0000000bH
	and	eax, 31					; 0000001fH
	mov	DWORD PTR _r$[ebp], eax
; Line 74
	mov	eax, DWORD PTR _r$[ebp]
	imul	eax, 255				; 000000ffH
	xor	edx, edx
	mov	ecx, 31					; 0000001fH
	div	ecx
	mov	DWORD PTR _r$[ebp], eax
; Line 75
	mov	eax, DWORD PTR _g$[ebp]
	imul	eax, 255				; 000000ffH
	xor	edx, edx
	mov	ecx, 63					; 0000003fH
	div	ecx
	mov	DWORD PTR _g$[ebp], eax
; Line 76
	mov	eax, DWORD PTR _b$[ebp]
	imul	eax, 255				; 000000ffH
	xor	edx, edx
	mov	ecx, 31					; 0000001fH
	div	ecx
	mov	DWORD PTR _b$[ebp], eax
; Line 77
	mov	eax, DWORD PTR _g$[ebp]
	shl	eax, 8
	add	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 16					; 00000010H
	add	eax, ecx
	or	eax, DWORD PTR _Alpha$[ebp]
; Line 78
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Index2Color_M8565 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetIndexMask_M8565
_TEXT	SEGMENT
__GetIndexMask_M8565 PROC				; COMDAT
; Line 84
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 85
	or	eax, -1
; Line 86
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetIndexMask_M8565 ENDP
_TEXT	ENDS
END
