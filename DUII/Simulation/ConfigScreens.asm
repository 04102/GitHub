; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\DUII\ConfigScreens.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_SystemSettingsPaint
PUBLIC	_DisplaySystemSettings
PUBLIC	_ReviewSessionsPaint
PUBLIC	_DisplayReviewSessions
PUBLIC	_RaceSetupPaint
PUBLIC	_DisplayRaceSetup
PUBLIC	_GoRacingPaint
PUBLIC	_DisplayGoRacing
PUBLIC	_slideoutXPos
PUBLIC	_slideoutYPos
PUBLIC	_hSlideoutTimer
PUBLIC	_backKeyPressedTime
PUBLIC	_configKeyPressedTime
PUBLIC	_hSlideout
PUBLIC	_hSUStatusSprite
PUBLIC	_hCameraSprite
PUBLIC	_hSignalStrengthSprite
PUBLIC	_pressingbutton_semaphore
PUBLIC	_processingScreenTransition
PUBLIC	_glbBlackoutFlag
PUBLIC	_ConfigScreenList
PUBLIC	_reviewingSession
PUBLIC	_MAIN_SCREEN_INFO
PUBLIC	_GO_RACING_INFO
PUBLIC	_RACE_SETUP_INFO
PUBLIC	_SYSTEMS_SETUP_INFO
PUBLIC	_REVIEW_SESSIONS_INFO
PUBLIC	_SESSION_DETAILS_INFO
PUBLIC	_SELECT_DRIVER_INFO
PUBLIC	_SELECT_VEHICLE_INFO
PUBLIC	_SELECT_TRACK_INFO
PUBLIC	_CHOOSE_TRACK_INFO
PUBLIC	_LAP_QUAL_INFO
PUBLIC	_VEHICLE_SETTINGS_INFO
PUBLIC	_TRACK_SETTINGS_INFO
PUBLIC	_TRACK_TYPE_INFO
PUBLIC	_LAP_HOLD_INFO
PUBLIC	_START_FINISH_INFO
PUBLIC	_PREDICTIVE_LAP_INFO
PUBLIC	_DISPLAY_SETTINGS_INFO
PUBLIC	_UNITS_SETTINGS_INFO
PUBLIC	_TIME_SETTINGS_INFO
PUBLIC	_AUTOSTART_SETTINGS_INFO
PUBLIC	_STORAGE_SETTINGS_INFO
PUBLIC	_PREDICTIVE_SCALE_INFO
PUBLIC	_TACH_SETTINGS_INFO
PUBLIC	_TACH_PWREND_INFO
PUBLIC	_TACH_WARNING_INFO
PUBLIC	_TACH_REDLINE_INFO
PUBLIC	_TACH_MAXRPM_INFO
PUBLIC	_NUM_CYL_INFO
PUBLIC	_AERO_GRIP_INFO
PUBLIC	_CAR_METRICS_INFO
PUBLIC	_GEAR_RATIO_INFO
PUBLIC	_TIRE_SIZE_INFO
PUBLIC	_TIRE_DIMENSIONS_INFO
PUBLIC	_DIFF_RATIO_INFO
PUBLIC	_TRANS_RATIO_INFO
PUBLIC	_INPUTS_INFO
PUBLIC	_WEIGHT_INFO
PUBLIC	_CAMERA_INFO
PUBLIC	_CAMERA_SETUP_INFO
PUBLIC	_CAMERA_DELAY_INFO
PUBLIC	_ANALOG_SETTINGS_INFO
PUBLIC	_DIGITAL_SETTINGS_INFO
PUBLIC	_ANALOG_SCALE_INFO
PUBLIC	_ANALOG_ALARM_INFO
PUBLIC	_DIGITAL_ALARM_INFO
PUBLIC	_PERSONALIZE_INFO
PUBLIC	_DRAG_STAGE_SCREEN_INFO
PUBLIC	_AUTOX_STAGE_SCREEN_INFO
PUBLIC	_RECORD_SPEED_INFO
EXTRN	_TEXT_CreateIndirect:PROC
EXTRN	_BUTTON_CreateIndirect:PROC
EXTRN	_FRAMEWIN_CreateIndirect:PROC
_DATA	SEGMENT
COMM	_slideoutStepTime:DWORD
COMM	_raceModeState:DWORD
COMM	_hScreenTimer:DWORD
COMM	_slideoutState:DWORD
COMM	_userAbort:BYTE
COMM	_hDisplayClosestTracks:DWORD
COMM	_hBestTime:DWORD
COMM	_hSelectedReviewMode:DWORD
COMM	_searchingSemaphore:BYTE
COMM	_screen_scrolling:DWORD
COMM	_pHelpText:DWORD
COMM	_hListView:DWORD
COMM	_hDetailsButton:DWORD
COMM	_selectedRaceMode:DWORD
COMM	_hDeleteButton:DWORD
COMM	_slideoutStepSize:DWORD
COMM	_pHelpTitle:DWORD
COMM	_selectedSessionUnsorted:DWORD
COMM	_selectedSessionSorted:DWORD
COMM	_hSavingDataDialog:DWORD
COMM	_numSessions:DWORD
COMM	_hRecordModeButton:DWORD
_DATA	ENDS
_BSS	SEGMENT
_slideoutXPos DD 01H DUP (?)
_slideoutYPos DD 01H DUP (?)
_hSlideoutTimer DD 01H DUP (?)
_backKeyPressedTime DD 01H DUP (?)
_configKeyPressedTime DD 01H DUP (?)
_hSlideout DD	01H DUP (?)
_hSUStatusSprite DD 01H DUP (?)
_hCameraSprite DD 01H DUP (?)
_hSignalStrengthSprite DD 01H DUP (?)
_pressingbutton_semaphore DD 01H DUP (?)
_processingScreenTransition DB 01H DUP (?)
	ALIGN	4

_glbBlackoutFlag DD 01H DUP (?)
_hConfigScreen DD 01H DUP (?)
_waitedForSF DB	01H DUP (?)
	ALIGN	4

_GSignoreRelease DB 01H DUP (?)
	ALIGN	4

_reviewingSession DB 01H DUP (?)
	ALIGN	4

$SG21216 DB	01H DUP (?)
	ALIGN	4

$SG22068 DB	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
_MAIN_SCREEN_INFO DB 'Go Racing to record data or show instruments.', 0aH
	DB	0aH, 'Race Review to see sessions and lap times.', 0aH, 0aH, 'R'
	DB	'ace Setup to select Driver, Vehicle, or Track or set up Input'
	DB	's.', 0aH, 0aH, 'System Setup for display, time, storage, and '
	DB	'other general settings.', 0aH, 0aH, 'Icons: Camera Status, SD'
	DB	' Card Status, GPS Signal Strength', 00H
	ORG $+3
_GO_RACING_INFO DB 'Lap/Race to record data on closed circuit racetrack.', 0aH
	DB	0aH, 'Auto-X/Rally for launch-enabled separate start/finish re'
	DB	'cording.', 0aH, 0aH, 'Drive - touch left side of button for g'
	DB	'eneral drive recording. Right side of button toggles recordin'
	DB	'g for this mode.', 0aH, 0aH, 'Drag for launch-enabled drag ra'
	DB	'ce performance modes including 1/8mile, 1000'', and 1/4mile.', 0aH
	DB	0aH, 'Press Red Back Button to go up one menu or hold for Main'
	DB	' Menu.', 0aH, 0aH, 'Icons: Camera Status, SD Card Status, GPS'
	DB	' Signal Strength', 00H
	ORG $+4
_RACE_SETUP_INFO DB 'Driver to select or create driver.', 0aH, 0aH, 'Vehi'
	DB	'cle to select or create vehicle or edit tach, gearing, inputs'
	DB	', and camera settings.', 0aH, 0aH, 'Track to manually select '
	DB	'or create track.', 0aH, 0aH, 'Laps/Qualify to choose Laps or '
	DB	'Qualifying Predictive Timing Mode.', 0aH, 'In Lap Mode, lap t'
	DB	'ime is compared with best ever at this track.', 0aH, 'In Qual'
	DB	'ifying Mode, lap time is compared with best time in the curre'
	DB	'nt session.', 0aH, 0aH, 'Press Red Back Button to go up one m'
	DB	'enu or hold for Main Menu.', 0aH, 0aH, 'Icons: Camera Status,'
	DB	' SD Card Status, GPS Signal Strength', 00H
	ORG $+3
_SYSTEMS_SETUP_INFO DB 'Display to adjust backlight and LED intensity.', 0aH
	DB	0aH, 'Units to select between US and Metric units.', 0aH, 0aH, 'T'
	DB	'ime to select Time Zone, Daylight Savings Time, and GPS Simul'
	DB	'ation.', 0aH, 0aH, 'Startup to Enable AutoStart and AutoOn fe'
	DB	'atures.', 0aH, 0aH, 'WiFi/SD to manage SD card and configure '
	DB	'wireless download feature.', 0aH, 0aH, 'Predictive Graph Scal'
	DB	'e to set scale of Predictive Lap Timer on timing screens.', 0aH
	DB	0aH, 'Press Red Back Button to go up one menu or hold for Main'
	DB	' Menu.', 0aH, 0aH, 'Icons: Camera Status, SD Card Status, GPS'
	DB	' Signal Strength', 00H
	ORG $+4
_REVIEW_SESSIONS_INFO DB 'Shows date that session was recorded, session n'
	DB	'umber on that day, and track.', 0aH, 0aH, 'Touch any session '
	DB	'on list to select.', 0aH, 'Touch column headings to sort.', 0aH
	DB	'Touch scrollbar to see additional laps.', 0aH, 0aH, 'Touch la'
	DB	'rge button on lower left to show Best Time, Driver, and Vehic'
	DB	'le.', 0aH, 0aH, 'Touch second button on bottom to show sessio'
	DB	'ns recorded in Race, AutoX, Drive, and Drag Race modes.', 0aH
	DB	0aH, 'Use Details to see session lap times and other session i'
	DB	'nformation.', 0aH, 0aH, 'Delete will erase currently selected'
	DB	' session.', 0aH, 0aH, 'Press Red Back Button to go up one men'
	DB	'u or hold for Main Menu.', 0aH, 0aH, 'Icons: Camera Status, S'
	DB	'D Card Status, GPS Signal Strength', 00H
_SESSION_DETAILS_INFO DB 'Touch blue button to step through session detai'
	DB	'l pages.', 0aH, 0aH, 'TIMING', 0aH, 'For Race mode, shows lap'
	DB	' number, lap time in list and session information on right. B'
	DB	'est Lap shown in green.', 0aH, 'For Drag mode, shows time sli'
	DB	'p.', 0aH, 0aH, 'Touch column headings to sort.', 0aH, 'Touch '
	DB	'scrollbar to see additional laps.', 0aH, 0aH, 'GENERAL', 0aH, 'S'
	DB	'hows session duration in minutes, distance traveled in sessio'
	DB	'n, range of satellites seen during session, and Dilution of P'
	DB	'recision indicating quality of satellites available. For DOP '
	DB	'lower numbers are better.', 0aH, 0aH, 'PERFORMANCE', 0aH, 'Sh'
	DB	'ows Max Performance Values such as speed and accelerometer Gs'
	DB	'.', 0aH, 0aH, 'INPUTS', 0aH, 'Shows tach overrevs, and range '
	DB	'of all enabled analog inputs.', 0aH, 0aH, 'CONFIG', 0aH, 'Sho'
	DB	'ws which analogs, digitals, and cameras are enabled.', 0aH, 0aH
	DB	'Press Red Back Button to go up one menu or hold for Main Menu'
	DB	'.', 0aH, 0aH, 'Icons: Camera Status, SD Card Status, GPS Sign'
	DB	'al Strength', 00H
	ORG $+2
_SELECT_DRIVER_INFO DB 'Use list to select driver. Exit screen when compl'
	DB	'ete.', 0aH, 0aH, 'New Driver to create a driver.', 0aH, 0aH, 'E'
	DB	'dit Name to change selected driver''s name.', 0aH, 0aH, 'Dele'
	DB	'te Driver to remove driver from list.', 0aH, 0aH, 'Press Red '
	DB	'Back Button to go up one menu or hold for Main Menu.', 0aH, 0aH
	DB	'Icons: Camera Status, SD Card Status, GPS Signal Strength', 00H
	ORG $+7
_SELECT_VEHICLE_INFO DB 'Use list to select vehicle. Exit screen when com'
	DB	'plete.', 0aH, 0aH, 'Vehicle Settings to change tach, inputs, '
	DB	'camera, gearing, etc.', 0aH, 0aH, 'New Vehicle to create a ve'
	DB	'hicle.', 0aH, 0aH, 'Edit Name to change selected vehicle''s n'
	DB	'ame.', 0aH, 0aH, 'Delete Vehicle to remove vehicle from list.'
	DB	0aH, 0aH, 'Press Red Back Button to go up one menu or hold for'
	DB	' Main Menu.', 0aH, 0aH, 'Icons: Camera Status, SD Card Status'
	DB	', GPS Signal Strength', 00H
	ORG $+1
_SELECT_TRACK_INFO DB 'Use list to select track. Exit screen when complet'
	DB	'e.', 0aH, 0aH, 'Top orange button chooses range of tracks to '
	DB	'display.', 0aH, 0aH, 'Settings to change start/finish, track '
	DB	'type, clear predictive lap, and set lap hold time.', 0aH, 0aH
	DB	'Right button on second line to select which type of tracks to'
	DB	' show, Road Race, Drive, AutoX, and Drag.', 0aH, 0aH, 'New Tr'
	DB	'ack to create a track.', 0aH, 0aH, 'Edit Name to change selec'
	DB	'ted track''s name.', 0aH, 0aH, 'Delete Track to remove track '
	DB	'from list.', 0aH, 0aH, 'Press Red Back Button to go up one me'
	DB	'nu or hold for Main Menu.', 0aH, 0aH, 'Icons: Camera Status, '
	DB	'SD Card Status, GPS Signal Strength', 00H
	ORG $+3
_CHOOSE_TRACK_INFO DB 'Reaching this screen indicates that the currently '
	DB	'selected track is not close to your current GPS location.', 0aH
	DB	'The tracks nearby are shown in the list or you can have TraqD'
	DB	'ash automatically create a new track.', 0aH, 0aH, 'Use list t'
	DB	'o select track.', 0aH, 0aH, 'Confirm Track when track is sele'
	DB	'cted.', 0aH, 0aH, 'Auto-Create Track to create a track.', 0aH
	DB	0aH, 'New Track to create a track by name.', 0aH, 0aH, 'Press '
	DB	'Red Back Button to go up one menu or hold for Main Menu.', 0aH
	DB	0aH, 'Icons: Camera Status, SD Card Status, GPS Signal Strengt'
	DB	'h', 00H
_LAP_QUAL_INFO DB 'Select Lap or Qualifying Mode for the Predictive Lap T'
	DB	'iming.', 0aH, 0aH, 'NOTE: Lapping Mode compares against the B'
	DB	'est Lap recorded at this track.', 0aH, 0aH, 'Qualifying Mode '
	DB	'compares against only the best lap within the current session'
	DB	'.', 0aH, 0aH, 'Press Red Back Button to go up one menu or hol'
	DB	'd for Main Menu.', 0aH, 0aH, 'Icons: Camera Status, SD Card S'
	DB	'tatus, GPS Signal Strength', 00H
	ORG $+6
_VEHICLE_SETTINGS_INFO DB 'Tach to change range of tach LEDs.', 0aH, 0aH, 'A'
	DB	'ero/Grip to change tire and vehicle aero settings.', 0aH, 0aH
	DB	'Gear Ratio to enter gear and diff ratios for gear display.', 0aH
	DB	0aH, 'Inputs to change analog, digital inputs for this vehicle'
	DB	'.', 0aH, 0aH, 'Weight to enter vehicle weight.', 0aH, 0aH, 'C'
	DB	'amera to select a camera for this vehicle.', 0aH, 0aH, 'Press'
	DB	' Red Back Button to go up one menu or hold for Main Menu.', 0aH
	DB	0aH, 'Icons: Camera Status, SD Card Status, GPS Signal Strengt'
	DB	'h', 00H
_TRACK_SETTINGS_INFO DB 'Track Type to change configuration of race track'
	DB	'.', 0aH, 0aH, 'Lap Holdtime to change duration that lap time '
	DB	'help on display.', 0aH, 0aH, 'Start/Finish to clear start/fin'
	DB	'ish or enter new coordinates.', 0aH, 0aH, 'Predictive Lap to '
	DB	'clear predictive lap data for selected track.', 0aH, 0aH, 'Pr'
	DB	'ess Red Back Button to go up one menu or hold for Main Menu.', 0aH
	DB	0aH, 'Icons: Camera Status, SD Card Status, GPS Signal Strengt'
	DB	'h', 00H
	ORG $+4
_TRACK_TYPE_INFO DB 'Road Race - Closed = road course with start/finish.', 0aH
	DB	0aH, 'Auto-X/Rally - Open = autocross or rally stage with laun'
	DB	'ch mode and separate start and finish.', 0aH, 0aH, 'Dragstrip'
	DB	' - Open = launch mode for 1/8 mi, 1/4 mi, or 1000'' distance.'
	DB	0aH, 0aH, 'Oval - Closed = oval track with start/finish.', 0aH
	DB	0aH, 'Hill Climb - Open = rolling start stage with separate st'
	DB	'art and finish.', 0aH, 0aH, 'Drive - Open = record data over '
	DB	'distance with start at beginning, finish at end.', 0aH, 0aH, 'P'
	DB	'ress Red Back Button to go up one menu or hold for Main Menu.'
	DB	0aH, 0aH, 'Icons: Camera Status, SD Card Status, GPS Signal St'
	DB	'rength', 00H
_LAP_HOLD_INFO DB 'Use list wheel to select lap hold time. Exit screen wh'
	DB	'en complete.', 0aH, 0aH, 'This is the amount of time the prev'
	DB	'ious lap time will be displayed after crossing the start / fi'
	DB	'nish line.', 0aH, 0aH, 'Press Red Back Button to go up one me'
	DB	'nu or hold for Main Menu.', 0aH, 0aH, 'Icons: Camera Status, '
	DB	'SD Card Status, GPS Signal Strength', 00H
	ORG $+6
_START_FINISH_INFO DB 'Touch LAT, LON, and HEADING buttons to enter the c'
	DB	'oordinates.', 0aH, 'Example: 34.150383, -83.814232, 121', 0aH
	DB	0aH, 'Clear Start/Finish to clear coordinates and set during t'
	DB	'he next session.', 0aH, 'This will also clear the Predictive '
	DB	'Lap information.', 0aH, 0aH, 'Press Red Back Button to go up '
	DB	'one menu or hold for Main Menu.', 0aH, 0aH, 'Icons: Camera St'
	DB	'atus, SD Card Status, GPS Signal Strength', 00H
	ORG $+4
_PREDICTIVE_LAP_INFO DB 'Reset Time to clear the predictive lap time info'
	DB	'rmation for this track.', 0aH, 0aH, 'Press Red Back Button to'
	DB	' go up one menu or hold for Main Menu.', 0aH, 0aH, 'Icons: Ca'
	DB	'mera Status, SD Card Status, GPS Signal Strength', 00H
	ORG $+5
_DISPLAY_SETTINGS_INFO DB 'Use sliders to set LCD backlight and Tach and '
	DB	'Warning LED intensity.', 0aH, 0aH, 'Auto-Adjust ON will autom'
	DB	'atically adjust brightness for changes in ambient light.', 0aH
	DB	0aH, 'Press Red Back Button to go up one menu or hold for Main'
	DB	' Menu.', 0aH, 0aH, 'Icons: Camera Status, SD Card Status, GPS'
	DB	' Signal Strength', 00H
	ORG $+5
_UNITS_SETTINGS_INFO DB 'Select US or Metric units.', 0aH, 0aH, 'Press Re'
	DB	'd Back Button to go up one menu or hold for Main Menu.', 0aH, 0aH
	DB	'Icons: Camera Status, SD Card Status, GPS Signal Strength', 00H
	ORG $+2
_TIME_SETTINGS_INFO DB 'Use list wheel to set time zone.', 0aH, 0aH, 'Day'
	DB	'light Savings ON/OFF will add or subtract an hour.', 0aH, 0aH
	DB	'When Normal GPS is shown, system is attempting to use real GP'
	DB	'S signal. Pressing this button will cause system to enter GPS'
	DB	' Simulation Mode.', 0aH, 0aH, 'When Simulating GPS is shown, '
	DB	'system is using a fake GPS signal. This is useful for testing'
	DB	' cameras or doing dyno runs when GPS signal cannot be receive'
	DB	'd. Pressing this button will cause system to stop simulation '
	DB	'and enter Normal GPS Mode.', 0aH, 0aH, 'Press Red Back Button'
	DB	' to go up one menu or hold for Main Menu.', 0aH, 0aH, 'Icons:'
	DB	' Camera Status, SD Card Status, GPS Signal Strength', 00H
	ORG $+7
_AUTOSTART_SETTINGS_INFO DB 'Auto Power On switches between power on with'
	DB	' TraqDash button and power on when power is applied to the Tr'
	DB	'aqmate system. Note that Auto Power On will disable the power'
	DB	' button and only works when connected to a second generation '
	DB	'Sensor Unit (black label, 3 axis).', 0aH, 0aH, 'AutoStart to '
	DB	'Race Screens will allow the unit to start recording if unit w'
	DB	'as powered down on a recording screen. AutoStart to Menu Scre'
	DB	'ens will start on the last menu screen visited.', 0aH, 0aH, 'P'
	DB	'ress Record Settings to set a speed to start recording and a '
	DB	'sitting still time to stop recording.', 0aH, 0aH, 'Press Red '
	DB	'Back Button to go up one menu or hold for Main Menu.', 0aH, 0aH
	DB	'Icons: Camera Status, SD Card Status, GPS Signal Strength', 00H
	ORG $+2
_STORAGE_SETTINGS_INFO DB 'Erase All Sessions will erase all data session'
	DB	's from the SD card but retain other settings.', 0aH, 0aH, 'Fa'
	DB	'ctory Defaults will erase all data sessions, drivers, vehicle'
	DB	's, and tracks, to return to factory settings. Non-Traqmate da'
	DB	'ta is not affected.', 0aH, 0aH, 'Format SD Card will format t'
	DB	'he card and reset to factory settings. All data on SD card is'
	DB	' lost.', 0aH, 0aH, 'Personalize/WiFi will let you enter your '
	DB	'Owner Name and Contact Info, configure the WiFi download feat'
	DB	'ure and show serial number and build date.', 0aH, 0aH, 'Press'
	DB	' Red Back Button to go up one menu or hold for Main Menu.', 0aH
	DB	0aH, 'Icons: Camera Status, SD Card Status, GPS Signal Strengt'
	DB	'h', 00H
	ORG $+5
_PREDICTIVE_SCALE_INFO DB 'Use list wheel to choose the scale for the pre'
	DB	'dictive lap time graphic.', 0aH, 0aH, 'For example, 1 second '
	DB	'= +- 1 second.', 0aH, 0aH, 'Press Red Back Button to go up on'
	DB	'e menu or hold for Main Menu.', 0aH, 0aH, 'Icons: Camera Stat'
	DB	'us, SD Card Status, GPS Signal Strength', 00H
	ORG $+7
_TACH_SETTINGS_INFO DB 'Current RPM is live engine speed for reference.', 0aH
	DB	0aH, 'Max RPM to set the true redline of the vehicle.', 0aH, 0aH
	DB	'Drag red slider to RPM where red shift light will illuminate.'
	DB	' Touch corresponding number value for fine tuning.', 0aH, 0aH
	DB	'Drag yellow slider to RPM where first yellow shift light will'
	DB	' illuminate. Touch corresponding number value for fine tuning'
	DB	'.', 0aH, 0aH, 'Drag green slider to set engine cylinders or t'
	DB	'ouch number. Engine Cyl is the divider for the RPM, often equ'
	DB	'al to number of cylinders.', 0aH, 0aH, 'Press Red Back Button'
	DB	' to go up one menu or hold for Main Menu.', 0aH, 0aH, 'Icons:'
	DB	' Camera Status, SD Card Status, GPS Signal Strength', 00H
	ORG $+7
_TACH_PWREND_INFO DB 'Use list wheel to set the powerband end tach RPM.', 0aH
	DB	0aH, 'This is the end of the green tach area and has no effect'
	DB	' on the tach warning LEDs.', 0aH, 0aH, 'Press Red Back Button'
	DB	' to go up one menu or hold for Main Menu.', 0aH, 0aH, 'Icons:'
	DB	' Camera Status, SD Card Status, GPS Signal Strength', 00H
	ORG $+7
_TACH_WARNING_INFO DB 'Use list wheel to set the warning tach RPM.', 0aH, 0aH
	DB	'This is the start of the yellow tach area and starting RPM fo'
	DB	'r warning LEDs.', 0aH, 0aH, 'The RPM between WARNING and REDL'
	DB	'INE is divided evenly to set the RPM where the yellow LEDs wi'
	DB	'll illuminate.', 0aH, 0aH, 'Press Red Back Button to go up on'
	DB	'e menu or hold for Main Menu.', 0aH, 0aH, 'Icons: Camera Stat'
	DB	'us, SD Card Status, GPS Signal Strength', 00H
	ORG $+6
_TACH_REDLINE_INFO DB 'Use list wheel to set the redline tach RPM.', 0aH, 0aH
	DB	'This is the RPM where the red tach LED will illuminate.', 0aH
	DB	0aH, 'The RPM between WARNING and REDLINE is divided evenly to'
	DB	' set the RPM where the yellow LEDs will illuminate.', 0aH, 0aH
	DB	'Press Red Back Button to go up one menu or hold for Main Menu'
	DB	'.', 0aH, 0aH, 'Icons: Camera Status, SD Card Status, GPS Sign'
	DB	'al Strength', 00H
	ORG $+3
_TACH_MAXRPM_INFO DB 'Use list wheel to set the maximum tach RPM.', 0aH, 0aH
	DB	'This is the maximum value for the tach display and the limit '
	DB	'for the Traqview graph.', 0aH, 0aH, 'Press Red Back Button to'
	DB	' go up one menu or hold for Main Menu.', 0aH, 0aH, 'Icons: Ca'
	DB	'mera Status, SD Card Status, GPS Signal Strength', 00H
	ORG $+3
_NUM_CYL_INFO DB 'Use list wheel to set divider for the RPM to adjust the'
	DB	' tach value displayed.', 0aH, 0aH, 'NOTE: For ECU tach wire c'
	DB	'onnection, use cylinders = 1 or cylinders = 2.', 0aH, 0aH, 'P'
	DB	'ress Red Back Button to go up one menu or hold for Main Menu.'
	DB	0aH, 0aH, 'Icons: Camera Status, SD Card Status, GPS Signal St'
	DB	'rength', 00H
	ORG $+6
_AERO_GRIP_INFO DB 'These settings are used to calculate horsepower.', 0aH
	DB	0aH, 'Use slider to set aerodynamic drag of vehicle.', 0aH, 0aH
	DB	'Use slider to set tire friction coefficient of vehicle.', 0aH
	DB	0aH, 'NOTE:See User Manual for suggested settings.', 0aH, 0aH, 'P'
	DB	'ress Red Back Button to go up one menu or hold for Main Menu.'
	DB	0aH, 0aH, 'Icons: Camera Status, SD Card Status, GPS Signal St'
	DB	'rength', 00H
	ORG $+5
_CAR_METRICS_INFO DB 'This screen displays and controls various cumulativ'
	DB	'e metrics. Respective reset buttons clear the cumulative metr'
	DB	'ics. Note that metrics span multiple sessions and power cycle'
	DB	's.', 0aH, 0aH, 'Total time is how long the Traqmate has been '
	DB	'operated since last cleared.', 0aH, 0aH, 'Total distance is a'
	DB	'mount the vehicle has traveled since last cleared.', 0aH, 0aH
	DB	'Max RPM is the maximum RPM recorded since last cleared.', 0aH
	DB	0aH, 'Aero/Grip values are vehicle settings related to HP calc'
	DB	'ulations.The Aero/Grip button transfers to setup screen for A'
	DB	'ero/Grip settings.', 0aH, 0aH, 'Press Red Back Button to go u'
	DB	'p one menu or hold for Main Menu.', 0aH, 0aH, 'Icons: Camera '
	DB	'Status, SD Card Status, GPS Signal Strength', 00H
	ORG $+1
_GEAR_RATIO_INFO DB 'These settings are used to calculate the gear number'
	DB	' shown on tach screen.', 0aH, 0aH, 'Tire Size to enter size o'
	DB	'f drive wheels/tires.', 0aH, 0aH, 'Diff Ratio to enter ratio '
	DB	'of differential to drive wheels.', 0aH, 0aH, 'Trans Ratio to '
	DB	'enter transmission gear ratios.', 0aH, 0aH, 'Press Red Back B'
	DB	'utton to go up one menu or hold for Main Menu.', 0aH, 0aH, 'I'
	DB	'cons: Camera Status, SD Card Status, GPS Signal Strength.', 0aH
	DB	0aH, 'NOTE: In order to determine which gear is selected in th'
	DB	'e vehicle, the complete gearing information for the vehicle m'
	DB	'ust be known.  This includes the gear ratios as well as the d'
	DB	'ifferential ratio and the tire rolling circumference. If you '
	DB	'do not wish to use this feature it can be disabled by enterin'
	DB	'g a differential ratio of 0.00. If this value is entered you '
	DB	'will be asked to confirm that you do not wish to calculate ge'
	DB	'ar ratios. If accepted then the calculated gear position will'
	DB	' not be displayed.', 00H
	ORG $+6
_TIRE_SIZE_INFO DB 'These settings are used to calculate the gear number '
	DB	'shown on tach screen.', 0aH, 0aH, 'Tire Size to enter informa'
	DB	'tion based on manufacturer tire size.', 0aH, 0aH, 'Tire circu'
	DB	'mference to manually measure and enter the circumference of t'
	DB	'he tire.', 0aH, 0aH, 'Tire circumference is in inches or cent'
	DB	'imeters, depending on units setting.', 0aH, 0aH, 'NOTE: In or'
	DB	'der to determine which gear is selected in the vehicle, the c'
	DB	'ircumference. (distance around) the tire must be measured.  T'
	DB	'his is the distance the vehicle travels for every revolution '
	DB	'of the tire. You may enter the number on the sidewall of the '
	DB	'tire using the calculator or you can measure the distance aro'
	DB	'und the tire with a tape measure.  Most tire circumferences a'
	DB	're in the range of 50in (127cm) to 150in (381cm).', 0aH, 0aH, 'P'
	DB	'ress Red Back Button to go up one menu or hold for Main Menu.'
	DB	0aH, 0aH, 'Icons: Camera Status, SD Card Status, GPS Signal St'
	DB	'rength', 00H
	ORG $+7
_TIRE_DIMENSIONS_INFO DB 'These settings are used to calculate the gear n'
	DB	'umber shown on tach screen.', 0aH, 0aH, 'Select the manufactu'
	DB	'rer tire size (usually found on sidewall).', 0aH, 0aH, 'First'
	DB	' column is tire width in mm.', 0aH, 0aH, 'Second column is ti'
	DB	're aspect ratio.', 0aH, 0aH, 'Third column is wheel diameter '
	DB	'in inches.', 0aH, 0aH, 'Press Red Back Button to go up one me'
	DB	'nu or hold for Main Menu.', 0aH, 0aH, 'Icons: Camera Status, '
	DB	'SD Card Status, GPS Signal Strength', 00H
	ORG $+7
_DIFF_RATIO_INFO DB 'These settings are used to calculate the gear number'
	DB	' shown on tach screen.', 0aH, 0aH, 'Use the list wheels to en'
	DB	'ter the 3 digit differential ratio.', 0aH, 0aH, 'NOTE: Enter '
	DB	'0.00 to disable the gear number display on the tach screen.', 0aH
	DB	0aH, 'For example, if differential ratio is 4.10:1, enter 4.10'
	DB	'.', 0aH, 0aH, 'Press Red Back Button to go up one menu or hol'
	DB	'd for Main Menu.', 0aH, 0aH, 'Icons: Camera Status, SD Card S'
	DB	'tatus, GPS Signal Strength', 00H
_TRANS_RATIO_INFO DB 'These settings are used to calculate the gear numbe'
	DB	'r shown on tach screen.', 0aH, 0aH, 'Touch each of the ratios'
	DB	' in turn to enter the gear ratios.', 0aH, 0aH, 'For example, '
	DB	'if gear ratio is 1.33:1, enter 1.33.', 0aH, 0aH, 'Press Red B'
	DB	'ack Button to go up one menu or hold for Main Menu.', 0aH, 0aH
	DB	'Icons: Camera Status, SD Card Status, GPS Signal Strength', 00H
	ORG $+3
_INPUTS_INFO DB	'Touch the Analog or Digital to enable or disable the inp'
	DB	'ut.', 0aH, 0aH, 'When enabled, the analog buttons show the va'
	DB	'lue of the input in the defined units.', 0aH, 0aH, 'When enab'
	DB	'led, the digital buttons show the named logical state of the '
	DB	'input.', 0aH, 0aH, 'Press Red Back Button to go up one menu o'
	DB	'r hold for Main Menu.', 0aH, 0aH, 'Icons: Camera Status, SD C'
	DB	'ard Status, GPS Signal Strength', 00H
	ORG $+7
_WEIGHT_INFO DB	'Use the list wheels to enter the 4 digit weight in pound'
	DB	's or kilograms, depending on Unit setting.', 0aH, 0aH, 'Press'
	DB	' Red Back Button to go up one menu or hold for Main Menu.', 0aH
	DB	0aH, 'Icons: Camera Status, SD Card Status, GPS Signal Strengt'
	DB	'h', 00H
	ORG $+2
_CAMERA_INFO DB	'Use the list to select a camera for the Traqmate to cont'
	DB	'rol or NONE if no camera is connected.', 0aH, 0aH, 'If GoPro '
	DB	'HERO1 or HERO2, choose the selection for the appropriate Sens'
	DB	'or Unit interface module.', 0aH, 0aH, 'If Replay XD1080, choo'
	DB	'se the selection for the appropriate Sensor Unit interface mo'
	DB	'dule.', 0aH, 0aH, 'If Replay Mini or Prime X, choose the appr'
	DB	'opriate selection.', 0aH, 0aH, 'If Sony HD camcorder, select '
	DB	'Sony HD.', 0aH, 0aH, 'If RaceCam HD camcorder, choose RaceCam'
	DB	' HD.', 0aH, 0aH, 'If ChaseCam PDR-100 connected via TraqData '
	DB	'HD (LANC), select ChaseCam SD LANC.', 0aH, 0aH, 'NOTE: ChaseC'
	DB	'am PDR-100 connected via TraqSync or TraqData II and all Sony'
	DB	' SD camcorders are no longer supported.', 0aH, 0aH, 'Press Re'
	DB	'd Back Button to go up one menu or hold for Main Menu.', 0aH, 0aH
	DB	'Icons: Camera Status, SD Card Status, GPS Signal Strength', 00H
	ORG $+7
_CAMERA_SETUP_INFO DB 'Enables/disables and configures cameras.', 0aH, 0aH
	DB	'TraqDash USB Cam toggles enabling of camera attached to the T'
	DB	'raqDash USB port.', 0aH, 0aH, 'TraqDash Cam Delay sets the st'
	DB	'artup time for the USB camera. If a camera is attached to the'
	DB	' Sensor Unit, the USB camera will be delayed by the set time.'
	DB	' Otherwise, the data collection will be delayed by the set ti'
	DB	'me to allow the camera time to initialize.', 0aH, 0aH, 'If no'
	DB	' SU camera is connected, use these values: Mobius or Innovv c'
	DB	'amera = 4.0s, ReplayXD = 7.4s.', 0aH, 0aH, 'Sensor Unit Cam s'
	DB	'elects the camera type which is attached to the Sensor Unit v'
	DB	'ia TraqData or TraqSync modules.', 0aH, 0aH, 'Test Cameras wi'
	DB	'll send out the command to turn on all enabled cameras to all'
	DB	'ow them to be tested. Cameras will be turned off when you lea'
	DB	've this screen or press Test Cameras a second time.', 0aH, 0aH
	DB	'Press Red Back Button to go up one menu or hold for Main Menu'
	DB	'.', 0aH, 0aH, 'Icons: Camera Status, SD Card Status, GPS Sign'
	DB	'al Strength', 00H
	ORG $+3
_CAMERA_DELAY_INFO DB 'Use the list wheel to choose the number of seconds'
	DB	'. If a camera is attached to the Sensor Unit, the USB camera '
	DB	'will be delayed by the set time. Otherwise, the data collecti'
	DB	'on will be delayed by the set time to allow the camera time t'
	DB	'o initialize.Minimum value is 0.0 and maximum value is 9.9.', 0aH
	DB	0aH, 'Use approximately 7.4 seconds for a Replay camera and 4.'
	DB	'0 second for a Mobius Action Cam.', 0aH, 0aH, 'Press Red Back'
	DB	' Button to go up one menu or hold for Main Menu.', 0aH, 0aH, 'I'
	DB	'cons: Camera Status, SD Card Status, GPS Signal Strength', 00H
	ORG $+5
_ANALOG_SETTINGS_INFO DB 'Shows the physical and alarm state of the analo'
	DB	'g input.', 0aH, 0aH, 'Enable or Disable button to turn on or '
	DB	'off recording of this input.', 0aH, 0aH, 'Edit Scale to chang'
	DB	'e between voltage ranges.', 0aH, 0aH, 'Edit Alarm to assign a'
	DB	'n alarm range to an Alarm LED.', 0aH, 0aH, 'Rename Input to c'
	DB	'hange the name of the analog input.', 0aH, 0aH, 'Rename Units'
	DB	' to change the name of the units displayed.', 0aH, 0aH, 'Some'
	DB	' common inputs:', 0aH, 0aH, '** AEM AirFuel **', 0aH, 'Volts:'
	DB	' LOW 0V HIGH 5V,', 0aH, 'Values: LOW 8.5 HIGH 18.0,', 0aH, '5'
	DB	' Volt Range,', 0aH, 'Units = "Ratio",', 0aH, 'Alarm Above 13.'
	DB	'7', 0aH, 0aH, '** AEM 75PSI MAP Sensor **', 0aH, 'Volts: LOW '
	DB	'0.5V HIGH 4.5V,', 0aH, 'Values: LOW -14.7 HIGH 35.3,', 0aH, '5'
	DB	' Volt Range,', 0aH, 'Units = "PSI"', 0aH, 0aH, '** AEM Temper'
	DB	'ature Sensor **', 0aH, 'Volts: LOW 0.016V HIGH 0.9V,', 0aH, 'V'
	DB	'alues: LOW 32.0 HIGH 230.0,', 0aH, '5 Volt Range,', 0aH, 'Uni'
	DB	'ts = "DegF"', 0aH, 0aH, '** PLX AirFuel **', 0aH, 'Volts: LOW'
	DB	' 0V HIGH 5V,', 0aH, 'Values: LOW 10.0 HIGH 20.0,', 0aH, '5 Vo'
	DB	'lt Range,', 0aH, 'Units = "Ratio",', 0aH, 'Alarm Above 13.7', 0aH
	DB	0aH, '** PLX Pressure Sensor **', 0aH, 'Volts: LOW 0.0V HIGH 3'
	DB	'.75V,', 0aH, 'Values: LOW 0.0 HIGH 150.0,', 0aH, '5 Volt Rang'
	DB	'e,', 0aH, 'Units = "PSI"', 0aH, 0aH, '** PLX Temperature Sens'
	DB	'or **', 0aH, 'Volts: LOW 0.0V HIGH 5.0V,', 0aH, 'Values: LOW '
	DB	'32.0 HIGH 302.0,', 0aH, '5 Volt Range,', 0aH, 'Units = "DegF"'
	DB	0aH, 0aH, '** PLX Exhaust Temperature **', 0aH, 'Volts: LOW 0.'
	DB	'0V HIGH 3.33V,', 0aH, 'Values: LOW 32.0 HIGH 1000.0,', 0aH, '5'
	DB	' Volt Range,', 0aH, 'Units = "DegF"', 0aH, 0aH, '** PLX Boost'
	DB	' Sensor **', 0aH, 'Volts: LOW 0.0V HIGH 5V,', 0aH, 'Values: L'
	DB	'OW -15 HIGH 30,', 0aH, '5 Volt Range,', 0aH, 'Units = "PSI"', 0aH
	DB	0aH, '** Innovate LC-1 AirFuel **', 0aH, 'Volts: LOW 0V HIGH 5'
	DB	'V,', 0aH, 'Values: LOW 7.35 HIGH 22.33,', 0aH, '5 Volt Range,'
	DB	0aH, 'Units = "Ratio",', 0aH, 'Alarm Above 13.7', 0aH, 0aH, '*'
	DB	'* APSX Wideband D1 AirFuel **', 0aH, 'Volts: LOW 0V HIGH 5V,', 0aH
	DB	'Values: LOW 9.0 HIGH 19.0,', 0aH, '5 Volt Range,', 0aH, 'Unit'
	DB	's = "Ratio",', 0aH, 'Alarm Above 13.7', 0aH, 0aH, '** Battery'
	DB	' Voltage **', 0aH, 'Volts: LOW 0V HIGH 20V,', 0aH, 'Values: L'
	DB	'OW 0.0 HIGH 20.0,', 0aH, '20 Volt Range,', 0aH, 'Units = "Vol'
	DB	'ts",', 0aH, 'Alarm Below 11.5', 0aH, 0aH, 'Press Red Back But'
	DB	'ton to go up one menu or hold for Main Menu.', 0aH, 0aH, 'Ico'
	DB	'ns: Camera Status, SD Card Status, GPS Signal Strength', 00H
	ORG $+4
_DIGITAL_SETTINGS_INFO DB 'Shows the physical state of the digital input.'
	DB	0aH, 0aH, 'Enable or Disable button to turn on or off recordin'
	DB	'g of this input.', 0aH, 0aH, 'Edit Alarm to assign one state '
	DB	'of the digital input to an Alarm LED.', 0aH, 0aH, 'Rename Inp'
	DB	'ut to change the name of the digtial input.', 0aH, 0aH, 'Rena'
	DB	'me High to change the name of the HIGH physical state.', 0aH, 0aH
	DB	'Rename Low to change the name of the LOW physical state.', 0aH
	DB	0aH, 'To Connect Brake Light:', 0aH, 'Set Input Name to "Brake'
	DB	'"', 0aH, 'Set HIGH Name to "Stop"', 0aH, 'Set LOW Name to "Go'
	DB	'"', 0aH, 0aH, 'Press Red Back Button to go up one menu or hol'
	DB	'd for Main Menu.', 0aH, 0aH, 'Icons: Camera Status, SD Card S'
	DB	'tatus, GPS Signal Strength', 00H
	ORG $+6
_ANALOG_SCALE_INFO DB 'This screen sets the scaling factors for the analo'
	DB	'g input from the voltage to the entered units.', 0aH, 0aH, 'V'
	DB	'olts sets the measured range of voltage from the LOW reading '
	DB	'to the HIGH reading.', 0aH, 0aH, 'Value sets the actual readi'
	DB	'ng range corresponding to the voltage range in the selected u'
	DB	'nits.', 0aH, 0aH, 'Voltage Range selects from 5, 10, or 20 vo'
	DB	'lt ranges from the TraqData input module.', 0aH, 0aH, 'NOTE: '
	DB	'The Volts range cannot be outside the selected Voltage Range.'
	DB	0aH, 0aH, 'Some common inputs:', 0aH, 0aH, '** AEM AirFuel **', 0aH
	DB	'Volts: LOW 0V HIGH 5V,', 0aH, 'Values: LOW 8.5 HIGH 18.0,', 0aH
	DB	'5 Volt Range,', 0aH, 'Units = "Ratio",', 0aH, 'Alarm Above 13'
	DB	'.7', 0aH, 0aH, '** AEM 75PSI MAP Sensor **', 0aH, 'Volts: LOW'
	DB	' 0.5V HIGH 4.5V,', 0aH, 'Values: LOW -14.7 HIGH 35.3,', 0aH, '5'
	DB	' Volt Range,', 0aH, 'Units = "PSI"', 0aH, 0aH, '** AEM Temper'
	DB	'ature Sensor **', 0aH, 'Volts: LOW 0.016V HIGH 0.9V,', 0aH, 'V'
	DB	'alues: LOW 32.0 HIGH 230.0,', 0aH, '5 Volt Range,', 0aH, 'Uni'
	DB	'ts = "DegF"', 0aH, 0aH, '** PLX AirFuel **', 0aH, 'Volts: LOW'
	DB	' 0V HIGH 5V,', 0aH, 'Values: LOW 10.0 HIGH 20.0,', 0aH, '5 Vo'
	DB	'lt Range,', 0aH, 'Units = "Ratio",', 0aH, 'Alarm Above 13.7', 0aH
	DB	0aH, '** PLX Pressure Sensor **', 0aH, 'Volts: LOW 0.0V HIGH 3'
	DB	'.75V,', 0aH, 'Values: LOW 0.0 HIGH 150.0,', 0aH, '5 Volt Rang'
	DB	'e,', 0aH, 'Units = "PSI"', 0aH, 0aH, '** PLX Temperature Sens'
	DB	'or **', 0aH, 'Volts: LOW 0.0V HIGH 5.0V,', 0aH, 'Values: LOW '
	DB	'32.0 HIGH 302.0,', 0aH, '5 Volt Range,', 0aH, 'Units = "DegF"'
	DB	0aH, 0aH, '** PLX Exhaust Temperature **', 0aH, 'Volts: LOW 0.'
	DB	'0V HIGH 3.33V,', 0aH, 'Values: LOW 32.0 HIGH 1000.0,', 0aH, '5'
	DB	' Volt Range,', 0aH, 'Units = "DegF"', 0aH, 0aH, '** PLX Boost'
	DB	' Sensor **', 0aH, 'Volts: LOW 0.0V HIGH 5V,', 0aH, 'Values: L'
	DB	'OW -15 HIGH 30,', 0aH, '5 Volt Range,', 0aH, 'Units = "PSI"', 0aH
	DB	0aH, '** Innovate LC-1 AirFuel **', 0aH, 'Volts: LOW 0V HIGH 5'
	DB	'V,', 0aH, 'Values: LOW 7.35 HIGH 22.33,', 0aH, '5 Volt Range,'
	DB	0aH, 'Units = "Ratio",', 0aH, 'Alarm Above 13.7', 0aH, 0aH, '*'
	DB	'* Battery Voltage **', 0aH, 'Volts: LOW 0V HIGH 20V,', 0aH, 'V'
	DB	'alues: LOW 0.0 HIGH 20.0,', 0aH, '20 Volt Range,', 0aH, 'Unit'
	DB	's = "Volts",', 0aH, 'Alarm Below 11.5', 0aH, 0aH, 'Press Red '
	DB	'Back Button to go up one menu or hold for Main Menu.', 0aH, 0aH
	DB	'Icons: Camera Status, SD Card Status, GPS Signal Strength', 00H
_ANALOG_ALARM_INFO DB 'LED 1 Enable / Disable to add or remove this input'
	DB	' from the', 0aH, 'Upper Warning LED.', 0aH, 0aH, 'LED 2 Enabl'
	DB	'e / Disable to add or remove this input from the', 0aH, 'Lowe'
	DB	'r Warning LED.', 0aH, 0aH, 'Alarm Level sets the limit for th'
	DB	'e alarm state, Above, Below, or Equal To the entered value.', 0aH
	DB	0aH, 'Press Red Back Button to go up one menu or hold for Main'
	DB	' Menu.', 0aH, 0aH, 'Icons: Camera Status, SD Card Status, GPS'
	DB	' Signal Strength', 00H
_DIGITAL_ALARM_INFO DB 'LED 1 Enable / Disable to add or remove this inpu'
	DB	't from the', 0aH, 'Upper warning LED.', 0aH, 0aH, 'LED 2 Enab'
	DB	'le / Disable to add or remove this input from the', 0aH, 'Low'
	DB	'er Warning LED.', 0aH, 0aH, 'Alarm State selects the logical '
	DB	'value corresponding to an alarm state.', 0aH, 0aH, 'Press Red'
	DB	' Back Button to go up one menu or hold for Main Menu.', 0aH, 0aH
	DB	'Icons: Camera Status, SD Card Status, GPS Signal Strength', 00H
	ORG $+6
_PERSONALIZE_INFO DB 'TraqDash owner to change owner name.', 0aH, 0aH, 'C'
	DB	'ontact Info to enter a phone number or email address in case '
	DB	'of loss or service.', 0aH, 0aH, 'WiFi Name is the broadcast n'
	DB	'ame for the wireless download option.', 0aH, 0aH, 'WiFi Passw'
	DB	'ord is the password for the wireless network. Must be at leas'
	DB	't 8 characters.', 0aH, 0aH, 'Screen also shows unit serial nu'
	DB	'mber and build date.', 0aH, 0aH, 'Press Red Back Button to go'
	DB	' up one menu or hold for Main Menu.', 0aH, 0aH, 'Icons: Camer'
	DB	'a Status, SD Card Status, GPS Signal Strength', 00H
	ORG $+4
_DRAG_STAGE_SCREEN_INFO DB 'Select timing screen from gauge screen button'
	DB	's on left of screen.', 0aH, 0aH, 'Select the drag strip lengt'
	DB	'h from buttons in center column of screen.', 0aH, 0aH, 'Touch'
	DB	' to Stage when the vehicle is stopped at the starting line. T'
	DB	'iming will begin when the vehicle starts moving.', 0aH, 0aH, 'P'
	DB	'ress Red Back Button to go up one menu or hold for Main Menu.'
	DB	00H
	ORG $+3
_AUTOX_STAGE_SCREEN_INFO DB 'Select timing screen from gauge screen butto'
	DB	'ns on left of screen.', 0aH, 0aH, 'Touch to Stage when the ve'
	DB	'hicle is stopped at the starting line. Timing will begin when'
	DB	' the vehicle starts moving.', 0aH, 0aH, 'Press Red Back Butto'
	DB	'n to go up one menu or hold for Main Menu.', 00H
	ORG $+2
_RECORD_SPEED_INFO DB 'Use list wheel to set the vehicle speed at which y'
	DB	'ou would like the Traqmate and cameras to begin recording. Th'
	DB	'en enter a Recording (Race or Drive) mode. Actual recording ('
	DB	'data and video) will begin at the chosen speed.', 0aH, 0aH, 'U'
	DB	'se list wheel to set a stationary time. If the Traqmate is re'
	DB	'cording and the vehicle is not moving, recording will stop af'
	DB	'ter the chosen time expires.', 0aH, 0aH, 'Press Red Back Butt'
	DB	'on to go up one menu or hold for Main Menu.', 0aH, 0aH, 'Icon'
	DB	's: Camera Status, SD Card Status, GPS Signal Strength', 00H
_HelpPopup DD	FLAT:_FRAMEWIN_CreateIndirect
	DD	00H
	DW	00H
	DW	0aH
	DW	00H
	DW	01b8H
	DW	0106H
	DW	00H
	DD	00H
	DD	FLAT:_BUTTON_CreateIndirect
	DD	FLAT:$SG21763
	DW	01H
	DW	0aaH
	DW	0b4H
	DW	064H
	DW	02dH
	ORG $+6
_HelpWithDetailsPopup DD FLAT:_FRAMEWIN_CreateIndirect
	DD	00H
	DW	00H
	DW	0aH
	DW	00H
	DW	01b8H
	DW	0106H
	DW	00H
	DD	00H
	DD	FLAT:_BUTTON_CreateIndirect
	DD	FLAT:$SG21765
	DW	01H
	DW	050H
	DW	0b4H
	DW	064H
	DW	02dH
	ORG $+6
	DD	FLAT:_BUTTON_CreateIndirect
	DD	FLAT:$SG21766
	DW	06H
	DW	0e6H
	DW	0b4H
	DW	064H
	DW	02dH
	ORG $+6
_SavingDataResources DD FLAT:_FRAMEWIN_CreateIndirect
	DD	FLAT:$SG22023
	DW	00H
	DW	028H
	DW	014H
	DW	017cH
	DW	0dcH
	DW	00H
	DD	00H
	DD	FLAT:_TEXT_CreateIndirect
	DD	FLAT:$SG22024
	DW	00H
	DW	00H
	DW	01eH
	DW	0168H
	DW	01eH
	DW	02H
	ORG $+4
	DD	FLAT:_TEXT_CreateIndirect
	DD	FLAT:$SG22025
	DW	00H
	DW	00H
	DW	046H
	DW	0168H
	DW	01eH
	DW	02H
	ORG $+4
	DD	FLAT:_BUTTON_CreateIndirect
	DD	FLAT:$SG22026
	DW	0812H
	DW	082H
	DW	073H
	DW	064H
	DW	03cH
	ORG $+6
_NotSupportedResources DD FLAT:_FRAMEWIN_CreateIndirect
	DD	FLAT:$SG22203
	DW	00H
	DW	032H
	DW	014H
	DW	0168H
	DW	0dcH
	DW	00H
	DD	00H
	DD	FLAT:_TEXT_CreateIndirect
	DD	FLAT:$SG22204
	DW	00H
	DW	00H
	DW	019H
	DW	0168H
	DW	01eH
	DW	02H
	ORG $+4
	DD	FLAT:_TEXT_CreateIndirect
	DD	FLAT:$SG22205
	DW	00H
	DW	00H
	DW	041H
	DW	0168H
	DW	01eH
	DW	02H
	ORG $+4
	DD	FLAT:_BUTTON_CreateIndirect
	DD	FLAT:$SG22206
	DW	01H
	DW	082H
	DW	073H
	DW	064H
	DW	03cH
	ORG $+6
CONST	ENDS
_DATA	SEGMENT
_ConfigScreenList DD 00H
	DD	FLAT:_DisplayGoRacing
	DD	FLAT:_GoRacingPaint
	DD	01H
	DD	FLAT:_DisplayRaceSetup
	DD	FLAT:_RaceSetupPaint
	DD	02H
	DD	FLAT:_DisplayReviewSessions
	DD	FLAT:_ReviewSessionsPaint
	DD	03H
	DD	FLAT:_DisplaySystemSettings
	DD	FLAT:_SystemSettingsPaint
	DD	0ffffffffH
	DD	00H
	DD	00H
$SG21551 DB	'Main Menu', 00H
	ORG $+2
$SG21559 DB	'Go Racing Info', 00H
	ORG $+1
$SG21562 DB	'Race Setup Info', 00H
$SG21565 DB	'Review Sessions Info', 00H
	ORG $+3
$SG21568 DB	'System Setup Info', 00H
	ORG $+2
$SG21576 DB	'Driver Selection Info', 00H
	ORG $+2
$SG21580 DB	'Vehicle Selection Info', 00H
	ORG $+1
$SG21583 DB	'Track Selection Info', 00H
	ORG $+3
$SG21586 DB	'Laps/Qualifying Info', 00H
	ORG $+3
$SG21594 DB	'Display Settings Info', 00H
	ORG $+2
$SG21597 DB	'Units Selection Info', 00H
	ORG $+3
$SG21600 DB	'Time Zone Info', 00H
	ORG $+1
$SG21603 DB	'Auto Start Info', 00H
$SG21606 DB	'System Storage Info', 00H
$SG21609 DB	'Predictive Scale Info', 00H
	ORG $+2
$SG21612 DB	'Vehicle Settings Info', 00H
	ORG $+2
$SG21615 DB	'Aero/Grip Info', 00H
	ORG $+1
$SG21623 DB	'Tach Settings Info', 00H
	ORG $+1
$SG21626 DB	'Car Metrics Info', 00H
	ORG $+3
$SG21629 DB	'Gear Ratio Info', 00H
$SG21632 DB	'Inputs Info', 00H
$SG21635 DB	'Vehicle Weight Info', 00H
$SG21638 DB	'Camera Setup Info', 00H
	ORG $+2
$SG21646 DB	'Warning RPM Info', 00H
	ORG $+3
$SG21649 DB	'Redline RPM Info', 00H
	ORG $+3
$SG21652 DB	'Engine Cyl RPM Info', 00H
$SG21655 DB	'Powerband RPM Info', 00H
	ORG $+1
$SG21658 DB	'Max RPM Info', 00H
	ORG $+3
$SG21666 DB	'Analog Input Info', 00H
	ORG $+2
$SG21669 DB	'Digital Input Info', 00H
	ORG $+1
$SG21673 DB	'Check Times Info', 00H
	ORG $+3
$SG21676 DB	'Track Settings Info', 00H
$SG21684 DB	'Track Type Info', 00H
$SG21687 DB	'Hold Time Info', 00H
	ORG $+1
$SG21690 DB	'Start/Finish Line Info', 00H
	ORG $+1
$SG21693 DB	'Predictive Lap Info', 00H
$SG21702 DB	'Tire Size Selection Info', 00H
	ORG $+3
$SG21705 DB	'Diff Ratio Info', 00H
$SG21708 DB	'Transmission Ratios Info', 00H
	ORG $+3
$SG21718 DB	'Analog Scale Info', 00H
	ORG $+2
$SG21721 DB	'Analog Alarm Info', 00H
	ORG $+2
$SG21726 DB	'Digital Alarm Info', 00H
	ORG $+1
$SG21729 DB	'Tire Size Info', 00H
	ORG $+1
$SG21732 DB	'Choose Track Info', 00H
	ORG $+2
$SG21735 DB	'Personalize Unit Info', 00H
	ORG $+2
$SG21739 DB	'Autocross Stage Info', 00H
	ORG $+3
$SG21741 DB	'Drag Stage Info', 00H
$SG21743 DB	'Camera Delay Info', 00H
	ORG $+2
$SG21746 DB	'Camera Delay Info', 00H
	ORG $+2
$SG21749 DB	'Camera Selection Info', 00H
	ORG $+2
$SG21752 DB	'Record Speed Info', 00H
	ORG $+2
$SG21763 DB	'OK', 00H
	ORG $+1
$SG21765 DB	'OK', 00H
	ORG $+1
$SG21766 DB	'Tutorial', 00H
	ORG $+3
$SG21857 DB	'Date & Time', 00H
$SG21858 DB	'Session', 00H
$SG21859 DB	'Track / ', 00H
	ORG $+3
$SG21863 DB	'Mode', 00H
	ORG $+3
$SG21864 DB	'Delete', 00H
	ORG $+1
$SG21865 DB	'Details', 00H
$SG21880 DB	'Track / ', 00H
	ORG $+3
$SG21886 DB	' ', 00H
	ORG $+2
$SG21887 DB	'%d', 00H
	ORG $+1
$SG22023 DB	'System Status', 00H
	ORG $+2
$SG22024 DB	'Saving your session data', 00H
	ORG $+3
$SG22025 DB	'Please Wait', 00H
$SG22026 DB	'CANCEL', 00H
	ORG $+1
$SG22158 DB	0aH, 0aH, 'SYSTEM STATUS', 0aH, 'Owner: %s', 0aH, 'Contac'
	DB	't Info: %s', 0aH, 0aH, 00H
	ORG $+3
$SG22159 DB	'Inputs Configuration:', 0aH, 00H
	ORG $+1
$SG22164 DB	0aH, 'TraqDash Bootloader %2.2f', 00H
	ORG $+1
$SG22167 DB	0aH, 'TraqDash Firmware %2.2f', 0aH, 'Sensor Unit Firmwar'
	DB	'e %2.2f', 00H
$SG22171 DB	0aH, 0aH, 'DU Ser# %u, HW %2.2f, Built %02d/%02d', 0aH, 00H
	ORG $+3
$SG22176 DB	'SU Ser# %u, HW %2.2f, Built %02d/%02d', 00H
	ORG $+2
$SG22187 DB	'Analog Input %d: ', 00H
	ORG $+2
$SG22190 DB	'Disabled', 00H
	ORG $+3
$SG22191 DB	0aH, 00H
	ORG $+2
$SG22197 DB	'Digital Input %d: ', 00H
	ORG $+1
$SG22200 DB	'Disabled', 00H
	ORG $+3
$SG22201 DB	0aH, 00H
	ORG $+2
$SG22203 DB	'ERROR', 00H
	ORG $+2
$SG22204 DB	'This function is not supported', 00H
	ORG $+1
$SG22205 DB	'without an SD card inserted!', 00H
	ORG $+3
$SG22206 DB	'OK', 00H
_DATA	ENDS
PUBLIC	_SetLastScreen
EXTRN	_sysData:BYTE
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\duii\configscreens.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _SetLastScreen
_TEXT	SEGMENT
tv64 = -196						; size = 4
_screen_type$ = 8					; size = 4
_screen$ = 12						; size = 4
_SetLastScreen PROC					; COMDAT
; Line 956
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 957
	mov	eax, DWORD PTR _screen_type$[ebp]
	mov	DWORD PTR _sysData+20, eax
	mov	ecx, DWORD PTR _sysData+20
	mov	DWORD PTR tv64[ebp], ecx
	mov	edx, DWORD PTR tv64[ebp]
	sub	edx, 1
	mov	DWORD PTR tv64[ebp], edx
	cmp	DWORD PTR tv64[ebp], 21			; 00000015H
	ja	$LN21@SetLastScr
	mov	eax, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN23@SetLastScr[eax*4]
$LN18@SetLastScr:
; Line 959
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+24, eax
	jmp	$LN21@SetLastScr
$LN17@SetLastScr:
; Line 960
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+40, eax
	jmp	$LN21@SetLastScr
$LN16@SetLastScr:
; Line 961
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+44, eax
	jmp	$LN21@SetLastScr
$LN15@SetLastScr:
; Line 962
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+48, eax
	jmp	$LN21@SetLastScr
$LN14@SetLastScr:
; Line 963
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+52, eax
	jmp	$LN21@SetLastScr
$LN13@SetLastScr:
; Line 964
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+56, eax
	jmp	SHORT $LN21@SetLastScr
$LN12@SetLastScr:
; Line 965
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+60, eax
	jmp	SHORT $LN21@SetLastScr
$LN11@SetLastScr:
; Line 966
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+64, eax
	jmp	SHORT $LN21@SetLastScr
$LN10@SetLastScr:
; Line 967
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+28, eax
	jmp	SHORT $LN21@SetLastScr
$LN9@SetLastScr:
; Line 968
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+32, eax
	jmp	SHORT $LN21@SetLastScr
$LN8@SetLastScr:
; Line 969
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+36, eax
	jmp	SHORT $LN21@SetLastScr
$LN7@SetLastScr:
; Line 970
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+68, eax
	jmp	SHORT $LN21@SetLastScr
$LN6@SetLastScr:
; Line 971
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+72, eax
	jmp	SHORT $LN21@SetLastScr
$LN5@SetLastScr:
; Line 972
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+76, eax
	jmp	SHORT $LN21@SetLastScr
$LN4@SetLastScr:
; Line 973
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+80, eax
	jmp	SHORT $LN21@SetLastScr
$LN3@SetLastScr:
; Line 974
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+84, eax
	jmp	SHORT $LN21@SetLastScr
$LN2@SetLastScr:
; Line 975
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+88, eax
	jmp	SHORT $LN21@SetLastScr
$LN1@SetLastScr:
; Line 976
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR _sysData+92, eax
$LN21@SetLastScr:
; Line 978
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN23@SetLastScr:
	DD	$LN18@SetLastScr
	DD	$LN10@SetLastScr
	DD	$LN9@SetLastScr
	DD	$LN8@SetLastScr
	DD	$LN17@SetLastScr
	DD	$LN16@SetLastScr
	DD	$LN15@SetLastScr
	DD	$LN21@SetLastScr
	DD	$LN14@SetLastScr
	DD	$LN13@SetLastScr
	DD	$LN12@SetLastScr
	DD	$LN21@SetLastScr
	DD	$LN11@SetLastScr
	DD	$LN7@SetLastScr
	DD	$LN4@SetLastScr
	DD	$LN2@SetLastScr
	DD	$LN21@SetLastScr
	DD	$LN3@SetLastScr
	DD	$LN6@SetLastScr
	DD	$LN21@SetLastScr
	DD	$LN5@SetLastScr
	DD	$LN1@SetLastScr
_SetLastScreen ENDP
_TEXT	ENDS
PUBLIC	_GetScreenType
PUBLIC	_GetCurrentWindowHandle
EXTRN	_GetGeneralConfinScreenWindowHandle:PROC
EXTRN	_GetDigitalInputSettingsWindowHandle:PROC
EXTRN	_GetAnalogInputsScaleWindowHandle:PROC
EXTRN	_GetAnalogInputSettingsWindowHandle:PROC
EXTRN	_GetGearRatiosWindowHandle:PROC
EXTRN	_GetGearingWindowHandle:PROC
EXTRN	_GetTrackSettingsWindowHandle:PROC
EXTRN	_GetTrackSettingMainWindowHandle:PROC
EXTRN	_GetReviewSessionsWindowHandle:PROC
EXTRN	_GetInputsWindowHandle:PROC
EXTRN	_GetTachSetupWindowHandle:PROC
EXTRN	_GetRunningGaugesWindowHandle:PROC
EXTRN	_GetVehicleSettingsWindowHandle:PROC
EXTRN	_GetVehicleSettingMainWindowHandle:PROC
EXTRN	_GetSystemSettingsWindowHandle:PROC
EXTRN	_GetRaceSetupScreensWindowHandle:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetCurrentWindowHandle
_TEXT	SEGMENT
tv65 = -196						; size = 4
_GetCurrentWindowHandle PROC				; COMDAT
; Line 981
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 982
	call	_GetScreenType
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 19			; 00000013H
	ja	$LN1@GetCurrent
	mov	eax, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN23@GetCurrent[eax*4]
$LN18@GetCurrent:
; Line 984
	mov	eax, DWORD PTR _hConfigScreen
	jmp	SHORT $LN21@GetCurrent
$LN17@GetCurrent:
; Line 985
	call	_GetRaceSetupScreensWindowHandle
	jmp	SHORT $LN21@GetCurrent
$LN16@GetCurrent:
; Line 986
	call	_GetSystemSettingsWindowHandle
	jmp	SHORT $LN21@GetCurrent
$LN15@GetCurrent:
; Line 987
	call	_GetVehicleSettingMainWindowHandle
	jmp	SHORT $LN21@GetCurrent
$LN14@GetCurrent:
; Line 988
	call	_GetVehicleSettingsWindowHandle
	jmp	SHORT $LN21@GetCurrent
$LN13@GetCurrent:
; Line 991
	call	_GetRunningGaugesWindowHandle
	jmp	SHORT $LN21@GetCurrent
$LN12@GetCurrent:
; Line 992
	call	_GetTachSetupWindowHandle
	jmp	SHORT $LN21@GetCurrent
$LN11@GetCurrent:
; Line 993
	call	_GetInputsWindowHandle
	jmp	SHORT $LN21@GetCurrent
$LN10@GetCurrent:
; Line 994
	call	_GetReviewSessionsWindowHandle
	jmp	SHORT $LN21@GetCurrent
$LN9@GetCurrent:
; Line 995
	call	_GetTrackSettingMainWindowHandle
	jmp	SHORT $LN21@GetCurrent
$LN8@GetCurrent:
; Line 996
	call	_GetTrackSettingsWindowHandle
	jmp	SHORT $LN21@GetCurrent
$LN7@GetCurrent:
; Line 997
	call	_GetGearingWindowHandle
	jmp	SHORT $LN21@GetCurrent
$LN6@GetCurrent:
; Line 998
	call	_GetGearRatiosWindowHandle
	jmp	SHORT $LN21@GetCurrent
$LN5@GetCurrent:
; Line 999
	call	_GetAnalogInputSettingsWindowHandle
	jmp	SHORT $LN21@GetCurrent
$LN4@GetCurrent:
; Line 1000
	call	_GetAnalogInputsScaleWindowHandle
	jmp	SHORT $LN21@GetCurrent
$LN3@GetCurrent:
; Line 1001
	call	_GetDigitalInputSettingsWindowHandle
	jmp	SHORT $LN21@GetCurrent
$LN2@GetCurrent:
; Line 1002
	call	_GetGeneralConfinScreenWindowHandle
	jmp	SHORT $LN21@GetCurrent
$LN1@GetCurrent:
; Line 1003
	xor	eax, eax
$LN21@GetCurrent:
; Line 1005
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@GetCurrent:
	DD	$LN2@GetCurrent
	DD	$LN18@GetCurrent
	DD	$LN13@GetCurrent
	DD	$LN13@GetCurrent
	DD	$LN13@GetCurrent
	DD	$LN17@GetCurrent
	DD	$LN16@GetCurrent
	DD	$LN14@GetCurrent
	DD	$LN15@GetCurrent
	DD	$LN12@GetCurrent
	DD	$LN11@GetCurrent
	DD	$LN10@GetCurrent
	DD	$LN9@GetCurrent
	DD	$LN8@GetCurrent
	DD	$LN7@GetCurrent
	DD	$LN5@GetCurrent
	DD	$LN3@GetCurrent
	DD	$LN1@GetCurrent
	DD	$LN4@GetCurrent
	DD	$LN6@GetCurrent
_GetCurrentWindowHandle ENDP
_TEXT	ENDS
PUBLIC	_GaugeScreenIndexToID
PUBLIC	_GetLastScreen
EXTRN	_testMode:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetLastScreen
_TEXT	SEGMENT
tv64 = -196						; size = 4
_screenType$ = 8					; size = 4
_GetLastScreen PROC					; COMDAT
; Line 1008
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1009
	mov	eax, DWORD PTR _screenType$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 31			; 0000001fH
	ja	$LN1@GetLastScr
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN34@GetLastScr[edx]
	jmp	DWORD PTR $LN35@GetLastScr[eax*4]
$LN29@GetLastScr:
; Line 1011
	mov	eax, DWORD PTR _sysData+24
	jmp	$LN32@GetLastScr
$LN28@GetLastScr:
; Line 1012
	mov	eax, DWORD PTR _sysData+40
	jmp	$LN32@GetLastScr
$LN27@GetLastScr:
; Line 1013
	mov	eax, DWORD PTR _sysData+44
	jmp	$LN32@GetLastScr
$LN26@GetLastScr:
; Line 1014
	mov	eax, DWORD PTR _sysData+48
	jmp	$LN32@GetLastScr
$LN25@GetLastScr:
; Line 1015
	mov	eax, DWORD PTR _sysData+52
	jmp	$LN32@GetLastScr
$LN24@GetLastScr:
; Line 1016
	mov	eax, DWORD PTR _sysData+56
	jmp	$LN32@GetLastScr
$LN23@GetLastScr:
; Line 1017
	mov	eax, DWORD PTR _sysData+60
	jmp	$LN32@GetLastScr
$LN22@GetLastScr:
; Line 1018
	mov	eax, DWORD PTR _sysData+64
	jmp	$LN32@GetLastScr
$LN21@GetLastScr:
; Line 1020
	cmp	DWORD PTR _testMode, 0
	jne	SHORT $LN20@GetLastScr
; Line 1023
	cmp	DWORD PTR _sysData+32, 6
	jl	SHORT $LN19@GetLastScr
; Line 1024
	mov	DWORD PTR _sysData+32, 5
$LN19@GetLastScr:
; Line 1027
	mov	eax, DWORD PTR _sysData+32
	push	eax
	push	3
	call	_GaugeScreenIndexToID
	add	esp, 8
	cmp	eax, 9
	jne	SHORT $LN20@GetLastScr
; Line 1028
	mov	eax, DWORD PTR _sysData+32
	sub	eax, 1
	mov	DWORD PTR _sysData+32, eax
$LN20@GetLastScr:
; Line 1032
	mov	eax, DWORD PTR _sysData+32
	jmp	$LN32@GetLastScr
$LN17@GetLastScr:
; Line 1034
	cmp	DWORD PTR _testMode, 0
	jne	SHORT $LN16@GetLastScr
; Line 1037
	cmp	DWORD PTR _sysData+36, 6
	jl	SHORT $LN15@GetLastScr
; Line 1038
	mov	DWORD PTR _sysData+36, 5
$LN15@GetLastScr:
; Line 1041
	mov	eax, DWORD PTR _sysData+36
	push	eax
	push	4
	call	_GaugeScreenIndexToID
	add	esp, 8
	cmp	eax, 9
	jne	SHORT $LN16@GetLastScr
; Line 1042
	mov	eax, DWORD PTR _sysData+36
	sub	eax, 1
	mov	DWORD PTR _sysData+36, eax
$LN16@GetLastScr:
; Line 1046
	mov	eax, DWORD PTR _sysData+36
	jmp	SHORT $LN32@GetLastScr
$LN13@GetLastScr:
; Line 1048
	cmp	DWORD PTR _testMode, 0
	jne	SHORT $LN12@GetLastScr
; Line 1051
	cmp	DWORD PTR _sysData+28, 5
	jl	SHORT $LN11@GetLastScr
; Line 1052
	mov	DWORD PTR _sysData+28, 4
$LN11@GetLastScr:
; Line 1055
	mov	eax, DWORD PTR _sysData+28
	push	eax
	push	2
	call	_GaugeScreenIndexToID
	add	esp, 8
	cmp	eax, 9
	jne	SHORT $LN12@GetLastScr
; Line 1056
	mov	eax, DWORD PTR _sysData+28
	sub	eax, 1
	mov	DWORD PTR _sysData+28, eax
$LN12@GetLastScr:
; Line 1060
	mov	eax, DWORD PTR _sysData+28
	jmp	SHORT $LN32@GetLastScr
$LN9@GetLastScr:
; Line 1061
	mov	eax, DWORD PTR _sysData+68
	jmp	SHORT $LN32@GetLastScr
$LN8@GetLastScr:
; Line 1062
	mov	eax, DWORD PTR _sysData+72
	jmp	SHORT $LN32@GetLastScr
$LN7@GetLastScr:
; Line 1063
	mov	eax, DWORD PTR _sysData+76
	jmp	SHORT $LN32@GetLastScr
$LN6@GetLastScr:
; Line 1064
	mov	eax, DWORD PTR _sysData+80
	jmp	SHORT $LN32@GetLastScr
$LN5@GetLastScr:
; Line 1065
	mov	eax, DWORD PTR _sysData+84
	jmp	SHORT $LN32@GetLastScr
$LN4@GetLastScr:
; Line 1066
	mov	eax, DWORD PTR _sysData+88
	jmp	SHORT $LN32@GetLastScr
$LN3@GetLastScr:
; Line 1067
	mov	eax, DWORD PTR _sysData+92
	jmp	SHORT $LN32@GetLastScr
$LN2@GetLastScr:
; Line 1068
	mov	eax, 32					; 00000020H
	jmp	SHORT $LN32@GetLastScr
$LN1@GetLastScr:
; Line 1069
	xor	eax, eax
$LN32@GetLastScr:
; Line 1071
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN35@GetLastScr:
	DD	$LN29@GetLastScr
	DD	$LN13@GetLastScr
	DD	$LN21@GetLastScr
	DD	$LN17@GetLastScr
	DD	$LN28@GetLastScr
	DD	$LN27@GetLastScr
	DD	$LN26@GetLastScr
	DD	$LN25@GetLastScr
	DD	$LN24@GetLastScr
	DD	$LN23@GetLastScr
	DD	$LN22@GetLastScr
	DD	$LN9@GetLastScr
	DD	$LN6@GetLastScr
	DD	$LN4@GetLastScr
	DD	$LN5@GetLastScr
	DD	$LN8@GetLastScr
	DD	$LN7@GetLastScr
	DD	$LN3@GetLastScr
	DD	$LN2@GetLastScr
	DD	$LN1@GetLastScr
$LN34@GetLastScr:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	19					; 00000013H
	DB	7
	DB	8
	DB	9
	DB	19					; 00000013H
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	19					; 00000013H
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	19					; 00000013H
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	18					; 00000012H
_GetLastScreen ENDP
_TEXT	ENDS
PUBLIC	_GetCurrentScreen
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetCurrentScreen
_TEXT	SEGMENT
_GetCurrentScreen PROC					; COMDAT
; Line 1074
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1075
	call	_GetScreenType
	push	eax
	call	_GetLastScreen
	add	esp, 4
; Line 1076
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetCurrentScreen ENDP
_TEXT	ENDS
PUBLIC	_GetNumScreens
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetNumScreens
_TEXT	SEGMENT
tv64 = -196						; size = 4
_screenType$ = 8					; size = 4
_GetNumScreens PROC					; COMDAT
; Line 1079
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1080
	mov	eax, DWORD PTR _screenType$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 20			; 00000014H
	ja	$LN1@GetNumScre
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN29@GetNumScre[edx*4]
$LN24@GetNumScre:
; Line 1082
	mov	eax, 4
	jmp	$LN27@GetNumScre
$LN23@GetNumScre:
; Line 1083
	mov	eax, 4
	jmp	$LN27@GetNumScre
$LN22@GetNumScre:
; Line 1084
	mov	eax, 7
	jmp	$LN27@GetNumScre
$LN21@GetNumScre:
; Line 1085
	mov	eax, 6
	jmp	$LN27@GetNumScre
$LN20@GetNumScre:
; Line 1087
	cmp	DWORD PTR _testMode, 0
	je	SHORT $LN19@GetNumScre
; Line 1088
	mov	eax, 7
	jmp	$LN27@GetNumScre
	jmp	SHORT $LN17@GetNumScre
$LN19@GetNumScre:
; Line 1092
	mov	eax, 6
	jmp	SHORT $LN27@GetNumScre
$LN17@GetNumScre:
; Line 1095
	cmp	DWORD PTR _testMode, 0
	je	SHORT $LN16@GetNumScre
; Line 1096
	mov	eax, 7
	jmp	SHORT $LN27@GetNumScre
	jmp	SHORT $LN14@GetNumScre
$LN16@GetNumScre:
; Line 1100
	mov	eax, 6
	jmp	SHORT $LN27@GetNumScre
$LN14@GetNumScre:
; Line 1103
	cmp	DWORD PTR _testMode, 0
	je	SHORT $LN13@GetNumScre
; Line 1104
	mov	eax, 6
	jmp	SHORT $LN27@GetNumScre
	jmp	SHORT $LN11@GetNumScre
$LN13@GetNumScre:
; Line 1108
	mov	eax, 5
	jmp	SHORT $LN27@GetNumScre
$LN11@GetNumScre:
; Line 1110
	mov	eax, 5
	jmp	SHORT $LN27@GetNumScre
$LN10@GetNumScre:
; Line 1111
	mov	eax, 6
	jmp	SHORT $LN27@GetNumScre
$LN9@GetNumScre:
; Line 1112
	mov	eax, 2
	jmp	SHORT $LN27@GetNumScre
$LN8@GetNumScre:
; Line 1113
	mov	eax, 4
	jmp	SHORT $LN27@GetNumScre
$LN7@GetNumScre:
; Line 1114
	mov	eax, 4
	jmp	SHORT $LN27@GetNumScre
$LN6@GetNumScre:
; Line 1115
	mov	eax, 8
	jmp	SHORT $LN27@GetNumScre
$LN5@GetNumScre:
; Line 1116
	mov	eax, 9
	jmp	SHORT $LN27@GetNumScre
$LN4@GetNumScre:
; Line 1117
	mov	eax, 4
	jmp	SHORT $LN27@GetNumScre
$LN3@GetNumScre:
; Line 1118
	mov	eax, 4
	jmp	SHORT $LN27@GetNumScre
$LN2@GetNumScre:
; Line 1119
	mov	eax, 4
	jmp	SHORT $LN27@GetNumScre
$LN1@GetNumScre:
; Line 1120
	mov	eax, 1
$LN27@GetNumScre:
; Line 1122
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@GetNumScre:
	DD	$LN24@GetNumScre
	DD	$LN14@GetNumScre
	DD	$LN20@GetNumScre
	DD	$LN17@GetNumScre
	DD	$LN23@GetNumScre
	DD	$LN22@GetNumScre
	DD	$LN21@GetNumScre
	DD	$LN1@GetNumScre
	DD	$LN11@GetNumScre
	DD	$LN10@GetNumScre
	DD	$LN9@GetNumScre
	DD	$LN1@GetNumScre
	DD	$LN8@GetNumScre
	DD	$LN7@GetNumScre
	DD	$LN4@GetNumScre
	DD	$LN2@GetNumScre
	DD	$LN1@GetNumScre
	DD	$LN3@GetNumScre
	DD	$LN6@GetNumScre
	DD	$LN1@GetNumScre
	DD	$LN5@GetNumScre
_GetNumScreens ENDP
_TEXT	ENDS
PUBLIC	_SetScreenType
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SetScreenType
_TEXT	SEGMENT
_screentype$ = 8					; size = 4
_SetScreenType PROC					; COMDAT
; Line 1125
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1126
	mov	eax, DWORD PTR _screentype$[ebp]
	mov	DWORD PTR _sysData+20, eax
; Line 1127
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SetScreenType ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _GetScreenType
_TEXT	SEGMENT
_GetScreenType PROC					; COMDAT
; Line 1130
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1131
	mov	eax, DWORD PTR _sysData+20
; Line 1132
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GetScreenType ENDP
_TEXT	ENDS
PUBLIC	_GetPrevIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetPrevIndex
_TEXT	SEGMENT
_index$ = -8						; size = 4
_GetPrevIndex PROC					; COMDAT
; Line 1136
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1139
	mov	eax, DWORD PTR _sysData+20
	push	eax
	call	_GetLastScreen
	add	esp, 4
	mov	DWORD PTR _index$[ebp], eax
; Line 1140
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _index$[ebp], eax
	jns	SHORT $LN1@GetPrevInd
; Line 1141
	mov	eax, DWORD PTR _sysData+20
	push	eax
	call	_GetNumScreens
	add	esp, 4
	sub	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN1@GetPrevInd:
; Line 1142
	mov	eax, DWORD PTR _index$[ebp]
; Line 1143
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetPrevIndex ENDP
_TEXT	ENDS
PUBLIC	_GetNextIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetNextIndex
_TEXT	SEGMENT
_index$ = -8						; size = 4
_GetNextIndex PROC					; COMDAT
; Line 1146
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1149
	mov	eax, DWORD PTR _sysData+20
	push	eax
	call	_GetLastScreen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
; Line 1150
	mov	eax, DWORD PTR _sysData+20
	push	eax
	call	_GetNumScreens
	add	esp, 4
	sub	eax, 1
	cmp	DWORD PTR _index$[ebp], eax
	jle	SHORT $LN1@GetNextInd
; Line 1151
	mov	DWORD PTR _index$[ebp], 0
$LN1@GetNextInd:
; Line 1152
	mov	eax, DWORD PTR _index$[ebp]
; Line 1153
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetNextIndex ENDP
_TEXT	ENDS
PUBLIC	_ValidateRaceScreens
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ValidateRaceScreens
_TEXT	SEGMENT
_maxGaugesScreens$ = -32				; size = 4
_maxInstrumentsScreens$ = -20				; size = 4
_maxDriveScreens$ = -8					; size = 4
_ValidateRaceScreens PROC				; COMDAT
; Line 1156
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1159
	push	3
	call	_GetNumScreens
	add	esp, 4
	sub	eax, 1
	mov	DWORD PTR _maxDriveScreens$[ebp], eax
; Line 1160
	push	4
	call	_GetNumScreens
	add	esp, 4
	sub	eax, 1
	mov	DWORD PTR _maxInstrumentsScreens$[ebp], eax
; Line 1161
	push	2
	call	_GetNumScreens
	add	esp, 4
	sub	eax, 1
	mov	DWORD PTR _maxGaugesScreens$[ebp], eax
; Line 1163
	mov	eax, DWORD PTR _sysData+32
	cmp	eax, DWORD PTR _maxDriveScreens$[ebp]
	jle	SHORT $LN3@ValidateRa
; Line 1164
	mov	eax, DWORD PTR _maxDriveScreens$[ebp]
	mov	DWORD PTR _sysData+32, eax
$LN3@ValidateRa:
; Line 1165
	mov	eax, DWORD PTR _sysData+36
	cmp	eax, DWORD PTR _maxInstrumentsScreens$[ebp]
	jle	SHORT $LN2@ValidateRa
; Line 1166
	mov	eax, DWORD PTR _maxInstrumentsScreens$[ebp]
	mov	DWORD PTR _sysData+36, eax
$LN2@ValidateRa:
; Line 1167
	mov	eax, DWORD PTR _sysData+28
	cmp	eax, DWORD PTR _maxGaugesScreens$[ebp]
	jle	SHORT $LN4@ValidateRa
; Line 1168
	mov	eax, DWORD PTR _maxGaugesScreens$[ebp]
	mov	DWORD PTR _sysData+28, eax
$LN4@ValidateRa:
; Line 1169
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ValidateRaceScreens ENDP
_TEXT	ENDS
PUBLIC	_InactiveGaugeScreen
PUBLIC	_GetNextGaugeScreen
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetNextGaugeScreen
_TEXT	SEGMENT
_limit$ = -20						; size = 4
_index$ = -8						; size = 4
_GetNextGaugeScreen PROC				; COMDAT
; Line 1172
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1175
	mov	eax, DWORD PTR _sysData+20
	push	eax
	call	_GetLastScreen
	add	esp, 4
	mov	DWORD PTR _index$[ebp], eax
; Line 1176
	mov	eax, DWORD PTR _sysData+20
	push	eax
	call	_GetNumScreens
	add	esp, 4
	sub	eax, 1
	mov	DWORD PTR _limit$[ebp], eax
$LN4@GetNextGau:
; Line 1179
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jle	SHORT $LN3@GetNextGau
; Line 1180
	mov	DWORD PTR _index$[ebp], 0
$LN3@GetNextGau:
; Line 1181
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	call	_InactiveGaugeScreen
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@GetNextGau
; Line 1183
	mov	eax, DWORD PTR _index$[ebp]
; Line 1184
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetNextGaugeScreen ENDP
_TEXT	ENDS
PUBLIC	_GetPrevGaugeScreen
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetPrevGaugeScreen
_TEXT	SEGMENT
_limit$ = -20						; size = 4
_index$ = -8						; size = 4
_GetPrevGaugeScreen PROC				; COMDAT
; Line 1187
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1190
	mov	eax, DWORD PTR _sysData+20
	push	eax
	call	_GetLastScreen
	add	esp, 4
	mov	DWORD PTR _index$[ebp], eax
; Line 1191
	mov	eax, DWORD PTR _sysData+20
	push	eax
	call	_GetNumScreens
	add	esp, 4
	sub	eax, 1
	mov	DWORD PTR _limit$[ebp], eax
$LN4@GetPrevGau:
; Line 1194
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _index$[ebp], eax
	jns	SHORT $LN3@GetPrevGau
; Line 1195
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR _index$[ebp], eax
$LN3@GetPrevGau:
; Line 1196
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	call	_InactiveGaugeScreen
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@GetPrevGau
; Line 1198
	mov	eax, DWORD PTR _index$[ebp]
; Line 1199
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetPrevGaugeScreen ENDP
_TEXT	ENDS
PUBLIC	_DetermineAnalogScreenSelection
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _InactiveGaugeScreen
_TEXT	SEGMENT
_screen$ = -8						; size = 4
_index$ = 8						; size = 4
_InactiveGaugeScreen PROC				; COMDAT
; Line 1209
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1212
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sysData+20
	push	ecx
	call	_GaugeScreenIndexToID
	add	esp, 8
	mov	DWORD PTR _screen$[ebp], eax
; Line 1217
	cmp	DWORD PTR _screen$[ebp], 4
	jne	SHORT $LN7@InactiveGa
; Line 1219
	call	_DetermineAnalogScreenSelection
	test	eax, eax
	jne	SHORT $LN6@InactiveGa
; Line 1220
	mov	al, 1
	jmp	SHORT $LN8@InactiveGa
	jmp	SHORT $LN7@InactiveGa
$LN6@InactiveGa:
; Line 1221
	xor	al, al
	jmp	SHORT $LN8@InactiveGa
$LN7@InactiveGa:
; Line 1223
	cmp	DWORD PTR _screen$[ebp], 9
	jne	SHORT $LN4@InactiveGa
; Line 1225
	cmp	DWORD PTR _testMode, 0
	je	SHORT $LN3@InactiveGa
; Line 1226
	xor	al, al
	jmp	SHORT $LN8@InactiveGa
	jmp	SHORT $LN2@InactiveGa
$LN3@InactiveGa:
; Line 1227
	mov	al, 1
	jmp	SHORT $LN8@InactiveGa
$LN2@InactiveGa:
; Line 1229
	jmp	SHORT $LN8@InactiveGa
$LN4@InactiveGa:
	xor	al, al
$LN8@InactiveGa:
; Line 1230
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_InactiveGaugeScreen ENDP
_TEXT	ENDS
EXTRN	_InstrumentsScreenList:BYTE
EXTRN	_DriveScreenList:BYTE
EXTRN	_GaugesScreenList:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GaugeScreenIndexToID
_TEXT	SEGMENT
tv64 = -196						; size = 4
_screenType$ = 8					; size = 4
_screenIndex$ = 12					; size = 4
_GaugeScreenIndexToID PROC				; COMDAT
; Line 1233
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1234
	mov	eax, DWORD PTR _screenType$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN10@GaugeScree
	cmp	DWORD PTR tv64[ebp], 3
	je	SHORT $LN7@GaugeScree
	cmp	DWORD PTR tv64[ebp], 4
	je	SHORT $LN4@GaugeScree
	jmp	SHORT $LN1@GaugeScree
$LN10@GaugeScree:
; Line 1237
	cmp	DWORD PTR _screenIndex$[ebp], 0
	jl	SHORT $LN8@GaugeScree
	cmp	DWORD PTR _screenIndex$[ebp], 6
	jl	SHORT $LN9@GaugeScree
$LN8@GaugeScree:
; Line 1238
	mov	DWORD PTR _screenIndex$[ebp], 1
$LN9@GaugeScree:
; Line 1239
	mov	eax, DWORD PTR _screenIndex$[ebp]
	mov	eax, DWORD PTR _GaugesScreenList[eax*8]
	jmp	SHORT $LN13@GaugeScree
$LN7@GaugeScree:
; Line 1241
	cmp	DWORD PTR _screenIndex$[ebp], 0
	jl	SHORT $LN5@GaugeScree
	cmp	DWORD PTR _screenIndex$[ebp], 7
	jl	SHORT $LN6@GaugeScree
$LN5@GaugeScree:
; Line 1242
	mov	DWORD PTR _screenIndex$[ebp], 2
$LN6@GaugeScree:
; Line 1243
	mov	eax, DWORD PTR _screenIndex$[ebp]
	mov	eax, DWORD PTR _DriveScreenList[eax*8]
	jmp	SHORT $LN13@GaugeScree
$LN4@GaugeScree:
; Line 1245
	cmp	DWORD PTR _screenIndex$[ebp], 0
	jl	SHORT $LN2@GaugeScree
	cmp	DWORD PTR _screenIndex$[ebp], 7
	jl	SHORT $LN3@GaugeScree
$LN2@GaugeScree:
; Line 1246
	mov	DWORD PTR _screenIndex$[ebp], 1
$LN3@GaugeScree:
; Line 1247
	mov	eax, DWORD PTR _screenIndex$[ebp]
	mov	eax, DWORD PTR _InstrumentsScreenList[eax*8]
	jmp	SHORT $LN13@GaugeScree
$LN1@GaugeScree:
; Line 1249
	xor	eax, eax
$LN13@GaugeScree:
; Line 1251
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GaugeScreenIndexToID ENDP
_TEXT	ENDS
PUBLIC	_SetButtonColors
PUBLIC	_PopulateSessionLISTVIEW
PUBLIC	_UpdateSessionListView
PUBLIC	_IncrementSessionType
PUBLIC	_SetRecordModeGraphic
PUBLIC	_GoRacingStateMachine
PUBLIC	_SaveRaceMode
PUBLIC	_DisplayNewScreenList
PUBLIC	_SetSessionSelection
PUBLIC	_ConfigScreensIgnoreNextKeyRelease
PUBLIC	__cbMainCallback
EXTRN	_WM_DefaultProc:PROC
EXTRN	_DisplaySessionDetailsScreen:PROC
EXTRN	_GetSessionData:PROC
EXTRN	_LISTVIEW_SetBkColor:PROC
EXTRN	_LISTVIEW_SetSel:PROC
EXTRN	_GetSessionNameData:PROC
EXTRN	_CreateFileList:PROC
EXTRN	_DeleteSession:PROC
EXTRN	_strcmp:PROC
EXTRN	_SetBestTimeButtonText:PROC
EXTRN	_IncrementDisplayType:PROC
EXTRN	_WM_DeleteWindow:PROC
EXTRN	_GUI_Exec:PROC
EXTRN	_GUI_GetTime:PROC
EXTRN	_SystemSettingsPopUp:PROC
EXTRN	_SetWorkingTrackName:PROC
EXTRN	_ctType:DWORD
EXTRN	_GetSessionName:PROC
EXTRN	_LISTVIEW_GetSelUnsorted:PROC
EXTRN	_LISTVIEW_GetSel:PROC
EXTRN	_SessionNameData:BYTE
EXTRN	_WM_GetId:PROC
EXTRN	_DrawSignalStrength:PROC
EXTRN	_GUI_SetFont:PROC
EXTRN	_GUI_Font24_ASCII:BYTE
EXTRN	_GUI_SetColor:PROC
EXTRN	_WM_InvalidateRect:PROC
EXTRN	_BannerRect:QWORD
EXTRN	_WM_RestartTimer:PROC
_BSS	SEGMENT
	ALIGN	4

_clickedOnThisScreen DD 01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __cbMainCallback
_TEXT	SEGMENT
tv128 = -280						; size = 4
tv86 = -280						; size = 4
tv64 = -280						; size = 4
_i$21218 = -80						; size = 4
_pName$21214 = -68					; size = 4
_endTime$21207 = -56					; size = 4
_hDialog$21206 = -44					; size = 4
_Sel$ = -32						; size = 4
_Id$ = -20						; size = 4
_NCode$ = -8						; size = 4
_pMsg$ = 8						; size = 4
__cbMainCallback PROC					; COMDAT
; Line 1255
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1259
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 38			; 00000026H
	jg	SHORT $LN50@cbMainCall
	cmp	DWORD PTR tv64[ebp], 38			; 00000026H
	je	$LN40@cbMainCall
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN43@cbMainCall
	cmp	DWORD PTR tv64[ebp], 15			; 0000000fH
	je	SHORT $LN42@cbMainCall
	jmp	$LN1@cbMainCall
$LN50@cbMainCall:
	cmp	DWORD PTR tv64[ebp], 275		; 00000113H
	je	SHORT $LN45@cbMainCall
	jmp	$LN1@cbMainCall
$LN45@cbMainCall:
; Line 1262
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _hScreenTimer
	jne	SHORT $LN44@cbMainCall
; Line 1264
	push	125					; 0000007dH
	mov	eax, DWORD PTR _hScreenTimer
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
; Line 1265
	push	OFFSET _BannerRect
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_WM_InvalidateRect
	add	esp, 8
$LN44@cbMainCall:
; Line 1267
	jmp	$LN48@cbMainCall
$LN43@cbMainCall:
; Line 1270
	call	_ConfigScreensIgnoreNextKeyRelease
; Line 1271
	jmp	$LN48@cbMainCall
$LN42@cbMainCall:
; Line 1274
	call	_GetScreenType
	cmp	eax, 1
	jne	SHORT $LN41@cbMainCall
; Line 1276
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 1277
	push	OFFSET _GUI_Font24_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 1279
	mov	esi, esp
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	push	1
	call	_GetLastScreen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _ConfigScreenList[eax+8]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1280
	call	_DrawSignalStrength
$LN41@cbMainCall:
; Line 1282
	jmp	$LN48@cbMainCall
$LN40@cbMainCall:
; Line 1285
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_WM_GetId
	add	esp, 4
	mov	DWORD PTR _Id$[ebp], eax
; Line 1286
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _NCode$[ebp], ecx
; Line 1287
	mov	eax, DWORD PTR _NCode$[ebp]
	mov	DWORD PTR tv86[ebp], eax
	cmp	DWORD PTR tv86[ebp], 1
	je	SHORT $LN37@cbMainCall
	cmp	DWORD PTR tv86[ebp], 2
	je	SHORT $LN34@cbMainCall
	jmp	$LN38@cbMainCall
$LN37@cbMainCall:
; Line 1290
	mov	DWORD PTR _clickedOnThisScreen, 1
; Line 1291
	cmp	DWORD PTR _Id$[ebp], 512		; 00000200H
	jne	SHORT $LN36@cbMainCall
; Line 1293
	movzx	eax, BYTE PTR _SessionNameData+10
	test	eax, eax
	je	SHORT $LN36@cbMainCall
; Line 1295
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_GetSel
	add	esp, 4
	mov	DWORD PTR _selectedSessionSorted, eax
; Line 1296
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_GetSelUnsorted
	add	esp, 4
	mov	DWORD PTR _Sel$[ebp], eax
; Line 1297
	mov	eax, DWORD PTR _Sel$[ebp]
	push	eax
	call	_SetSessionSelection
	add	esp, 4
; Line 1298
	call	_GetSessionName
$LN36@cbMainCall:
; Line 1301
	jmp	$LN38@cbMainCall
$LN34@cbMainCall:
; Line 1304
	cmp	DWORD PTR _clickedOnThisScreen, 0
	jne	SHORT $LN33@cbMainCall
; Line 1305
	jmp	$LN38@cbMainCall
$LN33@cbMainCall:
; Line 1306
	mov	eax, DWORD PTR _Id$[ebp]
	mov	DWORD PTR tv128[ebp], eax
	mov	ecx, DWORD PTR tv128[ebp]
	sub	ecx, 2049				; 00000801H
	mov	DWORD PTR tv128[ebp], ecx
	cmp	DWORD PTR tv128[ebp], 19		; 00000013H
	ja	$LN38@cbMainCall
	mov	edx, DWORD PTR tv128[ebp]
	jmp	DWORD PTR $LN51@cbMainCall[edx*4]
$LN30@cbMainCall:
; Line 1309
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	push	0
	push	6
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1310
	jmp	$LN38@cbMainCall
$LN29@cbMainCall:
; Line 1313
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	push	1
	push	6
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1314
	jmp	$LN38@cbMainCall
$LN28@cbMainCall:
; Line 1317
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	push	2
	push	6
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1318
	jmp	$LN38@cbMainCall
$LN27@cbMainCall:
; Line 1321
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	push	3
	push	6
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1322
	jmp	$LN38@cbMainCall
$LN26@cbMainCall:
; Line 1326
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	push	4
	push	6
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1332
	jmp	$LN38@cbMainCall
$LN25@cbMainCall:
; Line 1335
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	push	5
	push	6
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1336
	jmp	$LN38@cbMainCall
$LN24@cbMainCall:
; Line 1339
	push	0
	call	_SaveRaceMode
	add	esp, 4
; Line 1340
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	call	_GoRacingStateMachine
	add	esp, 4
; Line 1341
	jmp	$LN38@cbMainCall
$LN23@cbMainCall:
; Line 1343
	push	4
	call	_SaveRaceMode
	add	esp, 4
; Line 1344
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	call	_GoRacingStateMachine
	add	esp, 4
; Line 1345
	jmp	$LN38@cbMainCall
$LN22@cbMainCall:
; Line 1347
	push	1
	call	_SaveRaceMode
	add	esp, 4
; Line 1348
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	call	_GoRacingStateMachine
	add	esp, 4
; Line 1349
	jmp	$LN38@cbMainCall
$LN21@cbMainCall:
; Line 1351
	movzx	eax, BYTE PTR _sysData+215
	test	eax, eax
	je	SHORT $LN20@cbMainCall
; Line 1352
	push	2
	call	_SaveRaceMode
	add	esp, 4
	jmp	SHORT $LN19@cbMainCall
$LN20@cbMainCall:
; Line 1353
	push	3
	call	_SaveRaceMode
	add	esp, 4
$LN19@cbMainCall:
; Line 1354
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	call	_GoRacingStateMachine
	add	esp, 4
; Line 1355
	jmp	$LN38@cbMainCall
$LN18@cbMainCall:
; Line 1357
	movzx	eax, BYTE PTR _sysData+215
	test	eax, eax
	je	SHORT $LN17@cbMainCall
; Line 1358
	mov	BYTE PTR _sysData+215, 0
	jmp	SHORT $LN16@cbMainCall
$LN17@cbMainCall:
; Line 1359
	mov	BYTE PTR _sysData+215, 1
$LN16@cbMainCall:
; Line 1360
	call	_SetRecordModeGraphic
; Line 1361
	jmp	$LN38@cbMainCall
$LN15@cbMainCall:
; Line 1365
	mov	DWORD PTR _ctType, 0
; Line 1366
	call	_SetWorkingTrackName
; Line 1367
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	push	0
	push	5
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1377
	jmp	$LN38@cbMainCall
$LN14@cbMainCall:
; Line 1381
	mov	DWORD PTR _ctType, 0
; Line 1382
	call	_SetWorkingTrackName
; Line 1383
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	push	1
	push	5
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1389
	jmp	$LN38@cbMainCall
$LN13@cbMainCall:
; Line 1392
	mov	DWORD PTR _ctType, 0
; Line 1393
	call	_SetWorkingTrackName
; Line 1394
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	push	2
	push	5
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1395
	jmp	$LN38@cbMainCall
$LN12@cbMainCall:
; Line 1398
	mov	DWORD PTR _ctType, 0
; Line 1399
	call	_SetWorkingTrackName
; Line 1400
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	push	3
	push	5
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1401
	jmp	$LN38@cbMainCall
$LN11@cbMainCall:
; Line 1408
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	push	14					; 0000000eH
	call	_SystemSettingsPopUp
	add	esp, 8
	mov	DWORD PTR _hDialog$21206[ebp], eax
; Line 1409
	call	_GUI_GetTime
	add	eax, 500				; 000001f4H
	mov	DWORD PTR _endTime$21207[ebp], eax
; Line 1410
	call	_GUI_Exec
; Line 1412
	call	_IncrementSessionType
; Line 1414
	push	1
	mov	eax, DWORD PTR _hDialog$21206[ebp]
	push	eax
	call	_UpdateSessionListView
	add	esp, 8
$LN10@cbMainCall:
; Line 1416
	call	_GUI_GetTime
	cmp	DWORD PTR _endTime$21207[ebp], eax
	jle	SHORT $LN9@cbMainCall
; Line 1417
	jmp	SHORT $LN10@cbMainCall
$LN9@cbMainCall:
; Line 1418
	mov	eax, DWORD PTR _hDialog$21206[ebp]
	push	eax
	call	_WM_DeleteWindow
	add	esp, 4
; Line 1420
	jmp	$LN38@cbMainCall
$LN8@cbMainCall:
; Line 1423
	call	_IncrementDisplayType
; Line 1424
	call	_SetBestTimeButtonText
; Line 1425
	jmp	$LN38@cbMainCall
$LN7@cbMainCall:
; Line 1428
	cmp	DWORD PTR _numSessions, 0
	jle	$LN6@cbMainCall
; Line 1432
	call	_GetSessionName
	mov	DWORD PTR _pName$21214[ebp], eax
; Line 1433
	push	OFFSET $SG21216
	mov	eax, DWORD PTR _pName$21214[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	$LN6@cbMainCall
; Line 1435
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	push	7
	call	_SystemSettingsPopUp
	add	esp, 8
	test	eax, eax
	je	$LN6@cbMainCall
; Line 1444
	mov	BYTE PTR _reviewingSession, 1
; Line 1445
	call	_DeleteSession
; Line 1447
	push	4
	call	_CreateFileList
	add	esp, 4
; Line 1450
	movzx	eax, BYTE PTR _sysData+208
	push	eax
	push	1
	push	0
	call	_GetSessionNameData
	add	esp, 12					; 0000000cH
; Line 1451
	push	-1
	call	_PopulateSessionLISTVIEW
	add	esp, 4
	mov	DWORD PTR _i$21218[ebp], eax
; Line 1453
	call	_GUI_Exec
; Line 1454
	mov	eax, DWORD PTR _selectedSessionSorted
	push	eax
	mov	ecx, DWORD PTR _hListView
	push	ecx
	call	_LISTVIEW_SetSel
	add	esp, 8
; Line 1455
	push	16737599				; 00ff653fH
	push	2
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_SetBkColor
	add	esp, 12					; 0000000cH
; Line 1456
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_GetSelUnsorted
	add	esp, 4
	mov	DWORD PTR _selectedSessionUnsorted, eax
; Line 1459
	call	_GetSessionData
; Line 1460
	call	_SetBestTimeButtonText
; Line 1461
	mov	eax, DWORD PTR _i$21218[ebp]
	push	eax
	call	_SetButtonColors
	add	esp, 4
$LN6@cbMainCall:
; Line 1465
	jmp	SHORT $LN38@cbMainCall
$LN3@cbMainCall:
; Line 1468
	cmp	DWORD PTR _numSessions, 0
	jle	SHORT $LN38@cbMainCall
; Line 1472
	call	_DisplaySessionDetailsScreen
; Line 1474
	mov	BYTE PTR _reviewingSession, 1
; Line 1475
	mov	BYTE PTR _sysData+228, 0
$LN38@cbMainCall:
; Line 1481
	jmp	SHORT $LN48@cbMainCall
$LN1@cbMainCall:
; Line 1484
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN48@cbMainCall:
; Line 1486
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN51@cbMainCall:
	DD	$LN7@cbMainCall
	DD	$LN3@cbMainCall
	DD	$LN11@cbMainCall
	DD	$LN15@cbMainCall
	DD	$LN14@cbMainCall
	DD	$LN13@cbMainCall
	DD	$LN24@cbMainCall
	DD	$LN22@cbMainCall
	DD	$LN21@cbMainCall
	DD	$LN18@cbMainCall
	DD	$LN12@cbMainCall
	DD	$LN30@cbMainCall
	DD	$LN29@cbMainCall
	DD	$LN28@cbMainCall
	DD	$LN27@cbMainCall
	DD	$LN26@cbMainCall
	DD	$LN25@cbMainCall
	DD	$LN38@cbMainCall
	DD	$LN8@cbMainCall
	DD	$LN23@cbMainCall
__cbMainCallback ENDP
_TEXT	ENDS
EXTRN	_ClearSessionNameData:PROC
EXTRN	_FindNewestFile:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _UpdateSessionListView
_TEXT	SEGMENT
_i$ = -8						; size = 4
_hParent$ = 8						; size = 4
_updateSelectedSession$ = 12				; size = 1
_UpdateSessionListView PROC				; COMDAT
; Line 1489
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1492
	push	4
	call	_CreateFileList
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN3@UpdateSess
; Line 1494
	movzx	eax, BYTE PTR _updateSelectedSession$[ebp]
	test	eax, eax
	je	SHORT $LN2@UpdateSess
; Line 1495
	movzx	eax, BYTE PTR _sysData+208
	push	eax
	call	_FindNewestFile
	add	esp, 4
	mov	DWORD PTR _selectedSessionUnsorted, eax
$LN2@UpdateSess:
; Line 1497
	movzx	eax, BYTE PTR _sysData+208
	push	eax
	push	0
	mov	ecx, DWORD PTR _hParent$[ebp]
	push	ecx
	call	_GetSessionNameData
	add	esp, 12					; 0000000cH
; Line 1498
	call	_GetSessionData
; Line 1500
	jmp	SHORT $LN1@UpdateSess
$LN3@UpdateSess:
; Line 1502
	mov	DWORD PTR _selectedSessionUnsorted, -1
; Line 1503
	call	_ClearSessionNameData
$LN1@UpdateSess:
; Line 1506
	mov	eax, DWORD PTR _selectedSessionUnsorted
	push	eax
	call	_PopulateSessionLISTVIEW
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax
; Line 1507
	call	_SetBestTimeButtonText
; Line 1508
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_SetButtonColors
	add	esp, 4
; Line 1509
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_UpdateSessionListView ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _IncrementSessionType
_TEXT	SEGMENT
tv65 = -196						; size = 4
_IncrementSessionType PROC				; COMDAT
; Line 1513
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1514
	mov	al, BYTE PTR _sysData+208
	mov	BYTE PTR tv65[ebp], al
	cmp	BYTE PTR tv65[ebp], 65			; 00000041H
	je	SHORT $LN2@IncrementS
	cmp	BYTE PTR tv65[ebp], 68			; 00000044H
	je	SHORT $LN3@IncrementS
	cmp	BYTE PTR tv65[ebp], 82			; 00000052H
	je	SHORT $LN4@IncrementS
	jmp	SHORT $LN1@IncrementS
$LN4@IncrementS:
; Line 1516
	mov	BYTE PTR _sysData+208, 68		; 00000044H
	jmp	SHORT $LN7@IncrementS
$LN3@IncrementS:
; Line 1517
	mov	BYTE PTR _sysData+208, 65		; 00000041H
	jmp	SHORT $LN7@IncrementS
$LN2@IncrementS:
; Line 1518
	mov	BYTE PTR _sysData+208, 81		; 00000051H
	jmp	SHORT $LN7@IncrementS
$LN1@IncrementS:
; Line 1524
	mov	BYTE PTR _sysData+208, 82		; 00000052H
$LN7@IncrementS:
; Line 1526
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_IncrementSessionType ENDP
_TEXT	ENDS
EXTRN	_WM_InvalidateWindow:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SetSessionSelection
_TEXT	SEGMENT
_sel$ = 8						; size = 4
_SetSessionSelection PROC				; COMDAT
; Line 1529
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1530
	mov	eax, DWORD PTR _selectedSessionUnsorted
	cmp	eax, DWORD PTR _sel$[ebp]
	je	SHORT $LN2@SetSession
; Line 1532
	mov	eax, DWORD PTR _sel$[ebp]
	mov	DWORD PTR _selectedSessionUnsorted, eax
; Line 1533
	call	_GetSessionData
; Line 1534
	call	_SetBestTimeButtonText
; Line 1535
	mov	eax, DWORD PTR _hConfigScreen
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN2@SetSession:
; Line 1537
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SetSessionSelection ENDP
_TEXT	ENDS
PUBLIC	_GaugeScreensIgnoreNextKeyRelease
PUBLIC	_StartPressed
EXTRN	_notifyStartSet:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _StartPressed
_TEXT	SEGMENT
_hLastScreen$ = 8					; size = 4
_StartPressed PROC					; COMDAT
; Line 1540
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1541
	call	_GaugeScreensIgnoreNextKeyRelease
; Line 1542
	call	_notifyStartSet
; Line 1543
	mov	DWORD PTR _raceModeState, 8
; Line 1544
	mov	eax, DWORD PTR _hLastScreen$[ebp]
	push	eax
	call	_GoRacingStateMachine
	add	esp, 4
; Line 1545
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_StartPressed ENDP
_TEXT	ENDS
PUBLIC	_SetUserMode
PUBLIC	_FinishPressed
EXTRN	_notifyFinishSet:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _FinishPressed
_TEXT	SEGMENT
_FinishPressed PROC					; COMDAT
; Line 1548
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1550
	push	20					; 00000014H
	call	_SetUserMode
	add	esp, 4
; Line 1552
	call	_notifyFinishSet
; Line 1553
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FinishPressed ENDP
_TEXT	ENDS
PUBLIC	_GetConfigWindowHandle
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetConfigWindowHandle
_TEXT	SEGMENT
_GetConfigWindowHandle PROC				; COMDAT
; Line 1557
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1558
	mov	eax, DWORD PTR _hConfigScreen
; Line 1559
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GetConfigWindowHandle ENDP
_TEXT	ENDS
PUBLIC	_SetConfigWindowHandle
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SetConfigWindowHandle
_TEXT	SEGMENT
_hWin$ = 8						; size = 4
_SetConfigWindowHandle PROC				; COMDAT
; Line 1562
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1563
	mov	eax, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR _hConfigScreen, eax
; Line 1564
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SetConfigWindowHandle ENDP
_TEXT	ENDS
PUBLIC	_ExitRecord
PUBLIC	_ProcessScreenExit
EXTRN	_SetCameraDelay:PROC
EXTRN	_ValidateCamera:PROC
EXTRN	_ChangeVehicle:PROC
EXTRN	_vehicleSelectionChanged:BYTE
EXTRN	_HideSprites:PROC
EXTRN	_ExitTrackSelectionScreen:PROC
EXTRN	_AISKillKeyboard:PROC
EXTRN	_TCKeyboardSaveButton:PROC
EXTRN	_DeleteAnalogScaleKeyboards:PROC
EXTRN	_ValidateAnalogData:PROC
EXTRN	_DeleteGearRatiosKeyboards:PROC
EXTRN	_ValidateDiffRatio:PROC
EXTRN	_DeleteSFScreensKeyboards:PROC
EXTRN	_WriteUserDataEvent:PROC
EXTRN	_trackTable:BYTE
EXTRN	_trackTableIndex:DWORD
EXTRN	_ValidateSFCoordinates:PROC
EXTRN	_alteredTrackData:BYTE
EXTRN	_SetGear:PROC
EXTRN	_WriteDataStructures:PROC
EXTRN	_TestCameras:PROC
EXTRN	_ValidateVehicleData:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ProcessScreenExit
_TEXT	SEGMENT
tv65 = -196						; size = 4
_ProcessScreenExit PROC					; COMDAT
; Line 1573
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1574
	call	_GetScreenType
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	sub	eax, 2
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 33			; 00000021H
	ja	$LN27@ProcessScr
	mov	ecx, DWORD PTR tv65[ebp]
	movzx	edx, BYTE PTR $LN31@ProcessScr[ecx]
	jmp	DWORD PTR $LN32@ProcessScr[edx*4]
$LN26@ProcessScr:
; Line 1583
	push	1
	call	_ExitRecord
	add	esp, 4
; Line 1584
	jmp	$LN27@ProcessScr
$LN25@ProcessScr:
; Line 1591
	push	0
	call	_ExitRecord
	add	esp, 4
; Line 1592
	jmp	$LN27@ProcessScr
$LN24@ProcessScr:
; Line 1596
	call	_ValidateVehicleData
	test	eax, eax
	je	SHORT $LN23@ProcessScr
; Line 1598
	push	0
	call	_TestCameras
	add	esp, 4
; Line 1599
	push	2
	call	_WriteDataStructures
	add	esp, 4
; Line 1600
	push	0
	call	_SetGear
	add	esp, 4
	jmp	SHORT $LN22@ProcessScr
$LN23@ProcessScr:
; Line 1602
	xor	eax, eax
	jmp	$LN29@ProcessScr
$LN22@ProcessScr:
; Line 1603
	jmp	$LN27@ProcessScr
$LN21@ProcessScr:
; Line 1606
	movzx	eax, BYTE PTR _alteredTrackData
	test	eax, eax
	je	SHORT $LN20@ProcessScr
; Line 1608
	call	_ValidateSFCoordinates
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@ProcessScr
; Line 1610
	mov	eax, DWORD PTR _trackTableIndex
	imul	eax, 72					; 00000048H
	mov	DWORD PTR _trackTable[eax+20], 0
; Line 1611
	push	1
	call	_WriteUserDataEvent
	add	esp, 4
; Line 1612
	mov	eax, DWORD PTR _trackTableIndex
	imul	eax, 72					; 00000048H
	mov	DWORD PTR _trackTable[eax+20], 1
; Line 1613
	call	_DeleteSFScreensKeyboards
; Line 1614
	mov	BYTE PTR _alteredTrackData, 0
	jmp	SHORT $LN20@ProcessScr
$LN19@ProcessScr:
; Line 1616
	xor	eax, eax
	jmp	$LN29@ProcessScr
$LN20@ProcessScr:
; Line 1618
	jmp	$LN27@ProcessScr
$LN17@ProcessScr:
; Line 1624
	push	2
	call	_WriteDataStructures
	add	esp, 4
; Line 1625
	jmp	$LN27@ProcessScr
$LN16@ProcessScr:
; Line 1628
	call	_ValidateDiffRatio
	test	eax, eax
	je	SHORT $LN15@ProcessScr
; Line 1630
	push	2
	call	_WriteDataStructures
	add	esp, 4
; Line 1631
	call	_DeleteGearRatiosKeyboards
	jmp	SHORT $LN14@ProcessScr
$LN15@ProcessScr:
; Line 1633
	xor	eax, eax
	jmp	$LN29@ProcessScr
$LN14@ProcessScr:
; Line 1634
	jmp	$LN27@ProcessScr
$LN13@ProcessScr:
; Line 1637
	call	_ValidateAnalogData
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@ProcessScr
; Line 1639
	push	2
	call	_WriteDataStructures
	add	esp, 4
; Line 1640
	call	_DeleteAnalogScaleKeyboards
	jmp	SHORT $LN11@ProcessScr
$LN12@ProcessScr:
; Line 1642
	xor	eax, eax
	jmp	$LN29@ProcessScr
$LN11@ProcessScr:
; Line 1643
	jmp	SHORT $LN27@ProcessScr
$LN10@ProcessScr:
; Line 1650
	push	22					; 00000016H
	call	_GetLastScreen
	add	esp, 4
	cmp	eax, 4
	je	SHORT $LN9@ProcessScr
; Line 1651
	call	_TCKeyboardSaveButton
$LN9@ProcessScr:
; Line 1652
	jmp	SHORT $LN27@ProcessScr
$LN8@ProcessScr:
; Line 1655
	call	_AISKillKeyboard
; Line 1656
	jmp	SHORT $LN27@ProcessScr
$LN7@ProcessScr:
; Line 1659
	call	_ExitTrackSelectionScreen
; Line 1660
	mov	DWORD PTR _screen_scrolling, 1
; Line 1661
	call	_HideSprites
; Line 1662
	jmp	SHORT $LN27@ProcessScr
$LN6@ProcessScr:
; Line 1665
	mov	DWORD PTR _ctType, 0
; Line 1666
	movzx	eax, BYTE PTR _vehicleSelectionChanged
	cmp	eax, 1
	jne	SHORT $LN5@ProcessScr
; Line 1667
	call	_ChangeVehicle
$LN5@ProcessScr:
; Line 1668
	call	_ExitTrackSelectionScreen
; Line 1669
	jmp	SHORT $LN27@ProcessScr
$LN4@ProcessScr:
; Line 1673
	call	_ValidateCamera
	test	eax, eax
	je	SHORT $LN3@ProcessScr
; Line 1674
	push	2
	call	_WriteDataStructures
	add	esp, 4
	jmp	SHORT $LN2@ProcessScr
$LN3@ProcessScr:
; Line 1675
	xor	eax, eax
	jmp	SHORT $LN29@ProcessScr
$LN2@ProcessScr:
; Line 1676
	jmp	SHORT $LN27@ProcessScr
$LN1@ProcessScr:
; Line 1679
	call	_SetCameraDelay
; Line 1680
	push	2
	call	_WriteDataStructures
	add	esp, 4
$LN27@ProcessScr:
; Line 1684
	push	0
	call	_WriteDataStructures
	add	esp, 4
; Line 1685
	mov	eax, 1
$LN29@ProcessScr:
; Line 1686
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN32@ProcessScr:
	DD	$LN26@ProcessScr
	DD	$LN6@ProcessScr
	DD	$LN24@ProcessScr
	DD	$LN17@ProcessScr
	DD	$LN21@ProcessScr
	DD	$LN16@ProcessScr
	DD	$LN13@ProcessScr
	DD	$LN8@ProcessScr
	DD	$LN10@ProcessScr
	DD	$LN7@ProcessScr
	DD	$LN25@ProcessScr
	DD	$LN4@ProcessScr
	DD	$LN1@ProcessScr
	DD	$LN27@ProcessScr
$LN31@ProcessScr:
	DB	0
	DB	0
	DB	0
	DB	1
	DB	13					; 0000000dH
	DB	2
	DB	13					; 0000000dH
	DB	3
	DB	3
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	4
	DB	5
	DB	6
	DB	3
	DB	7
	DB	13					; 0000000dH
	DB	3
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	8
	DB	13					; 0000000dH
	DB	9
	DB	13					; 0000000dH
	DB	10					; 0000000aH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	0
	DB	2
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	11					; 0000000bH
_ProcessScreenExit ENDP
_TEXT	ENDS
PUBLIC	_MoveRight
EXTRN	_DeleteHelpScreen:PROC
EXTRN	_GetTraqdashCamWindowHandle:PROC
EXTRN	_GetCameraSelectionWindowHandle:PROC
EXTRN	_CreateTraqdashCamScreen:PROC
EXTRN	_GetCameraDelayWindowHandle:PROC
EXTRN	_GetAeroGripWindowHandle:PROC
EXTRN	_hPersonalizationScreen:DWORD
EXTRN	_PersonalizeScreenExit:PROC
EXTRN	_hWaitingForCamera:DWORD
EXTRN	_KillWaitingForSatelliteScreen:PROC
EXTRN	_GetTireSizeScreenWindowHandle:PROC
EXTRN	_ReturnFromReviewSessionsScreen:PROC
EXTRN	_Display_TrackSettingMainScreen:PROC
EXTRN	_Display_VehicleSettingMainScreen:PROC
EXTRN	_GetDragAutoXGaugesWindowHandle:PROC
EXTRN	_DisplayAutoXStageScreen:PROC
EXTRN	_DisplayDragStageScreen:PROC
EXTRN	_GetLaunchScreenWindowHandle:PROC
EXTRN	_GetStageWindowHandle:PROC
EXTRN	_GetSFWindowHandle:PROC
EXTRN	_Display_GeneralConfig:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MoveRight
_TEXT	SEGMENT
tv70 = -208						; size = 4
_lastScreen$21325 = -8					; size = 4
_howFar$ = 8						; size = 4
_MoveRight PROC						; COMDAT
; Line 1694
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1695
	call	_ProcessScreenExit
	test	eax, eax
	je	$LN45@MoveRight
; Line 1698
	cmp	DWORD PTR _howFar$[ebp], 1
	jne	SHORT $LN43@MoveRight
; Line 1699
	call	_GetCurrentWindowHandle
	push	eax
	call	_Display_GeneralConfig
	add	esp, 4
	jmp	$LN45@MoveRight
$LN43@MoveRight:
; Line 1701
	call	_GetScreenType
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	sub	eax, 1
	mov	DWORD PTR tv70[ebp], eax
	cmp	DWORD PTR tv70[ebp], 36			; 00000024H
	ja	$LN45@MoveRight
	mov	ecx, DWORD PTR tv70[ebp]
	jmp	DWORD PTR $LN47@MoveRight[ecx*4]
$LN39@MoveRight:
; Line 1707
	cmp	DWORD PTR _selectedRaceMode, 2
	je	SHORT $LN38@MoveRight
; Line 1709
	call	_GetRunningGaugesWindowHandle
	push	eax
	call	_WM_DeleteWindow
	add	esp, 4
; Line 1710
	push	0
	call	_SetConfigWindowHandle
	add	esp, 4
; Line 1712
	call	_DisplaySessionDetailsScreen
; Line 1713
	mov	BYTE PTR _sysData+228, 1
	jmp	SHORT $LN37@MoveRight
$LN38@MoveRight:
; Line 1715
	call	_GetRunningGaugesWindowHandle
	push	eax
	call	_Display_GeneralConfig
	add	esp, 4
$LN37@MoveRight:
; Line 1716
	jmp	$LN45@MoveRight
$LN36@MoveRight:
; Line 1719
	call	_GetSFWindowHandle
	push	eax
	push	1
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	1
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1720
	jmp	$LN45@MoveRight
$LN35@MoveRight:
; Line 1723
	call	_GetStageWindowHandle
	push	eax
	push	0
	push	1
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1724
	jmp	$LN45@MoveRight
$LN34@MoveRight:
; Line 1727
	cmp	DWORD PTR _selectedRaceMode, 4
	jne	SHORT $LN33@MoveRight
; Line 1728
	call	_GetLaunchScreenWindowHandle
	push	eax
	call	_DisplayDragStageScreen
	add	esp, 4
	jmp	SHORT $LN32@MoveRight
$LN33@MoveRight:
; Line 1729
	call	_GetLaunchScreenWindowHandle
	push	eax
	call	_DisplayAutoXStageScreen
	add	esp, 4
$LN32@MoveRight:
; Line 1730
	jmp	$LN45@MoveRight
$LN31@MoveRight:
; Line 1734
	call	_GetDragAutoXGaugesWindowHandle
	push	eax
	call	_WM_DeleteWindow
	add	esp, 4
; Line 1735
	push	0
	call	_SetConfigWindowHandle
	add	esp, 4
; Line 1737
	call	_DisplaySessionDetailsScreen
; Line 1738
	mov	BYTE PTR _sysData+228, 1
; Line 1739
	jmp	$LN45@MoveRight
$LN30@MoveRight:
; Line 1742
	call	_GetConfigWindowHandle
	push	eax
	call	_Display_GeneralConfig
	add	esp, 4
; Line 1743
	jmp	$LN45@MoveRight
$LN29@MoveRight:
; Line 1745
	call	_GetVehicleSettingsWindowHandle
	push	eax
	call	_Display_VehicleSettingMainScreen
	add	esp, 4
; Line 1746
	jmp	$LN45@MoveRight
$LN28@MoveRight:
; Line 1748
	call	_GetTrackSettingsWindowHandle
	push	eax
	call	_Display_TrackSettingMainScreen
	add	esp, 4
; Line 1749
	jmp	$LN45@MoveRight
$LN27@MoveRight:
; Line 1751
	call	_GetRaceSetupScreensWindowHandle
	push	eax
	push	1
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	1
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1752
	jmp	$LN45@MoveRight
$LN26@MoveRight:
; Line 1754
	call	_GetSystemSettingsWindowHandle
	push	eax
	push	1
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	1
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1755
	jmp	$LN45@MoveRight
$LN25@MoveRight:
; Line 1757
	call	_ReturnFromReviewSessionsScreen
; Line 1758
	jmp	$LN45@MoveRight
$LN24@MoveRight:
; Line 1760
	call	_GetTachSetupWindowHandle
	push	eax
	push	7
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	7
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1761
	jmp	$LN45@MoveRight
$LN23@MoveRight:
; Line 1763
	call	_GetInputsWindowHandle
	push	eax
	push	7
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	7
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1764
	jmp	$LN45@MoveRight
$LN22@MoveRight:
; Line 1766
	mov	DWORD PTR _ctType, 0
; Line 1767
	call	_GetVehicleSettingMainWindowHandle
	push	eax
	push	5
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	5
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1768
	jmp	$LN45@MoveRight
$LN21@MoveRight:
; Line 1770
	call	_GetGearingWindowHandle
	push	eax
	push	7
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	7
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1771
	jmp	$LN45@MoveRight
$LN20@MoveRight:
; Line 1773
	call	_GetGearRatiosWindowHandle
	push	eax
	push	14					; 0000000eH
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	14					; 0000000eH
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1774
	jmp	$LN45@MoveRight
$LN19@MoveRight:
; Line 1780
	push	15					; 0000000fH
	call	_GetLastScreen
	add	esp, 4
	mov	DWORD PTR _lastScreen$21325[ebp], eax
; Line 1781
	cmp	DWORD PTR _lastScreen$21325[ebp], 0
	je	SHORT $LN17@MoveRight
	cmp	DWORD PTR _lastScreen$21325[ebp], 1
	jne	SHORT $LN18@MoveRight
$LN17@MoveRight:
; Line 1782
	call	_GetAnalogInputSettingsWindowHandle
	push	eax
	push	10					; 0000000aH
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	10					; 0000000aH
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
$LN18@MoveRight:
; Line 1784
	jmp	$LN45@MoveRight
$LN16@MoveRight:
; Line 1786
	call	_GetAnalogInputsScaleWindowHandle
	push	eax
	push	15					; 0000000fH
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	15					; 0000000fH
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1787
	jmp	$LN45@MoveRight
$LN15@MoveRight:
; Line 1790
	push	16					; 00000010H
	call	_GetLastScreen
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN14@MoveRight
; Line 1791
	call	_GetDigitalInputSettingsWindowHandle
	push	eax
	push	10					; 0000000aH
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	10					; 0000000aH
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
$LN14@MoveRight:
; Line 1792
	jmp	$LN45@MoveRight
$LN13@MoveRight:
; Line 1794
	mov	DWORD PTR _ctType, 0
; Line 1795
	call	_GetTrackSettingMainWindowHandle
	push	eax
	push	5
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	5
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1796
	jmp	$LN45@MoveRight
$LN12@MoveRight:
; Line 1798
	push	22					; 00000016H
	call	_GetLastScreen
	add	esp, 4
	cmp	eax, 4
	jne	SHORT $LN11@MoveRight
; Line 1799
	call	_GetTireSizeScreenWindowHandle
	push	eax
	push	14					; 0000000eH
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	14					; 0000000eH
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
$LN11@MoveRight:
; Line 1800
	jmp	$LN45@MoveRight
$LN10@MoveRight:
; Line 1802
	mov	eax, DWORD PTR _hDisplayClosestTracks
	push	eax
	push	0
	push	1
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1803
	jmp	$LN45@MoveRight
$LN9@MoveRight:
; Line 1805
	push	0
	call	_KillWaitingForSatelliteScreen
	add	esp, 4
; Line 1806
	jmp	$LN45@MoveRight
$LN8@MoveRight:
; Line 1808
	mov	DWORD PTR _raceModeState, 5
; Line 1809
	mov	eax, DWORD PTR _hWaitingForCamera
	push	eax
	call	_GoRacingStateMachine
	add	esp, 4
; Line 1810
	jmp	$LN45@MoveRight
$LN7@MoveRight:
; Line 1812
	call	_PersonalizeScreenExit
; Line 1813
	mov	eax, DWORD PTR _hPersonalizationScreen
	push	eax
	push	4
	push	6
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1814
	jmp	SHORT $LN45@MoveRight
$LN6@MoveRight:
; Line 1816
	call	_GetAeroGripWindowHandle
	push	eax
	push	1
	push	7
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1817
	jmp	SHORT $LN45@MoveRight
$LN5@MoveRight:
; Line 1819
	call	_GetCameraDelayWindowHandle
	push	eax
	call	_CreateTraqdashCamScreen
	add	esp, 4
; Line 1820
	jmp	SHORT $LN45@MoveRight
$LN4@MoveRight:
; Line 1822
	call	_GetCameraSelectionWindowHandle
	push	eax
	push	7
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	7
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1823
	jmp	SHORT $LN45@MoveRight
$LN3@MoveRight:
; Line 1825
	call	_GetTraqdashCamWindowHandle
	push	eax
	push	7
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	7
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 1826
	jmp	SHORT $LN45@MoveRight
$LN2@MoveRight:
; Line 1828
	call	_DeleteHelpScreen
; Line 1829
	jmp	SHORT $LN45@MoveRight
$LN1@MoveRight:
; Line 1831
	mov	eax, DWORD PTR _hPersonalizationScreen
	push	eax
	push	3
	push	6
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
$LN45@MoveRight:
; Line 1835
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN47@MoveRight:
	DD	$LN30@MoveRight
	DD	$LN39@MoveRight
	DD	$LN39@MoveRight
	DD	$LN39@MoveRight
	DD	$LN27@MoveRight
	DD	$LN26@MoveRight
	DD	$LN29@MoveRight
	DD	$LN22@MoveRight
	DD	$LN24@MoveRight
	DD	$LN23@MoveRight
	DD	$LN25@MoveRight
	DD	$LN13@MoveRight
	DD	$LN28@MoveRight
	DD	$LN21@MoveRight
	DD	$LN19@MoveRight
	DD	$LN15@MoveRight
	DD	$LN45@MoveRight
	DD	$LN16@MoveRight
	DD	$LN20@MoveRight
	DD	$LN45@MoveRight
	DD	$LN45@MoveRight
	DD	$LN12@MoveRight
	DD	$LN9@MoveRight
	DD	$LN10@MoveRight
	DD	$LN8@MoveRight
	DD	$LN36@MoveRight
	DD	$LN7@MoveRight
	DD	$LN45@MoveRight
	DD	$LN35@MoveRight
	DD	$LN34@MoveRight
	DD	$LN31@MoveRight
	DD	$LN6@MoveRight
	DD	$LN4@MoveRight
	DD	$LN5@MoveRight
	DD	$LN3@MoveRight
	DD	$LN2@MoveRight
	DD	$LN1@MoveRight
_MoveRight ENDP
_TEXT	ENDS
PUBLIC	_CheckForStopRecord
PUBLIC	_CheckForInfoKey
PUBLIC	_TouchPosIsReset
PUBLIC	_GetCurrentScreenID
PUBLIC	_DeleteSlideout
PUBLIC	_StartSlideout
PUBLIC	_ProcessSlideoutKeyPress
PUBLIC	_CloseSlider
PUBLIC	_AnyGaugeScreen
PUBLIC	_ConfigTimerExpired
PUBLIC	_BackTimerExpired
PUBLIC	_StartConfigKeyTimer
PUBLIC	_StartBackKeyTimer
PUBLIC	_TouchPosIsBackKey2
PUBLIC	__$ArrayPad$
PUBLIC	_ProcessScreenMovement
EXTRN	_ResetMax:PROC
EXTRN	_RunningGauges:PROC
EXTRN	_unsavedSysData:BYTE
EXTRN	_ConfigureGauge:PROC
EXTRN	_ProcessGaugeButton:PROC
EXTRN	_configureGaugeMode:BYTE
EXTRN	_GUI_TOUCH_GetState:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
_BSS	SEGMENT
_nextScreen DD	01H DUP (?)
_previous_touch_state DD 01H DUP (?)
?lasty@?1??ProcessScreenMovement@@9@9 DD 01H DUP (?)	; `ProcessScreenMovement'::`2'::lasty
?lastx@?1??ProcessScreenMovement@@9@9 DD 01H DUP (?)	; `ProcessScreenMovement'::`2'::lastx
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT _ProcessScreenMovement
_TEXT	SEGMENT
_screenID$21393 = -56					; size = 4
_y$ = -44						; size = 4
_x$ = -32						; size = 4
_TouchState$ = -20					; size = 12
__$ArrayPad$ = -4					; size = 4
_ProcessScreenMovement PROC				; COMDAT
; Line 1840
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1845
	lea	eax, DWORD PTR _TouchState$[ebp]
	push	eax
	call	_GUI_TOUCH_GetState
	add	esp, 4
; Line 1847
	movzx	eax, BYTE PTR _TouchState$[ebp+8]
	test	eax, eax
	je	$LN61@ProcessScr@2
; Line 1849
	cmp	DWORD PTR _pressingbutton_semaphore, 1
	jne	SHORT $LN60@ProcessScr@2
; Line 1852
	jmp	$LN62@ProcessScr@2
$LN60@ProcessScr@2:
; Line 1854
	mov	eax, DWORD PTR _TouchState$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 1855
	mov	eax, DWORD PTR _TouchState$[ebp+4]
	mov	DWORD PTR _y$[ebp], eax
; Line 1857
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9, eax
; Line 1858
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, eax
; Line 1860
	cmp	DWORD PTR _previous_touch_state, 0
	jne	SHORT $LN59@ProcessScr@2
; Line 1863
	mov	DWORD PTR _previous_touch_state, 1
; Line 1866
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	push	eax
	mov	ecx, DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9
	push	ecx
	call	_TouchPosIsBackKey2
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN58@ProcessScr@2
; Line 1868
	call	_StartBackKeyTimer
; Line 1869
	jmp	$LN62@ProcessScr@2
	jmp	SHORT $LN57@ProcessScr@2
$LN58@ProcessScr@2:
; Line 1871
	call	_StartConfigKeyTimer
$LN57@ProcessScr@2:
; Line 1874
	movzx	eax, BYTE PTR _configureGaugeMode
	cmp	eax, 1
	jne	SHORT $LN56@ProcessScr@2
; Line 1876
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	push	eax
	mov	ecx, DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9
	push	ecx
	call	_ProcessGaugeButton
	add	esp, 8
; Line 1877
	mov	BYTE PTR _GSignoreRelease, 1
$LN56@ProcessScr@2:
; Line 1878
	jmp	SHORT $LN55@ProcessScr@2
$LN59@ProcessScr@2:
; Line 1880
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	push	eax
	mov	ecx, DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9
	push	ecx
	call	_TouchPosIsBackKey2
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN54@ProcessScr@2
; Line 1882
	call	_BackTimerExpired
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN53@ProcessScr@2
; Line 1883
	movzx	eax, BYTE PTR _configureGaugeMode
	cmp	eax, 1
	je	SHORT $LN53@ProcessScr@2
; Line 1884
	push	1
	call	_MoveRight
	add	esp, 4
$LN53@ProcessScr@2:
; Line 1886
	jmp	SHORT $LN55@ProcessScr@2
$LN54@ProcessScr@2:
	call	_ConfigTimerExpired
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN55@ProcessScr@2
; Line 1888
	call	_ConfigureGauge
; Line 1889
	mov	BYTE PTR _GSignoreRelease, 1
$LN55@ProcessScr@2:
; Line 1890
	jmp	$LN49@ProcessScr@2
$LN61@ProcessScr@2:
; Line 1894
	cmp	DWORD PTR _screen_scrolling, 2
	je	$LN48@ProcessScr@2
; Line 1896
	mov	DWORD PTR _pressingbutton_semaphore, 0
; Line 1897
	cmp	DWORD PTR _previous_touch_state, 1
	jne	$skip$21369
; Line 1899
	mov	DWORD PTR _previous_touch_state, 0
; Line 1902
	movzx	eax, BYTE PTR _GSignoreRelease
	cmp	eax, 1
	jne	SHORT $LN46@ProcessScr@2
; Line 1904
	mov	BYTE PTR _GSignoreRelease, 0
; Line 1905
	jmp	$skip$21369
$LN46@ProcessScr@2:
; Line 1908
	call	_GetScreenType
	push	eax
	call	_AnyGaugeScreen
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	$LN45@ProcessScr@2
; Line 1911
	cmp	DWORD PTR _selectedRaceMode, 4
	je	SHORT $LN43@ProcessScr@2
	cmp	DWORD PTR _selectedRaceMode, 1
	jne	SHORT $LN44@ProcessScr@2
$LN43@ProcessScr@2:
; Line 1915
	cmp	DWORD PTR _unsavedSysData+136, 17	; 00000011H
	je	SHORT $LN41@ProcessScr@2
	cmp	DWORD PTR _unsavedSysData+136, 18	; 00000012H
	jne	SHORT $LN42@ProcessScr@2
$LN41@ProcessScr@2:
	cmp	DWORD PTR _selectedRaceMode, 4
	je	SHORT $LN42@ProcessScr@2
; Line 1918
	call	_FinishPressed
; Line 1920
	jmp	$LN62@ProcessScr@2
$LN42@ProcessScr@2:
; Line 1924
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	push	eax
	mov	ecx, DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9
	push	ecx
	call	_TouchPosIsBackKey2
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN40@ProcessScr@2
; Line 1926
	push	0
	call	_MoveRight
	add	esp, 4
; Line 1927
	mov	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 0
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	mov	DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9, eax
$LN40@ProcessScr@2:
; Line 1928
	jmp	$LN39@ProcessScr@2
$LN44@ProcessScr@2:
; Line 1931
	cmp	DWORD PTR _slideoutState, 3
	jne	SHORT $LN38@ProcessScr@2
; Line 1936
	cmp	DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9, 264 ; 00000108H
	jl	SHORT $LN36@ProcessScr@2
	cmp	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 187 ; 000000bbH
	jle	SHORT $LN37@ProcessScr@2
$LN36@ProcessScr@2:
; Line 1940
	mov	DWORD PTR _slideoutStepTime, 10		; 0000000aH
	mov	eax, DWORD PTR _slideoutStepTime
	push	eax
	mov	ecx, DWORD PTR _hSlideoutTimer
	push	ecx
	call	_WM_RestartTimer
	add	esp, 8
; Line 1941
	mov	DWORD PTR _slideoutStepSize, 100	; 00000064H
; Line 1942
	call	_CloseSlider
	jmp	SHORT $LN35@ProcessScr@2
$LN37@ProcessScr@2:
; Line 1944
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	push	eax
	mov	ecx, DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9
	push	ecx
	call	_ProcessSlideoutKeyPress
	add	esp, 8
$LN35@ProcessScr@2:
; Line 1946
	jmp	$LN39@ProcessScr@2
$LN38@ProcessScr@2:
	cmp	DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9, 350 ; 0000015eH
	jle	SHORT $LN33@ProcessScr@2
	cmp	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 225 ; 000000e1H
	jge	SHORT $LN33@ProcessScr@2
; Line 1949
	cmp	DWORD PTR _slideoutState, 0
	jne	SHORT $LN32@ProcessScr@2
; Line 1950
	call	_StartSlideout
$LN32@ProcessScr@2:
; Line 1954
	jmp	$LN39@ProcessScr@2
$LN33@ProcessScr@2:
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	push	eax
	mov	ecx, DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9
	push	ecx
	call	_TouchPosIsBackKey2
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN30@ProcessScr@2
; Line 1956
	cmp	DWORD PTR _slideoutState, 0
	je	SHORT $LN29@ProcessScr@2
; Line 1957
	call	_DeleteSlideout
$LN29@ProcessScr@2:
; Line 1959
	movzx	eax, BYTE PTR _configureGaugeMode
	cmp	eax, 1
	je	SHORT $LN28@ProcessScr@2
; Line 1961
	push	0
	call	_MoveRight
	add	esp, 4
; Line 1962
	mov	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 0
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	mov	DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9, eax
$LN28@ProcessScr@2:
; Line 1963
	jmp	$LN39@ProcessScr@2
$LN30@ProcessScr@2:
; Line 1965
	cmp	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 110 ; 0000006eH
	jge	SHORT $LN26@ProcessScr@2
; Line 1967
	cmp	DWORD PTR _slideoutState, 0
	je	SHORT $LN25@ProcessScr@2
; Line 1968
	call	_DeleteSlideout
$LN25@ProcessScr@2:
; Line 1969
	call	_GetPrevGaugeScreen
	mov	DWORD PTR _nextScreen, eax
; Line 1970
	call	_GetRunningGaugesWindowHandle
	push	eax
	mov	eax, DWORD PTR _nextScreen
	push	eax
	call	_RunningGauges
	add	esp, 8
; Line 1971
	mov	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 0
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	mov	DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9, eax
	jmp	$LN39@ProcessScr@2
$LN26@ProcessScr@2:
; Line 1973
	cmp	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 162 ; 000000a2H
	jle	$LN23@ProcessScr@2
; Line 1977
	cmp	DWORD PTR _slideoutState, 0
	je	SHORT $LN22@ProcessScr@2
; Line 1978
	call	_DeleteSlideout
$LN22@ProcessScr@2:
; Line 1979
	call	_GetCurrentScreenID
	mov	DWORD PTR _screenID$21393[ebp], eax
	cmp	DWORD PTR _screenID$21393[ebp], 5
	jne	SHORT $LN21@ProcessScr@2
; Line 1981
	cmp	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 225 ; 000000e1H
	jle	SHORT $LN20@ProcessScr@2
	cmp	DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9, 145 ; 00000091H
	jle	SHORT $LN20@ProcessScr@2
; Line 1982
	jmp	$skip$21369
$LN20@ProcessScr@2:
; Line 1984
	jmp	SHORT $LN19@ProcessScr@2
$LN21@ProcessScr@2:
	cmp	DWORD PTR _screenID$21393[ebp], 0
	jne	SHORT $LN19@ProcessScr@2
; Line 1986
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	push	eax
	mov	ecx, DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9
	push	ecx
	call	_TouchPosIsReset
	add	esp, 8
	test	eax, eax
	je	SHORT $LN19@ProcessScr@2
; Line 1988
	call	_ResetMax
; Line 1989
	jmp	$skip$21369
$LN19@ProcessScr@2:
; Line 1993
	call	_GetNextGaugeScreen
	mov	DWORD PTR _nextScreen, eax
; Line 1994
	call	_GetRunningGaugesWindowHandle
	push	eax
	mov	eax, DWORD PTR _nextScreen
	push	eax
	call	_RunningGauges
	add	esp, 8
; Line 1995
	mov	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 0
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	mov	DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9, eax
; Line 1997
	jmp	SHORT $LN39@ProcessScr@2
$LN23@ProcessScr@2:
; Line 1999
	cmp	DWORD PTR _slideoutState, 0
	je	SHORT $LN39@ProcessScr@2
; Line 2000
	call	_DeleteSlideout
$LN39@ProcessScr@2:
; Line 2003
	call	_GetCurrentScreenID
	test	eax, eax
	jne	SHORT $LN14@ProcessScr@2
; Line 2005
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	push	eax
	mov	ecx, DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9
	push	ecx
	call	_TouchPosIsReset
	add	esp, 8
	test	eax, eax
	je	SHORT $LN14@ProcessScr@2
; Line 2006
	call	_ResetMax
$LN14@ProcessScr@2:
; Line 2009
	jmp	SHORT $skip$21369
$LN45@ProcessScr@2:
; Line 2011
	cmp	DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9, 0
	jle	SHORT $LN11@ProcessScr@2
	cmp	DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9, 50 ; 00000032H
	jge	SHORT $LN11@ProcessScr@2
	cmp	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 0
	jle	SHORT $LN11@ProcessScr@2
	cmp	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 50 ; 00000032H
	jge	SHORT $LN11@ProcessScr@2
; Line 2012
	push	0
	call	_CheckForInfoKey
	add	esp, 4
	jmp	SHORT $skip$21369
$LN11@ProcessScr@2:
; Line 2013
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	push	eax
	mov	ecx, DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9
	push	ecx
	call	_TouchPosIsBackKey2
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $skip$21369
; Line 2015
	cmp	DWORD PTR _slideoutState, 0
	je	SHORT $LN8@ProcessScr@2
; Line 2016
	call	_DeleteSlideout
$LN8@ProcessScr@2:
; Line 2018
	push	0
	call	_MoveRight
	add	esp, 4
; Line 2019
	mov	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 0
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	mov	DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9, eax
$skip$21369:
; Line 2024
	mov	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 0
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	mov	DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9, eax
; Line 2026
	jmp	$LN49@ProcessScr@2
$LN48@ProcessScr@2:
; Line 2028
	cmp	DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9, 0
	jle	SHORT $LN6@ProcessScr@2
	cmp	DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9, 50 ; 00000032H
	jge	SHORT $LN6@ProcessScr@2
	cmp	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 0
	jle	SHORT $LN6@ProcessScr@2
	cmp	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 50 ; 00000032H
	jge	SHORT $LN6@ProcessScr@2
; Line 2030
	push	0
	call	_CheckForInfoKey
	add	esp, 4
; Line 2031
	mov	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 0
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	mov	DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9, eax
	jmp	SHORT $LN49@ProcessScr@2
$LN6@ProcessScr@2:
; Line 2033
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	push	eax
	mov	ecx, DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9
	push	ecx
	call	_TouchPosIsBackKey2
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@ProcessScr@2
; Line 2036
	push	0
	call	_MoveRight
	add	esp, 4
; Line 2037
	mov	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 0
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	mov	DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9, eax
; Line 2039
	jmp	SHORT $LN49@ProcessScr@2
$LN4@ProcessScr@2:
; Line 2041
	mov	DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9, 0
	mov	eax, DWORD PTR ?lasty@?1??ProcessScreenMovement@@9@9
	mov	DWORD PTR ?lastx@?1??ProcessScreenMovement@@9@9, eax
; Line 2042
	mov	DWORD PTR _previous_touch_state, 0
$LN49@ProcessScr@2:
; Line 2050
	cmp	DWORD PTR _raceModeState, 11		; 0000000bH
	jne	SHORT $LN62@ProcessScr@2
; Line 2052
	call	_CheckForStopRecord
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN62@ProcessScr@2
; Line 2053
	push	0
	call	_MoveRight
	add	esp, 4
$LN62@ProcessScr@2:
; Line 2055
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN66@ProcessScr@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN66@ProcessScr@2:
	DD	1
	DD	$LN65@ProcessScr@2
$LN65@ProcessScr@2:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN64@ProcessScr@2
$LN64@ProcessScr@2:
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_ProcessScreenMovement ENDP
_TEXT	ENDS
EXTRN	_IncreaseBacklightBrightness:PROC
EXTRN	_DecreaseBacklightBrightness:PROC
EXTRN	_ResumeLEDUpdates:PROC
EXTRN	_IncreaseLEDBrightness:PROC
EXTRN	_DecreaseLEDBrightness:PROC
EXTRN	_SuspendLEDUpdates:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ProcessSlideoutKeyPress
_TEXT	SEGMENT
tv73 = -208						; size = 4
_key$ = -8						; size = 4
_lastx$ = 8						; size = 4
_lasty$ = 12						; size = 4
_ProcessSlideoutKeyPress PROC				; COMDAT
; Line 2089
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2090
	mov	DWORD PTR _key$[ebp], 0
; Line 2119
	cmp	DWORD PTR _lastx$[ebp], 408		; 00000198H
	jl	SHORT $LN21@ProcessSli
; Line 2121
	cmp	DWORD PTR _lasty$[ebp], 110		; 0000006eH
	jl	SHORT $LN20@ProcessSli
; Line 2122
	mov	DWORD PTR _key$[ebp], 9
	jmp	SHORT $LN19@ProcessSli
$LN20@ProcessSli:
; Line 2123
	cmp	DWORD PTR _lasty$[ebp], 36		; 00000024H
	jl	SHORT $LN19@ProcessSli
; Line 2124
	mov	DWORD PTR _key$[ebp], 6
$LN19@ProcessSli:
; Line 2126
	jmp	SHORT $LN17@ProcessSli
$LN21@ProcessSli:
	cmp	DWORD PTR _lastx$[ebp], 339		; 00000153H
	jl	SHORT $LN16@ProcessSli
; Line 2128
	cmp	DWORD PTR _lasty$[ebp], 110		; 0000006eH
	jl	SHORT $LN15@ProcessSli
; Line 2129
	mov	DWORD PTR _key$[ebp], 8
	jmp	SHORT $LN14@ProcessSli
$LN15@ProcessSli:
; Line 2130
	cmp	DWORD PTR _lasty$[ebp], 36		; 00000024H
	jl	SHORT $LN14@ProcessSli
; Line 2131
	mov	DWORD PTR _key$[ebp], 5
$LN14@ProcessSli:
; Line 2133
	jmp	SHORT $LN17@ProcessSli
$LN16@ProcessSli:
	cmp	DWORD PTR _lastx$[ebp], 264		; 00000108H
	jl	SHORT $LN17@ProcessSli
; Line 2135
	cmp	DWORD PTR _lasty$[ebp], 110		; 0000006eH
	jl	SHORT $LN10@ProcessSli
; Line 2136
	mov	DWORD PTR _key$[ebp], 7
	jmp	SHORT $LN17@ProcessSli
$LN10@ProcessSli:
; Line 2137
	cmp	DWORD PTR _lasty$[ebp], 36		; 00000024H
	jl	SHORT $LN17@ProcessSli
; Line 2138
	mov	DWORD PTR _key$[ebp], 4
$LN17@ProcessSli:
; Line 2143
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR tv73[ebp]
	sub	ecx, 4
	mov	DWORD PTR tv73[ebp], ecx
	cmp	DWORD PTR tv73[ebp], 5
	ja	SHORT $LN6@ProcessSli
	mov	edx, DWORD PTR tv73[ebp]
	jmp	DWORD PTR $LN24@ProcessSli[edx*4]
$LN5@ProcessSli:
; Line 2166
	push	1
	call	_SuspendLEDUpdates
	add	esp, 4
; Line 2167
	call	_DecreaseLEDBrightness
; Line 2168
	jmp	SHORT $LN6@ProcessSli
$LN4@ProcessSli:
; Line 2171
	push	1
	call	_SuspendLEDUpdates
	add	esp, 4
; Line 2172
	call	_IncreaseLEDBrightness
; Line 2173
	jmp	SHORT $LN6@ProcessSli
$LN3@ProcessSli:
; Line 2176
	call	_ResumeLEDUpdates
; Line 2177
	call	_DecreaseBacklightBrightness
; Line 2178
	jmp	SHORT $LN6@ProcessSli
$LN2@ProcessSli:
; Line 2181
	call	_ResumeLEDUpdates
; Line 2182
	call	_IncreaseBacklightBrightness
$LN6@ProcessSli:
; Line 2192
	push	5000					; 00001388H
	mov	eax, DWORD PTR _hSlideoutTimer
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
; Line 2193
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN24@ProcessSli:
	DD	$LN5@ProcessSli
	DD	$LN6@ProcessSli
	DD	$LN4@ProcessSli
	DD	$LN3@ProcessSli
	DD	$LN6@ProcessSli
	DD	$LN2@ProcessSli
_ProcessSlideoutKeyPress ENDP
_TEXT	ENDS
EXTRN	_WM_CreateTimer:PROC
EXTRN	_GetCameraIcon:PROC
EXTRN	_SlideoutGetSignalStrengthIcon:PROC
EXTRN	_GUI_SPRITE_Create:PROC
EXTRN	_GetSUStatusIcon:PROC
EXTRN	_bmNoAudioSlideout:BYTE
EXTRN	_GUI_GetOrg:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _StartSlideout
_TEXT	SEGMENT
_pGraphic$ = -8						; size = 4
_StartSlideout PROC					; COMDAT
; Line 2196
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2199
	mov	DWORD PTR _slideoutState, 1
; Line 2201
	push	OFFSET _slideoutYPos
	push	OFFSET _slideoutXPos
	call	_GUI_GetOrg
	add	esp, 8
; Line 2207
	mov	DWORD PTR _pGraphic$[ebp], OFFSET _bmNoAudioSlideout
; Line 2210
	mov	DWORD PTR _slideoutXPos, 480		; 000001e0H
; Line 2213
	mov	eax, DWORD PTR _slideoutYPos
	push	eax
	mov	ecx, DWORD PTR _slideoutXPos
	add	ecx, 122				; 0000007aH
	push	ecx
	call	_GetSUStatusIcon
	push	eax
	call	_GUI_SPRITE_Create
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _hSUStatusSprite, eax
; Line 2214
	mov	eax, DWORD PTR _slideoutYPos
	push	eax
	mov	ecx, DWORD PTR _slideoutXPos
	add	ecx, 202				; 000000caH
	push	ecx
	call	_SlideoutGetSignalStrengthIcon
	push	eax
	call	_GUI_SPRITE_Create
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _hSignalStrengthSprite, eax
; Line 2215
	mov	eax, DWORD PTR _slideoutYPos
	push	eax
	mov	ecx, DWORD PTR _slideoutXPos
	add	ecx, 165				; 000000a5H
	push	ecx
	call	_GetCameraIcon
	push	eax
	call	_GUI_SPRITE_Create
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _hCameraSprite, eax
; Line 2217
	mov	eax, DWORD PTR _slideoutYPos
	push	eax
	mov	ecx, DWORD PTR _slideoutXPos
	push	ecx
	mov	edx, DWORD PTR _pGraphic$[ebp]
	push	edx
	call	_GUI_SPRITE_Create
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _hSlideout, eax
; Line 2219
	mov	DWORD PTR _slideoutStepTime, 10		; 0000000aH
	push	0
	mov	eax, DWORD PTR _slideoutStepTime
	push	eax
	push	0
	call	_GetRunningGaugesWindowHandle
	push	eax
	call	_WM_CreateTimer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hSlideoutTimer, eax
; Line 2220
	mov	DWORD PTR _slideoutStepSize, 100	; 00000064H
; Line 2221
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_StartSlideout ENDP
_TEXT	ENDS
EXTRN	_ResumeEnvironmentalUpdates:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _CloseSlider
_TEXT	SEGMENT
_CloseSlider PROC					; COMDAT
; Line 2224
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2225
	mov	DWORD PTR _slideoutState, 2
; Line 2226
	call	_ResumeLEDUpdates
; Line 2227
	call	_ResumeEnvironmentalUpdates
; Line 2228
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CloseSlider ENDP
_TEXT	ENDS
EXTRN	_GUI_SPRITE_Delete:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DeleteSlideout
_TEXT	SEGMENT
_DeleteSlideout PROC					; COMDAT
; Line 2231
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2232
	mov	DWORD PTR _slideoutXPos, 480		; 000001e0H
; Line 2233
	mov	DWORD PTR _slideoutState, 0
; Line 2234
	mov	eax, DWORD PTR _hSlideout
	push	eax
	call	_GUI_SPRITE_Delete
	add	esp, 4
; Line 2235
	cmp	DWORD PTR _hCameraSprite, 0
	je	SHORT $LN1@DeleteSlid
; Line 2237
	mov	eax, DWORD PTR _hSUStatusSprite
	push	eax
	call	_GUI_SPRITE_Delete
	add	esp, 4
; Line 2238
	mov	eax, DWORD PTR _hCameraSprite
	push	eax
	call	_GUI_SPRITE_Delete
	add	esp, 4
; Line 2239
	mov	eax, DWORD PTR _hSignalStrengthSprite
	push	eax
	call	_GUI_SPRITE_Delete
	add	esp, 4
$LN1@DeleteSlid:
; Line 2241
	mov	DWORD PTR _hSignalStrengthSprite, 0
	mov	eax, DWORD PTR _hSignalStrengthSprite
	mov	DWORD PTR _hSUStatusSprite, eax
	mov	ecx, DWORD PTR _hSUStatusSprite
	mov	DWORD PTR _hCameraSprite, ecx
	mov	edx, DWORD PTR _hCameraSprite
	mov	DWORD PTR _hSlideout, edx
; Line 2243
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DeleteSlideout ENDP
_TEXT	ENDS
PUBLIC	_SetSpritePositions
PUBLIC	_CheckSlideoutTimer
EXTRN	_GUI_TIMER_Delete:PROC
EXTRN	_SuspendEnvironmentalUpdates:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _CheckSlideoutTimer
_TEXT	SEGMENT
tv65 = -196						; size = 4
_hWin$ = 8						; size = 4
_CheckSlideoutTimer PROC				; COMDAT
; Line 2246
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2247
	mov	eax, DWORD PTR _hWin$[ebp]
	cmp	eax, DWORD PTR _hSlideoutTimer
	jne	$LN13@CheckSlide
; Line 2249
	mov	eax, DWORD PTR _slideoutState
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 1
	je	SHORT $LN10@CheckSlide
	cmp	DWORD PTR tv65[ebp], 2
	je	$LN6@CheckSlide
	cmp	DWORD PTR tv65[ebp], 3
	je	$LN2@CheckSlide
	jmp	$LN11@CheckSlide
$LN10@CheckSlide:
; Line 2252
	cmp	DWORD PTR _slideoutXPos, 240		; 000000f0H
	jle	SHORT $LN9@CheckSlide
; Line 2253
	mov	eax, DWORD PTR _slideoutXPos
	sub	eax, 100				; 00000064H
	mov	DWORD PTR _slideoutXPos, eax
$LN9@CheckSlide:
; Line 2254
	cmp	DWORD PTR _slideoutXPos, 240		; 000000f0H
	jg	SHORT $LN8@CheckSlide
; Line 2257
	mov	DWORD PTR _slideoutXPos, 240		; 000000f0H
; Line 2258
	mov	DWORD PTR _slideoutState, 3
; Line 2259
	call	_SetSpritePositions
; Line 2260
	push	5000					; 00001388H
	mov	eax, DWORD PTR _hSlideoutTimer
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
; Line 2261
	call	_SuspendEnvironmentalUpdates
; Line 2263
	jmp	SHORT $LN7@CheckSlide
$LN8@CheckSlide:
; Line 2265
	call	_SetSpritePositions
; Line 2266
	push	10					; 0000000aH
	mov	eax, DWORD PTR _hSlideoutTimer
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
$LN7@CheckSlide:
; Line 2268
	jmp	$LN11@CheckSlide
$LN6@CheckSlide:
; Line 2271
	cmp	DWORD PTR _slideoutXPos, 480		; 000001e0H
	jge	SHORT $LN5@CheckSlide
; Line 2272
	mov	eax, DWORD PTR _slideoutXPos
	add	eax, DWORD PTR _slideoutStepSize
	mov	DWORD PTR _slideoutXPos, eax
$LN5@CheckSlide:
; Line 2273
	cmp	DWORD PTR _slideoutXPos, 480		; 000001e0H
	jl	SHORT $LN4@CheckSlide
; Line 2275
	call	_DeleteSlideout
; Line 2276
	mov	eax, DWORD PTR _hSlideoutTimer
	push	eax
	call	_GUI_TIMER_Delete
	add	esp, 4
; Line 2278
	jmp	SHORT $LN3@CheckSlide
$LN4@CheckSlide:
; Line 2280
	call	_SetSpritePositions
; Line 2281
	mov	eax, DWORD PTR _slideoutStepTime
	push	eax
	mov	ecx, DWORD PTR _hSlideoutTimer
	push	ecx
	call	_WM_RestartTimer
	add	esp, 8
$LN3@CheckSlide:
; Line 2283
	jmp	SHORT $LN11@CheckSlide
$LN2@CheckSlide:
; Line 2287
	mov	DWORD PTR _slideoutStepTime, 10		; 0000000aH
	mov	eax, DWORD PTR _slideoutStepTime
	push	eax
	mov	ecx, DWORD PTR _hSlideoutTimer
	push	ecx
	call	_WM_RestartTimer
	add	esp, 8
; Line 2288
	mov	DWORD PTR _slideoutStepSize, 8
; Line 2289
	call	_CloseSlider
$LN11@CheckSlide:
; Line 2292
	mov	al, 1
	jmp	SHORT $LN14@CheckSlide
	jmp	SHORT $LN14@CheckSlide
$LN13@CheckSlide:
; Line 2294
	xor	al, al
$LN14@CheckSlide:
; Line 2295
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CheckSlideoutTimer ENDP
_TEXT	ENDS
EXTRN	_GUI_SPRITE_SetPosition:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SetSpritePositions
_TEXT	SEGMENT
_SetSpritePositions PROC				; COMDAT
; Line 2298
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2299
	mov	eax, DWORD PTR _slideoutYPos
	push	eax
	mov	ecx, DWORD PTR _slideoutXPos
	push	ecx
	mov	edx, DWORD PTR _hSlideout
	push	edx
	call	_GUI_SPRITE_SetPosition
	add	esp, 12					; 0000000cH
; Line 2300
	mov	eax, DWORD PTR _slideoutYPos
	push	eax
	mov	ecx, DWORD PTR _slideoutXPos
	add	ecx, 122				; 0000007aH
	push	ecx
	mov	edx, DWORD PTR _hSUStatusSprite
	push	edx
	call	_GUI_SPRITE_SetPosition
	add	esp, 12					; 0000000cH
; Line 2301
	mov	eax, DWORD PTR _slideoutYPos
	push	eax
	mov	ecx, DWORD PTR _slideoutXPos
	add	ecx, 165				; 000000a5H
	push	ecx
	mov	edx, DWORD PTR _hCameraSprite
	push	edx
	call	_GUI_SPRITE_SetPosition
	add	esp, 12					; 0000000cH
; Line 2302
	mov	eax, DWORD PTR _slideoutYPos
	push	eax
	mov	ecx, DWORD PTR _slideoutXPos
	add	ecx, 202				; 000000caH
	push	ecx
	mov	edx, DWORD PTR _hSignalStrengthSprite
	push	edx
	call	_GUI_SPRITE_SetPosition
	add	esp, 12					; 0000000cH
; Line 2303
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SetSpritePositions ENDP
_TEXT	ENDS
PUBLIC	_SlideOutDeployed
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SlideOutDeployed
_TEXT	SEGMENT
_SlideOutDeployed PROC					; COMDAT
; Line 2310
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2311
	cmp	DWORD PTR _slideoutState, 0
	je	SHORT $LN2@SlideOutDe
; Line 2312
	mov	al, 1
	jmp	SHORT $LN3@SlideOutDe
	jmp	SHORT $LN3@SlideOutDe
$LN2@SlideOutDe:
; Line 2313
	xor	al, al
$LN3@SlideOutDe:
; Line 2314
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SlideOutDeployed ENDP
_TEXT	ENDS
PUBLIC	_SlideOutVisible
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SlideOutVisible
_TEXT	SEGMENT
_SlideOutVisible PROC					; COMDAT
; Line 2320
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2321
	cmp	DWORD PTR _slideoutState, 3
	jne	SHORT $LN2@SlideOutVi
; Line 2322
	mov	al, 1
	jmp	SHORT $LN3@SlideOutVi
	jmp	SHORT $LN3@SlideOutVi
$LN2@SlideOutVi:
; Line 2323
	xor	al, al
$LN3@SlideOutVi:
; Line 2324
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SlideOutVisible ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_TouchPosIsBackKey
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _TouchPosIsBackKey
_TEXT	SEGMENT
_TouchState$ = -20					; size = 12
__$ArrayPad$ = -4					; size = 4
_TouchPosIsBackKey PROC					; COMDAT
; Line 2331
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2334
	lea	eax, DWORD PTR _TouchState$[ebp]
	push	eax
	call	_GUI_TOUCH_GetState
	add	esp, 4
; Line 2335
	mov	eax, DWORD PTR _TouchState$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _TouchState$[ebp]
	push	ecx
	call	_TouchPosIsBackKey2
	add	esp, 8
; Line 2336
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@TouchPosIs
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@TouchPosIs:
	DD	1
	DD	$LN4@TouchPosIs
$LN4@TouchPosIs:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN3@TouchPosIs
$LN3@TouchPosIs:
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_TouchPosIsBackKey ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _TouchPosIsBackKey2
_TEXT	SEGMENT
_lastx$ = 8						; size = 4
_lasty$ = 12						; size = 4
_TouchPosIsBackKey2 PROC				; COMDAT
; Line 2339
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2340
	cmp	DWORD PTR _lastx$[ebp], 0
	jl	SHORT $LN3@TouchPosIs@2
	cmp	DWORD PTR _lasty$[ebp], 0
	jge	SHORT $LN4@TouchPosIs@2
$LN3@TouchPosIs@2:
; Line 2341
	xor	al, al
	jmp	SHORT $LN5@TouchPosIs@2
$LN4@TouchPosIs@2:
; Line 2342
	cmp	DWORD PTR _lastx$[ebp], 60		; 0000003cH
	jge	SHORT $LN2@TouchPosIs@2
	cmp	DWORD PTR _lasty$[ebp], 212		; 000000d4H
	jle	SHORT $LN2@TouchPosIs@2
; Line 2343
	mov	al, 1
	jmp	SHORT $LN5@TouchPosIs@2
	jmp	SHORT $LN5@TouchPosIs@2
$LN2@TouchPosIs@2:
; Line 2344
	xor	al, al
$LN5@TouchPosIs@2:
; Line 2345
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TouchPosIsBackKey2 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _TouchPosIsReset
_TEXT	SEGMENT
_lastx$ = 8						; size = 4
_lasty$ = 12						; size = 4
_TouchPosIsReset PROC					; COMDAT
; Line 2351
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2352
	cmp	DWORD PTR _lastx$[ebp], 100		; 00000064H
	jle	SHORT $LN2@TouchPosIs@3
	cmp	DWORD PTR _lastx$[ebp], 300		; 0000012cH
	jge	SHORT $LN2@TouchPosIs@3
	cmp	DWORD PTR _lasty$[ebp], 100		; 00000064H
	jle	SHORT $LN2@TouchPosIs@3
	cmp	DWORD PTR _lasty$[ebp], 200		; 000000c8H
	jge	SHORT $LN2@TouchPosIs@3
; Line 2353
	mov	eax, 1
	jmp	SHORT $LN3@TouchPosIs@3
	jmp	SHORT $LN3@TouchPosIs@3
$LN2@TouchPosIs@3:
; Line 2354
	xor	eax, eax
$LN3@TouchPosIs@3:
; Line 2355
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TouchPosIsReset ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _StartBackKeyTimer
_TEXT	SEGMENT
_StartBackKeyTimer PROC					; COMDAT
; Line 2358
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2359
	call	_GUI_GetTime
	mov	DWORD PTR _backKeyPressedTime, eax
; Line 2360
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_StartBackKeyTimer ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _BackTimerExpired
_TEXT	SEGMENT
_backKeyReleasedTime$ = -8				; size = 4
_BackTimerExpired PROC					; COMDAT
; Line 2363
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2364
	call	_GUI_GetTime
	mov	DWORD PTR _backKeyReleasedTime$[ebp], eax
; Line 2366
	cmp	DWORD PTR _backKeyPressedTime, 0
	jle	SHORT $LN2@BackTimerE
; Line 2368
	mov	eax, DWORD PTR _backKeyReleasedTime$[ebp]
	sub	eax, DWORD PTR _backKeyPressedTime
	cmp	eax, 2000				; 000007d0H
	jle	SHORT $LN2@BackTimerE
; Line 2370
	mov	DWORD PTR _backKeyPressedTime, 0
; Line 2371
	mov	al, 1
	jmp	SHORT $LN3@BackTimerE
$LN2@BackTimerE:
; Line 2374
	xor	al, al
$LN3@BackTimerE:
; Line 2375
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_BackTimerExpired ENDP
_TEXT	ENDS
PUBLIC	_AnyNonDragGaugeScreen
EXTRN	_ScreenIsConfigurable:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _StartConfigKeyTimer
_TEXT	SEGMENT
_screenID$21528 = -8					; size = 4
_StartConfigKeyTimer PROC				; COMDAT
; Line 2378
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2379
	cmp	DWORD PTR _slideoutState, 0
	jne	SHORT $LN5@StartConfi
; Line 2380
	call	_GetScreenType
	push	eax
	call	_AnyNonDragGaugeScreen
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@StartConfi
; Line 2381
	cmp	DWORD PTR _selectedRaceMode, 0
	je	SHORT $LN2@StartConfi
	cmp	DWORD PTR _selectedRaceMode, 2
	je	SHORT $LN2@StartConfi
	cmp	DWORD PTR _selectedRaceMode, 3
	jne	SHORT $LN5@StartConfi
$LN2@StartConfi:
; Line 2385
	call	_GetCurrentScreenID
	mov	DWORD PTR _screenID$21528[ebp], eax
; Line 2386
	mov	eax, DWORD PTR _screenID$21528[ebp]
	push	eax
	call	_ScreenIsConfigurable
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@StartConfi
; Line 2388
	call	_GUI_GetTime
	mov	DWORD PTR _configKeyPressedTime, eax
; Line 2389
	jmp	SHORT $LN6@StartConfi
$LN5@StartConfi:
; Line 2394
	mov	DWORD PTR _configKeyPressedTime, 0
$LN6@StartConfi:
; Line 2395
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_StartConfigKeyTimer ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ConfigTimerExpired
_TEXT	SEGMENT
_configKeyReleasedTime$21533 = -8			; size = 4
_ConfigTimerExpired PROC				; COMDAT
; Line 2398
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2399
	cmp	DWORD PTR _configKeyPressedTime, 0
	jle	SHORT $LN2@ConfigTime
; Line 2401
	call	_GUI_GetTime
	mov	DWORD PTR _configKeyReleasedTime$21533[ebp], eax
; Line 2403
	mov	eax, DWORD PTR _configKeyReleasedTime$21533[ebp]
	sub	eax, DWORD PTR _configKeyPressedTime
	cmp	eax, 2000				; 000007d0H
	jle	SHORT $LN2@ConfigTime
; Line 2405
	mov	DWORD PTR _configKeyPressedTime, 0
; Line 2406
	mov	al, 1
	jmp	SHORT $LN3@ConfigTime
$LN2@ConfigTime:
; Line 2409
	xor	al, al
$LN3@ConfigTime:
; Line 2410
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ConfigTimerExpired ENDP
_TEXT	ENDS
PUBLIC	_ShowHelpPopup
PUBLIC	_GetStorageStatsHelpText
PUBLIC	_GetSystemStatsHelpText
EXTRN	_UnhideSprites:PROC
EXTRN	_DUSpecificCameraHelpScreens:BYTE
EXTRN	_SUSpecificCameraHelpScreens:BYTE
EXTRN	_EditScaleHelpScreens:BYTE
EXTRN	_MainHelpScreens:BYTE
EXTRN	_GenericCameraHelpScreens:BYTE
EXTRN	_AnalogInputsHelpScreens:BYTE
EXTRN	_TachSpecificHelpScreens:BYTE
EXTRN	_VehicleSetupSpecificHelpScreens:BYTE
EXTRN	_AutoOnSpecificHelpScreens:BYTE
EXTRN	_TimeZoneGPSScreens:BYTE
EXTRN	_TrackSettingsSpecificHelpScreens:BYTE
EXTRN	_VehicleSelectionHelpScreens:BYTE
EXTRN	_ReviewSessionsHelpScreens:BYTE
EXTRN	_GoRacingHelpScreens:BYTE
EXTRN	_pHelpScreens:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _CheckForInfoKey
_TEXT	SEGMENT
tv225 = -220						; size = 4
tv186 = -220						; size = 4
tv180 = -220						; size = 4
tv173 = -220						; size = 4
tv166 = -220						; size = 4
tv94 = -220						; size = 4
tv82 = -220						; size = 4
tv76 = -220						; size = 4
tv70 = -220						; size = 4
tv66 = -220						; size = 4
_handleSprites$ = -17					; size = 1
_currentScreen$ = -8					; size = 4
_hasHelp$ = 8						; size = 4
_CheckForInfoKey PROC					; COMDAT
; Line 2415
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2417
	mov	BYTE PTR _handleSprites$[ebp], 0
; Line 2419
	call	_GetCurrentScreen
	mov	DWORD PTR _currentScreen$[ebp], eax
; Line 2420
	mov	DWORD PTR _pHelpScreens, -1
; Line 2421
	mov	DWORD PTR _pHelpText, 0
; Line 2427
	call	_GetScreenType
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 37			; 00000025H
	ja	$LN138@CheckForIn
	mov	eax, DWORD PTR tv66[ebp]
	movzx	ecx, BYTE PTR $LN142@CheckForIn[eax]
	jmp	DWORD PTR $LN143@CheckForIn[ecx*4]
$LN137@CheckForIn:
; Line 2430
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21551
; Line 2431
	push	OFFSET _MAIN_SCREEN_INFO
	call	_GetSystemStatsHelpText
	add	esp, 4
	mov	DWORD PTR _pHelpText, eax
; Line 2432
	mov	DWORD PTR _pHelpScreens, 0
; Line 2433
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN136@CheckForIn
; Line 2434
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN136@CheckForIn:
; Line 2435
	jmp	$LN138@CheckForIn
$LN135@CheckForIn:
; Line 2438
	mov	eax, DWORD PTR _currentScreen$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	cmp	DWORD PTR tv70[ebp], 3
	ja	$LN133@CheckForIn
	mov	ecx, DWORD PTR tv70[ebp]
	jmp	DWORD PTR $LN144@CheckForIn[ecx*4]
$LN132@CheckForIn:
; Line 2441
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21559
; Line 2442
	mov	DWORD PTR _pHelpText, OFFSET _GO_RACING_INFO
; Line 2443
	mov	DWORD PTR _pHelpScreens, OFFSET _GoRacingHelpScreens
; Line 2444
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN131@CheckForIn
; Line 2445
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN131@CheckForIn:
; Line 2446
	jmp	SHORT $LN133@CheckForIn
$LN130@CheckForIn:
; Line 2448
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21562
; Line 2449
	mov	DWORD PTR _pHelpText, OFFSET _RACE_SETUP_INFO
; Line 2450
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN129@CheckForIn
; Line 2451
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN129@CheckForIn:
; Line 2452
	jmp	SHORT $LN133@CheckForIn
$LN128@CheckForIn:
; Line 2454
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21565
; Line 2455
	mov	DWORD PTR _pHelpText, OFFSET _REVIEW_SESSIONS_INFO
; Line 2457
	mov	DWORD PTR _pHelpScreens, OFFSET _ReviewSessionsHelpScreens
; Line 2458
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN127@CheckForIn
; Line 2459
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN127@CheckForIn:
; Line 2460
	jmp	SHORT $LN133@CheckForIn
$LN126@CheckForIn:
; Line 2462
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21568
; Line 2463
	mov	DWORD PTR _pHelpText, OFFSET _SYSTEMS_SETUP_INFO
; Line 2464
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN133@CheckForIn
; Line 2465
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN133@CheckForIn:
; Line 2469
	jmp	$LN138@CheckForIn
$LN124@CheckForIn:
; Line 2472
	mov	eax, DWORD PTR _currentScreen$[ebp]
	mov	DWORD PTR tv76[ebp], eax
	cmp	DWORD PTR tv76[ebp], 3
	ja	$LN122@CheckForIn
	mov	ecx, DWORD PTR tv76[ebp]
	jmp	DWORD PTR $LN145@CheckForIn[ecx*4]
$LN121@CheckForIn:
; Line 2475
	mov	BYTE PTR _handleSprites$[ebp], 1
; Line 2476
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21576
; Line 2477
	mov	DWORD PTR _pHelpText, OFFSET _SELECT_DRIVER_INFO
; Line 2478
	mov	DWORD PTR _pHelpScreens, -1
; Line 2479
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN120@CheckForIn
; Line 2480
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN120@CheckForIn:
; Line 2481
	jmp	$LN122@CheckForIn
$LN119@CheckForIn:
; Line 2484
	mov	BYTE PTR _handleSprites$[ebp], 1
; Line 2485
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21580
; Line 2486
	mov	DWORD PTR _pHelpText, OFFSET _SELECT_VEHICLE_INFO
; Line 2487
	mov	DWORD PTR _pHelpScreens, OFFSET _VehicleSelectionHelpScreens
; Line 2488
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN118@CheckForIn
; Line 2489
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN118@CheckForIn:
; Line 2490
	jmp	SHORT $LN122@CheckForIn
$LN117@CheckForIn:
; Line 2493
	mov	BYTE PTR _handleSprites$[ebp], 1
; Line 2494
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21583
; Line 2495
	mov	DWORD PTR _pHelpText, OFFSET _SELECT_TRACK_INFO
; Line 2496
	mov	DWORD PTR _pHelpScreens, OFFSET _TrackSettingsSpecificHelpScreens
; Line 2497
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN116@CheckForIn
; Line 2498
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN116@CheckForIn:
; Line 2499
	jmp	SHORT $LN122@CheckForIn
$LN115@CheckForIn:
; Line 2502
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21586
; Line 2503
	mov	DWORD PTR _pHelpText, OFFSET _LAP_QUAL_INFO
; Line 2504
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN122@CheckForIn
; Line 2505
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN122@CheckForIn:
; Line 2509
	jmp	$LN138@CheckForIn
$LN113@CheckForIn:
; Line 2512
	mov	eax, DWORD PTR _currentScreen$[ebp]
	mov	DWORD PTR tv82[ebp], eax
	cmp	DWORD PTR tv82[ebp], 5
	ja	$LN111@CheckForIn
	mov	ecx, DWORD PTR tv82[ebp]
	jmp	DWORD PTR $LN146@CheckForIn[ecx*4]
$LN110@CheckForIn:
; Line 2515
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21594
; Line 2516
	mov	DWORD PTR _pHelpText, OFFSET _DISPLAY_SETTINGS_INFO
; Line 2517
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN109@CheckForIn
; Line 2518
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN109@CheckForIn:
; Line 2519
	jmp	$LN111@CheckForIn
$LN108@CheckForIn:
; Line 2522
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21597
; Line 2523
	mov	DWORD PTR _pHelpText, OFFSET _UNITS_SETTINGS_INFO
; Line 2524
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN107@CheckForIn
; Line 2525
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN107@CheckForIn:
; Line 2526
	jmp	$LN111@CheckForIn
$LN106@CheckForIn:
; Line 2529
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21600
; Line 2530
	mov	DWORD PTR _pHelpText, OFFSET _TIME_SETTINGS_INFO
; Line 2531
	mov	DWORD PTR _pHelpScreens, OFFSET _TimeZoneGPSScreens
; Line 2532
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN105@CheckForIn
; Line 2533
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN105@CheckForIn:
; Line 2534
	jmp	$LN111@CheckForIn
$LN104@CheckForIn:
; Line 2537
	mov	DWORD PTR _pHelpScreens, OFFSET _AutoOnSpecificHelpScreens
; Line 2538
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21603
; Line 2539
	mov	DWORD PTR _pHelpText, OFFSET _AUTOSTART_SETTINGS_INFO
; Line 2540
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN103@CheckForIn
; Line 2541
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN103@CheckForIn:
; Line 2542
	jmp	SHORT $LN111@CheckForIn
$LN102@CheckForIn:
; Line 2545
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21606
; Line 2546
	push	OFFSET _STORAGE_SETTINGS_INFO
	call	_GetStorageStatsHelpText
	add	esp, 4
	mov	DWORD PTR _pHelpText, eax
; Line 2547
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN101@CheckForIn
; Line 2548
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN101@CheckForIn:
; Line 2549
	jmp	SHORT $LN111@CheckForIn
$LN100@CheckForIn:
; Line 2553
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21609
; Line 2554
	mov	DWORD PTR _pHelpText, OFFSET _PREDICTIVE_SCALE_INFO
; Line 2555
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN111@CheckForIn
; Line 2556
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN111@CheckForIn:
; Line 2560
	jmp	$LN138@CheckForIn
$LN98@CheckForIn:
; Line 2563
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21612
; Line 2564
	mov	DWORD PTR _pHelpText, OFFSET _VEHICLE_SETTINGS_INFO
; Line 2565
	mov	DWORD PTR _pHelpScreens, OFFSET _VehicleSetupSpecificHelpScreens
; Line 2566
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN97@CheckForIn
; Line 2567
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN97@CheckForIn:
; Line 2568
	jmp	$LN138@CheckForIn
$LN96@CheckForIn:
; Line 2571
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21615
; Line 2572
	mov	DWORD PTR _pHelpText, OFFSET _AERO_GRIP_INFO
; Line 2573
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN95@CheckForIn
; Line 2574
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN95@CheckForIn:
; Line 2575
	jmp	$LN138@CheckForIn
$LN94@CheckForIn:
; Line 2578
	mov	eax, DWORD PTR _currentScreen$[ebp]
	mov	DWORD PTR tv94[ebp], eax
	cmp	DWORD PTR tv94[ebp], 5
	ja	$LN92@CheckForIn
	mov	ecx, DWORD PTR tv94[ebp]
	jmp	DWORD PTR $LN147@CheckForIn[ecx*4]
$LN91@CheckForIn:
; Line 2581
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21623
; Line 2582
	mov	DWORD PTR _pHelpText, OFFSET _TACH_SETTINGS_INFO
; Line 2583
	mov	DWORD PTR _pHelpScreens, OFFSET _TachSpecificHelpScreens
; Line 2584
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN90@CheckForIn
; Line 2585
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN90@CheckForIn:
; Line 2586
	jmp	$LN92@CheckForIn
$LN89@CheckForIn:
; Line 2589
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21626
; Line 2590
	mov	DWORD PTR _pHelpText, OFFSET _CAR_METRICS_INFO
; Line 2591
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN88@CheckForIn
; Line 2592
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN88@CheckForIn:
; Line 2593
	jmp	$LN92@CheckForIn
$LN87@CheckForIn:
; Line 2596
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21629
; Line 2597
	mov	DWORD PTR _pHelpText, OFFSET _GEAR_RATIO_INFO
; Line 2598
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN86@CheckForIn
; Line 2599
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN86@CheckForIn:
; Line 2600
	jmp	$LN92@CheckForIn
$LN85@CheckForIn:
; Line 2603
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21632
; Line 2604
	mov	DWORD PTR _pHelpText, OFFSET _INPUTS_INFO
; Line 2605
	mov	DWORD PTR _pHelpScreens, OFFSET _AnalogInputsHelpScreens
; Line 2606
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN84@CheckForIn
; Line 2607
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN84@CheckForIn:
; Line 2608
	jmp	SHORT $LN92@CheckForIn
$LN83@CheckForIn:
; Line 2611
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21635
; Line 2612
	mov	DWORD PTR _pHelpText, OFFSET _WEIGHT_INFO
; Line 2613
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN82@CheckForIn
; Line 2614
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN82@CheckForIn:
; Line 2615
	jmp	SHORT $LN92@CheckForIn
$LN81@CheckForIn:
; Line 2618
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21638
; Line 2619
	mov	DWORD PTR _pHelpText, OFFSET _CAMERA_SETUP_INFO
; Line 2620
	mov	DWORD PTR _pHelpScreens, OFFSET _GenericCameraHelpScreens
; Line 2621
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN92@CheckForIn
; Line 2622
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN92@CheckForIn:
; Line 2626
	jmp	$LN138@CheckForIn
$LN79@CheckForIn:
; Line 2629
	mov	eax, DWORD PTR _currentScreen$[ebp]
	mov	DWORD PTR tv166[ebp], eax
	cmp	DWORD PTR tv166[ebp], 4
	ja	$LN77@CheckForIn
	mov	ecx, DWORD PTR tv166[ebp]
	jmp	DWORD PTR $LN148@CheckForIn[ecx*4]
$LN76@CheckForIn:
; Line 2632
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21646
; Line 2633
	mov	DWORD PTR _pHelpText, OFFSET _TACH_WARNING_INFO
; Line 2634
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN75@CheckForIn
; Line 2635
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN75@CheckForIn:
; Line 2636
	jmp	$LN77@CheckForIn
$LN74@CheckForIn:
; Line 2639
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21649
; Line 2640
	mov	DWORD PTR _pHelpText, OFFSET _TACH_REDLINE_INFO
; Line 2641
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN73@CheckForIn
; Line 2642
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN73@CheckForIn:
; Line 2643
	jmp	SHORT $LN77@CheckForIn
$LN72@CheckForIn:
; Line 2646
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21652
; Line 2647
	mov	DWORD PTR _pHelpText, OFFSET _NUM_CYL_INFO
; Line 2648
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN71@CheckForIn
; Line 2649
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN71@CheckForIn:
; Line 2650
	jmp	SHORT $LN77@CheckForIn
$LN70@CheckForIn:
; Line 2653
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21655
; Line 2654
	mov	DWORD PTR _pHelpText, OFFSET _TACH_PWREND_INFO
; Line 2655
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN69@CheckForIn
; Line 2656
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN69@CheckForIn:
; Line 2657
	jmp	SHORT $LN77@CheckForIn
$LN68@CheckForIn:
; Line 2660
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21658
; Line 2661
	mov	DWORD PTR _pHelpText, OFFSET _TACH_MAXRPM_INFO
; Line 2662
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN77@CheckForIn
; Line 2663
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN77@CheckForIn:
; Line 2667
	jmp	$LN138@CheckForIn
$LN66@CheckForIn:
; Line 2670
	mov	eax, DWORD PTR _currentScreen$[ebp]
	mov	DWORD PTR tv173[ebp], eax
	cmp	DWORD PTR tv173[ebp], 5
	ja	SHORT $LN64@CheckForIn
	mov	ecx, DWORD PTR tv173[ebp]
	jmp	DWORD PTR $LN149@CheckForIn[ecx*4]
$LN63@CheckForIn:
; Line 2676
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21666
; Line 2677
	mov	DWORD PTR _pHelpText, OFFSET _ANALOG_SETTINGS_INFO
; Line 2678
	mov	DWORD PTR _pHelpScreens, OFFSET _AnalogInputsHelpScreens
; Line 2679
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN62@CheckForIn
; Line 2680
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN62@CheckForIn:
; Line 2681
	jmp	SHORT $LN64@CheckForIn
$LN61@CheckForIn:
; Line 2685
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21669
; Line 2686
	mov	DWORD PTR _pHelpText, OFFSET _DIGITAL_SETTINGS_INFO
; Line 2687
	mov	DWORD PTR _pHelpScreens, OFFSET _AnalogInputsHelpScreens
; Line 2688
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN64@CheckForIn
; Line 2689
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN64@CheckForIn:
; Line 2693
	jmp	$LN138@CheckForIn
$LN59@CheckForIn:
; Line 2696
	mov	DWORD PTR _pHelpScreens, OFFSET _ReviewSessionsHelpScreens
; Line 2697
	cmp	DWORD PTR _currentScreen$[ebp], 0
	jne	SHORT $LN58@CheckForIn
; Line 2699
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21673
; Line 2700
	mov	DWORD PTR _pHelpText, OFFSET _SESSION_DETAILS_INFO
; Line 2701
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN58@CheckForIn
; Line 2702
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN58@CheckForIn:
; Line 2704
	jmp	$LN138@CheckForIn
$LN56@CheckForIn:
; Line 2707
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21676
; Line 2708
	mov	DWORD PTR _pHelpText, OFFSET _TRACK_SETTINGS_INFO
; Line 2709
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN55@CheckForIn
; Line 2710
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN55@CheckForIn:
; Line 2711
	jmp	$LN138@CheckForIn
$LN54@CheckForIn:
; Line 2714
	mov	eax, DWORD PTR _currentScreen$[ebp]
	mov	DWORD PTR tv180[ebp], eax
	cmp	DWORD PTR tv180[ebp], 3
	ja	$LN52@CheckForIn
	mov	ecx, DWORD PTR tv180[ebp]
	jmp	DWORD PTR $LN150@CheckForIn[ecx*4]
$LN51@CheckForIn:
; Line 2717
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21684
; Line 2718
	mov	DWORD PTR _pHelpText, OFFSET _TRACK_TYPE_INFO
; Line 2719
	mov	DWORD PTR _pHelpScreens, OFFSET _MainHelpScreens
; Line 2720
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN50@CheckForIn
; Line 2721
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN50@CheckForIn:
; Line 2722
	jmp	$LN52@CheckForIn
$LN49@CheckForIn:
; Line 2725
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21687
; Line 2726
	mov	DWORD PTR _pHelpText, OFFSET _LAP_HOLD_INFO
; Line 2727
	mov	DWORD PTR _pHelpScreens, OFFSET _MainHelpScreens
; Line 2728
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN48@CheckForIn
; Line 2729
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN48@CheckForIn:
; Line 2730
	jmp	SHORT $LN52@CheckForIn
$LN47@CheckForIn:
; Line 2733
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21690
; Line 2734
	mov	DWORD PTR _pHelpText, OFFSET _START_FINISH_INFO
; Line 2735
	mov	DWORD PTR _pHelpScreens, OFFSET _MainHelpScreens
; Line 2736
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN46@CheckForIn
; Line 2737
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN46@CheckForIn:
; Line 2738
	jmp	SHORT $LN52@CheckForIn
$LN45@CheckForIn:
; Line 2741
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21693
; Line 2742
	mov	DWORD PTR _pHelpText, OFFSET _PREDICTIVE_LAP_INFO
; Line 2743
	mov	DWORD PTR _pHelpScreens, OFFSET _MainHelpScreens
; Line 2744
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN52@CheckForIn
; Line 2745
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN52@CheckForIn:
; Line 2749
	jmp	$LN138@CheckForIn
; Line 2754
	jmp	$LN138@CheckForIn
$LN42@CheckForIn:
; Line 2757
	mov	eax, DWORD PTR _currentScreen$[ebp]
	mov	DWORD PTR tv186[ebp], eax
	cmp	DWORD PTR tv186[ebp], 0
	je	SHORT $LN39@CheckForIn
	cmp	DWORD PTR tv186[ebp], 1
	je	SHORT $LN37@CheckForIn
	cmp	DWORD PTR tv186[ebp], 2
	je	SHORT $LN35@CheckForIn
	jmp	$LN40@CheckForIn
$LN39@CheckForIn:
; Line 2760
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21702
; Line 2761
	mov	DWORD PTR _pHelpText, OFFSET _TIRE_SIZE_INFO
; Line 2762
	mov	DWORD PTR _pHelpScreens, OFFSET _MainHelpScreens
; Line 2763
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN38@CheckForIn
; Line 2764
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN38@CheckForIn:
; Line 2765
	jmp	SHORT $LN40@CheckForIn
$LN37@CheckForIn:
; Line 2768
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21705
; Line 2769
	mov	DWORD PTR _pHelpText, OFFSET _DIFF_RATIO_INFO
; Line 2770
	mov	DWORD PTR _pHelpScreens, OFFSET _MainHelpScreens
; Line 2771
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN36@CheckForIn
; Line 2772
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN36@CheckForIn:
; Line 2773
	jmp	SHORT $LN40@CheckForIn
$LN35@CheckForIn:
; Line 2776
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21708
; Line 2777
	mov	DWORD PTR _pHelpText, OFFSET _TRANS_RATIO_INFO
; Line 2778
	mov	DWORD PTR _pHelpScreens, OFFSET _MainHelpScreens
; Line 2779
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN40@CheckForIn
; Line 2780
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN40@CheckForIn:
; Line 2784
	jmp	$LN138@CheckForIn
; Line 2787
	jmp	$LN138@CheckForIn
; Line 2789
	jmp	$LN138@CheckForIn
$LN31@CheckForIn:
; Line 2792
	mov	eax, DWORD PTR _currentScreen$[ebp]
	mov	DWORD PTR tv225[ebp], eax
	cmp	DWORD PTR tv225[ebp], 0
	je	SHORT $LN28@CheckForIn
	cmp	DWORD PTR tv225[ebp], 1
	je	SHORT $LN26@CheckForIn
	jmp	SHORT $LN29@CheckForIn
$LN28@CheckForIn:
; Line 2795
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21718
; Line 2796
	mov	DWORD PTR _pHelpText, OFFSET _ANALOG_SCALE_INFO
; Line 2797
	mov	DWORD PTR _pHelpScreens, OFFSET _EditScaleHelpScreens
; Line 2798
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN27@CheckForIn
; Line 2799
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN27@CheckForIn:
; Line 2800
	jmp	SHORT $LN29@CheckForIn
$LN26@CheckForIn:
; Line 2803
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21721
; Line 2804
	mov	DWORD PTR _pHelpText, OFFSET _ANALOG_ALARM_INFO
; Line 2805
	mov	DWORD PTR _pHelpScreens, OFFSET _AnalogInputsHelpScreens
; Line 2806
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN29@CheckForIn
; Line 2807
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN29@CheckForIn:
; Line 2811
	jmp	$LN138@CheckForIn
; Line 2814
	jmp	$LN138@CheckForIn
$LN23@CheckForIn:
; Line 2817
	cmp	DWORD PTR _currentScreen$[ebp], 0
	jne	SHORT $LN22@CheckForIn
; Line 2819
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21726
; Line 2820
	mov	DWORD PTR _pHelpText, OFFSET _DIGITAL_ALARM_INFO
; Line 2821
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN22@CheckForIn
; Line 2822
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN22@CheckForIn:
; Line 2824
	jmp	$LN138@CheckForIn
$LN20@CheckForIn:
; Line 2827
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21729
; Line 2828
	mov	DWORD PTR _pHelpText, OFFSET _TIRE_DIMENSIONS_INFO
; Line 2829
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN19@CheckForIn
; Line 2830
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN19@CheckForIn:
; Line 2831
	jmp	$LN138@CheckForIn
$LN18@CheckForIn:
; Line 2834
	mov	BYTE PTR _handleSprites$[ebp], 1
; Line 2835
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21732
; Line 2836
	mov	DWORD PTR _pHelpText, OFFSET _CHOOSE_TRACK_INFO
; Line 2837
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN17@CheckForIn
; Line 2838
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN17@CheckForIn:
; Line 2839
	jmp	$LN138@CheckForIn
$LN16@CheckForIn:
; Line 2842
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21735
; Line 2843
	mov	DWORD PTR _pHelpText, OFFSET _PERSONALIZE_INFO
; Line 2844
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN15@CheckForIn
; Line 2845
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN15@CheckForIn:
; Line 2846
	jmp	$LN138@CheckForIn
$LN14@CheckForIn:
; Line 2850
	movzx	eax, BYTE PTR _sysData+208
	cmp	eax, 65					; 00000041H
	jne	SHORT $LN13@CheckForIn
; Line 2852
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21739
; Line 2853
	mov	DWORD PTR _pHelpText, OFFSET _AUTOX_STAGE_SCREEN_INFO
; Line 2855
	jmp	SHORT $LN12@CheckForIn
$LN13@CheckForIn:
; Line 2857
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21741
; Line 2858
	mov	DWORD PTR _pHelpText, OFFSET _DRAG_STAGE_SCREEN_INFO
$LN12@CheckForIn:
; Line 2860
	jmp	$LN138@CheckForIn
$LN11@CheckForIn:
; Line 2863
	mov	DWORD PTR _pHelpScreens, OFFSET _SUSpecificCameraHelpScreens
; Line 2864
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21743
; Line 2865
	mov	DWORD PTR _pHelpText, OFFSET _CAMERA_DELAY_INFO
; Line 2866
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN10@CheckForIn
; Line 2867
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN10@CheckForIn:
; Line 2868
	jmp	SHORT $LN138@CheckForIn
$LN9@CheckForIn:
; Line 2871
	mov	DWORD PTR _pHelpScreens, OFFSET _DUSpecificCameraHelpScreens
; Line 2872
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21746
; Line 2873
	mov	DWORD PTR _pHelpText, OFFSET _CAMERA_DELAY_INFO
; Line 2874
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN8@CheckForIn
; Line 2875
	mov	eax, 1
	jmp	$LN140@CheckForIn
$LN8@CheckForIn:
; Line 2876
	jmp	SHORT $LN138@CheckForIn
$LN7@CheckForIn:
; Line 2879
	mov	DWORD PTR _pHelpScreens, OFFSET _SUSpecificCameraHelpScreens
; Line 2880
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21749
; Line 2881
	mov	DWORD PTR _pHelpText, OFFSET _CAMERA_INFO
; Line 2882
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN6@CheckForIn
; Line 2883
	mov	eax, 1
	jmp	SHORT $LN140@CheckForIn
$LN6@CheckForIn:
; Line 2884
	jmp	SHORT $LN138@CheckForIn
$LN5@CheckForIn:
; Line 2887
	mov	DWORD PTR _pHelpTitle, OFFSET $SG21752
; Line 2888
	mov	DWORD PTR _pHelpText, OFFSET _RECORD_SPEED_INFO
; Line 2889
	cmp	DWORD PTR _hasHelp$[ebp], 0
	je	SHORT $LN138@CheckForIn
; Line 2890
	mov	eax, 1
	jmp	SHORT $LN140@CheckForIn
$LN138@CheckForIn:
; Line 2894
	cmp	DWORD PTR _pHelpText, 0
	je	SHORT $LN3@CheckForIn
; Line 2896
	movzx	eax, BYTE PTR _handleSprites$[ebp]
	test	eax, eax
	je	SHORT $LN2@CheckForIn
; Line 2897
	call	_HideSprites
$LN2@CheckForIn:
; Line 2898
	xor	eax, eax
	cmp	DWORD PTR _pHelpScreens, -1
	setne	al
	push	eax
	call	_ShowHelpPopup
	add	esp, 4
; Line 2899
	movzx	eax, BYTE PTR _handleSprites$[ebp]
	test	eax, eax
	je	SHORT $LN3@CheckForIn
; Line 2900
	call	_UnhideSprites
$LN3@CheckForIn:
; Line 2903
	xor	eax, eax
$LN140@CheckForIn:
; Line 2904
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN143@CheckForIn:
	DD	$LN137@CheckForIn
	DD	$LN135@CheckForIn
	DD	$LN124@CheckForIn
	DD	$LN113@CheckForIn
	DD	$LN94@CheckForIn
	DD	$LN98@CheckForIn
	DD	$LN79@CheckForIn
	DD	$LN66@CheckForIn
	DD	$LN59@CheckForIn
	DD	$LN56@CheckForIn
	DD	$LN54@CheckForIn
	DD	$LN42@CheckForIn
	DD	$LN31@CheckForIn
	DD	$LN23@CheckForIn
	DD	$LN20@CheckForIn
	DD	$LN18@CheckForIn
	DD	$LN16@CheckForIn
	DD	$LN14@CheckForIn
	DD	$LN96@CheckForIn
	DD	$LN7@CheckForIn
	DD	$LN11@CheckForIn
	DD	$LN9@CheckForIn
	DD	$LN5@CheckForIn
	DD	$LN138@CheckForIn
$LN142@CheckForIn:
	DB	0
	DB	1
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	14					; 0000000eH
	DB	23					; 00000017H
	DB	15					; 0000000fH
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	16					; 00000010H
	DB	23					; 00000017H
	DB	17					; 00000011H
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	23					; 00000017H
	DB	22					; 00000016H
	npad	2
$LN144@CheckForIn:
	DD	$LN132@CheckForIn
	DD	$LN130@CheckForIn
	DD	$LN128@CheckForIn
	DD	$LN126@CheckForIn
$LN145@CheckForIn:
	DD	$LN121@CheckForIn
	DD	$LN119@CheckForIn
	DD	$LN117@CheckForIn
	DD	$LN115@CheckForIn
$LN146@CheckForIn:
	DD	$LN110@CheckForIn
	DD	$LN108@CheckForIn
	DD	$LN106@CheckForIn
	DD	$LN104@CheckForIn
	DD	$LN102@CheckForIn
	DD	$LN100@CheckForIn
$LN147@CheckForIn:
	DD	$LN91@CheckForIn
	DD	$LN89@CheckForIn
	DD	$LN87@CheckForIn
	DD	$LN85@CheckForIn
	DD	$LN83@CheckForIn
	DD	$LN81@CheckForIn
$LN148@CheckForIn:
	DD	$LN76@CheckForIn
	DD	$LN74@CheckForIn
	DD	$LN72@CheckForIn
	DD	$LN70@CheckForIn
	DD	$LN68@CheckForIn
$LN149@CheckForIn:
	DD	$LN63@CheckForIn
	DD	$LN63@CheckForIn
	DD	$LN63@CheckForIn
	DD	$LN63@CheckForIn
	DD	$LN61@CheckForIn
	DD	$LN61@CheckForIn
$LN150@CheckForIn:
	DD	$LN51@CheckForIn
	DD	$LN49@CheckForIn
	DD	$LN47@CheckForIn
	DD	$LN45@CheckForIn
_CheckForInfoKey ENDP
_TEXT	ENDS
PUBLIC	_HelpCallback
EXTRN	_GUI_ExecDialogBox:PROC
EXTRN	_SetPopupDefaults:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ShowHelpPopup
_TEXT	SEGMENT
_detailsAvail$ = 8					; size = 4
_ShowHelpPopup PROC					; COMDAT
; Line 2927
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2928
	push	0
	call	_SetPopupDefaults
	add	esp, 4
; Line 2929
	cmp	DWORD PTR _detailsAvail$[ebp], 0
	je	SHORT $LN2@ShowHelpPo
; Line 2930
	push	10					; 0000000aH
	push	10					; 0000000aH
	call	_GetCurrentWindowHandle
	push	eax
	push	OFFSET _HelpCallback
	push	3
	push	OFFSET _HelpWithDetailsPopup
	call	_GUI_ExecDialogBox
	add	esp, 24					; 00000018H
	jmp	SHORT $LN3@ShowHelpPo
$LN2@ShowHelpPo:
; Line 2931
	push	10					; 0000000aH
	push	10					; 0000000aH
	call	_GetCurrentWindowHandle
	push	eax
	push	OFFSET _HelpCallback
	push	2
	push	OFFSET _HelpPopup
	call	_GUI_ExecDialogBox
	add	esp, 24					; 00000018H
$LN3@ShowHelpPo:
; Line 2932
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ShowHelpPopup ENDP
_TEXT	ENDS
EXTRN	_CreateHelpSelection:PROC
EXTRN	_GUI_EndDialog:PROC
EXTRN	_MULTIEDIT_SetWrapWord:PROC
EXTRN	_MULTIEDIT_SetFont:PROC
EXTRN	_MULTIEDIT_SetBkColor:PROC
EXTRN	_MULTIEDIT_CreateEx:PROC
EXTRN	_strlen:PROC
EXTRN	_SCROLLBAR_SetDefaultWidth:PROC
EXTRN	_FRAMEWIN_SetText:PROC
EXTRN	_FRAMEWIN_SetTextAlign:PROC
EXTRN	_FRAMEWIN_SetTextColor:PROC
EXTRN	_popupTitleTextColor:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _HelpCallback
_TEXT	SEGMENT
tv65 = -232						; size = 4
_hText$ = -32						; size = 4
_Id$ = -20						; size = 4
_hDlg$ = -8						; size = 4
_pMsg$ = 8						; size = 4
_HelpCallback PROC					; COMDAT
; Line 2935
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2940
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _hDlg$[ebp], ecx
; Line 2942
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 29			; 0000001dH
	je	SHORT $LN7@HelpCallba
	cmp	DWORD PTR tv65[ebp], 38			; 00000026H
	je	$LN6@HelpCallba
	jmp	$LN1@HelpCallba
$LN7@HelpCallba:
; Line 2945
	mov	eax, DWORD PTR _popupTitleTextColor
	push	eax
	mov	ecx, DWORD PTR _hDlg$[ebp]
	push	ecx
	call	_FRAMEWIN_SetTextColor
	add	esp, 8
; Line 2946
	push	2
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	_FRAMEWIN_SetTextAlign
	add	esp, 8
; Line 2947
	mov	eax, DWORD PTR _pHelpTitle
	push	eax
	mov	ecx, DWORD PTR _hDlg$[ebp]
	push	ecx
	call	_FRAMEWIN_SetText
	add	esp, 8
; Line 2949
	push	40					; 00000028H
	call	_SCROLLBAR_SetDefaultWidth
	add	esp, 4
; Line 2952
	mov	eax, DWORD PTR _pHelpText
	push	eax
	mov	ecx, DWORD PTR _pHelpText
	push	ecx
	call	_strlen
	add	esp, 4
	push	eax
	push	0
	push	9
	push	2
	mov	edx, DWORD PTR _hDlg$[ebp]
	push	edx
	push	167					; 000000a7H
	push	424					; 000001a8H
	push	30					; 0000001eH
	push	10					; 0000000aH
	call	_MULTIEDIT_CreateEx
	add	esp, 40					; 00000028H
	mov	DWORD PTR _hText$[ebp], eax
; Line 2953
	push	15790320				; 00f0f0f0H
	push	1
	mov	eax, DWORD PTR _hText$[ebp]
	push	eax
	call	_MULTIEDIT_SetBkColor
	add	esp, 12					; 0000000cH
; Line 2954
	push	OFFSET _GUI_Font24_ASCII
	mov	eax, DWORD PTR _hText$[ebp]
	push	eax
	call	_MULTIEDIT_SetFont
	add	esp, 8
; Line 2955
	mov	eax, DWORD PTR _hText$[ebp]
	push	eax
	call	_MULTIEDIT_SetWrapWord
	add	esp, 4
; Line 2956
	jmp	$LN10@HelpCallba
$LN6@HelpCallba:
; Line 2959
	mov	eax, DWORD PTR _pMsg$[ebp]
	cmp	DWORD PTR [eax+12], 2
	jne	SHORT $LN5@HelpCallba
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_WM_GetId
	add	esp, 4
	mov	DWORD PTR _Id$[ebp], eax
	cmp	DWORD PTR _Id$[ebp], 1
	jne	SHORT $LN5@HelpCallba
; Line 2961
	mov	eax, DWORD PTR _Id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hDlg$[ebp]
	push	ecx
	call	_GUI_EndDialog
	add	esp, 8
; Line 2962
	mov	DWORD PTR _glbBlackoutFlag, 2
	jmp	SHORT $LN4@HelpCallba
$LN5@HelpCallba:
; Line 2964
	mov	eax, DWORD PTR _pMsg$[ebp]
	cmp	DWORD PTR [eax+12], 2
	jne	SHORT $LN3@HelpCallba
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_WM_GetId
	add	esp, 4
	mov	DWORD PTR _Id$[ebp], eax
	cmp	DWORD PTR _Id$[ebp], 6
	jne	SHORT $LN3@HelpCallba
; Line 2965
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	_CreateHelpSelection
	add	esp, 4
	jmp	SHORT $LN4@HelpCallba
$LN3@HelpCallba:
; Line 2966
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN4@HelpCallba:
; Line 2967
	jmp	SHORT $LN10@HelpCallba
$LN1@HelpCallba:
; Line 2970
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN10@HelpCallba:
; Line 2972
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_HelpCallback ENDP
_TEXT	ENDS
EXTRN	_ResetNewScreen:PROC
EXTRN	_WM_Exec:PROC
EXTRN	_WM_GetNextSibling:PROC
EXTRN	_WM_ValidateWindow:PROC
EXTRN	_WM_GetWindowRectEx:PROC
EXTRN	_WM_GetFirstChild:PROC
EXTRN	_WM_ValidateRect:PROC
EXTRN	_WM_EnableMemdev:PROC
EXTRN	_BUTTON_SetDefaultFont:PROC
EXTRN	_WM_CreateWindow:PROC
EXTRN	_SetAnalogInputsScaleWindowHandle:PROC
EXTRN	_AnalogInputsScaleCallback:PROC
EXTRN	_AnalogInputsScaleScreenList:BYTE
EXTRN	_SetDigitalInputSettingsWindowHandle:PROC
EXTRN	_DigitalInputSettingsCallback:PROC
EXTRN	_DigitalInputSettingsScreenList:BYTE
EXTRN	_SetAnalogInputSettingsWindowHandle:PROC
EXTRN	_AnalogInputSettingsCallback:PROC
EXTRN	_AnalogInputSettingsScreenList:BYTE
EXTRN	_SetGearRatiosWindowHandle:PROC
EXTRN	_GearRatiosCallback:PROC
EXTRN	_GearRatiosScreenList:BYTE
EXTRN	_SetGearingWindowHandle:PROC
EXTRN	_GearingScreensCallback:PROC
EXTRN	_GearingScreenList:BYTE
EXTRN	_SetTrackSettingsWindowHandle:PROC
EXTRN	_TrackSettingsScreensCallback:PROC
EXTRN	_TrackSettingsScreenList:BYTE
EXTRN	_SetInputsWindowHandle:PROC
EXTRN	_InputsScreensCallback:PROC
EXTRN	_InputsScreenList:BYTE
EXTRN	_SetTachSetupWindowHandle:PROC
EXTRN	_TachSetupScreensCallback:PROC
EXTRN	_TachSetupScreenList:BYTE
EXTRN	_SetVehicleSettingsWindowHandle:PROC
EXTRN	_VehicleSettingsScreensCallback:PROC
EXTRN	_VehicleSettingsScreenList:BYTE
EXTRN	_SetSystemSettingsWindowHandle:PROC
EXTRN	_SystemSettingsScreensCallback:PROC
EXTRN	_SystemSettingsScreenList:BYTE
EXTRN	_SetRaceSetupScreensWindowHandle:PROC
EXTRN	_RaceSetupScreensCallback:PROC
EXTRN	_RaceSetupScreenList:BYTE
EXTRN	_SetRunningGaugesWindowHandle:PROC
EXTRN	_GaugesScreensCallback:PROC
EXTRN	_SystemError:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayNewScreenList
_TEXT	SEGMENT
tv66 = -300						; size = 4
_Rect$21836 = -100					; size = 8
_Rect$21829 = -84					; size = 8
_timerRate$ = -68					; size = 4
_pSetNewWin$ = -56					; size = 4
_pCallBack$ = -44					; size = 4
_pScreenList$ = -32					; size = 4
_hNewWin$ = -20						; size = 4
_hChild$ = -8						; size = 4
_screentype$ = 8					; size = 4
_screen$ = 12						; size = 4
_hPrev$ = 16						; size = 4
_DisplayNewScreenList PROC				; COMDAT
; Line 2980
	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2988
	mov	eax, DWORD PTR _screen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _screentype$[ebp]
	push	ecx
	call	_SetLastScreen
	add	esp, 8
; Line 2989
	mov	DWORD PTR _timerRate$[ebp], 125		; 0000007dH
; Line 2991
	mov	eax, DWORD PTR _screentype$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR tv66[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 18			; 00000012H
	ja	SHORT $LN23@DisplayNew
	mov	edx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN32@DisplayNew[edx*4]
$LN23@DisplayNew:
; Line 2994
	call	_SystemError
$LN22@DisplayNew:
; Line 2997
	mov	DWORD PTR _pScreenList$[ebp], OFFSET _ConfigScreenList
; Line 2998
	mov	DWORD PTR _pCallBack$[ebp], OFFSET __cbMainCallback
; Line 2999
	mov	DWORD PTR _pSetNewWin$[ebp], OFFSET _SetConfigWindowHandle
; Line 3000
	jmp	$LN24@DisplayNew
$LN21@DisplayNew:
; Line 3002
	mov	DWORD PTR _pScreenList$[ebp], OFFSET _DriveScreenList
; Line 3003
	mov	DWORD PTR _pCallBack$[ebp], OFFSET _GaugesScreensCallback
; Line 3004
	mov	DWORD PTR _pSetNewWin$[ebp], OFFSET _SetRunningGaugesWindowHandle
; Line 3005
	jmp	$LN24@DisplayNew
$LN20@DisplayNew:
; Line 3007
	mov	DWORD PTR _pScreenList$[ebp], OFFSET _InstrumentsScreenList
; Line 3008
	mov	DWORD PTR _pCallBack$[ebp], OFFSET _GaugesScreensCallback
; Line 3009
	mov	DWORD PTR _pSetNewWin$[ebp], OFFSET _SetRunningGaugesWindowHandle
; Line 3010
	jmp	$LN24@DisplayNew
$LN19@DisplayNew:
; Line 3012
	mov	DWORD PTR _pScreenList$[ebp], OFFSET _GaugesScreenList
; Line 3013
	mov	DWORD PTR _pCallBack$[ebp], OFFSET _GaugesScreensCallback
; Line 3014
	mov	DWORD PTR _pSetNewWin$[ebp], OFFSET _SetRunningGaugesWindowHandle
; Line 3015
	jmp	$LN24@DisplayNew
$LN18@DisplayNew:
; Line 3017
	mov	DWORD PTR _pScreenList$[ebp], OFFSET _RaceSetupScreenList
; Line 3018
	mov	DWORD PTR _pCallBack$[ebp], OFFSET _RaceSetupScreensCallback
; Line 3019
	mov	DWORD PTR _pSetNewWin$[ebp], OFFSET _SetRaceSetupScreensWindowHandle
; Line 3020
	jmp	$LN24@DisplayNew
$LN17@DisplayNew:
; Line 3022
	mov	DWORD PTR _pScreenList$[ebp], OFFSET _SystemSettingsScreenList
; Line 3023
	mov	DWORD PTR _pCallBack$[ebp], OFFSET _SystemSettingsScreensCallback
; Line 3024
	mov	DWORD PTR _pSetNewWin$[ebp], OFFSET _SetSystemSettingsWindowHandle
; Line 3025
	jmp	$LN24@DisplayNew
$LN16@DisplayNew:
; Line 3027
	mov	DWORD PTR _timerRate$[ebp], 100		; 00000064H
; Line 3028
	mov	DWORD PTR _pScreenList$[ebp], OFFSET _VehicleSettingsScreenList
; Line 3029
	mov	DWORD PTR _pCallBack$[ebp], OFFSET _VehicleSettingsScreensCallback
; Line 3030
	mov	DWORD PTR _pSetNewWin$[ebp], OFFSET _SetVehicleSettingsWindowHandle
; Line 3031
	jmp	$LN24@DisplayNew
$LN15@DisplayNew:
; Line 3033
	mov	DWORD PTR _pScreenList$[ebp], OFFSET _TachSetupScreenList
; Line 3034
	mov	DWORD PTR _pCallBack$[ebp], OFFSET _TachSetupScreensCallback
; Line 3035
	mov	DWORD PTR _pSetNewWin$[ebp], OFFSET _SetTachSetupWindowHandle
; Line 3036
	jmp	$LN24@DisplayNew
$LN14@DisplayNew:
; Line 3038
	mov	DWORD PTR _pScreenList$[ebp], OFFSET _InputsScreenList
; Line 3039
	mov	DWORD PTR _pCallBack$[ebp], OFFSET _InputsScreensCallback
; Line 3040
	mov	DWORD PTR _pSetNewWin$[ebp], OFFSET _SetInputsWindowHandle
; Line 3041
	jmp	$LN24@DisplayNew
$LN13@DisplayNew:
; Line 3043
	mov	DWORD PTR _pScreenList$[ebp], OFFSET _TrackSettingsScreenList
; Line 3044
	mov	DWORD PTR _pCallBack$[ebp], OFFSET _TrackSettingsScreensCallback
; Line 3045
	mov	DWORD PTR _pSetNewWin$[ebp], OFFSET _SetTrackSettingsWindowHandle
; Line 3046
	jmp	SHORT $LN24@DisplayNew
$LN12@DisplayNew:
; Line 3048
	mov	DWORD PTR _pScreenList$[ebp], OFFSET _GearingScreenList
; Line 3049
	mov	DWORD PTR _pCallBack$[ebp], OFFSET _GearingScreensCallback
; Line 3050
	mov	DWORD PTR _pSetNewWin$[ebp], OFFSET _SetGearingWindowHandle
; Line 3051
	jmp	SHORT $LN24@DisplayNew
$LN11@DisplayNew:
; Line 3053
	mov	DWORD PTR _pScreenList$[ebp], OFFSET _GearRatiosScreenList
; Line 3054
	mov	DWORD PTR _pCallBack$[ebp], OFFSET _GearRatiosCallback
; Line 3055
	mov	DWORD PTR _pSetNewWin$[ebp], OFFSET _SetGearRatiosWindowHandle
; Line 3056
	jmp	SHORT $LN24@DisplayNew
$LN10@DisplayNew:
; Line 3058
	mov	DWORD PTR _pScreenList$[ebp], OFFSET _AnalogInputSettingsScreenList
; Line 3059
	mov	DWORD PTR _pCallBack$[ebp], OFFSET _AnalogInputSettingsCallback
; Line 3060
	mov	DWORD PTR _pSetNewWin$[ebp], OFFSET _SetAnalogInputSettingsWindowHandle
; Line 3061
	jmp	SHORT $LN24@DisplayNew
$LN9@DisplayNew:
; Line 3063
	mov	DWORD PTR _pScreenList$[ebp], OFFSET _DigitalInputSettingsScreenList
; Line 3064
	mov	DWORD PTR _pCallBack$[ebp], OFFSET _DigitalInputSettingsCallback
; Line 3065
	mov	DWORD PTR _pSetNewWin$[ebp], OFFSET _SetDigitalInputSettingsWindowHandle
; Line 3066
	jmp	SHORT $LN24@DisplayNew
$LN8@DisplayNew:
; Line 3068
	mov	DWORD PTR _pScreenList$[ebp], OFFSET _AnalogInputsScaleScreenList
; Line 3069
	mov	DWORD PTR _pCallBack$[ebp], OFFSET _AnalogInputsScaleCallback
; Line 3070
	mov	DWORD PTR _pSetNewWin$[ebp], OFFSET _SetAnalogInputsScaleWindowHandle
$LN24@DisplayNew:
; Line 3074
	push	0
	mov	eax, DWORD PTR _pCallBack$[ebp]
	push	eax
	push	8194					; 00002002H
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	call	_WM_CreateWindow
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _hNewWin$[ebp], eax
; Line 3075
	cmp	DWORD PTR _hNewWin$[ebp], 0
	jg	SHORT $LN7@DisplayNew
; Line 3076
	call	_SystemError
	jmp	SHORT $LN6@DisplayNew
$LN7@DisplayNew:
; Line 3077
	mov	esi, esp
	mov	eax, DWORD PTR _hNewWin$[ebp]
	push	eax
	call	DWORD PTR _pSetNewWin$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@DisplayNew:
; Line 3079
	push	OFFSET _GUI_Font24_ASCII
	call	_BUTTON_SetDefaultFont
	add	esp, 4
; Line 3082
	mov	eax, DWORD PTR _hNewWin$[ebp]
	push	eax
	call	_WM_EnableMemdev
	add	esp, 4
; Line 3087
	mov	esi, esp
	mov	eax, DWORD PTR _hNewWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _screen$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _pScreenList$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3090
	cmp	DWORD PTR _hPrev$[ebp], 0
	je	SHORT $LN5@DisplayNew
; Line 3092
	xor	eax, eax
	mov	WORD PTR _Rect$21829[ebp], ax
	xor	eax, eax
	mov	WORD PTR _Rect$21829[ebp+2], ax
	mov	eax, 480				; 000001e0H
	mov	WORD PTR _Rect$21829[ebp+4], ax
	mov	eax, 272				; 00000110H
	mov	WORD PTR _Rect$21829[ebp+6], ax
; Line 3093
	lea	eax, DWORD PTR _Rect$21829[ebp]
	push	eax
	mov	ecx, DWORD PTR _hNewWin$[ebp]
	push	ecx
	call	_WM_ValidateRect
	add	esp, 8
; Line 3094
	mov	eax, DWORD PTR _hNewWin$[ebp]
	push	eax
	call	_WM_GetFirstChild
	add	esp, 4
	mov	DWORD PTR _hChild$[ebp], eax
$LN4@DisplayNew:
; Line 3095
	cmp	DWORD PTR _hChild$[ebp], 0
	je	SHORT $LN5@DisplayNew
; Line 3097
	lea	eax, DWORD PTR _Rect$21829[ebp]
	push	eax
	mov	ecx, DWORD PTR _hChild$[ebp]
	push	ecx
	call	_WM_GetWindowRectEx
	add	esp, 8
; Line 3098
	mov	eax, DWORD PTR _hChild$[ebp]
	push	eax
	call	_WM_ValidateWindow
	add	esp, 4
; Line 3100
	mov	eax, DWORD PTR _hChild$[ebp]
	push	eax
	call	_WM_GetNextSibling
	add	esp, 4
	mov	DWORD PTR _hChild$[ebp], eax
; Line 3101
	jmp	SHORT $LN4@DisplayNew
$LN5@DisplayNew:
; Line 3104
	call	_WM_Exec
; Line 3105
	mov	DWORD PTR _screen_scrolling, 1
; Line 3109
	mov	eax, DWORD PTR _hNewWin$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 3110
	mov	eax, DWORD PTR _hNewWin$[ebp]
	push	eax
	call	_WM_GetFirstChild
	add	esp, 4
	mov	DWORD PTR _hChild$[ebp], eax
$LN2@DisplayNew:
; Line 3111
	cmp	DWORD PTR _hChild$[ebp], 0
	je	SHORT $LN1@DisplayNew
; Line 3115
	lea	eax, DWORD PTR _Rect$21836[ebp]
	push	eax
	mov	ecx, DWORD PTR _hChild$[ebp]
	push	ecx
	call	_WM_GetWindowRectEx
	add	esp, 8
; Line 3116
	mov	eax, DWORD PTR _hChild$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 3118
	mov	eax, DWORD PTR _hChild$[ebp]
	push	eax
	call	_WM_GetNextSibling
	add	esp, 4
	mov	DWORD PTR _hChild$[ebp], eax
; Line 3119
	jmp	SHORT $LN2@DisplayNew
$LN1@DisplayNew:
; Line 3121
	call	_WM_Exec
; Line 3122
	mov	eax, DWORD PTR _hPrev$[ebp]
	push	eax
	call	_WM_DeleteWindow
	add	esp, 4
; Line 3124
	push	0
	mov	eax, DWORD PTR _timerRate$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _hNewWin$[ebp]
	push	ecx
	call	_WM_CreateTimer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hScreenTimer, eax
; Line 3125
	call	_ResetNewScreen
; Line 3126
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@DisplayNew
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN31@DisplayNew:
	DD	2
	DD	$LN30@DisplayNew
$LN30@DisplayNew:
	DD	-84					; ffffffacH
	DD	8
	DD	$LN28@DisplayNew
	DD	-100					; ffffff9cH
	DD	8
	DD	$LN29@DisplayNew
$LN29@DisplayNew:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN28@DisplayNew:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
	npad	2
$LN32@DisplayNew:
	DD	$LN22@DisplayNew
	DD	$LN19@DisplayNew
	DD	$LN21@DisplayNew
	DD	$LN20@DisplayNew
	DD	$LN18@DisplayNew
	DD	$LN17@DisplayNew
	DD	$LN16@DisplayNew
	DD	$LN23@DisplayNew
	DD	$LN15@DisplayNew
	DD	$LN14@DisplayNew
	DD	$LN23@DisplayNew
	DD	$LN23@DisplayNew
	DD	$LN13@DisplayNew
	DD	$LN12@DisplayNew
	DD	$LN10@DisplayNew
	DD	$LN9@DisplayNew
	DD	$LN23@DisplayNew
	DD	$LN8@DisplayNew
	DD	$LN11@DisplayNew
_DisplayNewScreenList ENDP
_TEXT	ENDS
EXTRN	_bmDragButton:BYTE
EXTRN	_bmDrive:BYTE
EXTRN	_bmAutoxRally:BYTE
EXTRN	_BUTTON_SetBitmap:PROC
EXTRN	_bmRace:BYTE
EXTRN	_BUTTON_CreateEx:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayGoRacing
_TEXT	SEGMENT
_hButton$ = -8						; size = 4
_hParent$ = 8						; size = 4
_DisplayGoRacing PROC					; COMDAT
; Line 3130
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3133
	push	2055					; 00000807H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	115					; 00000073H
	push	178					; 000000b2H
	push	38					; 00000026H
	push	41					; 00000029H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hButton$[ebp], eax
; Line 3134
	push	OFFSET _bmRace
	push	0
	mov	eax, DWORD PTR _hButton$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3136
	push	2056					; 00000808H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	115					; 00000073H
	push	178					; 000000b2H
	push	38					; 00000026H
	push	261					; 00000105H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hButton$[ebp], eax
; Line 3137
	push	OFFSET _bmAutoxRally
	push	0
	mov	eax, DWORD PTR _hButton$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3139
	push	2057					; 00000809H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	115					; 00000073H
	push	100					; 00000064H
	push	156					; 0000009cH
	push	41					; 00000029H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hButton$[ebp], eax
; Line 3140
	push	OFFSET _bmDrive
	push	0
	mov	eax, DWORD PTR _hButton$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3142
	push	2068					; 00000814H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	115					; 00000073H
	push	178					; 000000b2H
	push	156					; 0000009cH
	push	261					; 00000105H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hButton$[ebp], eax
; Line 3143
	push	OFFSET _bmDragButton
	push	0
	mov	eax, DWORD PTR _hButton$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3145
	push	2058					; 0000080aH
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	115					; 00000073H
	push	78					; 0000004eH
	push	156					; 0000009cH
	push	141					; 0000008dH
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hRecordModeButton, eax
; Line 3146
	call	_SetRecordModeGraphic
; Line 3147
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayGoRacing ENDP
_TEXT	ENDS
EXTRN	_bmRecordingOn:BYTE
EXTRN	_bmRecordingOff:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SetRecordModeGraphic
_TEXT	SEGMENT
_SetRecordModeGraphic PROC				; COMDAT
; Line 3150
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3151
	movzx	eax, BYTE PTR _sysData+215
	test	eax, eax
	je	SHORT $LN2@SetRecordM
; Line 3152
	push	OFFSET _bmRecordingOff
	push	0
	mov	eax, DWORD PTR _hRecordModeButton
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN3@SetRecordM
$LN2@SetRecordM:
; Line 3153
	push	OFFSET _bmRecordingOn
	push	0
	mov	eax, DWORD PTR _hRecordModeButton
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
$LN3@SetRecordM:
; Line 3154
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SetRecordModeGraphic ENDP
_TEXT	ENDS
EXTRN	_bmLapsQualifyButton:BYTE
EXTRN	_bmVehicle:BYTE
EXTRN	_bmTrack:BYTE
EXTRN	_bmDriver:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayRaceSetup
_TEXT	SEGMENT
_hButton$ = -8						; size = 4
_hParent$ = 8						; size = 4
_DisplayRaceSetup PROC					; COMDAT
; Line 3158
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3161
	push	2052					; 00000804H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	115					; 00000073H
	push	178					; 000000b2H
	push	38					; 00000026H
	push	41					; 00000029H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hButton$[ebp], eax
; Line 3162
	push	OFFSET _bmDriver
	push	0
	mov	eax, DWORD PTR _hButton$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3164
	push	2054					; 00000806H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	115					; 00000073H
	push	178					; 000000b2H
	push	38					; 00000026H
	push	261					; 00000105H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hButton$[ebp], eax
; Line 3165
	push	OFFSET _bmTrack
	push	0
	mov	eax, DWORD PTR _hButton$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3167
	push	2053					; 00000805H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	115					; 00000073H
	push	178					; 000000b2H
	push	156					; 0000009cH
	push	41					; 00000029H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hButton$[ebp], eax
; Line 3168
	push	OFFSET _bmVehicle
	push	0
	mov	eax, DWORD PTR _hButton$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3170
	push	2059					; 0000080bH
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	115					; 00000073H
	push	178					; 000000b2H
	push	156					; 0000009cH
	push	261					; 00000105H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hButton$[ebp], eax
; Line 3171
	push	OFFSET _bmLapsQualifyButton
	push	0
	mov	eax, DWORD PTR _hButton$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3172
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayRaceSetup ENDP
_TEXT	ENDS
PUBLIC	_LapTimeSort
PUBLIC	_DateTimeSort
PUBLIC	__$ArrayPad$
EXTRN	_bmSmallBlueButton:BYTE
EXTRN	_bmSmallRedButton:BYTE
EXTRN	_BUTTON_SetText:PROC
EXTRN	_bmSmallYellowButton:BYTE
EXTRN	_BUTTON_SetTextColor:PROC
EXTRN	_bmStdGreenButton:BYTE
EXTRN	_LISTVIEW_SetSort:PROC
EXTRN	_LISTVIEW_EnableSort:PROC
EXTRN	_LISTVIEW_CompareText:PROC
EXTRN	_LISTVIEW_SetCompareFunc:PROC
EXTRN	_HEADER_SetHeight:PROC
EXTRN	_LISTVIEW_SetRowHeight:PROC
EXTRN	_HEADER_SetTextAlign:PROC
EXTRN	_HEADER_SetFont:PROC
EXTRN	_LISTVIEW_GetHeader:PROC
EXTRN	_LISTVIEW_SetFont:PROC
EXTRN	_GUI_Font20_ASCII:BYTE
EXTRN	_LISTVIEW_SetAutoScrollV:PROC
EXTRN	_strcat:PROC
EXTRN	_GetSelectedReviewModeText:PROC
EXTRN	_strcpy:PROC
EXTRN	_LISTVIEW_AddColumn:PROC
EXTRN	_WM_SetFocus:PROC
EXTRN	_LISTVIEW_CreateEx:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayReviewSessions
_TEXT	SEGMENT
_i$ = -84						; size = 4
_scratch$ = -72						; size = 50
_hHeader$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_hParent$ = 8						; size = 4
_DisplayReviewSessions PROC				; COMDAT
; Line 3177
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 3183
	movzx	eax, BYTE PTR _sysData+208
	push	eax
	push	1
	mov	ecx, DWORD PTR _hParent$[ebp]
	push	ecx
	call	_GetSessionNameData
	add	esp, 12					; 0000000cH
; Line 3185
	push	512					; 00000200H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	185					; 000000b9H
	push	460					; 000001ccH
	push	38					; 00000026H
	push	10					; 0000000aH
	call	_LISTVIEW_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hListView, eax
; Line 3186
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_WM_SetFocus
	add	esp, 4
; Line 3187
	push	12					; 0000000cH
	push	OFFSET $SG21857
	push	185					; 000000b9H
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_AddColumn
	add	esp, 16					; 00000010H
; Line 3188
	push	14					; 0000000eH
	push	OFFSET $SG21858
	push	80					; 00000050H
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_AddColumn
	add	esp, 16					; 00000010H
; Line 3189
	push	OFFSET $SG21859
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 3190
	call	_GetSelectedReviewModeText
	push	eax
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
; Line 3192
	push	14					; 0000000eH
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	push	160					; 000000a0H
	mov	ecx, DWORD PTR _hListView
	push	ecx
	call	_LISTVIEW_AddColumn
	add	esp, 16					; 00000010H
; Line 3193
	push	1
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_SetAutoScrollV
	add	esp, 8
; Line 3194
	push	OFFSET _GUI_Font20_ASCII
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_SetFont
	add	esp, 8
; Line 3195
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_GetHeader
	add	esp, 4
	mov	DWORD PTR _hHeader$[ebp], eax
	push	OFFSET _GUI_Font20_ASCII
	mov	ecx, DWORD PTR _hHeader$[ebp]
	push	ecx
	call	_HEADER_SetFont
	add	esp, 8
; Line 3196
	push	14					; 0000000eH
	push	0
	mov	eax, DWORD PTR _hHeader$[ebp]
	push	eax
	call	_HEADER_SetTextAlign
	add	esp, 12					; 0000000cH
; Line 3197
	push	14					; 0000000eH
	push	2
	mov	eax, DWORD PTR _hHeader$[ebp]
	push	eax
	call	_HEADER_SetTextAlign
	add	esp, 12					; 0000000cH
; Line 3198
	push	30					; 0000001eH
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_SetRowHeight
	add	esp, 8
; Line 3203
	movzx	eax, BYTE PTR _reviewingSession
	test	eax, eax
	jne	SHORT $LN2@DisplayRev
; Line 3204
	movzx	eax, BYTE PTR _sysData+208
	push	eax
	call	_FindNewestFile
	add	esp, 4
	mov	DWORD PTR _selectedSessionUnsorted, eax
	jmp	SHORT $LN1@DisplayRev
$LN2@DisplayRev:
; Line 3205
	mov	BYTE PTR _reviewingSession, 0
$LN1@DisplayRev:
; Line 3207
	mov	eax, DWORD PTR _selectedSessionUnsorted
	push	eax
	call	_PopulateSessionLISTVIEW
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax
; Line 3208
	call	_GetSessionData
; Line 3211
	push	35					; 00000023H
	mov	eax, DWORD PTR _hHeader$[ebp]
	push	eax
	call	_HEADER_SetHeight
	add	esp, 8
; Line 3212
	push	OFFSET _DateTimeSort
	push	0
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_SetCompareFunc
	add	esp, 12					; 0000000cH
; Line 3213
	push	OFFSET _LapTimeSort
	push	1
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_SetCompareFunc
	add	esp, 12					; 0000000cH
; Line 3214
	push	OFFSET _LISTVIEW_CompareText
	push	2
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_SetCompareFunc
	add	esp, 12					; 0000000cH
; Line 3215
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_EnableSort
	add	esp, 4
; Line 3216
	push	0
	push	0
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_SetSort
	add	esp, 12					; 0000000cH
; Line 3219
	push	2067					; 00000813H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	40					; 00000028H
	push	167					; 000000a7H
	push	228					; 000000e4H
	push	36					; 00000024H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hBestTime, eax
; Line 3220
	push	OFFSET _bmStdGreenButton
	push	0
	mov	eax, DWORD PTR _hBestTime
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3221
	push	0
	push	0
	mov	eax, DWORD PTR _hBestTime
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 3223
	push	0
	push	2
	mov	eax, DWORD PTR _hBestTime
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 3224
	call	_SetBestTimeButtonText
; Line 3226
	push	2051					; 00000803H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	40					; 00000028H
	push	80					; 00000050H
	push	228					; 000000e4H
	push	214					; 000000d6H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hSelectedReviewMode, eax
; Line 3227
	push	OFFSET _bmSmallYellowButton
	push	0
	mov	eax, DWORD PTR _hSelectedReviewMode
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3228
	push	0
	push	0
	mov	eax, DWORD PTR _hSelectedReviewMode
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 3232
	push	OFFSET $SG21863
	mov	eax, DWORD PTR _hSelectedReviewMode
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
; Line 3234
	push	2049					; 00000801H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	40					; 00000028H
	push	80					; 00000050H
	push	228					; 000000e4H
	push	302					; 0000012eH
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hDeleteButton, eax
; Line 3235
	push	OFFSET _bmSmallRedButton
	push	0
	mov	eax, DWORD PTR _hDeleteButton
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3236
	push	OFFSET $SG21864
	mov	eax, DWORD PTR _hDeleteButton
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
; Line 3238
	push	2050					; 00000802H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	40					; 00000028H
	push	80					; 00000050H
	push	228					; 000000e4H
	push	390					; 00000186H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hDetailsButton, eax
; Line 3239
	push	OFFSET _bmSmallBlueButton
	push	0
	mov	eax, DWORD PTR _hDetailsButton
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3240
	push	OFFSET $SG21865
	mov	eax, DWORD PTR _hDetailsButton
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
; Line 3241
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_SetButtonColors
	add	esp, 4
; Line 3242
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@DisplayRev
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@DisplayRev:
	DD	1
	DD	$LN6@DisplayRev
$LN6@DisplayRev:
	DD	-72					; ffffffb8H
	DD	50					; 00000032H
	DD	$LN5@DisplayRev
$LN5@DisplayRev:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_DisplayReviewSessions ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _SetButtonColors
_TEXT	SEGMENT
_i$ = 8							; size = 4
_SetButtonColors PROC					; COMDAT
; Line 3245
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3246
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN2@SetButtonC
; Line 3248
	push	0
	push	0
	mov	eax, DWORD PTR _hDeleteButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 3249
	push	16777215				; 00ffffffH
	push	0
	mov	eax, DWORD PTR _hDetailsButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 3250
	push	0
	push	1
	mov	eax, DWORD PTR _hDeleteButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 3251
	push	16777215				; 00ffffffH
	push	1
	mov	eax, DWORD PTR _hDetailsButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 3252
	push	0
	push	2
	mov	eax, DWORD PTR _hDeleteButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 3253
	push	16777215				; 00ffffffH
	push	2
	mov	eax, DWORD PTR _hDetailsButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 3255
	jmp	SHORT $LN3@SetButtonC
$LN2@SetButtonC:
; Line 3257
	push	8421504					; 00808080H
	push	0
	mov	eax, DWORD PTR _hDeleteButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 3258
	push	8421504					; 00808080H
	push	0
	mov	eax, DWORD PTR _hDetailsButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 3259
	push	8421504					; 00808080H
	push	1
	mov	eax, DWORD PTR _hDeleteButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 3260
	push	8421504					; 00808080H
	push	1
	mov	eax, DWORD PTR _hDetailsButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 3261
	push	8421504					; 00808080H
	push	2
	mov	eax, DWORD PTR _hDeleteButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 3262
	push	8421504					; 00808080H
	push	2
	mov	eax, DWORD PTR _hDetailsButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
$LN3@SetButtonC:
; Line 3264
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SetButtonColors ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_LISTVIEW_SetSelUnsorted:PROC
EXTRN	_SCROLLBAR_SetWidth:PROC
EXTRN	_WM_GetScrollbarV:PROC
EXTRN	_LISTVIEW_AddRow:PROC
EXTRN	_sprintf:PROC
EXTRN	_LISTVIEW_DeleteColumn:PROC
EXTRN	_LISTVIEW_DeleteRow:PROC
EXTRN	_LISTVIEW_GetNumRows:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _PopulateSessionLISTVIEW
_TEXT	SEGMENT
_sessionNumber$21885 = -168				; size = 5
_dateAndTime$21884 = -152				; size = 50
_scratch$ = -92						; size = 50
_pDest$ = -32						; size = 12
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_selection$ = 8						; size = 4
_PopulateSessionLISTVIEW PROC				; COMDAT
; Line 3267
	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 3273
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_GetNumRows
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax
$LN5@PopulateSe:
; Line 3274
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN4@PopulateSe
; Line 3275
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hListView
	push	edx
	call	_LISTVIEW_DeleteRow
	add	esp, 8
	jmp	SHORT $LN5@PopulateSe
$LN4@PopulateSe:
; Line 3277
	mov	DWORD PTR _i$[ebp], 0
; Line 3279
	push	2
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_DeleteColumn
	add	esp, 8
; Line 3280
	push	OFFSET $SG21880
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 3281
	call	_GetSelectedReviewModeText
	push	eax
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
; Line 3282
	push	14					; 0000000eH
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	push	160					; 000000a0H
	mov	ecx, DWORD PTR _hListView
	push	ecx
	call	_LISTVIEW_AddColumn
	add	esp, 16					; 00000010H
$LN3@PopulateSe:
; Line 3284
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 84					; 00000054H
	movzx	ecx, BYTE PTR _SessionNameData[eax+10]
	test	ecx, ecx
	je	$LN2@PopulateSe
; Line 3288
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 84					; 00000054H
	add	eax, OFFSET _SessionNameData+10
	push	eax
	lea	ecx, DWORD PTR _dateAndTime$21884[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 3289
	push	OFFSET $SG21886
	lea	eax, DWORD PTR _dateAndTime$21884[ebp]
	push	eax
	call	_strcat
	add	esp, 8
; Line 3290
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 84					; 00000054H
	add	eax, OFFSET _SessionNameData
	push	eax
	lea	ecx, DWORD PTR _dateAndTime$21884[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
; Line 3291
	lea	eax, DWORD PTR _dateAndTime$21884[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 3293
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 84					; 00000054H
	movzx	ecx, BYTE PTR _SessionNameData[eax+80]
	push	ecx
	push	OFFSET $SG21887
	lea	edx, DWORD PTR _sessionNumber$21885[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 3294
	lea	eax, DWORD PTR _sessionNumber$21885[ebp]
	mov	DWORD PTR _pDest$[ebp+4], eax
; Line 3296
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 84					; 00000054H
	add	eax, OFFSET _SessionNameData+21
	mov	DWORD PTR _pDest$[ebp+8], eax
; Line 3298
	lea	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hListView
	push	ecx
	call	_LISTVIEW_AddRow
	add	esp, 8
; Line 3299
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 3300
	jmp	$LN3@PopulateSe
$LN2@PopulateSe:
; Line 3303
	push	35					; 00000023H
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_WM_GetScrollbarV
	add	esp, 4
	push	eax
	call	_SCROLLBAR_SetWidth
	add	esp, 8
; Line 3304
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN1@PopulateSe
	cmp	DWORD PTR _selection$[ebp], 0
	jl	SHORT $LN1@PopulateSe
; Line 3305
	mov	eax, DWORD PTR _selectedSessionUnsorted
	push	eax
	mov	ecx, DWORD PTR _hListView
	push	ecx
	call	_LISTVIEW_SetSelUnsorted
	add	esp, 8
; Line 3306
	push	16737599				; 00ff653fH
	push	2
	mov	eax, DWORD PTR _hListView
	push	eax
	call	_LISTVIEW_SetBkColor
	add	esp, 12					; 0000000cH
$LN1@PopulateSe:
; Line 3308
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _numSessions, eax
	mov	eax, DWORD PTR _numSessions
; Line 3309
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@PopulateSe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@PopulateSe:
	DD	4
	DD	$LN12@PopulateSe
$LN12@PopulateSe:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN8@PopulateSe
	DD	-92					; ffffffa4H
	DD	50					; 00000032H
	DD	$LN9@PopulateSe
	DD	-152					; ffffff68H
	DD	50					; 00000032H
	DD	$LN10@PopulateSe
	DD	-168					; ffffff58H
	DD	5
	DD	$LN11@PopulateSe
$LN11@PopulateSe:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN10@PopulateSe:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN9@PopulateSe:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
$LN8@PopulateSe:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_PopulateSessionLISTVIEW ENDP
_TEXT	ENDS
PUBLIC	_GetMins
PUBLIC	__$ArrayPad$
EXTRN	_strncpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DateTimeSort
_TEXT	SEGMENT
_mins2$21899 = -76					; size = 4
_mins1$21898 = -64					; size = 4
_date2$ = -52						; size = 12
_date1$ = -32						; size = 12
_retval$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_DateTimeSort PROC					; COMDAT
; Line 3312
	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 3316
	push	11					; 0000000bH
	mov	eax, DWORD PTR _p1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _date1$[ebp]
	push	ecx
	call	_strncpy
	add	esp, 12					; 0000000cH
; Line 3317
	mov	BYTE PTR _date1$[ebp+10], 0
; Line 3318
	push	11					; 0000000bH
	mov	eax, DWORD PTR _p2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _date2$[ebp]
	push	ecx
	call	_strncpy
	add	esp, 12					; 0000000cH
; Line 3319
	mov	BYTE PTR _date2$[ebp+10], 0
; Line 3321
	lea	eax, DWORD PTR _date1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _date2$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	mov	DWORD PTR _retval$[ebp], eax
	cmp	DWORD PTR _retval$[ebp], 0
	jne	SHORT $LN6@DateTimeSo
; Line 3326
	mov	eax, DWORD PTR _p1$[ebp]
	push	eax
	call	_GetMins
	add	esp, 4
	mov	DWORD PTR _mins1$21898[ebp], eax
; Line 3327
	mov	eax, DWORD PTR _p2$[ebp]
	push	eax
	call	_GetMins
	add	esp, 4
	mov	DWORD PTR _mins2$21899[ebp], eax
; Line 3329
	mov	eax, DWORD PTR _mins1$21898[ebp]
	cmp	eax, DWORD PTR _mins2$21899[ebp]
	jle	SHORT $LN5@DateTimeSo
; Line 3330
	or	eax, -1
	jmp	SHORT $LN7@DateTimeSo
	jmp	SHORT $LN4@DateTimeSo
$LN5@DateTimeSo:
; Line 3331
	mov	eax, DWORD PTR _mins2$21899[ebp]
	cmp	eax, DWORD PTR _mins1$21898[ebp]
	jle	SHORT $LN3@DateTimeSo
; Line 3332
	mov	eax, 1
	jmp	SHORT $LN7@DateTimeSo
	jmp	SHORT $LN4@DateTimeSo
$LN3@DateTimeSo:
; Line 3333
	xor	eax, eax
	jmp	SHORT $LN7@DateTimeSo
$LN4@DateTimeSo:
; Line 3335
	jmp	SHORT $LN7@DateTimeSo
$LN6@DateTimeSo:
	mov	eax, DWORD PTR _retval$[ebp]
$LN7@DateTimeSo:
; Line 3336
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@DateTimeSo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@DateTimeSo:
	DD	2
	DD	$LN11@DateTimeSo
$LN11@DateTimeSo:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN9@DateTimeSo
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN10@DateTimeSo
$LN10@DateTimeSo:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	50					; 00000032H
	DB	0
$LN9@DateTimeSo:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	49					; 00000031H
	DB	0
_DateTimeSort ENDP
_TEXT	ENDS
EXTRN	_tolower:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetMins
_TEXT	SEGMENT
tv68 = -244						; size = 4
_mins$ = -41						; size = 1
_hours$ = -29						; size = 1
_foundHours$ = -17					; size = 1
_ch$ = -5						; size = 1
_pData$ = 8						; size = 4
_GetMins PROC						; COMDAT
; Line 3339
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3341
	mov	BYTE PTR _foundHours$[ebp], 0
; Line 3342
	mov	BYTE PTR _hours$[ebp], 0
; Line 3343
	mov	BYTE PTR _mins$[ebp], 0
; Line 3345
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 11					; 0000000bH
	mov	DWORD PTR _pData$[ebp], eax
$LN17@GetMins:
; Line 3346
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _ch$[ebp], cl
	movzx	edx, BYTE PTR _ch$[ebp]
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 1
	mov	DWORD PTR _pData$[ebp], eax
	test	edx, edx
	je	SHORT $LN20@GetMins
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN21@GetMins
$LN20@GetMins:
	mov	DWORD PTR tv68[ebp], 0
$LN21@GetMins:
	cmp	DWORD PTR tv68[ebp], 0
	je	$LN16@GetMins
; Line 3348
	movzx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN15@GetMins
	movzx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN15@GetMins
; Line 3350
	movzx	eax, BYTE PTR _foundHours$[ebp]
	test	eax, eax
	jne	SHORT $LN14@GetMins
; Line 3352
	movzx	eax, BYTE PTR _hours$[ebp]
	test	eax, eax
	je	SHORT $LN13@GetMins
; Line 3353
	movzx	eax, BYTE PTR _hours$[ebp]
	imul	eax, 10					; 0000000aH
	movzx	ecx, BYTE PTR _ch$[ebp]
	lea	edx, DWORD PTR [eax+ecx-48]
	mov	BYTE PTR _hours$[ebp], dl
	jmp	SHORT $LN12@GetMins
$LN13@GetMins:
; Line 3354
	movzx	eax, BYTE PTR _ch$[ebp]
	sub	eax, 48					; 00000030H
	mov	BYTE PTR _hours$[ebp], al
$LN12@GetMins:
; Line 3356
	jmp	SHORT $LN11@GetMins
$LN14@GetMins:
; Line 3357
	movzx	eax, BYTE PTR _mins$[ebp]
	test	eax, eax
	je	SHORT $LN10@GetMins
; Line 3358
	movzx	eax, BYTE PTR _mins$[ebp]
	imul	eax, 10					; 0000000aH
	movzx	ecx, BYTE PTR _ch$[ebp]
	lea	edx, DWORD PTR [eax+ecx-48]
	mov	BYTE PTR _mins$[ebp], dl
	jmp	SHORT $LN11@GetMins
$LN10@GetMins:
; Line 3359
	movzx	eax, BYTE PTR _ch$[ebp]
	sub	eax, 48					; 00000030H
	mov	BYTE PTR _mins$[ebp], al
$LN11@GetMins:
; Line 3360
	jmp	SHORT $LN8@GetMins
$LN15@GetMins:
; Line 3362
	movzx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 58					; 0000003aH
	jne	SHORT $LN7@GetMins
; Line 3363
	mov	BYTE PTR _foundHours$[ebp], 1
	jmp	SHORT $LN8@GetMins
$LN7@GetMins:
; Line 3364
	movzx	eax, BYTE PTR _ch$[ebp]
	push	eax
	call	_tolower
	add	esp, 4
	cmp	eax, 97					; 00000061H
	jne	SHORT $LN5@GetMins
; Line 3366
	movzx	eax, BYTE PTR _hours$[ebp]
	cmp	eax, 12					; 0000000cH
	jne	SHORT $LN4@GetMins
; Line 3367
	mov	BYTE PTR _hours$[ebp], 0
$LN4@GetMins:
; Line 3369
	jmp	SHORT $LN8@GetMins
$LN5@GetMins:
	movzx	eax, BYTE PTR _ch$[ebp]
	push	eax
	call	_tolower
	add	esp, 4
	cmp	eax, 112				; 00000070H
	jne	SHORT $LN8@GetMins
; Line 3371
	movzx	eax, BYTE PTR _hours$[ebp]
	cmp	eax, 12					; 0000000cH
	je	SHORT $LN8@GetMins
; Line 3372
	movzx	eax, BYTE PTR _hours$[ebp]
	add	eax, 12					; 0000000cH
	mov	BYTE PTR _hours$[ebp], al
$LN8@GetMins:
; Line 3374
	jmp	$LN17@GetMins
$LN16@GetMins:
; Line 3375
	movzx	eax, BYTE PTR _hours$[ebp]
	imul	eax, 60					; 0000003cH
	movzx	ecx, BYTE PTR _mins$[ebp]
	add	eax, ecx
; Line 3376
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetMins ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _LapTimeSort
_TEXT	SEGMENT
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_LapTimeSort PROC					; COMDAT
; Line 3379
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3380
	mov	eax, DWORD PTR _p1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p2$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
; Line 3381
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LapTimeSort ENDP
_TEXT	ENDS
EXTRN	_bmPredictive:BYTE
EXTRN	_bmStorage:BYTE
EXTRN	_bmAutoStartButton:BYTE
EXTRN	_bmTimeGPS:BYTE
EXTRN	_bmUnits:BYTE
EXTRN	_bmDisplay:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplaySystemSettings
_TEXT	SEGMENT
_hButton$ = -8						; size = 4
_hParent$ = 8						; size = 4
_DisplaySystemSettings PROC				; COMDAT
; Line 3384
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3387
	push	2060					; 0000080cH
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	115					; 00000073H
	push	127					; 0000007fH
	push	38					; 00000026H
	push	30					; 0000001eH
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hButton$[ebp], eax
; Line 3388
	push	OFFSET _bmDisplay
	push	0
	mov	eax, DWORD PTR _hButton$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3390
	push	2061					; 0000080dH
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	115					; 00000073H
	push	127					; 0000007fH
	push	38					; 00000026H
	push	177					; 000000b1H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hButton$[ebp], eax
; Line 3391
	push	OFFSET _bmUnits
	push	0
	mov	eax, DWORD PTR _hButton$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3393
	push	2062					; 0000080eH
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	115					; 00000073H
	push	127					; 0000007fH
	push	38					; 00000026H
	push	324					; 00000144H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hButton$[ebp], eax
; Line 3394
	push	OFFSET _bmTimeGPS
	push	0
	mov	eax, DWORD PTR _hButton$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3396
	push	2063					; 0000080fH
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	115					; 00000073H
	push	127					; 0000007fH
	push	156					; 0000009cH
	push	30					; 0000001eH
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hButton$[ebp], eax
; Line 3397
	push	OFFSET _bmAutoStartButton
	push	0
	mov	eax, DWORD PTR _hButton$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3399
	push	2064					; 00000810H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	115					; 00000073H
	push	127					; 0000007fH
	push	156					; 0000009cH
	push	177					; 000000b1H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hButton$[ebp], eax
; Line 3400
	push	OFFSET _bmStorage
	push	0
	mov	eax, DWORD PTR _hButton$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3402
	push	2065					; 00000811H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	115					; 00000073H
	push	127					; 0000007fH
	push	156					; 0000009cH
	push	324					; 00000144H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hButton$[ebp], eax
; Line 3403
	push	OFFSET _bmPredictive
	push	0
	mov	eax, DWORD PTR _hButton$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 3404
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DisplaySystemSettings ENDP
_TEXT	ENDS
EXTRN	_bmGoRacingText:BYTE
EXTRN	_GUI_DrawBitmap:PROC
EXTRN	_bmBackground:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GoRacingPaint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_GoRacingPaint PROC					; COMDAT
; Line 3407
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3408
	push	0
	push	0
	push	OFFSET _bmBackground
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 3409
	push	0
	push	60					; 0000003cH
	push	OFFSET _bmGoRacingText
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 3410
	push	229					; 000000e5H
	push	0
	push	0
	call	_GetNavigationArrow
	add	esp, 4
	push	eax
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 3411
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GoRacingPaint ENDP
_TEXT	ENDS
EXTRN	_bmRaceSetupText:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _RaceSetupPaint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_RaceSetupPaint PROC					; COMDAT
; Line 3415
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3416
	push	0
	push	0
	push	OFFSET _bmBackground
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 3417
	push	0
	push	60					; 0000003cH
	push	OFFSET _bmRaceSetupText
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 3418
	push	229					; 000000e5H
	push	0
	push	1
	call	_GetNavigationArrow
	add	esp, 4
	push	eax
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 3419
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_RaceSetupPaint ENDP
_TEXT	ENDS
EXTRN	_GUI_SetTextMode:PROC
EXTRN	_bmRaceReviewText:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ReviewSessionsPaint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_ReviewSessionsPaint PROC				; COMDAT
; Line 3423
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3424
	push	0
	push	0
	push	OFFSET _bmBackground
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 3426
	push	0
	push	60					; 0000003cH
	push	OFFSET _bmRaceReviewText
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 3427
	push	229					; 000000e5H
	push	0
	push	2
	call	_GetNavigationArrow
	add	esp, 4
	push	eax
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 3430
	push	OFFSET _GUI_Font24_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 3431
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 3432
	push	2
	call	_GUI_SetTextMode
	add	esp, 4
; Line 3437
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ReviewSessionsPaint ENDP
_TEXT	ENDS
EXTRN	_bmSystemSettingsText:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SystemSettingsPaint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_SystemSettingsPaint PROC				; COMDAT
; Line 3440
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3441
	push	0
	push	0
	push	OFFSET _bmBackground
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 3442
	push	0
	push	60					; 0000003cH
	push	OFFSET _bmSystemSettingsText
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 3443
	push	229					; 000000e5H
	push	0
	push	3
	call	_GetNavigationArrow
	add	esp, 4
	push	eax
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 3444
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SystemSettingsPaint ENDP
_TEXT	ENDS
PUBLIC	_CS_IsVisible
EXTRN	_GUI_Clear:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _CS_IsVisible
_TEXT	SEGMENT
_screen$ = 8						; size = 4
_CS_IsVisible PROC					; COMDAT
; Line 3470
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3471
	cmp	DWORD PTR _glbBlackoutFlag, 1
	jne	SHORT $LN8@CS_IsVisib
; Line 3472
	xor	eax, eax
	jmp	SHORT $LN9@CS_IsVisib
	jmp	SHORT $LN7@CS_IsVisib
$LN8@CS_IsVisib:
; Line 3473
	cmp	DWORD PTR _glbBlackoutFlag, 2
	jne	SHORT $LN7@CS_IsVisib
; Line 3475
	call	_GUI_Clear
; Line 3476
	mov	DWORD PTR _glbBlackoutFlag, 0
$LN7@CS_IsVisib:
; Line 3480
	cmp	DWORD PTR _selectedRaceMode, 4
	je	SHORT $LN4@CS_IsVisib
	cmp	DWORD PTR _selectedRaceMode, 1
	jne	SHORT $LN5@CS_IsVisib
$LN4@CS_IsVisib:
; Line 3481
	mov	eax, 1
	jmp	SHORT $LN9@CS_IsVisib
$LN5@CS_IsVisib:
; Line 3483
	call	_GetCurrentScreenID
	cmp	DWORD PTR _screen$[ebp], eax
	je	SHORT $LN2@CS_IsVisib
	cmp	DWORD PTR _screen$[ebp], 5
	jne	SHORT $LN3@CS_IsVisib
$LN2@CS_IsVisib:
; Line 3484
	mov	eax, 1
	jmp	SHORT $LN9@CS_IsVisib
	jmp	SHORT $LN9@CS_IsVisib
$LN3@CS_IsVisib:
; Line 3485
	xor	eax, eax
$LN9@CS_IsVisib:
; Line 3486
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CS_IsVisible ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _GetCurrentScreenID
_TEXT	SEGMENT
tv65 = -196						; size = 4
_GetCurrentScreenID PROC				; COMDAT
; Line 3489
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3490
	call	_GetScreenType
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 3
	je	SHORT $LN3@GetCurrent@2
	cmp	DWORD PTR tv65[ebp], 4
	je	SHORT $LN2@GetCurrent@2
	jmp	SHORT $LN1@GetCurrent@2
$LN3@GetCurrent@2:
; Line 3492
	push	3
	call	_GetLastScreen
	add	esp, 4
	mov	eax, DWORD PTR _DriveScreenList[eax*8]
	jmp	SHORT $LN6@GetCurrent@2
$LN2@GetCurrent@2:
; Line 3493
	push	4
	call	_GetLastScreen
	add	esp, 4
	mov	eax, DWORD PTR _InstrumentsScreenList[eax*8]
	jmp	SHORT $LN6@GetCurrent@2
$LN1@GetCurrent@2:
; Line 3495
	push	2
	call	_GetLastScreen
	add	esp, 4
	mov	eax, DWORD PTR _GaugesScreenList[eax*8]
$LN6@GetCurrent@2:
; Line 3497
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetCurrentScreenID ENDP
_TEXT	ENDS
EXTRN	_bmleftarrow:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetNavigationArrow
_TEXT	SEGMENT
tv64 = -196						; size = 4
_screen$ = 8						; size = 4
_GetNavigationArrow PROC				; COMDAT
; Line 3500
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3501
	mov	eax, DWORD PTR _screen$[ebp]
	mov	DWORD PTR tv64[ebp], eax
; Line 3507
	mov	eax, OFFSET _bmleftarrow
; Line 3509
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GetNavigationArrow ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ConfigScreensIgnoreNextKeyRelease
_TEXT	SEGMENT
_ConfigScreensIgnoreNextKeyRelease PROC			; COMDAT
; Line 3512
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3513
	mov	DWORD PTR _clickedOnThisScreen, 0
; Line 3514
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ConfigScreensIgnoreNextKeyRelease ENDP
_TEXT	ENDS
PUBLIC	_popupCallback
EXTRN	_fileList:BYTE
EXTRN	_GUI_Font16B_ASCII:BYTE
EXTRN	_TEXT_SetFont:PROC
EXTRN	_GUI_Font13B_ASCII:BYTE
EXTRN	_TEXT_CreateEx:PROC
EXTRN	_fullSessionName:BYTE
EXTRN	_systemSettingsPopupScreen:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _popupCallback
_TEXT	SEGMENT
tv141 = -256						; size = 4
tv140 = -256						; size = 4
tv65 = -256						; size = 4
_len$21994 = -56					; size = 4
_hText$21993 = -44					; size = 4
_Id$ = -32						; size = 4
_NCode$ = -20						; size = 4
_hDlg$ = -8						; size = 4
_pMsg$ = 8						; size = 4
_popupCallback PROC					; COMDAT
; Line 3552
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3556
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _hDlg$[ebp], ecx
; Line 3558
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 29			; 0000001dH
	je	SHORT $LN19@popupCallb
	cmp	DWORD PTR tv65[ebp], 38			; 00000026H
	je	$LN9@popupCallb
	jmp	$LN1@popupCallb
$LN19@popupCallb:
; Line 3561
	push	2
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	_FRAMEWIN_SetTextAlign
	add	esp, 8
; Line 3562
	mov	eax, DWORD PTR _popupTitleTextColor
	push	eax
	mov	ecx, DWORD PTR _hDlg$[ebp]
	push	ecx
	call	_FRAMEWIN_SetTextColor
	add	esp, 8
; Line 3563
	cmp	DWORD PTR _systemSettingsPopupScreen, 7
	jne	$LN18@popupCallb
; Line 3568
	push	OFFSET _fullSessionName
	push	0
	push	14					; 0000000eH
	push	2
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	push	20					; 00000014H
	push	360					; 00000168H
	push	76					; 0000004cH
	push	0
	call	_TEXT_CreateEx
	add	esp, 36					; 00000024H
	mov	DWORD PTR _hText$21993[ebp], eax
; Line 3569
	push	OFFSET _fullSessionName
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$21994[ebp], eax
	cmp	DWORD PTR _len$21994[ebp], 50		; 00000032H
	jbe	SHORT $LN17@popupCallb
; Line 3570
	push	OFFSET _GUI_Font13B_ASCII
	mov	eax, DWORD PTR _hText$21993[ebp]
	push	eax
	call	_TEXT_SetFont
	add	esp, 8
	jmp	SHORT $LN16@popupCallb
$LN17@popupCallb:
; Line 3571
	cmp	DWORD PTR _len$21994[ebp], 40		; 00000028H
	jbe	SHORT $LN15@popupCallb
; Line 3572
	push	OFFSET _GUI_Font16B_ASCII
	mov	eax, DWORD PTR _hText$21993[ebp]
	push	eax
	call	_TEXT_SetFont
	add	esp, 8
	jmp	SHORT $LN16@popupCallb
$LN15@popupCallb:
; Line 3573
	cmp	DWORD PTR _len$21994[ebp], 30		; 0000001eH
	jbe	SHORT $LN13@popupCallb
; Line 3574
	push	OFFSET _GUI_Font20_ASCII
	mov	eax, DWORD PTR _hText$21993[ebp]
	push	eax
	call	_TEXT_SetFont
	add	esp, 8
	jmp	SHORT $LN16@popupCallb
$LN13@popupCallb:
; Line 3575
	push	OFFSET _GUI_Font24_ASCII
	mov	eax, DWORD PTR _hText$21993[ebp]
	push	eax
	call	_TEXT_SetFont
	add	esp, 8
$LN16@popupCallb:
; Line 3577
	jmp	SHORT $LN11@popupCallb
$LN18@popupCallb:
	cmp	DWORD PTR _systemSettingsPopupScreen, 8
	jne	SHORT $LN11@popupCallb
; Line 3578
	push	OFFSET _fileList
	push	0
	push	14					; 0000000eH
	push	2
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	push	30					; 0000001eH
	push	400					; 00000190H
	push	100					; 00000064H
	push	0
	call	_TEXT_CreateEx
	add	esp, 36					; 00000024H
$LN11@popupCallb:
; Line 3580
	mov	DWORD PTR _systemSettingsPopupScreen, 0
; Line 3581
	jmp	$LN22@popupCallb
$LN9@popupCallb:
; Line 3584
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_WM_GetId
	add	esp, 4
	mov	DWORD PTR _Id$[ebp], eax
; Line 3585
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _NCode$[ebp], ecx
; Line 3586
	mov	eax, DWORD PTR _NCode$[ebp]
	mov	DWORD PTR tv140[ebp], eax
	cmp	DWORD PTR tv140[ebp], 2
	je	SHORT $LN6@popupCallb
	jmp	SHORT $LN7@popupCallb
$LN6@popupCallb:
; Line 3589
	mov	eax, DWORD PTR _Id$[ebp]
	mov	DWORD PTR tv141[ebp], eax
	cmp	DWORD PTR tv141[ebp], 0
	jle	SHORT $LN4@popupCallb
	cmp	DWORD PTR tv141[ebp], 8
	jle	SHORT $LN3@popupCallb
	cmp	DWORD PTR tv141[ebp], 2066		; 00000812H
	je	SHORT $LN2@popupCallb
	jmp	SHORT $LN4@popupCallb
$LN3@popupCallb:
; Line 3599
	mov	eax, DWORD PTR _Id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hDlg$[ebp]
	push	ecx
	call	_GUI_EndDialog
	add	esp, 8
; Line 3600
	jmp	SHORT $LN4@popupCallb
$LN2@popupCallb:
; Line 3603
	mov	BYTE PTR _userAbort, 1
$LN4@popupCallb:
; Line 3611
	mov	DWORD PTR _glbBlackoutFlag, 2
$LN7@popupCallb:
; Line 3614
	jmp	SHORT $LN22@popupCallb
$LN1@popupCallb:
; Line 3617
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN22@popupCallb:
; Line 3619
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_popupCallback ENDP
_TEXT	ENDS
PUBLIC	_DisplaySavingData
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ExitRecord
_TEXT	SEGMENT
_saveData$ = 8						; size = 1
_ExitRecord PROC					; COMDAT
; Line 3625
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3626
	push	1
	call	_SetUserMode
	add	esp, 4
; Line 3627
	mov	DWORD PTR _raceModeState, 0
; Line 3628
	cmp	DWORD PTR _selectedRaceMode, 2
	je	SHORT $LN1@ExitRecord
	movzx	eax, BYTE PTR _saveData$[ebp]
	test	eax, eax
	jne	SHORT $LN2@ExitRecord
$LN1@ExitRecord:
; Line 3629
	jmp	SHORT $LN3@ExitRecord
$LN2@ExitRecord:
; Line 3631
	call	_DisplaySavingData
	mov	DWORD PTR _hSavingDataDialog, eax
; Line 3632
	mov	eax, DWORD PTR _trackTableIndex
	imul	eax, 72					; 00000048H
	mov	DWORD PTR _trackTable[eax+20], 0
; Line 3633
	push	1
	call	_WriteUserDataEvent
	add	esp, 4
; Line 3634
	mov	eax, DWORD PTR _trackTableIndex
	imul	eax, 72					; 00000048H
	mov	DWORD PTR _trackTable[eax+20], 1
; Line 3648
	push	4
	call	_CreateFileList
	add	esp, 4
; Line 3651
	movzx	eax, BYTE PTR _sysData+208
	push	eax
	call	_FindNewestFile
	add	esp, 4
	mov	DWORD PTR _selectedSessionUnsorted, eax
; Line 3653
	push	0
	mov	eax, DWORD PTR _hSavingDataDialog
	push	eax
	call	_GUI_EndDialog
	add	esp, 8
; Line 3654
	mov	DWORD PTR _glbBlackoutFlag, 2
$LN3@ExitRecord:
; Line 3655
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ExitRecord ENDP
_TEXT	ENDS
EXTRN	_GUI_CreateDialogBox:PROC
EXTRN	_WM_GetDesktopWindow:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplaySavingData
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_DisplaySavingData PROC					; COMDAT
; Line 3671
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3674
	mov	BYTE PTR _userAbort, 0
; Line 3675
	push	0
	call	_SetPopupDefaults
	add	esp, 4
; Line 3676
	mov	DWORD PTR _glbBlackoutFlag, 1
; Line 3677
	push	10					; 0000000aH
	push	10					; 0000000aH
	call	_WM_GetDesktopWindow
	push	eax
	push	OFFSET _popupCallback
	push	4
	push	OFFSET _SavingDataResources
	call	_GUI_CreateDialogBox
	add	esp, 24					; 00000018H
	mov	DWORD PTR _retval$[ebp], eax
; Line 3678
	call	_GUI_Exec
; Line 3679
	mov	eax, DWORD PTR _retval$[ebp]
; Line 3680
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DisplaySavingData ENDP
_TEXT	ENDS
EXTRN	_notifyModeChange:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SetUserMode
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_SetUserMode PROC					; COMDAT
; Line 3684
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3685
	mov	eax, DWORD PTR _mode$[ebp]
	mov	DWORD PTR _unsavedSysData+136, eax
	mov	cl, BYTE PTR _unsavedSysData+136
	mov	BYTE PTR _sysData+177, cl
; Line 3686
	call	_notifyModeChange
; Line 3687
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SetUserMode ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _CheckForStopRecord
_TEXT	SEGMENT
_CheckForStopRecord PROC				; COMDAT
; Line 3694
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3695
	movzx	eax, BYTE PTR _unsavedSysData+220
	cmp	eax, 1
	jne	SHORT $LN2@CheckForSt
; Line 3697
	mov	BYTE PTR _unsavedSysData+220, 0
; Line 3698
	mov	al, 1
	jmp	SHORT $LN3@CheckForSt
	jmp	SHORT $LN3@CheckForSt
$LN2@CheckForSt:
; Line 3700
	xor	al, al
$LN3@CheckForSt:
; Line 3701
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CheckForStopRecord ENDP
_TEXT	ENDS
PUBLIC	_ConvertRaceModeToSessionType
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SaveRaceMode
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_SaveRaceMode PROC					; COMDAT
; Line 3708
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3709
	mov	eax, DWORD PTR _mode$[ebp]
	mov	DWORD PTR _selectedRaceMode, eax
; Line 3710
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	call	_ConvertRaceModeToSessionType
	add	esp, 4
	mov	BYTE PTR _sysData+208, al
; Line 3711
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SaveRaceMode ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ConvertRaceModeToSessionType
_TEXT	SEGMENT
tv64 = -196						; size = 4
_mode$ = 8						; size = 4
_ConvertRaceModeToSessionType PROC			; COMDAT
; Line 3714
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3715
	mov	eax, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN4@ConvertRac
	cmp	DWORD PTR tv64[ebp], 3
	je	SHORT $LN3@ConvertRac
	cmp	DWORD PTR tv64[ebp], 4
	je	SHORT $LN2@ConvertRac
	jmp	SHORT $LN1@ConvertRac
$LN4@ConvertRac:
; Line 3717
	mov	eax, 65					; 00000041H
	jmp	SHORT $LN7@ConvertRac
$LN3@ConvertRac:
; Line 3718
	mov	eax, 68					; 00000044H
	jmp	SHORT $LN7@ConvertRac
$LN2@ConvertRac:
; Line 3719
	mov	eax, 81					; 00000051H
	jmp	SHORT $LN7@ConvertRac
$LN1@ConvertRac:
; Line 3723
	mov	eax, 82					; 00000052H
$LN7@ConvertRac:
; Line 3725
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ConvertRaceModeToSessionType ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _GaugeScreensIgnoreNextKeyRelease
_TEXT	SEGMENT
_GaugeScreensIgnoreNextKeyRelease PROC			; COMDAT
; Line 3731
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3732
	mov	BYTE PTR _GSignoreRelease, 1
; Line 3733
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GaugeScreensIgnoreNextKeyRelease ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	_DisplayClosestTracks
PUBLIC	_ProceedToRaceMode
EXTRN	_DisplayLaunchScreen:PROC
EXTRN	_DisplayWaitingForCameraScreen:PROC
EXTRN	_GetValue:PROC
EXTRN	_GetSUCam:PROC
EXTRN	_DisplayTapAtSFScreen:PROC
EXTRN	_SessionTypeToTrackType:PROC
EXTRN	_trackData:BYTE
EXTRN	_CurrentTrackInRange:PROC
EXTRN	_DisplayWaitingForSatellites:PROC
EXTRN	_HaveSatelliteReception:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _GoRacingStateMachine
_TEXT	SEGMENT
tv137 = -212						; size = 4
tv85 = -212						; size = 4
tv64 = -212						; size = 4
$T22522 = -204						; size = 8
_hParent$ = 8						; size = 4
_GoRacingStateMachine PROC				; COMDAT
; Line 3736
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3737
	mov	eax, DWORD PTR _raceModeState
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 10			; 0000000aH
	ja	$LN33@GoRacingSt
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN37@GoRacingSt[ecx*4]
$LN32@GoRacingSt:
; Line 3741
	cmp	DWORD PTR _selectedRaceMode, 2
	jne	SHORT $LN31@GoRacingSt
; Line 3743
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _selectedRaceMode
	push	ecx
	call	_ProceedToRaceMode
	add	esp, 8
; Line 3744
	jmp	$LN33@GoRacingSt
	jmp	SHORT $LN29@GoRacingSt
$LN31@GoRacingSt:
; Line 3746
	call	_HaveSatelliteReception
	test	eax, eax
	jne	SHORT $LN29@GoRacingSt
; Line 3748
	mov	BYTE PTR _GSignoreRelease, 0
; Line 3750
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _selectedRaceMode
	push	ecx
	push	0
	call	_DisplayWaitingForSatellites
	add	esp, 12					; 0000000cH
; Line 3751
	jmp	$LN33@GoRacingSt
$LN29@GoRacingSt:
; Line 3758
	call	_CurrentTrackInRange
	test	eax, eax
	je	SHORT $LN26@GoRacingSt
	movzx	esi, BYTE PTR _trackData+64
	movzx	eax, BYTE PTR _sysData+208
	push	eax
	call	_SessionTypeToTrackType
	add	esp, 4
	cmp	esi, eax
	jne	SHORT $LN26@GoRacingSt
	push	OFFSET $SG22068
	push	OFFSET _sysData+160
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN27@GoRacingSt
$LN26@GoRacingSt:
; Line 3760
	mov	BYTE PTR _GSignoreRelease, 0
; Line 3762
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_DisplayClosestTracks
	add	esp, 4
; Line 3763
	jmp	$LN33@GoRacingSt
$LN27@GoRacingSt:
; Line 3780
	mov	eax, DWORD PTR _selectedRaceMode
	mov	DWORD PTR tv85[ebp], eax
	cmp	DWORD PTR tv85[ebp], 0
	je	SHORT $LN22@GoRacingSt
	cmp	DWORD PTR tv85[ebp], 1
	je	SHORT $LN19@GoRacingSt
	cmp	DWORD PTR tv85[ebp], 4
	je	SHORT $LN18@GoRacingSt
	jmp	$LN17@GoRacingSt
$LN22@GoRacingSt:
; Line 3783
	fld	QWORD PTR _trackData+16
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN21@GoRacingSt
; Line 3785
	mov	BYTE PTR _waitedForSF, 1
; Line 3786
	push	5
	call	_SetUserMode
	add	esp, 4
; Line 3787
	mov	BYTE PTR _GSignoreRelease, 0
; Line 3789
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_DisplayTapAtSFScreen
	add	esp, 4
; Line 3790
	jmp	$LN33@GoRacingSt
	jmp	SHORT $LN20@GoRacingSt
$LN21@GoRacingSt:
; Line 3792
	mov	BYTE PTR _waitedForSF, 0
$LN20@GoRacingSt:
; Line 3793
	jmp	SHORT $LN23@GoRacingSt
$LN19@GoRacingSt:
; Line 3795
	push	3
	call	_SetUserMode
	add	esp, 4
; Line 3796
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_DisplayAutoXStageScreen
	add	esp, 4
; Line 3797
	mov	BYTE PTR _waitedForSF, 1
; Line 3798
	jmp	$LN33@GoRacingSt
$LN18@GoRacingSt:
; Line 3800
	push	4
	call	_SetUserMode
	add	esp, 4
; Line 3801
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_DisplayDragStageScreen
	add	esp, 4
; Line 3802
	mov	BYTE PTR _waitedForSF, 1
; Line 3803
	jmp	$LN33@GoRacingSt
$LN17@GoRacingSt:
; Line 3805
	mov	BYTE PTR _waitedForSF, 0
$LN23@GoRacingSt:
; Line 3813
	cmp	DWORD PTR _selectedRaceMode, 1
	je	SHORT $LN14@GoRacingSt
	cmp	DWORD PTR _selectedRaceMode, 4
	jne	SHORT $LN13@GoRacingSt
$LN14@GoRacingSt:
; Line 3814
	call	_GetSUCam
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@GoRacingSt
	push	75					; 0000004bH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T22522[ebp], eax
	mov	DWORD PTR $T22522[ebp+4], edx
	cmp	DWORD PTR $T22522[ebp], 3
	je	SHORT $LN13@GoRacingSt
; Line 3816
	mov	BYTE PTR _GSignoreRelease, 0
; Line 3818
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_DisplayWaitingForCameraScreen
	add	esp, 4
; Line 3819
	jmp	$LN33@GoRacingSt
$LN13@GoRacingSt:
; Line 3824
	mov	DWORD PTR _raceModeState, 7
; Line 3825
	mov	eax, DWORD PTR _selectedRaceMode
	mov	DWORD PTR tv137[ebp], eax
	cmp	DWORD PTR tv137[ebp], 0
	je	SHORT $LN9@GoRacingSt
	cmp	DWORD PTR tv137[ebp], 1
	je	SHORT $LN6@GoRacingSt
	cmp	DWORD PTR tv137[ebp], 4
	je	SHORT $LN5@GoRacingSt
	jmp	SHORT $LN4@GoRacingSt
$LN9@GoRacingSt:
; Line 3828
	movzx	eax, BYTE PTR _waitedForSF
	test	eax, eax
	je	SHORT $LN8@GoRacingSt
; Line 3829
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	5
	call	_ProceedToRaceMode
	add	esp, 8
	jmp	SHORT $LN7@GoRacingSt
$LN8@GoRacingSt:
; Line 3830
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _selectedRaceMode
	push	ecx
	call	_ProceedToRaceMode
	add	esp, 8
$LN7@GoRacingSt:
; Line 3831
	jmp	SHORT $LN10@GoRacingSt
$LN6@GoRacingSt:
; Line 3840
	push	6
	call	_SetUserMode
	add	esp, 4
; Line 3841
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_DisplayLaunchScreen
	add	esp, 4
; Line 3842
	jmp	SHORT $LN10@GoRacingSt
$LN5@GoRacingSt:
; Line 3844
	push	7
	call	_SetUserMode
	add	esp, 4
; Line 3845
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_DisplayLaunchScreen
	add	esp, 4
; Line 3846
	jmp	SHORT $LN10@GoRacingSt
$LN4@GoRacingSt:
; Line 3848
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _selectedRaceMode
	push	ecx
	call	_ProceedToRaceMode
	add	esp, 8
$LN10@GoRacingSt:
; Line 3851
	jmp	SHORT $LN33@GoRacingSt
$LN3@GoRacingSt:
; Line 3854
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _selectedRaceMode
	push	ecx
	call	_ProceedToRaceMode
	add	esp, 8
; Line 3855
	jmp	SHORT $LN33@GoRacingSt
; Line 3858
	jmp	SHORT $LN33@GoRacingSt
$LN1@GoRacingSt:
; Line 3863
	mov	DWORD PTR _raceModeState, 0
; Line 3864
	mov	DWORD PTR _screen_scrolling, 1
; Line 3865
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	0
	push	1
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
$LN33@GoRacingSt:
; Line 3868
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@GoRacingSt:
	DD	$LN32@GoRacingSt
	DD	$LN29@GoRacingSt
	DD	$LN1@GoRacingSt
	DD	$LN27@GoRacingSt
	DD	$LN1@GoRacingSt
	DD	$LN1@GoRacingSt
	DD	$LN27@GoRacingSt
	DD	$LN13@GoRacingSt
	DD	$LN23@GoRacingSt
	DD	$LN23@GoRacingSt
	DD	$LN3@GoRacingSt
_GoRacingStateMachine ENDP
_TEXT	ENDS
EXTRN	_DisplayTrackSelection:PROC
EXTRN	_ClearWorkingTrackName:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayClosestTracks
_TEXT	SEGMENT
_hPrev$ = 8						; size = 4
_DisplayClosestTracks PROC				; COMDAT
; Line 3872
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3873
	cmp	DWORD PTR _hPrev$[ebp], 0
	je	SHORT $LN2@DisplayClo
; Line 3874
	mov	eax, DWORD PTR _hPrev$[ebp]
	push	eax
	call	_WM_DeleteWindow
	add	esp, 4
$LN2@DisplayClo:
; Line 3876
	push	24					; 00000018H
	call	_SetScreenType
	add	esp, 4
; Line 3877
	mov	DWORD PTR _ctType, 1
; Line 3879
	mov	DWORD PTR _screen_scrolling, 2
; Line 3885
	push	0
	push	OFFSET _RaceSetupScreensCallback
	push	8194					; 00002002H
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	call	_WM_CreateWindow
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _hDisplayClosestTracks, eax
	cmp	DWORD PTR _hDisplayClosestTracks, 0
	jg	SHORT $LN1@DisplayClo
; Line 3886
	call	_SystemError
$LN1@DisplayClo:
; Line 3890
	call	_ClearWorkingTrackName
; Line 3892
	mov	eax, DWORD PTR _hDisplayClosestTracks
	push	eax
	call	_DisplayTrackSelection
	add	esp, 4
; Line 3894
	push	0
	push	125					; 0000007dH
	push	0
	mov	eax, DWORD PTR _hDisplayClosestTracks
	push	eax
	call	_WM_CreateTimer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hScreenTimer, eax
; Line 3895
	call	_ResetNewScreen
; Line 3896
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayClosestTracks ENDP
_TEXT	ENDS
EXTRN	_DragAutoXGauges:PROC
EXTRN	_SimStartSession:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ProceedToRaceMode
_TEXT	SEGMENT
tv64 = -208						; size = 4
_screen$ = -8						; size = 4
_mode$ = 8						; size = 4
_hParent$ = 12						; size = 4
_ProceedToRaceMode PROC					; COMDAT
; Line 3903
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3906
	mov	BYTE PTR _unsavedSysData+220, 0
; Line 3913
	call	_SimStartSession
; Line 3919
	mov	eax, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN23@ProceedToR
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN22@ProceedToR
	cmp	DWORD PTR tv64[ebp], 3
	je	SHORT $LN21@ProceedToR
	jmp	SHORT $LN24@ProceedToR
$LN23@ProceedToR:
; Line 3922
	push	9
	call	_SetUserMode
	add	esp, 4
; Line 3923
	jmp	SHORT $LN24@ProceedToR
$LN22@ProceedToR:
; Line 3925
	push	22					; 00000016H
	call	_SetUserMode
	add	esp, 4
; Line 3926
	jmp	SHORT $LN24@ProceedToR
$LN21@ProceedToR:
; Line 3928
	push	15					; 0000000fH
	call	_SetUserMode
	add	esp, 4
$LN24@ProceedToR:
; Line 3936
	mov	DWORD PTR _raceModeState, 11		; 0000000bH
; Line 3938
	mov	DWORD PTR _screen_scrolling, 1
; Line 3939
	cmp	DWORD PTR _mode$[ebp], 3
	jne	SHORT $LN19@ProceedToR
; Line 3941
	push	3
	call	_GetLastScreen
	add	esp, 4
	mov	DWORD PTR _screen$[ebp], eax
; Line 3942
	mov	DWORD PTR _sysData+20, 3
; Line 3943
	cmp	DWORD PTR _screen$[ebp], -1
	jne	SHORT $LN16@ProceedToR
; Line 3944
	mov	DWORD PTR _screen$[ebp], 2
	jmp	SHORT $LN17@ProceedToR
$LN16@ProceedToR:
; Line 3945
	mov	eax, DWORD PTR _screen$[ebp]
	push	eax
	call	_InactiveGaugeScreen
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN17@ProceedToR
; Line 3946
	call	_GetNextGaugeScreen
	mov	DWORD PTR _screen$[ebp], eax
	jmp	SHORT $LN16@ProceedToR
$LN17@ProceedToR:
; Line 3948
	jmp	$LN14@ProceedToR
$LN19@ProceedToR:
	cmp	DWORD PTR _mode$[ebp], 2
	jne	SHORT $LN13@ProceedToR
; Line 3950
	push	4
	call	_GetLastScreen
	add	esp, 4
	mov	DWORD PTR _screen$[ebp], eax
; Line 3951
	mov	DWORD PTR _sysData+20, 4
; Line 3952
	cmp	DWORD PTR _screen$[ebp], -1
	jne	SHORT $LN10@ProceedToR
; Line 3953
	mov	DWORD PTR _screen$[ebp], 1
	jmp	SHORT $LN11@ProceedToR
$LN10@ProceedToR:
; Line 3954
	mov	eax, DWORD PTR _screen$[ebp]
	push	eax
	call	_InactiveGaugeScreen
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@ProceedToR
; Line 3955
	call	_GetNextGaugeScreen
	mov	DWORD PTR _screen$[ebp], eax
	jmp	SHORT $LN10@ProceedToR
$LN11@ProceedToR:
; Line 3957
	jmp	SHORT $LN14@ProceedToR
$LN13@ProceedToR:
	cmp	DWORD PTR _mode$[ebp], 1
	je	SHORT $LN6@ProceedToR
	cmp	DWORD PTR _mode$[ebp], 4
	jne	SHORT $LN7@ProceedToR
$LN6@ProceedToR:
; Line 3959
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_DragAutoXGauges
	add	esp, 4
; Line 3960
	push	0
	call	_WriteDataStructures
	add	esp, 4
; Line 3961
	jmp	SHORT $LN26@ProceedToR
; Line 3963
	jmp	SHORT $LN14@ProceedToR
$LN7@ProceedToR:
; Line 3965
	push	2
	call	_GetLastScreen
	add	esp, 4
	mov	DWORD PTR _screen$[ebp], eax
; Line 3966
	mov	DWORD PTR _sysData+20, 2
; Line 3967
	cmp	DWORD PTR _screen$[ebp], -1
	jne	SHORT $LN2@ProceedToR
; Line 3968
	mov	DWORD PTR _screen$[ebp], 1
	jmp	SHORT $LN14@ProceedToR
$LN2@ProceedToR:
; Line 3969
	mov	eax, DWORD PTR _screen$[ebp]
	push	eax
	call	_InactiveGaugeScreen
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN14@ProceedToR
; Line 3970
	call	_GetNextGaugeScreen
	mov	DWORD PTR _screen$[ebp], eax
	jmp	SHORT $LN2@ProceedToR
$LN14@ProceedToR:
; Line 3973
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _screen$[ebp]
	push	ecx
	call	_RunningGauges
	add	esp, 8
; Line 3974
	push	0
	call	_WriteDataStructures
	add	esp, 4
$LN26@ProceedToR:
; Line 3975
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ProceedToRaceMode ENDP
_TEXT	ENDS
PUBLIC	_StartupGoToRaceMode
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _StartupGoToRaceMode
_TEXT	SEGMENT
_StartupGoToRaceMode PROC				; COMDAT
; Line 3979
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3980
	movzx	eax, BYTE PTR _sysData+125
	test	eax, eax
	je	SHORT $LN8@StartupGoT
; Line 3982
	call	_GetScreenType
	cmp	eax, 2
	jne	SHORT $LN7@StartupGoT
; Line 3983
	mov	DWORD PTR _selectedRaceMode, 0
	jmp	SHORT $LN6@StartupGoT
$LN7@StartupGoT:
; Line 3984
	call	_GetScreenType
	cmp	eax, 4
	jne	SHORT $LN5@StartupGoT
; Line 3985
	mov	DWORD PTR _selectedRaceMode, 2
	jmp	SHORT $LN6@StartupGoT
$LN5@StartupGoT:
; Line 3986
	call	_GetScreenType
	cmp	eax, 3
	jne	SHORT $LN3@StartupGoT
; Line 3987
	mov	DWORD PTR _selectedRaceMode, 3
; Line 3988
	jmp	SHORT $LN6@StartupGoT
$LN3@StartupGoT:
; Line 3990
	push	1
	call	_SetUserMode
	add	esp, 4
; Line 3991
	xor	eax, eax
	jmp	SHORT $LN9@StartupGoT
$LN6@StartupGoT:
; Line 3993
	push	0
	call	_GoRacingStateMachine
	add	esp, 4
; Line 3994
	mov	eax, 1
	jmp	SHORT $LN9@StartupGoT
; Line 3996
	jmp	SHORT $LN9@StartupGoT
$LN8@StartupGoT:
; Line 3998
	push	1
	call	_SetUserMode
	add	esp, 4
; Line 3999
	xor	eax, eax
$LN9@StartupGoT:
; Line 4001
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_StartupGoToRaceMode ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4011333333333333
PUBLIC	__real@4059000000000000
PUBLIC	_GetDigitalInputText
PUBLIC	_GetAnalogInputText
PUBLIC	__$ArrayPad$
EXTRN	_suData:BYTE
EXTRN	_GetFullCameraText:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
?mainHelp@?1??GetSystemStatsHelpText@@9@9 DB 0343H DUP (?) ; `GetSystemStatsHelpText'::`2'::mainHelp
_BSS	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4011333333333333
CONST	SEGMENT
__real@4011333333333333 DQ 04011333333333333r	; 4.3
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _GetSystemStatsHelpText
_TEXT	SEGMENT
tv247 = -328						; size = 4
tv263 = -324						; size = 4
tv237 = -324						; size = 8
tv228 = -324						; size = 4
tv217 = -324						; size = 8
tv255 = -320						; size = 4
tv225 = -320						; size = 4
_i$ = -120						; size = 4
_buffer$ = -108						; size = 100
__$ArrayPad$ = -4					; size = 4
_pText$ = 8						; size = 4
_GetSystemStatsHelpText PROC				; COMDAT
; Line 4066
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 4084
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	push	OFFSET ?mainHelp@?1??GetSystemStatsHelpText@@9@9
	call	_strcpy
	add	esp, 8
; Line 4086
	push	OFFSET _unsavedSysData+28
	push	OFFSET _unsavedSysData+8
	push	OFFSET $SG22158
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, OFFSET ?mainHelp@?1??GetSystemStatsHelpText@@9@9
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 4088
	push	OFFSET $SG22159
	push	OFFSET ?mainHelp@?1??GetSystemStatsHelpText@@9@9
	call	_strcat
	add	esp, 8
; Line 4089
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_GetFullCameraText
	add	esp, 4
	push	eax
	push	OFFSET ?mainHelp@?1??GetSystemStatsHelpText@@9@9
	call	_strcat
	add	esp, 8
; Line 4091
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@GetSystemS
$LN2@GetSystemS:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@GetSystemS:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN1@GetSystemS
; Line 4093
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_GetAnalogInputText
	add	esp, 8
	push	eax
	push	OFFSET ?mainHelp@?1??GetSystemStatsHelpText@@9@9
	call	_strcat
	add	esp, 8
; Line 4094
	jmp	SHORT $LN2@GetSystemS
$LN1@GetSystemS:
; Line 4096
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	push	0
	call	_GetDigitalInputText
	add	esp, 8
	push	eax
	push	OFFSET ?mainHelp@?1??GetSystemStatsHelpText@@9@9
	call	_strcat
	add	esp, 8
; Line 4097
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	push	1
	call	_GetDigitalInputText
	add	esp, 8
	push	eax
	push	OFFSET ?mainHelp@?1??GetSystemStatsHelpText@@9@9
	call	_strcat
	add	esp, 8
; Line 4107
	mov	eax, DWORD PTR _unsavedSysData+108
	mov	DWORD PTR tv217[ebp], eax
	mov	DWORD PTR tv217[ebp+4], 0
	fild	QWORD PTR tv217[ebp]
	fdiv	QWORD PTR __real@4059000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG22164
	push	OFFSET ?mainHelp@?1??GetSystemStatsHelpText@@9@9
	call	_strlen
	add	esp, 4
	add	eax, OFFSET ?mainHelp@?1??GetSystemStatsHelpText@@9@9
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 4110
	movzx	eax, WORD PTR _suData+20
	mov	DWORD PTR tv225[ebp], eax
	fild	DWORD PTR tv225[ebp]
	fdiv	QWORD PTR __real@4059000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	movzx	ecx, WORD PTR _unsavedSysData
	mov	DWORD PTR tv228[ebp], ecx
	fild	DWORD PTR tv228[ebp]
	fdiv	QWORD PTR __real@4059000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG22167
	push	OFFSET ?mainHelp@?1??GetSystemStatsHelpText@@9@9
	call	_strlen
	add	esp, 4
	add	eax, OFFSET ?mainHelp@?1??GetSystemStatsHelpText@@9@9
	push	eax
	call	_sprintf
	add	esp, 24					; 00000018H
; Line 4114
	mov	eax, DWORD PTR _unsavedSysData+104
	push	eax
	mov	ecx, DWORD PTR _unsavedSysData+100
	sub	ecx, 1
	mov	DWORD PTR tv237[ebp], ecx
	mov	DWORD PTR tv237[ebp+4], 0
	fild	QWORD PTR tv237[ebp]
	fdiv	QWORD PTR __real@4011333333333333
	fld1
	faddp	ST(1), ST(0)
	call	__ftol2_sse
	push	eax
	movzx	edx, BYTE PTR _unsavedSysData+4
	mov	DWORD PTR tv247[ebp], edx
	fild	DWORD PTR tv247[ebp]
	fdiv	QWORD PTR __real@4059000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _unsavedSysData+96
	push	eax
	push	OFFSET $SG22171
	push	OFFSET ?mainHelp@?1??GetSystemStatsHelpText@@9@9
	call	_strlen
	add	esp, 4
	add	eax, OFFSET ?mainHelp@?1??GetSystemStatsHelpText@@9@9
	push	eax
	call	_sprintf
	add	esp, 28					; 0000001cH
; Line 4118
	movzx	eax, BYTE PTR _suData+26
	push	eax
	movzx	ecx, BYTE PTR _suData+25
	sub	ecx, 1
	mov	DWORD PTR tv255[ebp], ecx
	fild	DWORD PTR tv255[ebp]
	fdiv	QWORD PTR __real@4011333333333333
	fld1
	faddp	ST(1), ST(0)
	call	__ftol2_sse
	push	eax
	movzx	edx, BYTE PTR _suData+24
	mov	DWORD PTR tv263[ebp], edx
	fild	DWORD PTR tv263[ebp]
	fdiv	QWORD PTR __real@4059000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _suData+28
	push	eax
	push	OFFSET $SG22176
	push	OFFSET ?mainHelp@?1??GetSystemStatsHelpText@@9@9
	call	_strlen
	add	esp, 4
	add	eax, OFFSET ?mainHelp@?1??GetSystemStatsHelpText@@9@9
	push	eax
	call	_sprintf
	add	esp, 28					; 0000001cH
; Line 4120
	mov	eax, OFFSET ?mainHelp@?1??GetSystemStatsHelpText@@9@9
; Line 4121
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@GetSystemS
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@GetSystemS:
	DD	1
	DD	$LN7@GetSystemS
$LN7@GetSystemS:
	DD	-108					; ffffff94H
	DD	100					; 00000064H
	DD	$LN6@GetSystemS
$LN6@GetSystemS:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_GetSystemStatsHelpText ENDP
_TEXT	ENDS
_BSS	SEGMENT
	ALIGN	4

?storageHelp@?1??GetStorageStatsHelpText@@9@9 DB 0323H DUP (?) ; `GetStorageStatsHelpText'::`2'::storageHelp
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT _GetStorageStatsHelpText
_TEXT	SEGMENT
_pText$ = 8						; size = 4
_GetStorageStatsHelpText PROC				; COMDAT
; Line 4124
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 4131
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	push	OFFSET ?storageHelp@?1??GetStorageStatsHelpText@@9@9
	call	_strcpy
	add	esp, 8
; Line 4155
	mov	eax, OFFSET ?storageHelp@?1??GetStorageStatsHelpText@@9@9
; Line 4156
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetStorageStatsHelpText ENDP
_TEXT	ENDS
EXTRN	_vehicleData:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetAnalogInputText
_TEXT	SEGMENT
_index$ = 8						; size = 4
_pBuffer$ = 12						; size = 4
_GetAnalogInputText PROC				; COMDAT
; Line 4159
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 4160
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	push	OFFSET $SG22187
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 4161
	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+147]
	test	ecx, ecx
	je	SHORT $LN2@GetAnalogI
; Line 4162
	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 6
	add	eax, OFFSET _vehicleData+120
	push	eax
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
	jmp	SHORT $LN1@GetAnalogI
$LN2@GetAnalogI:
; Line 4163
	push	OFFSET $SG22190
	mov	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
$LN1@GetAnalogI:
; Line 4164
	push	OFFSET $SG22191
	mov	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
; Line 4166
	mov	eax, DWORD PTR _pBuffer$[ebp]
; Line 4167
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetAnalogInputText ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _GetDigitalInputText
_TEXT	SEGMENT
_index$ = 8						; size = 4
_pBuffer$ = 12						; size = 4
_GetDigitalInputText PROC				; COMDAT
; Line 4170
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 4171
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 4
	push	eax
	push	OFFSET $SG22197
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 4172
	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 47					; 0000002fH
	movzx	ecx, BYTE PTR _vehicleData[eax+419]
	test	ecx, ecx
	je	SHORT $LN2@GetDigital
; Line 4173
	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 47					; 0000002fH
	add	eax, OFFSET _vehicleData+376
	push	eax
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
	jmp	SHORT $LN1@GetDigital
$LN2@GetDigital:
; Line 4174
	push	OFFSET $SG22200
	mov	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
$LN1@GetDigital:
; Line 4175
	push	OFFSET $SG22201
	mov	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
; Line 4177
	mov	eax, DWORD PTR _pBuffer$[ebp]
; Line 4178
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetDigitalInputText ENDP
_TEXT	ENDS
PUBLIC	_NotSupportedPopup
EXTRN	_nonModalPopupCallback:PROC
EXTRN	_modalWindowUp:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _NotSupportedPopup
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_owner$ = 8						; size = 4
_NotSupportedPopup PROC					; COMDAT
; Line 4188
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 4191
	push	2
	call	_SetPopupDefaults
	add	esp, 4
; Line 4193
	mov	DWORD PTR _retval$[ebp], 0
; Line 4194
	mov	DWORD PTR _modalWindowUp, 1
; Line 4196
	push	10					; 0000000aH
	push	10					; 0000000aH
	mov	eax, DWORD PTR _owner$[ebp]
	push	eax
	push	OFFSET _nonModalPopupCallback
	push	4
	push	OFFSET _NotSupportedResources
	call	_GUI_ExecDialogBox
	add	esp, 24					; 00000018H
	mov	DWORD PTR _retval$[ebp], eax
; Line 4198
	mov	DWORD PTR _modalWindowUp, 0
; Line 4200
	mov	eax, DWORD PTR _retval$[ebp]
; Line 4201
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_NotSupportedPopup ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _AnyGaugeScreen
_TEXT	SEGMENT
_type$ = 8						; size = 4
_AnyGaugeScreen PROC					; COMDAT
; Line 4207
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 4208
	cmp	DWORD PTR _type$[ebp], 2
	je	SHORT $LN2@AnyGaugeSc
	cmp	DWORD PTR _type$[ebp], 3
	je	SHORT $LN2@AnyGaugeSc
	cmp	DWORD PTR _type$[ebp], 4
	je	SHORT $LN2@AnyGaugeSc
	cmp	DWORD PTR _type$[ebp], 31		; 0000001fH
	jne	SHORT $LN3@AnyGaugeSc
$LN2@AnyGaugeSc:
; Line 4209
	mov	al, 1
	jmp	SHORT $LN4@AnyGaugeSc
	jmp	SHORT $LN4@AnyGaugeSc
$LN3@AnyGaugeSc:
; Line 4210
	xor	al, al
$LN4@AnyGaugeSc:
; Line 4211
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_AnyGaugeScreen ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _AnyNonDragGaugeScreen
_TEXT	SEGMENT
_type$ = 8						; size = 4
_AnyNonDragGaugeScreen PROC				; COMDAT
; Line 4217
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 4218
	cmp	DWORD PTR _type$[ebp], 2
	je	SHORT $LN2@AnyNonDrag
	cmp	DWORD PTR _type$[ebp], 3
	je	SHORT $LN2@AnyNonDrag
	cmp	DWORD PTR _type$[ebp], 4
	je	SHORT $LN2@AnyNonDrag
	cmp	DWORD PTR _type$[ebp], 31		; 0000001fH
	jne	SHORT $LN3@AnyNonDrag
$LN2@AnyNonDrag:
; Line 4219
	mov	al, 1
	jmp	SHORT $LN4@AnyNonDrag
	jmp	SHORT $LN4@AnyNonDrag
$LN3@AnyNonDrag:
; Line 4220
	xor	al, al
$LN4@AnyNonDrag:
; Line 4221
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_AnyNonDragGaugeScreen ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _DetermineAnalogScreenSelection
_TEXT	SEGMENT
_i$ = -20						; size = 4
_numAnalogsDisplayed$ = -8				; size = 4
_DetermineAnalogScreenSelection PROC			; COMDAT
; Line 4228
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 4231
	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _numAnalogsDisplayed$[ebp], eax
	jmp	SHORT $LN4@DetermineA
$LN3@DetermineA:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@DetermineA:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN2@DetermineA
; Line 4233
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+147]
	test	ecx, ecx
	je	SHORT $LN1@DetermineA
; Line 4234
	mov	eax, DWORD PTR _numAnalogsDisplayed$[ebp]
	add	eax, 1
	mov	DWORD PTR _numAnalogsDisplayed$[ebp], eax
$LN1@DetermineA:
; Line 4235
	jmp	SHORT $LN3@DetermineA
$LN2@DetermineA:
; Line 4236
	mov	eax, DWORD PTR _numAnalogsDisplayed$[ebp]
; Line 4237
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_DetermineAnalogScreenSelection ENDP
_TEXT	ENDS
END
