; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\DUII\InputScreens.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_Digital5Paint
PUBLIC	_DisplayDigital5
PUBLIC	_Digital4Paint
PUBLIC	_DisplayDigital4
PUBLIC	_Analog3Paint
PUBLIC	_DisplayAnalog3
PUBLIC	_Analog2Paint
PUBLIC	_DisplayAnalog2
PUBLIC	_Analog1Paint
PUBLIC	_DisplayAnalog1
PUBLIC	_Analog0Paint
PUBLIC	_DisplayAnalog0
PUBLIC	_globalInput
PUBLIC	_InputsScreenList
EXTRN	_BUTTON_CreateIndirect:PROC
EXTRN	_TEXT_CreateIndirect:PROC
EXTRN	_FRAMEWIN_CreateIndirect:PROC
_DATA	SEGMENT
COMM	_test:DWORD
_DATA	ENDS
_BSS	SEGMENT
_globalInput DB	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
?Input4DisabledResources@?L@??InputsScreensCallback@@9@9 DD FLAT:_FRAMEWIN_CreateIndirect ; `InputsScreensCallback'::`11'::Input4DisabledResources
	DD	FLAT:$SG19640
	DW	00H
	DW	01eH
	DW	014H
	DW	0190H
	DW	0dcH
	DW	00H
	DD	00H
	DD	FLAT:_TEXT_CreateIndirect
	DD	FLAT:$SG19641
	DW	00H
	DW	00H
	DW	0aH
	DW	0186H
	DW	01eH
	DW	02H
	ORG $+4
	DD	FLAT:_TEXT_CreateIndirect
	DD	FLAT:$SG19642
	DW	00H
	DW	00H
	DW	028H
	DW	0186H
	DW	01eH
	DW	02H
	ORG $+4
	DD	FLAT:_TEXT_CreateIndirect
	DD	FLAT:$SG19643
	DW	00H
	DW	00H
	DW	046H
	DW	0186H
	DW	01eH
	DW	02H
	ORG $+4
	DD	FLAT:_BUTTON_CreateIndirect
	DD	FLAT:$SG19644
	DW	01H
	DW	091H
	DW	073H
	DW	064H
	DW	03cH
	ORG $+6
CONST	ENDS
_DATA	SEGMENT
_InputsScreenList DD 00H
	DD	FLAT:_DisplayAnalog0
	DD	FLAT:_Analog0Paint
	DD	01H
	DD	FLAT:_DisplayAnalog1
	DD	FLAT:_Analog1Paint
	DD	02H
	DD	FLAT:_DisplayAnalog2
	DD	FLAT:_Analog2Paint
	DD	03H
	DD	FLAT:_DisplayAnalog3
	DD	FLAT:_Analog3Paint
	DD	04H
	DD	FLAT:_DisplayDigital4
	DD	FLAT:_Digital4Paint
	DD	05H
	DD	FLAT:_DisplayDigital5
	DD	FLAT:_Digital5Paint
	DD	0ffffffffH
	DD	00H
	DD	00H
$SG19640 DB	'Invalid Setting', 00H
$SG19641 DB	'You cannot enable Digital Input 4', 00H
	ORG $+2
$SG19642 DB	'if you have a camera selected.', 00H
	ORG $+1
$SG19643 DB	'Disable camera to use Input 4.', 00H
	ORG $+1
$SG19644 DB	'OK', 00H
	ORG $+1
$SG19677 DB	'Disable', 00H
$SG19678 DB	'Enable', 00H
	ORG $+1
$SG19679 DB	'%s Analog %d', 00H
	ORG $+3
$SG19686 DB	'Disable', 00H
$SG19687 DB	'Enable', 00H
	ORG $+1
$SG19688 DB	'%s Digital %d', 00H
	ORG $+2
$SG19722 DB	'Edit Scale', 00H
	ORG $+1
$SG19723 DB	'Edit Alarm', 00H
	ORG $+1
$SG19724 DB	'Rename Input', 00H
	ORG $+3
$SG19725 DB	'Rename Units', 00H
	ORG $+3
$SG19742 DB	'Input Disabled', 00H
	ORG $+1
$SG19744 DB	'No Alarm Set', 00H
	ORG $+3
$SG19747 DB	'%.2f < ', 00H
$SG19748 DB	'Alarm', 00H
	ORG $+2
$SG19750 DB	'%s > %.2f', 00H
	ORG $+2
$SG19751 DB	'Volts: %0.2f', 00H
	ORG $+3
$SG19752 DB	'%dV Range Selected', 00H
	ORG $+1
$SG19753 DB	'Low:', 00H
	ORG $+3
$SG19754 DB	'High:', 00H
	ORG $+2
$SG19755 DB	'Low:', 00H
	ORG $+3
$SG19756 DB	'High:', 00H
	ORG $+2
$SG19757 DB	'%.2f', 00H
	ORG $+3
$SG19758 DB	'%.2f', 00H
	ORG $+3
$SG19760 DB	'%d', 00H
	ORG $+1
$SG19762 DB	'%d', 00H
	ORG $+1
$SG19768 DB	'NO', 00H
	ORG $+1
$SG19770 DB	'LOW', 00H
$SG19772 DB	'MEDIUM', 00H
	ORG $+1
$SG19774 DB	'HIGH', 00H
	ORG $+3
$SG19776 DB	'VERY HIGH', 00H
	ORG $+2
$SG19777 DB	' Filtering', 00H
	ORG $+1
$SG19779 DB	'LED1', 00H
	ORG $+3
$SG19781 DB	'LED2', 00H
	ORG $+3
$SG19788 DB	'Edit Alarm', 00H
	ORG $+1
$SG19789 DB	'Rename Input', 00H
	ORG $+3
$SG19790 DB	'Rename High', 00H
$SG19791 DB	'Rename Low', 00H
	ORG $+1
$SG19802 DB	'Input Disabled', 00H
	ORG $+1
$SG19808 DB	'Alarm Disabled', 00H
	ORG $+1
$SG19810 DB	'Alarm when HIGH', 00H
$SG19812 DB	'Alarm when LOW', 00H
	ORG $+1
$SG19813 DB	'State: %s', 00H
	ORG $+2
$SG19814 DB	'HIGH Name:', 00H
	ORG $+1
$SG19815 DB	'LOW Name:', 00H
	ORG $+2
$SG19817 DB	'LED1', 00H
	ORG $+3
$SG19819 DB	'LED2', 00H
	ORG $+3
$SG19877 DB	'HIGH', 00H
	ORG $+3
$SG19879 DB	'LOW', 00H
$SG19890 DB	'Above', 00H
	ORG $+2
$SG19892 DB	'Below', 00H
	ORG $+2
$SG19894 DB	'Equal To', 00H
	ORG $+3
$SG19896 DB	'Off', 00H
_DATA	ENDS
PUBLIC	_GetInputsWindowHandle
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
	ALIGN	4

_hInputsScreens DD 01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\duii\duii\inputscreens.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GetInputsWindowHandle
_TEXT	SEGMENT
_GetInputsWindowHandle PROC				; COMDAT
; Line 159
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 160
	mov	eax, DWORD PTR _hInputsScreens
; Line 161
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GetInputsWindowHandle ENDP
_TEXT	ENDS
PUBLIC	_SetInputsWindowHandle
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SetInputsWindowHandle
_TEXT	SEGMENT
_hWin$ = 8						; size = 4
_SetInputsWindowHandle PROC				; COMDAT
; Line 164
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 165
	mov	eax, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR _hInputsScreens, eax
; Line 166
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SetInputsWindowHandle ENDP
_TEXT	ENDS
PUBLIC	_SetDigitalEnableButtonText
PUBLIC	_SetAnalogEnableButtonText
PUBLIC	_ScreenIDToInput
PUBLIC	_InputsIgnoreNextKeyRelease
PUBLIC	_InputsScreensCallback
EXTRN	_WM_DefaultProc:PROC
EXTRN	_DisplayNewScreenList:PROC
EXTRN	_WM_GetParent:PROC
EXTRN	_notifyConfigChange:PROC
EXTRN	_GUI_ExecDialogBox:PROC
EXTRN	_popupCallback:PROC
EXTRN	_SetPopupDefaults:PROC
EXTRN	_GetSUCam:PROC
EXTRN	_vehicleData:BYTE
EXTRN	_GetCurrentScreen:PROC
EXTRN	_WM_GetId:PROC
EXTRN	_DrawSignalStrength:PROC
EXTRN	_GetLastScreen:PROC
EXTRN	_GetScreenType:PROC
EXTRN	_WM_InvalidateWindow:PROC
EXTRN	_WM_RestartTimer:PROC
EXTRN	_hScreenTimer:DWORD
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _InputsScreensCallback
_TEXT	SEGMENT
tv90 = -232						; size = 4
tv83 = -232						; size = 4
tv64 = -232						; size = 4
_input$ = -32						; size = 4
_Id$ = -20						; size = 4
_NCode$ = -8						; size = 4
_pMsg$ = 8						; size = 4
_InputsScreensCallback PROC				; COMDAT
; Line 169
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 178
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 38			; 00000026H
	jg	SHORT $LN39@InputsScre
	cmp	DWORD PTR tv64[ebp], 38			; 00000026H
	je	$LN29@InputsScre
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN32@InputsScre
	cmp	DWORD PTR tv64[ebp], 15			; 0000000fH
	je	SHORT $LN31@InputsScre
	jmp	$LN1@InputsScre
$LN39@InputsScre:
	cmp	DWORD PTR tv64[ebp], 275		; 00000113H
	je	SHORT $LN34@InputsScre
	jmp	$LN1@InputsScre
$LN34@InputsScre:
; Line 181
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _hScreenTimer
	jne	SHORT $LN33@InputsScre
; Line 183
	push	125					; 0000007dH
	mov	eax, DWORD PTR _hScreenTimer
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
; Line 185
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_WM_InvalidateWindow
	add	esp, 4
$LN33@InputsScre:
; Line 187
	jmp	$LN37@InputsScre
$LN32@InputsScre:
; Line 190
	call	_InputsIgnoreNextKeyRelease
; Line 191
	jmp	$LN37@InputsScre
$LN31@InputsScre:
; Line 194
	call	_GetScreenType
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN30@InputsScre
; Line 197
	mov	esi, esp
	mov	eax, DWORD PTR _hInputsScreens
	push	eax
	push	10					; 0000000aH
	call	_GetLastScreen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _InputsScreenList[eax+8]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 198
	call	_DrawSignalStrength
$LN30@InputsScre:
; Line 200
	jmp	$LN37@InputsScre
$LN29@InputsScre:
; Line 246
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_WM_GetId
	add	esp, 4
	mov	DWORD PTR _Id$[ebp], eax
; Line 247
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _NCode$[ebp], ecx
; Line 248
	mov	eax, DWORD PTR _NCode$[ebp]
	mov	DWORD PTR tv83[ebp], eax
	cmp	DWORD PTR tv83[ebp], 2
	je	SHORT $LN26@InputsScre
	jmp	$LN27@InputsScre
$LN26@InputsScre:
; Line 255
	call	_GetCurrentScreen
	mov	DWORD PTR _input$[ebp], eax
; Line 256
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_ScreenIDToInput
	add	esp, 4
	mov	DWORD PTR _input$[ebp], eax
; Line 257
	cmp	DWORD PTR _input$[ebp], 4
	jge	SHORT $LN25@InputsScre
; Line 258
	mov	al, BYTE PTR _input$[ebp]
	mov	BYTE PTR _globalInput, al
	jmp	SHORT $LN24@InputsScre
$LN25@InputsScre:
; Line 259
	mov	eax, DWORD PTR _input$[ebp]
	sub	eax, 4
	mov	BYTE PTR _globalInput, al
$LN24@InputsScre:
; Line 261
	mov	eax, DWORD PTR _Id$[ebp]
	mov	DWORD PTR tv90[ebp], eax
	mov	ecx, DWORD PTR tv90[ebp]
	sub	ecx, 2049				; 00000801H
	mov	DWORD PTR tv90[ebp], ecx
	cmp	DWORD PTR tv90[ebp], 6
	ja	$LN27@InputsScre
	mov	edx, DWORD PTR tv90[ebp]
	jmp	DWORD PTR $LN40@InputsScre[edx*4]
$LN21@InputsScre:
; Line 264
	cmp	DWORD PTR _input$[ebp], 4
	jge	SHORT $LN20@InputsScre
; Line 266
	mov	eax, DWORD PTR _input$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+147]
	test	ecx, ecx
	je	SHORT $LN19@InputsScre
; Line 267
	mov	eax, DWORD PTR _input$[ebp]
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+147], 0
	jmp	SHORT $LN18@InputsScre
$LN19@InputsScre:
; Line 268
	mov	eax, DWORD PTR _input$[ebp]
	shl	eax, 6
	mov	BYTE PTR _vehicleData[eax+147], 1
$LN18@InputsScre:
; Line 270
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMsg$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_SetAnalogEnableButtonText
	add	esp, 8
; Line 272
	jmp	$LN17@InputsScre
$LN20@InputsScre:
; Line 275
	cmp	DWORD PTR _input$[ebp], 4
	jne	SHORT $LN16@InputsScre
	movzx	eax, BYTE PTR _vehicleData+419
	test	eax, eax
	jne	SHORT $LN16@InputsScre
; Line 278
	call	_GetSUCam
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN16@InputsScre
; Line 288
	push	2
	call	_SetPopupDefaults
	add	esp, 4
; Line 289
	push	10					; 0000000aH
	push	10					; 0000000aH
	mov	eax, DWORD PTR _hInputsScreens
	push	eax
	push	OFFSET _popupCallback
	push	5
	push	OFFSET ?Input4DisabledResources@?L@??InputsScreensCallback@@9@9
	call	_GUI_ExecDialogBox
	add	esp, 24					; 00000018H
; Line 290
	jmp	$LN27@InputsScre
$LN16@InputsScre:
; Line 293
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	movzx	ecx, BYTE PTR _vehicleData[eax+419]
	test	ecx, ecx
	je	SHORT $LN14@InputsScre
; Line 294
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	mov	BYTE PTR _vehicleData[eax+419], 0
	jmp	SHORT $LN13@InputsScre
$LN14@InputsScre:
; Line 295
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	mov	BYTE PTR _vehicleData[eax+419], 1
$LN13@InputsScre:
; Line 297
	movzx	eax, BYTE PTR _globalInput
	push	eax
	mov	ecx, DWORD PTR _pMsg$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_SetDigitalEnableButtonText
	add	esp, 8
$LN17@InputsScre:
; Line 299
	call	_notifyConfigChange
; Line 300
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_WM_GetParent
	add	esp, 4
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 301
	jmp	$LN27@InputsScre
$LN12@InputsScre:
; Line 304
	cmp	DWORD PTR _input$[ebp], 4
	jge	SHORT $LN11@InputsScre
; Line 305
	mov	eax, DWORD PTR _hInputsScreens
	push	eax
	push	0
	push	15					; 0000000fH
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
$LN11@InputsScre:
; Line 306
	jmp	$LN27@InputsScre
$LN10@InputsScre:
; Line 309
	cmp	DWORD PTR _input$[ebp], 4
	jge	SHORT $LN9@InputsScre
; Line 310
	mov	eax, DWORD PTR _hInputsScreens
	push	eax
	push	1
	push	15					; 0000000fH
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN8@InputsScre
$LN9@InputsScre:
; Line 311
	mov	eax, DWORD PTR _hInputsScreens
	push	eax
	push	0
	push	16					; 00000010H
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
$LN8@InputsScre:
; Line 312
	jmp	SHORT $LN27@InputsScre
$LN7@InputsScre:
; Line 315
	cmp	DWORD PTR _input$[ebp], 4
	jge	SHORT $LN6@InputsScre
; Line 316
	mov	eax, DWORD PTR _hInputsScreens
	push	eax
	push	2
	push	15					; 0000000fH
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN5@InputsScre
$LN6@InputsScre:
; Line 317
	mov	eax, DWORD PTR _hInputsScreens
	push	eax
	push	1
	push	16					; 00000010H
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
$LN5@InputsScre:
; Line 318
	jmp	SHORT $LN27@InputsScre
$LN4@InputsScre:
; Line 321
	mov	eax, DWORD PTR _hInputsScreens
	push	eax
	push	3
	push	15					; 0000000fH
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 322
	jmp	SHORT $LN27@InputsScre
$LN3@InputsScre:
; Line 325
	mov	eax, DWORD PTR _hInputsScreens
	push	eax
	push	2
	push	16					; 00000010H
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 326
	jmp	SHORT $LN27@InputsScre
$LN2@InputsScre:
; Line 329
	mov	eax, DWORD PTR _hInputsScreens
	push	eax
	push	3
	push	16					; 00000010H
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
$LN27@InputsScre:
; Line 333
	jmp	SHORT $LN37@InputsScre
$LN1@InputsScre:
; Line 336
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN37@InputsScre:
; Line 338
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN40@InputsScre:
	DD	$LN21@InputsScre
	DD	$LN12@InputsScre
	DD	$LN10@InputsScre
	DD	$LN7@InputsScre
	DD	$LN4@InputsScre
	DD	$LN3@InputsScre
	DD	$LN2@InputsScre
_InputsScreensCallback ENDP
_TEXT	ENDS
PUBLIC	_DisplayAnalog
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayAnalog0
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_DisplayAnalog0 PROC					; COMDAT
; Line 341
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 342
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	0
	call	_DisplayAnalog
	add	esp, 8
; Line 343
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayAnalog0 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _DisplayAnalog1
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_DisplayAnalog1 PROC					; COMDAT
; Line 345
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 346
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	1
	call	_DisplayAnalog
	add	esp, 8
; Line 347
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayAnalog1 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _DisplayAnalog2
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_DisplayAnalog2 PROC					; COMDAT
; Line 349
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 350
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	2
	call	_DisplayAnalog
	add	esp, 8
; Line 351
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayAnalog2 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _DisplayAnalog3
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_DisplayAnalog3 PROC					; COMDAT
; Line 353
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 354
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	3
	call	_DisplayAnalog
	add	esp, 8
; Line 355
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayAnalog3 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_BUTTON_SetText:PROC
EXTRN	_sprintf:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SetAnalogEnableButtonText
_TEXT	SEGMENT
tv71 = -228						; size = 4
_scratch$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_hBtn$ = 8						; size = 4
_input$ = 12						; size = 4
_SetAnalogEnableButtonText PROC				; COMDAT
; Line 358
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 361
	mov	eax, DWORD PTR _input$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+147]
	test	ecx, ecx
	je	SHORT $LN3@SetAnalogE
	mov	DWORD PTR tv71[ebp], OFFSET $SG19677
	jmp	SHORT $LN4@SetAnalogE
$LN3@SetAnalogE:
	mov	DWORD PTR tv71[ebp], OFFSET $SG19678
$LN4@SetAnalogE:
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	mov	eax, DWORD PTR tv71[ebp]
	push	eax
	push	OFFSET $SG19679
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 362
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hBtn$[ebp]
	push	ecx
	call	_BUTTON_SetText
	add	esp, 8
; Line 363
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@SetAnalogE
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@SetAnalogE:
	DD	1
	DD	$LN6@SetAnalogE
$LN6@SetAnalogE:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN5@SetAnalogE
$LN5@SetAnalogE:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_SetAnalogEnableButtonText ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SetDigitalEnableButtonText
_TEXT	SEGMENT
tv72 = -228						; size = 4
_scratch$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_hBtn$ = 8						; size = 4
_input$ = 12						; size = 4
_SetDigitalEnableButtonText PROC			; COMDAT
; Line 366
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 369
	mov	eax, DWORD PTR _input$[ebp]
	imul	eax, 47					; 0000002fH
	movzx	ecx, BYTE PTR _vehicleData[eax+419]
	test	ecx, ecx
	je	SHORT $LN3@SetDigital
	mov	DWORD PTR tv72[ebp], OFFSET $SG19686
	jmp	SHORT $LN4@SetDigital
$LN3@SetDigital:
	mov	DWORD PTR tv72[ebp], OFFSET $SG19687
$LN4@SetDigital:
	mov	edx, DWORD PTR _input$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR tv72[ebp]
	push	eax
	push	OFFSET $SG19688
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 370
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hBtn$[ebp]
	push	ecx
	call	_BUTTON_SetText
	add	esp, 8
; Line 371
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@SetDigital
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@SetDigital:
	DD	1
	DD	$LN6@SetDigital
$LN6@SetDigital:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN5@SetDigital
$LN5@SetDigital:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_SetDigitalEnableButtonText ENDP
_TEXT	ENDS
PUBLIC	_AnalogPaint
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _Analog0Paint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_Analog0Paint PROC					; COMDAT
; Line 391
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 392
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	0
	call	_AnalogPaint
	add	esp, 8
; Line 393
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Analog0Paint ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _Analog1Paint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_Analog1Paint PROC					; COMDAT
; Line 395
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 396
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	1
	call	_AnalogPaint
	add	esp, 8
; Line 397
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Analog1Paint ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _Analog2Paint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_Analog2Paint PROC					; COMDAT
; Line 400
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 401
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	2
	call	_AnalogPaint
	add	esp, 8
; Line 402
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Analog2Paint ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _Analog3Paint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_Analog3Paint PROC					; COMDAT
; Line 405
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 406
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	3
	call	_AnalogPaint
	add	esp, 8
; Line 407
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Analog3Paint ENDP
_TEXT	ENDS
EXTRN	_bmGrayButton:BYTE
EXTRN	_bmRedButton:BYTE
EXTRN	_bmYellowButton:BYTE
EXTRN	_BUTTON_SetTextColor:PROC
EXTRN	_BUTTON_SetBitmap:PROC
EXTRN	_bmGreenButton:BYTE
EXTRN	_BUTTON_CreateEx:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayAnalog
_TEXT	SEGMENT
_hBtn$ = -8						; size = 4
_input$ = 8						; size = 1
_hParent$ = 12						; size = 4
_DisplayAnalog PROC					; COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 414
	push	2049					; 00000801H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	39					; 00000027H
	push	202					; 000000caH
	push	48					; 00000030H
	push	258					; 00000102H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hBtn$[ebp], eax
; Line 415
	push	OFFSET _bmGreenButton
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 416
	movzx	eax, BYTE PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hBtn$[ebp]
	push	ecx
	call	_SetAnalogEnableButtonText
	add	esp, 8
; Line 417
	push	0
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 419
	push	2050					; 00000802H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	39					; 00000027H
	push	202					; 000000caH
	push	91					; 0000005bH
	push	258					; 00000102H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hBtn$[ebp], eax
; Line 420
	push	OFFSET _bmYellowButton
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 421
	push	OFFSET $SG19722
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
; Line 422
	push	0
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 424
	push	2051					; 00000803H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	39					; 00000027H
	push	202					; 000000caH
	push	134					; 00000086H
	push	258					; 00000102H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hBtn$[ebp], eax
; Line 425
	push	OFFSET _bmRedButton
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 426
	push	OFFSET $SG19723
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
; Line 427
	push	0
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 429
	push	2052					; 00000804H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	39					; 00000027H
	push	202					; 000000caH
	push	177					; 000000b1H
	push	258					; 00000102H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hBtn$[ebp], eax
; Line 430
	push	OFFSET _bmGrayButton
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 431
	push	OFFSET $SG19724
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
; Line 432
	push	16777215				; 00ffffffH
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 434
	push	2053					; 00000805H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	39					; 00000027H
	push	202					; 000000caH
	push	220					; 000000dcH
	push	258					; 00000102H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hBtn$[ebp], eax
; Line 435
	push	OFFSET _bmGrayButton
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 436
	push	OFFSET $SG19725
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
; Line 437
	push	16777215				; 00ffffffH
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 438
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayAnalog ENDP
_TEXT	ENDS
PUBLIC	_GetAnalogInput
PUBLIC	__$ArrayPad$
EXTRN	_GUI_DispStringAt:PROC
EXTRN	_GUI_Font20_ASCII:BYTE
EXTRN	_GUI_Font32_ASCII:BYTE
EXTRN	_strcat:PROC
EXTRN	_strcpy:PROC
EXTRN	_GUI_DrawLine:PROC
EXTRN	_GUI_SetPenSize:PROC
EXTRN	_GUI_DispStringHCenterAt:PROC
EXTRN	_GUI_SetFont:PROC
EXTRN	_GUI_Font24_ASCII:BYTE
EXTRN	_GUI_FillRoundedRect:PROC
EXTRN	_GUI_SetColor:PROC
EXTRN	_GUI_DrawRoundedRect:PROC
EXTRN	_bmAnalog:BYTE
EXTRN	_bm3:BYTE
EXTRN	_bm2:BYTE
EXTRN	_bm1:BYTE
EXTRN	_bm0:BYTE
EXTRN	_GUI_DrawBitmap:PROC
EXTRN	_bmBackgroundWithPanel:BYTE
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _AnalogPaint
_TEXT	SEGMENT
tv306 = -252						; size = 4
tv68 = -252						; size = 4
_pBanner$ = -52						; size = 4
_scratch$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_input$ = 8						; size = 1
_hParent$ = 12						; size = 4
_AnalogPaint PROC					; COMDAT
; Line 441
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 445
	push	0
	push	0
	push	OFFSET _bmBackgroundWithPanel
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 446
	mov	al, BYTE PTR _input$[ebp]
	mov	BYTE PTR tv68[ebp], al
	cmp	BYTE PTR tv68[ebp], 1
	je	SHORT $LN17@AnalogPain
	cmp	BYTE PTR tv68[ebp], 2
	je	SHORT $LN16@AnalogPain
	cmp	BYTE PTR tv68[ebp], 3
	je	SHORT $LN15@AnalogPain
; Line 449
	mov	DWORD PTR _pBanner$[ebp], OFFSET _bm0
	jmp	SHORT $LN19@AnalogPain
$LN17@AnalogPain:
; Line 450
	mov	DWORD PTR _pBanner$[ebp], OFFSET _bm1
	jmp	SHORT $LN19@AnalogPain
$LN16@AnalogPain:
; Line 451
	mov	DWORD PTR _pBanner$[ebp], OFFSET _bm2
	jmp	SHORT $LN19@AnalogPain
$LN15@AnalogPain:
; Line 452
	mov	DWORD PTR _pBanner$[ebp], OFFSET _bm3
$LN19@AnalogPain:
; Line 454
	push	0
	push	60					; 0000003cH
	push	OFFSET _bmAnalog
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 455
	push	0
	push	284					; 0000011cH
	mov	eax, DWORD PTR _pBanner$[ebp]
	push	eax
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 458
	push	5
	push	255					; 000000ffH
	push	245					; 000000f5H
	push	51					; 00000033H
	push	27					; 0000001bH
	call	_GUI_DrawRoundedRect
	add	esp, 20					; 00000014H
; Line 459
	push	8421504					; 00808080H
	call	_GUI_SetColor
	add	esp, 4
; Line 460
	push	5
	push	255					; 000000ffH
	push	245					; 000000f5H
	push	51					; 00000033H
	push	27					; 0000001bH
	call	_GUI_FillRoundedRect
	add	esp, 20					; 00000014H
; Line 462
	push	5
	push	253					; 000000fdH
	push	243					; 000000f3H
	push	53					; 00000035H
	push	29					; 0000001dH
	call	_GUI_DrawRoundedRect
	add	esp, 20					; 00000014H
; Line 463
	push	0
	call	_GUI_SetColor
	add	esp, 4
; Line 464
	push	5
	push	253					; 000000fdH
	push	243					; 000000f3H
	push	53					; 00000035H
	push	29					; 0000001dH
	call	_GUI_FillRoundedRect
	add	esp, 20					; 00000014H
; Line 466
	push	229					; 000000e5H
	push	0
	push	0
	call	_GetNavigationArrow
	add	esp, 4
	push	eax
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 469
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+147]
	test	ecx, ecx
	jne	SHORT $LN14@AnalogPain
; Line 471
	push	OFFSET _GUI_Font24_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 472
	push	8421504					; 00808080H
	call	_GUI_SetColor
	add	esp, 4
; Line 473
	push	55					; 00000037H
	push	136					; 00000088H
	push	OFFSET $SG19742
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 474
	jmp	$LN1@AnalogPain
$LN14@AnalogPain:
; Line 478
	push	3
	call	_GUI_SetPenSize
	add	esp, 4
; Line 479
	push	8421504					; 00808080H
	call	_GUI_SetColor
	add	esp, 4
; Line 480
	push	81					; 00000051H
	push	230					; 000000e6H
	push	81					; 00000051H
	push	42					; 0000002aH
	call	_GUI_DrawLine
	add	esp, 16					; 00000010H
; Line 482
	push	2
	call	_GUI_SetPenSize
	add	esp, 4
; Line 483
	push	121					; 00000079H
	push	230					; 000000e6H
	push	121					; 00000079H
	push	42					; 0000002aH
	call	_GUI_DrawLine
	add	esp, 16					; 00000010H
; Line 484
	push	151					; 00000097H
	push	230					; 000000e6H
	push	151					; 00000097H
	push	42					; 0000002aH
	call	_GUI_DrawLine
	add	esp, 16					; 00000010H
; Line 488
	push	OFFSET _GUI_Font24_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 489
	push	255					; 000000ffH
	call	_GUI_SetColor
	add	esp, 4
; Line 496
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+148]
	test	ecx, ecx
	jne	SHORT $LN13@AnalogPain
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+149]
	test	ecx, ecx
	jne	SHORT $LN13@AnalogPain
; Line 497
	push	OFFSET $SG19744
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 498
	jmp	$LN10@AnalogPain
$LN13@AnalogPain:
; Line 499
	mov	BYTE PTR _scratch$[ebp], 0
; Line 500
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+148]
	cmp	ecx, 2
	jne	SHORT $LN11@AnalogPain
; Line 501
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+152]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG19747
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
$LN11@AnalogPain:
; Line 502
	push	OFFSET $SG19748
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
; Line 503
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+149]
	cmp	ecx, 1
	jne	SHORT $LN10@AnalogPain
; Line 504
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+156]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	push	OFFSET $SG19750
	lea	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H
$LN10@AnalogPain:
; Line 507
	push	55					; 00000037H
	push	136					; 00000088H
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 510
	push	OFFSET _GUI_Font32_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 511
	push	65280					; 0000ff00H
	call	_GUI_SetColor
	add	esp, 4
; Line 512
	movzx	eax, BYTE PTR _input$[ebp]
	push	eax
	push	0
	call	_GetAnalogInput
	fstp	QWORD PTR [esp]
	push	OFFSET $SG19751
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 513
	push	85					; 00000055H
	push	136					; 00000088H
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 516
	push	OFFSET _GUI_Font20_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 517
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 518
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+160]
	push	ecx
	push	OFFSET $SG19752
	lea	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 519
	push	127					; 0000007fH
	push	136					; 00000088H
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 522
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 523
	push	158					; 0000009eH
	push	42					; 0000002aH
	push	OFFSET $SG19753
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 524
	push	183					; 000000b7H
	push	42					; 0000002aH
	push	OFFSET $SG19754
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 525
	push	158					; 0000009eH
	push	143					; 0000008fH
	push	OFFSET $SG19755
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 526
	push	183					; 000000b7H
	push	143					; 0000008fH
	push	OFFSET $SG19756
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 529
	push	65280					; 0000ff00H
	call	_GUI_SetColor
	add	esp, 4
; Line 530
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+164]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG19757
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 531
	push	158					; 0000009eH
	push	89					; 00000059H
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 532
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+168]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG19758
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 533
	push	183					; 000000b7H
	push	89					; 00000059H
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 535
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+172]
	call	__ftol2_sse
	push	eax
	push	OFFSET $SG19760
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 536
	push	158					; 0000009eH
	push	193					; 000000c1H
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 538
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+176]
	call	__ftol2_sse
	push	eax
	push	OFFSET $SG19762
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 539
	push	183					; 000000b7H
	push	193					; 000000c1H
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 542
	push	OFFSET _GUI_Font20_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 543
	push	16744576				; 00ff8080H
	call	_GUI_SetColor
	add	esp, 4
; Line 544
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+147]
	mov	DWORD PTR tv306[ebp], ecx
	mov	edx, DWORD PTR tv306[ebp]
	sub	edx, 1
	mov	DWORD PTR tv306[ebp], edx
	cmp	DWORD PTR tv306[ebp], 50		; 00000032H
	ja	SHORT $LN8@AnalogPain
	mov	eax, DWORD PTR tv306[ebp]
	movzx	ecx, BYTE PTR $LN23@AnalogPain[eax]
	jmp	DWORD PTR $LN27@AnalogPain[ecx*4]
$LN7@AnalogPain:
; Line 546
	push	OFFSET $SG19768
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 547
	jmp	SHORT $LN8@AnalogPain
$LN6@AnalogPain:
; Line 549
	push	OFFSET $SG19770
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 550
	jmp	SHORT $LN8@AnalogPain
$LN5@AnalogPain:
; Line 552
	push	OFFSET $SG19772
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 553
	jmp	SHORT $LN8@AnalogPain
$LN4@AnalogPain:
; Line 555
	push	OFFSET $SG19774
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 556
	jmp	SHORT $LN8@AnalogPain
$LN3@AnalogPain:
; Line 558
	push	OFFSET $SG19776
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
$LN8@AnalogPain:
; Line 561
	push	OFFSET $SG19777
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
; Line 562
	push	208					; 000000d0H
	push	136					; 00000088H
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 565
	push	255					; 000000ffH
	call	_GUI_SetColor
	add	esp, 4
; Line 566
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+180]
	test	ecx, ecx
	je	SHORT $LN2@AnalogPain
; Line 567
	push	230					; 000000e6H
	push	52					; 00000034H
	push	OFFSET $SG19779
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
$LN2@AnalogPain:
; Line 568
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+181]
	test	ecx, ecx
	je	SHORT $LN1@AnalogPain
; Line 569
	push	230					; 000000e6H
	push	175					; 000000afH
	push	OFFSET $SG19781
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
$LN1@AnalogPain:
; Line 570
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@AnalogPain
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@AnalogPain:
	DD	1
	DD	$LN25@AnalogPain
$LN25@AnalogPain:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN24@AnalogPain
$LN24@AnalogPain:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
$LN27@AnalogPain:
	DD	$LN7@AnalogPain
	DD	$LN6@AnalogPain
	DD	$LN5@AnalogPain
	DD	$LN4@AnalogPain
	DD	$LN3@AnalogPain
	DD	$LN8@AnalogPain
$LN23@AnalogPain:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
_AnalogPaint ENDP
_TEXT	ENDS
PUBLIC	_DisplayDigital
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayDigital
_TEXT	SEGMENT
_hBtn$ = -8						; size = 4
_input$ = 8						; size = 1
_hParent$ = 12						; size = 4
_DisplayDigital PROC					; COMDAT
; Line 574
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 577
	push	2049					; 00000801H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	39					; 00000027H
	push	202					; 000000caH
	push	48					; 00000030H
	push	258					; 00000102H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hBtn$[ebp], eax
; Line 578
	push	OFFSET _bmGreenButton
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 579
	movzx	eax, BYTE PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hBtn$[ebp]
	push	ecx
	call	_SetDigitalEnableButtonText
	add	esp, 8
; Line 580
	push	0
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 582
	push	2051					; 00000803H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	39					; 00000027H
	push	202					; 000000caH
	push	91					; 0000005bH
	push	258					; 00000102H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hBtn$[ebp], eax
; Line 583
	push	OFFSET _bmRedButton
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 584
	push	OFFSET $SG19788
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
; Line 585
	push	0
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 587
	push	2052					; 00000804H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	39					; 00000027H
	push	202					; 000000caH
	push	134					; 00000086H
	push	258					; 00000102H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hBtn$[ebp], eax
; Line 588
	push	OFFSET _bmGrayButton
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 589
	push	OFFSET $SG19789
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
; Line 590
	push	16777215				; 00ffffffH
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 592
	push	2054					; 00000806H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	39					; 00000027H
	push	202					; 000000caH
	push	177					; 000000b1H
	push	258					; 00000102H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hBtn$[ebp], eax
; Line 593
	push	OFFSET _bmGrayButton
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 594
	push	OFFSET $SG19790
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
; Line 595
	push	16777215				; 00ffffffH
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 597
	push	2055					; 00000807H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	39					; 00000027H
	push	202					; 000000caH
	push	220					; 000000dcH
	push	258					; 00000102H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hBtn$[ebp], eax
; Line 598
	push	OFFSET _bmGrayButton
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 599
	push	OFFSET $SG19791
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
; Line 600
	push	16777215				; 00ffffffH
	push	0
	mov	eax, DWORD PTR _hBtn$[ebp]
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 601
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayDigital ENDP
_TEXT	ENDS
PUBLIC	_GetDigitalText
PUBLIC	__$ArrayPad$
PUBLIC	_DigitalPaint
EXTRN	_bmDigital:BYTE
EXTRN	_bm5:BYTE
EXTRN	_bm4:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DigitalPaint
_TEXT	SEGMENT
tv167 = -252						; size = 4
_pBanner$ = -52						; size = 4
_scratch$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_input$ = 8						; size = 1
_hParent$ = 12						; size = 4
_DigitalPaint PROC					; COMDAT
; Line 604
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 608
	push	0
	push	0
	push	OFFSET _bmBackgroundWithPanel
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 609
	movzx	eax, BYTE PTR _input$[ebp]
	test	eax, eax
	jne	SHORT $LN10@DigitalPai
; Line 610
	mov	DWORD PTR _pBanner$[ebp], OFFSET _bm4
	jmp	SHORT $LN9@DigitalPai
$LN10@DigitalPai:
; Line 611
	mov	DWORD PTR _pBanner$[ebp], OFFSET _bm5
$LN9@DigitalPai:
; Line 613
	push	1
	push	60					; 0000003cH
	push	OFFSET _bmDigital
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 614
	push	1
	push	284					; 0000011cH
	mov	eax, DWORD PTR _pBanner$[ebp]
	push	eax
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 617
	push	5
	push	255					; 000000ffH
	push	245					; 000000f5H
	push	51					; 00000033H
	push	27					; 0000001bH
	call	_GUI_DrawRoundedRect
	add	esp, 20					; 00000014H
; Line 618
	push	8421504					; 00808080H
	call	_GUI_SetColor
	add	esp, 4
; Line 619
	push	5
	push	255					; 000000ffH
	push	245					; 000000f5H
	push	51					; 00000033H
	push	27					; 0000001bH
	call	_GUI_FillRoundedRect
	add	esp, 20					; 00000014H
; Line 621
	push	5
	push	253					; 000000fdH
	push	243					; 000000f3H
	push	53					; 00000035H
	push	29					; 0000001dH
	call	_GUI_DrawRoundedRect
	add	esp, 20					; 00000014H
; Line 622
	push	0
	call	_GUI_SetColor
	add	esp, 4
; Line 623
	push	5
	push	253					; 000000fdH
	push	243					; 000000f3H
	push	53					; 00000035H
	push	29					; 0000001dH
	call	_GUI_FillRoundedRect
	add	esp, 20					; 00000014H
; Line 625
	push	229					; 000000e5H
	push	0
	push	0
	call	_GetNavigationArrow
	add	esp, 4
	push	eax
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 628
	movzx	eax, BYTE PTR _input$[ebp]
	imul	eax, 47					; 0000002fH
	movzx	ecx, BYTE PTR _vehicleData[eax+419]
	test	ecx, ecx
	jne	SHORT $LN8@DigitalPai
; Line 630
	push	OFFSET _GUI_Font24_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 631
	push	8421504					; 00808080H
	call	_GUI_SetColor
	add	esp, 4
; Line 632
	push	55					; 00000037H
	push	136					; 00000088H
	push	OFFSET $SG19802
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 633
	jmp	$LN11@DigitalPai
$LN8@DigitalPai:
; Line 637
	push	3
	call	_GUI_SetPenSize
	add	esp, 4
; Line 638
	push	8421504					; 00808080H
	call	_GUI_SetColor
	add	esp, 4
; Line 639
	push	81					; 00000051H
	push	230					; 000000e6H
	push	81					; 00000051H
	push	42					; 0000002aH
	call	_GUI_DrawLine
	add	esp, 16					; 00000010H
; Line 641
	push	2
	call	_GUI_SetPenSize
	add	esp, 4
; Line 642
	push	121					; 00000079H
	push	230					; 000000e6H
	push	121					; 00000079H
	push	42					; 0000002aH
	call	_GUI_DrawLine
	add	esp, 16					; 00000010H
; Line 643
	push	151					; 00000097H
	push	230					; 000000e6H
	push	151					; 00000097H
	push	42					; 0000002aH
	call	_GUI_DrawLine
	add	esp, 16					; 00000010H
; Line 647
	push	OFFSET _GUI_Font24_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 648
	push	255					; 000000ffH
	call	_GUI_SetColor
	add	esp, 4
; Line 651
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	mov	cl, BYTE PTR _vehicleData[eax+420]
	mov	BYTE PTR tv167[ebp], cl
	cmp	BYTE PTR tv167[ebp], -1
	je	SHORT $LN5@DigitalPai
	cmp	BYTE PTR tv167[ebp], 0
	je	SHORT $LN3@DigitalPai
	cmp	BYTE PTR tv167[ebp], 1
	je	SHORT $LN4@DigitalPai
	jmp	SHORT $LN6@DigitalPai
$LN5@DigitalPai:
; Line 654
	push	OFFSET $SG19808
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 655
	jmp	SHORT $LN6@DigitalPai
$LN4@DigitalPai:
; Line 657
	push	OFFSET $SG19810
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 658
	jmp	SHORT $LN6@DigitalPai
$LN3@DigitalPai:
; Line 660
	push	OFFSET $SG19812
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
$LN6@DigitalPai:
; Line 664
	push	55					; 00000037H
	push	136					; 00000088H
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 667
	push	OFFSET _GUI_Font32_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 668
	push	65280					; 0000ff00H
	call	_GUI_SetColor
	add	esp, 4
; Line 669
	movzx	eax, BYTE PTR _input$[ebp]
	push	eax
	push	0
	call	_GetDigitalText
	add	esp, 8
	push	eax
	push	OFFSET $SG19813
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 670
	push	85					; 00000055H
	push	136					; 00000088H
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 673
	push	OFFSET _GUI_Font20_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 674
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 675
	push	158					; 0000009eH
	push	42					; 0000002aH
	push	OFFSET $SG19814
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 676
	push	183					; 000000b7H
	push	42					; 0000002aH
	push	OFFSET $SG19815
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 679
	push	65280					; 0000ff00H
	call	_GUI_SetColor
	add	esp, 4
; Line 680
	push	158					; 0000009eH
	push	193					; 000000c1H
	movzx	eax, BYTE PTR _input$[ebp]
	imul	eax, 47					; 0000002fH
	add	eax, OFFSET _vehicleData+393
	push	eax
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 681
	push	183					; 000000b7H
	push	193					; 000000c1H
	movzx	eax, BYTE PTR _input$[ebp]
	imul	eax, 47					; 0000002fH
	add	eax, OFFSET _vehicleData+406
	push	eax
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 684
	push	255					; 000000ffH
	call	_GUI_SetColor
	add	esp, 4
; Line 685
	movzx	eax, BYTE PTR _input$[ebp]
	imul	eax, 47					; 0000002fH
	movzx	ecx, BYTE PTR _vehicleData[eax+421]
	test	ecx, ecx
	je	SHORT $LN2@DigitalPai
; Line 686
	push	230					; 000000e6H
	push	52					; 00000034H
	push	OFFSET $SG19817
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
$LN2@DigitalPai:
; Line 687
	movzx	eax, BYTE PTR _input$[ebp]
	imul	eax, 47					; 0000002fH
	movzx	ecx, BYTE PTR _vehicleData[eax+422]
	test	ecx, ecx
	je	SHORT $LN11@DigitalPai
; Line 688
	push	230					; 000000e6H
	push	175					; 000000afH
	push	OFFSET $SG19819
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
$LN11@DigitalPai:
; Line 689
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@DigitalPai
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@DigitalPai:
	DD	1
	DD	$LN14@DigitalPai
$LN14@DigitalPai:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN13@DigitalPai
$LN13@DigitalPai:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_DigitalPaint ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _DisplayDigital4
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_DisplayDigital4 PROC					; COMDAT
; Line 721
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 722
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	0
	call	_DisplayDigital
	add	esp, 8
; Line 723
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayDigital4 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _DisplayDigital5
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_DisplayDigital5 PROC					; COMDAT
; Line 726
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 727
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	1
	call	_DisplayDigital
	add	esp, 8
; Line 728
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayDigital5 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _Digital4Paint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_Digital4Paint PROC					; COMDAT
; Line 744
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 745
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	0
	call	_DigitalPaint
	add	esp, 8
; Line 746
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Digital4Paint ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _Digital5Paint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_Digital5Paint PROC					; COMDAT
; Line 750
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 751
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	1
	call	_DigitalPaint
	add	esp, 8
; Line 752
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Digital5Paint ENDP
_TEXT	ENDS
EXTRN	_bmleftarrow:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetNavigationArrow
_TEXT	SEGMENT
_screen$ = 8						; size = 4
_GetNavigationArrow PROC				; COMDAT
; Line 756
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 757
	mov	eax, OFFSET _bmleftarrow
; Line 758
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GetNavigationArrow ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _InputsIgnoreNextKeyRelease
_TEXT	SEGMENT
_InputsIgnoreNextKeyRelease PROC			; COMDAT
; Line 761
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 763
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_InputsIgnoreNextKeyRelease ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ScreenIDToInput
_TEXT	SEGMENT
tv64 = -196						; size = 4
_input$ = 8						; size = 4
_ScreenIDToInput PROC					; COMDAT
; Line 766
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 767
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 5
	ja	SHORT $LN1@ScreenIDTo
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN12@ScreenIDTo[ecx*4]
$LN7@ScreenIDTo:
; Line 769
	xor	eax, eax
	jmp	SHORT $LN10@ScreenIDTo
$LN6@ScreenIDTo:
; Line 770
	mov	eax, 1
	jmp	SHORT $LN10@ScreenIDTo
$LN5@ScreenIDTo:
; Line 771
	mov	eax, 2
	jmp	SHORT $LN10@ScreenIDTo
$LN4@ScreenIDTo:
; Line 772
	mov	eax, 3
	jmp	SHORT $LN10@ScreenIDTo
$LN3@ScreenIDTo:
; Line 773
	mov	eax, 4
	jmp	SHORT $LN10@ScreenIDTo
$LN2@ScreenIDTo:
; Line 774
	mov	eax, 5
	jmp	SHORT $LN10@ScreenIDTo
$LN1@ScreenIDTo:
; Line 775
	xor	eax, eax
$LN10@ScreenIDTo:
; Line 777
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@ScreenIDTo:
	DD	$LN7@ScreenIDTo
	DD	$LN6@ScreenIDTo
	DD	$LN5@ScreenIDTo
	DD	$LN4@ScreenIDTo
	DD	$LN3@ScreenIDTo
	DD	$LN2@ScreenIDTo
_ScreenIDToInput ENDP
_TEXT	ENDS
PUBLIC	__real@00000000
EXTRN	_GetValue:PROC
EXTRN	_GetRawValue:PROC
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _GetAnalogInput
_TEXT	SEGMENT
tv88 = -324						; size = 4
tv82 = -324						; size = 4
tv76 = -324						; size = 4
tv70 = -324						; size = 4
tv64 = -324						; size = 4
$T20020 = -316						; size = 8
$T20021 = -300						; size = 8
$T20024 = -284						; size = 8
$T20025 = -268						; size = 8
$T20028 = -252						; size = 8
$T20029 = -236						; size = 8
$T20032 = -220						; size = 8
$T20033 = -204						; size = 8
_type$ = 8						; size = 4
_input$ = 12						; size = 4
_GetAnalogInput PROC					; COMDAT
; Line 780
	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 781
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 3
	ja	$LN1@GetAnalogI
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN18@GetAnalogI[ecx*4]
$LN5@GetAnalogI:
; Line 783
	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN10@GetAnalogI
	push	54					; 00000036H
	call	_GetRawValue
	add	esp, 4
	mov	DWORD PTR $T20020[ebp], eax
	mov	DWORD PTR $T20020[ebp+4], edx
	fld	DWORD PTR $T20020[ebp]
	fstp	DWORD PTR tv70[ebp]
	jmp	SHORT $LN11@GetAnalogI
$LN10@GetAnalogI:
	push	54					; 00000036H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T20021[ebp], eax
	mov	DWORD PTR $T20021[ebp+4], edx
	fld	DWORD PTR $T20021[ebp]
	fstp	DWORD PTR tv70[ebp]
$LN11@GetAnalogI:
	fld	DWORD PTR tv70[ebp]
	jmp	$LN6@GetAnalogI
$LN4@GetAnalogI:
; Line 784
	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN12@GetAnalogI
	push	55					; 00000037H
	call	_GetRawValue
	add	esp, 4
	mov	DWORD PTR $T20024[ebp], eax
	mov	DWORD PTR $T20024[ebp+4], edx
	fld	DWORD PTR $T20024[ebp]
	fstp	DWORD PTR tv76[ebp]
	jmp	SHORT $LN13@GetAnalogI
$LN12@GetAnalogI:
	push	55					; 00000037H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T20025[ebp], eax
	mov	DWORD PTR $T20025[ebp+4], edx
	fld	DWORD PTR $T20025[ebp]
	fstp	DWORD PTR tv76[ebp]
$LN13@GetAnalogI:
	fld	DWORD PTR tv76[ebp]
	jmp	$LN6@GetAnalogI
$LN3@GetAnalogI:
; Line 785
	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN14@GetAnalogI
	push	56					; 00000038H
	call	_GetRawValue
	add	esp, 4
	mov	DWORD PTR $T20028[ebp], eax
	mov	DWORD PTR $T20028[ebp+4], edx
	fld	DWORD PTR $T20028[ebp]
	fstp	DWORD PTR tv82[ebp]
	jmp	SHORT $LN15@GetAnalogI
$LN14@GetAnalogI:
	push	56					; 00000038H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T20029[ebp], eax
	mov	DWORD PTR $T20029[ebp+4], edx
	fld	DWORD PTR $T20029[ebp]
	fstp	DWORD PTR tv82[ebp]
$LN15@GetAnalogI:
	fld	DWORD PTR tv82[ebp]
	jmp	SHORT $LN6@GetAnalogI
$LN2@GetAnalogI:
; Line 786
	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN16@GetAnalogI
	push	57					; 00000039H
	call	_GetRawValue
	add	esp, 4
	mov	DWORD PTR $T20032[ebp], eax
	mov	DWORD PTR $T20032[ebp+4], edx
	fld	DWORD PTR $T20032[ebp]
	fstp	DWORD PTR tv88[ebp]
	jmp	SHORT $LN17@GetAnalogI
$LN16@GetAnalogI:
	push	57					; 00000039H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T20033[ebp], eax
	mov	DWORD PTR $T20033[ebp+4], edx
	fld	DWORD PTR $T20033[ebp]
	fstp	DWORD PTR tv88[ebp]
$LN17@GetAnalogI:
	fld	DWORD PTR tv88[ebp]
	jmp	SHORT $LN6@GetAnalogI
$LN1@GetAnalogI:
; Line 787
	fldz
$LN6@GetAnalogI:
; Line 789
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@GetAnalogI:
	DD	$LN5@GetAnalogI
	DD	$LN4@GetAnalogI
	DD	$LN3@GetAnalogI
	DD	$LN2@GetAnalogI
_GetAnalogInput ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _GetDigitalText
_TEXT	SEGMENT
tv80 = -240						; size = 4
tv75 = -240						; size = 4
$T20041 = -232						; size = 8
$T20042 = -216						; size = 8
_value$ = -5						; size = 1
_type$ = 8						; size = 4
_input$ = 12						; size = 4
_GetDigitalText PROC					; COMDAT
; Line 792
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 795
	cmp	DWORD PTR _input$[ebp], 0
	jne	SHORT $LN4@GetDigital
; Line 796
	push	58					; 0000003aH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T20041[ebp], eax
	mov	DWORD PTR $T20041[ebp+4], edx
	mov	al, BYTE PTR $T20041[ebp]
	mov	BYTE PTR _value$[ebp], al
	jmp	SHORT $LN3@GetDigital
$LN4@GetDigital:
; Line 797
	push	59					; 0000003bH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T20042[ebp], eax
	mov	DWORD PTR $T20042[ebp+4], edx
	mov	al, BYTE PTR $T20042[ebp]
	mov	BYTE PTR _value$[ebp], al
$LN3@GetDigital:
; Line 799
	movzx	eax, BYTE PTR _value$[ebp]
	test	eax, eax
	je	SHORT $LN2@GetDigital
; Line 800
	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN7@GetDigital
	mov	DWORD PTR tv75[ebp], OFFSET $SG19877
	jmp	SHORT $LN8@GetDigital
$LN7@GetDigital:
	mov	eax, DWORD PTR _input$[ebp]
	imul	eax, 47					; 0000002fH
	add	eax, OFFSET _vehicleData+393
	mov	DWORD PTR tv75[ebp], eax
$LN8@GetDigital:
	mov	eax, DWORD PTR tv75[ebp]
	jmp	SHORT $LN5@GetDigital
	jmp	SHORT $LN5@GetDigital
$LN2@GetDigital:
; Line 801
	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN9@GetDigital
	mov	DWORD PTR tv80[ebp], OFFSET $SG19879
	jmp	SHORT $LN10@GetDigital
$LN9@GetDigital:
	mov	eax, DWORD PTR _input$[ebp]
	imul	eax, 47					; 0000002fH
	add	eax, OFFSET _vehicleData+406
	mov	DWORD PTR tv80[ebp], eax
$LN10@GetDigital:
	mov	eax, DWORD PTR tv80[ebp]
$LN5@GetDigital:
; Line 802
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetDigitalText ENDP
_TEXT	ENDS
PUBLIC	_GetAlarmTriggerText
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetAlarmTriggerText
_TEXT	SEGMENT
tv76 = -200						; size = 4
tv75 = -196						; size = 4
_input$ = 8						; size = 1
_upperLower$ = 12					; size = 4
_GetAlarmTriggerText PROC				; COMDAT
; Line 805
	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 806
	cmp	DWORD PTR _upperLower$[ebp], 1
	jne	SHORT $LN9@GetAlarmTr
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+149]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN10@GetAlarmTr
$LN9@GetAlarmTr:
	movzx	edx, BYTE PTR _input$[ebp]
	shl	edx, 6
	movzx	eax, BYTE PTR _vehicleData[edx+148]
	mov	DWORD PTR tv75[ebp], eax
$LN10@GetAlarmTr:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR tv76[ebp], ecx
	cmp	DWORD PTR tv76[ebp], 1
	je	SHORT $LN4@GetAlarmTr
	cmp	DWORD PTR tv76[ebp], 2
	je	SHORT $LN3@GetAlarmTr
	cmp	DWORD PTR tv76[ebp], 3
	je	SHORT $LN2@GetAlarmTr
	jmp	SHORT $LN1@GetAlarmTr
$LN4@GetAlarmTr:
; Line 808
	mov	eax, OFFSET $SG19890
	jmp	SHORT $LN7@GetAlarmTr
$LN3@GetAlarmTr:
; Line 809
	mov	eax, OFFSET $SG19892
	jmp	SHORT $LN7@GetAlarmTr
$LN2@GetAlarmTr:
; Line 810
	mov	eax, OFFSET $SG19894
	jmp	SHORT $LN7@GetAlarmTr
$LN1@GetAlarmTr:
; Line 812
	mov	eax, OFFSET $SG19896
$LN7@GetAlarmTr:
; Line 814
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GetAlarmTriggerText ENDP
_TEXT	ENDS
PUBLIC	_InputCleanUpKeyboards
EXTRN	_DeleteAnalogKeyboards:PROC
EXTRN	_DeleteDigitalKeyboards:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _InputCleanUpKeyboards
_TEXT	SEGMENT
_InputCleanUpKeyboards PROC				; COMDAT
; Line 817
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 818
	call	_DeleteDigitalKeyboards
; Line 819
	call	_DeleteAnalogKeyboards
; Line 820
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_InputCleanUpKeyboards ENDP
_TEXT	ENDS
END
