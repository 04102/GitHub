; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Widget\GUI_ARRAY_InsertItem.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG10365 DB	'GUI_ARRAY_InsertBlankItem: Illegal index', 00H
	ORG $+3
$SG10370 DB	'GUI_ARRAY_InsertBlankItem: Failed to alloc buffer', 00H
_DATA	ENDS
PUBLIC	_GUI_ARRAY_InsertBlankItem
EXTRN	_GUI_ALLOC_Free:PROC
EXTRN	_memcpy:PROC
EXTRN	_GUI_ALLOC_AllocZero:PROC
EXTRN	_GUI_ErrorOut:PROC
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_GUI_ALLOC_LockH:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\widget\gui_array_insertitem.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_ARRAY_InsertBlankItem
_TEXT	SEGMENT
_pNewBuffer$10373 = -68					; size = 4
_pOldBuffer$10372 = -56					; size = 4
_hNewBuffer$10367 = -44					; size = 4
_haHandle$ = -32					; size = 4
_NumItems$ = -20					; size = 2
_pThis$ = -8						; size = 4
_hArray$ = 8						; size = 4
_Index$ = 12						; size = 4
_GUI_ARRAY_InsertBlankItem PROC				; COMDAT
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 61
	cmp	DWORD PTR _hArray$[ebp], 0
	je	$LN5@GUI_ARRAY_
; Line 62
	mov	eax, DWORD PTR _hArray$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pThis$[ebp], eax
; Line 63
	mov	eax, DWORD PTR _pThis$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _NumItems$[ebp], cx
; Line 64
	mov	eax, DWORD PTR _pThis$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _haHandle$[ebp], ecx
; Line 65
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pThis$[ebp], 0
; Line 66
	movzx	eax, WORD PTR _NumItems$[ebp]
	cmp	DWORD PTR _Index$[ebp], eax
	jb	SHORT $LN4@GUI_ARRAY_
; Line 67
	push	OFFSET $SG10365
	call	_GUI_ErrorOut
	add	esp, 4
; Line 68
	jmp	$LN5@GUI_ARRAY_
$LN4@GUI_ARRAY_:
; Line 70
	movzx	eax, WORD PTR _NumItems$[ebp]
	lea	ecx, DWORD PTR [eax*4+4]
	push	ecx
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hNewBuffer$10367[ebp], eax
; Line 71
	cmp	DWORD PTR _hNewBuffer$10367[ebp], 0
	jne	SHORT $LN2@GUI_ARRAY_
; Line 72
	push	OFFSET $SG10370
	call	_GUI_ErrorOut
	add	esp, 4
; Line 73
	jmp	$LN5@GUI_ARRAY_
$LN2@GUI_ARRAY_:
; Line 76
	mov	eax, DWORD PTR _hNewBuffer$10367[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pNewBuffer$10373[ebp], eax
; Line 77
	mov	eax, DWORD PTR _haHandle$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pOldBuffer$10372[ebp], eax
; Line 78
	mov	eax, DWORD PTR _Index$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _pOldBuffer$10372[ebp]
	push	ecx
	mov	edx, DWORD PTR _pNewBuffer$10373[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 79
	movzx	eax, WORD PTR _NumItems$[ebp]
	sub	eax, DWORD PTR _Index$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _Index$[ebp]
	mov	edx, DWORD PTR _pOldBuffer$10372[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _Index$[ebp]
	mov	edx, DWORD PTR _pNewBuffer$10373[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 80
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pNewBuffer$10373[ebp], 0
; Line 81
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pOldBuffer$10372[ebp], 0
; Line 82
	mov	eax, DWORD PTR _haHandle$[ebp]
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
; Line 83
	mov	eax, DWORD PTR _hArray$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pThis$[ebp], eax
; Line 84
	mov	eax, DWORD PTR _pThis$[ebp]
	mov	ecx, DWORD PTR _hNewBuffer$10367[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 85
	mov	eax, DWORD PTR _pThis$[ebp]
	mov	cx, WORD PTR [eax]
	add	cx, 1
	mov	edx, DWORD PTR _pThis$[ebp]
	mov	WORD PTR [edx], cx
; Line 86
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pThis$[ebp], 0
; Line 87
	mov	al, 1
	jmp	SHORT $LN6@GUI_ARRAY_
$LN5@GUI_ARRAY_:
; Line 91
	xor	al, al
$LN6@GUI_ARRAY_:
; Line 92
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ARRAY_InsertBlankItem ENDP
_TEXT	ENDS
PUBLIC	_GUI_ARRAY_InsertItem
EXTRN	_GUI_ARRAY_SetItem:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ARRAY_InsertItem
_TEXT	SEGMENT
_hNewBuffer$ = -8					; size = 4
_hArray$ = 8						; size = 4
_Index$ = 12						; size = 4
_Len$ = 16						; size = 4
_GUI_ARRAY_InsertItem PROC				; COMDAT
; Line 116
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 117
	mov	DWORD PTR _hNewBuffer$[ebp], 0
; Line 118
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hArray$[ebp]
	push	ecx
	call	_GUI_ARRAY_InsertBlankItem
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@GUI_ARRAY_@2
; Line 119
	mov	eax, DWORD PTR _Len$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _Index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hArray$[ebp]
	push	edx
	call	_GUI_ARRAY_SetItem
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hNewBuffer$[ebp], eax
$LN1@GUI_ARRAY_@2:
; Line 121
	mov	eax, DWORD PTR _hNewBuffer$[ebp]
; Line 122
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ARRAY_InsertItem ENDP
_TEXT	ENDS
END
