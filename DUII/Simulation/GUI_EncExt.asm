; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_EncExt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUIPROP_EXT__DispLine
PUBLIC	_GUIPROP_EXT__ClearLine
PUBLIC	_GUI_ENC_APIList_EXT
_DATA	SEGMENT
COMM	_GUI__CharHasTrans:BYTE
_DATA	ENDS
CONST	SEGMENT
_GUI_ENC_APIList_EXT DD 00H
	DD	00H
	DD	FLAT:_GUIPROP_EXT__DispLine
CONST	ENDS
_DATA	SEGMENT
__fpClearLine DD FLAT:_GUIPROP_EXT__ClearLine
_DATA	ENDS
EXTRN	_LCD_FillRect:PROC
EXTRN	_GUI__GetOverlap:PROC
EXTRN	_GUIPROP_EXT__FindChar:PROC
EXTRN	_GUI_UC__GetCharCodeInc:PROC
EXTRN	_GUI_SetColor:PROC
EXTRN	_GUI_GetBkColor:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	_GUI_GetColor:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_UninitUse:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_encext.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUIPROP_EXT__ClearLine
_TEXT	SEGMENT
tv70 = -316						; size = 4
$T8396 = -305						; size = 1
_pCharInfo$ = -104					; size = 4
_pPropExt$ = -92					; size = 4
_OldColor$ = -80					; size = 4
_Diff$ = -68						; size = 4
_y0$ = -56						; size = 4
_x0$ = -44						; size = 4
_yDist$ = -32						; size = 4
_xDist$ = -20						; size = 4
_Char$ = -8						; size = 2
_s$ = 8							; size = 4
_Len$ = 12						; size = 4
_GUIPROP_EXT__ClearLine PROC				; COMDAT
; Line 45
	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T8396[ebp], 0
; Line 52
	call	_GUI_GetColor
	mov	DWORD PTR _OldColor$[ebp], eax
; Line 53
	movsx	eax, WORD PTR _GUI_Context+42
	and	eax, 4
	je	SHORT $LN7@GUIPROP_EX
	call	_GUI_GetColor
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN8@GUIPROP_EX
$LN7@GUIPROP_EX:
	call	_GUI_GetBkColor
	mov	DWORD PTR tv70[ebp], eax
$LN8@GUIPROP_EX:
	mov	ecx, DWORD PTR tv70[ebp]
	push	ecx
	call	_GUI_SetColor
	add	esp, 4
; Line 54
	mov	DWORD PTR _xDist$[ebp], 0
; Line 55
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+25]
	mov	edx, DWORD PTR _GUI_Context+28
	movzx	eax, BYTE PTR [edx+27]
	imul	ecx, eax
	mov	DWORD PTR _yDist$[ebp], ecx
; Line 56
	movsx	eax, WORD PTR _GUI_Context+34
	mov	DWORD PTR _x0$[ebp], eax
; Line 57
	movsx	eax, WORD PTR _GUI_Context+36
	mov	DWORD PTR _y0$[ebp], eax
$LN4@GUIPROP_EX:
; Line 58
	mov	eax, DWORD PTR _Len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Len$[ebp], eax
	js	$LN3@GUIPROP_EX
; Line 59
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_GUI_UC__GetCharCodeInc
	add	esp, 4
	mov	BYTE PTR $T8396[ebp], 1
	mov	WORD PTR _Char$[ebp], ax
; Line 60
	cmp	BYTE PTR $T8396[ebp], 0
	jne	SHORT $LN9@GUIPROP_EX
	push	OFFSET $LN10@GUIPROP_EX
	call	__RTC_UninitUse
	add	esp, 4
$LN9@GUIPROP_EX:
	movzx	eax, WORD PTR _Char$[ebp]
	push	eax
	mov	ecx, DWORD PTR _GUI_Context+28
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_GUIPROP_EXT__FindChar
	add	esp, 8
	mov	DWORD PTR _pPropExt$[ebp], eax
; Line 61
	cmp	DWORD PTR _pPropExt$[ebp], 0
	je	SHORT $LN2@GUIPROP_EX
; Line 62
	cmp	BYTE PTR $T8396[ebp], 0
	jne	SHORT $LN11@GUIPROP_EX
	push	OFFSET $LN10@GUIPROP_EX
	call	__RTC_UninitUse
	add	esp, 4
$LN11@GUIPROP_EX:
	movzx	eax, WORD PTR _Char$[ebp]
	mov	ecx, DWORD PTR _pPropExt$[ebp]
	movzx	edx, WORD PTR [ecx]
	sub	eax, edx
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _pPropExt$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _pCharInfo$[ebp], eax
; Line 63
	mov	eax, DWORD PTR _pCharInfo$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	mov	edx, DWORD PTR _pCharInfo$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	add	ecx, eax
	mov	edx, DWORD PTR _GUI_Context+28
	movzx	eax, BYTE PTR [edx+26]
	imul	ecx, eax
	mov	DWORD PTR _Diff$[ebp], ecx
; Line 64
	cmp	DWORD PTR _Diff$[ebp], 0
	jle	SHORT $LN2@GUIPROP_EX
; Line 65
	mov	eax, DWORD PTR _xDist$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _xDist$[ebp], eax
$LN2@GUIPROP_EX:
; Line 68
	jmp	$LN4@GUIPROP_EX
$LN3@GUIPROP_EX:
; Line 69
	cmp	BYTE PTR $T8396[ebp], 0
	jne	SHORT $LN12@GUIPROP_EX
	push	OFFSET $LN10@GUIPROP_EX
	call	__RTC_UninitUse
	add	esp, 4
$LN12@GUIPROP_EX:
	movzx	eax, WORD PTR _Char$[ebp]
	push	eax
	call	_GUI__GetOverlap
	add	esp, 4
	add	eax, DWORD PTR _xDist$[ebp]
	mov	DWORD PTR _xDist$[ebp], eax
; Line 70
	mov	eax, DWORD PTR _yDist$[ebp]
	mov	ecx, DWORD PTR _y0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _xDist$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
; Line 71
	mov	eax, DWORD PTR _OldColor$[ebp]
	push	eax
	call	_GUI_SetColor
	add	esp, 4
; Line 75
	mov	BYTE PTR _GUI__CharHasTrans, 1
; Line 76
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@GUIPROP_EX:
$LN10@GUIPROP_EX:
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	0
_GUIPROP_EXT__ClearLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _GUIPROP_EXT__DispLine
_TEXT	SEGMENT
_OldMode$ = -20						; size = 4
_Char$ = -8						; size = 2
_s$ = 8							; size = 4
_Len$ = 12						; size = 4
_GUIPROP_EXT__DispLine PROC				; COMDAT
; Line 96
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 100
	movsx	eax, WORD PTR _GUI_Context+42
	mov	DWORD PTR _OldMode$[ebp], eax
; Line 104
	movsx	eax, WORD PTR _GUI_Context+42
	and	eax, 3
	jne	SHORT $LN2@GUIPROP_EX@2
; Line 105
	mov	esi, esp
	mov	eax, DWORD PTR _Len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	DWORD PTR __fpClearLine
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@GUIPROP_EX@2:
; Line 107
	mov	eax, DWORD PTR _Len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Len$[ebp], eax
	js	SHORT $LN1@GUIPROP_EX@2
; Line 108
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_GUI_UC__GetCharCodeInc
	add	esp, 4
	mov	WORD PTR _Char$[ebp], ax
; Line 109
	mov	esi, esp
	movzx	eax, WORD PTR _Char$[ebp]
	push	eax
	mov	ecx, DWORD PTR _GUI_Context+28
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 110
	jmp	SHORT $LN2@GUIPROP_EX@2
$LN1@GUIPROP_EX@2:
; Line 114
	mov	BYTE PTR _GUI__CharHasTrans, 0
; Line 115
	mov	ax, WORD PTR _OldMode$[ebp]
	mov	WORD PTR _GUI_Context+42, ax
; Line 116
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUIPROP_EXT__DispLine ENDP
_TEXT	ENDS
PUBLIC	_GUIPROP_EXT__SetfpClearLine
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUIPROP_EXT__SetfpClearLine
_TEXT	SEGMENT
_fpClearLine$ = 8					; size = 4
_GUIPROP_EXT__SetfpClearLine PROC			; COMDAT
; Line 122
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 123
	mov	eax, DWORD PTR _fpClearLine$[ebp]
	mov	DWORD PTR __fpClearLine, eax
; Line 124
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUIPROP_EXT__SetfpClearLine ENDP
_TEXT	ENDS
END
