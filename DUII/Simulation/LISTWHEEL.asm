; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Widget\LISTWHEEL.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_LISTWHEEL_DefaultProps
EXTRN	_GUI_Font13_1:BYTE
_DATA	SEGMENT
_LISTWHEEL_DefaultProps DD FLAT:_GUI_Font13_1
	DD	0ffffffH
	DD	0ffffffH
	DD	00H
	DD	0ff0000H
	DW	00H
	ORG $+2
$SG11640 DB	'LISTWHEEL.c: Wrong handle type or Object not init''ed', 00H
_DATA	ENDS
PUBLIC	_LISTWHEEL_LockH
EXTRN	_GUI_ErrorOut:PROC
EXTRN	_GUI_ALLOC_LockH:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\widget\listwheel.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _LISTWHEEL_LockH
_TEXT	SEGMENT
_p$ = -8						; size = 4
_h$ = 8							; size = 4
_LISTWHEEL_LockH PROC					; COMDAT
; Line 909
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 911
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 912
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@LISTWHEEL_
; Line 913
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+92], 1279873879		; 4c495357H
	je	SHORT $LN2@LISTWHEEL_
; Line 914
	push	OFFSET $SG11640
	call	_GUI_ErrorOut
	add	esp, 4
; Line 915
	xor	eax, eax
	jmp	SHORT $LN3@LISTWHEEL_
$LN2@LISTWHEEL_:
; Line 918
	mov	eax, DWORD PTR _p$[ebp]
$LN3@LISTWHEEL_:
; Line 919
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_LockH ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_Callback
EXTRN	_WM_DefaultProc:PROC
EXTRN	_WIDGET_HandleActive:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_Callback
_TEXT	SEGMENT
tv69 = -208						; size = 4
_hObj$ = -8						; size = 4
_pMsg$ = 8						; size = 4
_LISTWHEEL_Callback PROC				; COMDAT
; Line 932
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 935
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _hObj$[ebp], ecx
; Line 939
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WIDGET_HandleActive
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@LISTWHEEL_@2
; Line 940
	jmp	$LN9@LISTWHEEL_@2
$LN8@LISTWHEEL_@2:
; Line 945
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv69[ebp], ecx
	cmp	DWORD PTR tv69[ebp], 275		; 00000113H
	jg	SHORT $LN11@LISTWHEEL_@2
	cmp	DWORD PTR tv69[ebp], 275		; 00000113H
	je	SHORT $LN4@LISTWHEEL_@2
	mov	edx, DWORD PTR tv69[ebp]
	sub	edx, 11					; 0000000bH
	mov	DWORD PTR tv69[ebp], edx
	cmp	DWORD PTR tv69[ebp], 6
	ja	SHORT $LN6@LISTWHEEL_@2
	mov	eax, DWORD PTR tv69[ebp]
	jmp	DWORD PTR $LN12@LISTWHEEL_@2[eax*4]
$LN11@LISTWHEEL_@2:
	jmp	SHORT $LN6@LISTWHEEL_@2
$LN5@LISTWHEEL_@2:
; Line 947
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__FreeAttached
	add	esp, 4
; Line 948
	jmp	SHORT $LN6@LISTWHEEL_@2
$LN4@LISTWHEEL_@2:
; Line 950
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__OnTimer
	add	esp, 4
; Line 951
	jmp	SHORT $LN6@LISTWHEEL_@2
$LN3@LISTWHEEL_@2:
; Line 953
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__OnPidStateChange
	add	esp, 8
; Line 954
	jmp	SHORT $LN6@LISTWHEEL_@2
$LN2@LISTWHEEL_@2:
; Line 956
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__OnTouch
	add	esp, 8
; Line 957
	jmp	SHORT $LN6@LISTWHEEL_@2
$LN1@LISTWHEEL_@2:
; Line 959
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__OnPaint
	add	esp, 4
; Line 960
	jmp	SHORT $LN9@LISTWHEEL_@2
$LN6@LISTWHEEL_@2:
; Line 965
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN9@LISTWHEEL_@2:
; Line 966
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@LISTWHEEL_@2:
	DD	$LN5@LISTWHEEL_@2
	DD	$LN2@LISTWHEEL_@2
	DD	$LN6@LISTWHEEL_@2
	DD	$LN6@LISTWHEEL_@2
	DD	$LN1@LISTWHEEL_@2
	DD	$LN6@LISTWHEEL_@2
	DD	$LN3@LISTWHEEL_@2
_LISTWHEEL_Callback ENDP
_TEXT	ENDS
EXTRN	_GUI_ARRAY_GethItem:PROC
EXTRN	_GUI_ARRAY_GetpItemLocked:PROC
EXTRN	_GUI_SetFont:PROC
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_GUI_ARRAY_GetNumItems:PROC
EXTRN	_WM_GetInsideRectEx:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __OnPaint
_TEXT	SEGMENT
tv89 = -420						; size = 4
_RectInside$ = -220					; size = 8
_ItemArray$ = -204					; size = 4
_ItemInfo$ = -192					; size = 32
_pItem$ = -152						; size = 4
_pfOwnerDraw$ = -140					; size = 4
_pObj$ = -128						; size = 4
_ySizeData$ = -116					; size = 4
_Pos$ = -104						; size = 4
_yPos$ = -92						; size = 4
_xPos$ = -80						; size = 4
_ySizeItem$ = -68					; size = 4
_xSizeItem$ = -56					; size = 4
_NumItems$ = -44					; size = 4
_j$ = -32						; size = 4
_i$ = -20						; size = 4
_pFont$ = -8						; size = 4
_hObj$ = 8						; size = 4
__OnPaint PROC						; COMDAT
; Line 144
	push	ebp
	mov	ebp, esp
	sub	esp, 420				; 000001a4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-420]
	mov	ecx, 105				; 00000069H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 146
	mov	DWORD PTR _xPos$[ebp], 0
	mov	DWORD PTR _yPos$[ebp], 0
; Line 151
	mov	DWORD PTR _ItemInfo$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _ItemInfo$[ebp+4], eax
	mov	DWORD PTR _ItemInfo$[ebp+8], eax
	mov	DWORD PTR _ItemInfo$[ebp+12], eax
	mov	DWORD PTR _ItemInfo$[ebp+16], eax
	mov	DWORD PTR _ItemInfo$[ebp+20], eax
	mov	DWORD PTR _ItemInfo$[ebp+24], eax
	mov	DWORD PTR _ItemInfo$[ebp+28], eax
; Line 158
	lea	eax, DWORD PTR _RectInside$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_GetInsideRectEx
	add	esp, 8
; Line 159
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 160
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _pfOwnerDraw$[ebp], ecx
; Line 161
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	mov	DWORD PTR _NumItems$[ebp], eax
; Line 162
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _ItemArray$[ebp], ecx
; Line 163
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _Pos$[ebp], ecx
; Line 164
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _pFont$[ebp], ecx
; Line 165
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	DWORD PTR _ySizeData$[ebp], ecx
; Line 166
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 167
	cmp	DWORD PTR _ySizeData$[ebp], 0
	jne	SHORT $LN21@OnPaint
; Line 168
	jmp	$LN22@OnPaint
$LN21@OnPaint:
; Line 170
	mov	eax, DWORD PTR _pFont$[ebp]
	push	eax
	call	_GUI_SetFont
	add	esp, 4
; Line 171
	cmp	DWORD PTR _pfOwnerDraw$[ebp], 0
	je	$LN22@OnPaint
; Line 172
	mov	eax, DWORD PTR _hObj$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp], eax
; Line 176
	mov	DWORD PTR _ItemInfo$[ebp+4], 3
; Line 177
	mov	eax, DWORD PTR _hObj$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp], eax
; Line 178
	mov	DWORD PTR _ItemInfo$[ebp+12], 0
; Line 179
	mov	DWORD PTR _ItemInfo$[ebp+16], 0
; Line 180
	movsx	eax, WORD PTR _RectInside$[ebp+4]
	mov	DWORD PTR _ItemInfo$[ebp+20], eax
; Line 181
	movsx	eax, WORD PTR _RectInside$[ebp+6]
	mov	DWORD PTR _ItemInfo$[ebp+24], eax
; Line 182
	mov	esi, esp
	lea	eax, DWORD PTR _ItemInfo$[ebp]
	push	eax
	call	DWORD PTR _pfOwnerDraw$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 183
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN19@OnPaint
$LN18@OnPaint:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN19@OnPaint:
	cmp	DWORD PTR _j$[ebp], 2
	jge	$LN17@OnPaint
; Line 184
	mov	DWORD PTR _xPos$[ebp], 0
; Line 185
	mov	eax, DWORD PTR _Pos$[ebp]
	mov	DWORD PTR _yPos$[ebp], eax
; Line 186
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN24@OnPaint
	mov	eax, DWORD PTR _NumItems$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN25@OnPaint
$LN24@OnPaint:
	mov	DWORD PTR tv89[ebp], 0
$LN25@OnPaint:
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _i$[ebp], ecx
$LN16@OnPaint:
; Line 187
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN14@OnPaint
	cmp	DWORD PTR _j$[ebp], 0
	jle	$LN15@OnPaint
	cmp	DWORD PTR _Pos$[ebp], 0
	jle	$LN15@OnPaint
$LN14@OnPaint:
; Line 191
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ItemArray$[ebp]
	push	ecx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pItem$[ebp], eax
; Line 192
	mov	eax, DWORD PTR _pItem$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ItemInfo$[ebp+28], ecx
; Line 196
	cmp	DWORD PTR _ItemInfo$[ebp+28], 0
	jne	SHORT $LN13@OnPaint
; Line 197
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ItemArray$[ebp]
	push	ecx
	call	_GUI_ARRAY_GethItem
	add	esp, 8
	mov	DWORD PTR _ItemInfo$[ebp+28], eax
$LN13@OnPaint:
; Line 199
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pItem$[ebp], 0
; Line 203
	mov	DWORD PTR _ItemInfo$[ebp+4], 25		; 00000019H
; Line 204
	mov	esi, esp
	lea	eax, DWORD PTR _ItemInfo$[ebp]
	push	eax
	call	DWORD PTR _pfOwnerDraw$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ySizeItem$[ebp], eax
; Line 205
	mov	DWORD PTR _xSizeItem$[ebp], 0
; Line 209
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN12@OnPaint
; Line 210
	mov	eax, DWORD PTR _xPos$[ebp]
	sub	eax, DWORD PTR _xSizeItem$[ebp]
	mov	DWORD PTR _xPos$[ebp], eax
; Line 211
	mov	eax, DWORD PTR _yPos$[ebp]
	sub	eax, DWORD PTR _ySizeItem$[ebp]
	mov	DWORD PTR _yPos$[ebp], eax
$LN12@OnPaint:
; Line 216
	mov	eax, DWORD PTR _xPos$[ebp]
	add	eax, DWORD PTR _xSizeItem$[ebp]
	jns	SHORT $LN10@OnPaint
	mov	eax, DWORD PTR _yPos$[ebp]
	add	eax, DWORD PTR _ySizeItem$[ebp]
	js	SHORT $LN11@OnPaint
$LN10@OnPaint:
; Line 217
	mov	DWORD PTR _ItemInfo$[ebp+4], 1
; Line 218
	mov	eax, DWORD PTR _hObj$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp], eax
; Line 219
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp+8], eax
; Line 220
	mov	eax, DWORD PTR _xPos$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp+12], eax
; Line 221
	mov	eax, DWORD PTR _yPos$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp+16], eax
; Line 222
	movsx	eax, WORD PTR _RectInside$[ebp+4]
	mov	DWORD PTR _ItemInfo$[ebp+20], eax
; Line 223
	mov	eax, DWORD PTR _ySizeItem$[ebp]
	mov	ecx, DWORD PTR _yPos$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _ItemInfo$[ebp+24], edx
; Line 224
	mov	esi, esp
	lea	eax, DWORD PTR _ItemInfo$[ebp]
	push	eax
	call	DWORD PTR _pfOwnerDraw$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@OnPaint:
; Line 229
	cmp	DWORD PTR _j$[ebp], 0
	jne	SHORT $LN9@OnPaint
; Line 230
	mov	eax, DWORD PTR _xPos$[ebp]
	add	eax, DWORD PTR _xSizeItem$[ebp]
	mov	DWORD PTR _xPos$[ebp], eax
; Line 231
	mov	eax, DWORD PTR _yPos$[ebp]
	add	eax, DWORD PTR _ySizeItem$[ebp]
	mov	DWORD PTR _yPos$[ebp], eax
$LN9@OnPaint:
; Line 236
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN8@OnPaint
; Line 237
	cmp	DWORD PTR _xPos$[ebp], 0
	jl	SHORT $LN6@OnPaint
	cmp	DWORD PTR _yPos$[ebp], 0
	jge	SHORT $LN7@OnPaint
$LN6@OnPaint:
; Line 238
	jmp	SHORT $LN15@OnPaint
$LN7@OnPaint:
; Line 240
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN5@OnPaint
; Line 241
	mov	eax, DWORD PTR _NumItems$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN5@OnPaint:
; Line 243
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 244
	jmp	SHORT $LN4@OnPaint
$LN8@OnPaint:
; Line 245
	mov	eax, DWORD PTR _NumItems$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jne	SHORT $LN3@OnPaint
; Line 246
	mov	DWORD PTR _i$[ebp], -1
$LN3@OnPaint:
; Line 248
	movsx	eax, WORD PTR _RectInside$[ebp+4]
	cmp	DWORD PTR _xPos$[ebp], eax
	jg	SHORT $LN1@OnPaint
	movsx	eax, WORD PTR _RectInside$[ebp+6]
	cmp	DWORD PTR _yPos$[ebp], eax
	jle	SHORT $LN2@OnPaint
$LN1@OnPaint:
; Line 249
	jmp	SHORT $LN15@OnPaint
$LN2@OnPaint:
; Line 251
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@OnPaint:
; Line 253
	jmp	$LN16@OnPaint
$LN15@OnPaint:
; Line 254
	jmp	$LN18@OnPaint
$LN17@OnPaint:
; Line 258
	mov	DWORD PTR _ItemInfo$[ebp+4], 11		; 0000000bH
; Line 259
	mov	eax, DWORD PTR _hObj$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp], eax
; Line 260
	mov	DWORD PTR _ItemInfo$[ebp+12], 0
; Line 261
	mov	DWORD PTR _ItemInfo$[ebp+16], 0
; Line 262
	movsx	eax, WORD PTR _RectInside$[ebp+4]
	mov	DWORD PTR _ItemInfo$[ebp+20], eax
; Line 263
	movsx	eax, WORD PTR _RectInside$[ebp+6]
	mov	DWORD PTR _ItemInfo$[ebp+24], eax
; Line 264
	mov	esi, esp
	lea	eax, DWORD PTR _ItemInfo$[ebp]
	push	eax
	call	DWORD PTR _pfOwnerDraw$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@OnPaint:
; Line 266
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@OnPaint
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 420				; 000001a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN29@OnPaint:
	DD	2
	DD	$LN28@OnPaint
$LN28@OnPaint:
	DD	-192					; ffffff40H
	DD	32					; 00000020H
	DD	$LN26@OnPaint
	DD	-220					; ffffff24H
	DD	8
	DD	$LN27@OnPaint
$LN27@OnPaint:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN26@OnPaint:
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
__OnPaint ENDP
_TEXT	ENDS
EXTRN	_WM_ReleaseCapture:PROC
EXTRN	_WM_GetClientRectEx:PROC
EXTRN	_WM_SetCapture:PROC
EXTRN	_WM_HasCaptured:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __OnTouch
_TEXT	SEGMENT
_HasCaptured$ = -48					; size = 4
_Notification$ = -36					; size = 4
_Rect$ = -24						; size = 8
_pState$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pMsg$ = 12						; size = 4
__OnTouch PROC						; COMDAT
; Line 564
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 570
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__CheckTimer
	add	esp, 4
; Line 574
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pState$[ebp], ecx
; Line 575
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_WM_HasCaptured
	add	esp, 4
	mov	DWORD PTR _HasCaptured$[ebp], eax
; Line 579
	cmp	DWORD PTR _HasCaptured$[ebp], 0
	jne	SHORT $LN8@OnTouch
	cmp	DWORD PTR _pState$[ebp], 0
	je	SHORT $LN8@OnTouch
; Line 580
	mov	eax, DWORD PTR _pState$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN8@OnTouch
; Line 581
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__StopAutoMove
	add	esp, 4
; Line 582
	push	0
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_SetCapture
	add	esp, 8
$LN8@OnTouch:
; Line 588
	cmp	DWORD PTR _HasCaptured$[ebp], 0
	je	$LN9@OnTouch
; Line 589
	mov	eax, DWORD PTR _pMsg$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN9@OnTouch
; Line 590
	lea	eax, DWORD PTR _Rect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMsg$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_WM_GetClientRectEx
	add	esp, 8
; Line 591
	mov	eax, DWORD PTR _pState$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN4@OnTouch
	mov	eax, DWORD PTR _pState$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jl	SHORT $LN4@OnTouch
	movsx	eax, WORD PTR _Rect$[ebp+6]
	mov	ecx, DWORD PTR _pState$[ebp]
	cmp	DWORD PTR [ecx+4], eax
	jg	SHORT $LN4@OnTouch
; Line 592
	mov	eax, DWORD PTR _pState$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__OnPressed
	add	esp, 8
; Line 593
	jmp	SHORT $LN9@OnTouch
$LN4@OnTouch:
; Line 594
	mov	eax, DWORD PTR _pState$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN2@OnTouch
; Line 595
	mov	DWORD PTR _Notification$[ebp], 3
; Line 596
	jmp	SHORT $LN1@OnTouch
$LN2@OnTouch:
; Line 597
	mov	DWORD PTR _Notification$[ebp], 2
$LN1@OnTouch:
; Line 599
	mov	eax, DWORD PTR _Notification$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__OnReleased
	add	esp, 8
; Line 600
	call	_WM_ReleaseCapture
$LN9@OnTouch:
; Line 604
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@OnTouch
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@OnTouch:
	DD	1
	DD	$LN12@OnTouch
$LN12@OnTouch:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN11@OnTouch
$LN11@OnTouch:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
__OnTouch ENDP
_TEXT	ENDS
EXTRN	_WM_NotifyParent:PROC
EXTRN	_GUI_GetTime:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __OnReleased
_TEXT	SEGMENT
_Destination$ = -204					; size = 4
_ySizeItem$ = -192					; size = 4
_Index$ = -180						; size = 4
_SnapPosition$ = -168					; size = 4
_Dist$ = -156						; size = 4
_TimeUsed$ = -144					; size = 4
_TimeNow$ = -132					; size = 4
_TimeTouched$ = -120					; size = 4
_Velocity$ = -108					; size = 4
_pfOwnerDraw$ = -96					; size = 4
_hTimer$ = -84						; size = 4
_pObj$ = -72						; size = 4
_pItem$ = -60						; size = 4
_ItemInfo$ = -48					; size = 32
_ItemArray$ = -8					; size = 4
_hObj$ = 8						; size = 4
_Notification$ = 12					; size = 4
__OnReleased PROC					; COMDAT
; Line 367
	push	ebp
	mov	ebp, esp
	sub	esp, 400				; 00000190H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-400]
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 379
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 380
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _pfOwnerDraw$[ebp], ecx
; Line 381
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	DWORD PTR _Velocity$[ebp], ecx
; Line 382
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _hTimer$[ebp], ecx
; Line 383
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR _TimeTouched$[ebp], ecx
; Line 384
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _ItemArray$[ebp], ecx
; Line 385
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR _SnapPosition$[ebp], ecx
; Line 386
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _Destination$[ebp], ecx
; Line 387
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 388
	cmp	DWORD PTR _Destination$[ebp], 0
	jl	SHORT $LN11@OnReleased
; Line 389
	jmp	$LN12@OnReleased
$LN11@OnReleased:
; Line 391
	call	_GUI_GetTime
	mov	DWORD PTR _TimeNow$[ebp], eax
; Line 392
	mov	eax, DWORD PTR _TimeNow$[ebp]
	sub	eax, DWORD PTR _TimeTouched$[ebp]
	mov	DWORD PTR _TimeUsed$[ebp], eax
; Line 393
	mov	DWORD PTR _Dist$[ebp], 0
; Line 394
	cmp	DWORD PTR _TimeUsed$[ebp], 100		; 00000064H
	jle	SHORT $LN10@OnReleased
; Line 395
	mov	DWORD PTR _Velocity$[ebp], 0
$LN10@OnReleased:
; Line 400
	cmp	DWORD PTR _Velocity$[ebp], 0
	je	SHORT $LN9@OnReleased
	cmp	DWORD PTR _hTimer$[ebp], 0
	jne	SHORT $LN9@OnReleased
; Line 404
	push	0
	push	25					; 00000019H
	push	0
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__CreateTimer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hTimer$[ebp], eax
	jmp	$LN8@OnReleased
$LN9@OnReleased:
; Line 405
	cmp	DWORD PTR _Velocity$[ebp], 0
	jne	$LN8@OnReleased
; Line 409
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _SnapPosition$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__GetDistToNextItem
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Dist$[ebp], eax
; Line 410
	cmp	DWORD PTR _Dist$[ebp], 0
	je	$LN8@OnReleased
; Line 414
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ItemArray$[ebp]
	push	ecx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pItem$[ebp], eax
; Line 415
	mov	eax, DWORD PTR _pItem$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ItemInfo$[ebp+28], ecx
; Line 419
	cmp	DWORD PTR _ItemInfo$[ebp+28], 0
	jne	SHORT $LN5@OnReleased
; Line 420
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ItemArray$[ebp]
	push	ecx
	call	_GUI_ARRAY_GethItem
	add	esp, 8
	mov	DWORD PTR _ItemInfo$[ebp+28], eax
$LN5@OnReleased:
; Line 422
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pItem$[ebp], 0
; Line 426
	mov	DWORD PTR _ItemInfo$[ebp+4], 25		; 00000019H
; Line 427
	mov	eax, DWORD PTR _hObj$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp], eax
; Line 428
	mov	esi, esp
	lea	eax, DWORD PTR _ItemInfo$[ebp]
	push	eax
	call	DWORD PTR _pfOwnerDraw$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ySizeItem$[ebp], eax
; Line 432
	mov	eax, DWORD PTR _ySizeItem$[ebp]
	sar	eax, 1
	add	eax, DWORD PTR _Dist$[ebp]
	mov	DWORD PTR _Dist$[ebp], eax
; Line 433
	mov	eax, DWORD PTR _Dist$[ebp]
	cmp	eax, DWORD PTR _ySizeItem$[ebp]
	jle	SHORT $LN4@OnReleased
; Line 434
	mov	eax, DWORD PTR _Dist$[ebp]
	sub	eax, DWORD PTR _ySizeItem$[ebp]
	mov	DWORD PTR _Dist$[ebp], eax
$LN4@OnReleased:
; Line 436
	mov	eax, DWORD PTR _ySizeItem$[ebp]
	sar	eax, 1
	cmp	DWORD PTR _Dist$[ebp], eax
	jle	SHORT $LN3@OnReleased
; Line 437
	mov	DWORD PTR _Velocity$[ebp], 1
; Line 438
	jmp	SHORT $LN2@OnReleased
$LN3@OnReleased:
; Line 439
	mov	DWORD PTR _Velocity$[ebp], -1
$LN2@OnReleased:
; Line 441
	push	0
	push	25					; 00000019H
	push	0
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__CreateTimer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hTimer$[ebp], eax
$LN8@OnReleased:
; Line 447
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 448
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Velocity$[ebp]
	mov	DWORD PTR [eax+124], ecx
; Line 449
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+116], 0
; Line 450
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+132], 0
; Line 451
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _hTimer$[ebp]
	mov	DWORD PTR [eax+96], ecx
; Line 452
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 456
	mov	eax, DWORD PTR _Notification$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_NotifyParent
	add	esp, 8
; Line 457
	cmp	DWORD PTR _Dist$[ebp], 0
	jne	SHORT $LN12@OnReleased
; Line 458
	push	4
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_NotifyParent
	add	esp, 8
$LN12@OnReleased:
; Line 460
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@OnReleased
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 400				; 00000190H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@OnReleased:
	DD	2
	DD	$LN16@OnReleased
$LN16@OnReleased:
	DD	-48					; ffffffd0H
	DD	32					; 00000020H
	DD	$LN14@OnReleased
	DD	-180					; ffffff4cH
	DD	4
	DD	$LN15@OnReleased
$LN15@OnReleased:
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN14@OnReleased:
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
__OnReleased ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDistToNextItem
_TEXT	SEGMENT
_pfOwnerDraw$ = -156					; size = 4
_pItem$ = -144						; size = 4
_ItemInfo$ = -132					; size = 32
_i$ = -92						; size = 4
_ySizeData$ = -80					; size = 4
_ySizeItem$ = -68					; size = 4
_PosNew$ = -56						; size = 4
_Pos$ = -44						; size = 4
_NumItems$ = -32					; size = 4
_ItemArray$ = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_yPos$ = 12						; size = 4
_pIndex$ = 16						; size = 4
__GetDistToNextItem PROC				; COMDAT
; Line 279
	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 282
	mov	DWORD PTR _i$[ebp], 0
; Line 283
	mov	DWORD PTR _ItemInfo$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _ItemInfo$[ebp+4], eax
	mov	DWORD PTR _ItemInfo$[ebp+8], eax
	mov	DWORD PTR _ItemInfo$[ebp+12], eax
	mov	DWORD PTR _ItemInfo$[ebp+16], eax
	mov	DWORD PTR _ItemInfo$[ebp+20], eax
	mov	DWORD PTR _ItemInfo$[ebp+24], eax
	mov	DWORD PTR _ItemInfo$[ebp+28], eax
; Line 290
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 291
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _pfOwnerDraw$[ebp], ecx
; Line 292
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _ItemArray$[ebp], ecx
; Line 293
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	DWORD PTR _ySizeData$[ebp], ecx
; Line 294
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _Pos$[ebp], ecx
; Line 295
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 296
	mov	eax, DWORD PTR _ItemArray$[ebp]
	push	eax
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	mov	DWORD PTR _NumItems$[ebp], eax
$LN9@GetDistToN:
; Line 297
	mov	eax, DWORD PTR _Pos$[ebp]
	cmp	eax, DWORD PTR _yPos$[ebp]
	jle	SHORT $LN8@GetDistToN
; Line 298
	mov	eax, DWORD PTR _Pos$[ebp]
	sub	eax, DWORD PTR _ySizeData$[ebp]
	mov	DWORD PTR _Pos$[ebp], eax
; Line 299
	jmp	SHORT $LN9@GetDistToN
$LN8@GetDistToN:
; Line 300
	mov	DWORD PTR _ItemInfo$[ebp+4], 25		; 00000019H
; Line 301
	mov	eax, DWORD PTR _hObj$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp], eax
$LN7@GetDistToN:
; Line 306
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ItemArray$[ebp]
	push	ecx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pItem$[ebp], eax
; Line 307
	mov	eax, DWORD PTR _pItem$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ItemInfo$[ebp+28], ecx
; Line 311
	cmp	DWORD PTR _ItemInfo$[ebp+28], 0
	jne	SHORT $LN4@GetDistToN
; Line 312
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ItemArray$[ebp]
	push	ecx
	call	_GUI_ARRAY_GethItem
	add	esp, 8
	mov	DWORD PTR _ItemInfo$[ebp+28], eax
$LN4@GetDistToN:
; Line 314
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pItem$[ebp], 0
; Line 318
	mov	esi, esp
	lea	eax, DWORD PTR _ItemInfo$[ebp]
	push	eax
	call	DWORD PTR _pfOwnerDraw$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ySizeItem$[ebp], eax
; Line 322
	mov	eax, DWORD PTR _Pos$[ebp]
	add	eax, DWORD PTR _ySizeItem$[ebp]
	mov	DWORD PTR _PosNew$[ebp], eax
; Line 323
	mov	eax, DWORD PTR _yPos$[ebp]
	cmp	eax, DWORD PTR _Pos$[ebp]
	jl	SHORT $LN3@GetDistToN
	mov	eax, DWORD PTR _yPos$[ebp]
	cmp	eax, DWORD PTR _PosNew$[ebp]
	jge	SHORT $LN3@GetDistToN
; Line 324
	cmp	DWORD PTR _pIndex$[ebp], 0
	je	SHORT $LN2@GetDistToN
; Line 325
	mov	eax, DWORD PTR _pIndex$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@GetDistToN:
; Line 327
	mov	eax, DWORD PTR _yPos$[ebp]
	sub	eax, DWORD PTR _Pos$[ebp]
	jmp	SHORT $LN10@GetDistToN
$LN3@GetDistToN:
; Line 329
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _NumItems$[ebp]
	jne	SHORT $LN1@GetDistToN
; Line 330
	mov	DWORD PTR _i$[ebp], 0
$LN1@GetDistToN:
; Line 332
	mov	eax, DWORD PTR _PosNew$[ebp]
	mov	DWORD PTR _Pos$[ebp], eax
; Line 333
	mov	eax, 1
	test	eax, eax
	jne	$LN7@GetDistToN
$LN10@GetDistToN:
; Line 334
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@GetDistToN
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@GetDistToN:
	DD	1
	DD	$LN13@GetDistToN
$LN13@GetDistToN:
	DD	-132					; ffffff7cH
	DD	32					; 00000020H
	DD	$LN12@GetDistToN
$LN12@GetDistToN:
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
__GetDistToNextItem ENDP
_TEXT	ENDS
EXTRN	_WM_CreateTimer:PROC
EXTRN	_WM_RestartTimer:PROC
EXTRN	_GUI_ALLOC_h2p:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __CreateTimer
_TEXT	SEGMENT
_hTimer$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hWin$ = 8						; size = 4
_UserId$ = 12						; size = 4
_Period$ = 16						; size = 4
_Mode$ = 20						; size = 4
__CreateTimer PROC					; COMDAT
; Line 345
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 349
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 350
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _hTimer$[ebp], ecx
; Line 351
	cmp	DWORD PTR _hTimer$[ebp], 0
	je	SHORT $LN2@CreateTime
; Line 352
	mov	eax, DWORD PTR _Period$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hTimer$[ebp]
	push	ecx
	call	_WM_RestartTimer
	add	esp, 8
; Line 353
	jmp	SHORT $LN1@CreateTime
$LN2@CreateTime:
; Line 354
	mov	eax, DWORD PTR _Mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Period$[ebp]
	push	ecx
	mov	edx, DWORD PTR _UserId$[ebp]
	push	edx
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_CreateTimer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hTimer$[ebp], eax
$LN1@CreateTime:
; Line 356
	mov	eax, DWORD PTR _hTimer$[ebp]
; Line 357
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__CreateTimer ENDP
_TEXT	ENDS
EXTRN	_WM_InvalidateWindow:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __OnPressed
_TEXT	SEGMENT
_Destination$ = -92					; size = 4
_Velocity$ = -80					; size = 4
_TouchPos$ = -68					; size = 4
_Diff$ = -56						; size = 4
_TimeUsed$ = -44					; size = 4
_TimeNow$ = -32						; size = 4
_TimeTouched$ = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_y$ = 12						; size = 4
__OnPressed PROC					; COMDAT
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 472
	mov	DWORD PTR _Diff$[ebp], 0
	mov	DWORD PTR _Velocity$[ebp], 0
; Line 477
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 478
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR _TouchPos$[ebp], ecx
; Line 479
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR _TimeTouched$[ebp], ecx
; Line 480
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _Destination$[ebp], ecx
; Line 481
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 482
	cmp	DWORD PTR _Destination$[ebp], 0
	jl	SHORT $LN7@OnPressed
; Line 483
	jmp	$LN8@OnPressed
$LN7@OnPressed:
; Line 488
	call	_GUI_GetTime
	mov	DWORD PTR _TimeNow$[ebp], eax
; Line 489
	cmp	DWORD PTR _TimeTouched$[ebp], 0
	jle	SHORT $LN6@OnPressed
; Line 490
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _TouchPos$[ebp]
	mov	DWORD PTR _Diff$[ebp], eax
; Line 491
	je	SHORT $LN6@OnPressed
; Line 492
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 493
	mov	eax, DWORD PTR _TimeNow$[ebp]
	sub	eax, DWORD PTR _TimeTouched$[ebp]
	add	eax, 1
	mov	DWORD PTR _TimeUsed$[ebp], eax
; Line 494
	mov	eax, DWORD PTR _Diff$[ebp]
	imul	eax, 25					; 00000019H
	cdq
	idiv	DWORD PTR _TimeUsed$[ebp]
	mov	DWORD PTR _Velocity$[ebp], eax
$LN6@OnPressed:
; Line 500
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 501
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _TimeNow$[ebp]
	mov	DWORD PTR [eax+116], ecx
; Line 502
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax+132], ecx
; Line 503
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Velocity$[ebp]
	mov	DWORD PTR [eax+124], ecx
; Line 504
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	add	ecx, DWORD PTR _Diff$[ebp]
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [edx+120], ecx
$LN4@OnPressed:
; Line 505
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+120], 0
	jge	SHORT $LN2@OnPressed
; Line 506
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	edx, DWORD PTR _pObj$[ebp]
	add	ecx, DWORD PTR [edx+136]
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+120], ecx
; Line 507
	jmp	SHORT $LN4@OnPressed
$LN2@OnPressed:
; Line 508
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [eax+120]
	cmp	edx, DWORD PTR [ecx+136]
	jle	SHORT $LN1@OnPressed
; Line 509
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [eax+120]
	sub	edx, DWORD PTR [ecx+136]
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+120], edx
; Line 510
	jmp	SHORT $LN2@OnPressed
$LN1@OnPressed:
; Line 511
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN8@OnPressed:
; Line 512
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__OnPressed ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __CheckTimer
_TEXT	SEGMENT
_hTimer$ = -44						; size = 4
_TimeTouched$ = -32					; size = 4
_TimeNow$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__CheckTimer PROC					; COMDAT
; Line 518
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 526
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 527
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR _TimeTouched$[ebp], ecx
; Line 528
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _hTimer$[ebp], ecx
; Line 529
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 530
	call	_GUI_GetTime
	mov	DWORD PTR _TimeNow$[ebp], eax
; Line 531
	mov	eax, DWORD PTR _TimeTouched$[ebp]
	cmp	eax, DWORD PTR _TimeNow$[ebp]
	jle	SHORT $LN2@CheckTimer
	cmp	DWORD PTR _hTimer$[ebp], 0
	je	SHORT $LN2@CheckTimer
; Line 532
	push	25					; 00000019H
	mov	eax, DWORD PTR _hTimer$[ebp]
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
$LN2@CheckTimer:
; Line 534
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__CheckTimer ENDP
_TEXT	ENDS
EXTRN	_WM_DeleteTimer:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __StopAutoMove
_TEXT	SEGMENT
_hTimer$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__StopAutoMove PROC					; COMDAT
; Line 543
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 547
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 548
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _hTimer$[ebp], ecx
; Line 549
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+124], 0
; Line 550
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+96], 0
; Line 551
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 552
	cmp	DWORD PTR _hTimer$[ebp], 0
	je	SHORT $LN2@StopAutoMo
; Line 553
	mov	eax, DWORD PTR _hTimer$[ebp]
	push	eax
	call	_WM_DeleteTimer
	add	esp, 4
$LN2@StopAutoMo:
; Line 555
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__StopAutoMove ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __OnPidStateChange
_TEXT	SEGMENT
_pState$ = -32						; size = 4
_State$ = -20						; size = 2
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pMsg$ = 12						; size = 4
__OnPidStateChange PROC					; COMDAT
; Line 613
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 618
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__CheckTimer
	add	esp, 4
; Line 622
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 623
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	cx, WORD PTR [eax+54]
	mov	WORD PTR _State$[ebp], cx
; Line 624
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 628
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pState$[ebp], ecx
; Line 632
	mov	eax, DWORD PTR _pState$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	$LN3@OnPidState
	mov	eax, DWORD PTR _pState$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN3@OnPidState
; Line 633
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__StopAutoMove
	add	esp, 4
; Line 634
	movzx	eax, WORD PTR _State$[ebp]
	and	eax, 256				; 00000100H
	jne	SHORT $LN3@OnPidState
; Line 635
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 636
	call	_GUI_GetTime
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [ecx+116], eax
; Line 637
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _pState$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+132], edx
; Line 638
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 639
	push	0
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_SetCapture
	add	esp, 8
; Line 640
	mov	eax, DWORD PTR _pState$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__OnPressed
	add	esp, 8
; Line 641
	push	1
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_NotifyParent
	add	esp, 8
$LN3@OnPidState:
; Line 644
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__OnPidStateChange ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __OnTimer
_TEXT	SEGMENT
_MaxVel$ = -116						; size = 4
_Dist$ = -104						; size = 4
_Destination$ = -92					; size = 4
_SnapPosition$ = -80					; size = 4
_ySizeData$ = -68					; size = 4
_Swap$ = -56						; size = 4
_Velocity$ = -44					; size = 4
_Pos$ = -32						; size = 4
_hTimer$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__OnTimer PROC						; COMDAT
; Line 657
	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 665
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 666
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _Pos$[ebp], ecx
; Line 667
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	DWORD PTR _Velocity$[ebp], ecx
; Line 668
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _hTimer$[ebp], ecx
; Line 669
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	DWORD PTR _ySizeData$[ebp], ecx
; Line 670
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR _SnapPosition$[ebp], ecx
; Line 671
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _Destination$[ebp], ecx
; Line 672
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 673
	cmp	DWORD PTR _Destination$[ebp], 0
	jl	$LN15@OnTimer
; Line 677
	mov	eax, DWORD PTR _Pos$[ebp]
	cmp	eax, DWORD PTR _Destination$[ebp]
	je	$LN37@OnTimer
; Line 678
	cmp	DWORD PTR _Velocity$[ebp], 0
	jne	SHORT $LN36@OnTimer
; Line 682
	mov	eax, DWORD PTR _Destination$[ebp]
	sub	eax, DWORD PTR _Pos$[ebp]
	mov	DWORD PTR _Dist$[ebp], eax
; Line 683
	cmp	DWORD PTR _Dist$[ebp], 0
	jle	SHORT $LN35@OnTimer
; Line 684
	mov	DWORD PTR _Swap$[ebp], 0
; Line 685
	jmp	SHORT $LN34@OnTimer
$LN35@OnTimer:
; Line 686
	mov	eax, DWORD PTR _Dist$[ebp]
	neg	eax
	mov	DWORD PTR _Dist$[ebp], eax
; Line 687
	mov	DWORD PTR _Swap$[ebp], 1
$LN34@OnTimer:
; Line 689
	mov	eax, DWORD PTR _ySizeData$[ebp]
	sar	eax, 1
	cmp	DWORD PTR _Dist$[ebp], eax
	jle	SHORT $LN33@OnTimer
; Line 690
	mov	eax, DWORD PTR _Swap$[ebp]
	xor	eax, 1
	mov	DWORD PTR _Swap$[ebp], eax
$LN33@OnTimer:
; Line 692
	mov	eax, DWORD PTR _Swap$[ebp]
	shl	eax, 1
	neg	eax
	add	eax, 1
	mov	DWORD PTR _Velocity$[ebp], eax
; Line 693
	jmp	$LN32@OnTimer
$LN36@OnTimer:
; Line 697
	mov	eax, DWORD PTR _Pos$[ebp]
	add	eax, DWORD PTR _Velocity$[ebp]
	mov	DWORD PTR _Pos$[ebp], eax
$LN31@OnTimer:
; Line 698
	cmp	DWORD PTR _Pos$[ebp], 0
	jge	SHORT $LN29@OnTimer
; Line 699
	mov	eax, DWORD PTR _Pos$[ebp]
	add	eax, DWORD PTR _ySizeData$[ebp]
	mov	DWORD PTR _Pos$[ebp], eax
; Line 700
	jmp	SHORT $LN31@OnTimer
$LN29@OnTimer:
; Line 701
	mov	eax, DWORD PTR _Pos$[ebp]
	cmp	eax, DWORD PTR _ySizeData$[ebp]
	jle	SHORT $LN28@OnTimer
; Line 702
	mov	eax, DWORD PTR _Pos$[ebp]
	sub	eax, DWORD PTR _ySizeData$[ebp]
	mov	DWORD PTR _Pos$[ebp], eax
; Line 703
	jmp	SHORT $LN29@OnTimer
$LN28@OnTimer:
; Line 704
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 708
	cmp	DWORD PTR _Velocity$[ebp], 0
	jle	SHORT $LN27@OnTimer
; Line 709
	mov	DWORD PTR _Swap$[ebp], 0
; Line 710
	mov	eax, DWORD PTR _Destination$[ebp]
	sub	eax, DWORD PTR _Pos$[ebp]
	mov	DWORD PTR _Dist$[ebp], eax
$LN26@OnTimer:
; Line 711
	cmp	DWORD PTR _Dist$[ebp], 0
	jge	SHORT $LN25@OnTimer
; Line 712
	mov	eax, DWORD PTR _Dist$[ebp]
	add	eax, DWORD PTR _ySizeData$[ebp]
	mov	DWORD PTR _Dist$[ebp], eax
; Line 713
	jmp	SHORT $LN26@OnTimer
$LN25@OnTimer:
; Line 714
	jmp	SHORT $LN24@OnTimer
$LN27@OnTimer:
; Line 715
	mov	DWORD PTR _Swap$[ebp], 1
; Line 716
	mov	eax, DWORD PTR _Velocity$[ebp]
	neg	eax
	mov	DWORD PTR _Velocity$[ebp], eax
; Line 717
	mov	eax, DWORD PTR _Pos$[ebp]
	sub	eax, DWORD PTR _Destination$[ebp]
	mov	DWORD PTR _Dist$[ebp], eax
$LN23@OnTimer:
; Line 718
	cmp	DWORD PTR _Dist$[ebp], 0
	jge	SHORT $LN24@OnTimer
; Line 719
	mov	eax, DWORD PTR _Dist$[ebp]
	add	eax, DWORD PTR _ySizeData$[ebp]
	mov	DWORD PTR _Dist$[ebp], eax
; Line 720
	jmp	SHORT $LN23@OnTimer
$LN24@OnTimer:
; Line 722
	mov	eax, DWORD PTR _ySizeData$[ebp]
	sar	eax, 6
	mov	DWORD PTR _MaxVel$[ebp], eax
; Line 723
	cmp	DWORD PTR _MaxVel$[ebp], 5
	jge	SHORT $LN21@OnTimer
; Line 724
	mov	DWORD PTR _MaxVel$[ebp], 5
$LN21@OnTimer:
; Line 726
	mov	eax, DWORD PTR _Velocity$[ebp]
	cmp	eax, DWORD PTR _MaxVel$[ebp]
	jge	SHORT $LN20@OnTimer
; Line 727
	mov	eax, DWORD PTR _Velocity$[ebp]
	add	eax, 1
	mov	DWORD PTR _Velocity$[ebp], eax
$LN20@OnTimer:
; Line 729
	mov	eax, DWORD PTR _Velocity$[ebp]
	cmp	eax, DWORD PTR _Dist$[ebp]
	jle	SHORT $LN19@OnTimer
; Line 730
	mov	eax, DWORD PTR _Dist$[ebp]
	mov	DWORD PTR _Velocity$[ebp], eax
$LN19@OnTimer:
; Line 732
	cmp	DWORD PTR _Swap$[ebp], 0
	je	SHORT $LN32@OnTimer
; Line 733
	mov	eax, DWORD PTR _Velocity$[ebp]
	neg	eax
	mov	DWORD PTR _Velocity$[ebp], eax
$LN32@OnTimer:
; Line 736
	push	25					; 00000019H
	mov	eax, DWORD PTR _hTimer$[ebp]
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
; Line 737
	jmp	SHORT $LN17@OnTimer
$LN37@OnTimer:
; Line 738
	mov	DWORD PTR _Destination$[ebp], -1
; Line 739
	mov	eax, DWORD PTR _hTimer$[ebp]
	push	eax
	call	_WM_DeleteTimer
	add	esp, 4
; Line 740
	mov	DWORD PTR _hTimer$[ebp], 0
$LN17@OnTimer:
; Line 742
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 743
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Pos$[ebp]
	mov	DWORD PTR [eax+120], ecx
; Line 744
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _hTimer$[ebp]
	mov	DWORD PTR [eax+96], ecx
; Line 745
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Velocity$[ebp]
	mov	DWORD PTR [eax+124], ecx
; Line 746
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Destination$[ebp]
	mov	DWORD PTR [eax+140], ecx
; Line 747
	call	_GUI_GetTime
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [ecx+116], eax
; Line 748
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 749
	jmp	$LN39@OnTimer
$LN15@OnTimer:
; Line 753
	mov	eax, DWORD PTR _Pos$[ebp]
	cmp	eax, DWORD PTR _ySizeData$[ebp]
	jle	SHORT $LN14@OnTimer
; Line 754
	mov	eax, DWORD PTR _Pos$[ebp]
	sub	eax, DWORD PTR _ySizeData$[ebp]
	mov	DWORD PTR _Pos$[ebp], eax
; Line 755
	jmp	SHORT $LN15@OnTimer
$LN14@OnTimer:
; Line 756
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 760
	cmp	DWORD PTR _Velocity$[ebp], 0
	jle	SHORT $LN13@OnTimer
; Line 761
	mov	DWORD PTR _Swap$[ebp], 0
; Line 762
	jmp	SHORT $LN12@OnTimer
$LN13@OnTimer:
; Line 763
	mov	DWORD PTR _Swap$[ebp], 1
; Line 764
	mov	eax, DWORD PTR _Velocity$[ebp]
	neg	eax
	mov	DWORD PTR _Velocity$[ebp], eax
$LN12@OnTimer:
; Line 766
	cmp	DWORD PTR _Velocity$[ebp], 200		; 000000c8H
	jle	SHORT $LN11@OnTimer
; Line 767
	mov	DWORD PTR _Velocity$[ebp], 200		; 000000c8H
	jmp	SHORT $LN10@OnTimer
$LN11@OnTimer:
; Line 768
	cmp	DWORD PTR _Velocity$[ebp], 100		; 00000064H
	jle	SHORT $LN9@OnTimer
; Line 769
	mov	eax, DWORD PTR _Velocity$[ebp]
	sub	eax, 10					; 0000000aH
	mov	DWORD PTR _Velocity$[ebp], eax
	jmp	SHORT $LN10@OnTimer
$LN9@OnTimer:
; Line 770
	cmp	DWORD PTR _Velocity$[ebp], 10		; 0000000aH
	jle	SHORT $LN7@OnTimer
; Line 771
	mov	eax, DWORD PTR _Velocity$[ebp]
	sub	eax, 5
	mov	DWORD PTR _Velocity$[ebp], eax
; Line 772
	jmp	SHORT $LN10@OnTimer
$LN7@OnTimer:
; Line 773
	mov	eax, DWORD PTR _Velocity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Velocity$[ebp], eax
$LN10@OnTimer:
; Line 778
	cmp	DWORD PTR _Velocity$[ebp], 0
	jne	SHORT $LN5@OnTimer
; Line 779
	push	0
	mov	eax, DWORD PTR _SnapPosition$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetDistToNextItem
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN5@OnTimer
; Line 780
	mov	DWORD PTR _Velocity$[ebp], 1
$LN5@OnTimer:
; Line 786
	cmp	DWORD PTR _Velocity$[ebp], 0
	je	SHORT $LN3@OnTimer
; Line 787
	push	25					; 00000019H
	mov	eax, DWORD PTR _hTimer$[ebp]
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
; Line 788
	jmp	SHORT $LN2@OnTimer
$LN3@OnTimer:
; Line 789
	mov	eax, DWORD PTR _hTimer$[ebp]
	push	eax
	call	_WM_DeleteTimer
	add	esp, 4
; Line 790
	mov	DWORD PTR _hTimer$[ebp], 0
; Line 791
	push	4
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_NotifyParent
	add	esp, 8
$LN2@OnTimer:
; Line 796
	cmp	DWORD PTR _Swap$[ebp], 0
	je	SHORT $LN1@OnTimer
; Line 797
	mov	eax, DWORD PTR _Velocity$[ebp]
	neg	eax
	mov	DWORD PTR _Velocity$[ebp], eax
$LN1@OnTimer:
; Line 799
	mov	eax, DWORD PTR _Pos$[ebp]
	add	eax, DWORD PTR _Velocity$[ebp]
	mov	DWORD PTR _Pos$[ebp], eax
; Line 800
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 801
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Pos$[ebp]
	mov	DWORD PTR [eax+120], ecx
; Line 802
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _hTimer$[ebp]
	mov	DWORD PTR [eax+96], ecx
; Line 803
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Velocity$[ebp]
	mov	DWORD PTR [eax+124], ecx
; Line 804
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN39@OnTimer:
; Line 806
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__OnTimer ENDP
_TEXT	ENDS
EXTRN	_GUI_ARRAY_Delete:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __FreeAttached
_TEXT	SEGMENT
_ItemArray$ = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__FreeAttached PROC					; COMDAT
; Line 830
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 834
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 835
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _ItemArray$[ebp], ecx
; Line 836
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 837
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+96], 0
; Line 838
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 839
	mov	eax, DWORD PTR _ItemArray$[ebp]
	push	eax
	call	_GUI_ARRAY_Delete
	add	esp, 4
; Line 840
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FreeAttached ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_OwnerDraw
EXTRN	_GUI_ClearRect:PROC
EXTRN	_GUI_SetColor:PROC
EXTRN	_GUI_SetBkColor:PROC
EXTRN	_WM_GetHasTrans:PROC
EXTRN	_GUI_GetYSizeOfFont:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_OwnerDraw
_TEXT	SEGMENT
tv129 = -380						; size = 4
_BkColor$ = -180					; size = 4
_Color$ = -168						; size = 4
_RBorder$ = -156					; size = 4
_LBorder$ = -144					; size = 4
_Rect$ = -132						; size = 8
_pText$ = -116						; size = 4
_HasTrans$ = -104					; size = 4
_Align$ = -92						; size = 4
_Index$ = -80						; size = 4
_LineHeight$ = -68					; size = 4
_ySizeFont$ = -56					; size = 4
_ySizeItem$ = -44					; size = 4
_xSize$ = -32						; size = 4
_pItem$ = -20						; size = 4
_pObj$ = -8						; size = 4
_pDrawItemInfo$ = 8					; size = 4
_LISTWHEEL_OwnerDraw PROC				; COMDAT
; Line 989
	push	ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-380]
	mov	ecx, 95					; 0000005fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 999
	mov	eax, DWORD PTR _pDrawItemInfo$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN13@LISTWHEEL_@3
; Line 1000
	xor	eax, eax
	jmp	$LN14@LISTWHEEL_@3
$LN13@LISTWHEEL_@3:
; Line 1005
	mov	eax, DWORD PTR _pDrawItemInfo$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1006
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	call	_GUI_GetYSizeOfFont
	add	esp, 4
	mov	DWORD PTR _ySizeFont$[ebp], eax
; Line 1007
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _pObj$[ebp]
	movsx	eax, WORD PTR [edx]
	sub	ecx, eax
	add	ecx, 1
	mov	DWORD PTR _xSize$[ebp], ecx
; Line 1008
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _LBorder$[ebp], ecx
; Line 1009
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _RBorder$[ebp], ecx
; Line 1010
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR _LineHeight$[ebp], ecx
; Line 1011
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _pDrawItemInfo$[ebp]
	mov	edx, DWORD PTR [eax+112]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+8]
	sete	al
	mov	DWORD PTR _Index$[ebp], eax
; Line 1012
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+76]
	mov	DWORD PTR _Color$[ebp], edx
; Line 1013
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+68]
	mov	DWORD PTR _BkColor$[ebp], edx
; Line 1014
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+84]
	mov	DWORD PTR _Align$[ebp], ecx
; Line 1015
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1016
	cmp	DWORD PTR _LineHeight$[ebp], 0
	je	SHORT $LN12@LISTWHEEL_@3
; Line 1017
	mov	eax, DWORD PTR _LineHeight$[ebp]
	mov	DWORD PTR _ySizeItem$[ebp], eax
; Line 1018
	jmp	SHORT $LN11@LISTWHEEL_@3
$LN12@LISTWHEEL_@3:
; Line 1019
	mov	eax, DWORD PTR _ySizeFont$[ebp]
	mov	DWORD PTR _ySizeItem$[ebp], eax
$LN11@LISTWHEEL_@3:
; Line 1024
	mov	eax, DWORD PTR _pDrawItemInfo$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pItem$[ebp], eax
; Line 1025
	mov	eax, DWORD PTR _pItem$[ebp]
	add	eax, 4
	mov	DWORD PTR _pText$[ebp], eax
; Line 1026
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pItem$[ebp], 0
; Line 1030
	mov	eax, DWORD PTR _pDrawItemInfo$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv129[ebp], ecx
	cmp	DWORD PTR tv129[ebp], 1
	je	SHORT $LN4@LISTWHEEL_@3
	cmp	DWORD PTR tv129[ebp], 24		; 00000018H
	je	SHORT $LN8@LISTWHEEL_@3
	cmp	DWORD PTR tv129[ebp], 25		; 00000019H
	je	SHORT $LN7@LISTWHEEL_@3
	jmp	$LN9@LISTWHEEL_@3
$LN8@LISTWHEEL_@3:
; Line 1032
	mov	eax, DWORD PTR _xSize$[ebp]
	jmp	$LN14@LISTWHEEL_@3
$LN7@LISTWHEEL_@3:
; Line 1034
	cmp	DWORD PTR _LineHeight$[ebp], 0
	je	SHORT $LN6@LISTWHEEL_@3
; Line 1035
	mov	eax, DWORD PTR _LineHeight$[ebp]
	jmp	$LN14@LISTWHEEL_@3
; Line 1036
	jmp	SHORT $LN4@LISTWHEEL_@3
$LN6@LISTWHEEL_@3:
; Line 1037
	mov	eax, DWORD PTR _ySizeItem$[ebp]
	jmp	$LN14@LISTWHEEL_@3
$LN4@LISTWHEEL_@3:
; Line 1040
	mov	eax, DWORD PTR _pDrawItemInfo$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _LBorder$[ebp]
	mov	WORD PTR _Rect$[ebp], cx
; Line 1041
	mov	eax, DWORD PTR _pDrawItemInfo$[ebp]
	mov	cx, WORD PTR [eax+16]
	mov	WORD PTR _Rect$[ebp+2], cx
; Line 1042
	mov	eax, DWORD PTR _pDrawItemInfo$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _RBorder$[ebp]
	mov	WORD PTR _Rect$[ebp+4], cx
; Line 1043
	mov	eax, DWORD PTR _pDrawItemInfo$[ebp]
	mov	cx, WORD PTR [eax+24]
	mov	WORD PTR _Rect$[ebp+6], cx
; Line 1045
	mov	eax, DWORD PTR _pDrawItemInfo$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_WM_GetHasTrans
	add	esp, 4
	mov	DWORD PTR _HasTrans$[ebp], eax
; Line 1049
	mov	eax, DWORD PTR _BkColor$[ebp]
	push	eax
	call	_GUI_SetBkColor
	add	esp, 4
; Line 1050
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	call	_GUI_SetColor
	add	esp, 4
; Line 1051
	mov	eax, DWORD PTR _HasTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Align$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Rect$[ebp]
	push	edx
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	call	__FillStringInRect
	add	esp, 16					; 00000010H
; Line 1052
	cmp	DWORD PTR _HasTrans$[ebp], 0
	jne	SHORT $LN9@LISTWHEEL_@3
; Line 1053
	cmp	DWORD PTR _LBorder$[ebp], 0
	je	SHORT $LN2@LISTWHEEL_@3
; Line 1054
	mov	eax, DWORD PTR _pDrawItemInfo$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _pDrawItemInfo$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _LBorder$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	push	edx
	mov	eax, DWORD PTR _pDrawItemInfo$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _pDrawItemInfo$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_GUI_ClearRect
	add	esp, 16					; 00000010H
$LN2@LISTWHEEL_@3:
; Line 1056
	cmp	DWORD PTR _RBorder$[ebp], 0
	je	SHORT $LN9@LISTWHEEL_@3
; Line 1057
	mov	eax, DWORD PTR _pDrawItemInfo$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _pDrawItemInfo$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _pDrawItemInfo$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _pDrawItemInfo$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _RBorder$[ebp]
	push	ecx
	call	_GUI_ClearRect
	add	esp, 16					; 00000010H
$LN9@LISTWHEEL_@3:
; Line 1062
	xor	eax, eax
$LN14@LISTWHEEL_@3:
; Line 1063
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@LISTWHEEL_@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 380				; 0000017cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@LISTWHEEL_@3:
	DD	1
	DD	$LN17@LISTWHEEL_@3
$LN17@LISTWHEEL_@3:
	DD	-132					; ffffff7cH
	DD	8
	DD	$LN16@LISTWHEEL_@3
$LN16@LISTWHEEL_@3:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_LISTWHEEL_OwnerDraw ENDP
_TEXT	ENDS
EXTRN	_GUI_DispStringInRectMax:PROC
EXTRN	_GUI_SetTextMode:PROC
EXTRN	_GUI_ClearRectEx:PROC
EXTRN	_GUI__strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __FillStringInRect
_TEXT	SEGMENT
_Len$ = -8						; size = 4
_s$ = 8							; size = 4
_pRect$ = 12						; size = 4
_Align$ = 16						; size = 4
_HasTrans$ = 20						; size = 4
__FillStringInRect PROC					; COMDAT
; Line 972
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 975
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_GUI__strlen
	add	esp, 4
	mov	DWORD PTR _Len$[ebp], eax
; Line 976
	cmp	DWORD PTR _HasTrans$[ebp], 0
	jne	SHORT $LN2@FillString
; Line 977
	mov	eax, DWORD PTR _pRect$[ebp]
	push	eax
	call	_GUI_ClearRectEx
	add	esp, 4
; Line 978
	push	0
	call	_GUI_SetTextMode
	add	esp, 4
; Line 979
	jmp	SHORT $LN1@FillString
$LN2@FillString:
; Line 980
	push	2
	call	_GUI_SetTextMode
	add	esp, 4
$LN1@FillString:
; Line 982
	mov	eax, DWORD PTR _Len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Align$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_GUI_DispStringInRectMax
	add	esp, 16					; 00000010H
; Line 983
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FillStringInRect ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_SetText
PUBLIC	_LISTWHEEL_CreateEx
EXTRN	_WM_DeleteWindow:PROC
EXTRN	_WIDGET_Effect_None:BYTE
EXTRN	_WIDGET__Init:PROC
EXTRN	_GUI_ARRAY_Create:PROC
EXTRN	_WM_CreateWindowAsChild:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_CreateEx
_TEXT	SEGMENT
_pObj$ = -32						; size = 4
_ItemArray$ = -20					; size = 4
_hObj$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xsize$ = 16						; size = 4
_ysize$ = 20						; size = 4
_hParent$ = 24						; size = 4
_WinFlags$ = 28						; size = 4
_ExFlags$ = 32						; size = 4
_Id$ = 36						; size = 4
_ppText$ = 40						; size = 4
_LISTWHEEL_CreateEx PROC				; COMDAT
; Line 1071
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1076
	mov	eax, DWORD PTR _ExFlags$[ebp]
	mov	DWORD PTR _ExFlags$[ebp], eax
; Line 1079
	push	96					; 00000060H
	push	OFFSET _LISTWHEEL_Callback
	mov	eax, DWORD PTR _WinFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hParent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ysize$[ebp]
	push	edx
	mov	eax, DWORD PTR _xsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	_WM_CreateWindowAsChild
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hObj$[ebp], eax
; Line 1080
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN4@LISTWHEEL_@4
; Line 1081
	call	_GUI_ARRAY_Create
	mov	DWORD PTR _ItemArray$[ebp], eax
; Line 1082
	cmp	DWORD PTR _ItemArray$[ebp], 0
	je	$LN3@LISTWHEEL_@4
; Line 1083
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1087
	push	16					; 00000010H
	mov	eax, DWORD PTR _Id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	_WIDGET__Init
	add	esp, 12					; 0000000cH
; Line 1088
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+92], 1279873879		; 4c495357H
; Line 1092
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+48], OFFSET _WIDGET_Effect_None
; Line 1093
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _ItemArray$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 1094
	mov	eax, DWORD PTR _pObj$[ebp]
	add	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _LISTWHEEL_DefaultProps
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _LISTWHEEL_DefaultProps+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _LISTWHEEL_DefaultProps+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _LISTWHEEL_DefaultProps+12
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _LISTWHEEL_DefaultProps+16
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _LISTWHEEL_DefaultProps+20
	mov	DWORD PTR [eax+20], edx
; Line 1095
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+60], OFFSET _LISTWHEEL_OwnerDraw
; Line 1096
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+140], -1
; Line 1097
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1098
	cmp	DWORD PTR _ppText$[ebp], 0
	je	SHORT $LN2@LISTWHEEL_@4
; Line 1099
	mov	eax, DWORD PTR _ppText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_LISTWHEEL_SetText
	add	esp, 8
$LN2@LISTWHEEL_@4:
; Line 1101
	jmp	SHORT $LN4@LISTWHEEL_@4
$LN3@LISTWHEEL_@4:
; Line 1102
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_DeleteWindow
	add	esp, 4
$LN4@LISTWHEEL_@4:
; Line 1106
	mov	eax, DWORD PTR _hObj$[ebp]
; Line 1107
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_CreateEx ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_LISTWHEEL_AddString
EXTRN	_strcpy:PROC
EXTRN	_GUI_ARRAY_AddItem:PROC
EXTRN	_strlen:PROC
EXTRN	_WM_GetInsideRect:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_AddString
_TEXT	SEGMENT
_ySizeData$ = -144					; size = 4
_ItemIndex$ = -132					; size = 4
_ItemArray$ = -120					; size = 4
_RectInside$ = -108					; size = 8
_Item$ = -92						; size = 8
_pObj$ = -76						; size = 4
_pItem$ = -64						; size = 4
_ItemInfo$ = -52					; size = 32
_pfOwnerDraw$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_hObj$ = 8						; size = 4
_s$ = 12						; size = 4
_LISTWHEEL_AddString PROC				; COMDAT
; Line 1113
	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1118
	mov	DWORD PTR _Item$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _Item$[ebp+4], eax
; Line 1124
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN4@LISTWHEEL_@5
	cmp	DWORD PTR _s$[ebp], 0
	je	$LN4@LISTWHEEL_@5
; Line 1129
	lea	eax, DWORD PTR _RectInside$[ebp]
	push	eax
	call	_WM_GetInsideRect
	add	esp, 4
; Line 1130
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1131
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	call	_GUI_SetFont
	add	esp, 4
; Line 1132
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _ItemArray$[ebp], ecx
; Line 1133
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _pfOwnerDraw$[ebp], ecx
; Line 1134
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1135
	mov	eax, DWORD PTR _ItemArray$[ebp]
	push	eax
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	mov	DWORD PTR _ItemIndex$[ebp], eax
; Line 1139
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 8
	push	eax
	lea	ecx, DWORD PTR _Item$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ItemArray$[ebp]
	push	edx
	call	_GUI_ARRAY_AddItem
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN4@LISTWHEEL_@5
; Line 1140
	mov	eax, DWORD PTR _ItemIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ItemArray$[ebp]
	push	ecx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pItem$[ebp], eax
; Line 1141
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pItem$[ebp]
	add	ecx, 4
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 1142
	mov	eax, DWORD PTR _pItem$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ItemInfo$[ebp+28], ecx
; Line 1146
	cmp	DWORD PTR _ItemInfo$[ebp+28], 0
	jne	SHORT $LN1@LISTWHEEL_@5
; Line 1147
	mov	eax, DWORD PTR _ItemIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ItemArray$[ebp]
	push	ecx
	call	_GUI_ARRAY_GethItem
	add	esp, 8
	mov	DWORD PTR _ItemInfo$[ebp+28], eax
$LN1@LISTWHEEL_@5:
; Line 1149
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pItem$[ebp], 0
; Line 1153
	mov	eax, DWORD PTR _hObj$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp], eax
; Line 1154
	mov	eax, DWORD PTR _ItemIndex$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp+8], eax
; Line 1155
	mov	DWORD PTR _ItemInfo$[ebp+4], 25		; 00000019H
; Line 1156
	mov	esi, esp
	lea	eax, DWORD PTR _ItemInfo$[ebp]
	push	eax
	call	DWORD PTR _pfOwnerDraw$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ySizeData$[ebp], eax
; Line 1160
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1161
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	add	ecx, DWORD PTR _ySizeData$[ebp]
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [edx+136], ecx
; Line 1162
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1166
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN4@LISTWHEEL_@5:
; Line 1170
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@LISTWHEEL_@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@LISTWHEEL_@5:
	DD	3
	DD	$LN9@LISTWHEEL_@5
$LN9@LISTWHEEL_@5:
	DD	-52					; ffffffccH
	DD	32					; 00000020H
	DD	$LN6@LISTWHEEL_@5
	DD	-92					; ffffffa4H
	DD	8
	DD	$LN7@LISTWHEEL_@5
	DD	-108					; ffffff94H
	DD	8
	DD	$LN8@LISTWHEEL_@5
$LN8@LISTWHEEL_@5:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN7@LISTWHEEL_@5:
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN6@LISTWHEEL_@5:
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
_LISTWHEEL_AddString ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_SetFont
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_SetFont
_TEXT	SEGMENT
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pFont$ = 12						; size = 4
_LISTWHEEL_SetFont PROC					; COMDAT
; Line 1176
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1178
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN2@LISTWHEEL_@6
; Line 1180
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1181
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _pFont$[ebp]
	mov	DWORD PTR [eax+64], ecx
; Line 1182
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1183
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__RecalcDatasizeY
	add	esp, 4
; Line 1184
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN2@LISTWHEEL_@6:
; Line 1187
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_SetFont ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __RecalcDatasizeY
_TEXT	SEGMENT
tv75 = -320						; size = 4
_ItemArray$ = -120					; size = 4
_pItem$ = -108						; size = 4
_ItemInfo$ = -96					; size = 32
_ySizeItem$ = -56					; size = 4
_ySizeData$ = -44					; size = 4
_NumItems$ = -32					; size = 4
_pfOwnerDraw$ = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__RecalcDatasizeY PROC					; COMDAT
; Line 98
	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 101
	mov	DWORD PTR _ySizeData$[ebp], 0
; Line 102
	mov	DWORD PTR _ItemInfo$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _ItemInfo$[ebp+4], eax
	mov	DWORD PTR _ItemInfo$[ebp+8], eax
	mov	DWORD PTR _ItemInfo$[ebp+12], eax
	mov	DWORD PTR _ItemInfo$[ebp+16], eax
	mov	DWORD PTR _ItemInfo$[ebp+20], eax
	mov	DWORD PTR _ItemInfo$[ebp+24], eax
	mov	DWORD PTR _ItemInfo$[ebp+28], eax
; Line 106
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 107
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _pfOwnerDraw$[ebp], ecx
; Line 108
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	mov	DWORD PTR _NumItems$[ebp], eax
; Line 109
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _ItemArray$[ebp], ecx
; Line 110
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 111
	mov	DWORD PTR _ItemInfo$[ebp+4], 25		; 00000019H
; Line 112
	mov	eax, DWORD PTR _hObj$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp], eax
$LN3@RecalcData:
; Line 113
	mov	eax, DWORD PTR _NumItems$[ebp]
	mov	DWORD PTR tv75[ebp], eax
	mov	ecx, DWORD PTR _NumItems$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _NumItems$[ebp], ecx
	cmp	DWORD PTR tv75[ebp], 0
	je	SHORT $LN2@RecalcData
; Line 114
	mov	eax, DWORD PTR _NumItems$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ItemArray$[ebp]
	push	ecx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pItem$[ebp], eax
; Line 115
	mov	eax, DWORD PTR _pItem$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ItemInfo$[ebp+28], ecx
; Line 119
	cmp	DWORD PTR _ItemInfo$[ebp+28], 0
	jne	SHORT $LN1@RecalcData
; Line 120
	mov	eax, DWORD PTR _NumItems$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ItemArray$[ebp]
	push	ecx
	call	_GUI_ARRAY_GethItem
	add	esp, 8
	mov	DWORD PTR _ItemInfo$[ebp+28], eax
$LN1@RecalcData:
; Line 122
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pItem$[ebp], 0
; Line 126
	mov	esi, esp
	lea	eax, DWORD PTR _ItemInfo$[ebp]
	push	eax
	call	DWORD PTR _pfOwnerDraw$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ySizeItem$[ebp], eax
; Line 127
	mov	eax, DWORD PTR _ySizeData$[ebp]
	add	eax, DWORD PTR _ySizeItem$[ebp]
	mov	DWORD PTR _ySizeData$[ebp], eax
; Line 128
	jmp	SHORT $LN3@RecalcData
$LN2@RecalcData:
; Line 132
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 133
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _ySizeData$[ebp]
	mov	DWORD PTR [eax+136], ecx
; Line 134
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 135
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@RecalcData
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@RecalcData:
	DD	1
	DD	$LN7@RecalcData
$LN7@RecalcData:
	DD	-96					; ffffffa0H
	DD	32					; 00000020H
	DD	$LN6@RecalcData
$LN6@RecalcData:
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
__RecalcDatasizeY ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_GetFont
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_GetFont
_TEXT	SEGMENT
_pObj$ = -20						; size = 4
_pFont$ = -8						; size = 4
_hObj$ = 8						; size = 4
_LISTWHEEL_GetFont PROC					; COMDAT
; Line 1193
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1194
	mov	DWORD PTR _pFont$[ebp], 0
; Line 1196
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN1@LISTWHEEL_@7
; Line 1198
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1199
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _pFont$[ebp], ecx
; Line 1200
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN1@LISTWHEEL_@7:
; Line 1203
	mov	eax, DWORD PTR _pFont$[ebp]
; Line 1204
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_GetFont ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_SetOwnerDraw
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_SetOwnerDraw
_TEXT	SEGMENT
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pfOwnerDraw$ = 12					; size = 4
_LISTWHEEL_SetOwnerDraw PROC				; COMDAT
; Line 1210
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1213
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN4@LISTWHEEL_@8
; Line 1215
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1216
	cmp	DWORD PTR _pfOwnerDraw$[ebp], 0
	je	SHORT $LN2@LISTWHEEL_@8
; Line 1217
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _pfOwnerDraw$[ebp]
	mov	DWORD PTR [eax+60], ecx
; Line 1218
	jmp	SHORT $LN1@LISTWHEEL_@8
$LN2@LISTWHEEL_@8:
; Line 1219
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+60], OFFSET _LISTWHEEL_OwnerDraw
$LN1@LISTWHEEL_@8:
; Line 1221
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1222
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN4@LISTWHEEL_@8:
; Line 1225
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_SetOwnerDraw ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL__GetpStringLocked
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL__GetpStringLocked
_TEXT	SEGMENT
_pItem$ = -32						; size = 4
_s$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Index$ = 12						; size = 4
_LISTWHEEL__GetpStringLocked PROC			; COMDAT
; Line 1234
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1236
	mov	DWORD PTR _s$[ebp], 0
; Line 1238
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1239
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pItem$[ebp], eax
; Line 1240
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1241
	cmp	DWORD PTR _pItem$[ebp], 0
	je	SHORT $LN1@LISTWHEEL_@9
; Line 1242
	mov	eax, DWORD PTR _pItem$[ebp]
	add	eax, 4
	mov	DWORD PTR _s$[ebp], eax
$LN1@LISTWHEEL_@9:
; Line 1244
	mov	eax, DWORD PTR _s$[ebp]
; Line 1245
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL__GetpStringLocked ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_GetNumItems
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_GetNumItems
_TEXT	SEGMENT
_r$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_LISTWHEEL_GetNumItems PROC				; COMDAT
; Line 1251
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1253
	mov	DWORD PTR _r$[ebp], 0
; Line 1255
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN1@LISTWHEEL_@10
; Line 1257
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1258
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax
; Line 1259
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN1@LISTWHEEL_@10:
; Line 1262
	mov	eax, DWORD PTR _r$[ebp]
; Line 1263
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_GetNumItems ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_GetItemText
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_GetItemText
_TEXT	SEGMENT
_CopyLen$11818 = -32					; size = 4
_pString$11817 = -20					; size = 4
_NumItems$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Index$ = 12						; size = 4
_pBuffer$ = 16						; size = 4
_MaxSize$ = 20						; size = 4
_LISTWHEEL_GetItemText PROC				; COMDAT
; Line 1269
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1272
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN4@LISTWHEEL_@11
; Line 1274
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_GetNumItems
	add	esp, 4
	mov	DWORD PTR _NumItems$[ebp], eax
; Line 1275
	mov	eax, DWORD PTR _Index$[ebp]
	cmp	eax, DWORD PTR _NumItems$[ebp]
	jae	SHORT $LN4@LISTWHEEL_@11
; Line 1278
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_LISTWHEEL__GetpStringLocked
	add	esp, 8
	mov	DWORD PTR _pString$11817[ebp], eax
; Line 1279
	mov	eax, DWORD PTR _pString$11817[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _CopyLen$11818[ebp], eax
; Line 1280
	mov	eax, DWORD PTR _MaxSize$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _CopyLen$11818[ebp], eax
	jle	SHORT $LN1@LISTWHEEL_@11
; Line 1281
	mov	eax, DWORD PTR _MaxSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _CopyLen$11818[ebp], eax
$LN1@LISTWHEEL_@11:
; Line 1283
	mov	eax, DWORD PTR _CopyLen$11818[ebp]
	push	eax
	mov	ecx, DWORD PTR _pString$11817[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBuffer$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1284
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pString$11817[ebp], 0
; Line 1285
	mov	eax, DWORD PTR _pBuffer$[ebp]
	add	eax, DWORD PTR _CopyLen$11818[ebp]
	mov	BYTE PTR [eax], 0
$LN4@LISTWHEEL_@11:
; Line 1289
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_GetItemText ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_SetItemData
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_SetItemData
_TEXT	SEGMENT
_ItemArray$ = -44					; size = 4
_NumItems$ = -32					; size = 4
_pItem$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Index$ = 12						; size = 4
_pData$ = 16						; size = 4
_LISTWHEEL_SetItemData PROC				; COMDAT
; Line 1295
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1301
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN3@LISTWHEEL_@12
; Line 1306
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1307
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _ItemArray$[ebp], ecx
; Line 1308
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1309
	mov	eax, DWORD PTR _ItemArray$[ebp]
	push	eax
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	mov	DWORD PTR _NumItems$[ebp], eax
; Line 1310
	mov	eax, DWORD PTR _Index$[ebp]
	cmp	eax, DWORD PTR _NumItems$[ebp]
	jae	SHORT $LN3@LISTWHEEL_@12
; Line 1314
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ItemArray$[ebp]
	push	ecx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pItem$[ebp], eax
; Line 1315
	mov	eax, DWORD PTR _pItem$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1316
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pItem$[ebp], 0
$LN3@LISTWHEEL_@12:
; Line 1320
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_SetItemData ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_GetItemData
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_GetItemData
_TEXT	SEGMENT
_pData$ = -56						; size = 4
_ItemArray$ = -44					; size = 4
_NumItems$ = -32					; size = 4
_pItem$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Index$ = 12						; size = 4
_LISTWHEEL_GetItemData PROC				; COMDAT
; Line 1326
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1331
	mov	DWORD PTR _pData$[ebp], 0
; Line 1333
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN2@LISTWHEEL_@13
; Line 1338
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1339
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _ItemArray$[ebp], ecx
; Line 1340
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1341
	mov	eax, DWORD PTR _ItemArray$[ebp]
	push	eax
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	mov	DWORD PTR _NumItems$[ebp], eax
; Line 1342
	mov	eax, DWORD PTR _Index$[ebp]
	cmp	eax, DWORD PTR _NumItems$[ebp]
	jae	SHORT $LN2@LISTWHEEL_@13
; Line 1346
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ItemArray$[ebp]
	push	ecx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pItem$[ebp], eax
; Line 1347
	mov	eax, DWORD PTR _pItem$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pData$[ebp], ecx
; Line 1348
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pItem$[ebp], 0
$LN2@LISTWHEEL_@13:
; Line 1352
	mov	eax, DWORD PTR _pData$[ebp]
; Line 1353
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_GetItemData ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_SetUserData
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_SetUserData
_TEXT	SEGMENT
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pData$ = 12						; size = 4
_LISTWHEEL_SetUserData PROC				; COMDAT
; Line 1359
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1362
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN2@LISTWHEEL_@14
; Line 1367
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1368
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [eax+88], ecx
; Line 1369
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN2@LISTWHEEL_@14:
; Line 1372
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_SetUserData ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_GetUserData
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_GetUserData
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_LISTWHEEL_GetUserData PROC				; COMDAT
; Line 1378
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1380
	mov	DWORD PTR _pData$[ebp], 0
; Line 1382
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN1@LISTWHEEL_@15
; Line 1387
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1388
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _pData$[ebp], ecx
; Line 1389
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN1@LISTWHEEL_@15:
; Line 1392
	mov	eax, DWORD PTR _pData$[ebp]
; Line 1393
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_GetUserData ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_SetSnapPosition
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_SetSnapPosition
_TEXT	SEGMENT
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_SnapPosition$ = 12					; size = 4
_LISTWHEEL_SetSnapPosition PROC				; COMDAT
; Line 1399
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1402
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN2@LISTWHEEL_@16
; Line 1404
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1405
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _SnapPosition$[ebp]
	mov	DWORD PTR [eax+120], ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	eax, DWORD PTR _SnapPosition$[ebp]
	mov	DWORD PTR [edx+128], eax
; Line 1406
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN2@LISTWHEEL_@16:
; Line 1409
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_SetSnapPosition ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_GetSnapPosition
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_GetSnapPosition
_TEXT	SEGMENT
_r$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_LISTWHEEL_GetSnapPosition PROC				; COMDAT
; Line 1415
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1417
	mov	DWORD PTR _r$[ebp], 0
; Line 1419
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN1@LISTWHEEL_@17
; Line 1421
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1422
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR _r$[ebp], ecx
; Line 1423
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN1@LISTWHEEL_@17:
; Line 1426
	mov	eax, DWORD PTR _r$[ebp]
; Line 1427
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_GetSnapPosition ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_SetTextAlign
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_SetTextAlign
_TEXT	SEGMENT
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Align$ = 12						; size = 4
_LISTWHEEL_SetTextAlign PROC				; COMDAT
; Line 1433
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1436
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN2@LISTWHEEL_@18
; Line 1438
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1439
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	cx, WORD PTR _Align$[ebp]
	mov	WORD PTR [eax+84], cx
; Line 1440
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1441
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN2@LISTWHEEL_@18:
; Line 1444
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_SetTextAlign ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_GetTextAlign
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_GetTextAlign
_TEXT	SEGMENT
_Align$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_LISTWHEEL_GetTextAlign PROC				; COMDAT
; Line 1450
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1452
	mov	DWORD PTR _Align$[ebp], 0
; Line 1454
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN1@LISTWHEEL_@19
; Line 1456
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1457
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+84]
	mov	DWORD PTR _Align$[ebp], ecx
; Line 1458
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1459
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN1@LISTWHEEL_@19:
; Line 1462
	mov	eax, DWORD PTR _Align$[ebp]
; Line 1463
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_GetTextAlign ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_SetRBorder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_SetRBorder
_TEXT	SEGMENT
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_BorderSize$ = 12					; size = 4
_LISTWHEEL_SetRBorder PROC				; COMDAT
; Line 1469
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1472
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN3@LISTWHEEL_@20
; Line 1474
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1475
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	cmp	ecx, DWORD PTR _BorderSize$[ebp]
	je	SHORT $LN1@LISTWHEEL_@20
; Line 1476
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _BorderSize$[ebp]
	mov	DWORD PTR [eax+104], ecx
; Line 1477
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN1@LISTWHEEL_@20:
; Line 1479
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN3@LISTWHEEL_@20:
; Line 1482
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_SetRBorder ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_SetLBorder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_SetLBorder
_TEXT	SEGMENT
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_BorderSize$ = 12					; size = 4
_LISTWHEEL_SetLBorder PROC				; COMDAT
; Line 1488
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1491
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN3@LISTWHEEL_@21
; Line 1493
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1494
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	cmp	ecx, DWORD PTR _BorderSize$[ebp]
	je	SHORT $LN1@LISTWHEEL_@21
; Line 1495
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _BorderSize$[ebp]
	mov	DWORD PTR [eax+100], ecx
; Line 1496
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN1@LISTWHEEL_@21:
; Line 1498
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN3@LISTWHEEL_@21:
; Line 1501
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_SetLBorder ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_GetRBorder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_GetRBorder
_TEXT	SEGMENT
_RBorder$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_LISTWHEEL_GetRBorder PROC				; COMDAT
; Line 1507
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1509
	mov	DWORD PTR _RBorder$[ebp], 0
; Line 1511
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN1@LISTWHEEL_@22
; Line 1513
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1514
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _RBorder$[ebp], ecx
; Line 1515
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN1@LISTWHEEL_@22:
; Line 1518
	mov	eax, DWORD PTR _RBorder$[ebp]
; Line 1519
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_GetRBorder ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_GetLBorder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_GetLBorder
_TEXT	SEGMENT
_LBorder$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_LISTWHEEL_GetLBorder PROC				; COMDAT
; Line 1525
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1527
	mov	DWORD PTR _LBorder$[ebp], 0
; Line 1529
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN1@LISTWHEEL_@23
; Line 1531
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1532
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _LBorder$[ebp], ecx
; Line 1533
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN1@LISTWHEEL_@23:
; Line 1536
	mov	eax, DWORD PTR _LBorder$[ebp]
; Line 1537
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_GetLBorder ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_SetLineHeight
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_SetLineHeight
_TEXT	SEGMENT
_Recalc$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_LineHeight$ = 12					; size = 4
_LISTWHEEL_SetLineHeight PROC				; COMDAT
; Line 1543
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1545
	mov	DWORD PTR _Recalc$[ebp], 0
; Line 1547
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN4@LISTWHEEL_@24
; Line 1549
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1550
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	cmp	ecx, DWORD PTR _LineHeight$[ebp]
	je	SHORT $LN2@LISTWHEEL_@24
; Line 1551
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _LineHeight$[ebp]
	mov	DWORD PTR [eax+108], ecx
; Line 1552
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 1553
	mov	DWORD PTR _Recalc$[ebp], 1
$LN2@LISTWHEEL_@24:
; Line 1555
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1556
	cmp	DWORD PTR _Recalc$[ebp], 0
	je	SHORT $LN4@LISTWHEEL_@24
; Line 1557
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__RecalcDatasizeY
	add	esp, 4
$LN4@LISTWHEEL_@24:
; Line 1561
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_SetLineHeight ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_SetSel
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_SetSel
_TEXT	SEGMENT
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Sel$ = 12						; size = 4
_LISTWHEEL_SetSel PROC					; COMDAT
; Line 1567
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1570
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN3@LISTWHEEL_@25
; Line 1572
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1573
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	cmp	ecx, DWORD PTR _Sel$[ebp]
	je	SHORT $LN1@LISTWHEEL_@25
; Line 1574
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Sel$[ebp]
	mov	DWORD PTR [eax+112], ecx
; Line 1575
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN1@LISTWHEEL_@25:
; Line 1577
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN3@LISTWHEEL_@25:
; Line 1580
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_SetSel ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_GetSel
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_GetSel
_TEXT	SEGMENT
_Sel$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_LISTWHEEL_GetSel PROC					; COMDAT
; Line 1586
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1588
	mov	DWORD PTR _Sel$[ebp], 0
; Line 1590
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN2@LISTWHEEL_@26
; Line 1592
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1593
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	cmp	ecx, DWORD PTR _Sel$[ebp]
	je	SHORT $LN1@LISTWHEEL_@26
; Line 1594
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _Sel$[ebp], ecx
; Line 1595
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN1@LISTWHEEL_@26:
; Line 1597
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN2@LISTWHEEL_@26:
; Line 1600
	mov	eax, DWORD PTR _Sel$[ebp]
; Line 1601
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_GetSel ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_GetLineHeight
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_GetLineHeight
_TEXT	SEGMENT
_LineHeight$ = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_LISTWHEEL_GetLineHeight PROC				; COMDAT
; Line 1607
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1609
	mov	DWORD PTR _LineHeight$[ebp], 0
; Line 1611
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN2@LISTWHEEL_@27
; Line 1613
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1614
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	cmp	ecx, DWORD PTR _LineHeight$[ebp]
	je	SHORT $LN1@LISTWHEEL_@27
; Line 1615
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR _LineHeight$[ebp], ecx
; Line 1616
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN1@LISTWHEEL_@27:
; Line 1618
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN2@LISTWHEEL_@27:
; Line 1621
	mov	eax, DWORD PTR _LineHeight$[ebp]
; Line 1622
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_GetLineHeight ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_SetTextColor
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_SetTextColor
_TEXT	SEGMENT
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Index$ = 12						; size = 4
_Color$ = 16						; size = 4
_LISTWHEEL_SetTextColor PROC				; COMDAT
; Line 1628
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1631
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN3@LISTWHEEL_@28
; Line 1632
	cmp	DWORD PTR _Index$[ebp], 2
	jae	SHORT $LN3@LISTWHEEL_@28
; Line 1634
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1635
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR _Color$[ebp]
	mov	DWORD PTR [ecx+eax*4+76], edx
; Line 1636
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1637
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN3@LISTWHEEL_@28:
; Line 1641
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_SetTextColor ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_GetPos
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_GetPos
_TEXT	SEGMENT
_Index$ = -32						; size = 4
_SnapPosition$ = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_LISTWHEEL_GetPos PROC					; COMDAT
; Line 1647
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1649
	mov	DWORD PTR _Index$[ebp], -1
; Line 1651
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN1@LISTWHEEL_@29
; Line 1653
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1654
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR _SnapPosition$[ebp], ecx
; Line 1655
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1656
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _SnapPosition$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__GetDistToNextItem
	add	esp, 12					; 0000000cH
$LN1@LISTWHEEL_@29:
; Line 1659
	mov	eax, DWORD PTR _Index$[ebp]
; Line 1660
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LISTWHEEL_@29
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@LISTWHEEL_@29:
	DD	1
	DD	$LN5@LISTWHEEL_@29
$LN5@LISTWHEEL_@29:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@LISTWHEEL_@29
$LN4@LISTWHEEL_@29:
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
_LISTWHEEL_GetPos ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_GetVelocity
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_GetVelocity
_TEXT	SEGMENT
$T12232 = -221						; size = 1
_Velocity$ = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_LISTWHEEL_GetVelocity PROC				; COMDAT
; Line 1666
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T12232[ebp], 0
; Line 1670
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN1@LISTWHEEL_@30
; Line 1672
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1673
	mov	BYTE PTR $T12232[ebp], 1
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	DWORD PTR _Velocity$[ebp], ecx
; Line 1674
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN1@LISTWHEEL_@30:
; Line 1677
	cmp	BYTE PTR $T12232[ebp], 0
	jne	SHORT $LN4@LISTWHEEL_@30
	push	OFFSET $LN5@LISTWHEEL_@30
	call	__RTC_UninitUse
	add	esp, 4
$LN4@LISTWHEEL_@30:
	mov	eax, DWORD PTR _Velocity$[ebp]
; Line 1678
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LISTWHEEL_@30:
$LN5@LISTWHEEL_@30:
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
_LISTWHEEL_GetVelocity ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _LISTWHEEL_SetText
_TEXT	SEGMENT
_s$ = -20						; size = 4
_i$ = -8						; size = 4
_hObj$ = 8						; size = 4
_ppText$ = 12						; size = 4
_LISTWHEEL_SetText PROC					; COMDAT
; Line 1684
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1688
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN6@LISTWHEEL_@31
; Line 1690
	cmp	DWORD PTR _ppText$[ebp], 0
	je	SHORT $LN4@LISTWHEEL_@31
; Line 1694
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__RemoveItems
	add	esp, 4
; Line 1698
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@LISTWHEEL_@31
$LN2@LISTWHEEL_@31:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@LISTWHEEL_@31:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ppText$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _s$[ebp], edx
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN4@LISTWHEEL_@31
; Line 1699
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_LISTWHEEL_AddString
	add	esp, 8
; Line 1700
	jmp	SHORT $LN2@LISTWHEEL_@31
$LN4@LISTWHEEL_@31:
; Line 1702
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN6@LISTWHEEL_@31:
; Line 1705
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_SetText ENDP
_TEXT	ENDS
EXTRN	_GUI_ARRAY_DeleteItem:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __RemoveItems
_TEXT	SEGMENT
tv70 = -232						; size = 4
_Index$ = -32						; size = 4
_ItemArray$ = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__RemoveItems PROC					; COMDAT
; Line 812
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 817
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 818
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _ItemArray$[ebp], ecx
; Line 819
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 820
	mov	eax, DWORD PTR _ItemArray$[ebp]
	push	eax
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	mov	DWORD PTR _Index$[ebp], eax
$LN2@RemoveItem:
; Line 821
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	mov	ecx, DWORD PTR _Index$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _Index$[ebp], ecx
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN3@RemoveItem
; Line 822
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ItemArray$[ebp]
	push	ecx
	call	_GUI_ARRAY_DeleteItem
	add	esp, 8
; Line 823
	jmp	SHORT $LN2@RemoveItem
$LN3@RemoveItem:
; Line 824
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__RemoveItems ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_MoveToPos
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_MoveToPos
_TEXT	SEGMENT
_Destination$ = -44					; size = 4
_Pos$ = -32						; size = 4
_hTimer$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Index$ = 12						; size = 4
_LISTWHEEL_MoveToPos PROC				; COMDAT
; Line 1711
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1716
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN4@LISTWHEEL_@32
; Line 1718
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__StopAutoMove
	add	esp, 4
; Line 1719
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1720
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _Pos$[ebp], ecx
; Line 1721
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _Destination$[ebp], ecx
; Line 1722
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _hTimer$[ebp], ecx
; Line 1723
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1724
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetDestination
	add	esp, 8
	mov	DWORD PTR _Destination$[ebp], eax
; Line 1725
	mov	eax, DWORD PTR _Destination$[ebp]
	cmp	eax, DWORD PTR _Pos$[ebp]
	je	SHORT $LN4@LISTWHEEL_@32
; Line 1726
	cmp	DWORD PTR _hTimer$[ebp], 0
	jne	SHORT $LN1@LISTWHEEL_@32
; Line 1727
	push	0
	push	25					; 00000019H
	push	0
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__CreateTimer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hTimer$[ebp], eax
$LN1@LISTWHEEL_@32:
; Line 1729
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1730
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Destination$[ebp]
	mov	DWORD PTR [eax+140], ecx
; Line 1731
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _hTimer$[ebp]
	mov	DWORD PTR [eax+96], ecx
; Line 1732
	call	_GUI_GetTime
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [ecx+116], eax
; Line 1733
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN4@LISTWHEEL_@32:
; Line 1737
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_MoveToPos ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDestination
_TEXT	SEGMENT
_ySizeData$ = -44					; size = 4
_Destination$ = -32					; size = 4
_SnapPosition$ = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDestination PROC					; COMDAT
; Line 878
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 882
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 883
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR _SnapPosition$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	DWORD PTR _ySizeData$[ebp], ecx
; Line 885
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 887
	mov	DWORD PTR _Destination$[ebp], 0
	jmp	SHORT $LN5@GetDestina
$LN4@GetDestina:
	mov	eax, DWORD PTR _Index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Index$[ebp], eax
$LN5@GetDestina:
	cmp	DWORD PTR _Index$[ebp], 0
	jbe	SHORT $LN3@GetDestina
; Line 888
	mov	eax, DWORD PTR _Index$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetItemHeight
	add	esp, 8
	add	eax, DWORD PTR _Destination$[ebp]
	mov	DWORD PTR _Destination$[ebp], eax
; Line 889
	jmp	SHORT $LN4@GetDestina
$LN3@GetDestina:
; Line 890
	mov	eax, DWORD PTR _ySizeData$[ebp]
	sub	eax, DWORD PTR _Destination$[ebp]
	add	eax, DWORD PTR _SnapPosition$[ebp]
	mov	DWORD PTR _Destination$[ebp], eax
$LN2@GetDestina:
; Line 891
	mov	eax, DWORD PTR _Destination$[ebp]
	cmp	eax, DWORD PTR _ySizeData$[ebp]
	jle	SHORT $LN1@GetDestina
; Line 892
	mov	eax, DWORD PTR _Destination$[ebp]
	sub	eax, DWORD PTR _ySizeData$[ebp]
	mov	DWORD PTR _Destination$[ebp], eax
; Line 893
	jmp	SHORT $LN2@GetDestina
$LN1@GetDestina:
; Line 895
	mov	eax, DWORD PTR _Destination$[ebp]
; Line 896
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDestination ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetItemHeight
_TEXT	SEGMENT
_Height$ = -96						; size = 4
_ItemArray$ = -84					; size = 4
_pItem$ = -72						; size = 4
_pfOwnerDraw$ = -60					; size = 4
_ItemInfo$ = -48					; size = 32
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_ItemIndex$ = 12					; size = 4
__GetItemHeight PROC					; COMDAT
; Line 846
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 848
	mov	DWORD PTR _ItemInfo$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _ItemInfo$[ebp+4], eax
	mov	DWORD PTR _ItemInfo$[ebp+8], eax
	mov	DWORD PTR _ItemInfo$[ebp+12], eax
	mov	DWORD PTR _ItemInfo$[ebp+16], eax
	mov	DWORD PTR _ItemInfo$[ebp+20], eax
	mov	DWORD PTR _ItemInfo$[ebp+24], eax
	mov	DWORD PTR _ItemInfo$[ebp+28], eax
; Line 854
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 855
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _pfOwnerDraw$[ebp], ecx
; Line 856
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _ItemArray$[ebp], ecx
; Line 857
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 858
	mov	eax, DWORD PTR _ItemIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ItemArray$[ebp]
	push	ecx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pItem$[ebp], eax
; Line 859
	mov	eax, DWORD PTR _pItem$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ItemInfo$[ebp+28], ecx
; Line 863
	cmp	DWORD PTR _ItemInfo$[ebp+28], 0
	jne	SHORT $LN1@GetItemHei
; Line 864
	mov	eax, DWORD PTR _ItemIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ItemArray$[ebp]
	push	ecx
	call	_GUI_ARRAY_GethItem
	add	esp, 8
	mov	DWORD PTR _ItemInfo$[ebp+28], eax
$LN1@GetItemHei:
; Line 866
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pItem$[ebp], 0
; Line 867
	mov	DWORD PTR _ItemInfo$[ebp+4], 25		; 00000019H
; Line 868
	mov	eax, DWORD PTR _hObj$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp], eax
; Line 869
	mov	eax, DWORD PTR _ItemIndex$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp+8], eax
; Line 870
	mov	esi, esp
	lea	eax, DWORD PTR _ItemInfo$[ebp]
	push	eax
	call	DWORD PTR _pfOwnerDraw$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Height$[ebp], eax
; Line 871
	mov	eax, DWORD PTR _Height$[ebp]
; Line 872
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@GetItemHei
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@GetItemHei:
	DD	1
	DD	$LN5@GetItemHei
$LN5@GetItemHei:
	DD	-48					; ffffffd0H
	DD	32					; 00000020H
	DD	$LN4@GetItemHei
$LN4@GetItemHei:
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
__GetItemHeight ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_SetVelocity
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_SetVelocity
_TEXT	SEGMENT
_Destination$ = -32					; size = 4
_hTimer$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Velocity$ = 12						; size = 4
_LISTWHEEL_SetVelocity PROC				; COMDAT
; Line 1743
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1748
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN4@LISTWHEEL_@33
; Line 1750
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1751
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _Destination$[ebp], ecx
; Line 1752
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _hTimer$[ebp], ecx
; Line 1753
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1754
	cmp	DWORD PTR _Destination$[ebp], -1
	jne	SHORT $LN4@LISTWHEEL_@33
; Line 1755
	cmp	DWORD PTR _hTimer$[ebp], 0
	jne	SHORT $LN1@LISTWHEEL_@33
; Line 1756
	push	0
	push	25					; 00000019H
	push	0
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__CreateTimer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hTimer$[ebp], eax
$LN1@LISTWHEEL_@33:
; Line 1758
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1759
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Velocity$[ebp]
	mov	DWORD PTR [eax+124], ecx
; Line 1760
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _hTimer$[ebp]
	mov	DWORD PTR [eax+96], ecx
; Line 1761
	call	_GUI_GetTime
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [ecx+116], eax
; Line 1762
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN4@LISTWHEEL_@33:
; Line 1766
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_SetVelocity ENDP
_TEXT	ENDS
PUBLIC	_LISTWHEEL_SetPos
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LISTWHEEL_SetPos
_TEXT	SEGMENT
_NumItems$ = -44					; size = 4
_Destination$ = -32					; size = 4
_Pos$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Index$ = 12						; size = 4
_LISTWHEEL_SetPos PROC					; COMDAT
; Line 1772
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1776
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN4@LISTWHEEL_@34
; Line 1778
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1779
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	mov	DWORD PTR _NumItems$[ebp], eax
; Line 1780
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _Pos$[ebp], ecx
; Line 1781
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1782
	mov	eax, DWORD PTR _Index$[ebp]
	cmp	eax, DWORD PTR _NumItems$[ebp]
	jae	SHORT $LN4@LISTWHEEL_@34
; Line 1783
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetDestination
	add	esp, 8
	mov	DWORD PTR _Destination$[ebp], eax
; Line 1784
	mov	eax, DWORD PTR _Destination$[ebp]
	cmp	eax, DWORD PTR _Pos$[ebp]
	je	SHORT $LN4@LISTWHEEL_@34
; Line 1785
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_LISTWHEEL_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1786
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Destination$[ebp]
	mov	DWORD PTR [eax+120], ecx
; Line 1787
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1788
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN4@LISTWHEEL_@34:
; Line 1793
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LISTWHEEL_SetPos ENDP
_TEXT	ENDS
END
