; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\MemDev\GUIDEV_CmpWithLCD.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_MEMDEV_CompareWithLCD
EXTRN	_GUI_MEMDEV__XY2PTR:PROC
EXTRN	_LCD_GetPixelIndex:PROC
EXTRN	_GUI_DEVICE__GetpDriver:PROC
EXTRN	_LCD_GetBitsPerPixel:PROC
EXTRN	_LCD_GetXSize:PROC
EXTRN	_LCD_GetYSize:PROC
EXTRN	_LCD_GetYMag:PROC
EXTRN	_LCD_GetXMag:PROC
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\memdev\guidev_cmpwithlcd.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_MEMDEV_CompareWithLCD
_TEXT	SEGMENT
_pData$9224 = -200					; size = 4
_pData$9214 = -188					; size = 4
_pData$9203 = -176					; size = 4
_BitsPerPixel$ = -164					; size = 4
_Act$ = -152						; size = 4
_Exp$ = -140						; size = 4
_Ret$ = -128						; size = 4
_MagY$ = -116						; size = 4
_MagX$ = -104						; size = 4
_Max$ = -92						; size = 4
_YMax$ = -80						; size = 4
_XMax$ = -68						; size = 4
_x0$ = -56						; size = 4
_y$ = -44						; size = 4
_x$ = -32						; size = 4
_pDevData$ = -20					; size = 4
_pDevice$ = -8						; size = 4
_hMem$ = 8						; size = 4
_px$ = 12						; size = 4
_py$ = 16						; size = 4
_pExp$ = 20						; size = 4
_pAct$ = 24						; size = 4
_GUI_MEMDEV_CompareWithLCD PROC				; COMDAT
; Line 41
	push	ebp
	mov	ebp, esp
	sub	esp, 396				; 0000018cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-396]
	mov	ecx, 99					; 00000063H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 47
	mov	DWORD PTR _Ret$[ebp], 0
; Line 51
	cmp	DWORD PTR _hMem$[ebp], 0
	jne	SHORT $LN40@GUI_MEMDEV
; Line 52
	mov	eax, DWORD PTR _GUI_Context+76
	mov	DWORD PTR _hMem$[ebp], eax
$LN40@GUI_MEMDEV:
; Line 54
	cmp	DWORD PTR _hMem$[ebp], 0
	jne	SHORT $LN39@GUI_MEMDEV
; Line 55
	mov	eax, 1
	jmp	$LN41@GUI_MEMDEV
$LN39@GUI_MEMDEV:
; Line 58
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDevData$[ebp], eax
; Line 59
	mov	eax, DWORD PTR _pDevData$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR _y$[ebp], ecx
; Line 60
	mov	eax, DWORD PTR _pDevData$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	DWORD PTR _x0$[ebp], ecx
; Line 61
	mov	eax, DWORD PTR _pDevData$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	add	ecx, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _XMax$[ebp], ecx
; Line 62
	mov	eax, DWORD PTR _pDevData$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	add	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _YMax$[ebp], ecx
; Line 63
	call	_LCD_GetXMag
	mov	DWORD PTR _MagX$[ebp], eax
; Line 64
	call	_LCD_GetYMag
	mov	DWORD PTR _MagY$[ebp], eax
; Line 68
	cmp	DWORD PTR _y$[ebp], 0
	jge	SHORT $LN38@GUI_MEMDEV
; Line 69
	mov	DWORD PTR _y$[ebp], 0
$LN38@GUI_MEMDEV:
; Line 71
	cmp	DWORD PTR _x0$[ebp], 0
	jge	SHORT $LN37@GUI_MEMDEV
; Line 72
	mov	DWORD PTR _x0$[ebp], 0
$LN37@GUI_MEMDEV:
; Line 74
	call	_LCD_GetYSize
	mov	DWORD PTR _Max$[ebp], eax
; Line 75
	mov	eax, DWORD PTR _YMax$[ebp]
	cmp	eax, DWORD PTR _Max$[ebp]
	jle	SHORT $LN36@GUI_MEMDEV
; Line 76
	mov	eax, DWORD PTR _Max$[ebp]
	mov	DWORD PTR _YMax$[ebp], eax
$LN36@GUI_MEMDEV:
; Line 78
	call	_LCD_GetXSize
	mov	DWORD PTR _Max$[ebp], eax
; Line 79
	mov	eax, DWORD PTR _XMax$[ebp]
	cmp	eax, DWORD PTR _Max$[ebp]
	jle	SHORT $LN35@GUI_MEMDEV
; Line 80
	mov	eax, DWORD PTR _Max$[ebp]
	mov	DWORD PTR _XMax$[ebp], eax
$LN35@GUI_MEMDEV:
; Line 85
	call	_LCD_GetBitsPerPixel
	mov	DWORD PTR _BitsPerPixel$[ebp], eax
; Line 87
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_GUI_DEVICE__GetpDriver
	add	esp, 4
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 88
	cmp	DWORD PTR _BitsPerPixel$[ebp], 1
	jne	$LN34@GUI_MEMDEV
	jmp	SHORT $LN33@GUI_MEMDEV
$LN32@GUI_MEMDEV:
; Line 89
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN33@GUI_MEMDEV:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _YMax$[ebp]
	jge	$LN31@GUI_MEMDEV
; Line 90
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 91
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN30@GUI_MEMDEV
$LN29@GUI_MEMDEV:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN30@GUI_MEMDEV:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _XMax$[ebp]
	jge	$LN28@GUI_MEMDEV
; Line 92
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _MagY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	imul	ecx, DWORD PTR _MagX$[ebp]
	push	ecx
	call	_LCD_GetPixelIndex
	add	esp, 8
	mov	DWORD PTR _Exp$[ebp], eax
; Line 93
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _MagY$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	imul	ecx, DWORD PTR _MagX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Act$[ebp], eax
; Line 94
	mov	eax, DWORD PTR _Act$[ebp]
	cmp	eax, DWORD PTR _Exp$[ebp]
	je	SHORT $LN27@GUI_MEMDEV
; Line 95
	mov	eax, DWORD PTR _px$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 96
	mov	eax, DWORD PTR _py$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 97
	mov	eax, DWORD PTR _pAct$[ebp]
	mov	ecx, DWORD PTR _Act$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 98
	mov	eax, DWORD PTR _pExp$[ebp]
	mov	ecx, DWORD PTR _Exp$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 99
	mov	DWORD PTR _Ret$[ebp], 1
; Line 100
	jmp	$Skip$9200
$LN27@GUI_MEMDEV:
; Line 102
	jmp	$LN29@GUI_MEMDEV
$LN28@GUI_MEMDEV:
; Line 103
	jmp	$LN32@GUI_MEMDEV
$LN31@GUI_MEMDEV:
; Line 104
	jmp	$Skip$9200
$LN34@GUI_MEMDEV:
; Line 105
	cmp	DWORD PTR _BitsPerPixel$[ebp], 8
	jg	$LN25@GUI_MEMDEV
	jmp	SHORT $LN24@GUI_MEMDEV
$LN23@GUI_MEMDEV:
; Line 107
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN24@GUI_MEMDEV:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _YMax$[ebp]
	jge	$LN22@GUI_MEMDEV
; Line 108
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 109
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_GUI_MEMDEV__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pData$9203[ebp], eax
; Line 110
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN21@GUI_MEMDEV
$LN20@GUI_MEMDEV:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN21@GUI_MEMDEV:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _XMax$[ebp]
	jge	$LN19@GUI_MEMDEV
; Line 111
	mov	eax, DWORD PTR _pData$9203[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Exp$[ebp], ecx
	mov	edx, DWORD PTR _pData$9203[ebp]
	add	edx, 1
	mov	DWORD PTR _pData$9203[ebp], edx
; Line 112
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _MagY$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	imul	ecx, DWORD PTR _MagX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Act$[ebp], eax
; Line 113
	mov	eax, DWORD PTR _Act$[ebp]
	cmp	eax, DWORD PTR _Exp$[ebp]
	je	SHORT $LN18@GUI_MEMDEV
; Line 114
	mov	eax, DWORD PTR _px$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 115
	mov	eax, DWORD PTR _py$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 116
	mov	eax, DWORD PTR _pAct$[ebp]
	mov	ecx, DWORD PTR _Act$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 117
	mov	eax, DWORD PTR _pExp$[ebp]
	mov	ecx, DWORD PTR _Exp$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 118
	mov	DWORD PTR _Ret$[ebp], 1
; Line 119
	jmp	$Skip$9200
$LN18@GUI_MEMDEV:
; Line 121
	jmp	$LN20@GUI_MEMDEV
$LN19@GUI_MEMDEV:
; Line 122
	jmp	$LN23@GUI_MEMDEV
$LN22@GUI_MEMDEV:
; Line 123
	jmp	$Skip$9200
$LN25@GUI_MEMDEV:
	cmp	DWORD PTR _BitsPerPixel$[ebp], 16	; 00000010H
	jg	$LN16@GUI_MEMDEV
	jmp	SHORT $LN15@GUI_MEMDEV
$LN14@GUI_MEMDEV:
; Line 125
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN15@GUI_MEMDEV:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _YMax$[ebp]
	jge	$LN13@GUI_MEMDEV
; Line 126
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 127
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_GUI_MEMDEV__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pData$9214[ebp], eax
; Line 128
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN12@GUI_MEMDEV
$LN11@GUI_MEMDEV:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN12@GUI_MEMDEV:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _XMax$[ebp]
	jge	$LN10@GUI_MEMDEV
; Line 129
	mov	eax, DWORD PTR _pData$9214[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _Exp$[ebp], ecx
	mov	edx, DWORD PTR _pData$9214[ebp]
	add	edx, 2
	mov	DWORD PTR _pData$9214[ebp], edx
; Line 130
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _MagY$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	imul	ecx, DWORD PTR _MagX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Act$[ebp], eax
; Line 131
	mov	eax, DWORD PTR _Act$[ebp]
	cmp	eax, DWORD PTR _Exp$[ebp]
	je	SHORT $LN9@GUI_MEMDEV
; Line 132
	mov	eax, DWORD PTR _px$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 133
	mov	eax, DWORD PTR _py$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 134
	mov	eax, DWORD PTR _pAct$[ebp]
	mov	ecx, DWORD PTR _Act$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 135
	mov	eax, DWORD PTR _pExp$[ebp]
	mov	ecx, DWORD PTR _Exp$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 136
	mov	DWORD PTR _Ret$[ebp], 1
; Line 137
	jmp	$Skip$9200
$LN9@GUI_MEMDEV:
; Line 139
	jmp	$LN11@GUI_MEMDEV
$LN10@GUI_MEMDEV:
; Line 140
	jmp	$LN14@GUI_MEMDEV
$LN13@GUI_MEMDEV:
; Line 141
	jmp	$Skip$9200
$LN16@GUI_MEMDEV:
; Line 143
	jmp	SHORT $LN7@GUI_MEMDEV
$LN6@GUI_MEMDEV:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN7@GUI_MEMDEV:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _YMax$[ebp]
	jge	$Skip$9200
; Line 144
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 145
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_GUI_MEMDEV__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pData$9224[ebp], eax
; Line 146
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN4@GUI_MEMDEV
$LN3@GUI_MEMDEV:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN4@GUI_MEMDEV:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _XMax$[ebp]
	jge	$LN2@GUI_MEMDEV
; Line 147
	mov	eax, DWORD PTR _pData$9224[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Exp$[ebp], ecx
	mov	edx, DWORD PTR _pData$9224[ebp]
	add	edx, 4
	mov	DWORD PTR _pData$9224[ebp], edx
; Line 148
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _MagY$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	imul	ecx, DWORD PTR _MagX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Act$[ebp], eax
; Line 149
	mov	eax, DWORD PTR _Act$[ebp]
	cmp	eax, DWORD PTR _Exp$[ebp]
	je	SHORT $LN1@GUI_MEMDEV
; Line 150
	mov	eax, DWORD PTR _px$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 151
	mov	eax, DWORD PTR _py$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 152
	mov	eax, DWORD PTR _pAct$[ebp]
	mov	ecx, DWORD PTR _Act$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 153
	mov	eax, DWORD PTR _pExp$[ebp]
	mov	ecx, DWORD PTR _Exp$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 154
	mov	DWORD PTR _Ret$[ebp], 1
; Line 155
	jmp	SHORT $Skip$9200
$LN1@GUI_MEMDEV:
; Line 157
	jmp	$LN3@GUI_MEMDEV
$LN2@GUI_MEMDEV:
; Line 158
	jmp	$LN6@GUI_MEMDEV
$Skip$9200:
; Line 163
	mov	eax, DWORD PTR _Ret$[ebp]
$LN41@GUI_MEMDEV:
; Line 164
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 396				; 0000018cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV_CompareWithLCD ENDP
_TEXT	ENDS
END
