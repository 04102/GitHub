; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_JPEG.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG11980 DB	'GUI_JPEG: Illegal value!', 00H
	ORG $+3
$SG11983 DB	'GUI_JPEG: Illegal value!', 00H
_DATA	ENDS
CONST	SEGMENT
__aLimit DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
__aCoeffOrder DB 00H
	DB	01H
	DB	08H
	DB	010H
	DB	09H
	DB	02H
	DB	03H
	DB	0aH
	DB	011H
	DB	018H
	DB	020H
	DB	019H
	DB	012H
	DB	0bH
	DB	04H
	DB	05H
	DB	0cH
	DB	013H
	DB	01aH
	DB	021H
	DB	028H
	DB	030H
	DB	029H
	DB	022H
	DB	01bH
	DB	014H
	DB	0dH
	DB	06H
	DB	07H
	DB	0eH
	DB	015H
	DB	01cH
	DB	023H
	DB	02aH
	DB	031H
	DB	038H
	DB	039H
	DB	032H
	DB	02bH
	DB	024H
	DB	01dH
	DB	016H
	DB	0fH
	DB	017H
	DB	01eH
	DB	025H
	DB	02cH
	DB	033H
	DB	03aH
	DB	03bH
	DB	034H
	DB	02dH
	DB	026H
	DB	01fH
	DB	027H
	DB	02eH
	DB	035H
	DB	03cH
	DB	03dH
	DB	036H
	DB	02fH
	DB	037H
	DB	03eH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
__aExtendTest DD 00H
	DD	01H
	DD	02H
	DD	04H
	DD	08H
	DD	010H
	DD	020H
	DD	040H
	DD	080H
	DD	0100H
	DD	0200H
	DD	0400H
	DD	0800H
	DD	01000H
	DD	02000H
	DD	04000H
__aExtendOffset DD 00H
	DD	0ffffffffH
	DD	0fffffffdH
	DD	0fffffff9H
	DD	0fffffff1H
	DD	0ffffffe1H
	DD	0ffffffc1H
	DD	0ffffff81H
	DD	0ffffff01H
	DD	0fffffe01H
	DD	0fffffc01H
	DD	0fffff801H
	DD	0fffff001H
	DD	0ffffe001H
	DD	0ffffc001H
	DD	0ffff8001H
CONST	ENDS
PUBLIC	_GUI_JPEG__GetData
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_jpeg.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_JPEG__GetData
_TEXT	SEGMENT
tv68 = -232						; size = 4
_pParam$ = -32						; size = 4
_NumBytes$ = -20					; size = 4
_RemBytes$ = -8						; size = 4
_p$ = 8							; size = 4
_ppData$ = 12						; size = 4
_NumBytesReq$ = 16					; size = 4
_Off$ = 20						; size = 4
_GUI_JPEG__GetData PROC					; COMDAT
; Line 2784
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2787
	mov	DWORD PTR _NumBytes$[ebp], 0
; Line 2788
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pParam$[ebp], eax
; Line 2789
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _Off$[ebp]
	mov	DWORD PTR _RemBytes$[ebp], ecx
; Line 2790
	cmp	DWORD PTR _RemBytes$[ebp], 0
	jle	SHORT $LN1@GUI_JPEG__
; Line 2791
	mov	eax, DWORD PTR _RemBytes$[ebp]
	cmp	eax, DWORD PTR _NumBytesReq$[ebp]
	jbe	SHORT $LN4@GUI_JPEG__
	mov	ecx, DWORD PTR _NumBytesReq$[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN5@GUI_JPEG__
$LN4@GUI_JPEG__:
	mov	edx, DWORD PTR _RemBytes$[ebp]
	mov	DWORD PTR tv68[ebp], edx
$LN5@GUI_JPEG__:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR _NumBytes$[ebp], eax
; Line 2792
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _Off$[ebp]
	mov	edx, DWORD PTR _ppData$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@GUI_JPEG__:
; Line 2794
	mov	eax, DWORD PTR _NumBytes$[ebp]
; Line 2795
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_JPEG__GetData ENDP
_TEXT	ENDS
PUBLIC	_GUI_JPEG__ReadUntilSOF
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_GUI_ALLOC_LockH:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_JPEG__ReadUntilSOF
_TEXT	SEGMENT
tv80 = -232						; size = 4
_r$ = -32						; size = 4
_Marker$ = -17						; size = 1
_pContext$ = -8						; size = 4
_hContext$ = 8						; size = 4
_GUI_JPEG__ReadUntilSOF PROC				; COMDAT
; Line 2804
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2807
	mov	DWORD PTR _r$[ebp], 0
; Line 2809
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 2810
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+24], 1
; Line 2811
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+32], OFFSET __GetU8
; Line 2812
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 2813
	lea	eax, DWORD PTR _Marker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__ReadFirstMarker
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@GUI_JPEG__@2
; Line 2814
	mov	DWORD PTR _r$[ebp], 1
; Line 2815
	jmp	SHORT $LN10@GUI_JPEG__@2
$LN11@GUI_JPEG__@2:
; Line 2816
	movzx	eax, BYTE PTR _Marker$[ebp]
	cmp	eax, 216				; 000000d8H
	je	SHORT $LN9@GUI_JPEG__@2
; Line 2817
	mov	DWORD PTR _r$[ebp], 1
; Line 2818
	jmp	SHORT $LN10@GUI_JPEG__@2
$LN9@GUI_JPEG__@2:
; Line 2819
	lea	eax, DWORD PTR _Marker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__ReadMarkers
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@GUI_JPEG__@2
; Line 2820
	mov	DWORD PTR _r$[ebp], 1
; Line 2821
	jmp	SHORT $LN10@GUI_JPEG__@2
$LN7@GUI_JPEG__@2:
; Line 2822
	mov	al, BYTE PTR _Marker$[ebp]
	mov	BYTE PTR tv80[ebp], al
	cmp	BYTE PTR tv80[ebp], 192			; 000000c0H
	jb	SHORT $LN10@GUI_JPEG__@2
	cmp	BYTE PTR tv80[ebp], 193			; 000000c1H
	jbe	SHORT $LN2@GUI_JPEG__@2
	cmp	BYTE PTR tv80[ebp], 194			; 000000c2H
	je	SHORT $LN3@GUI_JPEG__@2
	jmp	SHORT $LN10@GUI_JPEG__@2
$LN3@GUI_JPEG__@2:
; Line 2824
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29713], 1
$LN2@GUI_JPEG__@2:
; Line 2828
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__GetSOF
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@GUI_JPEG__@2
; Line 2829
	mov	DWORD PTR _r$[ebp], 1
$LN10@GUI_JPEG__@2:
; Line 2836
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 2837
	mov	eax, DWORD PTR _r$[ebp]
; Line 2838
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@GUI_JPEG__@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@GUI_JPEG__@2:
	DD	1
	DD	$LN15@GUI_JPEG__@2
$LN15@GUI_JPEG__@2:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN14@GUI_JPEG__@2
$LN14@GUI_JPEG__@2:
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_GUI_JPEG__ReadUntilSOF ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetU8
_TEXT	SEGMENT
_pContext$ = 8						; size = 4
_pByte$ = 12						; size = 4
__GetU8	PROC						; COMDAT
; Line 228
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 229
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN2@GetU8
; Line 230
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__FillInputBuffer
	add	esp, 4
; Line 231
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN2@GetU8
; Line 232
	mov	eax, 1
	jmp	SHORT $LN3@GetU8
$LN2@GetU8:
; Line 235
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pByte$[ebp]
	mov	al, BYTE PTR [ecx]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 236
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 237
	xor	eax, eax
$LN3@GetU8:
; Line 238
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetU8	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __FillInputBuffer
_TEXT	SEGMENT
_NumBytes$ = -20					; size = 4
_pBuffer$ = -8						; size = 4
_pContext$ = 8						; size = 4
__FillInputBuffer PROC					; COMDAT
; Line 199
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 202
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN2@FillInputB
; Line 203
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 204
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+24], 0
$LN2@FillInputB:
; Line 209
	mov	esi, esp
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	4096					; 00001000H
	lea	edx, DWORD PTR _pBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _NumBytes$[ebp], eax
; Line 210
	cmp	DWORD PTR _NumBytes$[ebp], 0
	jne	SHORT $LN1@FillInputB
; Line 211
	mov	eax, 1
	jmp	SHORT $LN3@FillInputB
$LN1@FillInputB:
; Line 213
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _NumBytes$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 214
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _NumBytes$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 215
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 216
	xor	eax, eax
$LN3@FillInputB:
; Line 217
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@FillInputB
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@FillInputB:
	DD	1
	DD	$LN6@FillInputB
$LN6@FillInputB:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@FillInputB
$LN5@FillInputB:
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
__FillInputBuffer ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __ReadFirstMarker
_TEXT	SEGMENT
_c1$ = -17						; size = 1
_c0$ = -5						; size = 1
_pContext$ = 8						; size = 4
_pMarker$ = 12						; size = 4
__ReadFirstMarker PROC					; COMDAT
; Line 402
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 404
	mov	esi, esp
	lea	eax, DWORD PTR _c0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN4@ReadFirstM
	mov	eax, 1
	jmp	SHORT $LN5@ReadFirstM
$LN4@ReadFirstM:
; Line 405
	mov	esi, esp
	lea	eax, DWORD PTR _c1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@ReadFirstM
	mov	eax, 1
	jmp	SHORT $LN5@ReadFirstM
$LN3@ReadFirstM:
; Line 406
	movzx	eax, BYTE PTR _c0$[ebp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN1@ReadFirstM
	movzx	eax, BYTE PTR _c1$[ebp]
	cmp	eax, 216				; 000000d8H
	je	SHORT $LN2@ReadFirstM
$LN1@ReadFirstM:
	mov	eax, 1
	jmp	SHORT $LN5@ReadFirstM
$LN2@ReadFirstM:
; Line 407
	mov	eax, DWORD PTR _pMarker$[ebp]
	mov	cl, BYTE PTR _c1$[ebp]
	mov	BYTE PTR [eax], cl
; Line 408
	xor	eax, eax
$LN5@ReadFirstM:
; Line 409
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ReadFirstM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@ReadFirstM:
	DD	2
	DD	$LN9@ReadFirstM
$LN9@ReadFirstM:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN7@ReadFirstM
	DD	-17					; ffffffefH
	DD	1
	DD	$LN8@ReadFirstM
$LN8@ReadFirstM:
	DB	99					; 00000063H
	DB	49					; 00000031H
	DB	0
$LN7@ReadFirstM:
	DB	99					; 00000063H
	DB	48					; 00000030H
	DB	0
__ReadFirstMarker ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetSOF
_TEXT	SEGMENT
_c$10891 = -41						; size = 1
_Prec$ = -29						; size = 1
_i$ = -20						; size = 4
_Length$ = -8						; size = 4
_pContext$ = 8						; size = 4
__GetSOF PROC						; COMDAT
; Line 526
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 529
	lea	eax, DWORD PTR _Length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetInt
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@GetSOF
	mov	eax, 1
	jmp	$LN16@GetSOF
$LN15@GetSOF:
; Line 530
	mov	esi, esp
	lea	eax, DWORD PTR _Prec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN14@GetSOF
	mov	eax, 1
	jmp	$LN16@GetSOF
$LN14@GetSOF:
; Line 531
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 14					; 0000000eH
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetU16
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@GetSOF
	mov	eax, 1
	jmp	$LN16@GetSOF
$LN13@GetSOF:
; Line 532
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetU16
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@GetSOF
	mov	eax, 1
	jmp	$LN16@GetSOF
$LN12@GetSOF:
; Line 533
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 29468				; 0000731cH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN11@GetSOF
	mov	eax, 1
	jmp	$LN16@GetSOF
$LN11@GetSOF:
; Line 534
	mov	eax, DWORD PTR _Length$[ebp]
	sub	eax, 8
	mov	DWORD PTR _Length$[ebp], eax
; Line 535
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, WORD PTR [eax+14]
	test	ecx, ecx
	je	SHORT $LN9@GetSOF
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN10@GetSOF
$LN9@GetSOF:
; Line 536
	mov	eax, 1
	jmp	$LN16@GetSOF
$LN10@GetSOF:
; Line 538
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29468]
	cmp	ecx, 4
	jle	SHORT $LN8@GetSOF
; Line 539
	mov	eax, 1
	jmp	$LN16@GetSOF
$LN8@GetSOF:
; Line 541
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29468]
	imul	ecx, 3
	cmp	DWORD PTR _Length$[ebp], ecx
	je	SHORT $LN7@GetSOF
; Line 542
	mov	eax, 1
	jmp	$LN16@GetSOF
$LN7@GetSOF:
; Line 544
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@GetSOF
$LN5@GetSOF:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@GetSOF:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29468]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$LN4@GetSOF
; Line 546
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	lea	edx, DWORD PTR [ecx+eax+29481]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@GetSOF
	mov	eax, 1
	jmp	$LN16@GetSOF
$LN3@GetSOF:
; Line 547
	mov	esi, esp
	lea	eax, DWORD PTR _c$10891[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@GetSOF
	mov	eax, 1
	jmp	SHORT $LN16@GetSOF
$LN2@GetSOF:
; Line 548
	movzx	eax, BYTE PTR _c$10891[ebp]
	sar	eax, 4
	mov	ecx, DWORD PTR _pContext$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+29469], al
; Line 549
	movzx	eax, BYTE PTR _c$10891[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _pContext$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+29473], al
; Line 550
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	lea	edx, DWORD PTR [ecx+eax+29477]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@GetSOF
	mov	eax, 1
	jmp	SHORT $LN16@GetSOF
$LN1@GetSOF:
; Line 551
	jmp	$LN5@GetSOF
$LN4@GetSOF:
; Line 552
	xor	eax, eax
$LN16@GetSOF:
; Line 553
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@GetSOF
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@GetSOF:
	DD	3
	DD	$LN21@GetSOF
$LN21@GetSOF:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN18@GetSOF
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN19@GetSOF
	DD	-41					; ffffffd7H
	DD	1
	DD	$LN20@GetSOF
$LN20@GetSOF:
	DB	99					; 00000063H
	DB	0
$LN19@GetSOF:
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN18@GetSOF:
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
__GetSOF ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetU16
_TEXT	SEGMENT
_c1$ = -17						; size = 1
_c0$ = -5						; size = 1
_pContext$ = 8						; size = 4
_pValue$ = 12						; size = 4
__GetU16 PROC						; COMDAT
; Line 282
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 284
	mov	esi, esp
	lea	eax, DWORD PTR _c0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@GetU16
; Line 285
	mov	eax, 1
	jmp	SHORT $LN3@GetU16
$LN2@GetU16:
; Line 287
	mov	esi, esp
	lea	eax, DWORD PTR _c1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@GetU16
; Line 288
	mov	eax, 1
	jmp	SHORT $LN3@GetU16
$LN1@GetU16:
; Line 290
	movzx	eax, BYTE PTR _c0$[ebp]
	shl	eax, 8
	movzx	ecx, BYTE PTR _c1$[ebp]
	or	eax, ecx
	mov	edx, DWORD PTR _pValue$[ebp]
	mov	WORD PTR [edx], ax
; Line 291
	xor	eax, eax
$LN3@GetU16:
; Line 292
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@GetU16
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@GetU16:
	DD	2
	DD	$LN7@GetU16
$LN7@GetU16:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN5@GetU16
	DD	-17					; ffffffefH
	DD	1
	DD	$LN6@GetU16
$LN6@GetU16:
	DB	99					; 00000063H
	DB	49					; 00000031H
	DB	0
$LN5@GetU16:
	DB	99					; 00000063H
	DB	48					; 00000030H
	DB	0
__GetU16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetInt
_TEXT	SEGMENT
_c1$ = -17						; size = 1
_c0$ = -5						; size = 1
_pContext$ = 8						; size = 4
_pValue$ = 12						; size = 4
__GetInt PROC						; COMDAT
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 303
	mov	esi, esp
	lea	eax, DWORD PTR _c0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@GetInt
; Line 304
	mov	eax, 1
	jmp	SHORT $LN3@GetInt
$LN2@GetInt:
; Line 306
	mov	esi, esp
	lea	eax, DWORD PTR _c1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@GetInt
; Line 307
	mov	eax, 1
	jmp	SHORT $LN3@GetInt
$LN1@GetInt:
; Line 309
	movzx	eax, BYTE PTR _c0$[ebp]
	shl	eax, 8
	movzx	ecx, BYTE PTR _c1$[ebp]
	or	eax, ecx
	mov	edx, DWORD PTR _pValue$[ebp]
	mov	DWORD PTR [edx], eax
; Line 310
	xor	eax, eax
$LN3@GetInt:
; Line 311
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@GetInt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@GetInt:
	DD	2
	DD	$LN7@GetInt
$LN7@GetInt:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN5@GetInt
	DD	-17					; ffffffefH
	DD	1
	DD	$LN6@GetInt
$LN6@GetInt:
	DB	99					; 00000063H
	DB	49					; 00000031H
	DB	0
$LN5@GetInt:
	DB	99					; 00000063H
	DB	48					; 00000030H
	DB	0
__GetInt ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __ReadMarkers
_TEXT	SEGMENT
tv70 = -196						; size = 4
_pContext$ = 8						; size = 4
_pMarker$ = 12						; size = 4
__ReadMarkers PROC					; COMDAT
; Line 679
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN15@ReadMarker:
; Line 680
	mov	eax, 1
	test	eax, eax
	je	$LN16@ReadMarker
; Line 682
	mov	eax, DWORD PTR _pMarker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__ReadNextMarker
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@ReadMarker
; Line 683
	mov	eax, 1
	jmp	$LN16@ReadMarker
$LN13@ReadMarker:
; Line 686
	mov	eax, DWORD PTR _pMarker$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR tv70[ebp]
	sub	edx, 1
	mov	DWORD PTR tv70[ebp], edx
	cmp	DWORD PTR tv70[ebp], 220		; 000000dcH
	ja	SHORT $LN1@ReadMarker
	mov	eax, DWORD PTR tv70[ebp]
	movzx	ecx, BYTE PTR $LN18@ReadMarker[eax]
	jmp	DWORD PTR $LN19@ReadMarker[ecx*4]
$LN10@ReadMarker:
; Line 703
	xor	eax, eax
	jmp	SHORT $LN16@ReadMarker
$LN9@ReadMarker:
; Line 706
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__GetDHT
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@ReadMarker
; Line 707
	mov	eax, 1
	jmp	SHORT $LN16@ReadMarker
$LN8@ReadMarker:
; Line 709
	jmp	SHORT $LN11@ReadMarker
$LN7@ReadMarker:
; Line 712
	mov	eax, 1
	jmp	SHORT $LN16@ReadMarker
$LN6@ReadMarker:
; Line 715
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__GetDQT
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@ReadMarker
; Line 716
	mov	eax, 1
	jmp	SHORT $LN16@ReadMarker
$LN5@ReadMarker:
; Line 718
	jmp	SHORT $LN11@ReadMarker
$LN4@ReadMarker:
; Line 721
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__GetDRI
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@ReadMarker
; Line 722
	mov	eax, 1
	jmp	SHORT $LN16@ReadMarker
$LN3@ReadMarker:
; Line 724
	jmp	SHORT $LN11@ReadMarker
$LN2@ReadMarker:
; Line 735
	mov	eax, 1
	jmp	SHORT $LN16@ReadMarker
$LN1@ReadMarker:
; Line 737
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__SkipVariable
	add	esp, 4
$LN11@ReadMarker:
; Line 739
	jmp	$LN15@ReadMarker
$LN16@ReadMarker:
; Line 740
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN19@ReadMarker:
	DD	$LN2@ReadMarker
	DD	$LN10@ReadMarker
	DD	$LN9@ReadMarker
	DD	$LN7@ReadMarker
	DD	$LN6@ReadMarker
	DD	$LN4@ReadMarker
	DD	$LN1@ReadMarker
$LN18@ReadMarker:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	1
	DB	1
	DB	1
	DB	2
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	3
	DB	1
	DB	1
	DB	1
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	1
	DB	1
	DB	1
	DB	4
	DB	6
	DB	5
__ReadMarkers ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __ReadNextMarker
_TEXT	SEGMENT
_c$ = -5						; size = 1
_pContext$ = 8						; size = 4
_pMarker$ = 12						; size = 4
__ReadNextMarker PROC					; COMDAT
; Line 418
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN11@ReadNextMa:
; Line 420
	mov	eax, 1
	test	eax, eax
	je	$LN10@ReadNextMa
; Line 421
	mov	esi, esp
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN8@ReadNextMa
	mov	eax, 1
	jmp	SHORT $LN12@ReadNextMa
$LN8@ReadNextMa:
; Line 423
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN5@ReadNextMa
; Line 424
	mov	esi, esp
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN6@ReadNextMa
	mov	eax, 1
	jmp	SHORT $LN12@ReadNextMa
$LN6@ReadNextMa:
; Line 425
	jmp	SHORT $LN8@ReadNextMa
$LN5@ReadNextMa:
; Line 428
	mov	esi, esp
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN4@ReadNextMa
	mov	eax, 1
	jmp	SHORT $LN12@ReadNextMa
$LN4@ReadNextMa:
; Line 429
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN5@ReadNextMa
; Line 430
	movzx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	je	SHORT $LN1@ReadNextMa
; Line 431
	jmp	SHORT $LN10@ReadNextMa
$LN1@ReadNextMa:
; Line 433
	jmp	$LN11@ReadNextMa
$LN10@ReadNextMa:
; Line 434
	mov	eax, DWORD PTR _pMarker$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
; Line 435
	xor	eax, eax
$LN12@ReadNextMa:
; Line 436
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@ReadNextMa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@ReadNextMa:
	DD	1
	DD	$LN15@ReadNextMa
$LN15@ReadNextMa:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN14@ReadNextMa
$LN14@ReadNextMa:
	DB	99					; 00000063H
	DB	0
__ReadNextMarker ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SkipVariable
_TEXT	SEGMENT
_Length$ = -8						; size = 4
_pContext$ = 8						; size = 4
__SkipVariable PROC					; COMDAT
; Line 464
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 466
	lea	eax, DWORD PTR _Length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetInt
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@SkipVariab
	mov	eax, 1
	jmp	SHORT $LN2@SkipVariab
$LN1@SkipVariab:
; Line 467
	mov	eax, DWORD PTR _Length$[ebp]
	sub	eax, 2
	mov	DWORD PTR _Length$[ebp], eax
; Line 468
	mov	eax, DWORD PTR _Length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__SkipInputData
	add	esp, 8
; Line 469
	xor	eax, eax
$LN2@SkipVariab:
; Line 470
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SkipVariab
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@SkipVariab:
	DD	1
	DD	$LN5@SkipVariab
$LN5@SkipVariab:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@SkipVariab
$LN4@SkipVariab:
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
__SkipVariable ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SkipInputData
_TEXT	SEGMENT
_pContext$ = 8						; size = 4
_Length$ = 12						; size = 4
__SkipInputData PROC					; COMDAT
; Line 445
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 446
	cmp	DWORD PTR _Length$[ebp], 0
	jle	SHORT $LN4@SkipInputD
$LN2@SkipInputD:
; Line 447
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _Length$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jle	SHORT $LN1@SkipInputD
; Line 448
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _Length$[ebp]
	sub	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _Length$[ebp], ecx
; Line 449
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__FillInputBuffer
	add	esp, 4
; Line 450
	jmp	SHORT $LN2@SkipInputD
$LN1@SkipInputD:
; Line 451
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _Length$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 452
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _Length$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN4@SkipInputD:
; Line 454
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SkipInputData ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDQT
_TEXT	SEGMENT
_Word$10864 = -80					; size = 2
_Byte$10863 = -65					; size = 1
_i$ = -56						; size = 4
_pData$ = -44						; size = 4
_Precision$ = -29					; size = 1
_n$ = -17						; size = 1
_Length$ = -8						; size = 4
_pContext$ = 8						; size = 4
__GetDQT PROC						; COMDAT
; Line 479
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 484
	lea	eax, DWORD PTR _Length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetInt
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@GetDQT
	mov	eax, 1
	jmp	$LN16@GetDQT
$LN15@GetDQT:
; Line 485
	mov	eax, DWORD PTR _Length$[ebp]
	sub	eax, 2
	mov	DWORD PTR _Length$[ebp], eax
$LN14@GetDQT:
; Line 486
	cmp	DWORD PTR _Length$[ebp], 0
	jle	$LN13@GetDQT
; Line 487
	mov	esi, esp
	lea	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN12@GetDQT
	mov	eax, 1
	jmp	$LN16@GetDQT
$LN12@GetDQT:
; Line 488
	movzx	eax, BYTE PTR _n$[ebp]
	sar	eax, 4
	mov	BYTE PTR _Precision$[ebp], al
; Line 489
	movzx	eax, BYTE PTR _n$[ebp]
	and	eax, 15					; 0000000fH
	mov	BYTE PTR _n$[ebp], al
; Line 491
	movzx	eax, BYTE PTR _n$[ebp]
	cmp	eax, 4
	jb	SHORT $LN11@GetDQT
; Line 492
	mov	eax, 1
	jmp	$LN16@GetDQT
$LN11@GetDQT:
; Line 494
	movzx	eax, BYTE PTR _n$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _pContext$[ebp]
	lea	edx, DWORD PTR [ecx+eax+28940]
	mov	DWORD PTR _pData$[ebp], edx
; Line 495
	movzx	eax, BYTE PTR _n$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [ecx+eax*4+29452], edx
; Line 496
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@GetDQT
$LN9@GetDQT:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@GetDQT:
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	SHORT $LN8@GetDQT
; Line 499
	movzx	eax, BYTE PTR _Precision$[ebp]
	test	eax, eax
	je	SHORT $LN7@GetDQT
; Line 500
	lea	eax, DWORD PTR _Word$10864[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetU16
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@GetDQT
	mov	eax, 1
	jmp	$LN16@GetDQT
$LN6@GetDQT:
; Line 501
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR __aCoeffOrder[eax]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	ax, WORD PTR _Word$10864[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 502
	jmp	SHORT $LN5@GetDQT
$LN7@GetDQT:
; Line 503
	mov	esi, esp
	lea	eax, DWORD PTR _Byte$10863[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN4@GetDQT
	mov	eax, 1
	jmp	SHORT $LN16@GetDQT
$LN4@GetDQT:
; Line 504
	movzx	ax, BYTE PTR _Byte$10863[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN5@GetDQT:
; Line 506
	jmp	$LN9@GetDQT
$LN8@GetDQT:
; Line 507
	movzx	eax, BYTE PTR _Precision$[ebp]
	test	eax, eax
	je	SHORT $LN3@GetDQT
; Line 508
	mov	eax, DWORD PTR _Length$[ebp]
	sub	eax, 129				; 00000081H
	mov	DWORD PTR _Length$[ebp], eax
; Line 509
	jmp	SHORT $LN2@GetDQT
$LN3@GetDQT:
; Line 510
	mov	eax, DWORD PTR _Length$[ebp]
	sub	eax, 65					; 00000041H
	mov	DWORD PTR _Length$[ebp], eax
$LN2@GetDQT:
; Line 512
	jmp	$LN14@GetDQT
$LN13@GetDQT:
; Line 513
	cmp	DWORD PTR _Length$[ebp], 0
	je	SHORT $LN1@GetDQT
; Line 514
	mov	eax, 1
	jmp	SHORT $LN16@GetDQT
$LN1@GetDQT:
; Line 516
	xor	eax, eax
$LN16@GetDQT:
; Line 517
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@GetDQT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@GetDQT:
	DD	4
	DD	$LN22@GetDQT
$LN22@GetDQT:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN18@GetDQT
	DD	-17					; ffffffefH
	DD	1
	DD	$LN19@GetDQT
	DD	-65					; ffffffbfH
	DD	1
	DD	$LN20@GetDQT
	DD	-80					; ffffffb0H
	DD	2
	DD	$LN21@GetDQT
$LN21@GetDQT:
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN20@GetDQT:
	DB	66					; 00000042H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN19@GetDQT:
	DB	110					; 0000006eH
	DB	0
$LN18@GetDQT:
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
__GetDQT ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDHT
_TEXT	SEGMENT
tv147 = -268						; size = 4
_c$10913 = -65						; size = 1
_pData$10907 = -56					; size = 4
_Index$10906 = -41					; size = 1
_i$10905 = -32						; size = 4
_Cnt$ = -20						; size = 4
_Length$ = -8						; size = 4
_pContext$ = 8						; size = 4
__GetDHT PROC						; COMDAT
; Line 562
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 564
	lea	eax, DWORD PTR _Length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetInt
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@GetDHT
	mov	eax, 1
	jmp	$LN16@GetDHT
$LN15@GetDHT:
; Line 565
	mov	eax, DWORD PTR _Length$[ebp]
	sub	eax, 2
	mov	DWORD PTR _Length$[ebp], eax
$LN14@GetDHT:
; Line 566
	cmp	DWORD PTR _Length$[ebp], 16		; 00000010H
	jle	$LN13@GetDHT
; Line 570
	mov	esi, esp
	lea	eax, DWORD PTR _Index$10906[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN12@GetDHT
	mov	eax, 1
	jmp	$LN16@GetDHT
$LN12@GetDHT:
; Line 571
	movzx	eax, BYTE PTR _Index$10906[ebp]
	and	eax, 15					; 0000000fH
	movzx	ecx, BYTE PTR _Index$10906[ebp]
	and	ecx, 16					; 00000010H
	sar	ecx, 4
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	BYTE PTR _Index$10906[ebp], dl
; Line 572
	movzx	eax, BYTE PTR _Index$10906[ebp]
	cmp	eax, 8
	jle	SHORT $LN11@GetDHT
; Line 573
	mov	eax, 1
	jmp	$LN16@GetDHT
$LN11@GetDHT:
; Line 576
	movzx	eax, BYTE PTR _Index$10906[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [ecx+eax+44], 1
; Line 577
	movzx	eax, BYTE PTR _Index$10906[ebp]
	imul	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _pContext$[ebp]
	lea	edx, DWORD PTR [ecx+eax+52]
	mov	DWORD PTR _pData$10907[ebp], edx
; Line 578
	mov	DWORD PTR _Cnt$[ebp], 0
; Line 579
	mov	eax, DWORD PTR _pData$10907[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _pData$10907[ebp]
	add	ecx, 1
	mov	DWORD PTR _pData$10907[ebp], ecx
; Line 580
	mov	DWORD PTR _i$10905[ebp], 1
	jmp	SHORT $LN10@GetDHT
$LN9@GetDHT:
	mov	eax, DWORD PTR _i$10905[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10905[ebp], eax
$LN10@GetDHT:
	cmp	DWORD PTR _i$10905[ebp], 16		; 00000010H
	jg	SHORT $LN8@GetDHT
; Line 582
	mov	esi, esp
	lea	eax, DWORD PTR _c$10913[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN7@GetDHT
	mov	eax, 1
	jmp	$LN16@GetDHT
$LN7@GetDHT:
; Line 583
	mov	eax, DWORD PTR _pData$10907[ebp]
	mov	cl, BYTE PTR _c$10913[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _pData$10907[ebp]
	add	edx, 1
	mov	DWORD PTR _pData$10907[ebp], edx
; Line 584
	movzx	eax, BYTE PTR _c$10913[ebp]
	add	eax, DWORD PTR _Cnt$[ebp]
	mov	DWORD PTR _Cnt$[ebp], eax
; Line 585
	jmp	SHORT $LN9@GetDHT
$LN8@GetDHT:
; Line 586
	mov	eax, DWORD PTR _Length$[ebp]
	sub	eax, 17					; 00000011H
	mov	DWORD PTR _Length$[ebp], eax
; Line 587
	cmp	DWORD PTR _Cnt$[ebp], 255		; 000000ffH
	jg	SHORT $LN5@GetDHT
	mov	eax, DWORD PTR _Cnt$[ebp]
	cmp	eax, DWORD PTR _Length$[ebp]
	jle	SHORT $LN6@GetDHT
$LN5@GetDHT:
; Line 588
	mov	eax, 1
	jmp	SHORT $LN16@GetDHT
$LN6@GetDHT:
; Line 591
	movzx	eax, BYTE PTR _Index$10906[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _pContext$[ebp]
	lea	edx, DWORD PTR [ecx+eax+188]
	mov	DWORD PTR _pData$10907[ebp], edx
; Line 592
	mov	DWORD PTR _i$10905[ebp], 0
	jmp	SHORT $LN4@GetDHT
$LN3@GetDHT:
	mov	eax, DWORD PTR _i$10905[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10905[ebp], eax
$LN4@GetDHT:
	mov	eax, DWORD PTR _i$10905[ebp]
	cmp	eax, DWORD PTR _Cnt$[ebp]
	jge	SHORT $LN2@GetDHT
; Line 593
	mov	eax, DWORD PTR _pData$10907[ebp]
	mov	DWORD PTR tv147[ebp], eax
	mov	ecx, DWORD PTR _pData$10907[ebp]
	add	ecx, 1
	mov	DWORD PTR _pData$10907[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR tv147[ebp]
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@GetDHT
	mov	eax, 1
	jmp	SHORT $LN16@GetDHT
$LN1@GetDHT:
; Line 594
	jmp	SHORT $LN3@GetDHT
$LN2@GetDHT:
; Line 595
	mov	eax, DWORD PTR _Length$[ebp]
	sub	eax, DWORD PTR _Cnt$[ebp]
	mov	DWORD PTR _Length$[ebp], eax
; Line 596
	jmp	$LN14@GetDHT
$LN13@GetDHT:
; Line 597
	xor	eax, eax
$LN16@GetDHT:
; Line 598
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@GetDHT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN22@GetDHT:
	DD	3
	DD	$LN21@GetDHT
$LN21@GetDHT:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN18@GetDHT
	DD	-41					; ffffffd7H
	DD	1
	DD	$LN19@GetDHT
	DD	-65					; ffffffbfH
	DD	1
	DD	$LN20@GetDHT
$LN20@GetDHT:
	DB	99					; 00000063H
	DB	0
$LN19@GetDHT:
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN18@GetDHT:
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
__GetDHT ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDRI
_TEXT	SEGMENT
_Length$ = -8						; size = 4
_pContext$ = 8						; size = 4
__GetDRI PROC						; COMDAT
; Line 660
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 662
	lea	eax, DWORD PTR _Length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetInt
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@GetDRI
	mov	eax, 1
	jmp	SHORT $LN4@GetDRI
$LN3@GetDRI:
; Line 663
	cmp	DWORD PTR _Length$[ebp], 4
	je	SHORT $LN2@GetDRI
	mov	eax, 1
	jmp	SHORT $LN4@GetDRI
$LN2@GetDRI:
; Line 664
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 29756				; 0000743cH
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetInt
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@GetDRI
	mov	eax, 1
	jmp	SHORT $LN4@GetDRI
$LN1@GetDRI:
; Line 665
	xor	eax, eax
$LN4@GetDRI:
; Line 666
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@GetDRI
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@GetDRI:
	DD	1
	DD	$LN7@GetDRI
$LN7@GetDRI:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@GetDRI
$LN6@GetDRI:
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
__GetDRI ENDP
_TEXT	ENDS
PUBLIC	_GUI_JPEG__DecodeProgressiveBanding
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_JPEG__DecodeProgressiveBanding
_TEXT	SEGMENT
_pfDecodeBlock$12226 = -56				; size = 4
_RefinementScan$12217 = -44				; size = 4
_DC_OnlyScan$12216 = -32				; size = 4
_NumCompsPerFrame$ = -17				; size = 1
_i$ = -8						; size = 4
_pContext$ = 8						; size = 4
_GUI_JPEG__DecodeProgressiveBanding PROC		; COMDAT
; Line 2847
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2850
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	cl, BYTE PTR [eax+29468]
	mov	BYTE PTR _NumCompsPerFrame$[ebp], cl
; Line 2851
	movzx	eax, BYTE PTR _NumCompsPerFrame$[ebp]
	cmp	eax, 4
	jne	SHORT $LN19@GUI_JPEG__@3
; Line 2852
	mov	eax, 1
	jmp	$LN21@GUI_JPEG__@3
$LN19@GUI_JPEG__@3:
; Line 2854
	mov	eax, 1
	test	eax, eax
	je	$LN18@GUI_JPEG__@3
; Line 2859
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__InitScan
	add	esp, 4
	test	eax, eax
	je	SHORT $LN17@GUI_JPEG__@3
; Line 2861
	jmp	$LN18@GUI_JPEG__@3
$LN17@GUI_JPEG__@3:
; Line 2863
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29556]
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	mov	DWORD PTR _DC_OnlyScan$12216[ebp], ecx
; Line 2864
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29559]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	DWORD PTR _RefinementScan$12217[ebp], ecx
; Line 2865
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29556]
	mov	edx, DWORD PTR _pContext$[ebp]
	movzx	eax, BYTE PTR [edx+29557]
	cmp	ecx, eax
	jle	SHORT $LN16@GUI_JPEG__@3
; Line 2866
	mov	eax, 1
	jmp	$LN21@GUI_JPEG__@3
$LN16@GUI_JPEG__@3:
; Line 2868
	cmp	DWORD PTR _DC_OnlyScan$12216[ebp], 0
	je	SHORT $LN15@GUI_JPEG__@3
; Line 2869
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29557]
	test	ecx, ecx
	je	SHORT $LN14@GUI_JPEG__@3
; Line 2870
	mov	eax, 1
	jmp	$LN21@GUI_JPEG__@3
$LN14@GUI_JPEG__@3:
; Line 2871
	jmp	SHORT $LN13@GUI_JPEG__@3
$LN15@GUI_JPEG__@3:
; Line 2872
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29485]
	cmp	ecx, 1
	je	SHORT $LN13@GUI_JPEG__@3
; Line 2873
	mov	eax, 1
	jmp	$LN21@GUI_JPEG__@3
$LN13@GUI_JPEG__@3:
; Line 2875
	cmp	DWORD PTR _RefinementScan$12217[ebp], 0
	je	SHORT $LN11@GUI_JPEG__@3
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29558]
	mov	edx, DWORD PTR _pContext$[ebp]
	movzx	eax, BYTE PTR [edx+29559]
	cmp	ecx, eax
	je	SHORT $LN11@GUI_JPEG__@3
; Line 2876
	mov	eax, 1
	jmp	$LN21@GUI_JPEG__@3
$LN11@GUI_JPEG__@3:
; Line 2879
	cmp	DWORD PTR _DC_OnlyScan$12216[ebp], 0
	je	SHORT $LN10@GUI_JPEG__@3
; Line 2880
	cmp	DWORD PTR _RefinementScan$12217[ebp], 0
	je	SHORT $LN9@GUI_JPEG__@3
; Line 2881
	mov	DWORD PTR _pfDecodeBlock$12226[ebp], OFFSET __DecodeBlockDC_RefineBanding
; Line 2882
	jmp	SHORT $LN8@GUI_JPEG__@3
$LN9@GUI_JPEG__@3:
; Line 2883
	mov	DWORD PTR _pfDecodeBlock$12226[ebp], OFFSET __DecodeBlockDC_FirstBanding
$LN8@GUI_JPEG__@3:
; Line 2885
	jmp	SHORT $LN7@GUI_JPEG__@3
$LN10@GUI_JPEG__@3:
; Line 2886
	cmp	DWORD PTR _RefinementScan$12217[ebp], 0
	je	SHORT $LN6@GUI_JPEG__@3
; Line 2887
	mov	DWORD PTR _pfDecodeBlock$12226[ebp], OFFSET __DecodeBlockAC_RefineBanding
; Line 2888
	jmp	SHORT $LN7@GUI_JPEG__@3
$LN6@GUI_JPEG__@3:
; Line 2889
	mov	DWORD PTR _pfDecodeBlock$12226[ebp], OFFSET __DecodeBlockAC_FirstBanding
$LN7@GUI_JPEG__@3:
; Line 2893
	mov	eax, DWORD PTR _pfDecodeBlock$12226[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__DecodeScanProg
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@GUI_JPEG__@3
; Line 2894
	mov	eax, 1
	jmp	SHORT $LN21@GUI_JPEG__@3
$LN4@GUI_JPEG__@3:
; Line 2896
	jmp	$LN19@GUI_JPEG__@3
$LN18@GUI_JPEG__@3:
; Line 2897
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	dl, BYTE PTR [ecx+29468]
	mov	BYTE PTR [eax+29485], dl
; Line 2898
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@GUI_JPEG__@3
$LN2@GUI_JPEG__@3:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@GUI_JPEG__@3:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29485]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN1@GUI_JPEG__@3
; Line 2899
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax+29486], cl
; Line 2900
	jmp	SHORT $LN2@GUI_JPEG__@3
$LN1@GUI_JPEG__@3:
; Line 2901
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__CalcMCUBlockOrder
	add	esp, 4
; Line 2902
	xor	eax, eax
$LN21@GUI_JPEG__@3:
; Line 2903
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_JPEG__DecodeProgressiveBanding ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __CalcMCUBlockOrder
_TEXT	SEGMENT
tv200 = -308						; size = 4
_NumBlocks$11022 = -108					; size = 4
_aCompVBlocks$ = -96					; size = 16
_aCompHBlocks$ = -72					; size = 16
_MaxVSamp$ = -48					; size = 4
_MaxHSamp$ = -36					; size = 4
_ComponentId$ = -24					; size = 4
_ComponentNum$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_pContext$ = 8						; size = 4
__CalcMCUBlockOrder PROC				; COMDAT
; Line 768
	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 772
	mov	DWORD PTR _MaxHSamp$[ebp], 0
; Line 773
	mov	DWORD PTR _MaxVSamp$[ebp], 0
; Line 774
	mov	DWORD PTR _ComponentId$[ebp], 0
	jmp	SHORT $LN17@CalcMCUBlo
$LN16@CalcMCUBlo:
	mov	eax, DWORD PTR _ComponentId$[ebp]
	add	eax, 1
	mov	DWORD PTR _ComponentId$[ebp], eax
$LN17@CalcMCUBlo:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29468]
	cmp	DWORD PTR _ComponentId$[ebp], ecx
	jge	SHORT $LN15@CalcMCUBlo
; Line 775
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$[ebp]
	movzx	ecx, BYTE PTR [eax+29469]
	cmp	ecx, DWORD PTR _MaxHSamp$[ebp]
	jle	SHORT $LN14@CalcMCUBlo
; Line 776
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$[ebp]
	movzx	ecx, BYTE PTR [eax+29469]
	mov	DWORD PTR _MaxHSamp$[ebp], ecx
$LN14@CalcMCUBlo:
; Line 778
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$[ebp]
	movzx	ecx, BYTE PTR [eax+29473]
	cmp	ecx, DWORD PTR _MaxVSamp$[ebp]
	jle	SHORT $LN13@CalcMCUBlo
; Line 779
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$[ebp]
	movzx	ecx, BYTE PTR [eax+29473]
	mov	DWORD PTR _MaxVSamp$[ebp], ecx
$LN13@CalcMCUBlo:
; Line 781
	jmp	SHORT $LN16@CalcMCUBlo
$LN15@CalcMCUBlo:
; Line 782
	mov	DWORD PTR _ComponentId$[ebp], 0
	jmp	SHORT $LN12@CalcMCUBlo
$LN11@CalcMCUBlo:
	mov	eax, DWORD PTR _ComponentId$[ebp]
	add	eax, 1
	mov	DWORD PTR _ComponentId$[ebp], eax
$LN12@CalcMCUBlo:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29468]
	cmp	DWORD PTR _ComponentId$[ebp], ecx
	jge	SHORT $LN10@CalcMCUBlo
; Line 783
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	mov	edx, DWORD PTR _pContext$[ebp]
	add	edx, DWORD PTR _ComponentId$[ebp]
	movzx	eax, BYTE PTR [edx+29469]
	imul	ecx, eax
	mov	edx, DWORD PTR _MaxHSamp$[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	cdq
	idiv	DWORD PTR _MaxHSamp$[ebp]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	ecx, DWORD PTR _ComponentId$[ebp]
	mov	DWORD PTR _aCompHBlocks$[ebp+ecx*4], eax
; Line 784
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, WORD PTR [eax+14]
	mov	edx, DWORD PTR _pContext$[ebp]
	add	edx, DWORD PTR _ComponentId$[ebp]
	movzx	eax, BYTE PTR [edx+29473]
	imul	ecx, eax
	mov	edx, DWORD PTR _MaxVSamp$[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	cdq
	idiv	DWORD PTR _MaxVSamp$[ebp]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	ecx, DWORD PTR _ComponentId$[ebp]
	mov	DWORD PTR _aCompVBlocks$[ebp+ecx*4], eax
; Line 785
	jmp	$LN11@CalcMCUBlo
$LN10@CalcMCUBlo:
; Line 786
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29485]
	cmp	ecx, 1
	jne	SHORT $LN9@CalcMCUBlo
; Line 787
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29486]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR _aCompHBlocks$[ebp+ecx*4]
	mov	DWORD PTR [edx+29768], eax
; Line 788
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29486]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR _aCompVBlocks$[ebp+ecx*4]
	mov	DWORD PTR [edx+29772], eax
; Line 789
	jmp	SHORT $LN8@CalcMCUBlo
$LN9@CalcMCUBlo:
; Line 790
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	eax, WORD PTR [eax+12]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	ecx, DWORD PTR _MaxHSamp$[ebp]
	lea	eax, DWORD PTR [eax+ecx-1]
	cdq
	idiv	DWORD PTR _MaxHSamp$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29768], eax
; Line 791
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	eax, WORD PTR [eax+14]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	ecx, DWORD PTR _MaxVSamp$[ebp]
	lea	eax, DWORD PTR [eax+ecx-1]
	cdq
	idiv	DWORD PTR _MaxVSamp$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29772], eax
$LN8@CalcMCUBlo:
; Line 793
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29485]
	cmp	ecx, 1
	jne	SHORT $LN7@CalcMCUBlo
; Line 794
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29486]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29780], ecx
; Line 795
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29776], 1
; Line 796
	jmp	$LN18@CalcMCUBlo
$LN7@CalcMCUBlo:
; Line 797
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29776], 0
; Line 798
	mov	DWORD PTR _ComponentNum$[ebp], 0
	jmp	SHORT $LN5@CalcMCUBlo
$LN4@CalcMCUBlo:
	mov	eax, DWORD PTR _ComponentNum$[ebp]
	add	eax, 1
	mov	DWORD PTR _ComponentNum$[ebp], eax
$LN5@CalcMCUBlo:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29485]
	cmp	DWORD PTR _ComponentNum$[ebp], ecx
	jge	SHORT $LN18@CalcMCUBlo
; Line 800
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentNum$[ebp]
	movzx	ecx, BYTE PTR [eax+29486]
	mov	DWORD PTR _ComponentId$[ebp], ecx
; Line 801
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$[ebp]
	movzx	ecx, BYTE PTR [eax+29469]
	mov	edx, DWORD PTR _pContext$[ebp]
	add	edx, DWORD PTR _ComponentId$[ebp]
	movzx	eax, BYTE PTR [edx+29473]
	imul	ecx, eax
	mov	DWORD PTR _NumBlocks$11022[ebp], ecx
$LN2@CalcMCUBlo:
; Line 802
	mov	eax, DWORD PTR _NumBlocks$11022[ebp]
	mov	DWORD PTR tv200[ebp], eax
	mov	ecx, DWORD PTR _NumBlocks$11022[ebp]
	sub	ecx, 1
	mov	DWORD PTR _NumBlocks$11022[ebp], ecx
	cmp	DWORD PTR tv200[ebp], 0
	je	SHORT $LN1@CalcMCUBlo
; Line 803
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29776]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR _ComponentId$[ebp]
	mov	DWORD PTR [edx+ecx*4+29780], eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+29776]
	add	edx, 1
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29776], edx
; Line 804
	jmp	SHORT $LN2@CalcMCUBlo
$LN1@CalcMCUBlo:
; Line 805
	jmp	$LN4@CalcMCUBlo
$LN18@CalcMCUBlo:
; Line 807
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@CalcMCUBlo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN23@CalcMCUBlo:
	DD	2
	DD	$LN22@CalcMCUBlo
$LN22@CalcMCUBlo:
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN20@CalcMCUBlo
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN21@CalcMCUBlo
$LN21@CalcMCUBlo:
	DB	97					; 00000061H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	86					; 00000056H
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	0
$LN20@CalcMCUBlo:
	DB	97					; 00000061H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	72					; 00000048H
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	0
__CalcMCUBlockOrder ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DecodeBlockDC_FirstBanding
_TEXT	SEGMENT
tv92 = -232						; size = 4
_p$ = -32						; size = 4
_r$ = -20						; size = 4
_s$ = -8						; size = 4
_pContext$ = 8						; size = 4
_ComponentId$ = 12					; size = 4
_BlockX$ = 16						; size = 4
_BlockY$ = 20						; size = 4
__DecodeBlockDC_FirstBanding PROC			; COMDAT
; Line 1167
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1172
	mov	eax, DWORD PTR _BlockY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BlockX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _pContext$[ebp]
	lea	ecx, DWORD PTR [eax+edx+29560]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__CoeffBufferGetP_Locked
	add	esp, 20					; 00000014H
	mov	DWORD PTR _p$[ebp], eax
; Line 1173
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$[ebp]
	movzx	ecx, BYTE PTR [eax+29490]
	imul	ecx, 3328				; 00000d00H
	mov	edx, DWORD PTR _pContext$[ebp]
	lea	eax, DWORD PTR [edx+ecx+2236]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__HuffDecode
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
; Line 1174
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN2@DecodeBloc
; Line 1175
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetBitsNoMarker
	add	esp, 8
	mov	DWORD PTR _r$[ebp], eax
; Line 1176
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	cmp	ecx, DWORD PTR __aExtendTest[eax*4]
	jge	SHORT $LN5@DecodeBloc
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, DWORD PTR __aExtendOffset[edx*4]
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN6@DecodeBloc
$LN5@DecodeBloc:
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR tv92[ebp], ecx
$LN6@DecodeBloc:
	mov	edx, DWORD PTR tv92[ebp]
	mov	DWORD PTR _s$[ebp], edx
$LN2@DecodeBloc:
; Line 1178
	mov	eax, DWORD PTR _ComponentId$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [ecx+eax*4+29540]
	mov	DWORD PTR _s$[ebp], edx
; Line 1179
	mov	eax, DWORD PTR _ComponentId$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+eax*4+29540], edx
; Line 1180
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN1@DecodeBloc
; Line 1181
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29558]
	mov	edx, DWORD PTR _s$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _p$[ebp]
	mov	WORD PTR [eax], dx
; Line 1182
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _p$[ebp], 0
$LN1@DecodeBloc:
; Line 1184
	xor	eax, eax
; Line 1185
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DecodeBlockDC_FirstBanding ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetBitsNoMarker
_TEXT	SEGMENT
tv72 = -232						; size = 4
_c1$10786 = -29						; size = 1
_c0$10785 = -17						; size = 1
_Value$ = -8						; size = 4
_pContext$ = 8						; size = 4
_NumBits$ = 12						; size = 4
__GetBitsNoMarker PROC					; COMDAT
; Line 353
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 356
	mov	ecx, 16					; 00000010H
	sub	ecx, DWORD PTR _NumBits$[ebp]
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [eax+36]
	shr	edx, cl
	mov	eax, 1
	mov	ecx, DWORD PTR _NumBits$[ebp]
	shl	eax, cl
	sub	eax, 1
	and	edx, eax
	mov	DWORD PTR _Value$[ebp], edx
; Line 358
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	sub	ecx, DWORD PTR _NumBits$[ebp]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR [edx+40], eax
	cmp	DWORD PTR tv72[ebp], 0
	jg	$LN4@GetBitsNoM
; Line 361
	lea	eax, DWORD PTR _c0$10785[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetU8_NoMarker
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@GetBitsNoM
; Line 362
	mov	eax, 255				; 000000ffH
	jmp	$LN5@GetBitsNoM
$LN3@GetBitsNoM:
; Line 364
	lea	eax, DWORD PTR _c1$10786[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetU8_NoMarker
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@GetBitsNoM
; Line 365
	mov	eax, 255				; 000000ffH
	jmp	$LN5@GetBitsNoM
$LN2@GetBitsNoM:
; Line 368
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _NumBits$[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _NumBits$[ebp], ecx
; Line 370
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _NumBits$[ebp]
	shl	edx, cl
	mov	ecx, 32					; 00000020H
	sub	ecx, DWORD PTR _NumBits$[ebp]
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [eax+36]
	shr	eax, cl
	or	edx, eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [ecx+36], edx
; Line 372
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	and	ecx, 65535				; 0000ffffH
	movzx	edx, BYTE PTR _c0$10785[ebp]
	shl	edx, 24					; 00000018H
	or	ecx, edx
	movzx	eax, BYTE PTR _c1$10786[ebp]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+36], ecx
; Line 374
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	neg	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	shl	eax, cl
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [edx+36]
	shr	edx, cl
	or	eax, edx
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [ecx+36], eax
; Line 376
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 377
	jmp	SHORT $LN1@GetBitsNoM
$LN4@GetBitsNoM:
; Line 379
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _NumBits$[ebp]
	shl	edx, cl
	mov	ecx, 32					; 00000020H
	sub	ecx, DWORD PTR _NumBits$[ebp]
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [eax+36]
	shr	eax, cl
	or	edx, eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [ecx+36], edx
$LN1@GetBitsNoM:
; Line 381
	mov	eax, DWORD PTR _Value$[ebp]
$LN5@GetBitsNoM:
; Line 382
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@GetBitsNoM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@GetBitsNoM:
	DD	2
	DD	$LN9@GetBitsNoM
$LN9@GetBitsNoM:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN7@GetBitsNoM
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN8@GetBitsNoM
$LN8@GetBitsNoM:
	DB	99					; 00000063H
	DB	49					; 00000031H
	DB	0
$LN7@GetBitsNoM:
	DB	99					; 00000063H
	DB	48					; 00000030H
	DB	0
__GetBitsNoMarker ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetU8_NoMarker
_TEXT	SEGMENT
_c$ = -5						; size = 1
_pContext$ = 8						; size = 4
_pData$ = 12						; size = 4
__GetU8_NoMarker PROC					; COMDAT
; Line 322
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 324
	mov	esi, esp
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN5@GetU8_NoMa
; Line 325
	mov	eax, 1
	jmp	SHORT $LN6@GetU8_NoMa
$LN5@GetU8_NoMa:
; Line 327
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN4@GetU8_NoMa
; Line 328
	mov	esi, esp
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@GetU8_NoMa
; Line 329
	mov	eax, 1
	jmp	SHORT $LN6@GetU8_NoMa
$LN3@GetU8_NoMa:
; Line 331
	movzx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	jne	SHORT $LN2@GetU8_NoMa
; Line 332
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH
; Line 333
	xor	eax, eax
	jmp	SHORT $LN6@GetU8_NoMa
; Line 334
	jmp	SHORT $LN4@GetU8_NoMa
$LN2@GetU8_NoMa:
; Line 335
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__StoreU8
	add	esp, 8
; Line 336
	push	255					; 000000ffH
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__StoreU8
	add	esp, 8
; Line 337
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH
; Line 338
	xor	eax, eax
	jmp	SHORT $LN6@GetU8_NoMa
$LN4@GetU8_NoMa:
; Line 341
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
; Line 342
	xor	eax, eax
$LN6@GetU8_NoMa:
; Line 343
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@GetU8_NoMa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@GetU8_NoMa:
	DD	1
	DD	$LN9@GetU8_NoMa
$LN9@GetU8_NoMa:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN8@GetU8_NoMa
$LN8@GetU8_NoMa:
	DB	99					; 00000063H
	DB	0
__GetU8_NoMarker ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __StoreU8
_TEXT	SEGMENT
_pContext$ = 8						; size = 4
_Byte$ = 12						; size = 1
__StoreU8 PROC						; COMDAT
; Line 266
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 267
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29]
	cmp	ecx, 4
	jne	SHORT $LN1@StoreU8
; Line 268
	mov	eax, 1
	jmp	SHORT $LN2@StoreU8
$LN1@StoreU8:
; Line 270
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	al, BYTE PTR _Byte$[ebp]
	mov	BYTE PTR [edx+ecx+25], al
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	dl, BYTE PTR [ecx+29]
	add	dl, 1
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29], dl
; Line 271
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+32], OFFSET __GetStuff
; Line 272
	xor	eax, eax
$LN2@StoreU8:
; Line 273
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__StoreU8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetStuff
_TEXT	SEGMENT
tv67 = -193						; size = 1
_pContext$ = 8						; size = 4
_pByte$ = 12						; size = 4
__GetStuff PROC						; COMDAT
; Line 249
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 250
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	cl, BYTE PTR [eax+29]
	sub	cl, 1
	mov	BYTE PTR tv67[ebp], cl
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	al, BYTE PTR tv67[ebp]
	mov	BYTE PTR [edx+29], al
	movzx	ecx, BYTE PTR tv67[ebp]
	mov	edx, DWORD PTR _pByte$[ebp]
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	cl, BYTE PTR [eax+ecx+25]
	mov	BYTE PTR [edx], cl
; Line 251
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29]
	test	ecx, ecx
	jne	SHORT $LN1@GetStuff
; Line 252
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+32], OFFSET __GetU8
$LN1@GetStuff:
; Line 254
	xor	eax, eax
; Line 255
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetStuff ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __HuffDecode
_TEXT	SEGMENT
_Symbol$ = -8						; size = 4
_pContext$ = 8						; size = 4
_pTable$ = 12						; size = 4
__HuffDecode PROC					; COMDAT
; Line 749
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 752
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _pTable$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _Symbol$[ebp], eax
	cmp	DWORD PTR _Symbol$[ebp], 0
	jge	SHORT $LN5@HuffDecode
; Line 754
	push	8
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__GetBitsNoMarker
	add	esp, 8
$LN4@HuffDecode:
; Line 756
	mov	esi, DWORD PTR _Symbol$[ebp]
	not	esi
	push	1
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__GetBitsNoMarker
	add	esp, 8
	mov	ecx, 1
	sub	ecx, eax
	add	esi, ecx
	mov	edx, DWORD PTR _pTable$[ebp]
	mov	eax, DWORD PTR [edx+esi*4+1280]
	mov	DWORD PTR _Symbol$[ebp], eax
; Line 757
	cmp	DWORD PTR _Symbol$[ebp], 0
	jl	SHORT $LN4@HuffDecode
; Line 758
	jmp	SHORT $LN1@HuffDecode
$LN5@HuffDecode:
; Line 759
	mov	eax, DWORD PTR _pTable$[ebp]
	add	eax, DWORD PTR _Symbol$[ebp]
	movzx	ecx, BYTE PTR [eax+1024]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	__GetBitsNoMarker
	add	esp, 8
$LN1@HuffDecode:
; Line 761
	mov	eax, DWORD PTR _Symbol$[ebp]
; Line 762
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__HuffDecode ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __CoeffBufferGetP_Locked
_TEXT	SEGMENT
_FirstBlockOfBand$11124 = -32				; size = 4
_BlockSize$ = -20					; size = 4
_p$ = -8						; size = 4
_pContext$ = 8						; size = 4
_ComponentId$ = 12					; size = 4
_pBuffer$ = 16						; size = 4
_BlockX$ = 20						; size = 4
_BlockY$ = 24						; size = 4
__CoeffBufferGetP_Locked PROC				; COMDAT
; Line 928
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 931
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+33952]
	test	ecx, ecx
	jne	SHORT $LN6@CoeffBuffe
; Line 932
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _BlockX$[ebp]
	jg	SHORT $LN5@CoeffBuffe
; Line 933
	xor	eax, eax
	jmp	$LN7@CoeffBuffe
$LN5@CoeffBuffe:
; Line 935
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _BlockY$[ebp]
	jg	SHORT $LN4@CoeffBuffe
; Line 936
	xor	eax, eax
	jmp	$LN7@CoeffBuffe
$LN4@CoeffBuffe:
; Line 938
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _BlockSize$[ebp], ecx
; Line 939
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 940
	mov	eax, DWORD PTR _BlockX$[ebp]
	imul	eax, DWORD PTR _BlockSize$[ebp]
	mov	ecx, DWORD PTR _BlockY$[ebp]
	imul	ecx, DWORD PTR _BlockSize$[ebp]
	mov	edx, DWORD PTR _pBuffer$[ebp]
	imul	ecx, DWORD PTR [edx]
	add	ecx, DWORD PTR _p$[ebp]
	add	ecx, eax
	mov	DWORD PTR _p$[ebp], ecx
; Line 941
	mov	eax, DWORD PTR _p$[ebp]
	jmp	SHORT $LN7@CoeffBuffe
; Line 942
	jmp	SHORT $LN7@CoeffBuffe
$LN6@CoeffBuffe:
; Line 944
	mov	eax, DWORD PTR _ComponentId$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+33968]
	mov	DWORD PTR _FirstBlockOfBand$11124[ebp], edx
; Line 945
	mov	eax, DWORD PTR _BlockY$[ebp]
	cmp	eax, DWORD PTR _FirstBlockOfBand$11124[ebp]
	jl	SHORT $LN2@CoeffBuffe
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+33960]
	mov	edx, DWORD PTR _FirstBlockOfBand$11124[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	cmp	DWORD PTR _BlockY$[ebp], eax
	jg	SHORT $LN2@CoeffBuffe
; Line 946
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _BlockSize$[ebp], ecx
; Line 947
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 948
	mov	eax, DWORD PTR _BlockX$[ebp]
	imul	eax, DWORD PTR _BlockSize$[ebp]
	mov	ecx, DWORD PTR _BlockY$[ebp]
	sub	ecx, DWORD PTR _FirstBlockOfBand$11124[ebp]
	imul	ecx, DWORD PTR _BlockSize$[ebp]
	mov	edx, DWORD PTR _pBuffer$[ebp]
	imul	ecx, DWORD PTR [edx]
	add	ecx, DWORD PTR _p$[ebp]
	add	ecx, eax
	mov	DWORD PTR _p$[ebp], ecx
; Line 949
	mov	eax, DWORD PTR _p$[ebp]
	jmp	SHORT $LN7@CoeffBuffe
; Line 950
	jmp	SHORT $LN7@CoeffBuffe
$LN2@CoeffBuffe:
; Line 951
	xor	eax, eax
$LN7@CoeffBuffe:
; Line 954
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__CoeffBufferGetP_Locked ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DecodeBlockDC_RefineBanding
_TEXT	SEGMENT
_p$ = -8						; size = 4
_pContext$ = 8						; size = 4
_ComponentId$ = 12					; size = 4
_BlockX$ = 16						; size = 4
_BlockY$ = 20						; size = 4
__DecodeBlockDC_RefineBanding PROC			; COMDAT
; Line 1194
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1197
	push	1
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__GetBitsNoMarker
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@DecodeBloc@2
; Line 1198
	mov	eax, DWORD PTR _BlockY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BlockX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _pContext$[ebp]
	lea	ecx, DWORD PTR [eax+edx+29560]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__CoeffBufferGetP_Locked
	add	esp, 20					; 00000014H
	mov	DWORD PTR _p$[ebp], eax
; Line 1199
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@DecodeBloc@2
; Line 1200
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29558]
	mov	edx, 1
	shl	edx, cl
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, WORD PTR [eax]
	or	ecx, edx
	mov	edx, DWORD PTR _p$[ebp]
	mov	WORD PTR [edx], cx
; Line 1201
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _p$[ebp], 0
$LN2@DecodeBloc@2:
; Line 1204
	xor	eax, eax
; Line 1205
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DecodeBlockDC_RefineBanding ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DecodeBlockAC_FirstBanding
_TEXT	SEGMENT
tv140 = -244						; size = 4
_p$ = -44						; size = 4
_r$ = -32						; size = 4
_s$ = -20						; size = 4
_k$ = -8						; size = 4
_pContext$ = 8						; size = 4
_ComponentId$ = 12					; size = 4
_BlockX$ = 16						; size = 4
_BlockY$ = 20						; size = 4
__DecodeBlockAC_FirstBanding PROC			; COMDAT
; Line 1214
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1220
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29752], 0
	je	SHORT $LN13@DecodeBloc@3
; Line 1221
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29752]
	sub	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29752], ecx
; Line 1222
	xor	eax, eax
	jmp	$LN14@DecodeBloc@3
$LN13@DecodeBloc@3:
; Line 1224
	mov	eax, DWORD PTR _BlockY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BlockX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _pContext$[ebp]
	lea	ecx, DWORD PTR [eax+edx+29624]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__CoeffBufferGetP_Locked
	add	esp, 20					; 00000014H
	mov	DWORD PTR _p$[ebp], eax
; Line 1225
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29556]
	mov	DWORD PTR _k$[ebp], ecx
	jmp	SHORT $LN12@DecodeBloc@3
$LN11@DecodeBloc@3:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN12@DecodeBloc@3:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29557]
	cmp	DWORD PTR _k$[ebp], ecx
	jg	$LN10@DecodeBloc@3
; Line 1226
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$[ebp]
	movzx	ecx, BYTE PTR [eax+29494]
	imul	ecx, 3328				; 00000d00H
	mov	edx, DWORD PTR _pContext$[ebp]
	lea	eax, DWORD PTR [edx+ecx+2236]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__HuffDecode
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
; Line 1227
	mov	eax, DWORD PTR _s$[ebp]
	sar	eax, 4
	mov	DWORD PTR _r$[ebp], eax
; Line 1228
	mov	eax, DWORD PTR _s$[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _s$[ebp], eax
; Line 1229
	je	$LN9@DecodeBloc@3
; Line 1230
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _k$[ebp], eax
	cmp	DWORD PTR _k$[ebp], 63			; 0000003fH
	jle	SHORT $LN8@DecodeBloc@3
; Line 1231
	jmp	$LN10@DecodeBloc@3
$LN8@DecodeBloc@3:
; Line 1233
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetBitsNoMarker
	add	esp, 8
	mov	DWORD PTR _r$[ebp], eax
; Line 1234
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	cmp	ecx, DWORD PTR __aExtendTest[eax*4]
	jge	SHORT $LN16@DecodeBloc@3
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, DWORD PTR __aExtendOffset[edx*4]
	mov	DWORD PTR tv140[ebp], eax
	jmp	SHORT $LN17@DecodeBloc@3
$LN16@DecodeBloc@3:
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR tv140[ebp], ecx
$LN17@DecodeBloc@3:
	mov	edx, DWORD PTR tv140[ebp]
	mov	DWORD PTR _s$[ebp], edx
; Line 1235
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN7@DecodeBloc@3
; Line 1236
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29558]
	mov	edx, DWORD PTR _s$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR __aCoeffOrder[eax]
	mov	eax, DWORD PTR _p$[ebp]
	mov	WORD PTR [eax+ecx*2], dx
$LN7@DecodeBloc@3:
; Line 1238
	jmp	SHORT $LN6@DecodeBloc@3
$LN9@DecodeBloc@3:
; Line 1239
	cmp	DWORD PTR _r$[ebp], 15			; 0000000fH
	jne	SHORT $LN5@DecodeBloc@3
; Line 1240
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 15					; 0000000fH
	mov	DWORD PTR _k$[ebp], eax
	cmp	DWORD PTR _k$[ebp], 63			; 0000003fH
	jle	SHORT $LN4@DecodeBloc@3
; Line 1241
	jmp	SHORT $LN10@DecodeBloc@3
$LN4@DecodeBloc@3:
; Line 1243
	jmp	SHORT $LN6@DecodeBloc@3
$LN5@DecodeBloc@3:
; Line 1244
	mov	eax, 1
	mov	ecx, DWORD PTR _r$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [ecx+29752], eax
; Line 1245
	cmp	DWORD PTR _r$[ebp], 0
	je	SHORT $LN2@DecodeBloc@3
; Line 1246
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetBitsNoMarker
	add	esp, 8
	mov	edx, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR [edx+29752]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [ecx+29752], eax
$LN2@DecodeBloc@3:
; Line 1248
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29752]
	sub	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29752], ecx
; Line 1249
	jmp	SHORT $LN10@DecodeBloc@3
$LN6@DecodeBloc@3:
; Line 1252
	jmp	$LN11@DecodeBloc@3
$LN10@DecodeBloc@3:
; Line 1253
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN1@DecodeBloc@3
; Line 1254
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _p$[ebp], 0
$LN1@DecodeBloc@3:
; Line 1256
	xor	eax, eax
$LN14@DecodeBloc@3:
; Line 1257
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DecodeBlockAC_FirstBanding ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DecodeBlockAC_RefineBanding
_TEXT	SEGMENT
_pContext$ = 8						; size = 4
_ComponentId$ = 12					; size = 4
_BlockX$ = 16						; size = 4
_BlockY$ = 20						; size = 4
__DecodeBlockAC_RefineBanding PROC			; COMDAT
; Line 1266
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1267
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR _pContext$[ebp], eax
; Line 1268
	mov	eax, DWORD PTR _ComponentId$[ebp]
	mov	DWORD PTR _ComponentId$[ebp], eax
; Line 1269
	mov	eax, DWORD PTR _BlockX$[ebp]
	mov	DWORD PTR _BlockX$[ebp], eax
; Line 1270
	mov	eax, DWORD PTR _BlockY$[ebp]
	mov	DWORD PTR _BlockY$[ebp], eax
; Line 1271
	mov	eax, 1
; Line 1272
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__DecodeBlockAC_RefineBanding ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_GUI__memset:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DecodeScanProg
_TEXT	SEGMENT
_BlockY$ = -156						; size = 4
_BlockX$ = -144						; size = 4
_BlockY_MCU_Off$ = -132					; size = 4
_BlockX_MCU_Off$ = -120					; size = 4
_aBlockY_MCU$ = -108					; size = 16
_aBlockX_MCU$ = -84					; size = 16
_ComponentId$ = -60					; size = 4
_ComponentNumber$ = -48					; size = 4
_MCU_Block$ = -36					; size = 4
_MCU_Col$ = -24						; size = 4
_MCU_Row$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pContext$ = 8						; size = 4
_pfDecodeBlock$ = 12					; size = 4
__DecodeScanProg PROC					; COMDAT
; Line 1281
	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1293
	push	16					; 00000010H
	push	0
	lea	eax, DWORD PTR _aBlockY_MCU$[ebp]
	push	eax
	call	_GUI__memset
	add	esp, 12					; 0000000cH
; Line 1294
	mov	DWORD PTR _MCU_Col$[ebp], 0
	jmp	SHORT $LN20@DecodeScan
$LN19@DecodeScan:
	mov	eax, DWORD PTR _MCU_Col$[ebp]
	add	eax, 1
	mov	DWORD PTR _MCU_Col$[ebp], eax
$LN20@DecodeScan:
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _MCU_Col$[ebp]
	cmp	ecx, DWORD PTR [eax+29772]
	jge	$LN18@DecodeScan
; Line 1295
	push	16					; 00000010H
	push	0
	lea	eax, DWORD PTR _aBlockX_MCU$[ebp]
	push	eax
	call	_GUI__memset
	add	esp, 12					; 0000000cH
; Line 1296
	mov	DWORD PTR _MCU_Row$[ebp], 0
	jmp	SHORT $LN17@DecodeScan
$LN16@DecodeScan:
	mov	eax, DWORD PTR _MCU_Row$[ebp]
	add	eax, 1
	mov	DWORD PTR _MCU_Row$[ebp], eax
$LN17@DecodeScan:
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _MCU_Row$[ebp]
	cmp	ecx, DWORD PTR [eax+29768]
	jge	$LN15@DecodeScan
; Line 1297
	mov	DWORD PTR _BlockY_MCU_Off$[ebp], 0
	mov	eax, DWORD PTR _BlockY_MCU_Off$[ebp]
	mov	DWORD PTR _BlockX_MCU_Off$[ebp], eax
; Line 1298
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29756], 0
	je	SHORT $LN14@DecodeScan
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29760], 0
	jne	SHORT $LN14@DecodeScan
; Line 1299
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__ProcessRestart
	add	esp, 4
$LN14@DecodeScan:
; Line 1301
	mov	DWORD PTR _MCU_Block$[ebp], 0
	jmp	SHORT $LN13@DecodeScan
$LN12@DecodeScan:
	mov	eax, DWORD PTR _MCU_Block$[ebp]
	add	eax, 1
	mov	DWORD PTR _MCU_Block$[ebp], eax
$LN13@DecodeScan:
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _MCU_Block$[ebp]
	cmp	ecx, DWORD PTR [eax+29776]
	jge	$LN11@DecodeScan
; Line 1302
	mov	eax, DWORD PTR _MCU_Block$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+29780]
	mov	DWORD PTR _ComponentId$[ebp], edx
; Line 1303
	mov	eax, DWORD PTR _ComponentId$[ebp]
	mov	ecx, DWORD PTR _aBlockX_MCU$[ebp+eax*4]
	add	ecx, DWORD PTR _BlockX_MCU_Off$[ebp]
	mov	DWORD PTR _BlockX$[ebp], ecx
; Line 1304
	mov	eax, DWORD PTR _ComponentId$[ebp]
	mov	ecx, DWORD PTR _aBlockY_MCU$[ebp+eax*4]
	add	ecx, DWORD PTR _BlockY_MCU_Off$[ebp]
	mov	DWORD PTR _BlockY$[ebp], ecx
; Line 1305
	mov	esi, esp
	mov	eax, DWORD PTR _BlockY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BlockX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	DWORD PTR _pfDecodeBlock$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN10@DecodeScan
; Line 1306
	mov	eax, 1
	jmp	$LN21@DecodeScan
$LN10@DecodeScan:
; Line 1308
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29485]
	cmp	ecx, 1
	jne	SHORT $LN9@DecodeScan
; Line 1309
	mov	eax, DWORD PTR _ComponentId$[ebp]
	mov	ecx, DWORD PTR _aBlockX_MCU$[ebp+eax*4]
	add	ecx, 1
	mov	edx, DWORD PTR _ComponentId$[ebp]
	mov	DWORD PTR _aBlockX_MCU$[ebp+edx*4], ecx
; Line 1310
	jmp	SHORT $LN8@DecodeScan
$LN9@DecodeScan:
; Line 1311
	mov	eax, DWORD PTR _BlockX_MCU_Off$[ebp]
	add	eax, 1
	mov	DWORD PTR _BlockX_MCU_Off$[ebp], eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	add	ecx, DWORD PTR _ComponentId$[ebp]
	movzx	edx, BYTE PTR [ecx+29469]
	cmp	DWORD PTR _BlockX_MCU_Off$[ebp], edx
	jne	SHORT $LN8@DecodeScan
; Line 1312
	mov	DWORD PTR _BlockX_MCU_Off$[ebp], 0
; Line 1313
	mov	eax, DWORD PTR _BlockY_MCU_Off$[ebp]
	add	eax, 1
	mov	DWORD PTR _BlockY_MCU_Off$[ebp], eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	add	ecx, DWORD PTR _ComponentId$[ebp]
	movzx	edx, BYTE PTR [ecx+29473]
	cmp	DWORD PTR _BlockY_MCU_Off$[ebp], edx
	jne	SHORT $LN8@DecodeScan
; Line 1314
	mov	DWORD PTR _BlockY_MCU_Off$[ebp], 0
; Line 1315
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$[ebp]
	movzx	ecx, BYTE PTR [eax+29469]
	mov	edx, DWORD PTR _ComponentId$[ebp]
	add	ecx, DWORD PTR _aBlockX_MCU$[ebp+edx*4]
	mov	eax, DWORD PTR _ComponentId$[ebp]
	mov	DWORD PTR _aBlockX_MCU$[ebp+eax*4], ecx
$LN8@DecodeScan:
; Line 1319
	jmp	$LN12@DecodeScan
$LN11@DecodeScan:
; Line 1320
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29760]
	sub	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29760], ecx
; Line 1321
	jmp	$LN16@DecodeScan
$LN15@DecodeScan:
; Line 1322
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29485]
	cmp	ecx, 1
	jne	SHORT $LN5@DecodeScan
; Line 1323
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29486]
	mov	edx, DWORD PTR _aBlockY_MCU$[ebp+ecx*4]
	add	edx, 1
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29486]
	mov	DWORD PTR _aBlockY_MCU$[ebp+ecx*4], edx
; Line 1324
	jmp	SHORT $LN4@DecodeScan
$LN5@DecodeScan:
; Line 1325
	mov	DWORD PTR _ComponentNumber$[ebp], 0
	jmp	SHORT $LN3@DecodeScan
$LN2@DecodeScan:
	mov	eax, DWORD PTR _ComponentNumber$[ebp]
	add	eax, 1
	mov	DWORD PTR _ComponentNumber$[ebp], eax
$LN3@DecodeScan:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29485]
	cmp	DWORD PTR _ComponentNumber$[ebp], ecx
	jge	SHORT $LN4@DecodeScan
; Line 1326
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentNumber$[ebp]
	movzx	ecx, BYTE PTR [eax+29486]
	mov	DWORD PTR _ComponentId$[ebp], ecx
; Line 1327
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$[ebp]
	movzx	ecx, BYTE PTR [eax+29473]
	mov	edx, DWORD PTR _ComponentId$[ebp]
	add	ecx, DWORD PTR _aBlockY_MCU$[ebp+edx*4]
	mov	eax, DWORD PTR _ComponentId$[ebp]
	mov	DWORD PTR _aBlockY_MCU$[ebp+eax*4], ecx
; Line 1328
	jmp	SHORT $LN2@DecodeScan
$LN4@DecodeScan:
; Line 1330
	jmp	$LN19@DecodeScan
$LN18@DecodeScan:
; Line 1331
	xor	eax, eax
$LN21@DecodeScan:
; Line 1332
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@DecodeScan
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN26@DecodeScan:
	DD	2
	DD	$LN25@DecodeScan
$LN25@DecodeScan:
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN23@DecodeScan
	DD	-108					; ffffff94H
	DD	16					; 00000010H
	DD	$LN24@DecodeScan
$LN24@DecodeScan:
	DB	97					; 00000061H
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	89					; 00000059H
	DB	95					; 0000005fH
	DB	77					; 0000004dH
	DB	67					; 00000043H
	DB	85					; 00000055H
	DB	0
$LN23@DecodeScan:
	DB	97					; 00000061H
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	88					; 00000058H
	DB	95					; 0000005fH
	DB	77					; 0000004dH
	DB	67					; 00000043H
	DB	85					; 00000055H
	DB	0
__DecodeScanProg ENDP
_TEXT	ENDS
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __ProcessRestart
_TEXT	SEGMENT
$T12635 = -221						; size = 1
_Byte$ = -17						; size = 1
_i$ = -8						; size = 4
_pContext$ = 8						; size = 4
__ProcessRestart PROC					; COMDAT
; Line 816
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T12635[ebp], 0
; Line 819
	mov	DWORD PTR _i$[ebp], 2000		; 000007d0H
	jmp	SHORT $LN13@ProcessRes
$LN12@ProcessRes:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@ProcessRes:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN11@ProcessRes
; Line 820
	mov	BYTE PTR $T12635[ebp], 1
	mov	esi, esp
	lea	eax, DWORD PTR _Byte$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN10@ProcessRes
	mov	eax, 1
	jmp	$LN14@ProcessRes
$LN10@ProcessRes:
; Line 821
	cmp	BYTE PTR $T12635[ebp], 0
	jne	SHORT $LN16@ProcessRes
	push	OFFSET $LN17@ProcessRes
	call	__RTC_UninitUse
	add	esp, 4
$LN16@ProcessRes:
	movzx	eax, BYTE PTR _Byte$[ebp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN9@ProcessRes
; Line 822
	jmp	SHORT $LN11@ProcessRes
$LN9@ProcessRes:
; Line 824
	jmp	SHORT $LN12@ProcessRes
$LN11@ProcessRes:
; Line 825
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN8@ProcessRes
; Line 826
	mov	eax, 1
	jmp	$LN14@ProcessRes
$LN8@ProcessRes:
; Line 827
	jmp	SHORT $LN7@ProcessRes
$LN6@ProcessRes:
; Line 828
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@ProcessRes:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN5@ProcessRes
; Line 829
	mov	BYTE PTR $T12635[ebp], 1
	mov	esi, esp
	lea	eax, DWORD PTR _Byte$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN4@ProcessRes
	mov	eax, 1
	jmp	$LN14@ProcessRes
$LN4@ProcessRes:
; Line 830
	cmp	BYTE PTR $T12635[ebp], 0
	jne	SHORT $LN18@ProcessRes
	push	OFFSET $LN17@ProcessRes
	call	__RTC_UninitUse
	add	esp, 4
$LN18@ProcessRes:
	movzx	eax, BYTE PTR _Byte$[ebp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN3@ProcessRes
; Line 831
	jmp	SHORT $LN5@ProcessRes
$LN3@ProcessRes:
; Line 833
	jmp	SHORT $LN6@ProcessRes
$LN5@ProcessRes:
; Line 834
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN2@ProcessRes
; Line 835
	mov	eax, 1
	jmp	$LN14@ProcessRes
$LN2@ProcessRes:
; Line 837
	cmp	BYTE PTR $T12635[ebp], 0
	jne	SHORT $LN19@ProcessRes
	push	OFFSET $LN17@ProcessRes
	call	__RTC_UninitUse
	add	esp, 4
$LN19@ProcessRes:
	movzx	eax, BYTE PTR _Byte$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+29764]
	add	edx, 208				; 000000d0H
	cmp	eax, edx
	je	SHORT $LN1@ProcessRes
; Line 838
	mov	eax, 1
	jmp	SHORT $LN14@ProcessRes
$LN1@ProcessRes:
; Line 840
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29468]
	shl	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR _pContext$[ebp]
	add	edx, 29540				; 00007364H
	push	edx
	call	_GUI__memset
	add	esp, 12					; 0000000cH
; Line 841
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29752], 0
; Line 842
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+29756]
	mov	DWORD PTR [eax+29760], edx
; Line 843
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29764]
	add	ecx, 1
	and	ecx, 7
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29764], ecx
; Line 844
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__InitBitBuffer
	add	esp, 4
; Line 845
	xor	eax, eax
$LN14@ProcessRes:
; Line 846
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@ProcessRes
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN21@ProcessRes:
	DD	1
	DD	$LN20@ProcessRes
$LN20@ProcessRes:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN17@ProcessRes
$LN17@ProcessRes:
	DB	66					; 00000042H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
__ProcessRestart ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __InitBitBuffer
_TEXT	SEGMENT
_pContext$ = 8						; size = 4
__InitBitBuffer PROC					; COMDAT
; Line 388
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 389
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+40], 16			; 00000010H
; Line 390
	push	16					; 00000010H
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__GetBitsNoMarker
	add	esp, 8
; Line 391
	push	16					; 00000010H
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__GetBitsNoMarker
	add	esp, 8
; Line 392
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__InitBitBuffer ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __InitScan
_TEXT	SEGMENT
_Marker$ = -5						; size = 1
_pContext$ = 8						; size = 4
__InitScan PROC						; COMDAT
; Line 1465
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1467
	lea	eax, DWORD PTR _Marker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__ReadMarkers
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@InitScan
; Line 1468
	mov	eax, 1
	jmp	$LN7@InitScan
$LN6@InitScan:
; Line 1470
	movzx	eax, BYTE PTR _Marker$[ebp]
	cmp	eax, 218				; 000000daH
	je	SHORT $LN5@InitScan
; Line 1471
	mov	eax, 1
	jmp	$LN7@InitScan
$LN5@InitScan:
; Line 1473
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__GetSOS
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@InitScan
; Line 1474
	mov	eax, 1
	jmp	$LN7@InitScan
$LN4@InitScan:
; Line 1476
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__CalcMCUBlockOrder
	add	esp, 4
; Line 1477
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__CheckHuffmanTables
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@InitScan
; Line 1478
	mov	eax, 1
	jmp	SHORT $LN7@InitScan
$LN3@InitScan:
; Line 1480
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__CheckQuantTables
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@InitScan
; Line 1481
	mov	eax, 1
	jmp	SHORT $LN7@InitScan
$LN2@InitScan:
; Line 1483
	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 29540				; 00007364H
	push	eax
	call	_GUI__memset
	add	esp, 12					; 0000000cH
; Line 1484
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29752], 0
; Line 1485
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29756], 0
	je	SHORT $LN1@InitScan
; Line 1486
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+29756]
	mov	DWORD PTR [eax+29760], edx
; Line 1487
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29764], 0
$LN1@InitScan:
; Line 1489
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__InitBitBuffer
	add	esp, 4
; Line 1490
	xor	eax, eax
$LN7@InitScan:
; Line 1491
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@InitScan
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN11@InitScan:
	DD	1
	DD	$LN10@InitScan
$LN10@InitScan:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN9@InitScan
$LN9@InitScan:
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
__InitScan ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetSOS
_TEXT	SEGMENT
_Found$10940 = -101					; size = 1
_Id$10939 = -89						; size = 1
_j$10938 = -80						; size = 4
_SpectralEnd$ = -65					; size = 1
_SpectralStart$ = -53					; size = 1
_c$ = -41						; size = 1
_n$ = -29						; size = 1
_i$ = -20						; size = 4
_Length$ = -8						; size = 4
_pContext$ = 8						; size = 4
__GetSOS PROC						; COMDAT
; Line 607
	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 610
	lea	eax, DWORD PTR _Length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetInt
	add	esp, 8
	test	eax, eax
	je	SHORT $LN19@GetSOS
	mov	eax, 1
	jmp	$LN20@GetSOS
$LN19@GetSOS:
; Line 611
	mov	esi, esp
	lea	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN18@GetSOS
	mov	eax, 1
	jmp	$LN20@GetSOS
$LN18@GetSOS:
; Line 612
	movzx	eax, BYTE PTR _n$[ebp]
	lea	ecx, DWORD PTR [eax+eax+6]
	cmp	DWORD PTR _Length$[ebp], ecx
	jne	SHORT $LN16@GetSOS
	movzx	eax, BYTE PTR _n$[ebp]
	cmp	eax, 4
	jle	SHORT $LN17@GetSOS
$LN16@GetSOS:
; Line 613
	mov	eax, 1
	jmp	$LN20@GetSOS
$LN17@GetSOS:
; Line 615
	mov	eax, DWORD PTR _Length$[ebp]
	sub	eax, 3
	mov	DWORD PTR _Length$[ebp], eax
; Line 616
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	cl, BYTE PTR _n$[ebp]
	mov	BYTE PTR [eax+29485], cl
; Line 617
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@GetSOS
$LN14@GetSOS:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@GetSOS:
	movzx	eax, BYTE PTR _n$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN13@GetSOS
; Line 620
	mov	esi, esp
	lea	eax, DWORD PTR _Id$10939[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN12@GetSOS
	mov	eax, 1
	jmp	$LN20@GetSOS
$LN12@GetSOS:
; Line 621
	mov	esi, esp
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN11@GetSOS
	mov	eax, 1
	jmp	$LN20@GetSOS
$LN11@GetSOS:
; Line 622
	mov	eax, DWORD PTR _Length$[ebp]
	sub	eax, 2
	mov	DWORD PTR _Length$[ebp], eax
; Line 623
	mov	DWORD PTR _j$10938[ebp], 0
	mov	BYTE PTR _Found$10940[ebp], 0
	jmp	SHORT $LN10@GetSOS
$LN9@GetSOS:
	mov	eax, DWORD PTR _j$10938[ebp]
	add	eax, 1
	mov	DWORD PTR _j$10938[ebp], eax
$LN10@GetSOS:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29468]
	cmp	DWORD PTR _j$10938[ebp], ecx
	jge	SHORT $LN8@GetSOS
; Line 624
	movzx	eax, BYTE PTR _Id$10939[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	add	ecx, DWORD PTR _j$10938[ebp]
	movzx	edx, BYTE PTR [ecx+29481]
	cmp	eax, edx
	jne	SHORT $LN7@GetSOS
; Line 625
	mov	BYTE PTR _Found$10940[ebp], 1
; Line 626
	jmp	SHORT $LN8@GetSOS
$LN7@GetSOS:
; Line 628
	jmp	SHORT $LN9@GetSOS
$LN8@GetSOS:
; Line 629
	movzx	eax, BYTE PTR _Found$10940[ebp]
	test	eax, eax
	jne	SHORT $LN6@GetSOS
; Line 630
	mov	eax, 1
	jmp	$LN20@GetSOS
$LN6@GetSOS:
; Line 632
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _j$10938[ebp]
	mov	BYTE PTR [eax+29486], cl
; Line 633
	movzx	eax, BYTE PTR _c$[ebp]
	sar	eax, 4
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _pContext$[ebp]
	add	ecx, DWORD PTR _j$10938[ebp]
	mov	BYTE PTR [ecx+29490], al
; Line 634
	movzx	eax, BYTE PTR _c$[ebp]
	and	eax, 15					; 0000000fH
	add	eax, 4
	mov	ecx, DWORD PTR _pContext$[ebp]
	add	ecx, DWORD PTR _j$10938[ebp]
	mov	BYTE PTR [ecx+29494], al
; Line 635
	jmp	$LN14@GetSOS
$LN13@GetSOS:
; Line 636
	mov	esi, esp
	lea	eax, DWORD PTR _SpectralStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN5@GetSOS
	mov	eax, 1
	jmp	$LN20@GetSOS
$LN5@GetSOS:
; Line 637
	mov	esi, esp
	lea	eax, DWORD PTR _SpectralEnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN4@GetSOS
	mov	eax, 1
	jmp	$LN20@GetSOS
$LN4@GetSOS:
; Line 638
	mov	esi, esp
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@GetSOS
	mov	eax, 1
	jmp	SHORT $LN20@GetSOS
$LN3@GetSOS:
; Line 639
	movzx	eax, BYTE PTR _c$[ebp]
	sar	eax, 4
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [ecx+29559], al
; Line 640
	movzx	eax, BYTE PTR _c$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [ecx+29558], al
; Line 641
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29713]
	test	ecx, ecx
	je	SHORT $LN2@GetSOS
; Line 642
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	cl, BYTE PTR _SpectralStart$[ebp]
	mov	BYTE PTR [eax+29556], cl
; Line 643
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	cl, BYTE PTR _SpectralEnd$[ebp]
	mov	BYTE PTR [eax+29557], cl
; Line 644
	jmp	SHORT $LN1@GetSOS
$LN2@GetSOS:
; Line 645
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29556], 0
; Line 646
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29557], 63		; 0000003fH
$LN1@GetSOS:
; Line 648
	mov	eax, DWORD PTR _Length$[ebp]
	sub	eax, 3
	mov	DWORD PTR _Length$[ebp], eax
; Line 649
	mov	eax, DWORD PTR _Length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__SkipInputData
	add	esp, 8
; Line 650
	xor	eax, eax
$LN20@GetSOS:
; Line 651
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@GetSOS
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN29@GetSOS:
	DD	6
	DD	$LN28@GetSOS
$LN28@GetSOS:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN22@GetSOS
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN23@GetSOS
	DD	-41					; ffffffd7H
	DD	1
	DD	$LN24@GetSOS
	DD	-53					; ffffffcbH
	DD	1
	DD	$LN25@GetSOS
	DD	-65					; ffffffbfH
	DD	1
	DD	$LN26@GetSOS
	DD	-89					; ffffffa7H
	DD	1
	DD	$LN27@GetSOS
$LN27@GetSOS:
	DB	73					; 00000049H
	DB	100					; 00000064H
	DB	0
$LN26@GetSOS:
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN25@GetSOS:
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN24@GetSOS:
	DB	99					; 00000063H
	DB	0
$LN23@GetSOS:
	DB	110					; 0000006eH
	DB	0
$LN22@GetSOS:
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
__GetSOS ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __CheckHuffmanTables
_TEXT	SEGMENT
_CompDC_Tab$11430 = -41					; size = 1
_MCU_Org$11429 = -32					; size = 4
_TableIndex$11420 = -20					; size = 4
_i$ = -8						; size = 4
_pContext$ = 8						; size = 4
__CheckHuffmanTables PROC				; COMDAT
; Line 1420
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1422
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@CheckHuffm
$LN10@CheckHuffm:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@CheckHuffm:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29485]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN9@CheckHuffm
; Line 1424
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+29486]
	mov	DWORD PTR _TableIndex$11420[ebp], ecx
; Line 1425
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29556]
	test	ecx, ecx
	jne	SHORT $LN8@CheckHuffm
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _TableIndex$11420[ebp]
	movzx	ecx, BYTE PTR [eax+29490]
	mov	edx, DWORD PTR _pContext$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+44]
	test	eax, eax
	jne	SHORT $LN8@CheckHuffm
; Line 1426
	mov	eax, 1
	jmp	$LN12@CheckHuffm
$LN8@CheckHuffm:
; Line 1428
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29557]
	test	ecx, ecx
	jle	SHORT $LN7@CheckHuffm
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _TableIndex$11420[ebp]
	movzx	ecx, BYTE PTR [eax+29494]
	mov	edx, DWORD PTR _pContext$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+44]
	test	eax, eax
	jne	SHORT $LN7@CheckHuffm
; Line 1429
	mov	eax, 1
	jmp	$LN12@CheckHuffm
$LN7@CheckHuffm:
; Line 1431
	jmp	$LN10@CheckHuffm
$LN9@CheckHuffm:
; Line 1432
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@CheckHuffm
$LN5@CheckHuffm:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@CheckHuffm:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN4@CheckHuffm
; Line 1433
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 3328				; 00000d00H
	mov	ecx, DWORD PTR _pContext$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2236]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__CreateHuffmanTable
	add	esp, 12					; 0000000cH
; Line 1434
	jmp	SHORT $LN5@CheckHuffm
$LN4@CheckHuffm:
; Line 1435
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@CheckHuffm
$LN2@CheckHuffm:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@CheckHuffm:
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+29776]
	jge	SHORT $LN1@CheckHuffm
; Line 1438
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+29780]
	mov	DWORD PTR _MCU_Org$11429[ebp], edx
; Line 1439
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _MCU_Org$11429[ebp]
	mov	cl, BYTE PTR [eax+29490]
	mov	BYTE PTR _CompDC_Tab$11430[ebp], cl
; Line 1440
	mov	eax, DWORD PTR _MCU_Org$11429[ebp]
	imul	eax, 3328				; 00000d00H
	mov	ecx, DWORD PTR _pContext$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2236]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [ecx+eax*4+28860], edx
; Line 1441
	mov	eax, DWORD PTR _MCU_Org$11429[ebp]
	imul	eax, 3328				; 00000d00H
	mov	ecx, DWORD PTR _pContext$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2236]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [ecx+eax*4+28900], edx
; Line 1442
	movzx	eax, BYTE PTR _CompDC_Tab$11430[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+29540]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [ecx+eax*4+29500], edx
; Line 1443
	jmp	$LN2@CheckHuffm
$LN1@CheckHuffm:
; Line 1444
	xor	eax, eax
$LN12@CheckHuffm:
; Line 1445
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__CheckHuffmanTables ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __CreateHuffmanTable
_TEXT	SEGMENT
_CurrentEntry$ = -1424					; size = 4
_NextFreeEntry$ = -1412					; size = 4
_Last_p$ = -1400					; size = 4
_CodeSize$ = -1388					; size = 4
_SubTree$ = -1376					; size = 4
_Code$ = -1364						; size = 4
_aHuffCode$ = -1352					; size = 1028
_aHuffSize$ = -316					; size = 257
_Size$ = -48						; size = 4
_l$ = -36						; size = 4
_i$ = -24						; size = 4
_p$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pContext$ = 8						; size = 4
_Index$ = 12						; size = 4
_pTable$ = 16						; size = 4
__CreateHuffmanTable PROC				; COMDAT
; Line 1341
	push	ebp
	mov	ebp, esp
	sub	esp, 1620				; 00000654H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1620]
	mov	ecx, 405				; 00000195H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1351
	mov	DWORD PTR _p$[ebp], 0
; Line 1352
	mov	DWORD PTR _l$[ebp], 1
	jmp	SHORT $LN25@CreateHuff
$LN24@CreateHuff:
	mov	eax, DWORD PTR _l$[ebp]
	add	eax, 1
	mov	DWORD PTR _l$[ebp], eax
$LN25@CreateHuff:
	cmp	DWORD PTR _l$[ebp], 16			; 00000010H
	jg	SHORT $LN23@CreateHuff
; Line 1353
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN22@CreateHuff
$LN21@CreateHuff:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN22@CreateHuff:
	mov	eax, DWORD PTR _Index$[ebp]
	imul	eax, 17					; 00000011H
	add	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+52]
	cmp	DWORD PTR _i$[ebp], edx
	jg	SHORT $LN20@CreateHuff
; Line 1354
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR _l$[ebp]
	mov	BYTE PTR _aHuffSize$[ebp+eax], cl
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 1355
	jmp	SHORT $LN21@CreateHuff
$LN20@CreateHuff:
; Line 1356
	jmp	SHORT $LN24@CreateHuff
$LN23@CreateHuff:
; Line 1357
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR _aHuffSize$[ebp+eax], 0
; Line 1358
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _Last_p$[ebp], eax
; Line 1359
	mov	DWORD PTR _Code$[ebp], 0
; Line 1360
	movzx	eax, BYTE PTR _aHuffSize$[ebp]
	mov	DWORD PTR _Size$[ebp], eax
; Line 1361
	mov	DWORD PTR _p$[ebp], 0
$LN19@CreateHuff:
; Line 1362
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR _aHuffSize$[ebp+eax]
	test	ecx, ecx
	je	SHORT $LN18@CreateHuff
$LN17@CreateHuff:
; Line 1363
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR _aHuffSize$[ebp+eax]
	cmp	ecx, DWORD PTR _Size$[ebp]
	jne	SHORT $LN16@CreateHuff
; Line 1364
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _Code$[ebp]
	mov	DWORD PTR _aHuffCode$[ebp+eax*4], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 1365
	mov	eax, DWORD PTR _Code$[ebp]
	add	eax, 1
	mov	DWORD PTR _Code$[ebp], eax
; Line 1366
	jmp	SHORT $LN17@CreateHuff
$LN16@CreateHuff:
; Line 1367
	mov	eax, DWORD PTR _Code$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Code$[ebp], eax
; Line 1368
	mov	eax, DWORD PTR _Size$[ebp]
	add	eax, 1
	mov	DWORD PTR _Size$[ebp], eax
; Line 1369
	jmp	SHORT $LN19@CreateHuff
$LN18@CreateHuff:
; Line 1370
	push	1024					; 00000400H
	push	0
	mov	eax, DWORD PTR _pTable$[ebp]
	push	eax
	call	_GUI__memset
	add	esp, 12					; 0000000cH
; Line 1371
	push	2048					; 00000800H
	push	0
	mov	eax, DWORD PTR _pTable$[ebp]
	add	eax, 1280				; 00000500H
	push	eax
	call	_GUI__memset
	add	esp, 12					; 0000000cH
; Line 1372
	push	256					; 00000100H
	push	0
	mov	eax, DWORD PTR _pTable$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_GUI__memset
	add	esp, 12					; 0000000cH
; Line 1373
	mov	DWORD PTR _NextFreeEntry$[ebp], -1
; Line 1374
	mov	DWORD PTR _p$[ebp], 0
$LN15@CreateHuff:
; Line 1375
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _Last_p$[ebp]
	jge	$LN26@CreateHuff
; Line 1376
	mov	eax, DWORD PTR _Index$[ebp]
	shl	eax, 8
	add	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+188]
	mov	DWORD PTR _i$[ebp], edx
; Line 1377
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _aHuffCode$[ebp+eax*4]
	mov	DWORD PTR _Code$[ebp], ecx
; Line 1378
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR _aHuffSize$[ebp+eax]
	mov	DWORD PTR _CodeSize$[ebp], ecx
; Line 1379
	mov	eax, DWORD PTR _pTable$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _CodeSize$[ebp]
	mov	BYTE PTR [eax+1024], cl
; Line 1380
	cmp	DWORD PTR _CodeSize$[ebp], 8
	jg	SHORT $LN13@CreateHuff
; Line 1381
	mov	ecx, 8
	sub	ecx, DWORD PTR _CodeSize$[ebp]
	mov	eax, DWORD PTR _Code$[ebp]
	shl	eax, cl
	mov	DWORD PTR _Code$[ebp], eax
; Line 1382
	mov	ecx, 8
	sub	ecx, DWORD PTR _CodeSize$[ebp]
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _l$[ebp], eax
	jmp	SHORT $LN12@CreateHuff
$LN11@CreateHuff:
	mov	eax, DWORD PTR _l$[ebp]
	sub	eax, 1
	mov	DWORD PTR _l$[ebp], eax
$LN12@CreateHuff:
	cmp	DWORD PTR _l$[ebp], 0
	jle	SHORT $LN10@CreateHuff
; Line 1383
	mov	eax, DWORD PTR _Code$[ebp]
	mov	ecx, DWORD PTR _pTable$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1384
	mov	eax, DWORD PTR _Code$[ebp]
	add	eax, 1
	mov	DWORD PTR _Code$[ebp], eax
; Line 1385
	jmp	SHORT $LN11@CreateHuff
$LN10@CreateHuff:
; Line 1386
	jmp	$LN9@CreateHuff
$LN13@CreateHuff:
; Line 1387
	mov	ecx, DWORD PTR _CodeSize$[ebp]
	sub	ecx, 8
	mov	eax, DWORD PTR _Code$[ebp]
	shr	eax, cl
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _SubTree$[ebp], eax
; Line 1388
	mov	eax, DWORD PTR _SubTree$[ebp]
	mov	ecx, DWORD PTR _pTable$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _CurrentEntry$[ebp], edx
; Line 1389
	cmp	DWORD PTR _CurrentEntry$[ebp], 0
	jne	SHORT $LN8@CreateHuff
; Line 1390
	mov	eax, DWORD PTR _NextFreeEntry$[ebp]
	mov	DWORD PTR _CurrentEntry$[ebp], eax
	mov	ecx, DWORD PTR _SubTree$[ebp]
	mov	edx, DWORD PTR _pTable$[ebp]
	mov	eax, DWORD PTR _CurrentEntry$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 1391
	mov	eax, DWORD PTR _NextFreeEntry$[ebp]
	sub	eax, 2
	mov	DWORD PTR _NextFreeEntry$[ebp], eax
$LN8@CreateHuff:
; Line 1393
	mov	eax, DWORD PTR _CodeSize$[ebp]
	sub	eax, 8
	mov	ecx, 16					; 00000010H
	sub	ecx, eax
	mov	edx, DWORD PTR _Code$[ebp]
	shl	edx, cl
	mov	DWORD PTR _Code$[ebp], edx
; Line 1394
	mov	eax, DWORD PTR _CodeSize$[ebp]
	mov	DWORD PTR _l$[ebp], eax
	jmp	SHORT $LN7@CreateHuff
$LN6@CreateHuff:
	mov	eax, DWORD PTR _l$[ebp]
	sub	eax, 1
	mov	DWORD PTR _l$[ebp], eax
$LN7@CreateHuff:
	cmp	DWORD PTR _l$[ebp], 9
	jle	$LN5@CreateHuff
; Line 1395
	mov	eax, DWORD PTR _Code$[ebp]
	and	eax, 32768				; 00008000H
	jne	SHORT $LN4@CreateHuff
; Line 1396
	mov	eax, DWORD PTR _CurrentEntry$[ebp]
	sub	eax, 1
	mov	DWORD PTR _CurrentEntry$[ebp], eax
$LN4@CreateHuff:
; Line 1398
	mov	eax, DWORD PTR _CurrentEntry$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _pTable$[ebp]
	cmp	DWORD PTR [ecx+eax*4+1276], 0
	jne	SHORT $LN3@CreateHuff
; Line 1399
	mov	eax, DWORD PTR _CurrentEntry$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _pTable$[ebp]
	mov	edx, DWORD PTR _NextFreeEntry$[ebp]
	mov	DWORD PTR [ecx+eax*4+1276], edx
; Line 1400
	mov	eax, DWORD PTR _NextFreeEntry$[ebp]
	mov	DWORD PTR _CurrentEntry$[ebp], eax
; Line 1401
	mov	eax, DWORD PTR _NextFreeEntry$[ebp]
	sub	eax, 2
	mov	DWORD PTR _NextFreeEntry$[ebp], eax
; Line 1402
	jmp	SHORT $LN2@CreateHuff
$LN3@CreateHuff:
; Line 1403
	mov	eax, DWORD PTR _CurrentEntry$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _pTable$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1276]
	mov	DWORD PTR _CurrentEntry$[ebp], edx
$LN2@CreateHuff:
; Line 1405
	mov	eax, DWORD PTR _Code$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Code$[ebp], eax
; Line 1406
	jmp	$LN6@CreateHuff
$LN5@CreateHuff:
; Line 1407
	mov	eax, DWORD PTR _Code$[ebp]
	and	eax, 32768				; 00008000H
	jne	SHORT $LN1@CreateHuff
; Line 1408
	mov	eax, DWORD PTR _CurrentEntry$[ebp]
	sub	eax, 1
	mov	DWORD PTR _CurrentEntry$[ebp], eax
$LN1@CreateHuff:
; Line 1410
	mov	eax, DWORD PTR _CurrentEntry$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _pTable$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4+1276], edx
$LN9@CreateHuff:
; Line 1412
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 1413
	jmp	$LN15@CreateHuff
$LN26@CreateHuff:
; Line 1414
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@CreateHuff
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1620				; 00000654H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN31@CreateHuff:
	DD	2
	DD	$LN30@CreateHuff
$LN30@CreateHuff:
	DD	-316					; fffffec4H
	DD	257					; 00000101H
	DD	$LN28@CreateHuff
	DD	-1352					; fffffab8H
	DD	1028					; 00000404H
	DD	$LN29@CreateHuff
$LN29@CreateHuff:
	DB	97					; 00000061H
	DB	72					; 00000048H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN28@CreateHuff:
	DB	97					; 00000061H
	DB	72					; 00000048H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
__CreateHuffmanTable ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __CheckQuantTables
_TEXT	SEGMENT
_i$ = -8						; size = 4
_pContext$ = 8						; size = 4
__CheckQuantTables PROC					; COMDAT
; Line 1451
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1453
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CheckQuant
$LN3@CheckQuant:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@CheckQuant:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29485]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN2@CheckQuant
; Line 1454
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+29486]
	mov	edx, DWORD PTR _pContext$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+29477]
	mov	ecx, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [ecx+eax*4+29452], 0
	jne	SHORT $LN1@CheckQuant
; Line 1455
	mov	eax, 1
	jmp	SHORT $LN5@CheckQuant
$LN1@CheckQuant:
; Line 1457
	jmp	SHORT $LN3@CheckQuant
$LN2@CheckQuant:
; Line 1458
	xor	eax, eax
$LN5@CheckQuant:
; Line 1459
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__CheckQuantTables ENDP
_TEXT	ENDS
PUBLIC	_GUI_JPEG__Free
EXTRN	_GUI_ALLOC_Free:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_JPEG__Free
_TEXT	SEGMENT
_hMem$12255 = -20					; size = 4
_i$ = -8						; size = 4
_pContext$ = 8						; size = 4
_GUI_JPEG__Free PROC					; COMDAT
; Line 2912
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2914
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29844], 0
	je	SHORT $LN11@GUI_JPEG__@4
; Line 2915
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29844]
	push	ecx
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN11@GUI_JPEG__@4:
; Line 2917
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29848], 0
	je	SHORT $LN10@GUI_JPEG__@4
; Line 2918
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29848]
	push	ecx
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN10@GUI_JPEG__@4:
; Line 2920
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29820], 0
	je	SHORT $LN9@GUI_JPEG__@4
; Line 2921
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29820]
	push	ecx
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN9@GUI_JPEG__@4:
; Line 2923
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29828], 0
	je	SHORT $LN8@GUI_JPEG__@4
; Line 2924
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29828]
	push	ecx
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN8@GUI_JPEG__@4:
; Line 2926
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@GUI_JPEG__@4
$LN6@GUI_JPEG__@4:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@GUI_JPEG__@4:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29468]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN5@GUI_JPEG__@4
; Line 2928
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+eax+29636]
	mov	DWORD PTR _hMem$12255[ebp], edx
; Line 2929
	cmp	DWORD PTR _hMem$12255[ebp], 0
	je	SHORT $LN4@GUI_JPEG__@4
; Line 2930
	mov	eax, DWORD PTR _hMem$12255[ebp]
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN4@GUI_JPEG__@4:
; Line 2932
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+eax+29572]
	mov	DWORD PTR _hMem$12255[ebp], edx
; Line 2933
	cmp	DWORD PTR _hMem$12255[ebp], 0
	je	SHORT $LN3@GUI_JPEG__@4
; Line 2934
	mov	eax, DWORD PTR _hMem$12255[ebp]
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN3@GUI_JPEG__@4:
; Line 2936
	jmp	SHORT $LN6@GUI_JPEG__@4
$LN5@GUI_JPEG__@4:
; Line 2937
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29708], 0
	je	SHORT $LN2@GUI_JPEG__@4
; Line 2938
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29708]
	push	ecx
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN2@GUI_JPEG__@4:
; Line 2940
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29824], 0
	je	SHORT $LN12@GUI_JPEG__@4
; Line 2941
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29824]
	push	ecx
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN12@GUI_JPEG__@4:
; Line 2943
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_JPEG__Free ENDP
_TEXT	ENDS
PUBLIC	_GUI_JPEG__SkipLine
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_JPEG__SkipLine
_TEXT	SEGMENT
_Marker$12269 = -5					; size = 1
_pContext$ = 8						; size = 4
_GUI_JPEG__SkipLine PROC				; COMDAT
; Line 2953
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2954
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29840], 0
	jne	$LN8@GUI_JPEG__@5
; Line 2955
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29713]
	test	ecx, ecx
	je	SHORT $LN7@GUI_JPEG__@5
; Line 2956
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__LoadNextRow
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@GUI_JPEG__@5
; Line 2957
	mov	eax, 1
	jmp	$LN9@GUI_JPEG__@5
$LN6@GUI_JPEG__@5:
; Line 2959
	jmp	SHORT $LN5@GUI_JPEG__@5
$LN7@GUI_JPEG__@5:
; Line 2960
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__DecodeNextRow
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@GUI_JPEG__@5
; Line 2961
	mov	eax, 1
	jmp	$LN9@GUI_JPEG__@5
$LN4@GUI_JPEG__@5:
; Line 2963
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [eax+29836]
	cmp	edx, DWORD PTR [ecx+29736]
	jg	SHORT $LN3@GUI_JPEG__@5
; Line 2965
	lea	eax, DWORD PTR _Marker$12269[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__ReadMarkers
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@GUI_JPEG__@5
; Line 2966
	mov	eax, 1
	jmp	SHORT $LN9@GUI_JPEG__@5
$LN2@GUI_JPEG__@5:
; Line 2968
	movzx	eax, BYTE PTR _Marker$12269[ebp]
	cmp	eax, 217				; 000000d9H
	je	SHORT $LN3@GUI_JPEG__@5
; Line 2969
	mov	eax, 1
	jmp	SHORT $LN9@GUI_JPEG__@5
$LN3@GUI_JPEG__@5:
; Line 2972
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29712], 1
$LN5@GUI_JPEG__@5:
; Line 2974
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+29736]
	mov	DWORD PTR [eax+29840], edx
$LN8@GUI_JPEG__@5:
; Line 2976
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29840]
	sub	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29840], ecx
; Line 2977
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29836]
	sub	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29836], ecx
; Line 2978
	xor	eax, eax
$LN9@GUI_JPEG__@5:
; Line 2979
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GUI_JPEG__@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@GUI_JPEG__@5:
	DD	1
	DD	$LN12@GUI_JPEG__@5
$LN12@GUI_JPEG__@5:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN11@GUI_JPEG__@5
$LN11@GUI_JPEG__@5:
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_GUI_JPEG__SkipLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DecodeNextRow
_TEXT	SEGMENT
tv217 = -412						; size = 4
tv215 = -412						; size = 4
tv198 = -412						; size = 4
tv181 = -412						; size = 4
tv179 = -412						; size = 4
tv145 = -412						; size = 4
_kt$11860 = -212					; size = 4
_kt$11853 = -200					; size = 4
_n$11852 = -188						; size = 4
_kt$11844 = -176					; size = 4
_n$11843 = -164						; size = 4
_k$11833 = -152						; size = 4
_PrevNumSet$11832 = -140				; size = 4
_s$11831 = -128						; size = 4
_r$11830 = -116						; size = 4
_ComponentId$11829 = -104				; size = 4
_q$11828 = -92						; size = 4
_p$11827 = -80						; size = 4
_pTable$11826 = -68					; size = 4
_MCU_Block$11821 = -56					; size = 4
_Ret$ = -44						; size = 4
_pBlockMaxZagSet$ = -32					; size = 4
_RowBlock$ = -20					; size = 4
_MCU_Row$ = -8						; size = 4
_pContext$ = 8						; size = 4
__DecodeNextRow PROC					; COMDAT
; Line 2030
	push	ebp
	mov	ebp, esp
	sub	esp, 412				; 0000019cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-412]
	mov	ecx, 103				; 00000067H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2034
	mov	DWORD PTR _Ret$[ebp], 0
; Line 2036
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29824]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pBlockMaxZagSet$[ebp], eax
; Line 2037
	mov	DWORD PTR _RowBlock$[ebp], 0
; Line 2038
	mov	DWORD PTR _MCU_Row$[ebp], 0
	jmp	SHORT $LN28@DecodeNext
$LN27@DecodeNext:
	mov	eax, DWORD PTR _MCU_Row$[ebp]
	add	eax, 1
	mov	DWORD PTR _MCU_Row$[ebp], eax
$LN28@DecodeNext:
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _MCU_Row$[ebp]
	cmp	ecx, DWORD PTR [eax+29768]
	jge	$LN26@DecodeNext
; Line 2040
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29756], 0
	je	SHORT $LN25@DecodeNext
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29760], 0
	jne	SHORT $LN25@DecodeNext
; Line 2041
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__ProcessRestart
	add	esp, 4
$LN25@DecodeNext:
; Line 2043
	mov	DWORD PTR _MCU_Block$11821[ebp], 0
	jmp	SHORT $LN24@DecodeNext
$LN23@DecodeNext:
	mov	eax, DWORD PTR _MCU_Block$11821[ebp]
	add	eax, 1
	mov	DWORD PTR _MCU_Block$11821[ebp], eax
$LN24@DecodeNext:
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _MCU_Block$11821[ebp]
	cmp	ecx, DWORD PTR [eax+29776]
	jge	$LN22@DecodeNext
	cmp	DWORD PTR _Ret$[ebp], 0
	jne	$LN22@DecodeNext
; Line 2048
	mov	eax, DWORD PTR _MCU_Block$11821[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+29780]
	mov	DWORD PTR _ComponentId$11829[ebp], edx
; Line 2049
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29820]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	edx, DWORD PTR _RowBlock$[ebp]
	shl	edx, 6
	lea	eax, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _p$11827[ebp], eax
; Line 2050
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$11829[ebp]
	movzx	ecx, BYTE PTR [eax+29477]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+29452]
	mov	DWORD PTR _q$11828[ebp], eax
; Line 2051
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$11829[ebp]
	movzx	ecx, BYTE PTR [eax+29490]
	imul	ecx, 3328				; 00000d00H
	mov	edx, DWORD PTR _pContext$[ebp]
	lea	eax, DWORD PTR [edx+ecx+2236]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__HuffDecode
	add	esp, 8
	mov	DWORD PTR _s$11831[ebp], eax
	cmp	DWORD PTR _s$11831[ebp], 0
	je	SHORT $LN21@DecodeNext
; Line 2052
	mov	eax, DWORD PTR _s$11831[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetBitsNoMarker
	add	esp, 8
	mov	DWORD PTR _r$11830[ebp], eax
; Line 2053
	mov	eax, DWORD PTR _s$11831[ebp]
	mov	ecx, DWORD PTR _r$11830[ebp]
	cmp	ecx, DWORD PTR __aExtendTest[eax*4]
	jge	SHORT $LN31@DecodeNext
	mov	edx, DWORD PTR _s$11831[ebp]
	mov	eax, DWORD PTR _r$11830[ebp]
	add	eax, DWORD PTR __aExtendOffset[edx*4]
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN32@DecodeNext
$LN31@DecodeNext:
	mov	ecx, DWORD PTR _r$11830[ebp]
	mov	DWORD PTR tv145[ebp], ecx
$LN32@DecodeNext:
	mov	edx, DWORD PTR tv145[ebp]
	mov	DWORD PTR _s$11831[ebp], edx
$LN21@DecodeNext:
; Line 2055
	mov	eax, DWORD PTR _ComponentId$11829[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR _s$11831[ebp]
	add	edx, DWORD PTR [ecx+eax*4+29540]
	mov	DWORD PTR _s$11831[ebp], edx
; Line 2056
	mov	eax, DWORD PTR _ComponentId$11829[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR _s$11831[ebp]
	mov	DWORD PTR [ecx+eax*4+29540], edx
; Line 2057
	mov	eax, DWORD PTR _q$11828[ebp]
	movzx	ecx, WORD PTR [eax]
	imul	ecx, DWORD PTR _s$11831[ebp]
	mov	edx, DWORD PTR _p$11827[ebp]
	mov	WORD PTR [edx], cx
; Line 2058
	mov	eax, DWORD PTR _pBlockMaxZagSet$[ebp]
	add	eax, DWORD PTR _RowBlock$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _PrevNumSet$11832[ebp], ecx
; Line 2059
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$11829[ebp]
	movzx	ecx, BYTE PTR [eax+29494]
	imul	ecx, 3328				; 00000d00H
	mov	edx, DWORD PTR _pContext$[ebp]
	lea	eax, DWORD PTR [edx+ecx+2236]
	mov	DWORD PTR _pTable$11826[ebp], eax
; Line 2060
	mov	DWORD PTR _k$11833[ebp], 1
	jmp	SHORT $LN20@DecodeNext
$LN19@DecodeNext:
	mov	eax, DWORD PTR _k$11833[ebp]
	add	eax, 1
	mov	DWORD PTR _k$11833[ebp], eax
$LN20@DecodeNext:
	cmp	DWORD PTR _k$11833[ebp], 64		; 00000040H
	jge	$LN18@DecodeNext
; Line 2061
	mov	eax, DWORD PTR _pTable$11826[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__HuffDecode
	add	esp, 8
	mov	DWORD PTR _s$11831[ebp], eax
; Line 2062
	mov	eax, DWORD PTR _s$11831[ebp]
	sar	eax, 4
	mov	DWORD PTR _r$11830[ebp], eax
; Line 2063
	mov	eax, DWORD PTR _s$11831[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _s$11831[ebp], eax
; Line 2064
	je	$LN17@DecodeNext
; Line 2065
	cmp	DWORD PTR _r$11830[ebp], 0
	je	$LN16@DecodeNext
; Line 2066
	mov	eax, DWORD PTR _k$11833[ebp]
	add	eax, DWORD PTR _r$11830[ebp]
	cmp	eax, 63					; 0000003fH
	jle	SHORT $LN15@DecodeNext
; Line 2067
	mov	DWORD PTR _Ret$[ebp], 1
; Line 2068
	jmp	$LN18@DecodeNext
$LN15@DecodeNext:
; Line 2070
	mov	eax, DWORD PTR _k$11833[ebp]
	cmp	eax, DWORD PTR _PrevNumSet$11832[ebp]
	jge	$LN14@DecodeNext
; Line 2072
	mov	eax, DWORD PTR _PrevNumSet$11832[ebp]
	sub	eax, DWORD PTR _k$11833[ebp]
	cmp	DWORD PTR _r$11830[ebp], eax
	jge	SHORT $LN33@DecodeNext
	mov	ecx, DWORD PTR _r$11830[ebp]
	mov	DWORD PTR tv179[ebp], ecx
	jmp	SHORT $LN34@DecodeNext
$LN33@DecodeNext:
	mov	edx, DWORD PTR _PrevNumSet$11832[ebp]
	sub	edx, DWORD PTR _k$11833[ebp]
	mov	DWORD PTR tv179[ebp], edx
$LN34@DecodeNext:
	mov	eax, DWORD PTR tv179[ebp]
	mov	DWORD PTR _n$11843[ebp], eax
; Line 2073
	mov	eax, DWORD PTR _k$11833[ebp]
	mov	DWORD PTR _kt$11844[ebp], eax
$LN13@DecodeNext:
; Line 2074
	mov	eax, DWORD PTR _n$11843[ebp]
	mov	DWORD PTR tv181[ebp], eax
	mov	ecx, DWORD PTR _n$11843[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$11843[ebp], ecx
	cmp	DWORD PTR tv181[ebp], 0
	je	SHORT $LN14@DecodeNext
; Line 2075
	mov	eax, DWORD PTR _kt$11844[ebp]
	movzx	ecx, BYTE PTR __aCoeffOrder[eax]
	xor	edx, edx
	mov	eax, DWORD PTR _p$11827[ebp]
	mov	WORD PTR [eax+ecx*2], dx
	mov	ecx, DWORD PTR _kt$11844[ebp]
	add	ecx, 1
	mov	DWORD PTR _kt$11844[ebp], ecx
; Line 2076
	jmp	SHORT $LN13@DecodeNext
$LN14@DecodeNext:
; Line 2078
	mov	eax, DWORD PTR _k$11833[ebp]
	add	eax, DWORD PTR _r$11830[ebp]
	mov	DWORD PTR _k$11833[ebp], eax
$LN16@DecodeNext:
; Line 2080
	mov	eax, DWORD PTR _s$11831[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetBitsNoMarker
	add	esp, 8
	mov	DWORD PTR _r$11830[ebp], eax
; Line 2081
	mov	eax, DWORD PTR _s$11831[ebp]
	mov	ecx, DWORD PTR _r$11830[ebp]
	cmp	ecx, DWORD PTR __aExtendTest[eax*4]
	jge	SHORT $LN35@DecodeNext
	mov	edx, DWORD PTR _s$11831[ebp]
	mov	eax, DWORD PTR _r$11830[ebp]
	add	eax, DWORD PTR __aExtendOffset[edx*4]
	mov	DWORD PTR tv198[ebp], eax
	jmp	SHORT $LN36@DecodeNext
$LN35@DecodeNext:
	mov	ecx, DWORD PTR _r$11830[ebp]
	mov	DWORD PTR tv198[ebp], ecx
$LN36@DecodeNext:
	mov	edx, DWORD PTR tv198[ebp]
	mov	DWORD PTR _s$11831[ebp], edx
; Line 2082
	mov	eax, DWORD PTR _k$11833[ebp]
	mov	ecx, DWORD PTR _q$11828[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	imul	edx, DWORD PTR _s$11831[ebp]
	mov	eax, DWORD PTR _k$11833[ebp]
	movzx	ecx, BYTE PTR __aCoeffOrder[eax]
	mov	eax, DWORD PTR _p$11827[ebp]
	mov	WORD PTR [eax+ecx*2], dx
; Line 2083
	jmp	$LN11@DecodeNext
$LN17@DecodeNext:
; Line 2084
	cmp	DWORD PTR _r$11830[ebp], 15		; 0000000fH
	jne	$LN10@DecodeNext
; Line 2085
	mov	eax, DWORD PTR _k$11833[ebp]
	add	eax, 15					; 0000000fH
	cmp	eax, 63					; 0000003fH
	jle	SHORT $LN9@DecodeNext
; Line 2086
	mov	DWORD PTR _Ret$[ebp], 1
; Line 2087
	jmp	$LN18@DecodeNext
$LN9@DecodeNext:
; Line 2089
	mov	eax, DWORD PTR _k$11833[ebp]
	cmp	eax, DWORD PTR _PrevNumSet$11832[ebp]
	jge	$LN8@DecodeNext
; Line 2091
	mov	eax, DWORD PTR _PrevNumSet$11832[ebp]
	sub	eax, DWORD PTR _k$11833[ebp]
	cmp	eax, 16					; 00000010H
	jle	SHORT $LN37@DecodeNext
	mov	DWORD PTR tv215[ebp], 16		; 00000010H
	jmp	SHORT $LN38@DecodeNext
$LN37@DecodeNext:
	mov	ecx, DWORD PTR _PrevNumSet$11832[ebp]
	sub	ecx, DWORD PTR _k$11833[ebp]
	mov	DWORD PTR tv215[ebp], ecx
$LN38@DecodeNext:
	mov	edx, DWORD PTR tv215[ebp]
	mov	DWORD PTR _n$11852[ebp], edx
; Line 2092
	mov	eax, DWORD PTR _k$11833[ebp]
	mov	DWORD PTR _kt$11853[ebp], eax
$LN7@DecodeNext:
; Line 2093
	mov	eax, DWORD PTR _n$11852[ebp]
	mov	DWORD PTR tv217[ebp], eax
	mov	ecx, DWORD PTR _n$11852[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$11852[ebp], ecx
	cmp	DWORD PTR tv217[ebp], 0
	je	SHORT $LN8@DecodeNext
; Line 2094
	mov	eax, DWORD PTR _kt$11853[ebp]
	movzx	ecx, BYTE PTR __aCoeffOrder[eax]
	xor	edx, edx
	mov	eax, DWORD PTR _p$11827[ebp]
	mov	WORD PTR [eax+ecx*2], dx
	mov	ecx, DWORD PTR _kt$11853[ebp]
	add	ecx, 1
	mov	DWORD PTR _kt$11853[ebp], ecx
; Line 2095
	jmp	SHORT $LN7@DecodeNext
$LN8@DecodeNext:
; Line 2097
	mov	eax, DWORD PTR _k$11833[ebp]
	add	eax, 15					; 0000000fH
	mov	DWORD PTR _k$11833[ebp], eax
; Line 2098
	jmp	SHORT $LN11@DecodeNext
$LN10@DecodeNext:
; Line 2099
	jmp	SHORT $LN18@DecodeNext
$LN11@DecodeNext:
; Line 2102
	jmp	$LN19@DecodeNext
$LN18@DecodeNext:
; Line 2103
	cmp	DWORD PTR _Ret$[ebp], 0
	jne	SHORT $LN4@DecodeNext
; Line 2104
	mov	eax, DWORD PTR _k$11833[ebp]
	cmp	eax, DWORD PTR _PrevNumSet$11832[ebp]
	jge	SHORT $LN3@DecodeNext
; Line 2106
	mov	eax, DWORD PTR _k$11833[ebp]
	mov	DWORD PTR _kt$11860[ebp], eax
$LN2@DecodeNext:
; Line 2107
	mov	eax, DWORD PTR _kt$11860[ebp]
	cmp	eax, DWORD PTR _PrevNumSet$11832[ebp]
	jge	SHORT $LN3@DecodeNext
; Line 2108
	mov	eax, DWORD PTR _kt$11860[ebp]
	movzx	ecx, BYTE PTR __aCoeffOrder[eax]
	xor	edx, edx
	mov	eax, DWORD PTR _p$11827[ebp]
	mov	WORD PTR [eax+ecx*2], dx
	mov	ecx, DWORD PTR _kt$11860[ebp]
	add	ecx, 1
	mov	DWORD PTR _kt$11860[ebp], ecx
; Line 2109
	jmp	SHORT $LN2@DecodeNext
$LN3@DecodeNext:
; Line 2111
	mov	eax, DWORD PTR _pBlockMaxZagSet$[ebp]
	add	eax, DWORD PTR _RowBlock$[ebp]
	mov	cl, BYTE PTR _k$11833[ebp]
	mov	BYTE PTR [eax], cl
; Line 2112
	mov	eax, DWORD PTR _RowBlock$[ebp]
	add	eax, 1
	mov	DWORD PTR _RowBlock$[ebp], eax
$LN4@DecodeNext:
; Line 2114
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _p$11827[ebp], 0
; Line 2115
	jmp	$LN23@DecodeNext
$LN22@DecodeNext:
; Line 2116
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29760]
	sub	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29760], ecx
; Line 2117
	jmp	$LN27@DecodeNext
$LN26@DecodeNext:
; Line 2118
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pBlockMaxZagSet$[ebp], 0
; Line 2119
	xor	eax, eax
; Line 2120
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 412				; 0000019cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DecodeNextRow ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __LoadNextRow
_TEXT	SEGMENT
_BlockY$ = -192						; size = 4
_BlockX$ = -180						; size = 4
_i$ = -168						; size = 4
_pAC$ = -156						; size = 4
_pDC$ = -144						; size = 4
_BlockY_MCU_Off$ = -132					; size = 4
_BlockX_MCU_Off$ = -120					; size = 4
_aBlockX_MCU$ = -108					; size = 16
_ComponentId$ = -84					; size = 4
_ComponentNumber$ = -72					; size = 4
_RowBlock$ = -60					; size = 4
_MCU_Block$ = -48					; size = 4
_MCU_Row$ = -36						; size = 4
_q$ = -24						; size = 4
_p$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pContext$ = 8						; size = 4
__LoadNextRow PROC					; COMDAT
; Line 2129
	push	ebp
	mov	ebp, esp
	sub	esp, 388				; 00000184H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-388]
	mov	ecx, 97					; 00000061H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2145
	mov	DWORD PTR _RowBlock$[ebp], 0
; Line 2146
	push	16					; 00000010H
	push	0
	lea	eax, DWORD PTR _aBlockX_MCU$[ebp]
	push	eax
	call	_GUI__memset
	add	esp, 12					; 0000000cH
; Line 2147
	mov	DWORD PTR _MCU_Row$[ebp], 0
	jmp	SHORT $LN27@LoadNextRo
$LN26@LoadNextRo:
	mov	eax, DWORD PTR _MCU_Row$[ebp]
	add	eax, 1
	mov	DWORD PTR _MCU_Row$[ebp], eax
$LN27@LoadNextRo:
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _MCU_Row$[ebp]
	cmp	ecx, DWORD PTR [eax+29768]
	jge	$LN25@LoadNextRo
; Line 2148
	mov	DWORD PTR _BlockY_MCU_Off$[ebp], 0
	mov	eax, DWORD PTR _BlockY_MCU_Off$[ebp]
	mov	DWORD PTR _BlockX_MCU_Off$[ebp], eax
; Line 2149
	mov	DWORD PTR _MCU_Block$[ebp], 0
	jmp	SHORT $LN24@LoadNextRo
$LN23@LoadNextRo:
	mov	eax, DWORD PTR _MCU_Block$[ebp]
	add	eax, 1
	mov	DWORD PTR _MCU_Block$[ebp], eax
$LN24@LoadNextRo:
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _MCU_Block$[ebp]
	cmp	ecx, DWORD PTR [eax+29776]
	jge	$LN22@LoadNextRo
; Line 2150
	mov	eax, DWORD PTR _MCU_Block$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+29780]
	mov	DWORD PTR _ComponentId$[ebp], edx
; Line 2151
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29820]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	edx, DWORD PTR _RowBlock$[ebp]
	shl	edx, 6
	lea	eax, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _p$[ebp], eax
; Line 2152
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$[ebp]
	movzx	ecx, BYTE PTR [eax+29477]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+29452]
	mov	DWORD PTR _q$[ebp], eax
; Line 2153
	mov	eax, DWORD PTR _ComponentId$[ebp]
	mov	ecx, DWORD PTR _aBlockX_MCU$[ebp+eax*4]
	add	ecx, DWORD PTR _BlockX_MCU_Off$[ebp]
	mov	DWORD PTR _BlockX$[ebp], ecx
; Line 2154
	mov	eax, DWORD PTR _ComponentId$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+29688]
	add	edx, DWORD PTR _BlockY_MCU_Off$[ebp]
	mov	DWORD PTR _BlockY$[ebp], edx
; Line 2155
	mov	eax, DWORD PTR _BlockY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BlockX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _pContext$[ebp]
	lea	ecx, DWORD PTR [eax+edx+29560]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__CoeffBufferGetP_Locked
	add	esp, 20					; 00000014H
	mov	DWORD PTR _pDC$[ebp], eax
; Line 2156
	mov	eax, DWORD PTR _BlockY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BlockX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _pContext$[ebp]
	lea	ecx, DWORD PTR [eax+edx+29624]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__CoeffBufferGetP_Locked
	add	esp, 20					; 00000014H
	mov	DWORD PTR _pAC$[ebp], eax
; Line 2157
	cmp	DWORD PTR _pDC$[ebp], 0
	je	$LN21@LoadNextRo
	cmp	DWORD PTR _pAC$[ebp], 0
	je	$LN21@LoadNextRo
; Line 2158
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _pDC$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
; Line 2159
	push	126					; 0000007eH
	mov	eax, DWORD PTR _pAC$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2160
	mov	DWORD PTR _i$[ebp], 63			; 0000003fH
	jmp	SHORT $LN20@LoadNextRo
$LN19@LoadNextRo:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN20@LoadNextRo:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN18@LoadNextRo
; Line 2161
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR __aCoeffOrder[eax]
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	test	eax, eax
	je	SHORT $LN17@LoadNextRo
; Line 2162
	jmp	SHORT $LN18@LoadNextRo
$LN17@LoadNextRo:
; Line 2164
	jmp	SHORT $LN19@LoadNextRo
$LN18@LoadNextRo:
; Line 2165
	jmp	SHORT $LN16@LoadNextRo
$LN15@LoadNextRo:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN16@LoadNextRo:
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN21@LoadNextRo
; Line 2166
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR __aCoeffOrder[eax]
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	test	eax, eax
	je	SHORT $LN13@LoadNextRo
; Line 2167
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR __aCoeffOrder[eax]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	movzx	edx, WORD PTR [eax+edx*2]
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax+ecx*2]
	imul	ecx, edx
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR __aCoeffOrder[edx]
	mov	edx, DWORD PTR _p$[ebp]
	mov	WORD PTR [edx+eax*2], cx
$LN13@LoadNextRo:
; Line 2169
	jmp	SHORT $LN15@LoadNextRo
$LN21@LoadNextRo:
; Line 2171
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN12@LoadNextRo
; Line 2172
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _p$[ebp], 0
$LN12@LoadNextRo:
; Line 2174
	cmp	DWORD PTR _pAC$[ebp], 0
	je	SHORT $LN11@LoadNextRo
; Line 2175
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pAC$[ebp], 0
$LN11@LoadNextRo:
; Line 2177
	cmp	DWORD PTR _pDC$[ebp], 0
	je	SHORT $LN10@LoadNextRo
; Line 2178
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pDC$[ebp], 0
$LN10@LoadNextRo:
; Line 2180
	mov	eax, DWORD PTR _RowBlock$[ebp]
	add	eax, 1
	mov	DWORD PTR _RowBlock$[ebp], eax
; Line 2181
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29485]
	cmp	ecx, 1
	jne	SHORT $LN9@LoadNextRo
; Line 2182
	mov	eax, DWORD PTR _ComponentId$[ebp]
	mov	ecx, DWORD PTR _aBlockX_MCU$[ebp+eax*4]
	add	ecx, 1
	mov	edx, DWORD PTR _ComponentId$[ebp]
	mov	DWORD PTR _aBlockX_MCU$[ebp+edx*4], ecx
; Line 2183
	jmp	SHORT $LN8@LoadNextRo
$LN9@LoadNextRo:
; Line 2184
	mov	eax, DWORD PTR _BlockX_MCU_Off$[ebp]
	add	eax, 1
	mov	DWORD PTR _BlockX_MCU_Off$[ebp], eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	add	ecx, DWORD PTR _ComponentId$[ebp]
	movzx	edx, BYTE PTR [ecx+29469]
	cmp	DWORD PTR _BlockX_MCU_Off$[ebp], edx
	jne	SHORT $LN8@LoadNextRo
; Line 2185
	mov	DWORD PTR _BlockX_MCU_Off$[ebp], 0
; Line 2186
	mov	eax, DWORD PTR _BlockY_MCU_Off$[ebp]
	add	eax, 1
	mov	DWORD PTR _BlockY_MCU_Off$[ebp], eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	add	ecx, DWORD PTR _ComponentId$[ebp]
	movzx	edx, BYTE PTR [ecx+29473]
	cmp	DWORD PTR _BlockY_MCU_Off$[ebp], edx
	jne	SHORT $LN8@LoadNextRo
; Line 2187
	mov	DWORD PTR _BlockY_MCU_Off$[ebp], 0
; Line 2188
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$[ebp]
	movzx	ecx, BYTE PTR [eax+29469]
	mov	edx, DWORD PTR _ComponentId$[ebp]
	add	ecx, DWORD PTR _aBlockX_MCU$[ebp+edx*4]
	mov	eax, DWORD PTR _ComponentId$[ebp]
	mov	DWORD PTR _aBlockX_MCU$[ebp+eax*4], ecx
$LN8@LoadNextRo:
; Line 2192
	jmp	$LN23@LoadNextRo
$LN22@LoadNextRo:
; Line 2193
	jmp	$LN26@LoadNextRo
$LN25@LoadNextRo:
; Line 2194
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29485]
	cmp	ecx, 1
	jne	SHORT $LN5@LoadNextRo
; Line 2195
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29486]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+29688]
	add	eax, 1
	mov	ecx, DWORD PTR _pContext$[ebp]
	movzx	edx, BYTE PTR [ecx+29486]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [ecx+edx*4+29688], eax
; Line 2196
	jmp	SHORT $LN4@LoadNextRo
$LN5@LoadNextRo:
; Line 2197
	mov	DWORD PTR _ComponentNumber$[ebp], 0
	jmp	SHORT $LN3@LoadNextRo
$LN2@LoadNextRo:
	mov	eax, DWORD PTR _ComponentNumber$[ebp]
	add	eax, 1
	mov	DWORD PTR _ComponentNumber$[ebp], eax
$LN3@LoadNextRo:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29485]
	cmp	DWORD PTR _ComponentNumber$[ebp], ecx
	jge	SHORT $LN4@LoadNextRo
; Line 2198
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentNumber$[ebp]
	movzx	ecx, BYTE PTR [eax+29486]
	mov	DWORD PTR _ComponentId$[ebp], ecx
; Line 2199
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$[ebp]
	movzx	ecx, BYTE PTR [eax+29473]
	mov	edx, DWORD PTR _ComponentId$[ebp]
	mov	eax, DWORD PTR _pContext$[ebp]
	add	ecx, DWORD PTR [eax+edx*4+29688]
	mov	edx, DWORD PTR _ComponentId$[ebp]
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+edx*4+29688], ecx
; Line 2200
	jmp	SHORT $LN2@LoadNextRo
$LN4@LoadNextRo:
; Line 2202
	xor	eax, eax
; Line 2203
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@LoadNextRo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 388				; 00000184H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN32@LoadNextRo:
	DD	1
	DD	$LN31@LoadNextRo
$LN31@LoadNextRo:
	DD	-108					; ffffff94H
	DD	16					; 00000010H
	DD	$LN30@LoadNextRo
$LN30@LoadNextRo:
	DB	97					; 00000061H
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	88					; 00000058H
	DB	95					; 0000005fH
	DB	77					; 0000004dH
	DB	67					; 00000043H
	DB	85					; 00000055H
	DB	0
__LoadNextRow ENDP
_TEXT	ENDS
PUBLIC	_GUI_JPEG__DecodeLine
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_JPEG__DecodeLine
_TEXT	SEGMENT
tv94 = -208						; size = 4
_Marker$12281 = -5					; size = 1
_pContext$ = 8						; size = 4
_GUI_JPEG__DecodeLine PROC				; COMDAT
; Line 2990
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2992
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29840], 0
	jne	$LN20@GUI_JPEG__@6
; Line 2993
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29713]
	test	ecx, ecx
	je	SHORT $LN19@GUI_JPEG__@6
; Line 2994
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__LoadNextRow
	add	esp, 4
	test	eax, eax
	je	SHORT $LN18@GUI_JPEG__@6
; Line 2995
	mov	eax, 1
	jmp	$LN21@GUI_JPEG__@6
$LN18@GUI_JPEG__@6:
; Line 2997
	jmp	SHORT $LN17@GUI_JPEG__@6
$LN19@GUI_JPEG__@6:
; Line 2998
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__DecodeNextRow
	add	esp, 4
	test	eax, eax
	je	SHORT $LN16@GUI_JPEG__@6
; Line 2999
	mov	eax, 1
	jmp	$LN21@GUI_JPEG__@6
$LN16@GUI_JPEG__@6:
; Line 3001
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [eax+29836]
	cmp	edx, DWORD PTR [ecx+29736]
	jg	SHORT $LN17@GUI_JPEG__@6
; Line 3003
	lea	eax, DWORD PTR _Marker$12281[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__ReadMarkers
	add	esp, 8
	test	eax, eax
	je	SHORT $LN14@GUI_JPEG__@6
; Line 3004
	mov	eax, 1
	jmp	$LN21@GUI_JPEG__@6
$LN14@GUI_JPEG__@6:
; Line 3006
	movzx	eax, BYTE PTR _Marker$12281[ebp]
	cmp	eax, 217				; 000000d9H
	je	SHORT $LN17@GUI_JPEG__@6
; Line 3007
	mov	eax, 1
	jmp	$LN21@GUI_JPEG__@6
$LN17@GUI_JPEG__@6:
; Line 3011
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29712], 1
; Line 3012
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+29736]
	mov	DWORD PTR [eax+29840], edx
$LN20@GUI_JPEG__@6:
; Line 3014
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29712]
	test	ecx, ecx
	je	SHORT $LN12@GUI_JPEG__@6
; Line 3015
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__TransformRow
	add	esp, 4
; Line 3016
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29712], 0
$LN12@GUI_JPEG__@6:
; Line 3019
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29714]
	mov	DWORD PTR tv94[ebp], ecx
	cmp	DWORD PTR tv94[ebp], 4
	ja	$LN10@GUI_JPEG__@6
	mov	edx, DWORD PTR tv94[ebp]
	jmp	DWORD PTR $LN26@GUI_JPEG__@6[edx*4]
$LN9@GUI_JPEG__@6:
; Line 3021
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29840]
	and	ecx, 1
	jne	SHORT $LN8@GUI_JPEG__@6
; Line 3022
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__ConvertH2V2
	add	esp, 4
; Line 3023
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29852], 0
; Line 3024
	jmp	SHORT $LN7@GUI_JPEG__@6
$LN8@GUI_JPEG__@6:
; Line 3025
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29852], 1
$LN7@GUI_JPEG__@6:
; Line 3027
	jmp	SHORT $LN10@GUI_JPEG__@6
$LN6@GUI_JPEG__@6:
; Line 3029
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__ConvertH2V1
	add	esp, 4
; Line 3030
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29852], 0
; Line 3031
	jmp	SHORT $LN10@GUI_JPEG__@6
$LN5@GUI_JPEG__@6:
; Line 3033
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29840]
	and	ecx, 1
	jne	SHORT $LN4@GUI_JPEG__@6
; Line 3034
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__ConvertH1V2
	add	esp, 4
; Line 3035
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29852], 0
; Line 3036
	jmp	SHORT $LN3@GUI_JPEG__@6
$LN4@GUI_JPEG__@6:
; Line 3037
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29852], 1
$LN3@GUI_JPEG__@6:
; Line 3039
	jmp	SHORT $LN10@GUI_JPEG__@6
$LN2@GUI_JPEG__@6:
; Line 3041
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__ConvertH1V1
	add	esp, 4
; Line 3042
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29852], 0
; Line 3043
	jmp	SHORT $LN10@GUI_JPEG__@6
$LN1@GUI_JPEG__@6:
; Line 3045
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__ConvertGray
	add	esp, 4
; Line 3046
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29852], 0
$LN10@GUI_JPEG__@6:
; Line 3049
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29840]
	sub	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29840], ecx
; Line 3050
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29836]
	sub	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29836], ecx
; Line 3051
	xor	eax, eax
$LN21@GUI_JPEG__@6:
; Line 3052
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@GUI_JPEG__@6
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN25@GUI_JPEG__@6:
	DD	1
	DD	$LN24@GUI_JPEG__@6
$LN24@GUI_JPEG__@6:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN23@GUI_JPEG__@6
$LN23@GUI_JPEG__@6:
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
	npad	1
$LN26@GUI_JPEG__@6:
	DD	$LN1@GUI_JPEG__@6
	DD	$LN2@GUI_JPEG__@6
	DD	$LN6@GUI_JPEG__@6
	DD	$LN5@GUI_JPEG__@6
	DD	$LN9@GUI_JPEG__@6
_GUI_JPEG__DecodeLine ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_GUI_ALLOC_h2p:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __TransformRow
_TEXT	SEGMENT
_r$ = -184						; size = 4
_pDest$ = -172						; size = 4
_pSrc$ = -160						; size = 4
_aTemp$ = -148						; size = 128
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pContext$ = 8						; size = 4
__TransformRow PROC					; COMDAT
; Line 2000
	push	ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-380]
	mov	ecx, 95					; 0000005fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2005
	mov	DWORD PTR _r$[ebp], 0
; Line 2007
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29828]
	push	ecx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29832], eax
; Line 2008
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29832]
	mov	DWORD PTR _pDest$[ebp], ecx
; Line 2009
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@TransformR
$LN4@TransformR:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@TransformR:
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+29728]
	jge	$LN3@TransformR
	cmp	DWORD PTR _r$[ebp], 0
	jne	$LN3@TransformR
; Line 2010
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29820]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 6
	lea	eax, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 2011
	cmp	DWORD PTR _pSrc$[ebp], 0
	je	SHORT $LN2@TransformR
; Line 2012
	push	128					; 00000080H
	mov	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2013
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aTemp$[ebp]
	push	ecx
	call	__IDCT
	add	esp, 8
; Line 2014
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _pDest$[ebp], eax
; Line 2015
	jmp	SHORT $LN1@TransformR
$LN2@TransformR:
; Line 2016
	mov	DWORD PTR _r$[ebp], 1
$LN1@TransformR:
; Line 2018
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSrc$[ebp], 0
; Line 2019
	jmp	$LN4@TransformR
$LN3@TransformR:
; Line 2020
	mov	eax, DWORD PTR _r$[ebp]
; Line 2021
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@TransformR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 380				; 0000017cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@TransformR:
	DD	1
	DD	$LN9@TransformR
$LN9@TransformR:
	DD	-148					; ffffff6cH
	DD	128					; 00000080H
	DD	$LN8@TransformR
$LN8@TransformR:
	DB	97					; 00000061H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
__TransformRow ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __IDCT
_TEXT	SEGMENT
_RowCtr$ = -200						; size = 4
_i$ = -188						; size = 2
_pData$ = -176						; size = 4
_DC_Val$ = -164						; size = 2
_z5$ = -152						; size = 4
_z4$ = -140						; size = 4
_z3$ = -128						; size = 4
_z2$ = -116						; size = 4
_z1$ = -104						; size = 4
_tmp13$ = -92						; size = 4
_tmp12$ = -80						; size = 4
_tmp11$ = -68						; size = 4
_tmp10$ = -56						; size = 4
_tmp3$ = -44						; size = 4
_tmp2$ = -32						; size = 4
_tmp1$ = -20						; size = 4
_tmp0$ = -8						; size = 4
_pSrc$ = 8						; size = 4
_pDst$ = 12						; size = 4
__IDCT	PROC						; COMDAT
; Line 1812
	push	ebp
	mov	ebp, esp
	sub	esp, 396				; 0000018cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-396]
	mov	ecx, 99					; 00000063H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1820
	mov	eax, DWORD PTR _pSrc$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 1821
	mov	DWORD PTR _RowCtr$[ebp], 7
	jmp	SHORT $LN19@IDCT
$LN18@IDCT:
	mov	eax, DWORD PTR _RowCtr$[ebp]
	sub	eax, 1
	mov	DWORD PTR _RowCtr$[ebp], eax
$LN19@IDCT:
	cmp	DWORD PTR _RowCtr$[ebp], 0
	jl	$LN17@IDCT
; Line 1828
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _pData$[ebp]
	movsx	eax, WORD PTR [edx+4]
	or	ecx, eax
	mov	edx, DWORD PTR _pData$[ebp]
	movsx	eax, WORD PTR [edx+6]
	or	ecx, eax
	mov	edx, DWORD PTR _pData$[ebp]
	movsx	eax, WORD PTR [edx+8]
	or	ecx, eax
	mov	edx, DWORD PTR _pData$[ebp]
	movsx	eax, WORD PTR [edx+10]
	or	ecx, eax
	mov	edx, DWORD PTR _pData$[ebp]
	movsx	eax, WORD PTR [edx+12]
	or	ecx, eax
	mov	edx, DWORD PTR _pData$[ebp]
	movsx	eax, WORD PTR [edx+14]
	or	ecx, eax
	jne	$LN16@IDCT
; Line 1829
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax]
	shl	ecx, 2
	mov	WORD PTR _DC_Val$[ebp], cx
; Line 1830
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _DC_Val$[ebp]
	mov	WORD PTR [eax], cx
; Line 1831
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _DC_Val$[ebp]
	mov	WORD PTR [eax+2], cx
; Line 1832
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _DC_Val$[ebp]
	mov	WORD PTR [eax+4], cx
; Line 1833
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _DC_Val$[ebp]
	mov	WORD PTR [eax+6], cx
; Line 1834
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _DC_Val$[ebp]
	mov	WORD PTR [eax+8], cx
; Line 1835
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _DC_Val$[ebp]
	mov	WORD PTR [eax+10], cx
; Line 1836
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _DC_Val$[ebp]
	mov	WORD PTR [eax+12], cx
; Line 1837
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _DC_Val$[ebp]
	mov	WORD PTR [eax+14], cx
; Line 1838
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _pData$[ebp], eax
; Line 1839
	jmp	$LN18@IDCT
$LN16@IDCT:
; Line 1841
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	DWORD PTR _z2$[ebp], ecx
; Line 1842
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax+12]
	mov	DWORD PTR _z3$[ebp], ecx
; Line 1843
	mov	eax, DWORD PTR _z2$[ebp]
	add	eax, DWORD PTR _z3$[ebp]
	imul	eax, 4433				; 00001151H
	mov	DWORD PTR _z1$[ebp], eax
; Line 1844
	mov	eax, DWORD PTR _z3$[ebp]
	imul	eax, -15137				; ffffc4dfH
	add	eax, DWORD PTR _z1$[ebp]
	mov	DWORD PTR _tmp2$[ebp], eax
; Line 1845
	mov	eax, DWORD PTR _z2$[ebp]
	imul	eax, 6270				; 0000187eH
	add	eax, DWORD PTR _z1$[ebp]
	mov	DWORD PTR _tmp3$[ebp], eax
; Line 1846
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	DWORD PTR _z2$[ebp], ecx
; Line 1847
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	DWORD PTR _z3$[ebp], ecx
; Line 1848
	mov	eax, DWORD PTR _z2$[ebp]
	add	eax, DWORD PTR _z3$[ebp]
	shl	eax, 13					; 0000000dH
	mov	DWORD PTR _tmp0$[ebp], eax
; Line 1849
	mov	eax, DWORD PTR _z2$[ebp]
	sub	eax, DWORD PTR _z3$[ebp]
	shl	eax, 13					; 0000000dH
	mov	DWORD PTR _tmp1$[ebp], eax
; Line 1850
	mov	eax, DWORD PTR _tmp0$[ebp]
	add	eax, DWORD PTR _tmp3$[ebp]
	mov	DWORD PTR _tmp10$[ebp], eax
; Line 1851
	mov	eax, DWORD PTR _tmp0$[ebp]
	sub	eax, DWORD PTR _tmp3$[ebp]
	mov	DWORD PTR _tmp13$[ebp], eax
; Line 1852
	mov	eax, DWORD PTR _tmp1$[ebp]
	add	eax, DWORD PTR _tmp2$[ebp]
	mov	DWORD PTR _tmp11$[ebp], eax
; Line 1853
	mov	eax, DWORD PTR _tmp1$[ebp]
	sub	eax, DWORD PTR _tmp2$[ebp]
	mov	DWORD PTR _tmp12$[ebp], eax
; Line 1854
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax+14]
	mov	DWORD PTR _tmp0$[ebp], ecx
; Line 1855
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	mov	DWORD PTR _tmp1$[ebp], ecx
; Line 1856
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR _tmp2$[ebp], ecx
; Line 1857
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _tmp3$[ebp], ecx
; Line 1858
	mov	eax, DWORD PTR _tmp0$[ebp]
	add	eax, DWORD PTR _tmp3$[ebp]
	mov	DWORD PTR _z1$[ebp], eax
; Line 1859
	mov	eax, DWORD PTR _tmp1$[ebp]
	add	eax, DWORD PTR _tmp2$[ebp]
	mov	DWORD PTR _z2$[ebp], eax
; Line 1860
	mov	eax, DWORD PTR _tmp0$[ebp]
	add	eax, DWORD PTR _tmp2$[ebp]
	mov	DWORD PTR _z3$[ebp], eax
; Line 1861
	mov	eax, DWORD PTR _tmp1$[ebp]
	add	eax, DWORD PTR _tmp3$[ebp]
	mov	DWORD PTR _z4$[ebp], eax
; Line 1862
	mov	eax, DWORD PTR _z3$[ebp]
	add	eax, DWORD PTR _z4$[ebp]
	imul	eax, 9633				; 000025a1H
	mov	DWORD PTR _z5$[ebp], eax
; Line 1863
	mov	eax, DWORD PTR _tmp0$[ebp]
	imul	eax, 2446				; 0000098eH
	mov	DWORD PTR _tmp0$[ebp], eax
; Line 1864
	mov	eax, DWORD PTR _tmp1$[ebp]
	imul	eax, 16819				; 000041b3H
	mov	DWORD PTR _tmp1$[ebp], eax
; Line 1865
	mov	eax, DWORD PTR _tmp2$[ebp]
	imul	eax, 25172				; 00006254H
	mov	DWORD PTR _tmp2$[ebp], eax
; Line 1866
	mov	eax, DWORD PTR _tmp3$[ebp]
	imul	eax, 12299				; 0000300bH
	mov	DWORD PTR _tmp3$[ebp], eax
; Line 1867
	mov	eax, DWORD PTR _z1$[ebp]
	imul	eax, -7373				; ffffe333H
	mov	DWORD PTR _z1$[ebp], eax
; Line 1868
	mov	eax, DWORD PTR _z2$[ebp]
	imul	eax, -20995				; ffffadfdH
	mov	DWORD PTR _z2$[ebp], eax
; Line 1869
	mov	eax, DWORD PTR _z3$[ebp]
	imul	eax, -16069				; ffffc13bH
	mov	DWORD PTR _z3$[ebp], eax
; Line 1870
	mov	eax, DWORD PTR _z4$[ebp]
	imul	eax, -3196				; fffff384H
	mov	DWORD PTR _z4$[ebp], eax
; Line 1871
	mov	eax, DWORD PTR _z3$[ebp]
	add	eax, DWORD PTR _z5$[ebp]
	mov	DWORD PTR _z3$[ebp], eax
; Line 1872
	mov	eax, DWORD PTR _z4$[ebp]
	add	eax, DWORD PTR _z5$[ebp]
	mov	DWORD PTR _z4$[ebp], eax
; Line 1873
	mov	eax, DWORD PTR _z1$[ebp]
	add	eax, DWORD PTR _z3$[ebp]
	add	eax, DWORD PTR _tmp0$[ebp]
	mov	DWORD PTR _tmp0$[ebp], eax
; Line 1874
	mov	eax, DWORD PTR _z2$[ebp]
	add	eax, DWORD PTR _z4$[ebp]
	add	eax, DWORD PTR _tmp1$[ebp]
	mov	DWORD PTR _tmp1$[ebp], eax
; Line 1875
	mov	eax, DWORD PTR _z2$[ebp]
	add	eax, DWORD PTR _z3$[ebp]
	add	eax, DWORD PTR _tmp2$[ebp]
	mov	DWORD PTR _tmp2$[ebp], eax
; Line 1876
	mov	eax, DWORD PTR _z1$[ebp]
	add	eax, DWORD PTR _z4$[ebp]
	add	eax, DWORD PTR _tmp3$[ebp]
	mov	DWORD PTR _tmp3$[ebp], eax
; Line 1877
	mov	eax, DWORD PTR _tmp3$[ebp]
	mov	ecx, DWORD PTR _tmp10$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1024]
	sar	edx, 11					; 0000000bH
	mov	eax, DWORD PTR _pData$[ebp]
	mov	WORD PTR [eax], dx
; Line 1878
	mov	eax, DWORD PTR _tmp10$[ebp]
	sub	eax, DWORD PTR _tmp3$[ebp]
	add	eax, 1024				; 00000400H
	sar	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	WORD PTR [ecx+14], ax
; Line 1879
	mov	eax, DWORD PTR _tmp2$[ebp]
	mov	ecx, DWORD PTR _tmp11$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1024]
	sar	edx, 11					; 0000000bH
	mov	eax, DWORD PTR _pData$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 1880
	mov	eax, DWORD PTR _tmp11$[ebp]
	sub	eax, DWORD PTR _tmp2$[ebp]
	add	eax, 1024				; 00000400H
	sar	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	WORD PTR [ecx+12], ax
; Line 1881
	mov	eax, DWORD PTR _tmp1$[ebp]
	mov	ecx, DWORD PTR _tmp12$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1024]
	sar	edx, 11					; 0000000bH
	mov	eax, DWORD PTR _pData$[ebp]
	mov	WORD PTR [eax+4], dx
; Line 1882
	mov	eax, DWORD PTR _tmp12$[ebp]
	sub	eax, DWORD PTR _tmp1$[ebp]
	add	eax, 1024				; 00000400H
	sar	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	WORD PTR [ecx+10], ax
; Line 1883
	mov	eax, DWORD PTR _tmp0$[ebp]
	mov	ecx, DWORD PTR _tmp13$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1024]
	sar	edx, 11					; 0000000bH
	mov	eax, DWORD PTR _pData$[ebp]
	mov	WORD PTR [eax+6], dx
; Line 1884
	mov	eax, DWORD PTR _tmp13$[ebp]
	sub	eax, DWORD PTR _tmp0$[ebp]
	add	eax, 1024				; 00000400H
	sar	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	WORD PTR [ecx+8], ax
; Line 1885
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _pData$[ebp], eax
; Line 1886
	jmp	$LN18@IDCT
$LN17@IDCT:
; Line 1887
	mov	eax, DWORD PTR _pSrc$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 1888
	mov	DWORD PTR _RowCtr$[ebp], 7
	jmp	SHORT $LN15@IDCT
$LN14@IDCT:
	mov	eax, DWORD PTR _RowCtr$[ebp]
	sub	eax, 1
	mov	DWORD PTR _RowCtr$[ebp], eax
$LN15@IDCT:
	cmp	DWORD PTR _RowCtr$[ebp], 0
	jl	$LN20@IDCT
; Line 1895
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax+16]
	mov	edx, DWORD PTR _pData$[ebp]
	movsx	eax, WORD PTR [edx+32]
	or	ecx, eax
	mov	edx, DWORD PTR _pData$[ebp]
	movsx	eax, WORD PTR [edx+48]
	or	ecx, eax
	mov	edx, DWORD PTR _pData$[ebp]
	movsx	eax, WORD PTR [edx+64]
	or	ecx, eax
	mov	edx, DWORD PTR _pData$[ebp]
	movsx	eax, WORD PTR [edx+80]
	or	ecx, eax
	mov	edx, DWORD PTR _pData$[ebp]
	movsx	eax, WORD PTR [edx+96]
	or	ecx, eax
	mov	edx, DWORD PTR _pData$[ebp]
	movsx	eax, WORD PTR [edx+112]
	or	ecx, eax
	jne	$LN12@IDCT
; Line 1896
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax]
	add	ecx, 16					; 00000010H
	sar	ecx, 5
	mov	WORD PTR _DC_Val$[ebp], cx
; Line 1897
	movsx	eax, WORD PTR _DC_Val$[ebp]
	add	eax, 128				; 00000080H
	mov	WORD PTR _DC_Val$[ebp], ax
	movsx	ecx, WORD PTR _DC_Val$[ebp]
	test	ecx, ecx
	jge	SHORT $LN11@IDCT
; Line 1898
	xor	eax, eax
	mov	WORD PTR _DC_Val$[ebp], ax
	jmp	SHORT $LN10@IDCT
$LN11@IDCT:
; Line 1899
	movsx	eax, WORD PTR _DC_Val$[ebp]
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN10@IDCT
; Line 1900
	mov	eax, 255				; 000000ffH
	mov	WORD PTR _DC_Val$[ebp], ax
$LN10@IDCT:
; Line 1902
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	cl, BYTE PTR _DC_Val$[ebp]
	mov	BYTE PTR [eax], cl
; Line 1903
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	cl, BYTE PTR _DC_Val$[ebp]
	mov	BYTE PTR [eax+8], cl
; Line 1904
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	cl, BYTE PTR _DC_Val$[ebp]
	mov	BYTE PTR [eax+16], cl
; Line 1905
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	cl, BYTE PTR _DC_Val$[ebp]
	mov	BYTE PTR [eax+24], cl
; Line 1906
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	cl, BYTE PTR _DC_Val$[ebp]
	mov	BYTE PTR [eax+32], cl
; Line 1907
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	cl, BYTE PTR _DC_Val$[ebp]
	mov	BYTE PTR [eax+40], cl
; Line 1908
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	cl, BYTE PTR _DC_Val$[ebp]
	mov	BYTE PTR [eax+48], cl
; Line 1909
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	cl, BYTE PTR _DC_Val$[ebp]
	mov	BYTE PTR [eax+56], cl
; Line 1910
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 2
	mov	DWORD PTR _pData$[ebp], eax
; Line 1911
	mov	eax, DWORD PTR _pDst$[ebp]
	add	eax, 1
	mov	DWORD PTR _pDst$[ebp], eax
; Line 1912
	jmp	$LN14@IDCT
$LN12@IDCT:
; Line 1914
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	mov	DWORD PTR _z2$[ebp], ecx
; Line 1915
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax+96]
	mov	DWORD PTR _z3$[ebp], ecx
; Line 1916
	mov	eax, DWORD PTR _z2$[ebp]
	add	eax, DWORD PTR _z3$[ebp]
	imul	eax, 4433				; 00001151H
	mov	DWORD PTR _z1$[ebp], eax
; Line 1917
	mov	eax, DWORD PTR _z3$[ebp]
	imul	eax, -15137				; ffffc4dfH
	add	eax, DWORD PTR _z1$[ebp]
	mov	DWORD PTR _tmp2$[ebp], eax
; Line 1918
	mov	eax, DWORD PTR _z2$[ebp]
	imul	eax, 6270				; 0000187eH
	add	eax, DWORD PTR _z1$[ebp]
	mov	DWORD PTR _tmp3$[ebp], eax
; Line 1919
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _pData$[ebp]
	movsx	eax, WORD PTR [edx+64]
	add	ecx, eax
	shl	ecx, 13					; 0000000dH
	mov	DWORD PTR _tmp0$[ebp], ecx
; Line 1920
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _pData$[ebp]
	movsx	eax, WORD PTR [edx+64]
	sub	ecx, eax
	shl	ecx, 13					; 0000000dH
	mov	DWORD PTR _tmp1$[ebp], ecx
; Line 1921
	mov	eax, DWORD PTR _tmp0$[ebp]
	add	eax, DWORD PTR _tmp3$[ebp]
	mov	DWORD PTR _tmp10$[ebp], eax
; Line 1922
	mov	eax, DWORD PTR _tmp0$[ebp]
	sub	eax, DWORD PTR _tmp3$[ebp]
	mov	DWORD PTR _tmp13$[ebp], eax
; Line 1923
	mov	eax, DWORD PTR _tmp1$[ebp]
	add	eax, DWORD PTR _tmp2$[ebp]
	mov	DWORD PTR _tmp11$[ebp], eax
; Line 1924
	mov	eax, DWORD PTR _tmp1$[ebp]
	sub	eax, DWORD PTR _tmp2$[ebp]
	mov	DWORD PTR _tmp12$[ebp], eax
; Line 1925
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax+112]
	mov	DWORD PTR _tmp0$[ebp], ecx
; Line 1926
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax+80]
	mov	DWORD PTR _tmp1$[ebp], ecx
; Line 1927
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax+48]
	mov	DWORD PTR _tmp2$[ebp], ecx
; Line 1928
	mov	eax, DWORD PTR _pData$[ebp]
	movsx	ecx, WORD PTR [eax+16]
	mov	DWORD PTR _tmp3$[ebp], ecx
; Line 1929
	mov	eax, DWORD PTR _tmp0$[ebp]
	add	eax, DWORD PTR _tmp3$[ebp]
	mov	DWORD PTR _z1$[ebp], eax
; Line 1930
	mov	eax, DWORD PTR _tmp1$[ebp]
	add	eax, DWORD PTR _tmp2$[ebp]
	mov	DWORD PTR _z2$[ebp], eax
; Line 1931
	mov	eax, DWORD PTR _tmp0$[ebp]
	add	eax, DWORD PTR _tmp2$[ebp]
	mov	DWORD PTR _z3$[ebp], eax
; Line 1932
	mov	eax, DWORD PTR _tmp1$[ebp]
	add	eax, DWORD PTR _tmp3$[ebp]
	mov	DWORD PTR _z4$[ebp], eax
; Line 1933
	mov	eax, DWORD PTR _z3$[ebp]
	add	eax, DWORD PTR _z4$[ebp]
	imul	eax, 9633				; 000025a1H
	mov	DWORD PTR _z5$[ebp], eax
; Line 1934
	mov	eax, DWORD PTR _tmp0$[ebp]
	imul	eax, 2446				; 0000098eH
	mov	DWORD PTR _tmp0$[ebp], eax
; Line 1935
	mov	eax, DWORD PTR _tmp1$[ebp]
	imul	eax, 16819				; 000041b3H
	mov	DWORD PTR _tmp1$[ebp], eax
; Line 1936
	mov	eax, DWORD PTR _tmp2$[ebp]
	imul	eax, 25172				; 00006254H
	mov	DWORD PTR _tmp2$[ebp], eax
; Line 1937
	mov	eax, DWORD PTR _tmp3$[ebp]
	imul	eax, 12299				; 0000300bH
	mov	DWORD PTR _tmp3$[ebp], eax
; Line 1938
	mov	eax, DWORD PTR _z1$[ebp]
	imul	eax, -7373				; ffffe333H
	mov	DWORD PTR _z1$[ebp], eax
; Line 1939
	mov	eax, DWORD PTR _z2$[ebp]
	imul	eax, -20995				; ffffadfdH
	mov	DWORD PTR _z2$[ebp], eax
; Line 1940
	mov	eax, DWORD PTR _z3$[ebp]
	imul	eax, -16069				; ffffc13bH
	mov	DWORD PTR _z3$[ebp], eax
; Line 1941
	mov	eax, DWORD PTR _z4$[ebp]
	imul	eax, -3196				; fffff384H
	mov	DWORD PTR _z4$[ebp], eax
; Line 1942
	mov	eax, DWORD PTR _z3$[ebp]
	add	eax, DWORD PTR _z5$[ebp]
	mov	DWORD PTR _z3$[ebp], eax
; Line 1943
	mov	eax, DWORD PTR _z4$[ebp]
	add	eax, DWORD PTR _z5$[ebp]
	mov	DWORD PTR _z4$[ebp], eax
; Line 1944
	mov	eax, DWORD PTR _z1$[ebp]
	add	eax, DWORD PTR _z3$[ebp]
	add	eax, DWORD PTR _tmp0$[ebp]
	mov	DWORD PTR _tmp0$[ebp], eax
; Line 1945
	mov	eax, DWORD PTR _z2$[ebp]
	add	eax, DWORD PTR _z4$[ebp]
	add	eax, DWORD PTR _tmp1$[ebp]
	mov	DWORD PTR _tmp1$[ebp], eax
; Line 1946
	mov	eax, DWORD PTR _z2$[ebp]
	add	eax, DWORD PTR _z3$[ebp]
	add	eax, DWORD PTR _tmp2$[ebp]
	mov	DWORD PTR _tmp2$[ebp], eax
; Line 1947
	mov	eax, DWORD PTR _z1$[ebp]
	add	eax, DWORD PTR _z4$[ebp]
	add	eax, DWORD PTR _tmp3$[ebp]
	mov	DWORD PTR _tmp3$[ebp], eax
; Line 1948
	mov	eax, DWORD PTR _tmp3$[ebp]
	mov	ecx, DWORD PTR _tmp10$[ebp]
	lea	edx, DWORD PTR [ecx+eax+131072]
	sar	edx, 18					; 00000012H
	movsx	eax, dx
	add	eax, 128				; 00000080H
	mov	WORD PTR _i$[ebp], ax
; Line 1949
	movsx	eax, WORD PTR _i$[ebp]
	and	eax, 65280				; 0000ff00H
	je	SHORT $LN8@IDCT
; Line 1950
	movsx	eax, WORD PTR _i$[ebp]
	not	eax
	sar	eax, 15					; 0000000fH
	and	eax, 255				; 000000ffH
	mov	WORD PTR _i$[ebp], ax
$LN8@IDCT:
; Line 1952
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax], cl
; Line 1953
	mov	eax, DWORD PTR _tmp10$[ebp]
	sub	eax, DWORD PTR _tmp3$[ebp]
	add	eax, 131072				; 00020000H
	sar	eax, 18					; 00000012H
	movsx	ecx, ax
	add	ecx, 128				; 00000080H
	mov	WORD PTR _i$[ebp], cx
; Line 1954
	movsx	eax, WORD PTR _i$[ebp]
	and	eax, 65280				; 0000ff00H
	je	SHORT $LN7@IDCT
; Line 1955
	movsx	eax, WORD PTR _i$[ebp]
	not	eax
	sar	eax, 15					; 0000000fH
	and	eax, 255				; 000000ffH
	mov	WORD PTR _i$[ebp], ax
$LN7@IDCT:
; Line 1957
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax+56], cl
; Line 1958
	mov	eax, DWORD PTR _tmp2$[ebp]
	mov	ecx, DWORD PTR _tmp11$[ebp]
	lea	edx, DWORD PTR [ecx+eax+131072]
	sar	edx, 18					; 00000012H
	movsx	eax, dx
	add	eax, 128				; 00000080H
	mov	WORD PTR _i$[ebp], ax
; Line 1959
	movsx	eax, WORD PTR _i$[ebp]
	and	eax, 65280				; 0000ff00H
	je	SHORT $LN6@IDCT
; Line 1960
	movsx	eax, WORD PTR _i$[ebp]
	not	eax
	sar	eax, 15					; 0000000fH
	and	eax, 255				; 000000ffH
	mov	WORD PTR _i$[ebp], ax
$LN6@IDCT:
; Line 1962
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax+8], cl
; Line 1963
	mov	eax, DWORD PTR _tmp11$[ebp]
	sub	eax, DWORD PTR _tmp2$[ebp]
	add	eax, 131072				; 00020000H
	sar	eax, 18					; 00000012H
	movsx	ecx, ax
	add	ecx, 128				; 00000080H
	mov	WORD PTR _i$[ebp], cx
; Line 1964
	movsx	eax, WORD PTR _i$[ebp]
	and	eax, 65280				; 0000ff00H
	je	SHORT $LN5@IDCT
; Line 1965
	movsx	eax, WORD PTR _i$[ebp]
	not	eax
	sar	eax, 15					; 0000000fH
	and	eax, 255				; 000000ffH
	mov	WORD PTR _i$[ebp], ax
$LN5@IDCT:
; Line 1967
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax+48], cl
; Line 1968
	mov	eax, DWORD PTR _tmp1$[ebp]
	mov	ecx, DWORD PTR _tmp12$[ebp]
	lea	edx, DWORD PTR [ecx+eax+131072]
	sar	edx, 18					; 00000012H
	movsx	eax, dx
	add	eax, 128				; 00000080H
	mov	WORD PTR _i$[ebp], ax
; Line 1969
	movsx	eax, WORD PTR _i$[ebp]
	and	eax, 65280				; 0000ff00H
	je	SHORT $LN4@IDCT
; Line 1970
	movsx	eax, WORD PTR _i$[ebp]
	not	eax
	sar	eax, 15					; 0000000fH
	and	eax, 255				; 000000ffH
	mov	WORD PTR _i$[ebp], ax
$LN4@IDCT:
; Line 1972
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax+16], cl
; Line 1973
	mov	eax, DWORD PTR _tmp12$[ebp]
	sub	eax, DWORD PTR _tmp1$[ebp]
	add	eax, 131072				; 00020000H
	sar	eax, 18					; 00000012H
	movsx	ecx, ax
	add	ecx, 128				; 00000080H
	mov	WORD PTR _i$[ebp], cx
; Line 1974
	movsx	eax, WORD PTR _i$[ebp]
	and	eax, 65280				; 0000ff00H
	je	SHORT $LN3@IDCT
; Line 1975
	movsx	eax, WORD PTR _i$[ebp]
	not	eax
	sar	eax, 15					; 0000000fH
	and	eax, 255				; 000000ffH
	mov	WORD PTR _i$[ebp], ax
$LN3@IDCT:
; Line 1977
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax+40], cl
; Line 1978
	mov	eax, DWORD PTR _tmp0$[ebp]
	mov	ecx, DWORD PTR _tmp13$[ebp]
	lea	edx, DWORD PTR [ecx+eax+131072]
	sar	edx, 18					; 00000012H
	movsx	eax, dx
	add	eax, 128				; 00000080H
	mov	WORD PTR _i$[ebp], ax
; Line 1979
	movsx	eax, WORD PTR _i$[ebp]
	and	eax, 65280				; 0000ff00H
	je	SHORT $LN2@IDCT
; Line 1980
	movsx	eax, WORD PTR _i$[ebp]
	not	eax
	sar	eax, 15					; 0000000fH
	and	eax, 255				; 000000ffH
	mov	WORD PTR _i$[ebp], ax
$LN2@IDCT:
; Line 1982
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax+24], cl
; Line 1983
	mov	eax, DWORD PTR _tmp13$[ebp]
	sub	eax, DWORD PTR _tmp0$[ebp]
	add	eax, 131072				; 00020000H
	sar	eax, 18					; 00000012H
	movsx	ecx, ax
	add	ecx, 128				; 00000080H
	mov	WORD PTR _i$[ebp], cx
; Line 1984
	movsx	eax, WORD PTR _i$[ebp]
	and	eax, 65280				; 0000ff00H
	je	SHORT $LN1@IDCT
; Line 1985
	movsx	eax, WORD PTR _i$[ebp]
	not	eax
	sar	eax, 15					; 0000000fH
	and	eax, 255				; 000000ffH
	mov	WORD PTR _i$[ebp], ax
$LN1@IDCT:
; Line 1987
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax+32], cl
; Line 1988
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 2
	mov	DWORD PTR _pData$[ebp], eax
; Line 1989
	mov	eax, DWORD PTR _pDst$[ebp]
	add	eax, 1
	mov	DWORD PTR _pDst$[ebp], eax
; Line 1990
	jmp	$LN14@IDCT
$LN20@IDCT:
; Line 1991
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__IDCT	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __ConvertH1V1
_TEXT	SEGMENT
_cr$11942 = -140					; size = 4
_cb$11941 = -128					; size = 4
_y$11940 = -116						; size = 4
_pSrc$ = -104						; size = 4
_pDst$ = -92						; size = 4
_j$ = -80						; size = 4
_i$ = -68						; size = 4
_Row$ = -56						; size = 4
_pCBG$ = -44						; size = 4
_pCRG$ = -32						; size = 4
_pCBB$ = -20						; size = 4
_pCRR$ = -8						; size = 4
_pContext$ = 8						; size = 4
__ConvertH1V1 PROC					; COMDAT
; Line 2213
	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2223
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 29856				; 000074a0H
	mov	DWORD PTR _pCRR$[ebp], eax
; Line 2224
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 30880				; 000078a0H
	mov	DWORD PTR _pCBB$[ebp], eax
; Line 2225
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 31904				; 00007ca0H
	mov	DWORD PTR _pCRG$[ebp], eax
; Line 2226
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 32928				; 000080a0H
	mov	DWORD PTR _pCBG$[ebp], eax
; Line 2227
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [eax+29736]
	sub	edx, DWORD PTR [ecx+29840]
	mov	DWORD PTR _Row$[ebp], edx
; Line 2228
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29844]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pDst$[ebp], eax
; Line 2229
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29832]
	mov	edx, DWORD PTR _Row$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 2230
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29716]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN6@ConvertH1V
$LN5@ConvertH1V:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@ConvertH1V:
	cmp	DWORD PTR _i$[ebp], 0
	jle	$LN4@ConvertH1V
; Line 2231
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@ConvertH1V
$LN2@ConvertH1V:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@ConvertH1V:
	cmp	DWORD PTR _j$[ebp], 8
	jge	$LN1@ConvertH1V
; Line 2238
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _y$11940[ebp], ecx
; Line 2239
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [eax+64]
	mov	DWORD PTR _cb$11941[ebp], ecx
; Line 2240
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [eax+128]
	mov	DWORD PTR _cr$11942[ebp], ecx
; Line 2242
	mov	eax, DWORD PTR _cr$11942[ebp]
	mov	ecx, DWORD PTR _pCRR$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	ecx, DWORD PTR _y$11940[ebp]
	mov	dl, BYTE PTR __aLimit[ecx+edx+256]
	mov	BYTE PTR [eax], dl
; Line 2243
	mov	eax, DWORD PTR _cr$11942[ebp]
	mov	ecx, DWORD PTR _pCRG$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _cb$11941[ebp]
	mov	ecx, DWORD PTR _pCBG$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	ecx, DWORD PTR _y$11940[ebp]
	mov	dl, BYTE PTR __aLimit[ecx+edx+256]
	mov	BYTE PTR [eax+1], dl
; Line 2244
	mov	eax, DWORD PTR _cb$11941[ebp]
	mov	ecx, DWORD PTR _pCBB$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	ecx, DWORD PTR _y$11940[ebp]
	mov	dl, BYTE PTR __aLimit[ecx+edx+256]
	mov	BYTE PTR [eax+2], dl
; Line 2256
	mov	eax, DWORD PTR _pDst$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDst$[ebp], eax
; Line 2257
	jmp	$LN2@ConvertH1V
$LN1@ConvertH1V:
; Line 2258
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 192				; 000000c0H
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 2259
	jmp	$LN5@ConvertH1V
$LN4@ConvertH1V:
; Line 2260
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pDst$[ebp], 0
; Line 2261
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ConvertH1V1 ENDP
_TEXT	ENDS
EXTRN	_GUI_ErrorOut:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __ConvertH2V2
_TEXT	SEGMENT
_yy$11978 = -212					; size = 4
_bc$11977 = -200					; size = 4
_gc$11976 = -188					; size = 4
_rc$11975 = -176					; size = 4
_cr$11974 = -164					; size = 4
_cb$11973 = -152					; size = 4
_pC$ = -140						; size = 4
_pY$ = -128						; size = 4
_pDst_1$ = -116						; size = 4
_pDst_0$ = -104						; size = 4
_j$ = -92						; size = 4
_l$ = -80						; size = 4
_i$ = -68						; size = 4
_Row$ = -56						; size = 4
_pCBG$ = -44						; size = 4
_pCRG$ = -32						; size = 4
_pCBB$ = -20						; size = 4
_pCRR$ = -8						; size = 4
_pContext$ = 8						; size = 4
__ConvertH2V2 PROC					; COMDAT
; Line 2271
	push	ebp
	mov	ebp, esp
	sub	esp, 408				; 00000198H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-408]
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2284
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 29856				; 000074a0H
	mov	DWORD PTR _pCRR$[ebp], eax
; Line 2285
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 30880				; 000078a0H
	mov	DWORD PTR _pCBB$[ebp], eax
; Line 2286
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 31904				; 00007ca0H
	mov	DWORD PTR _pCRG$[ebp], eax
; Line 2287
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 32928				; 000080a0H
	mov	DWORD PTR _pCBG$[ebp], eax
; Line 2288
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [eax+29736]
	sub	edx, DWORD PTR [ecx+29840]
	mov	DWORD PTR _Row$[ebp], edx
; Line 2289
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29844]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pDst_0$[ebp], eax
; Line 2290
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29848]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pDst_1$[ebp], eax
; Line 2291
	cmp	DWORD PTR _Row$[ebp], 8
	jge	SHORT $LN13@ConvertH2V
; Line 2292
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29832]
	mov	edx, DWORD PTR _Row$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _pY$[ebp], eax
; Line 2293
	jmp	SHORT $LN12@ConvertH2V
$LN13@ConvertH2V:
; Line 2294
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29832]
	mov	edx, DWORD PTR _Row$[ebp]
	and	edx, 7
	lea	eax, DWORD PTR [ecx+edx*8+128]
	mov	DWORD PTR _pY$[ebp], eax
$LN12@ConvertH2V:
; Line 2296
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29832]
	mov	edx, DWORD PTR _Row$[ebp]
	sar	edx, 1
	lea	eax, DWORD PTR [ecx+edx*8+256]
	mov	DWORD PTR _pC$[ebp], eax
; Line 2297
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29716]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN11@ConvertH2V
$LN10@ConvertH2V:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@ConvertH2V:
	cmp	DWORD PTR _i$[ebp], 0
	jle	$_ConvertH2V2_skip$11981
; Line 2298
	mov	DWORD PTR _l$[ebp], 0
	jmp	SHORT $LN8@ConvertH2V
$LN7@ConvertH2V:
	mov	eax, DWORD PTR _l$[ebp]
	add	eax, 1
	mov	DWORD PTR _l$[ebp], eax
$LN8@ConvertH2V:
	cmp	DWORD PTR _l$[ebp], 2
	jge	$LN6@ConvertH2V
; Line 2299
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN5@ConvertH2V
$LN4@ConvertH2V:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 2
	mov	DWORD PTR _j$[ebp], eax
$LN5@ConvertH2V:
	cmp	DWORD PTR _j$[ebp], 8
	jge	$LN3@ConvertH2V
; Line 2309
	mov	eax, DWORD PTR _pC$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _cb$11973[ebp], ecx
; Line 2310
	mov	eax, DWORD PTR _pC$[ebp]
	movzx	ecx, BYTE PTR [eax+64]
	mov	DWORD PTR _cr$11974[ebp], ecx
; Line 2311
	mov	eax, DWORD PTR _cr$11974[ebp]
	mov	ecx, DWORD PTR _pCRR$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _rc$11975[ebp], edx
; Line 2312
	mov	eax, DWORD PTR _cr$11974[ebp]
	mov	ecx, DWORD PTR _pCRG$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _cb$11973[ebp]
	mov	ecx, DWORD PTR _pCBG$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	sar	edx, 16					; 00000010H
	mov	DWORD PTR _gc$11976[ebp], edx
; Line 2313
	mov	eax, DWORD PTR _cb$11973[ebp]
	mov	ecx, DWORD PTR _pCBB$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _bc$11977[ebp], edx
; Line 2315
	cmp	DWORD PTR _gc$11976[ebp], 511		; 000001ffH
	jle	SHORT $LN2@ConvertH2V
; Line 2316
	push	OFFSET $SG11980
	call	_GUI_ErrorOut
	add	esp, 4
; Line 2317
	jmp	$_ConvertH2V2_skip$11981
$LN2@ConvertH2V:
; Line 2319
	cmp	DWORD PTR _gc$11976[ebp], -256		; ffffff00H
	jge	SHORT $LN1@ConvertH2V
; Line 2320
	push	OFFSET $SG11983
	call	_GUI_ErrorOut
	add	esp, 4
; Line 2321
	jmp	$_ConvertH2V2_skip$11981
$LN1@ConvertH2V:
; Line 2325
	mov	eax, DWORD PTR _pY$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _yy$11978[ebp], ecx
; Line 2326
	mov	eax, DWORD PTR _yy$11978[ebp]
	add	eax, DWORD PTR _rc$11975[ebp]
	mov	ecx, DWORD PTR _pDst_0$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx], dl
; Line 2327
	mov	eax, DWORD PTR _yy$11978[ebp]
	add	eax, DWORD PTR _gc$11976[ebp]
	mov	ecx, DWORD PTR _pDst_0$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+1], dl
; Line 2328
	mov	eax, DWORD PTR _yy$11978[ebp]
	add	eax, DWORD PTR _bc$11977[ebp]
	mov	ecx, DWORD PTR _pDst_0$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+2], dl
; Line 2329
	mov	eax, DWORD PTR _pY$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	DWORD PTR _yy$11978[ebp], ecx
; Line 2330
	mov	eax, DWORD PTR _yy$11978[ebp]
	add	eax, DWORD PTR _rc$11975[ebp]
	mov	ecx, DWORD PTR _pDst_0$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+4], dl
; Line 2331
	mov	eax, DWORD PTR _yy$11978[ebp]
	add	eax, DWORD PTR _gc$11976[ebp]
	mov	ecx, DWORD PTR _pDst_0$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+5], dl
; Line 2332
	mov	eax, DWORD PTR _yy$11978[ebp]
	add	eax, DWORD PTR _bc$11977[ebp]
	mov	ecx, DWORD PTR _pDst_0$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+6], dl
; Line 2333
	mov	eax, DWORD PTR _pY$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	DWORD PTR _yy$11978[ebp], ecx
; Line 2334
	mov	eax, DWORD PTR _yy$11978[ebp]
	add	eax, DWORD PTR _rc$11975[ebp]
	mov	ecx, DWORD PTR _pDst_1$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx], dl
; Line 2335
	mov	eax, DWORD PTR _yy$11978[ebp]
	add	eax, DWORD PTR _gc$11976[ebp]
	mov	ecx, DWORD PTR _pDst_1$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+1], dl
; Line 2336
	mov	eax, DWORD PTR _yy$11978[ebp]
	add	eax, DWORD PTR _bc$11977[ebp]
	mov	ecx, DWORD PTR _pDst_1$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+2], dl
; Line 2337
	mov	eax, DWORD PTR _pY$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	mov	DWORD PTR _yy$11978[ebp], ecx
; Line 2338
	mov	eax, DWORD PTR _yy$11978[ebp]
	add	eax, DWORD PTR _rc$11975[ebp]
	mov	ecx, DWORD PTR _pDst_1$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+4], dl
; Line 2339
	mov	eax, DWORD PTR _yy$11978[ebp]
	add	eax, DWORD PTR _gc$11976[ebp]
	mov	ecx, DWORD PTR _pDst_1$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+5], dl
; Line 2340
	mov	eax, DWORD PTR _yy$11978[ebp]
	add	eax, DWORD PTR _bc$11977[ebp]
	mov	ecx, DWORD PTR _pDst_1$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+6], dl
; Line 2386
	mov	eax, DWORD PTR _pDst_0$[ebp]
	add	eax, 8
	mov	DWORD PTR _pDst_0$[ebp], eax
; Line 2387
	mov	eax, DWORD PTR _pDst_1$[ebp]
	add	eax, 8
	mov	DWORD PTR _pDst_1$[ebp], eax
; Line 2388
	mov	eax, DWORD PTR _pC$[ebp]
	add	eax, 1
	mov	DWORD PTR _pC$[ebp], eax
; Line 2389
	jmp	$LN4@ConvertH2V
$LN3@ConvertH2V:
; Line 2390
	mov	eax, DWORD PTR _pY$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _pY$[ebp], eax
; Line 2391
	jmp	$LN7@ConvertH2V
$LN6@ConvertH2V:
; Line 2392
	mov	eax, DWORD PTR _pY$[ebp]
	add	eax, 256				; 00000100H
	mov	DWORD PTR _pY$[ebp], eax
; Line 2393
	mov	eax, DWORD PTR _pC$[ebp]
	add	eax, 376				; 00000178H
	mov	DWORD PTR _pC$[ebp], eax
; Line 2394
	jmp	$LN10@ConvertH2V
$_ConvertH2V2_skip$11981:
; Line 2398
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pDst_0$[ebp], 0
; Line 2399
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pDst_1$[ebp], 0
; Line 2400
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 408				; 00000198H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ConvertH2V2 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __ConvertH2V1
_TEXT	SEGMENT
_yy$12016 = -200					; size = 4
_bc$12015 = -188					; size = 4
_gc$12014 = -176					; size = 4
_rc$12013 = -164					; size = 4
_cr$12012 = -152					; size = 4
_cb$12011 = -140					; size = 4
_pC$ = -128						; size = 4
_pY$ = -116						; size = 4
_pDst$ = -104						; size = 4
_j$ = -92						; size = 4
_l$ = -80						; size = 4
_i$ = -68						; size = 4
_Row$ = -56						; size = 4
_pCBG$ = -44						; size = 4
_pCRG$ = -32						; size = 4
_pCBB$ = -20						; size = 4
_pCRR$ = -8						; size = 4
_pContext$ = 8						; size = 4
__ConvertH2V1 PROC					; COMDAT
; Line 2410
	push	ebp
	mov	ebp, esp
	sub	esp, 396				; 0000018cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-396]
	mov	ecx, 99					; 00000063H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2422
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 29856				; 000074a0H
	mov	DWORD PTR _pCRR$[ebp], eax
; Line 2423
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 30880				; 000078a0H
	mov	DWORD PTR _pCBB$[ebp], eax
; Line 2424
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 31904				; 00007ca0H
	mov	DWORD PTR _pCRG$[ebp], eax
; Line 2425
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 32928				; 000080a0H
	mov	DWORD PTR _pCBG$[ebp], eax
; Line 2426
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [eax+29736]
	sub	edx, DWORD PTR [ecx+29840]
	mov	DWORD PTR _Row$[ebp], edx
; Line 2427
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29844]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pDst$[ebp], eax
; Line 2428
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29832]
	mov	edx, DWORD PTR _Row$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _pY$[ebp], eax
; Line 2429
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29832]
	mov	edx, DWORD PTR _Row$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+128]
	mov	DWORD PTR _pC$[ebp], eax
; Line 2430
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29716]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN9@ConvertH2V@2
$LN8@ConvertH2V@2:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@ConvertH2V@2:
	cmp	DWORD PTR _i$[ebp], 0
	jle	$LN7@ConvertH2V@2
; Line 2431
	mov	DWORD PTR _l$[ebp], 0
	jmp	SHORT $LN6@ConvertH2V@2
$LN5@ConvertH2V@2:
	mov	eax, DWORD PTR _l$[ebp]
	add	eax, 1
	mov	DWORD PTR _l$[ebp], eax
$LN6@ConvertH2V@2:
	cmp	DWORD PTR _l$[ebp], 2
	jge	$LN4@ConvertH2V@2
; Line 2432
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@ConvertH2V@2
$LN2@ConvertH2V@2:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@ConvertH2V@2:
	cmp	DWORD PTR _j$[ebp], 4
	jge	$LN1@ConvertH2V@2
; Line 2442
	mov	eax, DWORD PTR _pC$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _cb$12011[ebp], ecx
; Line 2443
	mov	eax, DWORD PTR _pC$[ebp]
	movzx	ecx, BYTE PTR [eax+64]
	mov	DWORD PTR _cr$12012[ebp], ecx
; Line 2444
	mov	eax, DWORD PTR _cr$12012[ebp]
	mov	ecx, DWORD PTR _pCRR$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _rc$12013[ebp], edx
; Line 2445
	mov	eax, DWORD PTR _cr$12012[ebp]
	mov	ecx, DWORD PTR _pCRG$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _cb$12011[ebp]
	mov	ecx, DWORD PTR _pCBG$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	sar	edx, 16					; 00000010H
	mov	DWORD PTR _gc$12014[ebp], edx
; Line 2446
	mov	eax, DWORD PTR _cb$12011[ebp]
	mov	ecx, DWORD PTR _pCBB$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _bc$12015[ebp], edx
; Line 2448
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _pY$[ebp]
	movzx	edx, BYTE PTR [ecx+eax*2]
	mov	DWORD PTR _yy$12016[ebp], edx
; Line 2449
	mov	eax, DWORD PTR _yy$12016[ebp]
	add	eax, DWORD PTR _rc$12013[ebp]
	mov	ecx, DWORD PTR _pDst$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx], dl
; Line 2450
	mov	eax, DWORD PTR _yy$12016[ebp]
	add	eax, DWORD PTR _gc$12014[ebp]
	mov	ecx, DWORD PTR _pDst$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+1], dl
; Line 2451
	mov	eax, DWORD PTR _yy$12016[ebp]
	add	eax, DWORD PTR _bc$12015[ebp]
	mov	ecx, DWORD PTR _pDst$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+2], dl
; Line 2452
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _pY$[ebp]
	movzx	edx, BYTE PTR [ecx+eax*2+1]
	mov	DWORD PTR _yy$12016[ebp], edx
; Line 2453
	mov	eax, DWORD PTR _yy$12016[ebp]
	add	eax, DWORD PTR _rc$12013[ebp]
	mov	ecx, DWORD PTR _pDst$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+4], dl
; Line 2454
	mov	eax, DWORD PTR _yy$12016[ebp]
	add	eax, DWORD PTR _gc$12014[ebp]
	mov	ecx, DWORD PTR _pDst$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+5], dl
; Line 2455
	mov	eax, DWORD PTR _yy$12016[ebp]
	add	eax, DWORD PTR _bc$12015[ebp]
	mov	ecx, DWORD PTR _pDst$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+6], dl
; Line 2479
	mov	eax, DWORD PTR _pDst$[ebp]
	add	eax, 8
	mov	DWORD PTR _pDst$[ebp], eax
; Line 2480
	mov	eax, DWORD PTR _pC$[ebp]
	add	eax, 1
	mov	DWORD PTR _pC$[ebp], eax
; Line 2481
	jmp	$LN2@ConvertH2V@2
$LN1@ConvertH2V@2:
; Line 2482
	mov	eax, DWORD PTR _pY$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _pY$[ebp], eax
; Line 2483
	jmp	$LN5@ConvertH2V@2
$LN4@ConvertH2V@2:
; Line 2484
	mov	eax, DWORD PTR _pY$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _pY$[ebp], eax
; Line 2485
	mov	eax, DWORD PTR _pC$[ebp]
	add	eax, 248				; 000000f8H
	mov	DWORD PTR _pC$[ebp], eax
; Line 2486
	jmp	$LN8@ConvertH2V@2
$LN7@ConvertH2V@2:
; Line 2487
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pDst$[ebp], 0
; Line 2488
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 396				; 0000018cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ConvertH2V1 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __ConvertH1V2
_TEXT	SEGMENT
_yy$12048 = -200					; size = 4
_bc$12047 = -188					; size = 4
_gc$12046 = -176					; size = 4
_rc$12045 = -164					; size = 4
_cr$12044 = -152					; size = 4
_cb$12043 = -140					; size = 4
_pC$ = -128						; size = 4
_pY$ = -116						; size = 4
_pDst_1$ = -104						; size = 4
_pDst_0$ = -92						; size = 4
_j$ = -80						; size = 4
_i$ = -68						; size = 4
_Row$ = -56						; size = 4
_pCBG$ = -44						; size = 4
_pCRG$ = -32						; size = 4
_pCBB$ = -20						; size = 4
_pCRR$ = -8						; size = 4
_pContext$ = 8						; size = 4
__ConvertH1V2 PROC					; COMDAT
; Line 2498
	push	ebp
	mov	ebp, esp
	sub	esp, 396				; 0000018cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-396]
	mov	ecx, 99					; 00000063H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2510
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 29856				; 000074a0H
	mov	DWORD PTR _pCRR$[ebp], eax
; Line 2511
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 30880				; 000078a0H
	mov	DWORD PTR _pCBB$[ebp], eax
; Line 2512
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 31904				; 00007ca0H
	mov	DWORD PTR _pCRG$[ebp], eax
; Line 2513
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 32928				; 000080a0H
	mov	DWORD PTR _pCBG$[ebp], eax
; Line 2514
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [eax+29736]
	sub	edx, DWORD PTR [ecx+29840]
	mov	DWORD PTR _Row$[ebp], edx
; Line 2515
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29844]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pDst_0$[ebp], eax
; Line 2516
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29848]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pDst_1$[ebp], eax
; Line 2517
	cmp	DWORD PTR _Row$[ebp], 8
	jge	SHORT $LN8@ConvertH1V@2
; Line 2518
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29832]
	mov	edx, DWORD PTR _Row$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _pY$[ebp], eax
; Line 2519
	jmp	SHORT $LN7@ConvertH1V@2
$LN8@ConvertH1V@2:
; Line 2520
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29832]
	mov	edx, DWORD PTR _Row$[ebp]
	and	edx, 7
	lea	eax, DWORD PTR [ecx+edx*8+64]
	mov	DWORD PTR _pY$[ebp], eax
$LN7@ConvertH1V@2:
; Line 2522
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29832]
	mov	edx, DWORD PTR _Row$[ebp]
	sar	edx, 1
	lea	eax, DWORD PTR [ecx+edx*8+128]
	mov	DWORD PTR _pC$[ebp], eax
; Line 2523
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29716]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN6@ConvertH1V@2
$LN5@ConvertH1V@2:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@ConvertH1V@2:
	cmp	DWORD PTR _i$[ebp], 0
	jle	$LN4@ConvertH1V@2
; Line 2524
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@ConvertH1V@2
$LN2@ConvertH1V@2:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@ConvertH1V@2:
	cmp	DWORD PTR _j$[ebp], 8
	jge	$LN1@ConvertH1V@2
; Line 2534
	mov	eax, DWORD PTR _pC$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _cb$12043[ebp], ecx
; Line 2535
	mov	eax, DWORD PTR _pC$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [eax+64]
	mov	DWORD PTR _cr$12044[ebp], ecx
; Line 2536
	mov	eax, DWORD PTR _cr$12044[ebp]
	mov	ecx, DWORD PTR _pCRR$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _rc$12045[ebp], edx
; Line 2537
	mov	eax, DWORD PTR _cr$12044[ebp]
	mov	ecx, DWORD PTR _pCRG$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _cb$12043[ebp]
	mov	ecx, DWORD PTR _pCBG$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	sar	edx, 16					; 00000010H
	mov	DWORD PTR _gc$12046[ebp], edx
; Line 2538
	mov	eax, DWORD PTR _cb$12043[ebp]
	mov	ecx, DWORD PTR _pCBB$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _bc$12047[ebp], edx
; Line 2540
	mov	eax, DWORD PTR _pY$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _yy$12048[ebp], ecx
; Line 2541
	mov	eax, DWORD PTR _yy$12048[ebp]
	add	eax, DWORD PTR _rc$12045[ebp]
	mov	ecx, DWORD PTR _pDst_0$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx], dl
; Line 2542
	mov	eax, DWORD PTR _yy$12048[ebp]
	add	eax, DWORD PTR _gc$12046[ebp]
	mov	ecx, DWORD PTR _pDst_0$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+1], dl
; Line 2543
	mov	eax, DWORD PTR _yy$12048[ebp]
	add	eax, DWORD PTR _bc$12047[ebp]
	mov	ecx, DWORD PTR _pDst_0$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+2], dl
; Line 2544
	mov	eax, DWORD PTR _pY$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	DWORD PTR _yy$12048[ebp], ecx
; Line 2545
	mov	eax, DWORD PTR _yy$12048[ebp]
	add	eax, DWORD PTR _rc$12045[ebp]
	mov	ecx, DWORD PTR _pDst_1$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx], dl
; Line 2546
	mov	eax, DWORD PTR _yy$12048[ebp]
	add	eax, DWORD PTR _gc$12046[ebp]
	mov	ecx, DWORD PTR _pDst_1$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+1], dl
; Line 2547
	mov	eax, DWORD PTR _yy$12048[ebp]
	add	eax, DWORD PTR _bc$12047[ebp]
	mov	ecx, DWORD PTR _pDst_1$[ebp]
	mov	dl, BYTE PTR __aLimit[eax+256]
	mov	BYTE PTR [ecx+2], dl
; Line 2571
	mov	eax, DWORD PTR _pDst_0$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDst_0$[ebp], eax
; Line 2572
	mov	eax, DWORD PTR _pDst_1$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDst_1$[ebp], eax
; Line 2573
	jmp	$LN2@ConvertH1V@2
$LN1@ConvertH1V@2:
; Line 2574
	mov	eax, DWORD PTR _pY$[ebp]
	add	eax, 256				; 00000100H
	mov	DWORD PTR _pY$[ebp], eax
; Line 2575
	mov	eax, DWORD PTR _pC$[ebp]
	add	eax, 256				; 00000100H
	mov	DWORD PTR _pC$[ebp], eax
; Line 2576
	jmp	$LN5@ConvertH1V@2
$LN4@ConvertH1V@2:
; Line 2577
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pDst_0$[ebp], 0
; Line 2578
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pDst_1$[ebp], 0
; Line 2579
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 396				; 0000018cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ConvertH1V2 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __ConvertGray
_TEXT	SEGMENT
_pSrc$ = -44						; size = 4
_pDst$ = -32						; size = 4
_i$ = -20						; size = 4
_Row$ = -8						; size = 4
_pContext$ = 8						; size = 4
__ConvertGray PROC					; COMDAT
; Line 2588
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2593
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [eax+29736]
	sub	edx, DWORD PTR [ecx+29840]
	mov	DWORD PTR _Row$[ebp], edx
; Line 2594
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29844]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pDst$[ebp], eax
; Line 2595
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29832]
	mov	edx, DWORD PTR _Row$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 2596
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29716]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN3@ConvertGra
$LN2@ConvertGra:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@ConvertGra:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN1@ConvertGra
; Line 2597
	push	8
	mov	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDst$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2598
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 2599
	mov	eax, DWORD PTR _pDst$[ebp]
	add	eax, 8
	mov	DWORD PTR _pDst$[ebp], eax
; Line 2600
	jmp	SHORT $LN2@ConvertGra
$LN1@ConvertGra:
; Line 2601
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pDst$[ebp], 0
; Line 2602
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ConvertGray ENDP
_TEXT	ENDS
PUBLIC	_GUI_JPEG__GetColorRGB
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_JPEG__GetColorRGB
_TEXT	SEGMENT
_pData$ = -44						; size = 4
_b$ = -32						; size = 4
_g$ = -20						; size = 4
_r$ = -8						; size = 4
_ppData$ = 8						; size = 4
_SkipCnt$ = 12						; size = 4
_GUI_JPEG__GetColorRGB PROC				; COMDAT
; Line 3061
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3064
	mov	eax, DWORD PTR _ppData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pData$[ebp], ecx
; Line 3065
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _r$[ebp], ecx
; Line 3066
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	DWORD PTR _g$[ebp], ecx
; Line 3067
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	mov	DWORD PTR _b$[ebp], ecx
; Line 3068
	mov	eax, DWORD PTR _ppData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _SkipCnt$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _ppData$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 3069
	mov	eax, DWORD PTR _g$[ebp]
	shl	eax, 8
	or	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
; Line 3070
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_JPEG__GetColorRGB ENDP
_TEXT	ENDS
PUBLIC	_GUI_JPEG__GetColorGray
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_JPEG__GetColorGray
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_u$ = -8						; size = 4
_ppData$ = 8						; size = 4
_SkipCnt$ = 12						; size = 4
_GUI_JPEG__GetColorGray PROC				; COMDAT
; Line 3079
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3082
	mov	eax, DWORD PTR _ppData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pData$[ebp], ecx
; Line 3083
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _u$[ebp], ecx
; Line 3084
	mov	eax, DWORD PTR _ppData$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _SkipCnt$[ebp]
	mov	edx, DWORD PTR _ppData$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 3085
	mov	eax, DWORD PTR _u$[ebp]
	imul	eax, 65793				; 00010101H
; Line 3086
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_JPEG__GetColorGray ENDP
_TEXT	ENDS
PUBLIC	_GUI_JPEG__InitDraw
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_JPEG__InitDraw
_TEXT	SEGMENT
_r$ = -20						; size = 4
_pContext$ = -8						; size = 4
_hContext$ = 8						; size = 4
_GUI_JPEG__InitDraw PROC				; COMDAT
; Line 3092
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3096
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_JPEG__ReadUntilSOF
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax
; Line 3097
	cmp	DWORD PTR _r$[ebp], 0
	jne	$LN6@GUI_JPEG__@7
; Line 3098
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	__InitFrame
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax
; Line 3099
	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN6@GUI_JPEG__@7
; Line 3100
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 3101
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29713]
	test	ecx, ecx
	je	SHORT $LN4@GUI_JPEG__@7
; Line 3102
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__CalcBanding
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax
; Line 3103
	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN3@GUI_JPEG__@7
; Line 3104
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+33952]
	test	ecx, ecx
	jne	SHORT $LN3@GUI_JPEG__@7
; Line 3105
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 3106
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	__DecodeProgressive
	add	esp, 4
	jmp	SHORT $LN7@GUI_JPEG__@7
$LN3@GUI_JPEG__@7:
; Line 3109
	jmp	SHORT $LN1@GUI_JPEG__@7
$LN4@GUI_JPEG__@7:
; Line 3110
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__InitScan
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax
$LN1@GUI_JPEG__@7:
; Line 3112
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
$LN6@GUI_JPEG__@7:
; Line 3115
	mov	eax, DWORD PTR _r$[ebp]
$LN7@GUI_JPEG__@7:
; Line 3116
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_JPEG__InitDraw ENDP
_TEXT	ENDS
EXTRN	_GUI_ALLOC_GetMaxSize:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __CalcBanding
_TEXT	SEGMENT
_RequiredBytes1$11465 = -44				; size = 4
_RequiredBytes$ = -32					; size = 4
_MemSize$ = -20						; size = 4
_i$ = -8						; size = 4
_pContext$ = 8						; size = 4
__CalcBanding PROC					; COMDAT
; Line 1502
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1507
	mov	DWORD PTR _RequiredBytes$[ebp], 0
; Line 1508
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@CalcBandin
$LN7@CalcBandin:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@CalcBandin:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29468]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN6@CalcBandin
; Line 1511
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29716]
	imul	ecx, 130				; 00000082H
	mov	edx, DWORD PTR _pContext$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+29469]
	imul	ecx, eax
	mov	edx, DWORD PTR _pContext$[ebp]
	imul	ecx, DWORD PTR [edx+29720]
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [eax+29473]
	imul	ecx, edx
	add	ecx, DWORD PTR _RequiredBytes$[ebp]
	mov	DWORD PTR _RequiredBytes$[ebp], ecx
; Line 1512
	jmp	SHORT $LN7@CalcBandin
$LN6@CalcBandin:
; Line 1516
	call	_GUI_ALLOC_GetMaxSize
	mov	DWORD PTR _MemSize$[ebp], eax
; Line 1518
	mov	eax, DWORD PTR _MemSize$[ebp]
	cmp	eax, DWORD PTR _RequiredBytes$[ebp]
	jae	$LN5@CalcBandin
; Line 1521
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+33952], 1
; Line 1522
	mov	DWORD PTR _RequiredBytes1$11465[ebp], 0
; Line 1523
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CalcBandin
$LN3@CalcBandin:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@CalcBandin:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29468]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN2@CalcBandin
; Line 1524
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29716]
	imul	ecx, 130				; 00000082H
	mov	edx, DWORD PTR _pContext$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+29469]
	imul	ecx, eax
	add	ecx, DWORD PTR _RequiredBytes1$11465[ebp]
	mov	DWORD PTR _RequiredBytes1$11465[ebp], ecx
; Line 1525
	jmp	SHORT $LN3@CalcBandin
$LN2@CalcBandin:
; Line 1526
	mov	eax, DWORD PTR _MemSize$[ebp]
	xor	edx, edx
	div	DWORD PTR _RequiredBytes1$11465[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [ecx+33960], eax
; Line 1527
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+33960], 0
	jne	SHORT $LN1@CalcBandin
; Line 1528
	mov	eax, 1
	jmp	SHORT $LN9@CalcBandin
$LN1@CalcBandin:
; Line 1530
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	eax, WORD PTR [eax+14]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+33960]
	lea	eax, DWORD PTR [eax+edx-1]
	mov	ecx, DWORD PTR _pContext$[ebp]
	cdq
	idiv	DWORD PTR [ecx+33960]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+33956], eax
$LN5@CalcBandin:
; Line 1532
	xor	eax, eax
$LN9@CalcBandin:
; Line 1533
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__CalcBanding ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DecodeProgressive
_TEXT	SEGMENT
_pfDecodeBlock$11501 = -80				; size = 4
_RefinementScan$11492 = -68				; size = 4
_DC_OnlyScan$11491 = -56				; size = 4
_NumCompsPerFrame$ = -41				; size = 1
_r$ = -32						; size = 4
_i$ = -20						; size = 4
_pContext$ = -8						; size = 4
_hContext$ = 8						; size = 4
__DecodeProgressive PROC				; COMDAT
; Line 1543
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1546
	mov	DWORD PTR _r$[ebp], 0
; Line 1548
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 1549
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	cl, BYTE PTR [eax+29468]
	mov	BYTE PTR _NumCompsPerFrame$[ebp], cl
; Line 1550
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 1551
	movzx	eax, BYTE PTR _NumCompsPerFrame$[ebp]
	cmp	eax, 4
	jne	SHORT $LN26@DecodeProg
; Line 1552
	mov	eax, 1
	jmp	$LN27@DecodeProg
$LN26@DecodeProg:
; Line 1554
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN25@DecodeProg
$LN24@DecodeProg:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN25@DecodeProg:
	movzx	eax, BYTE PTR _NumCompsPerFrame$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN23@DecodeProg
; Line 1555
	push	1
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _hContext$[ebp]
	push	ecx
	call	__CoeffBufferAlloc
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN22@DecodeProg
; Line 1556
	mov	eax, 1
	jmp	$LN27@DecodeProg
$LN22@DecodeProg:
; Line 1558
	push	8
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _hContext$[ebp]
	push	ecx
	call	__CoeffBufferAlloc
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN21@DecodeProg
; Line 1559
	mov	eax, 1
	jmp	$LN27@DecodeProg
$LN21@DecodeProg:
; Line 1561
	jmp	SHORT $LN24@DecodeProg
$LN23@DecodeProg:
; Line 1562
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
$LN20@DecodeProg:
; Line 1563
	mov	eax, 1
	test	eax, eax
	je	$LN19@DecodeProg
; Line 1568
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__InitScan
	add	esp, 4
	test	eax, eax
	je	SHORT $LN18@DecodeProg
; Line 1570
	jmp	$LN19@DecodeProg
$LN18@DecodeProg:
; Line 1572
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29556]
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	mov	DWORD PTR _DC_OnlyScan$11491[ebp], ecx
; Line 1573
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29559]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	DWORD PTR _RefinementScan$11492[ebp], ecx
; Line 1574
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29556]
	mov	edx, DWORD PTR _pContext$[ebp]
	movzx	eax, BYTE PTR [edx+29557]
	cmp	ecx, eax
	jle	SHORT $LN17@DecodeProg
; Line 1575
	mov	DWORD PTR _r$[ebp], 1
; Line 1576
	jmp	$LN19@DecodeProg
$LN17@DecodeProg:
; Line 1578
	cmp	DWORD PTR _DC_OnlyScan$11491[ebp], 0
	je	SHORT $LN16@DecodeProg
; Line 1579
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29557]
	test	ecx, ecx
	je	SHORT $LN15@DecodeProg
; Line 1580
	mov	DWORD PTR _r$[ebp], 1
; Line 1581
	jmp	$LN19@DecodeProg
$LN15@DecodeProg:
; Line 1582
	jmp	SHORT $LN14@DecodeProg
$LN16@DecodeProg:
; Line 1583
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29485]
	cmp	ecx, 1
	je	SHORT $LN14@DecodeProg
; Line 1584
	mov	DWORD PTR _r$[ebp], 1
; Line 1585
	jmp	$LN19@DecodeProg
$LN14@DecodeProg:
; Line 1587
	cmp	DWORD PTR _RefinementScan$11492[ebp], 0
	je	SHORT $LN12@DecodeProg
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29558]
	mov	edx, DWORD PTR _pContext$[ebp]
	movzx	eax, BYTE PTR [edx+29559]
	sub	eax, 1
	cmp	ecx, eax
	je	SHORT $LN12@DecodeProg
; Line 1588
	mov	DWORD PTR _r$[ebp], 1
; Line 1589
	jmp	SHORT $LN19@DecodeProg
$LN12@DecodeProg:
; Line 1592
	cmp	DWORD PTR _DC_OnlyScan$11491[ebp], 0
	je	SHORT $LN11@DecodeProg
; Line 1593
	cmp	DWORD PTR _RefinementScan$11492[ebp], 0
	je	SHORT $LN10@DecodeProg
; Line 1594
	mov	DWORD PTR _pfDecodeBlock$11501[ebp], OFFSET __DecodeBlockDC_Refine
; Line 1595
	jmp	SHORT $LN9@DecodeProg
$LN10@DecodeProg:
; Line 1596
	mov	DWORD PTR _pfDecodeBlock$11501[ebp], OFFSET __DecodeBlockDC_First
$LN9@DecodeProg:
; Line 1598
	jmp	SHORT $LN8@DecodeProg
$LN11@DecodeProg:
; Line 1599
	cmp	DWORD PTR _RefinementScan$11492[ebp], 0
	je	SHORT $LN7@DecodeProg
; Line 1600
	mov	DWORD PTR _pfDecodeBlock$11501[ebp], OFFSET __DecodeBlockAC_Refine
; Line 1601
	jmp	SHORT $LN8@DecodeProg
$LN7@DecodeProg:
; Line 1602
	mov	DWORD PTR _pfDecodeBlock$11501[ebp], OFFSET __DecodeBlockAC_First
$LN8@DecodeProg:
; Line 1606
	mov	eax, DWORD PTR _pfDecodeBlock$11501[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__DecodeScanProg
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@DecodeProg
; Line 1607
	mov	DWORD PTR _r$[ebp], 1
; Line 1608
	jmp	SHORT $LN19@DecodeProg
$LN5@DecodeProg:
; Line 1610
	jmp	$LN20@DecodeProg
$LN19@DecodeProg:
; Line 1611
	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN4@DecodeProg
; Line 1612
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	dl, BYTE PTR [ecx+29468]
	mov	BYTE PTR [eax+29485], dl
; Line 1613
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@DecodeProg
$LN2@DecodeProg:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@DecodeProg:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29485]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN1@DecodeProg
; Line 1614
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax+29486], cl
; Line 1615
	jmp	SHORT $LN2@DecodeProg
$LN1@DecodeProg:
; Line 1616
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__CalcMCUBlockOrder
	add	esp, 4
$LN4@DecodeProg:
; Line 1618
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 1619
	mov	eax, DWORD PTR _r$[ebp]
$LN27@DecodeProg:
; Line 1620
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DecodeProgressive ENDP
_TEXT	ENDS
EXTRN	_GUI_ALLOC_AllocZero:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __CoeffBufferAlloc
_TEXT	SEGMENT
_hData$ = -32						; size = 4
_pBuffer$ = -20						; size = 4
_pContext$ = -8						; size = 4
_hContext$ = 8						; size = 4
_Type$ = 12						; size = 4
_BufferIndex$ = 16					; size = 4
_LenBlock$ = 20						; size = 4
__CoeffBufferAlloc PROC					; COMDAT
; Line 869
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 873
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 874
	mov	eax, DWORD PTR _BufferIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	__GetBuffer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pBuffer$[ebp], eax
; Line 875
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _BufferIndex$[ebp]
	movzx	ecx, BYTE PTR [eax+29469]
	mov	edx, DWORD PTR _pContext$[ebp]
	imul	ecx, DWORD PTR [edx+29716]
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 876
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _BufferIndex$[ebp]
	movzx	ecx, BYTE PTR [eax+29473]
	mov	edx, DWORD PTR _pContext$[ebp]
	imul	ecx, DWORD PTR [edx+29720]
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 877
	mov	eax, DWORD PTR _LenBlock$[ebp]
	imul	eax, DWORD PTR _LenBlock$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 878
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 879
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	mov	edx, DWORD PTR [eax+8]
	imul	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pBuffer$[ebp]
	imul	edx, DWORD PTR [eax+4]
	push	edx
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hData$[ebp], eax
; Line 880
	cmp	DWORD PTR _hData$[ebp], 0
	je	SHORT $LN1@CoeffBuffe@2
; Line 881
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 882
	mov	eax, DWORD PTR _BufferIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	__GetBuffer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pBuffer$[ebp], eax
; Line 883
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	ecx, DWORD PTR _hData$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 884
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 885
	xor	eax, eax
	jmp	SHORT $LN2@CoeffBuffe@2
$LN1@CoeffBuffe@2:
; Line 887
	mov	eax, 1
$LN2@CoeffBuffe@2:
; Line 888
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__CoeffBufferAlloc ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetBuffer
_TEXT	SEGMENT
tv64 = -196						; size = 4
_pContext$ = 8						; size = 4
_Type$ = 12						; size = 4
_BufferIndex$ = 16					; size = 4
__GetBuffer PROC					; COMDAT
; Line 852
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 853
	mov	eax, DWORD PTR _Type$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN2@GetBuffer
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN1@GetBuffer
	jmp	SHORT $LN3@GetBuffer
$LN2@GetBuffer:
; Line 855
	mov	eax, DWORD PTR _BufferIndex$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pContext$[ebp]
	lea	eax, DWORD PTR [ecx+eax+29560]
	jmp	SHORT $LN5@GetBuffer
$LN1@GetBuffer:
; Line 857
	mov	eax, DWORD PTR _BufferIndex$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pContext$[ebp]
	lea	eax, DWORD PTR [ecx+eax+29624]
	jmp	SHORT $LN5@GetBuffer
$LN3@GetBuffer:
; Line 859
	xor	eax, eax
$LN5@GetBuffer:
; Line 860
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetBuffer ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DecodeBlockDC_First
_TEXT	SEGMENT
tv93 = -244						; size = 4
_Ret$ = -44						; size = 4
_p$ = -32						; size = 4
_r$ = -20						; size = 4
_s$ = -8						; size = 4
_pContext$ = 8						; size = 4
_ComponentId$ = 12					; size = 4
_BlockX$ = 16						; size = 4
_BlockY$ = 20						; size = 4
__DecodeBlockDC_First PROC				; COMDAT
; Line 963
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 967
	mov	DWORD PTR _Ret$[ebp], 0
; Line 969
	mov	eax, DWORD PTR _BlockY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BlockX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _pContext$[ebp]
	lea	ecx, DWORD PTR [eax+edx+29560]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__CoeffBufferGetP_Locked
	add	esp, 20					; 00000014H
	mov	DWORD PTR _p$[ebp], eax
; Line 970
	cmp	DWORD PTR _p$[ebp], 0
	je	$LN3@DecodeBloc@4
; Line 971
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$[ebp]
	movzx	ecx, BYTE PTR [eax+29490]
	imul	ecx, 3328				; 00000d00H
	mov	edx, DWORD PTR _pContext$[ebp]
	lea	eax, DWORD PTR [edx+ecx+2236]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__HuffDecode
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
; Line 972
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN2@DecodeBloc@4
; Line 973
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetBitsNoMarker
	add	esp, 8
	mov	DWORD PTR _r$[ebp], eax
; Line 974
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	cmp	ecx, DWORD PTR __aExtendTest[eax*4]
	jge	SHORT $LN6@DecodeBloc@4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, DWORD PTR __aExtendOffset[edx*4]
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN7@DecodeBloc@4
$LN6@DecodeBloc@4:
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR tv93[ebp], ecx
$LN7@DecodeBloc@4:
	mov	edx, DWORD PTR tv93[ebp]
	mov	DWORD PTR _s$[ebp], edx
$LN2@DecodeBloc@4:
; Line 976
	mov	eax, DWORD PTR _ComponentId$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [ecx+eax*4+29540]
	mov	DWORD PTR _s$[ebp], edx
; Line 977
	mov	eax, DWORD PTR _ComponentId$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+eax*4+29540], edx
; Line 978
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29558]
	mov	edx, DWORD PTR _s$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _p$[ebp]
	mov	WORD PTR [eax], dx
; Line 979
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _p$[ebp], 0
; Line 980
	jmp	SHORT $LN1@DecodeBloc@4
$LN3@DecodeBloc@4:
; Line 981
	mov	DWORD PTR _Ret$[ebp], 1
$LN1@DecodeBloc@4:
; Line 983
	mov	eax, DWORD PTR _Ret$[ebp]
; Line 984
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DecodeBlockDC_First ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DecodeBlockDC_Refine
_TEXT	SEGMENT
_r$ = -20						; size = 4
_p$ = -8						; size = 4
_pContext$ = 8						; size = 4
_ComponentId$ = 12					; size = 4
_BlockX$ = 16						; size = 4
_BlockY$ = 20						; size = 4
__DecodeBlockDC_Refine PROC				; COMDAT
; Line 993
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 995
	mov	DWORD PTR _r$[ebp], 0
; Line 997
	push	1
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__GetBitsNoMarker
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@DecodeBloc@5
; Line 998
	mov	eax, DWORD PTR _BlockY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BlockX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _pContext$[ebp]
	lea	ecx, DWORD PTR [eax+edx+29560]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__CoeffBufferGetP_Locked
	add	esp, 20					; 00000014H
	mov	DWORD PTR _p$[ebp], eax
; Line 999
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@DecodeBloc@5
; Line 1000
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29558]
	mov	edx, 1
	shl	edx, cl
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, WORD PTR [eax]
	or	ecx, edx
	mov	edx, DWORD PTR _p$[ebp]
	mov	WORD PTR [edx], cx
; Line 1001
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _p$[ebp], 0
; Line 1002
	jmp	SHORT $LN3@DecodeBloc@5
$LN2@DecodeBloc@5:
; Line 1003
	mov	DWORD PTR _r$[ebp], 1
$LN3@DecodeBloc@5:
; Line 1006
	mov	eax, DWORD PTR _r$[ebp]
; Line 1007
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DecodeBlockDC_Refine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DecodeBlockAC_First
_TEXT	SEGMENT
tv141 = -256						; size = 4
_Ret$ = -56						; size = 4
_p$ = -44						; size = 4
_r$ = -32						; size = 4
_s$ = -20						; size = 4
_k$ = -8						; size = 4
_pContext$ = 8						; size = 4
_ComponentId$ = 12					; size = 4
_BlockX$ = 16						; size = 4
_BlockY$ = 20						; size = 4
__DecodeBlockAC_First PROC				; COMDAT
; Line 1016
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1021
	mov	DWORD PTR _Ret$[ebp], 0
; Line 1023
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29752], 0
	je	SHORT $LN13@DecodeBloc@6
; Line 1024
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29752]
	sub	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29752], ecx
; Line 1025
	xor	eax, eax
	jmp	$LN14@DecodeBloc@6
$LN13@DecodeBloc@6:
; Line 1027
	mov	eax, DWORD PTR _BlockY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BlockX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _pContext$[ebp]
	lea	ecx, DWORD PTR [eax+edx+29624]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__CoeffBufferGetP_Locked
	add	esp, 20					; 00000014H
	mov	DWORD PTR _p$[ebp], eax
; Line 1028
	cmp	DWORD PTR _p$[ebp], 0
	je	$LN12@DecodeBloc@6
; Line 1029
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29556]
	mov	DWORD PTR _k$[ebp], ecx
	jmp	SHORT $LN11@DecodeBloc@6
$LN10@DecodeBloc@6:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN11@DecodeBloc@6:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29557]
	cmp	DWORD PTR _k$[ebp], ecx
	jg	$LN9@DecodeBloc@6
; Line 1030
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$[ebp]
	movzx	ecx, BYTE PTR [eax+29494]
	imul	ecx, 3328				; 00000d00H
	mov	edx, DWORD PTR _pContext$[ebp]
	lea	eax, DWORD PTR [edx+ecx+2236]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__HuffDecode
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
; Line 1031
	mov	eax, DWORD PTR _s$[ebp]
	sar	eax, 4
	mov	DWORD PTR _r$[ebp], eax
; Line 1032
	mov	eax, DWORD PTR _s$[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _s$[ebp], eax
; Line 1033
	je	$LN8@DecodeBloc@6
; Line 1034
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _k$[ebp], eax
	cmp	DWORD PTR _k$[ebp], 63			; 0000003fH
	jle	SHORT $LN7@DecodeBloc@6
; Line 1035
	mov	DWORD PTR _Ret$[ebp], 1
; Line 1036
	jmp	$LN9@DecodeBloc@6
$LN7@DecodeBloc@6:
; Line 1038
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetBitsNoMarker
	add	esp, 8
	mov	DWORD PTR _r$[ebp], eax
; Line 1039
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	cmp	ecx, DWORD PTR __aExtendTest[eax*4]
	jge	SHORT $LN16@DecodeBloc@6
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, DWORD PTR __aExtendOffset[edx*4]
	mov	DWORD PTR tv141[ebp], eax
	jmp	SHORT $LN17@DecodeBloc@6
$LN16@DecodeBloc@6:
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR tv141[ebp], ecx
$LN17@DecodeBloc@6:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _s$[ebp], edx
; Line 1040
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29558]
	mov	edx, DWORD PTR _s$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR __aCoeffOrder[eax]
	mov	eax, DWORD PTR _p$[ebp]
	mov	WORD PTR [eax+ecx*2], dx
; Line 1041
	jmp	SHORT $LN6@DecodeBloc@6
$LN8@DecodeBloc@6:
; Line 1042
	cmp	DWORD PTR _r$[ebp], 15			; 0000000fH
	jne	SHORT $LN5@DecodeBloc@6
; Line 1043
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 15					; 0000000fH
	mov	DWORD PTR _k$[ebp], eax
	cmp	DWORD PTR _k$[ebp], 63			; 0000003fH
	jle	SHORT $LN4@DecodeBloc@6
; Line 1044
	mov	DWORD PTR _Ret$[ebp], 1
; Line 1045
	jmp	SHORT $LN9@DecodeBloc@6
$LN4@DecodeBloc@6:
; Line 1047
	jmp	SHORT $LN6@DecodeBloc@6
$LN5@DecodeBloc@6:
; Line 1048
	mov	eax, 1
	mov	ecx, DWORD PTR _r$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [ecx+29752], eax
; Line 1049
	cmp	DWORD PTR _r$[ebp], 0
	je	SHORT $LN2@DecodeBloc@6
; Line 1050
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetBitsNoMarker
	add	esp, 8
	mov	edx, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR [edx+29752]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [ecx+29752], eax
$LN2@DecodeBloc@6:
; Line 1052
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29752]
	sub	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29752], ecx
; Line 1053
	jmp	SHORT $LN9@DecodeBloc@6
$LN6@DecodeBloc@6:
; Line 1056
	jmp	$LN10@DecodeBloc@6
$LN9@DecodeBloc@6:
; Line 1057
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _p$[ebp], 0
; Line 1058
	jmp	SHORT $LN1@DecodeBloc@6
$LN12@DecodeBloc@6:
; Line 1059
	mov	DWORD PTR _Ret$[ebp], 1
$LN1@DecodeBloc@6:
; Line 1061
	mov	eax, DWORD PTR _Ret$[ebp]
$LN14@DecodeBloc@6:
; Line 1062
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DecodeBlockAC_First ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DecodeBlockAC_Refine
_TEXT	SEGMENT
_Ret$ = -92						; size = 4
_m1$ = -80						; size = 4
_p1$ = -68						; size = 4
_pCoeff$ = -56						; size = 4
_p$ = -44						; size = 4
_r$ = -32						; size = 4
_s$ = -20						; size = 4
_k$ = -8						; size = 4
_pContext$ = 8						; size = 4
_ComponentId$ = 12					; size = 4
_BlockX$ = 16						; size = 4
_BlockY$ = 20						; size = 4
__DecodeBlockAC_Refine PROC				; COMDAT
; Line 1071
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1079
	mov	DWORD PTR _Ret$[ebp], 0
; Line 1081
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29558]
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _p1$[ebp], edx
; Line 1082
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29558]
	or	edx, -1
	shl	edx, cl
	mov	DWORD PTR _m1$[ebp], edx
; Line 1083
	mov	eax, DWORD PTR _BlockY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BlockX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _pContext$[ebp]
	lea	ecx, DWORD PTR [eax+edx+29624]
	push	ecx
	mov	edx, DWORD PTR _ComponentId$[ebp]
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__CoeffBufferGetP_Locked
	add	esp, 20					; 00000014H
	mov	DWORD PTR _p$[ebp], eax
; Line 1084
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29556]
	mov	DWORD PTR _k$[ebp], ecx
; Line 1085
	cmp	DWORD PTR _p$[ebp], 0
	je	$LN34@DecodeBloc@7
; Line 1086
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29752], 0
	jne	$LN33@DecodeBloc@7
	jmp	SHORT $LN32@DecodeBloc@7
$LN31@DecodeBloc@7:
; Line 1087
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN32@DecodeBloc@7:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29557]
	cmp	DWORD PTR _k$[ebp], ecx
	jge	$LN33@DecodeBloc@7
; Line 1088
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _ComponentId$[ebp]
	movzx	ecx, BYTE PTR [eax+29494]
	imul	ecx, 3328				; 00000d00H
	mov	edx, DWORD PTR _pContext$[ebp]
	lea	eax, DWORD PTR [edx+ecx+2236]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__HuffDecode
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
; Line 1089
	mov	eax, DWORD PTR _s$[ebp]
	sar	eax, 4
	mov	DWORD PTR _r$[ebp], eax
; Line 1090
	mov	eax, DWORD PTR _s$[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _s$[ebp], eax
; Line 1091
	je	SHORT $LN29@DecodeBloc@7
; Line 1092
	cmp	DWORD PTR _s$[ebp], 1
	je	SHORT $LN28@DecodeBloc@7
; Line 1093
	mov	DWORD PTR _Ret$[ebp], 1
; Line 1094
	jmp	$LN33@DecodeBloc@7
$LN28@DecodeBloc@7:
; Line 1096
	push	1
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__GetBitsNoMarker
	add	esp, 8
	test	eax, eax
	je	SHORT $LN27@DecodeBloc@7
; Line 1097
	mov	eax, DWORD PTR _p1$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 1098
	jmp	SHORT $LN26@DecodeBloc@7
$LN27@DecodeBloc@7:
; Line 1099
	mov	eax, DWORD PTR _m1$[ebp]
	mov	DWORD PTR _s$[ebp], eax
$LN26@DecodeBloc@7:
; Line 1101
	jmp	SHORT $LN22@DecodeBloc@7
$LN29@DecodeBloc@7:
; Line 1102
	cmp	DWORD PTR _r$[ebp], 15			; 0000000fH
	je	SHORT $LN22@DecodeBloc@7
; Line 1103
	mov	eax, 1
	mov	ecx, DWORD PTR _r$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [ecx+29752], eax
; Line 1104
	cmp	DWORD PTR _r$[ebp], 0
	je	SHORT $LN23@DecodeBloc@7
; Line 1105
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__GetBitsNoMarker
	add	esp, 8
	mov	edx, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR [edx+29752]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [ecx+29752], eax
$LN23@DecodeBloc@7:
; Line 1107
	jmp	$LN33@DecodeBloc@7
$LN22@DecodeBloc@7:
; Line 1111
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR __aCoeffOrder[eax]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pCoeff$[ebp], eax
; Line 1112
	mov	eax, DWORD PTR _pCoeff$[ebp]
	movsx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN19@DecodeBloc@7
; Line 1113
	push	1
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__GetBitsNoMarker
	add	esp, 8
	test	eax, eax
	je	SHORT $LN18@DecodeBloc@7
; Line 1114
	mov	eax, DWORD PTR _pCoeff$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, DWORD PTR _p1$[ebp]
	jne	SHORT $LN18@DecodeBloc@7
; Line 1115
	mov	eax, DWORD PTR _pCoeff$[ebp]
	movsx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jl	SHORT $LN16@DecodeBloc@7
; Line 1116
	mov	eax, DWORD PTR _pCoeff$[ebp]
	movsx	ecx, WORD PTR [eax]
	add	ecx, DWORD PTR _p1$[ebp]
	mov	edx, DWORD PTR _pCoeff$[ebp]
	mov	WORD PTR [edx], cx
; Line 1117
	jmp	SHORT $LN18@DecodeBloc@7
$LN16@DecodeBloc@7:
; Line 1118
	mov	eax, DWORD PTR _pCoeff$[ebp]
	movsx	ecx, WORD PTR [eax]
	add	ecx, DWORD PTR _m1$[ebp]
	mov	edx, DWORD PTR _pCoeff$[ebp]
	mov	WORD PTR [edx], cx
$LN18@DecodeBloc@7:
; Line 1122
	jmp	SHORT $LN14@DecodeBloc@7
$LN19@DecodeBloc@7:
; Line 1123
	mov	eax, DWORD PTR _r$[ebp]
	sub	eax, 1
	mov	DWORD PTR _r$[ebp], eax
	je	SHORT $LN14@DecodeBloc@7
; Line 1124
	jmp	SHORT $LN20@DecodeBloc@7
$LN14@DecodeBloc@7:
; Line 1127
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
; Line 1128
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29557]
	cmp	DWORD PTR _k$[ebp], ecx
	jl	$LN22@DecodeBloc@7
$LN20@DecodeBloc@7:
; Line 1129
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN12@DecodeBloc@7
	cmp	DWORD PTR _k$[ebp], 64			; 00000040H
	jge	SHORT $LN12@DecodeBloc@7
; Line 1130
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR __aCoeffOrder[eax]
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN12@DecodeBloc@7:
; Line 1132
	jmp	$LN31@DecodeBloc@7
$LN33@DecodeBloc@7:
; Line 1134
	cmp	DWORD PTR _Ret$[ebp], 0
	jne	$LN11@DecodeBloc@7
; Line 1135
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29752], 0
	jle	$LN11@DecodeBloc@7
	jmp	SHORT $LN9@DecodeBloc@7
$LN8@DecodeBloc@7:
; Line 1136
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN9@DecodeBloc@7:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29557]
	cmp	DWORD PTR _k$[ebp], ecx
	jge	SHORT $LN7@DecodeBloc@7
; Line 1137
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR __aCoeffOrder[eax]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pCoeff$[ebp], eax
; Line 1138
	mov	eax, DWORD PTR _pCoeff$[ebp]
	movsx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN6@DecodeBloc@7
; Line 1139
	push	1
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	__GetBitsNoMarker
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@DecodeBloc@7
; Line 1140
	mov	eax, DWORD PTR _pCoeff$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, DWORD PTR _p1$[ebp]
	jne	SHORT $LN6@DecodeBloc@7
; Line 1141
	mov	eax, DWORD PTR _pCoeff$[ebp]
	movsx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jl	SHORT $LN3@DecodeBloc@7
; Line 1142
	mov	eax, DWORD PTR _pCoeff$[ebp]
	movsx	ecx, WORD PTR [eax]
	add	ecx, DWORD PTR _p1$[ebp]
	mov	edx, DWORD PTR _pCoeff$[ebp]
	mov	WORD PTR [edx], cx
; Line 1143
	jmp	SHORT $LN6@DecodeBloc@7
$LN3@DecodeBloc@7:
; Line 1144
	mov	eax, DWORD PTR _pCoeff$[ebp]
	movsx	ecx, WORD PTR [eax]
	add	ecx, DWORD PTR _m1$[ebp]
	mov	edx, DWORD PTR _pCoeff$[ebp]
	mov	WORD PTR [edx], cx
$LN6@DecodeBloc@7:
; Line 1149
	jmp	SHORT $LN8@DecodeBloc@7
$LN7@DecodeBloc@7:
; Line 1150
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29752]
	sub	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29752], ecx
$LN11@DecodeBloc@7:
; Line 1153
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _p$[ebp], 0
; Line 1154
	jmp	SHORT $LN1@DecodeBloc@7
$LN34@DecodeBloc@7:
; Line 1155
	mov	DWORD PTR _Ret$[ebp], 1
$LN1@DecodeBloc@7:
; Line 1157
	mov	eax, DWORD PTR _Ret$[ebp]
; Line 1158
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DecodeBlockAC_Refine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __InitFrame
_TEXT	SEGMENT
_r$ = -152						; size = 4
_k$ = -140						; size = 4
_i$ = -128						; size = 4
_DestBytesPerScanline$ = -116				; size = 4
_MaxBlocksPerRow$ = -104				; size = 4
_pBlockMaxZagSet$ = -92					; size = 4
_hBlockMaxZagSet$ = -80					; size = 4
_hSampleBuf$ = -68					; size = 4
_hBlocks$ = -56						; size = 4
_hScanLine1$ = -44					; size = 4
_hScanLine0$ = -32					; size = 4
_ScanType$ = -20					; size = 4
_pContext$ = -8						; size = 4
_hContext$ = 8						; size = 4
__InitFrame PROC					; COMDAT
; Line 1694
	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1705
	mov	DWORD PTR _r$[ebp], 0
; Line 1706
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 1707
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29468]
	cmp	ecx, 1
	jne	SHORT $LN31@InitFrame
; Line 1708
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29714], 0
; Line 1709
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29724], 1
; Line 1710
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29732], 8
; Line 1711
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29736], 8
	jmp	$LN30@InitFrame
$LN31@InitFrame:
; Line 1712
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29468]
	cmp	ecx, 3
	jne	$LN29@InitFrame
; Line 1714
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29470]
	cmp	ecx, 1
	jne	SHORT $LN27@InitFrame
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29474]
	cmp	ecx, 1
	jne	SHORT $LN27@InitFrame
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29471]
	cmp	ecx, 1
	jne	SHORT $LN27@InitFrame
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29475]
	cmp	ecx, 1
	je	SHORT $LN28@InitFrame
$LN27@InitFrame:
; Line 1715
	mov	DWORD PTR _r$[ebp], 1
; Line 1716
	jmp	$LN26@InitFrame
$LN28@InitFrame:
; Line 1717
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29469]
	cmp	ecx, 1
	jne	SHORT $LN25@InitFrame
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29473]
	cmp	ecx, 1
	jne	SHORT $LN25@InitFrame
; Line 1718
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29714], 1
; Line 1719
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29724], 3
; Line 1720
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29732], 8
; Line 1721
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29736], 8
	jmp	$LN26@InitFrame
$LN25@InitFrame:
; Line 1722
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29469]
	cmp	ecx, 2
	jne	SHORT $LN23@InitFrame
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29473]
	cmp	ecx, 1
	jne	SHORT $LN23@InitFrame
; Line 1723
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29714], 2
; Line 1724
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29724], 4
; Line 1725
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29732], 16		; 00000010H
; Line 1726
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29736], 8
	jmp	$LN26@InitFrame
$LN23@InitFrame:
; Line 1727
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29469]
	cmp	ecx, 1
	jne	SHORT $LN21@InitFrame
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29473]
	cmp	ecx, 2
	jne	SHORT $LN21@InitFrame
; Line 1728
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29714], 3
; Line 1729
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29724], 4
; Line 1730
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29732], 8
; Line 1731
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29736], 16		; 00000010H
	jmp	SHORT $LN26@InitFrame
$LN21@InitFrame:
; Line 1732
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29469]
	cmp	ecx, 2
	jne	SHORT $LN19@InitFrame
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29473]
	cmp	ecx, 2
	jne	SHORT $LN19@InitFrame
; Line 1733
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	BYTE PTR [eax+29714], 4
; Line 1734
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29724], 6
; Line 1735
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29732], 16		; 00000010H
; Line 1736
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29736], 16		; 00000010H
; Line 1737
	jmp	SHORT $LN26@InitFrame
$LN19@InitFrame:
; Line 1738
	mov	DWORD PTR _r$[ebp], 1
$LN26@InitFrame:
; Line 1741
	jmp	SHORT $LN30@InitFrame
$LN29@InitFrame:
; Line 1742
	mov	DWORD PTR _r$[ebp], 1
$LN30@InitFrame:
; Line 1744
	cmp	DWORD PTR _r$[ebp], 0
	jne	$LN16@InitFrame
; Line 1745
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+29732]
	lea	eax, DWORD PTR [ecx+eax-1]
	mov	ecx, DWORD PTR _pContext$[ebp]
	cdq
	idiv	DWORD PTR [ecx+29732]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29716], eax
; Line 1746
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, WORD PTR [eax+14]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+29736]
	lea	eax, DWORD PTR [ecx+eax-1]
	mov	ecx, DWORD PTR _pContext$[ebp]
	cdq
	idiv	DWORD PTR [ecx+29736]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29720], eax
; Line 1747
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, WORD PTR [eax+14]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29836], ecx
; Line 1748
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29840], 0
; Line 1750
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29714]
	test	ecx, ecx
	jne	SHORT $LN15@InitFrame
; Line 1751
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29740], 1
; Line 1752
	jmp	SHORT $LN14@InitFrame
$LN15@InitFrame:
; Line 1753
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29740], 4
$LN14@InitFrame:
; Line 1755
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	add	ecx, 15					; 0000000fH
	and	ecx, 65520				; 0000fff0H
	mov	edx, DWORD PTR _pContext$[ebp]
	imul	ecx, DWORD PTR [edx+29740]
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29744], ecx
; Line 1756
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29714]
	mov	DWORD PTR _ScanType$[ebp], ecx
; Line 1757
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [eax+29716]
	imul	edx, DWORD PTR [ecx+29724]
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29728], edx
; Line 1758
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29728]
	mov	DWORD PTR _MaxBlocksPerRow$[ebp], ecx
; Line 1759
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29744]
	mov	DWORD PTR _DestBytesPerScanline$[ebp], ecx
; Line 1761
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@InitFrame
$LN12@InitFrame:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@InitFrame:
	cmp	DWORD PTR _i$[ebp], 255			; 000000ffH
	jg	$LN11@InitFrame
; Line 1762
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [eax+eax-256]
	mov	DWORD PTR _k$[ebp], ecx
; Line 1763
	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, 45941				; 0000b375H
	add	eax, 32768				; 00008000H
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+ecx*4+29856], eax
; Line 1764
	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, 58065				; 0000e2d1H
	add	eax, 32768				; 00008000H
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+ecx*4+30880], eax
; Line 1765
	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, -23401				; ffffa497H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+ecx*4+31904], eax
; Line 1766
	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, -11277				; ffffd3f3H
	add	eax, 32768				; 00008000H
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+ecx*4+32928], eax
; Line 1767
	jmp	$LN12@InitFrame
$LN11@InitFrame:
; Line 1769
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 1771
	mov	eax, DWORD PTR _MaxBlocksPerRow$[ebp]
	shl	eax, 6
	shl	eax, 1
	push	eax
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hBlocks$[ebp], eax
; Line 1772
	mov	eax, DWORD PTR _MaxBlocksPerRow$[ebp]
	shl	eax, 6
	push	eax
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hSampleBuf$[ebp], eax
; Line 1773
	mov	eax, DWORD PTR _MaxBlocksPerRow$[ebp]
	push	eax
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hBlockMaxZagSet$[ebp], eax
; Line 1774
	mov	eax, DWORD PTR _DestBytesPerScanline$[ebp]
	push	eax
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hScanLine0$[ebp], eax
; Line 1775
	cmp	DWORD PTR _ScanType$[ebp], 3
	je	SHORT $LN9@InitFrame
	cmp	DWORD PTR _ScanType$[ebp], 4
	jne	SHORT $LN10@InitFrame
$LN9@InitFrame:
; Line 1776
	mov	eax, DWORD PTR _DestBytesPerScanline$[ebp]
	push	eax
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hScanLine1$[ebp], eax
; Line 1777
	jmp	SHORT $LN8@InitFrame
$LN10@InitFrame:
; Line 1778
	mov	DWORD PTR _hScanLine1$[ebp], 0
$LN8@InitFrame:
; Line 1784
	cmp	DWORD PTR _hBlocks$[ebp], 0
	je	SHORT $LN6@InitFrame
	cmp	DWORD PTR _hSampleBuf$[ebp], 0
	je	SHORT $LN6@InitFrame
	cmp	DWORD PTR _hBlockMaxZagSet$[ebp], 0
	je	SHORT $LN6@InitFrame
	cmp	DWORD PTR _hScanLine0$[ebp], 0
	je	SHORT $LN6@InitFrame
	cmp	DWORD PTR _hScanLine1$[ebp], 0
	jne	SHORT $LN7@InitFrame
	cmp	DWORD PTR _ScanType$[ebp], 3
	je	SHORT $LN6@InitFrame
	cmp	DWORD PTR _ScanType$[ebp], 4
	jne	SHORT $LN7@InitFrame
$LN6@InitFrame:
; Line 1785
	mov	DWORD PTR _r$[ebp], 1
; Line 1786
	jmp	$LN16@InitFrame
$LN7@InitFrame:
; Line 1787
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 1788
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _hBlocks$[ebp]
	mov	DWORD PTR [eax+29820], ecx
; Line 1789
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _hSampleBuf$[ebp]
	mov	DWORD PTR [eax+29828], ecx
; Line 1790
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _hBlockMaxZagSet$[ebp]
	mov	DWORD PTR [eax+29824], ecx
; Line 1791
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _hScanLine0$[ebp]
	mov	DWORD PTR [eax+29844], ecx
; Line 1792
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _hScanLine1$[ebp]
	mov	DWORD PTR [eax+29848], ecx
; Line 1794
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29824]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pBlockMaxZagSet$[ebp], eax
; Line 1795
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@InitFrame
$LN2@InitFrame:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@InitFrame:
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+29728]
	jge	SHORT $LN1@InitFrame
; Line 1796
	mov	eax, DWORD PTR _pBlockMaxZagSet$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 64			; 00000040H
; Line 1797
	jmp	SHORT $LN2@InitFrame
$LN1@InitFrame:
; Line 1798
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pBlockMaxZagSet$[ebp], 0
$LN16@InitFrame:
; Line 1801
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 1802
	mov	eax, DWORD PTR _r$[ebp]
; Line 1803
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__InitFrame ENDP
_TEXT	ENDS
PUBLIC	_GUI_JPEG__SetNextBand
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_JPEG__SetNextBand
_TEXT	SEGMENT
_pData$12341 = -32					; size = 4
_pBuffer$12340 = -20					; size = 4
_i$ = -8						; size = 4
_pContext$ = 8						; size = 4
_GUI_JPEG__SetNextBand PROC				; COMDAT
; Line 3125
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3128
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+33964]
	mov	edx, DWORD PTR _pContext$[ebp]
	add	ecx, DWORD PTR [edx+33960]
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+33964], ecx
; Line 3129
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@GUI_JPEG__@8
$LN7@GUI_JPEG__@8:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@GUI_JPEG__@8:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29468]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN6@GUI_JPEG__@8
; Line 3130
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29469]
	cmp	ecx, 2
	jne	SHORT $LN5@GUI_JPEG__@8
; Line 3131
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+29473]
	mov	esi, 2
	sub	esi, ecx
	add	esi, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+33964]
	cdq
	idiv	esi
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+ecx*4+33968], eax
; Line 3132
	jmp	SHORT $LN4@GUI_JPEG__@8
$LN5@GUI_JPEG__@8:
; Line 3133
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [edx+33964]
	mov	DWORD PTR [ecx+eax*4+33968], edx
$LN4@GUI_JPEG__@8:
; Line 3135
	jmp	SHORT $LN7@GUI_JPEG__@8
$LN6@GUI_JPEG__@8:
; Line 3137
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@GUI_JPEG__@8
$LN2@GUI_JPEG__@8:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@GUI_JPEG__@8:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29468]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$LN1@GUI_JPEG__@8
; Line 3140
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pContext$[ebp]
	lea	edx, DWORD PTR [ecx+eax+29560]
	mov	DWORD PTR _pBuffer$12340[ebp], edx
; Line 3141
	mov	eax, DWORD PTR _pBuffer$12340[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pData$12341[ebp], eax
; Line 3142
	mov	eax, DWORD PTR _pBuffer$12340[ebp]
	mov	ecx, DWORD PTR _pBuffer$12340[ebp]
	mov	edx, DWORD PTR [eax+8]
	imul	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pBuffer$12340[ebp]
	imul	edx, DWORD PTR [eax+4]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pData$12341[ebp]
	push	ecx
	call	_GUI__memset
	add	esp, 12					; 0000000cH
; Line 3143
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pData$12341[ebp], 0
; Line 3144
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pContext$[ebp]
	lea	edx, DWORD PTR [ecx+eax+29624]
	mov	DWORD PTR _pBuffer$12340[ebp], edx
; Line 3145
	mov	eax, DWORD PTR _pBuffer$12340[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pData$12341[ebp], eax
; Line 3146
	mov	eax, DWORD PTR _pBuffer$12340[ebp]
	mov	ecx, DWORD PTR _pBuffer$12340[ebp]
	mov	edx, DWORD PTR [eax+8]
	imul	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pBuffer$12340[ebp]
	imul	edx, DWORD PTR [eax+4]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pData$12341[ebp]
	push	ecx
	call	_GUI__memset
	add	esp, 12					; 0000000cH
; Line 3147
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pData$12341[ebp], 0
; Line 3148
	jmp	$LN2@GUI_JPEG__@8
$LN1@GUI_JPEG__@8:
; Line 3149
	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 29688				; 000073f8H
	push	eax
	call	_GUI__memset
	add	esp, 12					; 0000000cH
; Line 3150
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, WORD PTR [eax+14]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+29836], ecx
; Line 3151
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29840], 0
; Line 3152
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_JPEG__SetNextBand ENDP
_TEXT	ENDS
PUBLIC	_GUI_JPEG__AllocBandingCoeffBuffer
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_JPEG__AllocBandingCoeffBuffer
_TEXT	SEGMENT
_NumCompsPerFrame$ = -32				; size = 4
_i$ = -20						; size = 4
_pContext$ = -8						; size = 4
_hContext$ = 8						; size = 4
_GUI_JPEG__AllocBandingCoeffBuffer PROC			; COMDAT
; Line 3161
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3164
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 3165
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29468]
	mov	DWORD PTR _NumCompsPerFrame$[ebp], ecx
; Line 3166
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 3168
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@GUI_JPEG__@9
$LN4@GUI_JPEG__@9:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@GUI_JPEG__@9:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _NumCompsPerFrame$[ebp]
	jge	SHORT $LN3@GUI_JPEG__@9
; Line 3169
	push	1
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _hContext$[ebp]
	push	ecx
	call	__CoeffBufferAllocBanding
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN2@GUI_JPEG__@9
; Line 3170
	mov	eax, 1
	jmp	SHORT $LN6@GUI_JPEG__@9
$LN2@GUI_JPEG__@9:
; Line 3172
	push	8
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _hContext$[ebp]
	push	ecx
	call	__CoeffBufferAllocBanding
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN1@GUI_JPEG__@9
; Line 3173
	mov	eax, 1
	jmp	SHORT $LN6@GUI_JPEG__@9
$LN1@GUI_JPEG__@9:
; Line 3175
	jmp	SHORT $LN4@GUI_JPEG__@9
$LN3@GUI_JPEG__@9:
; Line 3176
	xor	eax, eax
$LN6@GUI_JPEG__@9:
; Line 3177
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_JPEG__AllocBandingCoeffBuffer ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __CoeffBufferAllocBanding
_TEXT	SEGMENT
_r$ = -44						; size = 4
_hData$ = -32						; size = 4
_pBuffer$ = -20						; size = 4
_pContext$ = -8						; size = 4
_hContext$ = 8						; size = 4
_Type$ = 12						; size = 4
_BufferIndex$ = 16					; size = 4
_LenBlock$ = 20						; size = 4
__CoeffBufferAllocBanding PROC				; COMDAT
; Line 897
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 901
	mov	DWORD PTR _r$[ebp], 0
; Line 903
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 904
	mov	eax, DWORD PTR _BufferIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	__GetBuffer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pBuffer$[ebp], eax
; Line 905
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, DWORD PTR _BufferIndex$[ebp]
	movzx	ecx, BYTE PTR [eax+29469]
	mov	edx, DWORD PTR _pContext$[ebp]
	imul	ecx, DWORD PTR [edx+29716]
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 906
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+33960]
	mov	DWORD PTR [eax+4], edx
; Line 907
	mov	eax, DWORD PTR _LenBlock$[ebp]
	imul	eax, DWORD PTR _LenBlock$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 908
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 909
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	mov	edx, DWORD PTR [eax+8]
	imul	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pBuffer$[ebp]
	imul	edx, DWORD PTR [eax+4]
	push	edx
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hData$[ebp], eax
; Line 910
	cmp	DWORD PTR _hData$[ebp], 0
	je	SHORT $LN2@CoeffBuffe@3
; Line 911
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 912
	mov	eax, DWORD PTR _BufferIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	__GetBuffer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pBuffer$[ebp], eax
; Line 913
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 914
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	ecx, DWORD PTR _hData$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 915
	jmp	SHORT $LN1@CoeffBuffe@3
$LN2@CoeffBuffe@3:
; Line 916
	mov	DWORD PTR _r$[ebp], 1
$LN1@CoeffBuffe@3:
; Line 918
	mov	eax, DWORD PTR _r$[ebp]
; Line 919
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__CoeffBufferAllocBanding ENDP
_TEXT	ENDS
PUBLIC	_GUI_JPEG__GetInfoEx
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_JPEG__GetInfoEx
_TEXT	SEGMENT
_r$ = -20						; size = 4
_pContext$ = -8						; size = 4
_hContext$ = 8						; size = 4
_pInfo$ = 12						; size = 4
_GUI_JPEG__GetInfoEx PROC				; COMDAT
; Line 3183
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3187
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_JPEG__ReadUntilSOF
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax
; Line 3188
	cmp	DWORD PTR _pInfo$[ebp], 0
	je	SHORT $LN1@GUI_JPEG__@10
; Line 3189
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 3190
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	mov	edx, DWORD PTR _pInfo$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 3191
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, WORD PTR [eax+14]
	mov	edx, DWORD PTR _pInfo$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 3192
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
$LN1@GUI_JPEG__@10:
; Line 3194
	mov	eax, DWORD PTR _r$[ebp]
; Line 3195
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_JPEG__GetInfoEx ENDP
_TEXT	ENDS
PUBLIC	_GUI_JPEG_GetInfoEx
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_JPEG_GetInfoEx
_TEXT	SEGMENT
$T12756 = -233						; size = 1
_pContext$ = -32					; size = 4
_hContext$ = -20					; size = 4
_r$ = -8						; size = 4
_pfGetData$ = 8						; size = 4
_p$ = 12						; size = 4
_pInfo$ = 16						; size = 4
_GUI_JPEG_GetInfoEx PROC				; COMDAT
; Line 3207
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T12756[ebp], 0
; Line 3213
	push	33984					; 000084c0H
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hContext$[ebp], eax
; Line 3214
	cmp	DWORD PTR _hContext$[ebp], 0
	je	SHORT $LN1@GUI_JPEG_G
; Line 3215
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 3216
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 3217
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pfGetData$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 3218
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 3219
	mov	eax, DWORD PTR _pInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hContext$[ebp]
	push	ecx
	call	_GUI_JPEG__GetInfoEx
	add	esp, 8
	mov	BYTE PTR $T12756[ebp], 1
	mov	DWORD PTR _r$[ebp], eax
; Line 3220
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN1@GUI_JPEG_G:
; Line 3223
	cmp	BYTE PTR $T12756[ebp], 0
	jne	SHORT $LN4@GUI_JPEG_G
	push	OFFSET $LN5@GUI_JPEG_G
	call	__RTC_UninitUse
	add	esp, 4
$LN4@GUI_JPEG_G:
	mov	eax, DWORD PTR _r$[ebp]
; Line 3224
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@GUI_JPEG_G:
$LN5@GUI_JPEG_G:
	DB	114					; 00000072H
	DB	0
_GUI_JPEG_GetInfoEx ENDP
_TEXT	ENDS
PUBLIC	_GUI_JPEG_GetInfo
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_JPEG_GetInfo
_TEXT	SEGMENT
_Param$ = -24						; size = 8
_r$ = -8						; size = 4
_pFileData$ = 8						; size = 4
_DataSize$ = 12						; size = 4
_pInfo$ = 16						; size = 4
_GUI_JPEG_GetInfo PROC					; COMDAT
; Line 3230
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3233
	mov	eax, DWORD PTR _DataSize$[ebp]
	mov	DWORD PTR _Param$[ebp+4], eax
; Line 3234
	mov	eax, DWORD PTR _pFileData$[ebp]
	mov	DWORD PTR _Param$[ebp], eax
; Line 3235
	mov	eax, DWORD PTR _pInfo$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Param$[ebp]
	push	ecx
	push	OFFSET _GUI_JPEG__GetData
	call	_GUI_JPEG_GetInfoEx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r$[ebp], eax
; Line 3236
	mov	eax, DWORD PTR _r$[ebp]
; Line 3237
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GUI_JPEG_G@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@GUI_JPEG_G@2:
	DD	1
	DD	$LN4@GUI_JPEG_G@2
$LN4@GUI_JPEG_G@2:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN3@GUI_JPEG_G@2
$LN3@GUI_JPEG_G@2:
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_GUI_JPEG_GetInfo ENDP
_TEXT	ENDS
PUBLIC	_GUI_JPEG_DrawEx
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_JPEG_DrawEx
_TEXT	SEGMENT
_hContext$ = -20					; size = 4
_r$ = -8						; size = 4
_pfGetData$ = 8						; size = 4
_p$ = 12						; size = 4
_x0$ = 16						; size = 4
_y0$ = 20						; size = 4
_GUI_JPEG_DrawEx PROC					; COMDAT
; Line 3243
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3244
	mov	DWORD PTR _r$[ebp], 1
; Line 3248
	push	33984					; 000084c0H
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hContext$[ebp], eax
; Line 3249
	cmp	DWORD PTR _hContext$[ebp], 0
	je	SHORT $LN1@GUI_JPEG_D
; Line 3250
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _pfGetData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hContext$[ebp]
	push	ecx
	call	__Draw
	add	esp, 20					; 00000014H
	mov	DWORD PTR _r$[ebp], eax
; Line 3251
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN1@GUI_JPEG_D:
; Line 3254
	mov	eax, DWORD PTR _r$[ebp]
; Line 3255
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_JPEG_DrawEx ENDP
_TEXT	ENDS
EXTRN	_LCD_SetColor:PROC
EXTRN	_LCD_Index2Color:PROC
EXTRN	_WM__GetNextIVR:PROC
EXTRN	_GUI_GetpfColor2IndexEx:PROC
EXTRN	_LCD_GetBitsPerPixelEx:PROC
EXTRN	_WM__InitIVRSearch:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	_LCD_GetColorIndex:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Draw
_TEXT	SEGMENT
$T12769 = -313						; size = 1
_xSize$12160 = -112					; size = 4
_hBmpLine$12159 = -100					; size = 4
_OldIndex$ = -88					; size = 4
_r$ = -76						; size = 4
_pfGetColor$ = -64					; size = 4
_Info$ = -52						; size = 8
_pfColor2Index$ = -36					; size = 4
_Rect$ = -24						; size = 8
_pContext$ = -8						; size = 4
_hContext$ = 8						; size = 4
_pfGetData$ = 12					; size = 4
_p$ = 16						; size = 4
_x0$ = 20						; size = 4
_y0$ = 24						; size = 4
__Draw	PROC						; COMDAT
; Line 2682
	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T12769[ebp], 0
; Line 2693
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 2695
	call	_LCD_GetColorIndex
	mov	DWORD PTR _OldIndex$[ebp], eax
; Line 2697
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 2698
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pfGetData$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 2699
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 2700
	lea	eax, DWORD PTR _Info$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hContext$[ebp]
	push	ecx
	call	_GUI_JPEG__GetInfoEx
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@Draw
; Line 2701
	mov	eax, 1
	jmp	$LN13@Draw
$LN12@Draw:
; Line 2705
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _GUI_Context+64
	mov	DWORD PTR _x0$[ebp], eax
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _GUI_Context+68
	mov	DWORD PTR _y0$[ebp], eax
; Line 2706
	mov	ax, WORD PTR _x0$[ebp]
	mov	WORD PTR _Rect$[ebp], ax
	movsx	ecx, WORD PTR _Rect$[ebp]
	mov	edx, DWORD PTR _Info$[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	mov	WORD PTR _Rect$[ebp+4], ax
; Line 2707
	mov	ax, WORD PTR _y0$[ebp]
	mov	WORD PTR _Rect$[ebp+2], ax
	movsx	ecx, WORD PTR _Rect$[ebp+2]
	mov	edx, DWORD PTR _Info$[ebp+4]
	lea	eax, DWORD PTR [ecx+edx-1]
	mov	WORD PTR _Rect$[ebp+6], ax
; Line 2708
	lea	eax, DWORD PTR _Rect$[ebp]
	push	eax
	call	_WM__InitIVRSearch
	add	esp, 4
	test	eax, eax
	je	$LN11@Draw
$LN10@Draw:
; Line 2710
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 2711
	push	33984					; 000084c0H
	push	0
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	_GUI__memset
	add	esp, 12					; 0000000cH
; Line 2712
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 2713
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pfGetData$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 2714
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 2716
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_JPEG__InitDraw
	add	esp, 4
	mov	BYTE PTR $T12769[ebp], 1
	mov	DWORD PTR _r$[ebp], eax
; Line 2717
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 2718
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29714]
	test	ecx, ecx
	jne	SHORT $LN7@Draw
; Line 2719
	mov	DWORD PTR _pfGetColor$[ebp], OFFSET _GUI_JPEG__GetColorGray
; Line 2720
	jmp	SHORT $LN6@Draw
$LN7@Draw:
; Line 2721
	mov	DWORD PTR _pfGetColor$[ebp], OFFSET _GUI_JPEG__GetColorRGB
$LN6@Draw:
; Line 2724
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_LCD_GetBitsPerPixelEx
	add	esp, 4
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN5@Draw
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29714]
	test	ecx, ecx
	je	SHORT $LN5@Draw
; Line 2727
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	mov	DWORD PTR _xSize$12160[ebp], ecx
; Line 2728
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29704], OFFSET __WritePixelsOptRGB
; Line 2729
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 2730
	mov	eax, DWORD PTR _xSize$12160[ebp]
	shl	eax, 2
	push	eax
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hBmpLine$12159[ebp], eax
; Line 2731
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 2732
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _hBmpLine$12159[ebp]
	mov	DWORD PTR [eax+29708], ecx
; Line 2733
	jmp	SHORT $LN4@Draw
$LN5@Draw:
; Line 2734
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+29704], OFFSET __WritePixels
$LN4@Draw:
; Line 2737
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_GUI_GetpfColor2IndexEx
	add	esp, 4
	mov	DWORD PTR _pfColor2Index$[ebp], eax
; Line 2739
	cmp	BYTE PTR $T12769[ebp], 0
	jne	SHORT $LN15@Draw
	push	OFFSET $LN16@Draw
	call	__RTC_UninitUse
	add	esp, 4
$LN15@Draw:
	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN3@Draw
; Line 2740
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+33952]
	test	ecx, ecx
	jne	SHORT $LN2@Draw
; Line 2741
	mov	eax, DWORD PTR _pfColor2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pfGetColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__DrawAtOnce
	add	esp, 20					; 00000014H
	mov	BYTE PTR $T12769[ebp], 1
	mov	DWORD PTR _r$[ebp], eax
; Line 2742
	jmp	SHORT $LN3@Draw
$LN2@Draw:
; Line 2743
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 2744
	mov	eax, DWORD PTR _pfColor2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pfGetColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hContext$[ebp]
	push	ecx
	call	__DrawBanding
	add	esp, 20					; 00000014H
	mov	BYTE PTR $T12769[ebp], 1
	mov	DWORD PTR _r$[ebp], eax
; Line 2745
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
$LN3@Draw:
; Line 2749
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	_GUI_JPEG__Free
	add	esp, 4
; Line 2750
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 2752
	call	_WM__GetNextIVR
	test	eax, eax
	jne	$LN10@Draw
$LN11@Draw:
; Line 2755
	mov	eax, DWORD PTR _OldIndex$[ebp]
	push	eax
	call	_LCD_Index2Color
	add	esp, 4
	push	eax
	call	_LCD_SetColor
	add	esp, 4
; Line 2756
	cmp	BYTE PTR $T12769[ebp], 0
	jne	SHORT $LN17@Draw
	push	OFFSET $LN16@Draw
	call	__RTC_UninitUse
	add	esp, 4
$LN17@Draw:
	mov	eax, DWORD PTR _r$[ebp]
$LN13@Draw:
; Line 2757
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@Draw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN21@Draw:
	DD	2
	DD	$LN20@Draw
$LN20@Draw:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN18@Draw
	DD	-52					; ffffffccH
	DD	8
	DD	$LN19@Draw
$LN19@Draw:
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN18@Draw:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN16@Draw:
	DB	114					; 00000072H
	DB	0
__Draw	ENDP
_TEXT	ENDS
EXTRN	_LCD_SetPixelIndex:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __WritePixels
_TEXT	SEGMENT
tv84 = -244						; size = 4
_Color$11547 = -44					; size = 4
_Index$11546 = -32					; size = 4
_pData$ = -20						; size = 4
_xSize$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_pContext$ = 16						; size = 4
_pfGetColor$ = 20					; size = 4
_pfColor2Index$ = 24					; size = 4
__WritePixels PROC					; COMDAT
; Line 1629
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1633
	mov	eax, DWORD PTR _pfColor2Index$[ebp]
	mov	DWORD PTR _pfColor2Index$[ebp], eax
; Line 1634
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29852]
	test	ecx, ecx
	jne	SHORT $LN4@WritePixel
; Line 1635
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29844]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pData$[ebp], eax
; Line 1636
	jmp	SHORT $LN3@WritePixel
$LN4@WritePixel:
; Line 1637
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29848]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pData$[ebp], eax
$LN3@WritePixel:
; Line 1639
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	mov	DWORD PTR _xSize$[ebp], ecx
$LN2@WritePixel:
; Line 1640
	cmp	DWORD PTR _xSize$[ebp], 0
	je	SHORT $LN1@WritePixel
; Line 1643
	mov	esi, esp
	push	1
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	call	DWORD PTR _pfGetColor$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Color$11547[ebp], eax
; Line 1644
	mov	esi, esp
	mov	eax, DWORD PTR _Color$11547[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Index$11546[ebp], eax
; Line 1645
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR _x0$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x0$[ebp], ecx
	mov	edx, DWORD PTR _Index$11546[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv84[ebp]
	push	ecx
	call	_LCD_SetPixelIndex
	add	esp, 12					; 0000000cH
; Line 1646
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
; Line 1647
	jmp	SHORT $LN2@WritePixel
$LN1@WritePixel:
; Line 1648
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pData$[ebp], 0
; Line 1649
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@WritePixel
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@WritePixel:
	DD	1
	DD	$LN8@WritePixel
$LN8@WritePixel:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@WritePixel
$LN7@WritePixel:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
__WritePixels ENDP
_TEXT	ENDS
EXTRN	_LCD_DrawBitmap:PROC
EXTRN	_LCD_GetBitsPerPixel:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __WritePixelsOptRGB
_TEXT	SEGMENT
_Color$11579 = -68					; size = 4
_pColor$ = -56						; size = 4
_Bpp$ = -44						; size = 4
_xSize$ = -32						; size = 4
_pSic$ = -20						; size = 4
_p$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_pContext$ = 16						; size = 4
_pfGetColor$ = 20					; size = 4
_pfColor2Index$ = 24					; size = 4
__WritePixelsOptRGB PROC				; COMDAT
; Line 1658
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1664
	mov	eax, DWORD PTR _pfGetColor$[ebp]
	mov	DWORD PTR _pfGetColor$[ebp], eax
; Line 1665
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, BYTE PTR [eax+29852]
	test	ecx, ecx
	jne	SHORT $LN6@WritePixel@2
; Line 1666
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29844]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pColor$[ebp], eax
; Line 1667
	jmp	SHORT $LN5@WritePixel@2
$LN6@WritePixel@2:
; Line 1668
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29848]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pColor$[ebp], eax
$LN5@WritePixel@2:
; Line 1670
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	mov	DWORD PTR _xSize$[ebp], ecx
; Line 1671
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+29708], 0
	je	$LN4@WritePixel@2
; Line 1672
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+29708]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 1673
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pSic$[ebp], eax
$LN3@WritePixel@2:
; Line 1676
	mov	eax, DWORD PTR _pColor$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Color$11579[ebp], ecx
	mov	edx, DWORD PTR _pColor$[ebp]
	add	edx, 4
	mov	DWORD PTR _pColor$[ebp], edx
; Line 1677
	mov	esi, esp
	mov	eax, DWORD PTR _Color$11579[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 1678
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	SHORT $LN3@WritePixel@2
; Line 1679
	call	_LCD_GetBitsPerPixel
	mov	DWORD PTR _Bpp$[ebp], eax
; Line 1680
	push	0
	mov	eax, DWORD PTR _pSic$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	movzx	edx, WORD PTR [ecx+12]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _Bpp$[ebp]
	push	eax
	push	1
	push	1
	push	1
	mov	ecx, DWORD PTR _pContext$[ebp]
	movzx	edx, WORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_LCD_DrawBitmap
	add	esp, 40					; 00000028H
; Line 1681
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _p$[ebp], 0
$LN4@WritePixel@2:
; Line 1683
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pColor$[ebp], 0
; Line 1684
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__WritePixelsOptRGB ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBanding
_TEXT	SEGMENT
_BlockY$12089 = -56					; size = 4
_i$ = -44						; size = 4
_r$ = -32						; size = 4
_Band$ = -20						; size = 4
_pContext$ = -8						; size = 4
_hContext$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_pfGetColor$ = 20					; size = 4
_pfColor2Index$ = 24					; size = 4
__DrawBanding PROC					; COMDAT
; Line 2611
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2614
	mov	DWORD PTR _r$[ebp], 0
; Line 2618
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_JPEG__AllocBandingCoeffBuffer
	add	esp, 4
	test	eax, eax
	je	SHORT $LN11@DrawBandin
; Line 2619
	mov	eax, 1
	jmp	$LN12@DrawBandin
$LN11@DrawBandin:
; Line 2621
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 2622
	mov	DWORD PTR _Band$[ebp], 0
	jmp	SHORT $LN10@DrawBandin
$LN9@DrawBandin:
	mov	eax, DWORD PTR _Band$[ebp]
	add	eax, 1
	mov	DWORD PTR _Band$[ebp], eax
$LN10@DrawBandin:
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _Band$[ebp]
	cmp	ecx, DWORD PTR [eax+33956]
	jae	$LN8@DrawBandin
; Line 2625
	cmp	DWORD PTR _Band$[ebp], 0
	je	SHORT $LN7@DrawBandin
; Line 2626
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_JPEG__ReadUntilSOF
	add	esp, 4
$LN7@DrawBandin:
; Line 2629
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	_GUI_JPEG__DecodeProgressiveBanding
	add	esp, 4
; Line 2631
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@DrawBandin
$LN5@DrawBandin:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@DrawBandin:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, WORD PTR [eax+14]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$LN4@DrawBandin
; Line 2633
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	_GUI_JPEG__DecodeLine
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@DrawBandin
; Line 2634
	mov	DWORD PTR _r$[ebp], 1
; Line 2635
	jmp	$LN4@DrawBandin
$LN3@DrawBandin:
; Line 2638
	mov	eax, DWORD PTR _i$[ebp]
	sar	eax, 3
	mov	DWORD PTR _BlockY$12089[ebp], eax
; Line 2640
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+33964]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+33960]
	lea	ecx, DWORD PTR [ecx+eax-1]
	cmp	DWORD PTR _BlockY$12089[ebp], ecx
	jle	SHORT $LN2@DrawBandin
; Line 2641
	jmp	SHORT $LN4@DrawBandin
$LN2@DrawBandin:
; Line 2644
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _BlockY$12089[ebp]
	cmp	ecx, DWORD PTR [eax+33964]
	jl	SHORT $LN1@DrawBandin
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+33964]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+33960]
	lea	ecx, DWORD PTR [ecx+eax-1]
	cmp	DWORD PTR _BlockY$12089[ebp], ecx
	jg	SHORT $LN1@DrawBandin
; Line 2645
	mov	esi, esp
	mov	eax, DWORD PTR _pfColor2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pfGetColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+29704]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DrawBandin:
; Line 2647
	jmp	$LN5@DrawBandin
$LN4@DrawBandin:
; Line 2649
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	_GUI_JPEG__SetNextBand
	add	esp, 4
; Line 2650
	jmp	$LN9@DrawBandin
$LN8@DrawBandin:
; Line 2651
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 2652
	mov	eax, DWORD PTR _r$[ebp]
$LN12@DrawBandin:
; Line 2653
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBanding ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawAtOnce
_TEXT	SEGMENT
_r$ = -20						; size = 4
_i$ = -8						; size = 4
_pContext$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_pfGetColor$ = 20					; size = 4
_pfColor2Index$ = 24					; size = 4
__DrawAtOnce PROC					; COMDAT
; Line 2662
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2664
	mov	DWORD PTR _r$[ebp], 0
; Line 2666
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@DrawAtOnce
$LN3@DrawAtOnce:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@DrawAtOnce:
	mov	eax, DWORD PTR _pContext$[ebp]
	movzx	ecx, WORD PTR [eax+14]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN2@DrawAtOnce
; Line 2668
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	_GUI_JPEG__DecodeLine
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@DrawAtOnce
; Line 2669
	mov	DWORD PTR _r$[ebp], 1
; Line 2670
	jmp	SHORT $LN2@DrawAtOnce
$LN1@DrawAtOnce:
; Line 2673
	mov	esi, esp
	mov	eax, DWORD PTR _pfColor2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pfGetColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+29704]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2674
	jmp	SHORT $LN3@DrawAtOnce
$LN2@DrawAtOnce:
; Line 2675
	mov	eax, DWORD PTR _r$[ebp]
; Line 2676
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawAtOnce ENDP
_TEXT	ENDS
PUBLIC	_GUI_JPEG_Draw
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_JPEG_Draw
_TEXT	SEGMENT
_Param$ = -24						; size = 8
_r$ = -8						; size = 4
_pFileData$ = 8						; size = 4
_DataSize$ = 12						; size = 4
_x0$ = 16						; size = 4
_y0$ = 20						; size = 4
_GUI_JPEG_Draw PROC					; COMDAT
; Line 3261
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3264
	mov	eax, DWORD PTR _DataSize$[ebp]
	mov	DWORD PTR _Param$[ebp+4], eax
; Line 3265
	mov	eax, DWORD PTR _pFileData$[ebp]
	mov	DWORD PTR _Param$[ebp], eax
; Line 3266
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Param$[ebp]
	push	edx
	push	OFFSET _GUI_JPEG__GetData
	call	_GUI_JPEG_DrawEx
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax
; Line 3267
	mov	eax, DWORD PTR _r$[ebp]
; Line 3268
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GUI_JPEG_D@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@GUI_JPEG_D@2:
	DD	1
	DD	$LN4@GUI_JPEG_D@2
$LN4@GUI_JPEG_D@2:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN3@GUI_JPEG_D@2
$LN3@GUI_JPEG_D@2:
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_GUI_JPEG_Draw ENDP
_TEXT	ENDS
END
