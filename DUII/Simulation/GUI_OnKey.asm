; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_OnKey.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
__aState DQ	0bH DUP (?)
_BSS	ENDS
_DATA	SEGMENT
__pReadKey DD	FLAT:__aState
__pWriteKey DD	FLAT:__aState
_DATA	ENDS
PUBLIC	_GUI_GetKey
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
__Key	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_onkey.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_GetKey
_TEXT	SEGMENT
_r$ = -8						; size = 4
_GUI_GetKey PROC					; COMDAT
; Line 188
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 189
	mov	eax, DWORD PTR __Key
	mov	DWORD PTR _r$[ebp], eax
; Line 190
	mov	DWORD PTR __Key, 0
; Line 191
	mov	eax, DWORD PTR _r$[ebp]
; Line 192
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_GetKey ENDP
_TEXT	ENDS
PUBLIC	_GUI_StoreKey
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_StoreKey
_TEXT	SEGMENT
_Key$ = 8						; size = 4
_GUI_StoreKey PROC					; COMDAT
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 199
	cmp	DWORD PTR __Key, 0
	jne	SHORT $LN2@GUI_StoreK
; Line 200
	mov	eax, DWORD PTR _Key$[ebp]
	mov	DWORD PTR __Key, eax
$LN2@GUI_StoreK:
; Line 203
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_StoreKey ENDP
_TEXT	ENDS
PUBLIC	_GUI_ClearKeyBuffer
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ClearKeyBuffer
_TEXT	SEGMENT
_GUI_ClearKeyBuffer PROC				; COMDAT
; Line 235
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@GUI_ClearK:
; Line 236
	mov	eax, DWORD PTR __pReadKey
	cmp	eax, DWORD PTR __pWriteKey
	je	SHORT $LN3@GUI_ClearK
; Line 237
	call	_GUI_GetKey
; Line 238
	jmp	SHORT $LN2@GUI_ClearK
$LN3@GUI_ClearK:
; Line 239
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ClearKeyBuffer ENDP
_TEXT	ENDS
PUBLIC	_GUI_StoreKeyMsg
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_StoreKeyMsg
_TEXT	SEGMENT
_State$ = -12						; size = 8
_Key$ = 8						; size = 4
_PressedCnt$ = 12					; size = 4
_GUI_StoreKeyMsg PROC					; COMDAT
; Line 245
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 249
	mov	eax, DWORD PTR _Key$[ebp]
	mov	DWORD PTR _State$[ebp], eax
; Line 250
	mov	eax, DWORD PTR _PressedCnt$[ebp]
	mov	DWORD PTR _State$[ebp+4], eax
; Line 251
	lea	eax, DWORD PTR _State$[ebp]
	push	eax
	call	__StoreState
	add	esp, 4
; Line 257
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GUI_StoreK@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@GUI_StoreK@2:
	DD	1
	DD	$LN4@GUI_StoreK@2
$LN4@GUI_StoreK@2:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@GUI_StoreK@2
$LN3@GUI_StoreK@2:
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_GUI_StoreKeyMsg ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __StoreState
_TEXT	SEGMENT
_pState$ = 8						; size = 4
__StoreState PROC					; COMDAT
; Line 165
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 169
	mov	eax, DWORD PTR _pState$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __pWriteKey
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
; Line 173
	mov	eax, DWORD PTR __pWriteKey
	push	eax
	call	__IncWritePointer
	add	esp, 4
	mov	DWORD PTR __pWriteKey, eax
; Line 174
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__StoreState ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __IncWritePointer
_TEXT	SEGMENT
_pState$ = -8						; size = 4
_pWrite$ = 8						; size = 4
__IncWritePointer PROC					; COMDAT
; Line 134
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 136
	mov	eax, DWORD PTR __pReadKey
	push	eax
	mov	ecx, DWORD PTR _pWrite$[ebp]
	push	ecx
	call	__IncPointer
	add	esp, 8
	mov	DWORD PTR _pState$[ebp], eax
; Line 137
	mov	eax, DWORD PTR _pState$[ebp]
; Line 138
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__IncWritePointer ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __IncPointer
_TEXT	SEGMENT
_pNew$ = -8						; size = 4
_p$ = 8							; size = 4
_pRef$ = 12						; size = 4
__IncPointer PROC					; COMDAT
; Line 93
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 95
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pNew$[ebp], eax
; Line 96
	cmp	DWORD PTR _pNew$[ebp], OFFSET __aState+80
	jne	SHORT $LN5@IncPointer
; Line 100
	mov	DWORD PTR _pNew$[ebp], OFFSET __aState
; Line 101
	jmp	SHORT $LN4@IncPointer
$LN5@IncPointer:
; Line 105
	mov	eax, DWORD PTR _pNew$[ebp]
	add	eax, 8
	mov	DWORD PTR _pNew$[ebp], eax
$LN4@IncPointer:
; Line 110
	cmp	DWORD PTR _pRef$[ebp], 0
	je	SHORT $LN3@IncPointer
; Line 111
	mov	eax, DWORD PTR _pNew$[ebp]
	cmp	eax, DWORD PTR _pRef$[ebp]
	je	SHORT $LN2@IncPointer
; Line 112
	mov	eax, DWORD PTR _pNew$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN2@IncPointer:
; Line 114
	jmp	SHORT $LN1@IncPointer
$LN3@IncPointer:
; Line 115
	mov	eax, DWORD PTR _pNew$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN1@IncPointer:
; Line 117
	mov	eax, DWORD PTR _p$[ebp]
; Line 118
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__IncPointer ENDP
_TEXT	ENDS
PUBLIC	_GUI_PollKeyMsg
EXTRN	_WM_OnKey:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_PollKeyMsg
_TEXT	SEGMENT
_r$ = -24						; size = 4
_State$ = -12						; size = 8
_GUI_PollKeyMsg PROC					; COMDAT
; Line 264
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 266
	mov	DWORD PTR _r$[ebp], 0
; Line 269
	mov	eax, DWORD PTR __pReadKey
	cmp	eax, DWORD PTR __pWriteKey
	je	SHORT $LN1@GUI_PollKe
; Line 270
	lea	eax, DWORD PTR _State$[ebp]
	push	eax
	call	__GetState
	add	esp, 4
; Line 271
	mov	eax, DWORD PTR _State$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _State$[ebp]
	push	ecx
	call	_WM_OnKey
	add	esp, 8
; Line 272
	mov	DWORD PTR _r$[ebp], 1
$LN1@GUI_PollKe:
; Line 275
	mov	eax, DWORD PTR _r$[ebp]
; Line 276
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@GUI_PollKe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@GUI_PollKe:
	DD	1
	DD	$LN5@GUI_PollKe
$LN5@GUI_PollKe:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN4@GUI_PollKe
$LN4@GUI_PollKe:
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_GUI_PollKeyMsg ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetState
_TEXT	SEGMENT
_pState$ = 8						; size = 4
__GetState PROC						; COMDAT
; Line 144
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 148
	mov	eax, DWORD PTR __pReadKey
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _pState$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
; Line 152
	mov	eax, DWORD PTR __pReadKey
	cmp	eax, DWORD PTR __pWriteKey
	je	SHORT $LN1@GetState
; Line 153
	mov	eax, DWORD PTR __pReadKey
	push	eax
	call	__IncReadPointer
	add	esp, 4
	mov	DWORD PTR __pReadKey, eax
$LN1@GetState:
; Line 158
	mov	eax, DWORD PTR _pState$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	setne	cl
	mov	eax, ecx
; Line 159
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetState ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __IncReadPointer
_TEXT	SEGMENT
_pState$ = -8						; size = 4
_pRead$ = 8						; size = 4
__IncReadPointer PROC					; COMDAT
; Line 124
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 126
	push	0
	mov	eax, DWORD PTR _pRead$[ebp]
	push	eax
	call	__IncPointer
	add	esp, 8
	mov	DWORD PTR _pState$[ebp], eax
; Line 127
	mov	eax, DWORD PTR _pState$[ebp]
; Line 128
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__IncReadPointer ENDP
_TEXT	ENDS
PUBLIC	_GUI_SendKeyMsg
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_SendKeyMsg
_TEXT	SEGMENT
_Key$ = 8						; size = 4
_PressedCnt$ = 12					; size = 4
_GUI_SendKeyMsg PROC					; COMDAT
; Line 288
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 290
	mov	eax, DWORD PTR _PressedCnt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Key$[ebp]
	push	ecx
	call	_WM_OnKey
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@GUI_SendKe
; Line 291
	mov	eax, DWORD PTR _PressedCnt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Key$[ebp]
	push	ecx
	call	_GUI_StoreKeyMsg
	add	esp, 8
$LN2@GUI_SendKe:
; Line 296
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_SendKeyMsg ENDP
_TEXT	ENDS
END
