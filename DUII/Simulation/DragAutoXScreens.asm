; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\DUII\DragAutoXScreens.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
_pLapTime DD	01H DUP (?)
_pGap	DD	01H DUP (?)
_pDistance DD	01H DUP (?)
_pSpeed	DD	01H DUP (?)
_pLapTimer DD	01H DUP (?)
_pGauge	DD	01H DUP (?)
_pPredictiveLap DD 01H DUP (?)
_pSweep	DD	01H DUP (?)
_pMPH	DD	01H DUP (?)
_pYellow DD	01H DUP (?)
_pRed	DD	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
_PeakRPMRect DW	019aH
	DW	0d2H
	DW	01ddH
	DW	0eaH
_RPMRect DW	019aH
	DW	093H
	DW	01ddH
	DW	0abH
_VmaxRect DW	04bH
	DW	044H
	DW	091H
	DW	06cH
_RPMVmaxRect DW	00H
	DW	046H
	DW	04bH
	DW	06eH
_AnalogPredictiveLapRect DW 01eH
	DW	0dcH
	DW	0edH
	DW	010eH
_SweepTachPredictiveLapRect DW 082H
	DW	0dcH
	DW	01d6H
	DW	010eH
_DigitalPredictiveLapRect DW 032H
	DW	0d4H
	DW	01c2H
	DW	0106H
$SG17528 DB	'vmax', 00H
$SG17607 DB	00H
$SG17727 DB	00H
$SG17728 DB	00H
$SG17532 DB	'vmin', 00H
$SG17729 DB	00H
	ORG $+2
$SG17534 DB	'vmax', 00H
	ORG $+3
$SG17536 DB	'%d', 00H
	ORG $+1
$SG17544 DB	'Run Complete', 00H
	ORG $+3
$SG17547 DB	'Tap Screen At Finish Line', 00H
	ORG $+2
$SG17605 DB	'kph', 00H
$SG17606 DB	'mph', 00H
$SG17645 DB	'%d ', 00H
$SG17646 DB	'mph', 00H
$SG17647 DB	'kph', 00H
$SG17651 DB	'vmax', 00H
	ORG $+3
$SG17655 DB	'vmin', 00H
	ORG $+3
$SG17657 DB	'vmax', 00H
	ORG $+3
$SG17659 DB	'%d', 00H
	ORG $+1
$SG17667 DB	'Run Complete', 00H
	ORG $+3
$SG17670 DB	'Tap Screen At Finish Line', 00H
	ORG $+2
$SG17677 DB	'%d', 00H
	ORG $+1
$SG17679 DB	'%d', 00H
	ORG $+1
$SG17684 DB	'  ', 00H
	ORG $+1
$SG17686 DB	'%d ', 00H
$SG17776 DB	'%d', 00H
	ORG $+1
$SG17781 DB	'meters', 00H
	ORG $+1
$SG17783 DB	'feet', 00H
	ORG $+3
$SG17785 DB	'Gap', 00H
$SG17786 DB	'mph', 00H
$SG17787 DB	'kph', 00H
$SG17792 DB	'Run Complete', 00H
	ORG $+3
$SG17795 DB	'Tap Screen At Finish Line', 00H
	ORG $+2
$SG17798 DB	'%d', 00H
	ORG $+1
$SG17802 DB	'%+0.2f', 00H
CONST	ENDS
PUBLIC	??_GDigitalStringOutput@@QAEPAXI@Z		; DigitalStringOutput::`scalar deleting destructor'
PUBLIC	??_GRPMSweep@@QAEPAXI@Z				; RPMSweep::`scalar deleting destructor'
PUBLIC	??_GDigitalDisplay@@QAEPAXI@Z			; DigitalDisplay::`scalar deleting destructor'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	??_GPredictiveLapTimer@@QAEPAXI@Z		; PredictiveLapTimer::`scalar deleting destructor'
PUBLIC	__$ArrayPad$
PUBLIC	?DAXRPMSweepCallback@@YAXPAUWM_MESSAGE@@@Z	; DAXRPMSweepCallback
EXTRN	_WM_DefaultProc:PROC
EXTRN	_GUI_MEMDEV_Delete:PROC
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_GUI_SelectLCD:PROC
EXTRN	_GUI_MEMDEV_CopyToLCD:PROC
EXTRN	_CheckWarningPopups:PROC
EXTRN	_GUI_DrawBitmap:PROC
EXTRN	_bmleftarrow:BYTE
EXTRN	?DrawControl@DigitalStringOutput@@QAEXXZ:PROC	; DigitalStringOutput::DrawControl
EXTRN	_GUI_DrawRectEx:PROC
EXTRN	?UpdatePredictiveLapControl@@YAXPAVPredictiveLapTimer@@M@Z:PROC ; UpdatePredictiveLapControl
EXTRN	_GUI_DispStringAt:PROC
EXTRN	_GUI_Font32B_ASCII:BYTE
EXTRN	_GUI_DispStringInRect:PROC
EXTRN	_GUI_SetFont:PROC
EXTRN	_GUI_FontD32:BYTE
EXTRN	_sprintf:PROC
EXTRN	_GUI_SetColor:PROC
EXTRN	_selectedRaceMode:DWORD
EXTRN	?DrawControl@DigitalDisplay@@QAEXXZ:PROC	; DigitalDisplay::DrawControl
EXTRN	?DrawControl@RPMSweep@@QAEXXZ:PROC		; RPMSweep::DrawControl
EXTRN	?SetValue@DigitalStringOutput@@QAEXPAD@Z:PROC	; DigitalStringOutput::SetValue
EXTRN	_formatLapTime:PROC
EXTRN	?SetValue@PredictiveLapTimer@@QAEXM@Z:PROC	; PredictiveLapTimer::SetValue
EXTRN	?SetValue@DigitalDisplay@@QAEXM@Z:PROC		; DigitalDisplay::SetValue
EXTRN	?SetGear@RPMSweep@@QAEXH@Z:PROC			; RPMSweep::SetGear
EXTRN	_vehicleData:BYTE
EXTRN	?SetValue@RPMSweep@@QAEXM@Z:PROC		; RPMSweep::SetValue
EXTRN	_GetValue:PROC
EXTRN	_GUI_Clear:PROC
EXTRN	_GUI_MEMDEV_Select:PROC
EXTRN	_lockupSemaphore:BYTE
EXTRN	_CS_IsVisible:PROC
EXTRN	_WM_InvalidateWindow:PROC
EXTRN	_WM_RestartTimer:PROC
EXTRN	_unsavedSysData:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
_mem	DD	01H DUP (?)
_hDAXGaugeScreen DD 01H DUP (?)
_hScreenTimer DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __real@00000000
; File c:\duii\duii\dragautoxscreens.cpp
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?DAXRPMSweepCallback@@YAXPAUWM_MESSAGE@@@Z
_TEXT	SEGMENT
tv215 = -536						; size = 4
tv209 = -536						; size = 4
tv199 = -536						; size = 4
tv193 = -536						; size = 4
tv75 = -536						; size = 4
tv64 = -536						; size = 4
$T17871 = -528						; size = 4
$T17872 = -516						; size = 4
$T17875 = -504						; size = 8
$T17876 = -488						; size = 8
$T17877 = -472						; size = 8
$T17878 = -456						; size = 8
$T17879 = -440						; size = 8
$T17880 = -424						; size = 8
$T17881 = -408						; size = 8
$T17882 = -392						; size = 8
$T17883 = -376						; size = 4
$T17884 = -364						; size = 4
$T17887 = -352						; size = 4
$T17888 = -340						; size = 4
$T17891 = -328						; size = 4
$T17892 = -316						; size = 4
$T17893 = -304						; size = 4
$T17894 = -292						; size = 4
$T17897 = -280						; size = 4
$T17898 = -268						; size = 4
_ftemp$17515 = -64					; size = 4
_pText$17514 = -52					; size = 4
_scratch$17513 = -40					; size = 30
__$ArrayPad$ = -4					; size = 4
_pMsg$ = 8						; size = 4
?DAXRPMSweepCallback@@YAXPAUWM_MESSAGE@@@Z PROC		; DAXRPMSweepCallback, COMDAT
; Line 83
	push	ebp
	mov	ebp, esp
	sub	esp, 536				; 00000218H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-536]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 84
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 11			; 0000000bH
	je	$LN9@DAXRPMSwee
	cmp	DWORD PTR tv64[ebp], 15			; 0000000fH
	je	$LN24@DAXRPMSwee
	cmp	DWORD PTR tv64[ebp], 275		; 00000113H
	je	SHORT $LN29@DAXRPMSwee
	jmp	$LN1@DAXRPMSwee
$LN29@DAXRPMSwee:
; Line 87
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _hScreenTimer
	jne	$LN28@DAXRPMSwee
; Line 90
	cmp	DWORD PTR _unsavedSysData+136, 20	; 00000014H
	je	SHORT $LN26@DAXRPMSwee
	cmp	DWORD PTR _unsavedSysData+136, 21	; 00000015H
	jne	SHORT $LN25@DAXRPMSwee
$LN26@DAXRPMSwee:
; Line 92
	cmp	DWORD PTR _pPredictiveLap, 0
	je	SHORT $LN25@DAXRPMSwee
; Line 94
	mov	eax, DWORD PTR _pPredictiveLap
	mov	DWORD PTR $T17872[ebp], eax
	mov	ecx, DWORD PTR $T17872[ebp]
	mov	DWORD PTR $T17871[ebp], ecx
	cmp	DWORD PTR $T17871[ebp], 0
	je	SHORT $LN34@DAXRPMSwee
	push	1
	mov	ecx, DWORD PTR $T17871[ebp]
	call	??_GPredictiveLapTimer@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN35@DAXRPMSwee
$LN34@DAXRPMSwee:
	mov	DWORD PTR tv75[ebp], 0
$LN35@DAXRPMSwee:
; Line 95
	mov	DWORD PTR _pPredictiveLap, 0
$LN25@DAXRPMSwee:
; Line 98
	push	25					; 00000019H
	mov	eax, DWORD PTR _hScreenTimer
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
; Line 99
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN28@DAXRPMSwee:
; Line 101
	jmp	$LN30@DAXRPMSwee
$LN24@DAXRPMSwee:
; Line 104
	push	0
	call	_CS_IsVisible
	add	esp, 4
	test	eax, eax
	je	$LN23@DAXRPMSwee
; Line 109
	movzx	eax, BYTE PTR _lockupSemaphore
	test	eax, eax
	je	SHORT $LN22@DAXRPMSwee
; Line 110
	jmp	$LN30@DAXRPMSwee
	jmp	SHORT $LN21@DAXRPMSwee
$LN22@DAXRPMSwee:
; Line 111
	mov	BYTE PTR _lockupSemaphore, 1
$LN21@DAXRPMSwee:
; Line 113
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_Select
	add	esp, 4
; Line 114
	call	_GUI_Clear
; Line 116
	push	53					; 00000035H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17875[ebp], eax
	mov	DWORD PTR $T17875[ebp+4], edx
	fild	DWORD PTR $T17875[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pSweep
	call	?SetValue@RPMSweep@@QAEXM@Z		; RPMSweep::SetValue
; Line 118
	fld	DWORD PTR _vehicleData+80
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN20@DAXRPMSwee
; Line 119
	push	74					; 0000004aH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17876[ebp], eax
	mov	DWORD PTR $T17876[ebp+4], edx
	mov	eax, DWORD PTR $T17876[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSweep
	call	?SetGear@RPMSweep@@QAEXH@Z		; RPMSweep::SetGear
$LN20@DAXRPMSwee:
; Line 121
	push	14					; 0000000eH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17877[ebp], eax
	mov	DWORD PTR $T17877[ebp+4], edx
	push	ecx
	fld	DWORD PTR $T17877[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pMPH
	call	?SetValue@DigitalDisplay@@QAEXM@Z	; DigitalDisplay::SetValue
; Line 123
	cmp	DWORD PTR _pPredictiveLap, 0
	je	SHORT $LN19@DAXRPMSwee
; Line 124
	push	31					; 0000001fH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17878[ebp], eax
	mov	DWORD PTR $T17878[ebp+4], edx
	push	ecx
	fld	DWORD PTR $T17878[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pPredictiveLap
	call	?SetValue@PredictiveLapTimer@@QAEXM@Z	; PredictiveLapTimer::SetValue
$LN19@DAXRPMSwee:
; Line 126
	push	32					; 00000020H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17879[ebp], eax
	mov	DWORD PTR $T17879[ebp+4], edx
	push	0
	mov	eax, DWORD PTR $T17879[ebp]
	push	eax
	call	_formatLapTime
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _pLapTimer
	call	?SetValue@DigitalStringOutput@@QAEXPAD@Z ; DigitalStringOutput::SetValue
; Line 128
	mov	ecx, DWORD PTR _pSweep
	call	?DrawControl@RPMSweep@@QAEXXZ		; RPMSweep::DrawControl
; Line 130
	mov	ecx, DWORD PTR _pMPH
	call	?DrawControl@DigitalDisplay@@QAEXXZ	; DigitalDisplay::DrawControl
; Line 133
	cmp	DWORD PTR _selectedRaceMode, 4
	jne	SHORT $LN18@DAXRPMSwee
; Line 135
	push	26					; 0000001aH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17880[ebp], eax
	mov	DWORD PTR $T17880[ebp+4], edx
	fld	DWORD PTR $T17880[ebp]
	fstp	DWORD PTR _ftemp$17515[ebp]
; Line 136
	push	13631696				; 00d000d0H
	call	_GUI_SetColor
	add	esp, 4
; Line 137
	mov	DWORD PTR _pText$17514[ebp], OFFSET $SG17528
; Line 139
	jmp	SHORT $LN15@DAXRPMSwee
$LN18@DAXRPMSwee:
; Line 141
	push	39					; 00000027H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17881[ebp], eax
	mov	DWORD PTR $T17881[ebp+4], edx
	fld	DWORD PTR $T17881[ebp]
	fstp	DWORD PTR _ftemp$17515[ebp]
; Line 142
	fldz
	fcomp	DWORD PTR _ftemp$17515[ebp]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN16@DAXRPMSwee
; Line 144
	push	33023					; 000080ffH
	call	_GUI_SetColor
	add	esp, 4
; Line 145
	fldz
	fsub	DWORD PTR _ftemp$17515[ebp]
	fstp	DWORD PTR _ftemp$17515[ebp]
; Line 146
	mov	DWORD PTR _pText$17514[ebp], OFFSET $SG17532
; Line 148
	jmp	SHORT $LN15@DAXRPMSwee
$LN16@DAXRPMSwee:
; Line 150
	push	13631696				; 00d000d0H
	call	_GUI_SetColor
	add	esp, 4
; Line 151
	mov	DWORD PTR _pText$17514[ebp], OFFSET $SG17534
$LN15@DAXRPMSwee:
; Line 155
	fld	DWORD PTR _ftemp$17515[ebp]
	call	__ftol2_sse
	push	eax
	push	OFFSET $SG17536
	lea	eax, DWORD PTR _scratch$17513[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 156
	push	OFFSET _GUI_FontD32
	call	_GUI_SetFont
	add	esp, 4
; Line 157
	push	1
	push	OFFSET _RPMVmaxRect
	lea	eax, DWORD PTR _scratch$17513[ebp]
	push	eax
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 160
	push	OFFSET _GUI_Font32B_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 161
	push	107					; 0000006bH
	push	10					; 0000000aH
	mov	eax, DWORD PTR _pText$17514[ebp]
	push	eax
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 163
	cmp	DWORD PTR _pPredictiveLap, 0
	je	SHORT $LN14@DAXRPMSwee
; Line 166
	push	31					; 0000001fH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17882[ebp], eax
	mov	DWORD PTR $T17882[ebp+4], edx
	push	ecx
	fld	DWORD PTR $T17882[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _pPredictiveLap
	push	eax
	call	?UpdatePredictiveLapControl@@YAXPAVPredictiveLapTimer@@M@Z ; UpdatePredictiveLapControl
	add	esp, 8
; Line 168
	jmp	SHORT $LN10@DAXRPMSwee
$LN14@DAXRPMSwee:
; Line 170
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 171
	push	OFFSET _SweepTachPredictiveLapRect
	call	_GUI_DrawRectEx
	add	esp, 4
; Line 172
	cmp	DWORD PTR _unsavedSysData+136, 20	; 00000014H
	je	SHORT $LN11@DAXRPMSwee
	cmp	DWORD PTR _unsavedSysData+136, 21	; 00000015H
	jne	SHORT $LN12@DAXRPMSwee
$LN11@DAXRPMSwee:
; Line 174
	push	14					; 0000000eH
	push	OFFSET _SweepTachPredictiveLapRect
	push	OFFSET $SG17544
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN10@DAXRPMSwee
$LN12@DAXRPMSwee:
; Line 176
	push	14					; 0000000eH
	push	OFFSET _SweepTachPredictiveLapRect
	push	OFFSET $SG17547
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
$LN10@DAXRPMSwee:
; Line 179
	mov	ecx, DWORD PTR _pLapTimer
	call	?DrawControl@DigitalStringOutput@@QAEXXZ ; DigitalStringOutput::DrawControl
; Line 181
	push	229					; 000000e5H
	push	0
	push	OFFSET _bmleftarrow
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 182
	call	_CheckWarningPopups
; Line 184
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_CopyToLCD
	add	esp, 4
; Line 185
	call	_GUI_SelectLCD
$LN23@DAXRPMSwee:
; Line 187
	jmp	$LN30@DAXRPMSwee
$LN9@DAXRPMSwee:
; Line 190
	cmp	DWORD PTR _pMPH, 0
	je	SHORT $LN8@DAXRPMSwee
; Line 192
	mov	eax, DWORD PTR _pMPH
	mov	DWORD PTR $T17884[ebp], eax
	mov	ecx, DWORD PTR $T17884[ebp]
	mov	DWORD PTR $T17883[ebp], ecx
	cmp	DWORD PTR $T17883[ebp], 0
	je	SHORT $LN36@DAXRPMSwee
	push	1
	mov	ecx, DWORD PTR $T17883[ebp]
	call	??_GDigitalDisplay@@QAEPAXI@Z
	mov	DWORD PTR tv193[ebp], eax
	jmp	SHORT $LN37@DAXRPMSwee
$LN36@DAXRPMSwee:
	mov	DWORD PTR tv193[ebp], 0
$LN37@DAXRPMSwee:
; Line 193
	mov	DWORD PTR _pMPH, 0
$LN8@DAXRPMSwee:
; Line 195
	cmp	DWORD PTR _pSweep, 0
	je	SHORT $LN7@DAXRPMSwee
; Line 197
	mov	eax, DWORD PTR _pSweep
	mov	DWORD PTR $T17888[ebp], eax
	mov	ecx, DWORD PTR $T17888[ebp]
	mov	DWORD PTR $T17887[ebp], ecx
	cmp	DWORD PTR $T17887[ebp], 0
	je	SHORT $LN38@DAXRPMSwee
	push	1
	mov	ecx, DWORD PTR $T17887[ebp]
	call	??_GRPMSweep@@QAEPAXI@Z
	mov	DWORD PTR tv199[ebp], eax
	jmp	SHORT $LN39@DAXRPMSwee
$LN38@DAXRPMSwee:
	mov	DWORD PTR tv199[ebp], 0
$LN39@DAXRPMSwee:
; Line 198
	mov	DWORD PTR _pSweep, 0
$LN7@DAXRPMSwee:
; Line 207
	cmp	DWORD PTR _pYellow, 0
	je	SHORT $LN6@DAXRPMSwee
; Line 209
	mov	eax, DWORD PTR _pYellow
	mov	DWORD PTR $T17891[ebp], eax
	mov	ecx, DWORD PTR $T17891[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 210
	mov	DWORD PTR _pYellow, 0
$LN6@DAXRPMSwee:
; Line 212
	cmp	DWORD PTR _pRed, 0
	je	SHORT $LN5@DAXRPMSwee
; Line 214
	mov	eax, DWORD PTR _pRed
	mov	DWORD PTR $T17892[ebp], eax
	mov	ecx, DWORD PTR $T17892[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 215
	mov	DWORD PTR _pRed, 0
$LN5@DAXRPMSwee:
; Line 217
	cmp	DWORD PTR _pPredictiveLap, 0
	je	SHORT $LN4@DAXRPMSwee
; Line 219
	mov	eax, DWORD PTR _pPredictiveLap
	mov	DWORD PTR $T17894[ebp], eax
	mov	ecx, DWORD PTR $T17894[ebp]
	mov	DWORD PTR $T17893[ebp], ecx
	cmp	DWORD PTR $T17893[ebp], 0
	je	SHORT $LN40@DAXRPMSwee
	push	1
	mov	ecx, DWORD PTR $T17893[ebp]
	call	??_GPredictiveLapTimer@@QAEPAXI@Z
	mov	DWORD PTR tv209[ebp], eax
	jmp	SHORT $LN41@DAXRPMSwee
$LN40@DAXRPMSwee:
	mov	DWORD PTR tv209[ebp], 0
$LN41@DAXRPMSwee:
; Line 220
	mov	DWORD PTR _pPredictiveLap, 0
$LN4@DAXRPMSwee:
; Line 222
	cmp	DWORD PTR _pLapTimer, 0
	je	SHORT $LN3@DAXRPMSwee
; Line 224
	mov	eax, DWORD PTR _pLapTimer
	mov	DWORD PTR $T17898[ebp], eax
	mov	ecx, DWORD PTR $T17898[ebp]
	mov	DWORD PTR $T17897[ebp], ecx
	cmp	DWORD PTR $T17897[ebp], 0
	je	SHORT $LN42@DAXRPMSwee
	push	1
	mov	ecx, DWORD PTR $T17897[ebp]
	call	??_GDigitalStringOutput@@QAEPAXI@Z
	mov	DWORD PTR tv215[ebp], eax
	jmp	SHORT $LN43@DAXRPMSwee
$LN42@DAXRPMSwee:
	mov	DWORD PTR tv215[ebp], 0
$LN43@DAXRPMSwee:
; Line 225
	mov	DWORD PTR _pLapTimer, 0
$LN3@DAXRPMSwee:
; Line 227
	cmp	DWORD PTR _mem, 0
	je	SHORT $LN2@DAXRPMSwee
; Line 229
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_Delete
	add	esp, 4
; Line 230
	mov	DWORD PTR _mem, 0
$LN2@DAXRPMSwee:
; Line 232
	jmp	SHORT $LN30@DAXRPMSwee
$LN1@DAXRPMSwee:
; Line 235
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN30@DAXRPMSwee:
; Line 237
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN46@DAXRPMSwee
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 536				; 00000218H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN46@DAXRPMSwee:
	DD	1
	DD	$LN45@DAXRPMSwee
$LN45@DAXRPMSwee:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN44@DAXRPMSwee
$LN44@DAXRPMSwee:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
?DAXRPMSweepCallback@@YAXPAUWM_MESSAGE@@@Z ENDP		; DAXRPMSweepCallback
_TEXT	ENDS
EXTRN	??1PredictiveLapTimer@@QAE@XZ:PROC		; PredictiveLapTimer::~PredictiveLapTimer
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GPredictiveLapTimer@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GPredictiveLapTimer@@QAEPAXI@Z PROC			; PredictiveLapTimer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PredictiveLapTimer@@QAE@XZ		; PredictiveLapTimer::~PredictiveLapTimer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPredictiveLapTimer@@QAEPAXI@Z ENDP			; PredictiveLapTimer::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1DigitalDisplay@@QAE@XZ:PROC			; DigitalDisplay::~DigitalDisplay
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GDigitalDisplay@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GDigitalDisplay@@QAEPAXI@Z PROC			; DigitalDisplay::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DigitalDisplay@@QAE@XZ		; DigitalDisplay::~DigitalDisplay
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDigitalDisplay@@QAEPAXI@Z ENDP			; DigitalDisplay::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1RPMSweep@@QAE@XZ:PROC			; RPMSweep::~RPMSweep
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GRPMSweep@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GRPMSweep@@QAEPAXI@Z PROC				; RPMSweep::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RPMSweep@@QAE@XZ			; RPMSweep::~RPMSweep
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRPMSweep@@QAEPAXI@Z ENDP				; RPMSweep::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1DigitalStringOutput@@QAE@XZ:PROC		; DigitalStringOutput::~DigitalStringOutput
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GDigitalStringOutput@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GDigitalStringOutput@@QAEPAXI@Z PROC			; DigitalStringOutput::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DigitalStringOutput@@QAE@XZ		; DigitalStringOutput::~DigitalStringOutput
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDigitalStringOutput@@QAEPAXI@Z ENDP			; DigitalStringOutput::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@437a0000
PUBLIC	_Display_DAXRPMSweepScreen
EXTRN	_WM_CreateTimer:PROC
EXTRN	??0DigitalStringOutput@@QAE@HHHHW4DigitalOptions@@JUGUI_FONT@@K@Z:PROC ; DigitalStringOutput::DigitalStringOutput
EXTRN	_GUI_FontD48:BYTE
EXTRN	??0PredictiveLapTimer@@QAE@HHHHMMJ@Z:PROC	; PredictiveLapTimer::PredictiveLapTimer
EXTRN	_GetPredictiveScale:PROC
EXTRN	_trackData:BYTE
EXTRN	??0DigitalDisplay@@QAE@HHHHPAD0MMHHW4DigitalOptions@@PAVAlarm@@_NUGUI_FONT@@4J@Z:PROC ; DigitalDisplay::DigitalDisplay
EXTRN	_sysData:BYTE
EXTRN	??0RPMSweep@@QAE@HHHHHHHHPAVAlarm@@_N@Z:PROC	; RPMSweep::RPMSweep
EXTRN	_DataValues:BYTE
EXTRN	_SystemError:PROC
EXTRN	_WM_CreateWindow:PROC
EXTRN	_GUI_MEMDEV_Create:PROC
EXTRN	_CalculateScaleTop:PROC
EXTRN	??0Alarm@@QAE@_NMMKKW4AlarmType@@PAV0@2@Z:PROC	; Alarm::Alarm
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT __real@437a0000
CONST	SEGMENT
__real@437a0000 DD 0437a0000r			; 250
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _Display_DAXRPMSweepScreen
_TEXT	SEGMENT
tv197 = -344						; size = 4
tv171 = -344						; size = 4
tv132 = -344						; size = 4
tv290 = -340						; size = 4
tv273 = -340						; size = 4
tv257 = -340						; size = 4
tv190 = -340						; size = 4
tv81 = -340						; size = 4
tv158 = -337						; size = 1
$T17932 = -332						; size = 4
$T17933 = -320						; size = 4
$T17936 = -308						; size = 4
$T17937 = -296						; size = 4
$T17940 = -284						; size = 4
$T17941 = -272						; size = 4
$T17946 = -260						; size = 4
$T17947 = -248						; size = 4
$T17952 = -236						; size = 4
$T17953 = -224						; size = 4
$T17956 = -212						; size = 4
$T17957 = -200						; size = 4
_Display_DAXRPMSweepScreen PROC				; COMDAT
; Line 240
	push	ebp
	mov	ebp, esp
	sub	esp, 344				; 00000158H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-344]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 247
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17933[ebp], eax
	cmp	DWORD PTR $T17933[ebp], 0
	je	SHORT $LN10@Display_DA
	push	0
	push	0
	push	1
	push	32896					; 00008080H
	push	65535					; 0000ffffH
	fild	DWORD PTR _vehicleData+36
	push	ecx
	fstp	DWORD PTR [esp]
	fild	DWORD PTR _vehicleData+32
	push	ecx
	fstp	DWORD PTR [esp]
	push	1
	mov	ecx, DWORD PTR $T17933[ebp]
	call	??0Alarm@@QAE@_NMMKKW4AlarmType@@PAV0@2@Z ; Alarm::Alarm
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN11@Display_DA
$LN10@Display_DA:
	mov	DWORD PTR tv81[ebp], 0
$LN11@Display_DA:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR $T17932[ebp], eax
	mov	ecx, DWORD PTR $T17932[ebp]
	mov	DWORD PTR _pYellow, ecx
; Line 249
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17937[ebp], eax
	cmp	DWORD PTR $T17937[ebp], 0
	je	SHORT $LN12@Display_DA
	push	0
	mov	eax, DWORD PTR _pYellow
	push	eax
	push	3
	push	128					; 00000080H
	push	255					; 000000ffH
	mov	ecx, DWORD PTR _vehicleData+20
	push	ecx
	call	_CalculateScaleTop
	add	esp, 4
	mov	DWORD PTR tv290[ebp], eax
	fild	DWORD PTR tv290[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fild	DWORD PTR _vehicleData+36
	push	ecx
	fstp	DWORD PTR [esp]
	push	1
	mov	ecx, DWORD PTR $T17937[ebp]
	call	??0Alarm@@QAE@_NMMKKW4AlarmType@@PAV0@2@Z ; Alarm::Alarm
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN13@Display_DA
$LN12@Display_DA:
	mov	DWORD PTR tv132[ebp], 0
$LN13@Display_DA:
	mov	edx, DWORD PTR tv132[ebp]
	mov	DWORD PTR $T17936[ebp], edx
	mov	eax, DWORD PTR $T17936[ebp]
	mov	DWORD PTR _pRed, eax
; Line 252
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	call	_GUI_MEMDEV_Create
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mem, eax
; Line 254
	push	0
	push	OFFSET ?DAXRPMSweepCallback@@YAXPAUWM_MESSAGE@@@Z ; DAXRPMSweepCallback
	push	2
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	call	_WM_CreateWindow
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _hDAXGaugeScreen, eax
	cmp	DWORD PTR _hDAXGaugeScreen, 0
	jg	SHORT $LN7@Display_DA
; Line 255
	call	_SystemError
$LN7@Display_DA:
; Line 257
	push	132					; 00000084H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17941[ebp], eax
	cmp	DWORD PTR $T17941[ebp], 0
	je	SHORT $LN16@Display_DA
	cmp	DWORD PTR _DataValues+592, 0
	jl	SHORT $LN14@Display_DA
	fld	DWORD PTR _vehicleData+80
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN14@Display_DA
	mov	BYTE PTR tv158[ebp], 1
	jmp	SHORT $LN15@Display_DA
$LN14@Display_DA:
	mov	BYTE PTR tv158[ebp], 0
$LN15@Display_DA:
	movzx	eax, BYTE PTR tv158[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRed
	push	ecx
	push	500					; 000001f4H
	push	1000					; 000003e8H
	mov	edx, DWORD PTR _vehicleData+20
	push	edx
	call	_CalculateScaleTop
	add	esp, 4
	push	eax
	push	0
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	mov	ecx, DWORD PTR $T17941[ebp]
	call	??0RPMSweep@@QAE@HHHHHHHHPAVAlarm@@_N@Z	; RPMSweep::RPMSweep
	mov	DWORD PTR tv171[ebp], eax
	jmp	SHORT $LN17@Display_DA
$LN16@Display_DA:
	mov	DWORD PTR tv171[ebp], 0
$LN17@Display_DA:
	mov	eax, DWORD PTR tv171[ebp]
	mov	DWORD PTR $T17940[ebp], eax
	mov	ecx, DWORD PTR $T17940[ebp]
	mov	DWORD PTR _pSweep, ecx
	cmp	DWORD PTR _pSweep, 0
	ja	SHORT $LN6@Display_DA
; Line 258
	call	_SystemError
$LN6@Display_DA:
; Line 261
	push	216					; 000000d8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17947[ebp], eax
	cmp	DWORD PTR $T17947[ebp], 0
	je	$LN20@Display_DA
	cmp	DWORD PTR _sysData+100, 1
	jne	SHORT $LN18@Display_DA
	mov	DWORD PTR tv190[ebp], OFFSET $SG17605
	jmp	SHORT $LN19@Display_DA
$LN18@Display_DA:
	mov	DWORD PTR tv190[ebp], OFFSET $SG17606
$LN19@Display_DA:
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	sub	esp, 36					; 00000024H
	mov	ecx, 9
	mov	esi, OFFSET _GUI_Font32B_ASCII
	mov	edi, esp
	rep movsd
	sub	esp, 36					; 00000024H
	mov	ecx, 9
	mov	esi, OFFSET _GUI_FontD32
	mov	edi, esp
	rep movsd
	push	0
	push	0
	push	0
	push	0
	push	0
	push	ecx
	fld	DWORD PTR __real@437a0000
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR tv190[ebp]
	push	ecx
	push	OFFSET $SG17607
	push	50					; 00000032H
	push	150					; 00000096H
	push	5
	push	5
	mov	ecx, DWORD PTR $T17947[ebp]
	call	??0DigitalDisplay@@QAE@HHHHPAD0MMHHW4DigitalOptions@@PAVAlarm@@_NUGUI_FONT@@4J@Z ; DigitalDisplay::DigitalDisplay
	mov	DWORD PTR tv197[ebp], eax
	jmp	SHORT $LN21@Display_DA
$LN20@Display_DA:
	mov	DWORD PTR tv197[ebp], 0
$LN21@Display_DA:
	mov	edx, DWORD PTR tv197[ebp]
	mov	DWORD PTR $T17946[ebp], edx
	mov	eax, DWORD PTR $T17946[ebp]
	mov	DWORD PTR _pMPH, eax
	cmp	DWORD PTR _pMPH, 0
	ja	SHORT $LN5@Display_DA
; Line 262
	call	_SystemError
$LN5@Display_DA:
; Line 264
	fld	QWORD PTR _trackData+40
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@Display_DA
	cmp	DWORD PTR _selectedRaceMode, 4
	jne	$LN2@Display_DA
$LN3@Display_DA:
; Line 267
	push	52					; 00000034H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17953[ebp], eax
	cmp	DWORD PTR $T17953[ebp], 0
	je	SHORT $LN22@Display_DA
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	call	_GetPredictiveScale
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	call	_GetPredictiveScale
	push	ecx
	fstp	DWORD PTR [esp]
	movsx	ecx, WORD PTR _SweepTachPredictiveLapRect+6
	movsx	edx, WORD PTR _SweepTachPredictiveLapRect+2
	sub	ecx, edx
	push	ecx
	movsx	eax, WORD PTR _SweepTachPredictiveLapRect+4
	movsx	ecx, WORD PTR _SweepTachPredictiveLapRect
	sub	eax, ecx
	push	eax
	movsx	edx, WORD PTR _SweepTachPredictiveLapRect+2
	push	edx
	movsx	eax, WORD PTR _SweepTachPredictiveLapRect
	push	eax
	mov	ecx, DWORD PTR $T17953[ebp]
	call	??0PredictiveLapTimer@@QAE@HHHHMMJ@Z	; PredictiveLapTimer::PredictiveLapTimer
	mov	DWORD PTR tv257[ebp], eax
	jmp	SHORT $LN23@Display_DA
$LN22@Display_DA:
	mov	DWORD PTR tv257[ebp], 0
$LN23@Display_DA:
	mov	ecx, DWORD PTR tv257[ebp]
	mov	DWORD PTR $T17952[ebp], ecx
	mov	edx, DWORD PTR $T17952[ebp]
	mov	DWORD PTR _pPredictiveLap, edx
	cmp	DWORD PTR _pPredictiveLap, 0
	ja	SHORT $LN2@Display_DA
; Line 268
	call	_SystemError
$LN2@Display_DA:
; Line 270
	push	284					; 0000011cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17957[ebp], eax
	cmp	DWORD PTR $T17957[ebp], 0
	je	SHORT $LN24@Display_DA
	push	16777215				; 00ffffffH
	sub	esp, 36					; 00000024H
	mov	ecx, 9
	mov	esi, OFFSET _GUI_FontD48
	mov	edi, esp
	rep movsd
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	push	0
	push	60					; 0000003cH
	push	245					; 000000f5H
	push	160					; 000000a0H
	push	225					; 000000e1H
	mov	ecx, DWORD PTR $T17957[ebp]
	call	??0DigitalStringOutput@@QAE@HHHHW4DigitalOptions@@JUGUI_FONT@@K@Z ; DigitalStringOutput::DigitalStringOutput
	mov	DWORD PTR tv273[ebp], eax
	jmp	SHORT $LN25@Display_DA
$LN24@Display_DA:
	mov	DWORD PTR tv273[ebp], 0
$LN25@Display_DA:
	mov	ecx, DWORD PTR tv273[ebp]
	mov	DWORD PTR $T17956[ebp], ecx
	mov	edx, DWORD PTR $T17956[ebp]
	mov	DWORD PTR _pLapTimer, edx
	cmp	DWORD PTR _pLapTimer, 0
	ja	SHORT $LN1@Display_DA
; Line 271
	call	_SystemError
$LN1@Display_DA:
; Line 273
	push	0
	push	25					; 00000019H
	push	0
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	call	_WM_CreateTimer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hScreenTimer, eax
; Line 275
	mov	eax, DWORD PTR _hDAXGaugeScreen
; Line 276
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 344				; 00000158H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Display_DAXRPMSweepScreen ENDP
_TEXT	ENDS
PUBLIC	??_GGauge@@QAEPAXI@Z				; Gauge::`scalar deleting destructor'
PUBLIC	__$ArrayPad$
PUBLIC	?DAXAnalogCallback@@YAXPAUWM_MESSAGE@@@Z	; DAXAnalogCallback
EXTRN	_GUI_Font20_ASCII:BYTE
EXTRN	?DrawControl@Gauge@@QAEXXZ:PROC			; Gauge::DrawControl
EXTRN	?SetValue@Gauge@@QAEXM@Z:PROC			; Gauge::SetValue
EXTRN	_GUI_Font24B_ASCII:BYTE
EXTRN	_GUI_SetTextMode:PROC
EXTRN	_bmDarkAsphalt:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DAXAnalogCallback@@YAXPAUWM_MESSAGE@@@Z
_TEXT	SEGMENT
tv327 = -560						; size = 4
tv321 = -560						; size = 4
tv283 = -560						; size = 4
tv273 = -560						; size = 4
tv137 = -560						; size = 4
tv75 = -560						; size = 4
tv64 = -560						; size = 4
$T17965 = -552						; size = 4
$T17966 = -540						; size = 4
$T17969 = -528						; size = 8
$T17972 = -512						; size = 8
$T17973 = -496						; size = 8
$T17974 = -480						; size = 8
$T17975 = -464						; size = 8
$T17976 = -448						; size = 8
$T17977 = -432						; size = 8
$T17978 = -416						; size = 8
$T17979 = -400						; size = 4
$T17980 = -388						; size = 4
$T17983 = -376						; size = 4
$T17984 = -364						; size = 4
$T17985 = -352						; size = 4
$T17986 = -340						; size = 4
$T17989 = -328						; size = 4
$T17990 = -316						; size = 4
$T17993 = -304						; size = 4
$T17994 = -292						; size = 4
_rpm$17640 = -88					; size = 4
_itmp$17639 = -76					; size = 4
_ftemp$17638 = -64					; size = 4
_pText$17637 = -52					; size = 4
_scratch$17636 = -40					; size = 30
__$ArrayPad$ = -4					; size = 4
_pMsg$ = 8						; size = 4
?DAXAnalogCallback@@YAXPAUWM_MESSAGE@@@Z PROC		; DAXAnalogCallback, COMDAT
; Line 280
	push	ebp
	mov	ebp, esp
	sub	esp, 560				; 00000230H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-560]
	mov	ecx, 140				; 0000008cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 281
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 11			; 0000000bH
	je	$LN9@DAXAnalogC
	cmp	DWORD PTR tv64[ebp], 15			; 0000000fH
	je	$LN29@DAXAnalogC
	cmp	DWORD PTR tv64[ebp], 275		; 00000113H
	je	SHORT $LN34@DAXAnalogC
	jmp	$LN1@DAXAnalogC
$LN34@DAXAnalogC:
; Line 284
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _hScreenTimer
	jne	$LN33@DAXAnalogC
; Line 287
	cmp	DWORD PTR _unsavedSysData+136, 20	; 00000014H
	je	SHORT $LN31@DAXAnalogC
	cmp	DWORD PTR _unsavedSysData+136, 21	; 00000015H
	jne	SHORT $LN30@DAXAnalogC
$LN31@DAXAnalogC:
; Line 289
	cmp	DWORD PTR _pPredictiveLap, 0
	je	SHORT $LN30@DAXAnalogC
; Line 291
	mov	eax, DWORD PTR _pPredictiveLap
	mov	DWORD PTR $T17966[ebp], eax
	mov	ecx, DWORD PTR $T17966[ebp]
	mov	DWORD PTR $T17965[ebp], ecx
	cmp	DWORD PTR $T17965[ebp], 0
	je	SHORT $LN39@DAXAnalogC
	push	1
	mov	ecx, DWORD PTR $T17965[ebp]
	call	??_GPredictiveLapTimer@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN40@DAXAnalogC
$LN39@DAXAnalogC:
	mov	DWORD PTR tv75[ebp], 0
$LN40@DAXAnalogC:
; Line 292
	mov	DWORD PTR _pPredictiveLap, 0
$LN30@DAXAnalogC:
; Line 295
	push	25					; 00000019H
	mov	eax, DWORD PTR _hScreenTimer
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
; Line 296
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN33@DAXAnalogC:
; Line 298
	jmp	$LN35@DAXAnalogC
$LN29@DAXAnalogC:
; Line 301
	push	0
	call	_CS_IsVisible
	add	esp, 4
	test	eax, eax
	je	$LN28@DAXAnalogC
; Line 307
	movzx	eax, BYTE PTR _lockupSemaphore
	test	eax, eax
	je	SHORT $LN27@DAXAnalogC
; Line 308
	jmp	$LN35@DAXAnalogC
	jmp	SHORT $LN26@DAXAnalogC
$LN27@DAXAnalogC:
; Line 309
	mov	BYTE PTR _lockupSemaphore, 1
$LN26@DAXAnalogC:
; Line 311
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 312
	push	OFFSET _GUI_FontD48
	call	_GUI_SetFont
	add	esp, 4
; Line 314
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_Select
	add	esp, 4
; Line 315
	call	_GUI_Clear
; Line 318
	push	0
	push	0
	push	OFFSET _bmDarkAsphalt
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 321
	push	2
	call	_GUI_SetTextMode
	add	esp, 4
; Line 324
	push	14					; 0000000eH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17969[ebp], eax
	mov	DWORD PTR $T17969[ebp+4], edx
	fld	DWORD PTR $T17969[ebp]
	call	__ftol2_sse
	push	eax
	push	OFFSET $SG17645
	lea	eax, DWORD PTR _scratch$17636[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 325
	lea	eax, DWORD PTR _scratch$17636[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSpeed
	call	?SetValue@DigitalStringOutput@@QAEXPAD@Z ; DigitalStringOutput::SetValue
; Line 326
	mov	ecx, DWORD PTR _pSpeed
	call	?DrawControl@DigitalStringOutput@@QAEXXZ ; DigitalStringOutput::DrawControl
; Line 329
	push	OFFSET _GUI_Font24B_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 330
	push	8421504					; 00808080H
	call	_GUI_SetColor
	add	esp, 4
; Line 331
	cmp	DWORD PTR _sysData+100, 0
	jne	SHORT $LN41@DAXAnalogC
	mov	DWORD PTR tv137[ebp], OFFSET $SG17646
	jmp	SHORT $LN42@DAXAnalogC
$LN41@DAXAnalogC:
	mov	DWORD PTR tv137[ebp], OFFSET $SG17647
$LN42@DAXAnalogC:
	push	35					; 00000023H
	push	5
	mov	eax, DWORD PTR tv137[ebp]
	push	eax
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 334
	push	53					; 00000035H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17972[ebp], eax
	mov	DWORD PTR $T17972[ebp+4], edx
	mov	eax, DWORD PTR $T17972[ebp]
	mov	DWORD PTR _rpm$17640[ebp], eax
	fild	DWORD PTR _rpm$17640[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pGauge
	call	?SetValue@Gauge@@QAEXM@Z		; Gauge::SetValue
; Line 335
	mov	ecx, DWORD PTR _pGauge
	call	?DrawControl@Gauge@@QAEXXZ		; Gauge::DrawControl
; Line 338
	push	OFFSET _GUI_FontD32
	call	_GUI_SetFont
	add	esp, 4
; Line 339
	cmp	DWORD PTR _selectedRaceMode, 4
	jne	SHORT $LN25@DAXAnalogC
; Line 341
	push	26					; 0000001aH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17973[ebp], eax
	mov	DWORD PTR $T17973[ebp+4], edx
	fld	DWORD PTR $T17973[ebp]
	fstp	DWORD PTR _ftemp$17638[ebp]
; Line 342
	push	13631696				; 00d000d0H
	call	_GUI_SetColor
	add	esp, 4
; Line 343
	mov	DWORD PTR _pText$17637[ebp], OFFSET $SG17651
; Line 345
	jmp	SHORT $LN22@DAXAnalogC
$LN25@DAXAnalogC:
; Line 347
	push	39					; 00000027H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17974[ebp], eax
	mov	DWORD PTR $T17974[ebp+4], edx
	fld	DWORD PTR $T17974[ebp]
	fstp	DWORD PTR _ftemp$17638[ebp]
; Line 348
	fldz
	fcomp	DWORD PTR _ftemp$17638[ebp]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN23@DAXAnalogC
; Line 350
	push	33023					; 000080ffH
	call	_GUI_SetColor
	add	esp, 4
; Line 351
	fldz
	fsub	DWORD PTR _ftemp$17638[ebp]
	fstp	DWORD PTR _ftemp$17638[ebp]
; Line 352
	mov	DWORD PTR _pText$17637[ebp], OFFSET $SG17655
; Line 354
	jmp	SHORT $LN22@DAXAnalogC
$LN23@DAXAnalogC:
; Line 356
	push	13631696				; 00d000d0H
	call	_GUI_SetColor
	add	esp, 4
; Line 357
	mov	DWORD PTR _pText$17637[ebp], OFFSET $SG17657
$LN22@DAXAnalogC:
; Line 360
	fld	DWORD PTR _ftemp$17638[ebp]
	call	__ftol2_sse
	push	eax
	push	OFFSET $SG17659
	lea	eax, DWORD PTR _scratch$17636[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 361
	push	1
	push	OFFSET _VmaxRect
	lea	eax, DWORD PTR _scratch$17636[ebp]
	push	eax
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 364
	push	OFFSET _GUI_Font24B_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 365
	push	80					; 00000050H
	push	5
	mov	eax, DWORD PTR _pText$17637[ebp]
	push	eax
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 369
	cmp	DWORD PTR _pPredictiveLap, 0
	je	SHORT $LN21@DAXAnalogC
; Line 373
	push	31					; 0000001fH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17975[ebp], eax
	mov	DWORD PTR $T17975[ebp+4], edx
	push	ecx
	fld	DWORD PTR $T17975[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _pPredictiveLap
	push	eax
	call	?UpdatePredictiveLapControl@@YAXPAVPredictiveLapTimer@@M@Z ; UpdatePredictiveLapControl
	add	esp, 8
; Line 375
	jmp	SHORT $LN17@DAXAnalogC
$LN21@DAXAnalogC:
; Line 377
	push	OFFSET _GUI_Font20_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 378
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 379
	push	OFFSET _AnalogPredictiveLapRect
	call	_GUI_DrawRectEx
	add	esp, 4
; Line 380
	cmp	DWORD PTR _unsavedSysData+136, 20	; 00000014H
	je	SHORT $LN18@DAXAnalogC
	cmp	DWORD PTR _unsavedSysData+136, 21	; 00000015H
	jne	SHORT $LN19@DAXAnalogC
$LN18@DAXAnalogC:
; Line 382
	push	14					; 0000000eH
	push	OFFSET _AnalogPredictiveLapRect
	push	OFFSET $SG17667
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN17@DAXAnalogC
$LN19@DAXAnalogC:
; Line 384
	push	14					; 0000000eH
	push	OFFSET _AnalogPredictiveLapRect
	push	OFFSET $SG17670
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
$LN17@DAXAnalogC:
; Line 388
	push	32					; 00000020H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17976[ebp], eax
	mov	DWORD PTR $T17976[ebp+4], edx
	push	0
	mov	eax, DWORD PTR $T17976[ebp]
	push	eax
	call	_formatLapTime
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _pLapTimer
	call	?SetValue@DigitalStringOutput@@QAEXPAD@Z ; DigitalStringOutput::SetValue
; Line 389
	mov	ecx, DWORD PTR _pLapTimer
	call	?DrawControl@DigitalStringOutput@@QAEXXZ ; DigitalStringOutput::DrawControl
; Line 392
	push	68					; 00000044H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17977[ebp], eax
	mov	DWORD PTR $T17977[ebp+4], edx
	mov	eax, DWORD PTR $T17977[ebp]
	mov	DWORD PTR _itmp$17639[ebp], eax
	mov	ecx, DWORD PTR _itmp$17639[ebp]
	cmp	ecx, DWORD PTR _vehicleData+20
	jl	SHORT $LN16@DAXAnalogC
; Line 393
	push	255					; 000000ffH
	call	_GUI_SetColor
	add	esp, 4
	jmp	SHORT $LN13@DAXAnalogC
$LN16@DAXAnalogC:
; Line 394
	mov	eax, DWORD PTR _itmp$17639[ebp]
	cmp	eax, DWORD PTR _vehicleData+36
	jl	SHORT $LN14@DAXAnalogC
; Line 395
	push	65535					; 0000ffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 396
	jmp	SHORT $LN13@DAXAnalogC
$LN14@DAXAnalogC:
; Line 397
	push	8421504					; 00808080H
	call	_GUI_SetColor
	add	esp, 4
$LN13@DAXAnalogC:
; Line 398
	push	OFFSET _GUI_Font24B_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 399
	mov	eax, DWORD PTR _itmp$17639[ebp]
	push	eax
	push	OFFSET $SG17677
	lea	ecx, DWORD PTR _scratch$17636[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 400
	push	1
	push	OFFSET _PeakRPMRect
	lea	eax, DWORD PTR _scratch$17636[ebp]
	push	eax
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 403
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 404
	mov	eax, DWORD PTR _rpm$17640[ebp]
	push	eax
	push	OFFSET $SG17679
	lea	ecx, DWORD PTR _scratch$17636[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 405
	push	1
	push	OFFSET _RPMRect
	lea	eax, DWORD PTR _scratch$17636[ebp]
	push	eax
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 408
	push	65280					; 0000ff00H
	call	_GUI_SetColor
	add	esp, 4
; Line 409
	push	OFFSET _GUI_FontD32
	call	_GUI_SetFont
	add	esp, 4
; Line 410
	fld	DWORD PTR _vehicleData+80
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN11@DAXAnalogC
	push	74					; 0000004aH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T17978[ebp], eax
	mov	DWORD PTR $T17978[ebp+4], edx
	mov	eax, DWORD PTR $T17978[ebp]
	mov	DWORD PTR _itmp$17639[ebp], eax
	cmp	DWORD PTR _itmp$17639[ebp], 0
	jne	SHORT $LN12@DAXAnalogC
$LN11@DAXAnalogC:
; Line 411
	push	OFFSET $SG17684
	lea	eax, DWORD PTR _scratch$17636[ebp]
	push	eax
	call	_sprintf
	add	esp, 8
; Line 412
	jmp	SHORT $LN10@DAXAnalogC
$LN12@DAXAnalogC:
; Line 413
	mov	eax, DWORD PTR _itmp$17639[ebp]
	push	eax
	push	OFFSET $SG17686
	lea	ecx, DWORD PTR _scratch$17636[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN10@DAXAnalogC:
; Line 414
	push	0
	call	_GUI_SetColor
	add	esp, 4
; Line 415
	push	158					; 0000009eH
	push	334					; 0000014eH
	lea	eax, DWORD PTR _scratch$17636[ebp]
	push	eax
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 416
	push	16744576				; 00ff8080H
	call	_GUI_SetColor
	add	esp, 4
; Line 417
	push	156					; 0000009cH
	push	332					; 0000014cH
	lea	eax, DWORD PTR _scratch$17636[ebp]
	push	eax
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 420
	push	229					; 000000e5H
	push	0
	push	OFFSET _bmleftarrow
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 421
	call	_CheckWarningPopups
; Line 422
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_CopyToLCD
	add	esp, 4
; Line 423
	call	_GUI_SelectLCD
$LN28@DAXAnalogC:
; Line 425
	jmp	$LN35@DAXAnalogC
$LN9@DAXAnalogC:
; Line 428
	cmp	DWORD PTR _pGauge, 0
	je	SHORT $LN8@DAXAnalogC
; Line 430
	mov	eax, DWORD PTR _pGauge
	mov	DWORD PTR $T17980[ebp], eax
	mov	ecx, DWORD PTR $T17980[ebp]
	mov	DWORD PTR $T17979[ebp], ecx
	cmp	DWORD PTR $T17979[ebp], 0
	je	SHORT $LN43@DAXAnalogC
	push	1
	mov	ecx, DWORD PTR $T17979[ebp]
	call	??_GGauge@@QAEPAXI@Z
	mov	DWORD PTR tv273[ebp], eax
	jmp	SHORT $LN44@DAXAnalogC
$LN43@DAXAnalogC:
	mov	DWORD PTR tv273[ebp], 0
$LN44@DAXAnalogC:
; Line 431
	mov	DWORD PTR _pGauge, 0
$LN8@DAXAnalogC:
; Line 440
	cmp	DWORD PTR _pYellow, 0
	je	SHORT $LN7@DAXAnalogC
; Line 442
	mov	eax, DWORD PTR _pYellow
	mov	DWORD PTR $T17983[ebp], eax
	mov	ecx, DWORD PTR $T17983[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 443
	mov	DWORD PTR _pYellow, 0
$LN7@DAXAnalogC:
; Line 445
	cmp	DWORD PTR _pRed, 0
	je	SHORT $LN6@DAXAnalogC
; Line 447
	mov	eax, DWORD PTR _pRed
	mov	DWORD PTR $T17984[ebp], eax
	mov	ecx, DWORD PTR $T17984[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 448
	mov	DWORD PTR _pRed, 0
$LN6@DAXAnalogC:
; Line 450
	cmp	DWORD PTR _pPredictiveLap, 0
	je	SHORT $LN5@DAXAnalogC
; Line 452
	mov	eax, DWORD PTR _pPredictiveLap
	mov	DWORD PTR $T17986[ebp], eax
	mov	ecx, DWORD PTR $T17986[ebp]
	mov	DWORD PTR $T17985[ebp], ecx
	cmp	DWORD PTR $T17985[ebp], 0
	je	SHORT $LN45@DAXAnalogC
	push	1
	mov	ecx, DWORD PTR $T17985[ebp]
	call	??_GPredictiveLapTimer@@QAEPAXI@Z
	mov	DWORD PTR tv283[ebp], eax
	jmp	SHORT $LN46@DAXAnalogC
$LN45@DAXAnalogC:
	mov	DWORD PTR tv283[ebp], 0
$LN46@DAXAnalogC:
; Line 453
	mov	DWORD PTR _pPredictiveLap, 0
$LN5@DAXAnalogC:
; Line 455
	cmp	DWORD PTR _pLapTimer, 0
	je	SHORT $LN4@DAXAnalogC
; Line 457
	mov	eax, DWORD PTR _pLapTimer
	mov	DWORD PTR $T17990[ebp], eax
	mov	ecx, DWORD PTR $T17990[ebp]
	mov	DWORD PTR $T17989[ebp], ecx
	cmp	DWORD PTR $T17989[ebp], 0
	je	SHORT $LN47@DAXAnalogC
	push	1
	mov	ecx, DWORD PTR $T17989[ebp]
	call	??_GDigitalStringOutput@@QAEPAXI@Z
	mov	DWORD PTR tv321[ebp], eax
	jmp	SHORT $LN48@DAXAnalogC
$LN47@DAXAnalogC:
	mov	DWORD PTR tv321[ebp], 0
$LN48@DAXAnalogC:
; Line 458
	mov	DWORD PTR _pLapTimer, 0
$LN4@DAXAnalogC:
; Line 460
	cmp	DWORD PTR _pSpeed, 0
	je	SHORT $LN3@DAXAnalogC
; Line 462
	mov	eax, DWORD PTR _pSpeed
	mov	DWORD PTR $T17994[ebp], eax
	mov	ecx, DWORD PTR $T17994[ebp]
	mov	DWORD PTR $T17993[ebp], ecx
	cmp	DWORD PTR $T17993[ebp], 0
	je	SHORT $LN49@DAXAnalogC
	push	1
	mov	ecx, DWORD PTR $T17993[ebp]
	call	??_GDigitalStringOutput@@QAEPAXI@Z
	mov	DWORD PTR tv327[ebp], eax
	jmp	SHORT $LN50@DAXAnalogC
$LN49@DAXAnalogC:
	mov	DWORD PTR tv327[ebp], 0
$LN50@DAXAnalogC:
; Line 463
	mov	DWORD PTR _pSpeed, 0
$LN3@DAXAnalogC:
; Line 465
	cmp	DWORD PTR _mem, 0
	je	SHORT $LN2@DAXAnalogC
; Line 467
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_Delete
	add	esp, 4
; Line 468
	mov	DWORD PTR _mem, 0
$LN2@DAXAnalogC:
; Line 470
	jmp	SHORT $LN35@DAXAnalogC
$LN1@DAXAnalogC:
; Line 473
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN35@DAXAnalogC:
; Line 475
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN53@DAXAnalogC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 560				; 00000230H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN53@DAXAnalogC:
	DD	1
	DD	$LN52@DAXAnalogC
$LN52@DAXAnalogC:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN51@DAXAnalogC
$LN51@DAXAnalogC:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
?DAXAnalogCallback@@YAXPAUWM_MESSAGE@@@Z ENDP		; DAXAnalogCallback
_TEXT	ENDS
EXTRN	??1Gauge@@QAE@XZ:PROC				; Gauge::~Gauge
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GGauge@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GGauge@@QAEPAXI@Z PROC				; Gauge::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Gauge@@QAE@XZ			; Gauge::~Gauge
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGauge@@QAEPAXI@Z ENDP				; Gauge::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@447a0000
PUBLIC	__real@43fa0000
PUBLIC	_Display_DAXGaugeScreen
EXTRN	?ShowDigital@Gauge@@QAEX_N@Z:PROC		; Gauge::ShowDigital
EXTRN	??0Gauge@@QAE@HHHMMPAD00PAVAlarm@@MMHHDJPBUGUI_BITMAP@@@Z:PROC ; Gauge::Gauge
EXTRN	_bmDefaultGauge:BYTE
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _Display_DAXGaugeScreen
_TEXT	SEGMENT
tv172 = -344						; size = 4
tv132 = -344						; size = 4
tv298 = -340						; size = 4
tv252 = -340						; size = 4
tv234 = -340						; size = 4
tv206 = -340						; size = 4
tv190 = -340						; size = 4
tv81 = -340						; size = 4
$T18004 = -332						; size = 4
$T18005 = -320						; size = 4
$T18008 = -308						; size = 4
$T18009 = -296						; size = 4
$T18012 = -284						; size = 4
$T18013 = -272						; size = 4
$T18016 = -260						; size = 4
$T18017 = -248						; size = 4
$T18020 = -236						; size = 4
$T18021 = -224						; size = 4
$T18024 = -212						; size = 4
$T18025 = -200						; size = 4
_Display_DAXGaugeScreen PROC				; COMDAT
; Line 482
	push	ebp
	mov	ebp, esp
	sub	esp, 344				; 00000158H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-344]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 489
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T18005[ebp], eax
	cmp	DWORD PTR $T18005[ebp], 0
	je	SHORT $LN10@Display_DA@2
	push	0
	push	0
	push	1
	push	32896					; 00008080H
	push	65535					; 0000ffffH
	fild	DWORD PTR _vehicleData+36
	push	ecx
	fstp	DWORD PTR [esp]
	fild	DWORD PTR _vehicleData+32
	push	ecx
	fstp	DWORD PTR [esp]
	push	1
	mov	ecx, DWORD PTR $T18005[ebp]
	call	??0Alarm@@QAE@_NMMKKW4AlarmType@@PAV0@2@Z ; Alarm::Alarm
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN11@Display_DA@2
$LN10@Display_DA@2:
	mov	DWORD PTR tv81[ebp], 0
$LN11@Display_DA@2:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR $T18004[ebp], eax
	mov	ecx, DWORD PTR $T18004[ebp]
	mov	DWORD PTR _pYellow, ecx
; Line 491
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T18009[ebp], eax
	cmp	DWORD PTR $T18009[ebp], 0
	je	SHORT $LN12@Display_DA@2
	push	0
	mov	eax, DWORD PTR _pYellow
	push	eax
	push	3
	push	128					; 00000080H
	push	255					; 000000ffH
	mov	ecx, DWORD PTR _vehicleData+20
	push	ecx
	call	_CalculateScaleTop
	add	esp, 4
	mov	DWORD PTR tv252[ebp], eax
	fild	DWORD PTR tv252[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fild	DWORD PTR _vehicleData+36
	push	ecx
	fstp	DWORD PTR [esp]
	push	1
	mov	ecx, DWORD PTR $T18009[ebp]
	call	??0Alarm@@QAE@_NMMKKW4AlarmType@@PAV0@2@Z ; Alarm::Alarm
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN13@Display_DA@2
$LN12@Display_DA@2:
	mov	DWORD PTR tv132[ebp], 0
$LN13@Display_DA@2:
	mov	edx, DWORD PTR tv132[ebp]
	mov	DWORD PTR $T18008[ebp], edx
	mov	eax, DWORD PTR $T18008[ebp]
	mov	DWORD PTR _pRed, eax
; Line 494
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	call	_GUI_MEMDEV_Create
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mem, eax
; Line 496
	push	0
	push	OFFSET ?DAXAnalogCallback@@YAXPAUWM_MESSAGE@@@Z ; DAXAnalogCallback
	push	2
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	call	_WM_CreateWindow
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _hDAXGaugeScreen, eax
	cmp	DWORD PTR _hDAXGaugeScreen, 0
	jg	SHORT $LN7@Display_DA@2
; Line 497
	call	_SystemError
$LN7@Display_DA@2:
; Line 499
	push	252					; 000000fcH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T18013[ebp], eax
	cmp	DWORD PTR $T18013[ebp], 0
	je	$LN14@Display_DA@2
	push	OFFSET _bmDefaultGauge
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	push	0
	push	1000					; 000003e8H
	push	0
	push	ecx
	fld	DWORD PTR __real@43fa0000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@447a0000
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pRed
	push	ecx
	push	OFFSET $SG17727
	push	OFFSET $SG17728
	push	OFFSET $SG17729
	mov	edx, DWORD PTR _vehicleData+20
	push	edx
	call	_CalculateScaleTop
	add	esp, 4
	mov	DWORD PTR tv298[ebp], eax
	fild	DWORD PTR tv298[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	136					; 00000088H
	push	0
	push	208					; 000000d0H
	mov	ecx, DWORD PTR $T18013[ebp]
	call	??0Gauge@@QAE@HHHMMPAD00PAVAlarm@@MMHHDJPBUGUI_BITMAP@@@Z ; Gauge::Gauge
	mov	DWORD PTR tv172[ebp], eax
	jmp	SHORT $LN15@Display_DA@2
$LN14@Display_DA@2:
	mov	DWORD PTR tv172[ebp], 0
$LN15@Display_DA@2:
	mov	eax, DWORD PTR tv172[ebp]
	mov	DWORD PTR $T18012[ebp], eax
	mov	ecx, DWORD PTR $T18012[ebp]
	mov	DWORD PTR _pGauge, ecx
	cmp	DWORD PTR _pGauge, 0
	ja	SHORT $LN6@Display_DA@2
; Line 500
	call	_SystemError
$LN6@Display_DA@2:
; Line 501
	push	0
	mov	ecx, DWORD PTR _pGauge
	call	?ShowDigital@Gauge@@QAEX_N@Z		; Gauge::ShowDigital
; Line 503
	push	284					; 0000011cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T18017[ebp], eax
	cmp	DWORD PTR $T18017[ebp], 0
	je	SHORT $LN16@Display_DA@2
	push	16777215				; 00ffffffH
	sub	esp, 36					; 00000024H
	mov	ecx, 9
	mov	esi, OFFSET _GUI_FontD48
	mov	edi, esp
	rep movsd
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	push	0
	push	70					; 00000046H
	push	140					; 0000008cH
	push	5
	push	50					; 00000032H
	mov	ecx, DWORD PTR $T18017[ebp]
	call	??0DigitalStringOutput@@QAE@HHHHW4DigitalOptions@@JUGUI_FONT@@K@Z ; DigitalStringOutput::DigitalStringOutput
	mov	DWORD PTR tv190[ebp], eax
	jmp	SHORT $LN17@Display_DA@2
$LN16@Display_DA@2:
	mov	DWORD PTR tv190[ebp], 0
$LN17@Display_DA@2:
	mov	ecx, DWORD PTR tv190[ebp]
	mov	DWORD PTR $T18016[ebp], ecx
	mov	edx, DWORD PTR $T18016[ebp]
	mov	DWORD PTR _pSpeed, edx
	cmp	DWORD PTR _pSpeed, 0
	ja	SHORT $LN5@Display_DA@2
; Line 504
	call	_SystemError
$LN5@Display_DA@2:
; Line 506
	push	284					; 0000011cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T18021[ebp], eax
	cmp	DWORD PTR $T18021[ebp], 0
	je	SHORT $LN18@Display_DA@2
	push	16777215				; 00ffffffH
	sub	esp, 36					; 00000024H
	mov	ecx, 9
	mov	esi, OFFSET _GUI_FontD48
	mov	edi, esp
	rep movsd
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	push	0
	push	50					; 00000032H
	push	209					; 000000d1H
	push	160					; 000000a0H
	push	0
	mov	ecx, DWORD PTR $T18021[ebp]
	call	??0DigitalStringOutput@@QAE@HHHHW4DigitalOptions@@JUGUI_FONT@@K@Z ; DigitalStringOutput::DigitalStringOutput
	mov	DWORD PTR tv206[ebp], eax
	jmp	SHORT $LN19@Display_DA@2
$LN18@Display_DA@2:
	mov	DWORD PTR tv206[ebp], 0
$LN19@Display_DA@2:
	mov	ecx, DWORD PTR tv206[ebp]
	mov	DWORD PTR $T18020[ebp], ecx
	mov	edx, DWORD PTR $T18020[ebp]
	mov	DWORD PTR _pLapTimer, edx
	cmp	DWORD PTR _pLapTimer, 0
	ja	SHORT $LN4@Display_DA@2
; Line 507
	call	_SystemError
$LN4@Display_DA@2:
; Line 509
	fld	QWORD PTR _trackData+40
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@Display_DA@2
	cmp	DWORD PTR _selectedRaceMode, 4
	jne	$LN1@Display_DA@2
$LN2@Display_DA@2:
; Line 511
	push	52					; 00000034H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T18025[ebp], eax
	cmp	DWORD PTR $T18025[ebp], 0
	je	SHORT $LN20@Display_DA@2
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	call	_GetPredictiveScale
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	call	_GetPredictiveScale
	push	ecx
	fstp	DWORD PTR [esp]
	movsx	ecx, WORD PTR _AnalogPredictiveLapRect+6
	movsx	edx, WORD PTR _AnalogPredictiveLapRect+2
	sub	ecx, edx
	push	ecx
	movsx	eax, WORD PTR _AnalogPredictiveLapRect+4
	movsx	ecx, WORD PTR _AnalogPredictiveLapRect
	sub	eax, ecx
	push	eax
	movsx	edx, WORD PTR _AnalogPredictiveLapRect+2
	push	edx
	movsx	eax, WORD PTR _AnalogPredictiveLapRect
	push	eax
	mov	ecx, DWORD PTR $T18025[ebp]
	call	??0PredictiveLapTimer@@QAE@HHHHMMJ@Z	; PredictiveLapTimer::PredictiveLapTimer
	mov	DWORD PTR tv234[ebp], eax
	jmp	SHORT $LN21@Display_DA@2
$LN20@Display_DA@2:
	mov	DWORD PTR tv234[ebp], 0
$LN21@Display_DA@2:
	mov	ecx, DWORD PTR tv234[ebp]
	mov	DWORD PTR $T18024[ebp], ecx
	mov	edx, DWORD PTR $T18024[ebp]
	mov	DWORD PTR _pPredictiveLap, edx
	cmp	DWORD PTR _pPredictiveLap, 0
	ja	SHORT $LN1@Display_DA@2
; Line 512
	call	_SystemError
$LN1@Display_DA@2:
; Line 514
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 516
	push	0
	push	25					; 00000019H
	push	0
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	call	_WM_CreateTimer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hScreenTimer, eax
; Line 518
	mov	eax, DWORD PTR _hDAXGaugeScreen
; Line 519
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 344				; 00000158H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Display_DAXGaugeScreen ENDP
_TEXT	ENDS
PUBLIC	?SetColor@DigitalStringOutput@@QAEXK@Z		; DigitalStringOutput::SetColor
PUBLIC	__real@3fe0000000000000
PUBLIC	__$ArrayPad$
PUBLIC	?DAXDigitalCallback@@YAXPAUWM_MESSAGE@@@Z	; DAXDigitalCallback
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?DAXDigitalCallback@@YAXPAUWM_MESSAGE@@@Z
_TEXT	SEGMENT
tv242 = -500						; size = 4
tv234 = -500						; size = 4
tv228 = -500						; size = 4
tv222 = -500						; size = 4
tv216 = -500						; size = 4
tv168 = -500						; size = 4
tv81 = -500						; size = 4
tv75 = -500						; size = 4
tv64 = -500						; size = 4
$T18035 = -492						; size = 4
$T18036 = -480						; size = 4
$T18039 = -468						; size = 4
$T18040 = -456						; size = 4
$T18043 = -444						; size = 8
$T18044 = -428						; size = 8
$T18045 = -412						; size = 8
$T18046 = -396						; size = 8
$T18049 = -380						; size = 8
$T18050 = -364						; size = 4
$T18051 = -352						; size = 4
$T18054 = -340						; size = 4
$T18055 = -328						; size = 4
$T18058 = -316						; size = 4
$T18059 = -304						; size = 4
$T18062 = -292						; size = 4
$T18063 = -280						; size = 4
$T18066 = -268						; size = 4
$T18067 = -256						; size = 4
_ftemp$17768 = -52					; size = 4
_gap$17767 = -40					; size = 4
_scratch$17766 = -28					; size = 20
__$ArrayPad$ = -4					; size = 4
_pMsg$ = 8						; size = 4
?DAXDigitalCallback@@YAXPAUWM_MESSAGE@@@Z PROC		; DAXDigitalCallback, COMDAT
; Line 523
	push	ebp
	mov	ebp, esp
	sub	esp, 500				; 000001f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-500]
	mov	ecx, 125				; 0000007dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 524
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 11			; 0000000bH
	je	$LN8@DAXDigital
	cmp	DWORD PTR tv64[ebp], 15			; 0000000fH
	je	$LN25@DAXDigital
	cmp	DWORD PTR tv64[ebp], 275		; 00000113H
	je	SHORT $LN31@DAXDigital
	jmp	$LN1@DAXDigital
$LN31@DAXDigital:
; Line 527
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _hScreenTimer
	jne	$LN30@DAXDigital
; Line 530
	cmp	DWORD PTR _unsavedSysData+136, 20	; 00000014H
	je	SHORT $LN28@DAXDigital
	cmp	DWORD PTR _unsavedSysData+136, 21	; 00000015H
	jne	$LN26@DAXDigital
$LN28@DAXDigital:
; Line 532
	cmp	DWORD PTR _pPredictiveLap, 0
	je	SHORT $LN27@DAXDigital
; Line 534
	mov	eax, DWORD PTR _pPredictiveLap
	mov	DWORD PTR $T18036[ebp], eax
	mov	ecx, DWORD PTR $T18036[ebp]
	mov	DWORD PTR $T18035[ebp], ecx
	cmp	DWORD PTR $T18035[ebp], 0
	je	SHORT $LN36@DAXDigital
	push	1
	mov	ecx, DWORD PTR $T18035[ebp]
	call	??_GPredictiveLapTimer@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN37@DAXDigital
$LN36@DAXDigital:
	mov	DWORD PTR tv75[ebp], 0
$LN37@DAXDigital:
; Line 535
	mov	DWORD PTR _pPredictiveLap, 0
$LN27@DAXDigital:
; Line 537
	cmp	DWORD PTR _pGap, 0
	je	SHORT $LN26@DAXDigital
; Line 539
	mov	eax, DWORD PTR _pGap
	mov	DWORD PTR $T18040[ebp], eax
	mov	ecx, DWORD PTR $T18040[ebp]
	mov	DWORD PTR $T18039[ebp], ecx
	cmp	DWORD PTR $T18039[ebp], 0
	je	SHORT $LN38@DAXDigital
	push	1
	mov	ecx, DWORD PTR $T18039[ebp]
	call	??_GDigitalStringOutput@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN39@DAXDigital
$LN38@DAXDigital:
	mov	DWORD PTR tv81[ebp], 0
$LN39@DAXDigital:
; Line 540
	mov	DWORD PTR _pGap, 0
$LN26@DAXDigital:
; Line 543
	push	25					; 00000019H
	mov	eax, DWORD PTR _hScreenTimer
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
; Line 544
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN30@DAXDigital:
; Line 546
	jmp	$LN32@DAXDigital
$LN25@DAXDigital:
; Line 549
	push	0
	call	_CS_IsVisible
	add	esp, 4
	test	eax, eax
	je	$LN24@DAXDigital
; Line 554
	movzx	eax, BYTE PTR _lockupSemaphore
	test	eax, eax
	je	SHORT $LN23@DAXDigital
; Line 555
	jmp	$LN32@DAXDigital
	jmp	SHORT $LN22@DAXDigital
$LN23@DAXDigital:
; Line 556
	mov	BYTE PTR _lockupSemaphore, 1
$LN22@DAXDigital:
; Line 558
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_Select
	add	esp, 4
; Line 559
	call	_GUI_Clear
; Line 562
	push	0
	push	0
	push	OFFSET _bmDarkAsphalt
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 565
	push	2
	call	_GUI_SetTextMode
	add	esp, 4
; Line 568
	cmp	DWORD PTR _selectedRaceMode, 4
	jne	SHORT $LN21@DAXDigital
; Line 569
	push	26					; 0000001aH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T18043[ebp], eax
	mov	DWORD PTR $T18043[ebp+4], edx
	fld	DWORD PTR $T18043[ebp]
	fstp	DWORD PTR _ftemp$17768[ebp]
	jmp	SHORT $LN20@DAXDigital
$LN21@DAXDigital:
; Line 570
	push	14					; 0000000eH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T18044[ebp], eax
	mov	DWORD PTR $T18044[ebp+4], edx
	fld	DWORD PTR $T18044[ebp]
	fstp	DWORD PTR _ftemp$17768[ebp]
$LN20@DAXDigital:
; Line 571
	fld	DWORD PTR _ftemp$17768[ebp]
	call	__ftol2_sse
	push	eax
	push	OFFSET $SG17776
	lea	eax, DWORD PTR _scratch$17766[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 572
	lea	eax, DWORD PTR _scratch$17766[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSpeed
	call	?SetValue@DigitalStringOutput@@QAEXPAD@Z ; DigitalStringOutput::SetValue
; Line 573
	mov	ecx, DWORD PTR _pSpeed
	call	?DrawControl@DigitalStringOutput@@QAEXXZ ; DigitalStringOutput::DrawControl
; Line 576
	cmp	DWORD PTR _pPredictiveLap, 0
	je	SHORT $LN19@DAXDigital
; Line 580
	push	31					; 0000001fH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T18045[ebp], eax
	mov	DWORD PTR $T18045[ebp+4], edx
	fld	DWORD PTR $T18045[ebp]
	fstp	DWORD PTR _gap$17767[ebp]
	push	ecx
	fld	DWORD PTR _gap$17767[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _pPredictiveLap
	push	eax
	call	?UpdatePredictiveLapControl@@YAXPAVPredictiveLapTimer@@M@Z ; UpdatePredictiveLapControl
	add	esp, 8
$LN19@DAXDigital:
; Line 584
	push	32					; 00000020H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T18046[ebp], eax
	mov	DWORD PTR $T18046[ebp+4], edx
	push	0
	mov	eax, DWORD PTR $T18046[ebp]
	push	eax
	call	_formatLapTime
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _pLapTime
	call	?SetValue@DigitalStringOutput@@QAEXPAD@Z ; DigitalStringOutput::SetValue
; Line 585
	mov	ecx, DWORD PTR _pLapTime
	call	?DrawControl@DigitalStringOutput@@QAEXXZ ; DigitalStringOutput::DrawControl
; Line 588
	push	8421504					; 00808080H
	call	_GUI_SetColor
	add	esp, 4
; Line 589
	push	OFFSET _GUI_Font24B_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 591
	cmp	DWORD PTR _sysData+100, 1
	jne	SHORT $LN18@DAXDigital
; Line 592
	push	48					; 00000030H
	push	205					; 000000cdH
	push	OFFSET $SG17781
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN17@DAXDigital
$LN18@DAXDigital:
; Line 593
	push	48					; 00000030H
	push	215					; 000000d7H
	push	OFFSET $SG17783
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
$LN17@DAXDigital:
; Line 595
	cmp	DWORD PTR _pGap, 0
	je	SHORT $LN16@DAXDigital
; Line 596
	push	48					; 00000030H
	push	410					; 0000019aH
	push	OFFSET $SG17785
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
$LN16@DAXDigital:
; Line 599
	cmp	DWORD PTR _sysData+100, 0
	jne	SHORT $LN40@DAXDigital
	mov	DWORD PTR tv168[ebp], OFFSET $SG17786
	jmp	SHORT $LN41@DAXDigital
$LN40@DAXDigital:
	mov	DWORD PTR tv168[ebp], OFFSET $SG17787
$LN41@DAXDigital:
	push	48					; 00000030H
	push	50					; 00000032H
	mov	eax, DWORD PTR tv168[ebp]
	push	eax
	call	_GUI_DispStringAt
	add	esp, 12					; 0000000cH
; Line 601
	cmp	DWORD PTR _pPredictiveLap, 0
	jne	SHORT $LN12@DAXDigital
; Line 603
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 604
	push	OFFSET _DigitalPredictiveLapRect
	call	_GUI_DrawRectEx
	add	esp, 4
; Line 605
	cmp	DWORD PTR _unsavedSysData+136, 20	; 00000014H
	je	SHORT $LN13@DAXDigital
	cmp	DWORD PTR _unsavedSysData+136, 21	; 00000015H
	jne	SHORT $LN14@DAXDigital
$LN13@DAXDigital:
; Line 607
	push	14					; 0000000eH
	push	OFFSET _DigitalPredictiveLapRect
	push	OFFSET $SG17792
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN12@DAXDigital
$LN14@DAXDigital:
; Line 609
	push	14					; 0000000eH
	push	OFFSET _DigitalPredictiveLapRect
	push	OFFSET $SG17795
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
$LN12@DAXDigital:
; Line 613
	push	29					; 0000001dH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T18049[ebp], eax
	mov	DWORD PTR $T18049[ebp+4], edx
	fld	DWORD PTR $T18049[ebp]
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	push	eax
	push	OFFSET $SG17798
	lea	eax, DWORD PTR _scratch$17766[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 614
	lea	eax, DWORD PTR _scratch$17766[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDistance
	call	?SetValue@DigitalStringOutput@@QAEXPAD@Z ; DigitalStringOutput::SetValue
; Line 615
	mov	ecx, DWORD PTR _pDistance
	call	?DrawControl@DigitalStringOutput@@QAEXXZ ; DigitalStringOutput::DrawControl
; Line 617
	cmp	DWORD PTR _pGap, 0
	je	SHORT $LN11@DAXDigital
; Line 620
	fld	DWORD PTR _gap$17767[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN10@DAXDigital
; Line 621
	push	65280					; 0000ff00H
	mov	ecx, DWORD PTR _pGap
	call	?SetColor@DigitalStringOutput@@QAEXK@Z	; DigitalStringOutput::SetColor
	jmp	SHORT $LN9@DAXDigital
$LN10@DAXDigital:
; Line 622
	push	255					; 000000ffH
	mov	ecx, DWORD PTR _pGap
	call	?SetColor@DigitalStringOutput@@QAEXK@Z	; DigitalStringOutput::SetColor
$LN9@DAXDigital:
; Line 623
	fld	DWORD PTR _gap$17767[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG17802
	lea	eax, DWORD PTR _scratch$17766[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 624
	lea	eax, DWORD PTR _scratch$17766[ebp]
	push	eax
	mov	ecx, DWORD PTR _pGap
	call	?SetValue@DigitalStringOutput@@QAEXPAD@Z ; DigitalStringOutput::SetValue
; Line 625
	mov	ecx, DWORD PTR _pGap
	call	?DrawControl@DigitalStringOutput@@QAEXXZ ; DigitalStringOutput::DrawControl
$LN11@DAXDigital:
; Line 628
	push	229					; 000000e5H
	push	0
	push	OFFSET _bmleftarrow
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 629
	call	_CheckWarningPopups
; Line 631
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_CopyToLCD
	add	esp, 4
; Line 632
	call	_GUI_SelectLCD
$LN24@DAXDigital:
; Line 634
	jmp	$LN32@DAXDigital
$LN8@DAXDigital:
; Line 637
	cmp	DWORD PTR _pPredictiveLap, 0
	je	SHORT $LN7@DAXDigital
; Line 639
	mov	eax, DWORD PTR _pPredictiveLap
	mov	DWORD PTR $T18051[ebp], eax
	mov	ecx, DWORD PTR $T18051[ebp]
	mov	DWORD PTR $T18050[ebp], ecx
	cmp	DWORD PTR $T18050[ebp], 0
	je	SHORT $LN42@DAXDigital
	push	1
	mov	ecx, DWORD PTR $T18050[ebp]
	call	??_GPredictiveLapTimer@@QAEPAXI@Z
	mov	DWORD PTR tv216[ebp], eax
	jmp	SHORT $LN43@DAXDigital
$LN42@DAXDigital:
	mov	DWORD PTR tv216[ebp], 0
$LN43@DAXDigital:
; Line 640
	mov	DWORD PTR _pPredictiveLap, 0
$LN7@DAXDigital:
; Line 642
	cmp	DWORD PTR _pDistance, 0
	je	SHORT $LN6@DAXDigital
; Line 644
	mov	eax, DWORD PTR _pDistance
	mov	DWORD PTR $T18055[ebp], eax
	mov	ecx, DWORD PTR $T18055[ebp]
	mov	DWORD PTR $T18054[ebp], ecx
	cmp	DWORD PTR $T18054[ebp], 0
	je	SHORT $LN44@DAXDigital
	push	1
	mov	ecx, DWORD PTR $T18054[ebp]
	call	??_GDigitalStringOutput@@QAEPAXI@Z
	mov	DWORD PTR tv222[ebp], eax
	jmp	SHORT $LN45@DAXDigital
$LN44@DAXDigital:
	mov	DWORD PTR tv222[ebp], 0
$LN45@DAXDigital:
; Line 645
	mov	DWORD PTR _pDistance, 0
$LN6@DAXDigital:
; Line 647
	cmp	DWORD PTR _pLapTime, 0
	je	SHORT $LN5@DAXDigital
; Line 649
	mov	eax, DWORD PTR _pLapTime
	mov	DWORD PTR $T18059[ebp], eax
	mov	ecx, DWORD PTR $T18059[ebp]
	mov	DWORD PTR $T18058[ebp], ecx
	cmp	DWORD PTR $T18058[ebp], 0
	je	SHORT $LN46@DAXDigital
	push	1
	mov	ecx, DWORD PTR $T18058[ebp]
	call	??_GDigitalStringOutput@@QAEPAXI@Z
	mov	DWORD PTR tv228[ebp], eax
	jmp	SHORT $LN47@DAXDigital
$LN46@DAXDigital:
	mov	DWORD PTR tv228[ebp], 0
$LN47@DAXDigital:
; Line 650
	mov	DWORD PTR _pLapTime, 0
$LN5@DAXDigital:
; Line 652
	cmp	DWORD PTR _pGap, 0
	je	SHORT $LN4@DAXDigital
; Line 654
	mov	eax, DWORD PTR _pGap
	mov	DWORD PTR $T18063[ebp], eax
	mov	ecx, DWORD PTR $T18063[ebp]
	mov	DWORD PTR $T18062[ebp], ecx
	cmp	DWORD PTR $T18062[ebp], 0
	je	SHORT $LN48@DAXDigital
	push	1
	mov	ecx, DWORD PTR $T18062[ebp]
	call	??_GDigitalStringOutput@@QAEPAXI@Z
	mov	DWORD PTR tv234[ebp], eax
	jmp	SHORT $LN49@DAXDigital
$LN48@DAXDigital:
	mov	DWORD PTR tv234[ebp], 0
$LN49@DAXDigital:
; Line 655
	mov	DWORD PTR _pGap, 0
$LN4@DAXDigital:
; Line 657
	cmp	DWORD PTR _mem, 0
	je	SHORT $LN3@DAXDigital
; Line 659
	mov	eax, DWORD PTR _mem
	push	eax
	call	_GUI_MEMDEV_Delete
	add	esp, 4
; Line 660
	mov	DWORD PTR _mem, 0
$LN3@DAXDigital:
; Line 662
	cmp	DWORD PTR _pSpeed, 0
	je	SHORT $LN2@DAXDigital
; Line 664
	mov	eax, DWORD PTR _pSpeed
	mov	DWORD PTR $T18067[ebp], eax
	mov	ecx, DWORD PTR $T18067[ebp]
	mov	DWORD PTR $T18066[ebp], ecx
	cmp	DWORD PTR $T18066[ebp], 0
	je	SHORT $LN50@DAXDigital
	push	1
	mov	ecx, DWORD PTR $T18066[ebp]
	call	??_GDigitalStringOutput@@QAEPAXI@Z
	mov	DWORD PTR tv242[ebp], eax
	jmp	SHORT $LN51@DAXDigital
$LN50@DAXDigital:
	mov	DWORD PTR tv242[ebp], 0
$LN51@DAXDigital:
; Line 665
	mov	DWORD PTR _pSpeed, 0
$LN2@DAXDigital:
; Line 667
	jmp	SHORT $LN32@DAXDigital
$LN1@DAXDigital:
; Line 670
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN32@DAXDigital:
; Line 672
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN54@DAXDigital
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 500				; 000001f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN54@DAXDigital:
	DD	1
	DD	$LN53@DAXDigital
$LN53@DAXDigital:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN52@DAXDigital
$LN52@DAXDigital:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
?DAXDigitalCallback@@YAXPAUWM_MESSAGE@@@Z ENDP		; DAXDigitalCallback
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?SetColor@DigitalStringOutput@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_col$ = 8						; size = 4
?SetColor@DigitalStringOutput@@QAEXK@Z PROC		; DigitalStringOutput::SetColor, COMDAT
; _this$ = ecx
; File c:\duii\duii\digitalstringoutput.hpp
; Line 30
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax+272], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetColor@DigitalStringOutput@@QAEXK@Z ENDP		; DigitalStringOutput::SetColor
_TEXT	ENDS
PUBLIC	_Display_DAXDigitalGaugeScreen
EXTRN	_GUI_FontD80:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _Display_DAXDigitalGaugeScreen
_TEXT	SEGMENT
tv201 = -316						; size = 4
tv185 = -316						; size = 4
tv169 = -316						; size = 4
tv153 = -316						; size = 4
tv137 = -316						; size = 4
$T18079 = -308						; size = 4
$T18080 = -296						; size = 4
$T18083 = -284						; size = 4
$T18084 = -272						; size = 4
$T18087 = -260						; size = 4
$T18088 = -248						; size = 4
$T18091 = -236						; size = 4
$T18092 = -224						; size = 4
$T18095 = -212						; size = 4
$T18096 = -200						; size = 4
_Display_DAXDigitalGaugeScreen PROC			; COMDAT
; File c:\duii\duii\dragautoxscreens.cpp
; Line 675
	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 677
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	call	_GUI_MEMDEV_Create
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mem, eax
; Line 679
	push	0
	push	OFFSET ?DAXDigitalCallback@@YAXPAUWM_MESSAGE@@@Z ; DAXDigitalCallback
	push	2
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	call	_WM_CreateWindow
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _hDAXGaugeScreen, eax
	cmp	DWORD PTR _hDAXGaugeScreen, 0
	jg	SHORT $LN8@Display_DA@3
; Line 680
	call	_SystemError
$LN8@Display_DA@3:
; Line 682
	fld	QWORD PTR _trackData+40
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@Display_DA@3
	cmp	DWORD PTR _selectedRaceMode, 4
	jne	$LN4@Display_DA@3
$LN6@Display_DA@3:
; Line 685
	push	52					; 00000034H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T18080[ebp], eax
	cmp	DWORD PTR $T18080[ebp], 0
	je	SHORT $LN11@Display_DA@3
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	call	_GetPredictiveScale
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	call	_GetPredictiveScale
	push	ecx
	fstp	DWORD PTR [esp]
	movsx	ecx, WORD PTR _DigitalPredictiveLapRect+6
	movsx	edx, WORD PTR _DigitalPredictiveLapRect+2
	sub	ecx, edx
	push	ecx
	movsx	eax, WORD PTR _DigitalPredictiveLapRect+4
	movsx	ecx, WORD PTR _DigitalPredictiveLapRect
	sub	eax, ecx
	push	eax
	movsx	edx, WORD PTR _DigitalPredictiveLapRect+2
	push	edx
	movsx	eax, WORD PTR _DigitalPredictiveLapRect
	push	eax
	mov	ecx, DWORD PTR $T18080[ebp]
	call	??0PredictiveLapTimer@@QAE@HHHHMMJ@Z	; PredictiveLapTimer::PredictiveLapTimer
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN12@Display_DA@3
$LN11@Display_DA@3:
	mov	DWORD PTR tv137[ebp], 0
$LN12@Display_DA@3:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR $T18079[ebp], ecx
	mov	edx, DWORD PTR $T18079[ebp]
	mov	DWORD PTR _pPredictiveLap, edx
	cmp	DWORD PTR _pPredictiveLap, 0
	ja	SHORT $LN5@Display_DA@3
; Line 686
	call	_SystemError
$LN5@Display_DA@3:
; Line 688
	push	284					; 0000011cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T18084[ebp], eax
	cmp	DWORD PTR $T18084[ebp], 0
	je	SHORT $LN13@Display_DA@3
	push	65280					; 0000ff00H
	sub	esp, 36					; 00000024H
	mov	ecx, 9
	mov	esi, OFFSET _GUI_FontD32
	mov	edi, esp
	rep movsd
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	push	0
	push	40					; 00000028H
	push	170					; 000000aaH
	push	10					; 0000000aH
	push	300					; 0000012cH
	mov	ecx, DWORD PTR $T18084[ebp]
	call	??0DigitalStringOutput@@QAE@HHHHW4DigitalOptions@@JUGUI_FONT@@K@Z ; DigitalStringOutput::DigitalStringOutput
	mov	DWORD PTR tv153[ebp], eax
	jmp	SHORT $LN14@Display_DA@3
$LN13@Display_DA@3:
	mov	DWORD PTR tv153[ebp], 0
$LN14@Display_DA@3:
	mov	ecx, DWORD PTR tv153[ebp]
	mov	DWORD PTR $T18083[ebp], ecx
	mov	edx, DWORD PTR $T18083[ebp]
	mov	DWORD PTR _pGap, edx
	cmp	DWORD PTR _pGap, 0
	ja	SHORT $LN4@Display_DA@3
; Line 689
	call	_SystemError
$LN4@Display_DA@3:
; Line 692
	push	284					; 0000011cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T18088[ebp], eax
	cmp	DWORD PTR $T18088[ebp], 0
	je	SHORT $LN15@Display_DA@3
	push	16777215				; 00ffffffH
	sub	esp, 36					; 00000024H
	mov	ecx, 9
	mov	esi, OFFSET _GUI_FontD32
	mov	edi, esp
	rep movsd
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	push	0
	push	40					; 00000028H
	push	120					; 00000078H
	push	10					; 0000000aH
	push	0
	mov	ecx, DWORD PTR $T18088[ebp]
	call	??0DigitalStringOutput@@QAE@HHHHW4DigitalOptions@@JUGUI_FONT@@K@Z ; DigitalStringOutput::DigitalStringOutput
	mov	DWORD PTR tv169[ebp], eax
	jmp	SHORT $LN16@Display_DA@3
$LN15@Display_DA@3:
	mov	DWORD PTR tv169[ebp], 0
$LN16@Display_DA@3:
	mov	ecx, DWORD PTR tv169[ebp]
	mov	DWORD PTR $T18087[ebp], ecx
	mov	edx, DWORD PTR $T18087[ebp]
	mov	DWORD PTR _pSpeed, edx
	cmp	DWORD PTR _pSpeed, 0
	ja	SHORT $LN3@Display_DA@3
; Line 693
	call	_SystemError
$LN3@Display_DA@3:
; Line 695
	push	284					; 0000011cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T18092[ebp], eax
	cmp	DWORD PTR $T18092[ebp], 0
	je	SHORT $LN17@Display_DA@3
	push	16777215				; 00ffffffH
	sub	esp, 36					; 00000024H
	mov	ecx, 9
	mov	esi, OFFSET _GUI_FontD32
	mov	edi, esp
	rep movsd
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	push	0
	push	40					; 00000028H
	push	120					; 00000078H
	push	10					; 0000000aH
	push	155					; 0000009bH
	mov	ecx, DWORD PTR $T18092[ebp]
	call	??0DigitalStringOutput@@QAE@HHHHW4DigitalOptions@@JUGUI_FONT@@K@Z ; DigitalStringOutput::DigitalStringOutput
	mov	DWORD PTR tv185[ebp], eax
	jmp	SHORT $LN18@Display_DA@3
$LN17@Display_DA@3:
	mov	DWORD PTR tv185[ebp], 0
$LN18@Display_DA@3:
	mov	ecx, DWORD PTR tv185[ebp]
	mov	DWORD PTR $T18091[ebp], ecx
	mov	edx, DWORD PTR $T18091[ebp]
	mov	DWORD PTR _pDistance, edx
	cmp	DWORD PTR _pDistance, 0
	ja	SHORT $LN2@Display_DA@3
; Line 696
	call	_SystemError
$LN2@Display_DA@3:
; Line 698
	push	284					; 0000011cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T18096[ebp], eax
	cmp	DWORD PTR $T18096[ebp], 0
	je	SHORT $LN19@Display_DA@3
	push	16777215				; 00ffffffH
	sub	esp, 36					; 00000024H
	mov	ecx, 9
	mov	esi, OFFSET _GUI_FontD80
	mov	edi, esp
	rep movsd
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	push	0
	push	90					; 0000005aH
	push	310					; 00000136H
	push	110					; 0000006eH
	push	90					; 0000005aH
	mov	ecx, DWORD PTR $T18096[ebp]
	call	??0DigitalStringOutput@@QAE@HHHHW4DigitalOptions@@JUGUI_FONT@@K@Z ; DigitalStringOutput::DigitalStringOutput
	mov	DWORD PTR tv201[ebp], eax
	jmp	SHORT $LN20@Display_DA@3
$LN19@Display_DA@3:
	mov	DWORD PTR tv201[ebp], 0
$LN20@Display_DA@3:
	mov	ecx, DWORD PTR tv201[ebp]
	mov	DWORD PTR $T18095[ebp], ecx
	mov	edx, DWORD PTR $T18095[ebp]
	mov	DWORD PTR _pLapTime, edx
	cmp	DWORD PTR _pLapTime, 0
	ja	SHORT $LN1@Display_DA@3
; Line 699
	call	_SystemError
$LN1@Display_DA@3:
; Line 701
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 703
	push	0
	push	25					; 00000019H
	push	0
	mov	eax, DWORD PTR _hDAXGaugeScreen
	push	eax
	call	_WM_CreateTimer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hScreenTimer, eax
; Line 705
	mov	eax, DWORD PTR _hDAXGaugeScreen
; Line 706
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Display_DAXDigitalGaugeScreen ENDP
_TEXT	ENDS
END
