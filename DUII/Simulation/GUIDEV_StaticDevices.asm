; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\MemDev\GUIDEV_StaticDevices.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
__FillByte DB	0ffH
	ORG $+3
$SG10364 DB	'Not enough memory to create static memory device!', 00H
_DATA	ENDS
PUBLIC	_GUI_MEMDEV_Paint1Static
EXTRN	_GUI_MEMDEV_Write:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\memdev\guidev_staticdevices.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_MEMDEV_Paint1Static
_TEXT	SEGMENT
_hMem$ = -8						; size = 4
_hWin$ = 8						; size = 4
_pWin$ = 12						; size = 4
_GUI_MEMDEV_Paint1Static PROC				; COMDAT
; Line 392
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 398
	mov	eax, DWORD PTR _pWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	__CreateStaticDevice
	add	esp, 8
	mov	DWORD PTR _hMem$[ebp], eax
; Line 402
	cmp	DWORD PTR _hMem$[ebp], 0
	je	SHORT $LN2@GUI_MEMDEV
; Line 403
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_MEMDEV_Write
	add	esp, 4
$LN2@GUI_MEMDEV:
; Line 405
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV_Paint1Static ENDP
_TEXT	ENDS
EXTRN	_GUI__memset:PROC
EXTRN	_GUI_MEMDEV_GetDataPtr:PROC
EXTRN	_GUI__AlphaSuppressMixing:PROC
EXTRN	_GUI_MEMDEV_Select:PROC
EXTRN	_WM__Paint1:PROC
EXTRN	_GUI_ErrorOut:PROC
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	_GUI_MEMDEV__CreateFixed:PROC
EXTRN	_GUI_MEMDEV_DEVICE_32:BYTE
EXTRN	_LCD_API_ColorConv_8888:BYTE
EXTRN	_WM_SetSize:PROC
EXTRN	_LCD_GetVYSize:PROC
EXTRN	_LCD_GetVXSize:PROC
EXTRN	_WM_GetDesktopWindow:PROC
EXTRN	_GUI_MEMDEV_SetOrg:PROC
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_GUI_ALLOC_LockH:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __CreateStaticDevice
_TEXT	SEGMENT
_hDesktop$ = -176					; size = 4
_ySizeMax$ = -164					; size = 4
_xSizeMax$ = -152					; size = 4
_yPosMem$ = -140					; size = 4
_xPosMem$ = -128					; size = 4
_ySizeReq$ = -116					; size = 4
_xSizeReq$ = -104					; size = 4
_y1$ = -92						; size = 4
_x1$ = -80						; size = 4
_y0$ = -68						; size = 4
_x0$ = -56						; size = 4
_hMemOld$ = -44						; size = 4
_hMem$ = -32						; size = 4
_pDev$ = -20						; size = 4
_pMem$ = -8						; size = 4
_hWin$ = 8						; size = 4
_pWin$ = 12						; size = 4
__CreateStaticDevice PROC				; COMDAT
; Line 178
	push	ebp
	mov	ebp, esp
	sub	esp, 372				; 00000174H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-372]
	mov	ecx, 93					; 0000005dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 188
	mov	eax, DWORD PTR _pWin$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	DWORD PTR _x0$[ebp], ecx
; Line 189
	mov	eax, DWORD PTR _pWin$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _y0$[ebp], ecx
; Line 190
	mov	eax, DWORD PTR _pWin$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	DWORD PTR _x1$[ebp], ecx
; Line 191
	mov	eax, DWORD PTR _pWin$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR _y1$[ebp], ecx
; Line 192
	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _x0$[ebp]
	add	eax, 1
	mov	DWORD PTR _xSizeReq$[ebp], eax
; Line 193
	mov	eax, DWORD PTR _y1$[ebp]
	sub	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _ySizeReq$[ebp], eax
; Line 197
	cmp	DWORD PTR _xSizeReq$[ebp], 0
	jle	SHORT $LN12@CreateStat
	cmp	DWORD PTR _ySizeReq$[ebp], 0
	jg	SHORT $LN13@CreateStat
$LN12@CreateStat:
; Line 198
	xor	eax, eax
	jmp	$LN14@CreateStat
$LN13@CreateStat:
; Line 203
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _hMem$[ebp], ecx
; Line 204
	cmp	DWORD PTR _hMem$[ebp], 0
	je	SHORT $LN11@CreateStat
; Line 205
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 206
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	DWORD PTR _xPosMem$[ebp], ecx
; Line 207
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR _yPosMem$[ebp], ecx
; Line 208
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pDev$[ebp], 0
; Line 209
	mov	eax, DWORD PTR _xPosMem$[ebp]
	cmp	eax, DWORD PTR _x0$[ebp]
	jne	SHORT $LN9@CreateStat
	mov	eax, DWORD PTR _yPosMem$[ebp]
	cmp	eax, DWORD PTR _y0$[ebp]
	je	SHORT $LN11@CreateStat
$LN9@CreateStat:
; Line 210
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hMem$[ebp]
	push	edx
	call	_GUI_MEMDEV_SetOrg
	add	esp, 12					; 0000000cH
$LN11@CreateStat:
; Line 216
	cmp	DWORD PTR _hMem$[ebp], 0
	jne	$LN8@CreateStat
; Line 225
	call	_WM_GetDesktopWindow
	mov	DWORD PTR _hDesktop$[ebp], eax
; Line 226
	mov	eax, DWORD PTR _hWin$[ebp]
	cmp	eax, DWORD PTR _hDesktop$[ebp]
	jne	SHORT $LN7@CreateStat
; Line 227
	call	_LCD_GetVXSize
	mov	DWORD PTR _xSizeMax$[ebp], eax
; Line 228
	call	_LCD_GetVYSize
	mov	DWORD PTR _ySizeMax$[ebp], eax
; Line 229
	mov	eax, DWORD PTR _xSizeReq$[ebp]
	cmp	eax, DWORD PTR _xSizeMax$[ebp]
	jg	SHORT $LN5@CreateStat
	mov	eax, DWORD PTR _ySizeReq$[ebp]
	cmp	eax, DWORD PTR _ySizeMax$[ebp]
	jle	SHORT $LN7@CreateStat
$LN5@CreateStat:
; Line 230
	mov	eax, DWORD PTR _xSizeReq$[ebp]
	cmp	eax, DWORD PTR _xSizeMax$[ebp]
	jle	SHORT $LN4@CreateStat
; Line 231
	mov	eax, DWORD PTR _xSizeMax$[ebp]
	mov	DWORD PTR _xSizeReq$[ebp], eax
$LN4@CreateStat:
; Line 233
	mov	eax, DWORD PTR _ySizeReq$[ebp]
	cmp	eax, DWORD PTR _ySizeMax$[ebp]
	jle	SHORT $LN3@CreateStat
; Line 234
	mov	eax, DWORD PTR _ySizeMax$[ebp]
	mov	DWORD PTR _ySizeReq$[ebp], eax
$LN3@CreateStat:
; Line 236
	mov	eax, DWORD PTR _ySizeReq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSizeReq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWin$[ebp]
	push	edx
	call	_WM_SetSize
	add	esp, 12					; 0000000cH
$LN7@CreateStat:
; Line 242
	push	OFFSET _LCD_API_ColorConv_8888
	push	OFFSET _GUI_MEMDEV_DEVICE_32
	push	1
	mov	eax, DWORD PTR _ySizeReq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSizeReq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	call	_GUI_MEMDEV__CreateFixed
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _hMem$[ebp], eax
; Line 246
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 250
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR _hMem$[ebp]
	mov	DWORD PTR [eax+36], ecx
; Line 251
	cmp	DWORD PTR _hMem$[ebp], 0
	jne	SHORT $LN2@CreateStat
; Line 252
	push	OFFSET $SG10364
	call	_GUI_ErrorOut
	add	esp, 4
; Line 256
	mov	eax, DWORD PTR _pWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	_WM__Paint1
	add	esp, 8
; Line 261
	xor	eax, eax
	jmp	$LN14@CreateStat
; Line 262
	jmp	$LN8@CreateStat
$LN2@CreateStat:
; Line 266
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	or	ecx, 65536				; 00010000H
	mov	edx, DWORD PTR _pWin$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 270
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 271
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pDev$[ebp], 0
; Line 276
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_MEMDEV_Select
	add	esp, 4
	mov	DWORD PTR _hMemOld$[ebp], eax
; Line 277
	push	1
	call	_GUI__AlphaSuppressMixing
	add	esp, 4
; Line 281
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetDataPtr
	add	esp, 4
	mov	DWORD PTR _pMem$[ebp], eax
; Line 282
	mov	eax, DWORD PTR _xSizeReq$[ebp]
	imul	eax, DWORD PTR _ySizeReq$[ebp]
	shl	eax, 2
	push	eax
	movzx	ecx, BYTE PTR __FillByte
	push	ecx
	mov	edx, DWORD PTR _pMem$[ebp]
	push	edx
	call	_GUI__memset
	add	esp, 12					; 0000000cH
; Line 286
	mov	eax, DWORD PTR _pWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	_WM__Paint1
	add	esp, 8
; Line 290
	push	0
	call	_GUI__AlphaSuppressMixing
	add	esp, 4
; Line 291
	mov	eax, DWORD PTR _hMemOld$[ebp]
	push	eax
	call	_GUI_MEMDEV_Select
	add	esp, 4
$LN8@CreateStat:
; Line 294
	mov	eax, DWORD PTR _hMem$[ebp]
$LN14@CreateStat:
; Line 295
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 372				; 00000174H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__CreateStaticDevice ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEMDEV_CreateStatic
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEMDEV_CreateStatic
_TEXT	SEGMENT
_hWin$ = 8						; size = 4
_GUI_MEMDEV_CreateStatic PROC				; COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	BYTE PTR __FillByte, 255		; 000000ffH
; Line 413
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	__CreateStatic
	add	esp, 4
; Line 414
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV_CreateStatic ENDP
_TEXT	ENDS
EXTRN	_GUI_GotoXY:PROC
EXTRN	_WM_SelectWindow:PROC
EXTRN	_WM_SetDefault:PROC
EXTRN	_WM__ClipAtParentBorders:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __CreateStatic
_TEXT	SEGMENT
_Rect$ = -48						; size = 8
_pChild$ = -32						; size = 4
_pWin$ = -20						; size = 4
_hChild$ = -8						; size = 4
_hWin$ = 8						; size = 4
__CreateStatic PROC					; COMDAT
; Line 359
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 365
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 366
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 2
	je	$LN6@CreateStat@2
	mov	eax, DWORD PTR _pWin$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	$LN6@CreateStat@2
; Line 367
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _Rect$[ebp], ecx
	mov	DWORD PTR _Rect$[ebp+4], edx
; Line 368
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Rect$[ebp]
	push	ecx
	call	_WM__ClipAtParentBorders
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@CreateStat@2
; Line 369
	call	_WM_SetDefault
; Line 370
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_SelectWindow
	add	esp, 4
; Line 371
	push	0
	push	0
	call	_GUI_GotoXY
	add	esp, 8
; Line 372
	mov	eax, DWORD PTR _pWin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	__CreateStaticDevice
	add	esp, 8
; Line 373
	mov	BYTE PTR __FillByte, 255		; 000000ffH
; Line 374
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _hChild$[ebp], ecx
	jmp	SHORT $LN3@CreateStat@2
$LN2@CreateStat@2:
	mov	eax, DWORD PTR _pChild$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hChild$[ebp], ecx
$LN3@CreateStat@2:
	cmp	DWORD PTR _hChild$[ebp], 0
	je	SHORT $LN6@CreateStat@2
; Line 375
	mov	eax, DWORD PTR _hChild$[ebp]
	push	eax
	call	__CreateStatic
	add	esp, 4
; Line 376
	mov	eax, DWORD PTR _hChild$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pChild$[ebp], eax
; Line 377
	jmp	SHORT $LN2@CreateStat@2
$LN6@CreateStat@2:
; Line 380
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CreateStat@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@CreateStat@2:
	DD	1
	DD	$LN9@CreateStat@2
$LN9@CreateStat@2:
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN8@CreateStat@2
$LN8@CreateStat@2:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
__CreateStatic ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEMDEV_GetWindowDevice
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEMDEV_GetWindowDevice
_TEXT	SEGMENT
_hMem$ = -8						; size = 4
_hWin$ = 8						; size = 4
_GUI_MEMDEV_GetWindowDevice PROC			; COMDAT
; Line 420
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 423
	mov	DWORD PTR _hMem$[ebp], 0
; Line 424
	lea	eax, DWORD PTR _hMem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	__GetWindowDevice
	add	esp, 8
; Line 425
	mov	eax, DWORD PTR _hMem$[ebp]
; Line 426
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GUI_MEMDEV@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@GUI_MEMDEV@2:
	DD	1
	DD	$LN4@GUI_MEMDEV@2
$LN4@GUI_MEMDEV@2:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@GUI_MEMDEV@2
$LN3@GUI_MEMDEV@2:
	DB	104					; 00000068H
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
_GUI_MEMDEV_GetWindowDevice ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetWindowDevice
_TEXT	SEGMENT
_Rect$ = -48						; size = 8
_pChild$ = -32						; size = 4
_pWin$ = -20						; size = 4
_hChild$ = -8						; size = 4
_hWin$ = 8						; size = 4
_phMem$ = 12						; size = 4
__GetWindowDevice PROC					; COMDAT
; Line 336
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 342
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 343
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 2
	je	SHORT $LN6@GetWindowD
	mov	eax, DWORD PTR _pWin$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN6@GetWindowD
; Line 344
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _Rect$[ebp], ecx
	mov	DWORD PTR _Rect$[ebp+4], edx
; Line 345
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Rect$[ebp]
	push	ecx
	call	_WM__ClipAtParentBorders
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@GetWindowD
; Line 346
	mov	eax, DWORD PTR _phMem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	__AddContent
	add	esp, 8
; Line 347
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _hChild$[ebp], ecx
	jmp	SHORT $LN3@GetWindowD
$LN2@GetWindowD:
	mov	eax, DWORD PTR _pChild$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hChild$[ebp], ecx
$LN3@GetWindowD:
	cmp	DWORD PTR _hChild$[ebp], 0
	je	SHORT $LN6@GetWindowD
; Line 348
	mov	eax, DWORD PTR _phMem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hChild$[ebp]
	push	ecx
	call	__GetWindowDevice
	add	esp, 8
; Line 349
	mov	eax, DWORD PTR _hChild$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pChild$[ebp], eax
; Line 350
	jmp	SHORT $LN2@GetWindowD
$LN6@GetWindowD:
; Line 353
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@GetWindowD
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@GetWindowD:
	DD	1
	DD	$LN9@GetWindowD
$LN9@GetWindowD:
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN8@GetWindowD
$LN8@GetWindowD:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
__GetWindowDevice ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEMDEV_GetStaticDevice
EXTRN	_memcpy:PROC
EXTRN	_GUI_MEMDEV_CreateFixed:PROC
EXTRN	_WM_GetWindowRectEx:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __AddContent
_TEXT	SEGMENT
_pDst$ = -84						; size = 4
_pSrc$ = -72						; size = 4
_Rect$ = -60						; size = 8
_hMemSrc$ = -44						; size = 4
_hMemDst$ = -32						; size = 4
_ySize$ = -20						; size = 4
_xSize$ = -8						; size = 4
_hWin$ = 8						; size = 4
_phMem$ = 12						; size = 4
__AddContent PROC					; COMDAT
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 308
	mov	eax, DWORD PTR _phMem$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _hMemDst$[ebp], ecx
; Line 309
	cmp	DWORD PTR _hMemDst$[ebp], 0
	jne	$LN5@AddContent
; Line 310
	lea	eax, DWORD PTR _Rect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	_WM_GetWindowRectEx
	add	esp, 8
; Line 311
	movsx	eax, WORD PTR _Rect$[ebp+4]
	movsx	ecx, WORD PTR _Rect$[ebp]
	sub	eax, ecx
	add	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
; Line 312
	movsx	eax, WORD PTR _Rect$[ebp+6]
	movsx	ecx, WORD PTR _Rect$[ebp+2]
	sub	eax, ecx
	add	eax, 1
	mov	DWORD PTR _ySize$[ebp], eax
; Line 313
	push	OFFSET _LCD_API_ColorConv_8888
	push	OFFSET _GUI_MEMDEV_DEVICE_32
	push	0
	mov	eax, DWORD PTR _ySize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	movsx	edx, WORD PTR _Rect$[ebp+2]
	push	edx
	movsx	eax, WORD PTR _Rect$[ebp]
	push	eax
	call	_GUI_MEMDEV_CreateFixed
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _hMemDst$[ebp], eax
; Line 314
	cmp	DWORD PTR _hMemDst$[ebp], 0
	jne	SHORT $LN4@AddContent
; Line 315
	jmp	SHORT $LN6@AddContent
$LN4@AddContent:
; Line 317
	mov	eax, DWORD PTR _phMem$[ebp]
	mov	ecx, DWORD PTR _hMemDst$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 318
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetStaticDevice
	add	esp, 4
	mov	DWORD PTR _hMemSrc$[ebp], eax
; Line 319
	cmp	DWORD PTR _hMemSrc$[ebp], 0
	je	SHORT $LN3@AddContent
; Line 320
	mov	eax, DWORD PTR _hMemSrc$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetDataPtr
	add	esp, 4
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 321
	mov	eax, DWORD PTR _hMemDst$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetDataPtr
	add	esp, 4
	mov	DWORD PTR _pDst$[ebp], eax
; Line 322
	mov	eax, DWORD PTR _xSize$[ebp]
	imul	eax, DWORD PTR _ySize$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _pSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDst$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN3@AddContent:
; Line 324
	jmp	SHORT $LN6@AddContent
$LN5@AddContent:
; Line 325
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetStaticDevice
	add	esp, 4
	mov	DWORD PTR _hMemSrc$[ebp], eax
; Line 326
	cmp	DWORD PTR _hMemSrc$[ebp], 0
	je	SHORT $LN6@AddContent
; Line 327
	mov	eax, DWORD PTR _hMemDst$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hMemSrc$[ebp]
	push	ecx
	call	__CopyContent
	add	esp, 8
$LN6@AddContent:
; Line 330
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@AddContent
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@AddContent:
	DD	1
	DD	$LN9@AddContent
$LN9@AddContent:
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN8@AddContent
$LN8@AddContent:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
__AddContent ENDP
_TEXT	ENDS
EXTRN	_GUI_MEMDEV_GetYPos:PROC
EXTRN	_GUI_MEMDEV_GetXPos:PROC
EXTRN	_GUI_MEMDEV_GetYSize:PROC
EXTRN	_GUI_MEMDEV_GetXSize:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __CopyContent
_TEXT	SEGMENT
_pLineDst$ = -236					; size = 4
_pLineSrc$ = -224					; size = 4
_pDst$ = -212						; size = 4
_pSrc$ = -200						; size = 4
_PixelPerLine$ = -188					; size = 4
_DistToNextAlpha$ = -176				; size = 4
_ySizeDst$ = -164					; size = 4
_xSizeDst$ = -152					; size = 4
_ySizeSrc$ = -140					; size = 4
_xSizeSrc$ = -128					; size = 4
_yRem$ = -116						; size = 4
_xRem$ = -104						; size = 4
_y1d$ = -92						; size = 4
_x1d$ = -80						; size = 4
_y1s$ = -68						; size = 4
_x1s$ = -56						; size = 4
_y0d$ = -44						; size = 4
_x0d$ = -32						; size = 4
_y0s$ = -20						; size = 4
_x0s$ = -8						; size = 4
_hSrc$ = 8						; size = 4
_hDst$ = 12						; size = 4
__CopyContent PROC					; COMDAT
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 432				; 000001b0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-432]
	mov	ecx, 108				; 0000006cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 85
	mov	eax, DWORD PTR _hSrc$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetXSize
	add	esp, 4
	mov	DWORD PTR _xSizeSrc$[ebp], eax
; Line 86
	mov	eax, DWORD PTR _hSrc$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetYSize
	add	esp, 4
	mov	DWORD PTR _ySizeSrc$[ebp], eax
; Line 87
	mov	eax, DWORD PTR _hSrc$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetDataPtr
	add	esp, 4
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 88
	mov	eax, DWORD PTR _hSrc$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetXPos
	add	esp, 4
	mov	DWORD PTR _x0s$[ebp], eax
; Line 89
	mov	eax, DWORD PTR _hSrc$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetYPos
	add	esp, 4
	mov	DWORD PTR _y0s$[ebp], eax
; Line 90
	mov	eax, DWORD PTR _xSizeSrc$[ebp]
	mov	ecx, DWORD PTR _x0s$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _x1s$[ebp], edx
; Line 91
	mov	eax, DWORD PTR _ySizeSrc$[ebp]
	mov	ecx, DWORD PTR _y0s$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _y1s$[ebp], edx
; Line 95
	mov	eax, DWORD PTR _hDst$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetXSize
	add	esp, 4
	mov	DWORD PTR _xSizeDst$[ebp], eax
; Line 96
	mov	eax, DWORD PTR _hDst$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetYSize
	add	esp, 4
	mov	DWORD PTR _ySizeDst$[ebp], eax
; Line 97
	mov	eax, DWORD PTR _hDst$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetDataPtr
	add	esp, 4
	mov	DWORD PTR _pDst$[ebp], eax
; Line 98
	mov	eax, DWORD PTR _hDst$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetXPos
	add	esp, 4
	mov	DWORD PTR _x0d$[ebp], eax
; Line 99
	mov	eax, DWORD PTR _hDst$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetYPos
	add	esp, 4
	mov	DWORD PTR _y0d$[ebp], eax
; Line 100
	mov	eax, DWORD PTR _xSizeDst$[ebp]
	mov	ecx, DWORD PTR _x0d$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _x1d$[ebp], edx
; Line 101
	mov	eax, DWORD PTR _ySizeDst$[ebp]
	mov	ecx, DWORD PTR _y0d$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _y1d$[ebp], edx
; Line 105
	mov	eax, DWORD PTR _x0s$[ebp]
	cmp	eax, DWORD PTR _x1d$[ebp]
	jg	SHORT $LN30@CopyConten
	mov	eax, DWORD PTR _x1s$[ebp]
	cmp	eax, DWORD PTR _x0d$[ebp]
	jl	SHORT $LN30@CopyConten
	mov	eax, DWORD PTR _y0s$[ebp]
	cmp	eax, DWORD PTR _y1d$[ebp]
	jg	SHORT $LN30@CopyConten
	mov	eax, DWORD PTR _y1s$[ebp]
	cmp	eax, DWORD PTR _y0d$[ebp]
	jge	SHORT $LN31@CopyConten
$LN30@CopyConten:
; Line 106
	jmp	$LN32@CopyConten
$LN31@CopyConten:
; Line 111
	mov	eax, DWORD PTR _x0d$[ebp]
	cmp	eax, DWORD PTR _x0s$[ebp]
	jle	SHORT $LN29@CopyConten
; Line 112
	mov	eax, DWORD PTR _x0d$[ebp]
	sub	eax, DWORD PTR _x0s$[ebp]
	mov	ecx, DWORD PTR _pSrc$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pSrc$[ebp], edx
$LN29@CopyConten:
; Line 114
	mov	eax, DWORD PTR _y0d$[ebp]
	cmp	eax, DWORD PTR _y0s$[ebp]
	jle	SHORT $LN28@CopyConten
; Line 115
	mov	eax, DWORD PTR _y0d$[ebp]
	sub	eax, DWORD PTR _y0s$[ebp]
	imul	eax, DWORD PTR _xSizeSrc$[ebp]
	mov	ecx, DWORD PTR _pSrc$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pSrc$[ebp], edx
$LN28@CopyConten:
; Line 120
	mov	eax, DWORD PTR _x0s$[ebp]
	cmp	eax, DWORD PTR _x0d$[ebp]
	jle	SHORT $LN27@CopyConten
; Line 121
	mov	eax, DWORD PTR _x0s$[ebp]
	sub	eax, DWORD PTR _x0d$[ebp]
	mov	ecx, DWORD PTR _pDst$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pDst$[ebp], edx
$LN27@CopyConten:
; Line 123
	mov	eax, DWORD PTR _y0s$[ebp]
	cmp	eax, DWORD PTR _y0d$[ebp]
	jle	SHORT $LN26@CopyConten
; Line 124
	mov	eax, DWORD PTR _y0s$[ebp]
	sub	eax, DWORD PTR _y0d$[ebp]
	imul	eax, DWORD PTR _xSizeDst$[ebp]
	mov	ecx, DWORD PTR _pDst$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pDst$[ebp], edx
$LN26@CopyConten:
; Line 129
	mov	eax, DWORD PTR _x0d$[ebp]
	cmp	eax, DWORD PTR _x0s$[ebp]
	jl	SHORT $LN25@CopyConten
	mov	eax, DWORD PTR _x1d$[ebp]
	cmp	eax, DWORD PTR _x1s$[ebp]
	jl	SHORT $LN25@CopyConten
; Line 130
	mov	eax, DWORD PTR _x1s$[ebp]
	sub	eax, DWORD PTR _x0d$[ebp]
	add	eax, 1
	mov	DWORD PTR _xRem$[ebp], eax
	jmp	SHORT $LN24@CopyConten
$LN25@CopyConten:
; Line 131
	mov	eax, DWORD PTR _x0d$[ebp]
	cmp	eax, DWORD PTR _x0s$[ebp]
	jl	SHORT $LN23@CopyConten
	mov	eax, DWORD PTR _x1d$[ebp]
	cmp	eax, DWORD PTR _x1s$[ebp]
	jg	SHORT $LN23@CopyConten
; Line 132
	mov	eax, DWORD PTR _xSizeDst$[ebp]
	mov	DWORD PTR _xRem$[ebp], eax
	jmp	SHORT $LN24@CopyConten
$LN23@CopyConten:
; Line 133
	mov	eax, DWORD PTR _x0d$[ebp]
	cmp	eax, DWORD PTR _x0s$[ebp]
	jg	SHORT $LN21@CopyConten
	mov	eax, DWORD PTR _x1d$[ebp]
	cmp	eax, DWORD PTR _x1s$[ebp]
	jl	SHORT $LN21@CopyConten
; Line 134
	mov	eax, DWORD PTR _xSizeSrc$[ebp]
	mov	DWORD PTR _xRem$[ebp], eax
	jmp	SHORT $LN24@CopyConten
$LN21@CopyConten:
; Line 135
	mov	eax, DWORD PTR _x0d$[ebp]
	cmp	eax, DWORD PTR _x0s$[ebp]
	jg	SHORT $LN19@CopyConten
	mov	eax, DWORD PTR _x1d$[ebp]
	cmp	eax, DWORD PTR _x1s$[ebp]
	jg	SHORT $LN19@CopyConten
; Line 136
	mov	eax, DWORD PTR _x1d$[ebp]
	sub	eax, DWORD PTR _x0s$[ebp]
	add	eax, 1
	mov	DWORD PTR _xRem$[ebp], eax
; Line 137
	jmp	SHORT $LN24@CopyConten
$LN19@CopyConten:
; Line 138
	jmp	$LN32@CopyConten
$LN24@CopyConten:
; Line 140
	mov	eax, DWORD PTR _y0d$[ebp]
	cmp	eax, DWORD PTR _y0s$[ebp]
	jl	SHORT $LN17@CopyConten
	mov	eax, DWORD PTR _y1d$[ebp]
	cmp	eax, DWORD PTR _y1s$[ebp]
	jl	SHORT $LN17@CopyConten
; Line 141
	mov	eax, DWORD PTR _y1s$[ebp]
	sub	eax, DWORD PTR _y0d$[ebp]
	add	eax, 1
	mov	DWORD PTR _yRem$[ebp], eax
	jmp	SHORT $LN16@CopyConten
$LN17@CopyConten:
; Line 142
	mov	eax, DWORD PTR _y0d$[ebp]
	cmp	eax, DWORD PTR _y0s$[ebp]
	jl	SHORT $LN15@CopyConten
	mov	eax, DWORD PTR _y1d$[ebp]
	cmp	eax, DWORD PTR _y1s$[ebp]
	jg	SHORT $LN15@CopyConten
; Line 143
	mov	eax, DWORD PTR _ySizeDst$[ebp]
	mov	DWORD PTR _yRem$[ebp], eax
	jmp	SHORT $LN16@CopyConten
$LN15@CopyConten:
; Line 144
	mov	eax, DWORD PTR _y0d$[ebp]
	cmp	eax, DWORD PTR _y0s$[ebp]
	jg	SHORT $LN13@CopyConten
	mov	eax, DWORD PTR _y1d$[ebp]
	cmp	eax, DWORD PTR _y1s$[ebp]
	jl	SHORT $LN13@CopyConten
; Line 145
	mov	eax, DWORD PTR _ySizeSrc$[ebp]
	mov	DWORD PTR _yRem$[ebp], eax
	jmp	SHORT $LN16@CopyConten
$LN13@CopyConten:
; Line 146
	mov	eax, DWORD PTR _y0d$[ebp]
	cmp	eax, DWORD PTR _y0s$[ebp]
	jg	SHORT $LN11@CopyConten
	mov	eax, DWORD PTR _y1d$[ebp]
	cmp	eax, DWORD PTR _y1s$[ebp]
	jg	SHORT $LN11@CopyConten
; Line 147
	mov	eax, DWORD PTR _y1d$[ebp]
	sub	eax, DWORD PTR _y0s$[ebp]
	add	eax, 1
	mov	DWORD PTR _yRem$[ebp], eax
; Line 148
	jmp	SHORT $LN16@CopyConten
$LN11@CopyConten:
; Line 149
	jmp	$LN32@CopyConten
$LN16@CopyConten:
; Line 151
	mov	eax, DWORD PTR _xRem$[ebp]
	mov	DWORD PTR _PixelPerLine$[ebp], eax
$LN9@CopyConten:
; Line 153
	mov	eax, DWORD PTR _PixelPerLine$[ebp]
	mov	DWORD PTR _xRem$[ebp], eax
; Line 154
	mov	eax, DWORD PTR _pSrc$[ebp]
	mov	DWORD PTR _pLineSrc$[ebp], eax
; Line 155
	mov	eax, DWORD PTR _pDst$[ebp]
	mov	DWORD PTR _pLineDst$[ebp], eax
$LN3@CopyConten:
; Line 157
	mov	eax, DWORD PTR _xRem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLineSrc$[ebp]
	push	ecx
	call	__GetDistToNextAlpha
	add	esp, 8
	mov	DWORD PTR _DistToNextAlpha$[ebp], eax
	cmp	DWORD PTR _DistToNextAlpha$[ebp], 0
	jne	SHORT $LN2@CopyConten
	cmp	DWORD PTR _xRem$[ebp], 0
	je	SHORT $LN2@CopyConten
; Line 158
	mov	eax, DWORD PTR _pLineSrc$[ebp]
	add	eax, 4
	mov	DWORD PTR _pLineSrc$[ebp], eax
; Line 159
	mov	eax, DWORD PTR _pLineDst$[ebp]
	add	eax, 4
	mov	DWORD PTR _pLineDst$[ebp], eax
; Line 160
	mov	eax, DWORD PTR _xRem$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xRem$[ebp], eax
; Line 161
	jmp	SHORT $LN3@CopyConten
$LN2@CopyConten:
; Line 162
	cmp	DWORD PTR _xRem$[ebp], 0
	je	SHORT $LN5@CopyConten
; Line 163
	mov	eax, DWORD PTR _DistToNextAlpha$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _pLineSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLineDst$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 164
	mov	eax, DWORD PTR _DistToNextAlpha$[ebp]
	mov	ecx, DWORD PTR _pLineSrc$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pLineSrc$[ebp], edx
; Line 165
	mov	eax, DWORD PTR _DistToNextAlpha$[ebp]
	mov	ecx, DWORD PTR _pLineDst$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pLineDst$[ebp], edx
; Line 166
	mov	eax, DWORD PTR _xRem$[ebp]
	sub	eax, DWORD PTR _DistToNextAlpha$[ebp]
	mov	DWORD PTR _xRem$[ebp], eax
$LN5@CopyConten:
; Line 168
	cmp	DWORD PTR _xRem$[ebp], 0
	jne	$LN3@CopyConten
; Line 169
	mov	eax, DWORD PTR _xSizeDst$[ebp]
	mov	ecx, DWORD PTR _pDst$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pDst$[ebp], edx
; Line 170
	mov	eax, DWORD PTR _xSizeSrc$[ebp]
	mov	ecx, DWORD PTR _pSrc$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pSrc$[ebp], edx
; Line 171
	mov	eax, DWORD PTR _yRem$[ebp]
	sub	eax, 1
	mov	DWORD PTR _yRem$[ebp], eax
	jne	$LN9@CopyConten
$LN32@CopyConten:
; Line 172
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 432				; 000001b0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__CopyContent ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDistToNextAlpha
_TEXT	SEGMENT
tv67 = -208						; size = 4
_r$ = -8						; size = 4
_pSrc$ = 8						; size = 4
_NumPixels$ = 12					; size = 4
__GetDistToNextAlpha PROC				; COMDAT
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 53
	mov	DWORD PTR _r$[ebp], 0
$LN4@GetDistToN:
; Line 56
	mov	eax, DWORD PTR _pSrc$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _pSrc$[ebp]
	add	edx, 4
	mov	DWORD PTR _pSrc$[ebp], edx
	cmp	ecx, 255				; 000000ffH
	jne	SHORT $LN7@GetDistToN
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN8@GetDistToN
$LN7@GetDistToN:
	mov	DWORD PTR tv67[ebp], 0
$LN8@GetDistToN:
	cmp	DWORD PTR tv67[ebp], 0
	je	SHORT $LN1@GetDistToN
; Line 57
	jmp	SHORT $LN2@GetDistToN
$LN1@GetDistToN:
; Line 59
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 1
	mov	DWORD PTR _r$[ebp], eax
; Line 60
	mov	eax, DWORD PTR _NumPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
	jne	SHORT $LN4@GetDistToN
$LN2@GetDistToN:
; Line 61
	mov	eax, DWORD PTR _r$[ebp]
; Line 62
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDistToNextAlpha ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _GUI_MEMDEV_GetStaticDevice
_TEXT	SEGMENT
_pWin$ = -20						; size = 4
_hMem$ = -8						; size = 4
_hWin$ = 8						; size = 4
_GUI_MEMDEV_GetStaticDevice PROC			; COMDAT
; Line 432
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 437
	mov	DWORD PTR _hMem$[ebp], 0
; Line 438
	cmp	DWORD PTR _hWin$[ebp], 0
	je	SHORT $LN1@GUI_MEMDEV@3
; Line 439
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 440
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _hMem$[ebp], ecx
$LN1@GUI_MEMDEV@3:
; Line 443
	mov	eax, DWORD PTR _hMem$[ebp]
; Line 444
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV_GetStaticDevice ENDP
_TEXT	ENDS
PUBLIC	_GUIDEV_StaticDevices_C
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUIDEV_StaticDevices_C
_TEXT	SEGMENT
_GUIDEV_StaticDevices_C PROC				; COMDAT
; Line 449
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUIDEV_StaticDevices_C ENDP
_TEXT	ENDS
END
