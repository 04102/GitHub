; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\MemDev\GUIDEV_Perspective.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG8613	DB	'_XY2PTR: parameters out of bounds', 00H
_DATA	ENDS
PUBLIC	_GUI_MEMDEV_DrawPerspectiveX
EXTRN	_WM__GetNextIVR:PROC
EXTRN	_WM__InitIVRSearch:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\memdev\guidev_perspective.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_MEMDEV_DrawPerspectiveX
_TEXT	SEGMENT
tv79 = -224						; size = 4
_pDev$ = -24						; size = 4
_r$ = -12						; size = 8
_hMem$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_h0$ = 20						; size = 4
_h1$ = 24						; size = 4
_dx$ = 28						; size = 4
_dy$ = 32						; size = 4
_GUI_MEMDEV_DrawPerspectiveX PROC			; COMDAT
; Line 228
	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 233
	cmp	DWORD PTR _dx$[ebp], 0
	je	$LN6@GUI_MEMDEV
; Line 235
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 237
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _GUI_Context+64
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _GUI_Context+68
	mov	DWORD PTR _y$[ebp], eax
; Line 238
	mov	ax, WORD PTR _x$[ebp]
	mov	WORD PTR _r$[ebp], ax
; Line 239
	xor	eax, eax
	cmp	DWORD PTR _dy$[ebp], 0
	setge	al
	sub	eax, 1
	and	eax, DWORD PTR _dy$[ebp]
	add	eax, DWORD PTR _y$[ebp]
	mov	WORD PTR _r$[ebp+2], ax
; Line 240
	movsx	eax, WORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _dx$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	mov	WORD PTR _r$[ebp+4], dx
; Line 241
	mov	eax, DWORD PTR _h0$[ebp]
	cmp	eax, DWORD PTR _h1$[ebp]
	jle	SHORT $LN8@GUI_MEMDEV
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR tv79[ebp], ecx
	jmp	SHORT $LN9@GUI_MEMDEV
$LN8@GUI_MEMDEV:
	mov	edx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR tv79[ebp], edx
$LN9@GUI_MEMDEV:
	movsx	eax, WORD PTR _r$[ebp+2]
	mov	ecx, DWORD PTR tv79[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	mov	WORD PTR _r$[ebp+6], dx
; Line 242
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_WM__InitIVRSearch
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@GUI_MEMDEV
$LN3@GUI_MEMDEV:
; Line 244
	mov	eax, DWORD PTR _dy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _h1$[ebp]
	push	edx
	mov	eax, DWORD PTR _h0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDev$[ebp]
	push	eax
	call	__DrawMemdevPerspective
	add	esp, 28					; 0000001cH
; Line 246
	call	_WM__GetNextIVR
	test	eax, eax
	jne	SHORT $LN3@GUI_MEMDEV
$LN6@GUI_MEMDEV:
; Line 250
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@GUI_MEMDEV
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@GUI_MEMDEV:
	DD	1
	DD	$LN11@GUI_MEMDEV
$LN11@GUI_MEMDEV:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN10@GUI_MEMDEV
$LN10@GUI_MEMDEV:
	DB	114					; 00000072H
	DB	0
_GUI_MEMDEV_DrawPerspectiveX ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawMemdevPerspective
_TEXT	SEGMENT
_Current$ = -140					; size = 4
_Compare$ = -128					; size = 4
_i$ = -116						; size = 4
_xx$ = -104						; size = 4
_yOff1$ = -92						; size = 4
_yOff0$ = -80						; size = 4
_Num$ = -68						; size = 4
_xStart$ = -56						; size = 4
_xSize$ = -44						; size = 4
_x$ = -32						; size = 4
_NumReps$ = -20						; size = 4
_SkipCnt$ = -8						; size = 4
_pDev$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_h0$ = 20						; size = 4
_h1$ = 24						; size = 4
_dx$ = 28						; size = 4
_dy$ = 32						; size = 4
__DrawMemdevPerspective PROC				; COMDAT
; Line 173
	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 177
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	DWORD PTR _xSize$[ebp], ecx
; Line 178
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _xStart$[ebp], eax
; Line 179
	mov	eax, DWORD PTR _xSize$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _Current$[ebp], eax
; Line 180
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
; Line 181
	mov	DWORD PTR _x$[ebp], 0
$LN10@DrawMemdev:
; Line 186
	mov	DWORD PTR _SkipCnt$[ebp], 0
$LN7@DrawMemdev:
; Line 190
	mov	eax, DWORD PTR _Current$[ebp]
	add	eax, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _Current$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jae	SHORT $LN6@DrawMemdev
; Line 191
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	add	eax, 1
	mov	DWORD PTR _SkipCnt$[ebp], eax
; Line 192
	jmp	SHORT $LN7@DrawMemdev
$LN6@DrawMemdev:
; Line 196
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _x$[ebp], edx
; Line 200
	mov	DWORD PTR _NumReps$[ebp], 1
$LN5@DrawMemdev:
; Line 201
	mov	eax, DWORD PTR _Compare$[ebp]
	add	eax, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jb	SHORT $LN4@DrawMemdev
; Line 202
	mov	eax, DWORD PTR _NumReps$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumReps$[ebp], eax
; Line 203
	jmp	SHORT $LN5@DrawMemdev
$LN4@DrawMemdev:
; Line 207
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@DrawMemdev
$LN2@DrawMemdev:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@DrawMemdev:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _NumReps$[ebp]
	jge	$LN1@DrawMemdev
; Line 208
	mov	eax, DWORD PTR _x0$[ebp]
	sub	eax, DWORD PTR _xStart$[ebp]
	imul	eax, DWORD PTR _dy$[ebp]
	mov	ecx, DWORD PTR _dx$[ebp]
	sar	ecx, 1
	add	eax, ecx
	cdq
	idiv	DWORD PTR _dx$[ebp]
	mov	DWORD PTR _yOff0$[ebp], eax
; Line 209
	mov	eax, DWORD PTR _h0$[ebp]
	sub	eax, DWORD PTR _h1$[ebp]
	sub	eax, DWORD PTR _dy$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	sub	ecx, DWORD PTR _xStart$[ebp]
	imul	eax, ecx
	mov	edx, DWORD PTR _dx$[ebp]
	sar	edx, 1
	add	eax, edx
	cdq
	idiv	DWORD PTR _dx$[ebp]
	mov	DWORD PTR _yOff1$[ebp], eax
; Line 210
	mov	eax, DWORD PTR _h0$[ebp]
	sub	eax, DWORD PTR _yOff0$[ebp]
	sub	eax, DWORD PTR _yOff1$[ebp]
	mov	DWORD PTR _Num$[ebp], eax
; Line 211
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	movsx	edx, WORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _h1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h0$[ebp]
	push	ecx
	call	__GetX
	add	esp, 16					; 00000010H
	mov	DWORD PTR _xx$[ebp], eax
; Line 212
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	push	ecx
	mov	edx, DWORD PTR _Num$[ebp]
	push	edx
	mov	eax, DWORD PTR _yOff0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _xx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	push	ecx
	call	__DrawColumnScaled
	add	esp, 28					; 0000001cH
; Line 213
	jmp	$LN2@DrawMemdev
$LN1@DrawMemdev:
; Line 214
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _NumReps$[ebp]
	mov	DWORD PTR _x0$[ebp], eax
; Line 215
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _xSize$[ebp]
	jl	$LN10@DrawMemdev
; Line 216
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawMemdevPerspective ENDP
_TEXT	ENDS
EXTRN	_sqrt:PROC
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetX
_TEXT	SEGMENT
tv184 = -304						; size = 4
tv172 = -304						; size = 4
tv162 = -304						; size = 4
_temp$8647 = -104					; size = 4
_c1$ = -92						; size = 4
_c0$ = -80						; size = 4
_m1$ = -68						; size = 4
_m0$ = -56						; size = 4
_MirrorX$ = -44						; size = 4
_x$ = -32						; size = 4
_sy$ = -20						; size = 4
_sx$ = -8						; size = 4
_h0$ = 8						; size = 4
_h1$ = 12						; size = 4
_b$ = 16						; size = 4
_x0$ = 20						; size = 4
__GetX	PROC						; COMDAT
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 77
	mov	eax, DWORD PTR _h0$[ebp]
	cmp	eax, DWORD PTR _h1$[ebp]
	jne	SHORT $LN6@GetX
; Line 78
	mov	eax, DWORD PTR _x0$[ebp]
	jmp	$LN7@GetX
$LN6@GetX:
; Line 80
	mov	eax, DWORD PTR _h0$[ebp]
	cmp	eax, DWORD PTR _h1$[ebp]
	jge	SHORT $LN5@GetX
; Line 82
	mov	DWORD PTR _MirrorX$[ebp], 1
; Line 83
	mov	eax, DWORD PTR _h0$[ebp]
	mov	DWORD PTR _temp$8647[ebp], eax
; Line 84
	mov	eax, DWORD PTR _h1$[ebp]
	mov	DWORD PTR _h0$[ebp], eax
; Line 85
	mov	eax, DWORD PTR _temp$8647[ebp]
	mov	DWORD PTR _h1$[ebp], eax
; Line 86
	jmp	SHORT $LN4@GetX
$LN5@GetX:
; Line 87
	mov	DWORD PTR _MirrorX$[ebp], 0
; Line 88
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x0$[ebp], eax
$LN4@GetX:
; Line 90
	mov	eax, DWORD PTR _b$[ebp]
	imul	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	sub	ecx, DWORD PTR _h1$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _sx$[ebp], eax
; Line 91
	mov	eax, DWORD PTR _h0$[ebp]
	sub	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	sub	ecx, DWORD PTR _h1$[ebp]
	imul	eax, ecx
	mov	edx, DWORD PTR _b$[ebp]
	imul	edx, DWORD PTR _b$[ebp]
	add	eax, edx
	mov	DWORD PTR tv162[ebp], eax
	fild	DWORD PTR tv162[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _c0$[ebp]
; Line 92
	mov	eax, DWORD PTR _sx$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _sx$[ebp]
	sub	ecx, DWORD PTR _b$[ebp]
	imul	eax, ecx
	mov	edx, DWORD PTR _h1$[ebp]
	imul	edx, DWORD PTR _h1$[ebp]
	add	eax, edx
	mov	DWORD PTR tv172[ebp], eax
	fild	DWORD PTR tv172[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _c1$[ebp]
; Line 93
	fild	DWORD PTR _b$[ebp]
	fmul	DWORD PTR _c1$[ebp]
	fdiv	DWORD PTR _c0$[ebp]
	call	__ftol2_sse
	mov	DWORD PTR _sy$[ebp], eax
; Line 94
	mov	eax, DWORD PTR _sy$[ebp]
	add	eax, DWORD PTR _h0$[ebp]
	add	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR tv184[ebp], eax
	fild	DWORD PTR tv184[ebp]
	fidiv	DWORD PTR _sx$[ebp]
	fstp	DWORD PTR _m0$[ebp]
; Line 95
	fild	DWORD PTR _h0$[ebp]
	fidiv	DWORD PTR _sx$[ebp]
	fstp	DWORD PTR _m1$[ebp]
; Line 96
	fld	DWORD PTR _m0$[ebp]
	fld	DWORD PTR _m1$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@GetX
; Line 97
	mov	eax, DWORD PTR _x0$[ebp]
	jmp	SHORT $LN7@GetX
$LN3@GetX:
; Line 99
	fild	DWORD PTR _x0$[ebp]
	fld	DWORD PTR _m0$[ebp]
	fsub	DWORD PTR _m1$[ebp]
	fdivp	ST(1), ST(0)
	call	__ftol2_sse
	mov	DWORD PTR _x$[ebp], eax
; Line 100
	cmp	DWORD PTR _MirrorX$[ebp], 0
	jne	SHORT $LN2@GetX
; Line 101
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x$[ebp], eax
$LN2@GetX:
; Line 103
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jl	SHORT $LN1@GetX
; Line 104
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN1@GetX:
; Line 106
	mov	eax, DWORD PTR _x$[ebp]
$LN7@GetX:
; Line 107
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetX	ENDP
_TEXT	ENDS
EXTRN	_LCD_SetPixelIndex:PROC
EXTRN	_GUI__SetPixelAlpha:PROC
EXTRN	_GUI_GetpfColor2IndexEx:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawColumnScaled
_TEXT	SEGMENT
tv135 = -316						; size = 4
tv91 = -316						; size = 4
_Index$8694 = -116					; size = 4
_Alpha$8693 = -101					; size = 1
_Color$8692 = -92					; size = 4
_Current$ = -80						; size = 4
_Compare$ = -68						; size = 4
_i$ = -56						; size = 4
_y$ = -44						; size = 4
_NumReps$ = -32						; size = 4
_SkipCnt$ = -20						; size = 4
_pfColor2Index$ = -8					; size = 4
_pDev$ = 8						; size = 4
_x$ = 12						; size = 4
_x0$ = 16						; size = 4
_y0$ = 20						; size = 4
_yOff$ = 24						; size = 4
_Num$ = 28						; size = 4
_Denom$ = 32						; size = 4
__DrawColumnScaled PROC					; COMDAT
; Line 113
	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 117
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_GUI_GetpfColor2IndexEx
	add	esp, 4
	mov	DWORD PTR _pfColor2Index$[ebp], eax
; Line 118
	mov	eax, DWORD PTR _Denom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _Current$[ebp], eax
; Line 119
	mov	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
; Line 120
	mov	DWORD PTR _y$[ebp], 0
$LN15@DrawColumn:
; Line 125
	mov	DWORD PTR _SkipCnt$[ebp], 0
$LN12@DrawColumn:
; Line 129
	mov	eax, DWORD PTR _Current$[ebp]
	add	eax, DWORD PTR _Num$[ebp]
	mov	DWORD PTR _Current$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jae	SHORT $LN11@DrawColumn
; Line 130
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	add	eax, 1
	mov	DWORD PTR _SkipCnt$[ebp], eax
; Line 131
	jmp	SHORT $LN12@DrawColumn
$LN11@DrawColumn:
; Line 135
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _SkipCnt$[ebp]
	mov	DWORD PTR _y$[ebp], eax
; Line 139
	mov	DWORD PTR _NumReps$[ebp], 1
$LN10@DrawColumn:
; Line 140
	mov	eax, DWORD PTR _Compare$[ebp]
	add	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jb	SHORT $LN9@DrawColumn
; Line 141
	mov	eax, DWORD PTR _NumReps$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumReps$[ebp], eax
; Line 142
	jmp	SHORT $LN10@DrawColumn
$LN9@DrawColumn:
; Line 146
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	cmp	DWORD PTR _y$[ebp], ecx
	jge	$LN8@DrawColumn
; Line 150
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDev$[ebp]
	push	edx
	call	__GetPixel
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Color$8692[ebp], eax
; Line 151
	mov	esi, esp
	mov	eax, DWORD PTR _Color$8692[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Index$8694[ebp], eax
; Line 152
	mov	eax, DWORD PTR _Color$8692[ebp]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _Alpha$8693[ebp], al
; Line 153
	movzx	eax, BYTE PTR _Alpha$8693[ebp]
	cmp	eax, 255				; 000000ffH
	jge	$LN8@DrawColumn
; Line 154
	movzx	eax, BYTE PTR _Alpha$8693[ebp]
	test	eax, eax
	je	SHORT $LN6@DrawColumn
; Line 155
	mov	eax, DWORD PTR _NumReps$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN5@DrawColumn:
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv91[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv91[ebp], 0
	je	SHORT $LN4@DrawColumn
; Line 156
	mov	eax, DWORD PTR _Color$8692[ebp]
	push	eax
	movzx	ecx, BYTE PTR _Alpha$8693[ebp]
	mov	edx, 255				; 000000ffH
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _yOff$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_GUI__SetPixelAlpha
	add	esp, 16					; 00000010H
; Line 157
	jmp	SHORT $LN5@DrawColumn
$LN4@DrawColumn:
; Line 158
	jmp	SHORT $LN8@DrawColumn
$LN6@DrawColumn:
; Line 159
	mov	eax, DWORD PTR _NumReps$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN2@DrawColumn:
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv135[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv135[ebp], 0
	je	SHORT $LN8@DrawColumn
; Line 160
	mov	eax, DWORD PTR _Index$8694[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	add	ecx, DWORD PTR _yOff$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	_LCD_SetPixelIndex
	add	esp, 12					; 0000000cH
; Line 161
	jmp	SHORT $LN2@DrawColumn
$LN8@DrawColumn:
; Line 165
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _NumReps$[ebp]
	mov	DWORD PTR _y0$[ebp], eax
; Line 166
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	movsx	edx, WORD PTR [ecx+10]
	cmp	DWORD PTR _y$[ebp], edx
	jl	$LN15@DrawColumn
; Line 167
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawColumnScaled ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetPixel
_TEXT	SEGMENT
_Index$ = -20						; size = 4
_pData$ = -8						; size = 4
_pDev$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__GetPixel PROC						; COMDAT
; Line 58
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 61
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDev$[ebp]
	push	edx
	call	__XY2PTR
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pData$[ebp], eax
; Line 62
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Index$[ebp], ecx
; Line 63
	mov	eax, DWORD PTR _Index$[ebp]
; Line 64
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetPixel ENDP
_TEXT	ENDS
EXTRN	_GUI_ErrorOut2:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __XY2PTR
_TEXT	SEGMENT
_pData$ = -8						; size = 4
_pDev$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__XY2PTR PROC						; COMDAT
; Line 40
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 41
	mov	eax, DWORD PTR _pDev$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _pData$[ebp], eax
; Line 46
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [edx+8]
	add	ecx, eax
	cmp	DWORD PTR _x$[ebp], ecx
	jge	SHORT $LN1@XY2PTR
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	cmp	DWORD PTR _x$[ebp], ecx
	jl	SHORT $LN1@XY2PTR
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [edx+10]
	add	ecx, eax
	cmp	DWORD PTR _y$[ebp], ecx
	jge	SHORT $LN1@XY2PTR
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _y$[ebp], ecx
	jge	SHORT $LN2@XY2PTR
$LN1@XY2PTR:
; Line 47
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	push	OFFSET $SG8613
	call	_GUI_ErrorOut2
	add	esp, 12					; 0000000cH
$LN2@XY2PTR:
; Line 50
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _pDev$[ebp]
	imul	edx, DWORD PTR [eax+12]
	add	edx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pData$[ebp], edx
; Line 51
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [edx+4]
	shl	ecx, 2
	sub	eax, ecx
; Line 52
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__XY2PTR ENDP
_TEXT	ENDS
END
