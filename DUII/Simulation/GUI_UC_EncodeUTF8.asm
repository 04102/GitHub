; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_UC_EncodeUTF8.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
__API_Table DD	FLAT:__GetCharCode
	DD	FLAT:__GetCharSize
	DD	FLAT:__CalcSizeOfChar
	DD	FLAT:__Encode
CONST	ENDS
_DATA	SEGMENT
$SG8347	DB	'Illegal character during UTF-8 decoding!', 00H
	ORG $+3
$SG8358	DB	'Illegal character during UTF-8 decoding!', 00H
_DATA	ENDS
EXTRN	_GUI_ErrorOut:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_uc_encodeutf8.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __GetCharCode
_TEXT	SEGMENT
_Char$ = -17						; size = 1
_r$ = -8						; size = 2
_s$ = 8							; size = 4
__GetCharCode PROC					; COMDAT
; Line 38
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 40
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _Char$[ebp], cl
; Line 41
	movzx	eax, BYTE PTR _Char$[ebp]
	and	eax, 128				; 00000080H
	jne	SHORT $LN6@GetCharCod
; Line 42
	movzx	ax, BYTE PTR _Char$[ebp]
	mov	WORD PTR _r$[ebp], ax
	jmp	$LN5@GetCharCod
$LN6@GetCharCod:
; Line 43
	movzx	eax, BYTE PTR _Char$[ebp]
	and	eax, 224				; 000000e0H
	cmp	eax, 192				; 000000c0H
	jne	SHORT $LN4@GetCharCod
; Line 44
	movzx	eax, BYTE PTR _Char$[ebp]
	and	eax, 31					; 0000001fH
	shl	eax, 6
	mov	WORD PTR _r$[ebp], ax
; Line 45
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _Char$[ebp], dl
; Line 46
	movzx	eax, BYTE PTR _Char$[ebp]
	and	eax, 63					; 0000003fH
	mov	BYTE PTR _Char$[ebp], al
; Line 47
	movzx	eax, BYTE PTR _Char$[ebp]
	movzx	ecx, WORD PTR _r$[ebp]
	or	ecx, eax
	mov	WORD PTR _r$[ebp], cx
	jmp	$LN5@GetCharCod
$LN4@GetCharCod:
; Line 48
	movzx	eax, BYTE PTR _Char$[ebp]
	and	eax, 240				; 000000f0H
	cmp	eax, 224				; 000000e0H
	jne	SHORT $LN2@GetCharCod
; Line 49
	movzx	eax, BYTE PTR _Char$[ebp]
	and	eax, 15					; 0000000fH
	shl	eax, 12					; 0000000cH
	mov	WORD PTR _r$[ebp], ax
; Line 50
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _Char$[ebp], dl
; Line 51
	movzx	eax, BYTE PTR _Char$[ebp]
	and	eax, 63					; 0000003fH
	mov	BYTE PTR _Char$[ebp], al
; Line 52
	movzx	eax, BYTE PTR _Char$[ebp]
	shl	eax, 6
	movzx	ecx, WORD PTR _r$[ebp]
	or	ecx, eax
	mov	WORD PTR _r$[ebp], cx
; Line 53
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _Char$[ebp], dl
; Line 54
	movzx	eax, BYTE PTR _Char$[ebp]
	and	eax, 63					; 0000003fH
	mov	BYTE PTR _Char$[ebp], al
; Line 55
	movzx	eax, BYTE PTR _Char$[ebp]
	movzx	ecx, WORD PTR _r$[ebp]
	or	ecx, eax
	mov	WORD PTR _r$[ebp], cx
; Line 56
	jmp	SHORT $LN5@GetCharCod
$LN2@GetCharCod:
; Line 57
	push	OFFSET $SG8347
	call	_GUI_ErrorOut
	add	esp, 4
; Line 58
	mov	eax, 1
	mov	WORD PTR _r$[ebp], ax
$LN5@GetCharCod:
; Line 60
	mov	ax, WORD PTR _r$[ebp]
; Line 61
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetCharCode ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetCharSize
_TEXT	SEGMENT
_Char$ = -5						; size = 1
_s$ = 8							; size = 4
__GetCharSize PROC					; COMDAT
; Line 70
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 71
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _Char$[ebp], cl
; Line 72
	movzx	eax, BYTE PTR _Char$[ebp]
	and	eax, 128				; 00000080H
	jne	SHORT $LN5@GetCharSiz
; Line 73
	mov	eax, 1
	jmp	SHORT $LN6@GetCharSiz
	jmp	SHORT $LN4@GetCharSiz
$LN5@GetCharSiz:
; Line 74
	movzx	eax, BYTE PTR _Char$[ebp]
	and	eax, 224				; 000000e0H
	cmp	eax, 192				; 000000c0H
	jne	SHORT $LN3@GetCharSiz
; Line 75
	mov	eax, 2
	jmp	SHORT $LN6@GetCharSiz
	jmp	SHORT $LN4@GetCharSiz
$LN3@GetCharSiz:
; Line 76
	movzx	eax, BYTE PTR _Char$[ebp]
	and	eax, 240				; 000000f0H
	cmp	eax, 224				; 000000e0H
	jne	SHORT $LN4@GetCharSiz
; Line 77
	mov	eax, 3
	jmp	SHORT $LN6@GetCharSiz
$LN4@GetCharSiz:
; Line 79
	push	OFFSET $SG8358
	call	_GUI_ErrorOut
	add	esp, 4
; Line 80
	mov	eax, 1
$LN6@GetCharSiz:
; Line 81
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetCharSize ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __CalcSizeOfChar
_TEXT	SEGMENT
_r$ = -8						; size = 4
_Char$ = 8						; size = 2
__CalcSizeOfChar PROC					; COMDAT
; Line 90
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 92
	movzx	eax, WORD PTR _Char$[ebp]
	and	eax, 63488				; 0000f800H
	je	SHORT $LN4@CalcSizeOf
; Line 93
	mov	DWORD PTR _r$[ebp], 3
	jmp	SHORT $LN3@CalcSizeOf
$LN4@CalcSizeOf:
; Line 94
	movzx	eax, WORD PTR _Char$[ebp]
	and	eax, 65408				; 0000ff80H
	je	SHORT $LN2@CalcSizeOf
; Line 95
	mov	DWORD PTR _r$[ebp], 2
; Line 96
	jmp	SHORT $LN3@CalcSizeOf
$LN2@CalcSizeOf:
; Line 97
	mov	DWORD PTR _r$[ebp], 1
$LN3@CalcSizeOf:
; Line 99
	mov	eax, DWORD PTR _r$[ebp]
; Line 100
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__CalcSizeOfChar ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Encode
_TEXT	SEGMENT
tv66 = -208						; size = 4
_r$ = -8						; size = 4
_s$ = 8							; size = 4
_Char$ = 12						; size = 2
__Encode PROC						; COMDAT
; Line 109
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 111
	movzx	eax, WORD PTR _Char$[ebp]
	push	eax
	call	__CalcSizeOfChar
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax
; Line 112
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 1
	je	SHORT $LN3@Encode
	cmp	DWORD PTR tv66[ebp], 2
	je	SHORT $LN2@Encode
	cmp	DWORD PTR tv66[ebp], 3
	je	SHORT $LN1@Encode
	jmp	SHORT $LN4@Encode
$LN3@Encode:
; Line 114
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR _Char$[ebp]
	mov	BYTE PTR [eax], cl
; Line 115
	jmp	SHORT $LN4@Encode
$LN2@Encode:
; Line 117
	movzx	eax, WORD PTR _Char$[ebp]
	sar	eax, 6
	or	eax, 192				; 000000c0H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 118
	movzx	eax, WORD PTR _Char$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx], al
; Line 119
	jmp	SHORT $LN4@Encode
$LN1@Encode:
; Line 121
	movzx	eax, WORD PTR _Char$[ebp]
	sar	eax, 12					; 0000000cH
	or	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 122
	movzx	eax, WORD PTR _Char$[ebp]
	sar	eax, 6
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 123
	movzx	eax, WORD PTR _Char$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx], al
$LN4@Encode:
; Line 126
	mov	eax, DWORD PTR _r$[ebp]
; Line 127
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Encode ENDP
_TEXT	ENDS
PUBLIC	_GUI_UC_SetEncodeUTF8
EXTRN	_GUI_pUC_API:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_UC_SetEncodeUTF8
_TEXT	SEGMENT
_GUI_UC_SetEncodeUTF8 PROC				; COMDAT
; Line 150
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 152
	mov	DWORD PTR _GUI_pUC_API, OFFSET __API_Table
; Line 154
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_UC_SetEncodeUTF8 ENDP
_TEXT	ENDS
END
