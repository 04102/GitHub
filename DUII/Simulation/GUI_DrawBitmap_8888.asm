; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_DrawBitmap_8888.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_BitmapMethods8888
EXTRN	_LCD_Index2Color_8888:PROC
CONST	SEGMENT
_GUI_BitmapMethods8888 DD FLAT:__DrawBitmap_8888
	DD	FLAT:_LCD_Index2Color_8888
	DD	FLAT:__DrawBitmapHW_8888
CONST	ENDS
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_drawbitmap_8888.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __DrawBitmap_8888
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xsize$ = 16						; size = 4
_ysize$ = 20						; size = 4
_pPixel$ = 24						; size = 4
_pLogPal$ = 28						; size = 4
_xMag$ = 32						; size = 4
_yMag$ = 36						; size = 4
__DrawBitmap_8888 PROC					; COMDAT
; Line 308
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 309
	mov	eax, DWORD PTR _pLogPal$[ebp]
	mov	DWORD PTR _pLogPal$[ebp], eax
; Line 310
	mov	eax, DWORD PTR _GUI_BitmapMethods8888+4
	push	eax
	mov	ecx, DWORD PTR _yMag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xMag$[ebp]
	push	edx
	mov	eax, DWORD PTR _pPixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ysize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	__DrawBitmap
	add	esp, 32					; 00000020H
; Line 311
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitmap_8888 ENDP
_TEXT	ENDS
EXTRN	_GUI_SetColor:PROC
EXTRN	_LCD_FillRect:PROC
EXTRN	_LCD_pColorIndex:DWORD
EXTRN	_GUI__SetPixelAlpha:PROC
EXTRN	_LCD_SetColor:PROC
EXTRN	_LCD_DrawBitmap:PROC
EXTRN	_GUI_GetpfIndex2ColorEx:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	_GUI_GetColor:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitmap
_TEXT	SEGMENT
_pfIndex2ColorCompare$8430 = -212			; size = 4
_OldColor$ = -200					; size = 4
_p$ = -188						; size = 4
_Alpha$ = -173						; size = 1
_Color$ = -164						; size = 4
_PrevColor$ = -152					; size = 4
_Dist$ = -140						; size = 4
_Diff$ = -128						; size = 4
_xRem$ = -116						; size = 4
_UseDrawBitmap$ = -104					; size = 4
_BytesPerLine$ = -92					; size = 4
_Mag$ = -80						; size = 4
_yMax$ = -68						; size = 4
_yi$ = -56						; size = 4
_xi$ = -44						; size = 4
_y$ = -32						; size = 4
_x$ = -20						; size = 4
_pData$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xsize$ = 16						; size = 4
_ysize$ = 20						; size = 4
_pPixel$ = 24						; size = 4
_xMag$ = 28						; size = 4
_yMag$ = 32						; size = 4
_pfIndex2Color$ = 36					; size = 4
__DrawBitmap PROC					; COMDAT
; Line 119
	push	ebp
	mov	ebp, esp
	sub	esp, 408				; 00000198H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-408]
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 128
	mov	DWORD PTR _UseDrawBitmap$[ebp], 0
; Line 129
	call	_GUI_GetColor
	mov	DWORD PTR _OldColor$[ebp], eax
; Line 130
	mov	DWORD PTR _PrevColor$[ebp], 268435455	; 0fffffffH
; Line 131
	mov	eax, DWORD PTR _pPixel$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 132
	mov	eax, DWORD PTR _xMag$[ebp]
	or	eax, DWORD PTR _yMag$[ebp]
	mov	DWORD PTR _Mag$[ebp], eax
; Line 133
	mov	eax, DWORD PTR _xsize$[ebp]
	shl	eax, 2
	mov	DWORD PTR _BytesPerLine$[ebp], eax
; Line 137
	cmp	DWORD PTR _Mag$[ebp], 1
	jne	SHORT $LN45@DrawBitmap
; Line 139
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_GUI_GetpfIndex2ColorEx
	add	esp, 4
	mov	DWORD PTR _pfIndex2ColorCompare$8430[ebp], eax
; Line 140
	mov	eax, DWORD PTR _pfIndex2ColorCompare$8430[ebp]
	cmp	eax, DWORD PTR _pfIndex2Color$[ebp]
	jne	SHORT $LN45@DrawBitmap
; Line 141
	mov	DWORD PTR _UseDrawBitmap$[ebp], 1
$LN45@DrawBitmap:
; Line 144
	cmp	DWORD PTR _UseDrawBitmap$[ebp], 0
	je	$LN43@DrawBitmap
$LN42@DrawBitmap:
; Line 149
	movsx	eax, WORD PTR _GUI_Context+10
	sub	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _Diff$[ebp], eax
; Line 150
	mov	eax, DWORD PTR _Diff$[ebp]
	cmp	eax, DWORD PTR _ysize$[ebp]
	jle	SHORT $LN39@DrawBitmap
; Line 151
	jmp	$LN40@DrawBitmap
$LN39@DrawBitmap:
; Line 153
	cmp	DWORD PTR _Diff$[ebp], 0
	jle	SHORT $LN38@DrawBitmap
; Line 154
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _y0$[ebp], eax
; Line 155
	mov	eax, DWORD PTR _Diff$[ebp]
	imul	eax, DWORD PTR _xsize$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pData$[ebp], edx
; Line 156
	mov	eax, DWORD PTR _ysize$[ebp]
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _ysize$[ebp], eax
; Line 157
	cmp	DWORD PTR _ysize$[ebp], 0
	jg	SHORT $LN38@DrawBitmap
; Line 158
	jmp	$LN40@DrawBitmap
$LN38@DrawBitmap:
; Line 161
	movsx	eax, WORD PTR _GUI_Context+14
	cmp	DWORD PTR _y0$[ebp], eax
	jle	SHORT $LN36@DrawBitmap
; Line 162
	jmp	$LN40@DrawBitmap
$LN36@DrawBitmap:
; Line 167
	mov	eax, DWORD PTR _xsize$[ebp]
	mov	DWORD PTR _xRem$[ebp], eax
; Line 168
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 169
	movsx	eax, WORD PTR _GUI_Context+8
	sub	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _Diff$[ebp], eax
; Line 170
	cmp	DWORD PTR _Diff$[ebp], 0
	jle	SHORT $LN35@DrawBitmap
; Line 171
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 172
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pData$[ebp], edx
; Line 173
	mov	eax, DWORD PTR _xRem$[ebp]
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _xRem$[ebp], eax
$LN35@DrawBitmap:
; Line 175
	movsx	eax, WORD PTR _GUI_Context+12
	cmp	DWORD PTR _x$[ebp], eax
	jle	SHORT $LN34@DrawBitmap
; Line 176
	jmp	$LN40@DrawBitmap
$LN34@DrawBitmap:
; Line 178
	cmp	DWORD PTR _xRem$[ebp], 0
	jge	SHORT $LN32@DrawBitmap
; Line 179
	jmp	$LN40@DrawBitmap
$LN32@DrawBitmap:
; Line 185
	mov	eax, DWORD PTR _xRem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	call	__GetDistToNextAlpha
	add	esp, 8
	mov	DWORD PTR _Dist$[ebp], eax
; Line 186
	cmp	DWORD PTR _Dist$[ebp], 0
	je	SHORT $LN29@DrawBitmap
; Line 190
	push	0
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BytesPerLine$[ebp]
	push	ecx
	push	32					; 00000020H
	push	1
	push	1
	push	1
	mov	edx, DWORD PTR _Dist$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_LCD_DrawBitmap
	add	esp, 40					; 00000028H
; Line 191
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Dist$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 192
	mov	eax, DWORD PTR _Dist$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pData$[ebp], edx
; Line 193
	mov	eax, DWORD PTR _xRem$[ebp]
	sub	eax, DWORD PTR _Dist$[ebp]
	mov	DWORD PTR _xRem$[ebp], eax
; Line 194
	jmp	$LN31@DrawBitmap
$LN29@DrawBitmap:
; Line 198
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Color$[ebp], ecx
	mov	edx, DWORD PTR _pData$[ebp]
	add	edx, 4
	mov	DWORD PTR _pData$[ebp], edx
; Line 199
	mov	eax, DWORD PTR _Color$[ebp]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _Alpha$[ebp], al
; Line 200
	movzx	eax, BYTE PTR _Alpha$[ebp]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN27@DrawBitmap
; Line 201
	mov	eax, DWORD PTR _Color$[ebp]
	cmp	eax, DWORD PTR _PrevColor$[ebp]
	je	SHORT $LN26@DrawBitmap
; Line 202
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	call	_LCD_SetColor
	add	esp, 4
; Line 203
	mov	eax, DWORD PTR _Color$[ebp]
	mov	DWORD PTR _PrevColor$[ebp], eax
$LN26@DrawBitmap:
; Line 205
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _Alpha$[ebp]
	mov	edx, 255				; 000000ffH
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_GUI__SetPixelAlpha
	add	esp, 16					; 00000010H
$LN27@DrawBitmap:
; Line 207
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 208
	mov	eax, DWORD PTR _xRem$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xRem$[ebp], eax
$LN31@DrawBitmap:
; Line 210
	cmp	DWORD PTR _xRem$[ebp], 0
	jne	$LN32@DrawBitmap
; Line 211
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
; Line 212
	mov	eax, DWORD PTR _ysize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _ysize$[ebp], eax
	jne	$LN42@DrawBitmap
$LN40@DrawBitmap:
; Line 213
	jmp	$LN46@DrawBitmap
$LN43@DrawBitmap:
; Line 214
	cmp	DWORD PTR _Mag$[ebp], 1
	jne	$LN24@DrawBitmap
; Line 215
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ysize$[ebp]
	push	edx
	lea	eax, DWORD PTR _xsize$[ebp]
	push	eax
	lea	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	__DoClipping
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN23@DrawBitmap
; Line 216
	jmp	$LN46@DrawBitmap
$LN23@DrawBitmap:
; Line 221
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN22@DrawBitmap
$LN21@DrawBitmap:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN22@DrawBitmap:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _ysize$[ebp]
	jge	$LN20@DrawBitmap
; Line 222
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 223
	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN19@DrawBitmap
$LN18@DrawBitmap:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN19@DrawBitmap:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jge	$LN17@DrawBitmap
; Line 224
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Color$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 225
	mov	eax, DWORD PTR _Color$[ebp]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _Alpha$[ebp], al
; Line 226
	movzx	eax, BYTE PTR _Alpha$[ebp]
	cmp	eax, 255				; 000000ffH
	jge	$LN16@DrawBitmap
; Line 227
	mov	eax, DWORD PTR _Color$[ebp]
	cmp	eax, DWORD PTR _PrevColor$[ebp]
	je	SHORT $LN15@DrawBitmap
; Line 228
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	call	_LCD_SetColor
	add	esp, 4
; Line 229
	mov	eax, DWORD PTR _Color$[ebp]
	mov	DWORD PTR _PrevColor$[ebp], eax
$LN15@DrawBitmap:
; Line 231
	movzx	eax, BYTE PTR _Alpha$[ebp]
	test	eax, eax
	je	SHORT $LN14@DrawBitmap
; Line 232
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _Alpha$[ebp]
	mov	edx, 255				; 000000ffH
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_GUI__SetPixelAlpha
	add	esp, 16					; 00000010H
; Line 233
	jmp	SHORT $LN16@DrawBitmap
$LN14@DrawBitmap:
; Line 234
	mov	esi, esp
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _x0$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _GUI_Context+17
	mov	edx, DWORD PTR _GUI_Context[ecx*4+72]
	push	edx
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	ecx, DWORD PTR _GUI_Context[eax*4+72]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@DrawBitmap:
; Line 237
	jmp	$LN18@DrawBitmap
$LN17@DrawBitmap:
; Line 238
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pData$[ebp], edx
; Line 239
	jmp	$LN21@DrawBitmap
$LN20@DrawBitmap:
; Line 240
	jmp	$LN12@DrawBitmap
$LN24@DrawBitmap:
; Line 244
	mov	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _y$[ebp], eax
	mov	DWORD PTR _yi$[ebp], 0
	jmp	SHORT $LN11@DrawBitmap
$LN10@DrawBitmap:
	mov	eax, DWORD PTR _yi$[ebp]
	add	eax, 1
	mov	DWORD PTR _yi$[ebp], eax
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _yMag$[ebp]
	mov	DWORD PTR _y$[ebp], ecx
	mov	edx, DWORD PTR _pPixel$[ebp]
	add	edx, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pPixel$[ebp], edx
$LN11@DrawBitmap:
	mov	eax, DWORD PTR _yi$[ebp]
	cmp	eax, DWORD PTR _ysize$[ebp]
	jge	$LN12@DrawBitmap
; Line 245
	mov	eax, DWORD PTR _yMag$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _yMax$[ebp], edx
; Line 249
	movsx	eax, WORD PTR _GUI_Context+10
	cmp	DWORD PTR _yMax$[ebp], eax
	jl	$LN8@DrawBitmap
	movsx	eax, WORD PTR _GUI_Context+14
	cmp	DWORD PTR _y$[ebp], eax
	jg	$LN8@DrawBitmap
; Line 250
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 251
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	mov	DWORD PTR _xi$[ebp], 0
	jmp	SHORT $LN7@DrawBitmap
$LN6@DrawBitmap:
	mov	eax, DWORD PTR _xi$[ebp]
	add	eax, 1
	mov	DWORD PTR _xi$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _xMag$[ebp]
	mov	DWORD PTR _x$[ebp], ecx
$LN7@DrawBitmap:
	mov	eax, DWORD PTR _xi$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jge	$LN8@DrawBitmap
; Line 252
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Color$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 253
	mov	eax, DWORD PTR _Color$[ebp]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _Alpha$[ebp], al
; Line 254
	mov	eax, DWORD PTR _Color$[ebp]
	cmp	eax, DWORD PTR _PrevColor$[ebp]
	je	SHORT $LN4@DrawBitmap
; Line 255
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	call	_LCD_SetColor
	add	esp, 4
; Line 256
	mov	eax, DWORD PTR _Color$[ebp]
	mov	DWORD PTR _PrevColor$[ebp], eax
$LN4@DrawBitmap:
; Line 258
	movzx	eax, BYTE PTR _Alpha$[ebp]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN3@DrawBitmap
; Line 259
	movzx	eax, BYTE PTR _Alpha$[ebp]
	test	eax, eax
	je	SHORT $LN2@DrawBitmap
; Line 260
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _Alpha$[ebp]
	mov	edx, 255				; 000000ffH
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _yMax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xMag$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__FillRectAlpha
	add	esp, 24					; 00000018H
; Line 261
	jmp	SHORT $LN3@DrawBitmap
$LN2@DrawBitmap:
; Line 262
	mov	eax, DWORD PTR _yMax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xMag$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
$LN3@DrawBitmap:
; Line 265
	jmp	$LN6@DrawBitmap
$LN8@DrawBitmap:
; Line 267
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pData$[ebp], edx
; Line 268
	jmp	$LN10@DrawBitmap
$LN12@DrawBitmap:
; Line 270
	mov	eax, DWORD PTR _OldColor$[ebp]
	push	eax
	call	_GUI_SetColor
	add	esp, 4
$LN46@DrawBitmap:
; Line 272
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN50@DrawBitmap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 408				; 00000198H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN50@DrawBitmap:
	DD	1
	DD	$LN49@DrawBitmap
$LN49@DrawBitmap:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN48@DrawBitmap
$LN48@DrawBitmap:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
__DrawBitmap ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __FillRectAlpha
_TEXT	SEGMENT
_x$8352 = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_Alpha$ = 24						; size = 1
_Color$ = 28						; size = 4
__FillRectAlpha PROC					; COMDAT
; Line 35
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN6@FillRectAl:
; Line 38
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x$8352[ebp], eax
	jmp	SHORT $LN3@FillRectAl
$LN2@FillRectAl:
	mov	eax, DWORD PTR _x$8352[ebp]
	add	eax, 1
	mov	DWORD PTR _x$8352[ebp], eax
$LN3@FillRectAl:
	mov	eax, DWORD PTR _x$8352[ebp]
	cmp	eax, DWORD PTR _x1$[ebp]
	jg	SHORT $LN5@FillRectAl
; Line 39
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _Alpha$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$8352[ebp]
	push	eax
	call	_GUI__SetPixelAlpha
	add	esp, 16					; 00000010H
; Line 40
	jmp	SHORT $LN2@FillRectAl
$LN5@FillRectAl:
; Line 41
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
	mov	ecx, DWORD PTR _y0$[ebp]
	cmp	ecx, DWORD PTR _y1$[ebp]
	jle	SHORT $LN6@FillRectAl
; Line 42
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FillRectAlpha ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDistToNextAlpha
_TEXT	SEGMENT
tv66 = -208						; size = 4
_Cnt$ = -8						; size = 4
_pPixel$ = 8						; size = 4
_RemPixels$ = 12					; size = 4
__GetDistToNextAlpha PROC				; COMDAT
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 49
	mov	DWORD PTR _Cnt$[ebp], 0
$LN4@GetDistToN:
; Line 51
	mov	eax, DWORD PTR _pPixel$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, -16777216				; ff000000H
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR _pPixel$[ebp]
	add	edx, 4
	mov	DWORD PTR _pPixel$[ebp], edx
	cmp	DWORD PTR tv66[ebp], 0
	je	SHORT $LN1@GetDistToN
; Line 52
	jmp	SHORT $LN2@GetDistToN
$LN1@GetDistToN:
; Line 54
	mov	eax, DWORD PTR _Cnt$[ebp]
	add	eax, 1
	mov	DWORD PTR _Cnt$[ebp], eax
; Line 55
	mov	eax, DWORD PTR _RemPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _RemPixels$[ebp], eax
	jne	SHORT $LN4@GetDistToN
$LN2@GetDistToN:
; Line 56
	mov	eax, DWORD PTR _Cnt$[ebp]
; Line 57
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDistToNextAlpha ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DoClipping
_TEXT	SEGMENT
_pData$ = -44						; size = 4
_Diff$ = -32						; size = 4
_y1$ = -20						; size = 4
_x1$ = -8						; size = 4
_px0$ = 8						; size = 4
_py0$ = 12						; size = 4
_pxsize$ = 16						; size = 4
_pysize$ = 20						; size = 4
_ppData$ = 24						; size = 4
_BytesPerLine$ = 28					; size = 4
__DoClipping PROC					; COMDAT
; Line 63
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 66
	mov	eax, DWORD PTR _ppData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pData$[ebp], ecx
; Line 70
	mov	eax, DWORD PTR _py0$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pysize$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _y1$[ebp], ecx
; Line 71
	mov	eax, DWORD PTR _px0$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pxsize$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _x1$[ebp], ecx
; Line 75
	movsx	eax, WORD PTR _GUI_Context+10
	mov	ecx, DWORD PTR _py0$[ebp]
	cmp	DWORD PTR [ecx], eax
	jge	SHORT $LN6@DoClipping
; Line 76
	movsx	eax, WORD PTR _GUI_Context+10
	mov	ecx, DWORD PTR _py0$[ebp]
	sub	eax, DWORD PTR [ecx]
	mov	DWORD PTR _Diff$[ebp], eax
; Line 77
	movsx	eax, WORD PTR _GUI_Context+10
	mov	ecx, DWORD PTR _py0$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 79
	mov	eax, DWORD PTR _Diff$[ebp]
	imul	eax, DWORD PTR _BytesPerLine$[ebp]
	shr	eax, 2
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pData$[ebp], edx
; Line 83
	mov	eax, DWORD PTR _pysize$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _Diff$[ebp]
	mov	edx, DWORD PTR _pysize$[ebp]
	mov	DWORD PTR [edx], ecx
$LN6@DoClipping:
; Line 85
	movsx	eax, WORD PTR _GUI_Context+14
	mov	ecx, DWORD PTR _y1$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _Diff$[ebp], ecx
; Line 86
	cmp	DWORD PTR _Diff$[ebp], 0
	jle	SHORT $LN5@DoClipping
; Line 87
	mov	eax, DWORD PTR _pysize$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _Diff$[ebp]
	mov	edx, DWORD PTR _pysize$[ebp]
	mov	DWORD PTR [edx], ecx
$LN5@DoClipping:
; Line 89
	mov	eax, DWORD PTR _pysize$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN4@DoClipping
; Line 90
	mov	eax, 1
	jmp	SHORT $LN7@DoClipping
$LN4@DoClipping:
; Line 95
	movsx	eax, WORD PTR _GUI_Context+12
	mov	ecx, DWORD PTR _x1$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _Diff$[ebp], ecx
; Line 96
	cmp	DWORD PTR _Diff$[ebp], 0
	jle	SHORT $LN3@DoClipping
; Line 97
	mov	eax, DWORD PTR _pxsize$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _Diff$[ebp]
	mov	edx, DWORD PTR _pxsize$[ebp]
	mov	DWORD PTR [edx], ecx
$LN3@DoClipping:
; Line 102
	movsx	eax, WORD PTR _GUI_Context+8
	mov	ecx, DWORD PTR _px0$[ebp]
	cmp	DWORD PTR [ecx], eax
	jge	SHORT $LN2@DoClipping
; Line 103
	movsx	eax, WORD PTR _GUI_Context+8
	mov	ecx, DWORD PTR _px0$[ebp]
	sub	eax, DWORD PTR [ecx]
	mov	DWORD PTR _Diff$[ebp], eax
; Line 104
	mov	eax, DWORD PTR _pxsize$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _Diff$[ebp]
	mov	edx, DWORD PTR _pxsize$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 105
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pData$[ebp], edx
; Line 106
	mov	eax, DWORD PTR _px0$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _Diff$[ebp]
	mov	edx, DWORD PTR _px0$[ebp]
	mov	DWORD PTR [edx], ecx
$LN2@DoClipping:
; Line 108
	mov	eax, DWORD PTR _pxsize$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@DoClipping
; Line 109
	mov	eax, 1
	jmp	SHORT $LN7@DoClipping
$LN1@DoClipping:
; Line 111
	mov	eax, DWORD PTR _ppData$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 112
	xor	eax, eax
$LN7@DoClipping:
; Line 113
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__DoClipping ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitmapHW_8888
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xsize$ = 16						; size = 4
_ysize$ = 20						; size = 4
_pPixel$ = 24						; size = 4
_pLogPal$ = 28						; size = 4
_xMag$ = 32						; size = 4
_yMag$ = 36						; size = 4
__DrawBitmapHW_8888 PROC				; COMDAT
; Line 317
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 318
	mov	eax, DWORD PTR _pLogPal$[ebp]
	mov	DWORD PTR _pLogPal$[ebp], eax
; Line 319
	mov	eax, DWORD PTR _xMag$[ebp]
	mov	DWORD PTR _xMag$[ebp], eax
; Line 320
	mov	eax, DWORD PTR _yMag$[ebp]
	mov	DWORD PTR _yMag$[ebp], eax
; Line 321
	mov	eax, DWORD PTR _pPixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ysize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	__DrawBitmapHW
	add	esp, 20					; 00000014H
; Line 322
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitmapHW_8888 ENDP
_TEXT	ENDS
EXTRN	_GUI_SetColorIndex:PROC
EXTRN	_LCD_Color2Index:PROC
EXTRN	_LCD_GetColorIndex:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitmapHW
_TEXT	SEGMENT
_Color$8503 = -92					; size = 4
_Index$8502 = -80					; size = 4
_p$8498 = -68						; size = 4
_x$8497 = -56						; size = 4
_BytesPerLine$ = -44					; size = 4
_OldIndex$ = -32					; size = 4
_y$ = -20						; size = 4
_pData$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xsize$ = 16						; size = 4
_ysize$ = 20						; size = 4
_pPixel$ = 24						; size = 4
__DrawBitmapHW PROC					; COMDAT
; Line 278
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 281
	call	_LCD_GetColorIndex
	mov	DWORD PTR _OldIndex$[ebp], eax
; Line 282
	mov	eax, DWORD PTR _pPixel$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 283
	mov	eax, DWORD PTR _xsize$[ebp]
	shl	eax, 2
	mov	DWORD PTR _BytesPerLine$[ebp], eax
; Line 284
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ysize$[ebp]
	push	edx
	lea	eax, DWORD PTR _xsize$[ebp]
	push	eax
	lea	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	__DoClipping
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN7@DrawBitmap@2
; Line 285
	jmp	$LN8@DrawBitmap@2
$LN7@DrawBitmap@2:
; Line 290
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN6@DrawBitmap@2
$LN5@DrawBitmap@2:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN6@DrawBitmap@2:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _ysize$[ebp]
	jge	$LN4@DrawBitmap@2
; Line 292
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _p$8498[ebp], eax
; Line 293
	mov	DWORD PTR _x$8497[ebp], 0
	jmp	SHORT $LN3@DrawBitmap@2
$LN2@DrawBitmap@2:
	mov	eax, DWORD PTR _x$8497[ebp]
	add	eax, 1
	mov	DWORD PTR _x$8497[ebp], eax
$LN3@DrawBitmap@2:
	mov	eax, DWORD PTR _x$8497[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jge	SHORT $LN1@DrawBitmap@2
; Line 295
	mov	eax, DWORD PTR _p$8498[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Color$8503[ebp], ecx
	mov	edx, DWORD PTR _p$8498[ebp]
	add	edx, 4
	mov	DWORD PTR _p$8498[ebp], edx
; Line 296
	mov	eax, DWORD PTR _Color$8503[ebp]
	push	eax
	call	_LCD_Color2Index
	add	esp, 4
	mov	DWORD PTR _Index$8502[ebp], eax
; Line 297
	mov	esi, esp
	mov	eax, DWORD PTR _Index$8502[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$8497[ebp]
	add	edx, DWORD PTR _x0$[ebp]
	push	edx
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	ecx, DWORD PTR _GUI_Context[eax*4+72]
	push	ecx
	movzx	edx, BYTE PTR _GUI_Context+17
	mov	eax, DWORD PTR _GUI_Context[edx*4+72]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 298
	jmp	SHORT $LN2@DrawBitmap@2
$LN1@DrawBitmap@2:
; Line 299
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pData$[ebp], edx
; Line 300
	jmp	$LN5@DrawBitmap@2
$LN4@DrawBitmap@2:
; Line 301
	mov	eax, DWORD PTR _OldIndex$[ebp]
	push	eax
	call	_GUI_SetColorIndex
	add	esp, 4
$LN8@DrawBitmap@2:
; Line 302
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@DrawBitmap@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@DrawBitmap@2:
	DD	1
	DD	$LN11@DrawBitmap@2
$LN11@DrawBitmap@2:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@DrawBitmap@2
$LN10@DrawBitmap@2:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
__DrawBitmapHW ENDP
_TEXT	ENDS
END
