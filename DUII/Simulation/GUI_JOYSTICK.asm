; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_JOYSTICK.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
PUBLIC	_GUI_JOYSTICK_StoreState
EXTRN	_GUI_PID_StoreState:PROC
EXTRN	_LCD_GetYSize:PROC
EXTRN	_LCD_GetXSize:PROC
EXTRN	_GUI_PID_GetState:PROC
EXTRN	_memcmp:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
?TimeAcc@?1??GUI_JOYSTICK_StoreState@@9@9 DD 01H DUP (?) ; `GUI_JOYSTICK_StoreState'::`2'::TimeAcc
?StatePrev@?1??GUI_JOYSTICK_StoreState@@9@9 DB 0cH DUP (?) ; `GUI_JOYSTICK_StoreState'::`2'::StatePrev
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_joystick.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_JOYSTICK_StoreState
_TEXT	SEGMENT
_Max$7958 = -44						; size = 4
_State$7957 = -32					; size = 12
_IsDifferent$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_pState$ = 8						; size = 4
_GUI_JOYSTICK_StoreState PROC				; COMDAT
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 42
	push	12					; 0000000cH
	push	OFFSET ?StatePrev@?1??GUI_JOYSTICK_StoreState@@9@9
	mov	eax, DWORD PTR _pState$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _IsDifferent$[ebp], eax
; Line 46
	cmp	DWORD PTR _IsDifferent$[ebp], 0
	jne	SHORT $LN13@GUI_JOYSTI
; Line 47
	cmp	DWORD PTR ?TimeAcc@?1??GUI_JOYSTICK_StoreState@@9@9, 10 ; 0000000aH
	jge	SHORT $LN12@GUI_JOYSTI
; Line 48
	mov	eax, DWORD PTR ?TimeAcc@?1??GUI_JOYSTICK_StoreState@@9@9
	add	eax, 1
	mov	DWORD PTR ?TimeAcc@?1??GUI_JOYSTICK_StoreState@@9@9, eax
$LN12@GUI_JOYSTI:
; Line 50
	jmp	SHORT $LN11@GUI_JOYSTI
$LN13@GUI_JOYSTI:
; Line 51
	mov	DWORD PTR ?TimeAcc@?1??GUI_JOYSTICK_StoreState@@9@9, 1
$LN11@GUI_JOYSTI:
; Line 53
	mov	eax, DWORD PTR _pState$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN9@GUI_JOYSTI
	mov	eax, DWORD PTR _pState$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@GUI_JOYSTI
	mov	eax, DWORD PTR _pState$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	jne	SHORT $LN9@GUI_JOYSTI
	cmp	DWORD PTR _IsDifferent$[ebp], 0
	je	$LN14@GUI_JOYSTI
$LN9@GUI_JOYSTI:
; Line 59
	lea	eax, DWORD PTR _State$7957[ebp]
	push	eax
	call	_GUI_PID_GetState
	add	esp, 4
; Line 60
	mov	eax, DWORD PTR _pState$[ebp]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN8@GUI_JOYSTI
; Line 61
	mov	eax, DWORD PTR _State$7957[ebp]
	sub	eax, DWORD PTR ?TimeAcc@?1??GUI_JOYSTICK_StoreState@@9@9
	mov	DWORD PTR _State$7957[ebp], eax
$LN8@GUI_JOYSTI:
; Line 63
	mov	eax, DWORD PTR _pState$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN7@GUI_JOYSTI
; Line 64
	mov	eax, DWORD PTR _State$7957[ebp]
	add	eax, DWORD PTR ?TimeAcc@?1??GUI_JOYSTICK_StoreState@@9@9
	mov	DWORD PTR _State$7957[ebp], eax
$LN7@GUI_JOYSTI:
; Line 66
	mov	eax, DWORD PTR _pState$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jge	SHORT $LN6@GUI_JOYSTI
; Line 67
	mov	eax, DWORD PTR _State$7957[ebp+4]
	sub	eax, DWORD PTR ?TimeAcc@?1??GUI_JOYSTICK_StoreState@@9@9
	mov	DWORD PTR _State$7957[ebp+4], eax
$LN6@GUI_JOYSTI:
; Line 69
	mov	eax, DWORD PTR _pState$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN5@GUI_JOYSTI
; Line 70
	mov	eax, DWORD PTR _State$7957[ebp+4]
	add	eax, DWORD PTR ?TimeAcc@?1??GUI_JOYSTICK_StoreState@@9@9
	mov	DWORD PTR _State$7957[ebp+4], eax
$LN5@GUI_JOYSTI:
; Line 72
	mov	eax, DWORD PTR _pState$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR _State$7957[ebp+8], cl
; Line 76
	cmp	DWORD PTR _State$7957[ebp], 0
	jge	SHORT $LN4@GUI_JOYSTI
; Line 77
	mov	DWORD PTR _State$7957[ebp], 0
$LN4@GUI_JOYSTI:
; Line 79
	cmp	DWORD PTR _State$7957[ebp+4], 0
	jge	SHORT $LN3@GUI_JOYSTI
; Line 80
	mov	DWORD PTR _State$7957[ebp+4], 0
$LN3@GUI_JOYSTI:
; Line 82
	call	_LCD_GetXSize
	sub	eax, 1
	mov	DWORD PTR _Max$7958[ebp], eax
; Line 83
	mov	eax, DWORD PTR _State$7957[ebp]
	cmp	eax, DWORD PTR _Max$7958[ebp]
	jl	SHORT $LN2@GUI_JOYSTI
; Line 84
	mov	eax, DWORD PTR _Max$7958[ebp]
	mov	DWORD PTR _State$7957[ebp], eax
$LN2@GUI_JOYSTI:
; Line 86
	call	_LCD_GetYSize
	sub	eax, 1
	mov	DWORD PTR _Max$7958[ebp], eax
; Line 87
	mov	eax, DWORD PTR _State$7957[ebp+4]
	cmp	eax, DWORD PTR _Max$7958[ebp]
	jle	SHORT $LN1@GUI_JOYSTI
; Line 88
	mov	eax, DWORD PTR _Max$7958[ebp]
	mov	DWORD PTR _State$7957[ebp+4], eax
$LN1@GUI_JOYSTI:
; Line 93
	lea	eax, DWORD PTR _State$7957[ebp]
	push	eax
	call	_GUI_PID_StoreState
	add	esp, 4
; Line 94
	mov	eax, DWORD PTR _pState$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?StatePrev@?1??GUI_JOYSTICK_StoreState@@9@9, ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR ?StatePrev@?1??GUI_JOYSTICK_StoreState@@9@9+4, edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR ?StatePrev@?1??GUI_JOYSTICK_StoreState@@9@9+8, eax
$LN14@GUI_JOYSTI:
; Line 96
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@GUI_JOYSTI
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@GUI_JOYSTI:
	DD	1
	DD	$LN17@GUI_JOYSTI
$LN17@GUI_JOYSTI:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN16@GUI_JOYSTI
$LN16@GUI_JOYSTI:
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_GUI_JOYSTICK_StoreState ENDP
_TEXT	ENDS
END
