; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\DUII\AnalogInputsScale.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_ValueHighPaint
PUBLIC	_DisplayValueHigh
PUBLIC	_ValueLowPaint
PUBLIC	_DisplayValueLow
PUBLIC	_VoltsHighPaint
PUBLIC	_DisplayVoltsHigh
PUBLIC	_VoltsLowPaint
PUBLIC	_DisplayVoltsLow
PUBLIC	_AnalogInputsScaleScreenList
_DATA	SEGMENT
COMM	_voltsLowString:BYTE:012H
COMM	_voltsHighString:BYTE:012H
COMM	_valueHighString:BYTE:012H
COMM	_valueLowString:BYTE:012H
_DATA	ENDS
_BSS	SEGMENT
_pVoltsLow DD	01H DUP (?)
_pVoltsHigh DD	01H DUP (?)
_pValueLow DD	01H DUP (?)
_pValueHigh DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_AnalogInputsScaleScreenList DD 00H
	DD	FLAT:_DisplayVoltsLow
	DD	FLAT:_VoltsLowPaint
	DD	01H
	DD	FLAT:_DisplayVoltsHigh
	DD	FLAT:_VoltsHighPaint
	DD	02H
	DD	FLAT:_DisplayValueLow
	DD	FLAT:_ValueLowPaint
	DD	03H
	DD	FLAT:_DisplayValueHigh
	DD	FLAT:_ValueHighPaint
	DD	0ffffffffH
	DD	00H
	DD	00H
$SG19434 DB	'Volts Low - Analog %d', 00H
	ORG $+2
$SG19435 DB	'%f', 00H
	ORG $+1
$SG19440 DB	'Volts High - Analog %d', 00H
	ORG $+1
$SG19441 DB	'%f', 00H
	ORG $+1
$SG19446 DB	'Value Low - Analog %d', 00H
	ORG $+2
$SG19447 DB	'%f', 00H
	ORG $+1
$SG19452 DB	'Value High - Analog %d', 00H
	ORG $+1
$SG19453 DB	'%f', 00H
_DATA	ENDS
PUBLIC	_GetAnalogInputsScaleWindowHandle
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
_hAnalogInputsScale DD 01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\duii\duii\analoginputsscale.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GetAnalogInputsScaleWindowHandle
_TEXT	SEGMENT
_GetAnalogInputsScaleWindowHandle PROC			; COMDAT
; Line 92
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 93
	mov	eax, DWORD PTR _hAnalogInputsScale
; Line 94
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GetAnalogInputsScaleWindowHandle ENDP
_TEXT	ENDS
PUBLIC	_SetAnalogInputsScaleWindowHandle
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SetAnalogInputsScaleWindowHandle
_TEXT	SEGMENT
_hWin$ = 8						; size = 4
_SetAnalogInputsScaleWindowHandle PROC			; COMDAT
; Line 97
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 98
	mov	eax, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR _hAnalogInputsScale, eax
; Line 99
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SetAnalogInputsScaleWindowHandle ENDP
_TEXT	ENDS
PUBLIC	_SaveData
EXTRN	_vehicleData:BYTE
EXTRN	_globalInput:BYTE
EXTRN	_atof:PROC
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SaveData
_TEXT	SEGMENT
_type$ = 8						; size = 4
_SaveData PROC						; COMDAT
; Line 102
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 103
	mov	eax, DWORD PTR _type$[ebp]
	cmp	eax, DWORD PTR _pVoltsLow
	jne	SHORT $LN7@SaveData
; Line 104
	push	OFFSET _voltsLowString
	call	_atof
	add	esp, 4
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fstp	DWORD PTR _vehicleData[eax+164]
	jmp	SHORT $LN1@SaveData
$LN7@SaveData:
; Line 105
	mov	eax, DWORD PTR _type$[ebp]
	cmp	eax, DWORD PTR _pVoltsHigh
	jne	SHORT $LN5@SaveData
; Line 106
	push	OFFSET _voltsHighString
	call	_atof
	add	esp, 4
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fstp	DWORD PTR _vehicleData[eax+168]
	jmp	SHORT $LN1@SaveData
$LN5@SaveData:
; Line 107
	mov	eax, DWORD PTR _type$[ebp]
	cmp	eax, DWORD PTR _pValueLow
	jne	SHORT $LN3@SaveData
; Line 108
	push	OFFSET _valueLowString
	call	_atof
	add	esp, 4
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fstp	DWORD PTR _vehicleData[eax+172]
	jmp	SHORT $LN1@SaveData
$LN3@SaveData:
; Line 109
	mov	eax, DWORD PTR _type$[ebp]
	cmp	eax, DWORD PTR _pValueHigh
	jne	SHORT $LN1@SaveData
; Line 110
	push	OFFSET _valueHighString
	call	_atof
	add	esp, 4
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fstp	DWORD PTR _vehicleData[eax+176]
$LN1@SaveData:
; Line 111
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SaveData ENDP
_TEXT	ENDS
PUBLIC	_AnalogInputsScaleIgnoreNextKeyRelease
PUBLIC	_AnalogInputsScaleCallback
EXTRN	_WM_DefaultProc:PROC
EXTRN	_GetScreenType:PROC
EXTRN	_WM_RestartTimer:PROC
EXTRN	_hScreenTimer:DWORD
EXTRN	_DisplayNewScreenList:PROC
EXTRN	_GetLastScreen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _AnalogInputsScaleCallback
_TEXT	SEGMENT
tv64 = -196						; size = 4
_pMsg$ = 8						; size = 4
_AnalogInputsScaleCallback PROC				; COMDAT
; Line 114
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 115
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 27			; 0000001bH
	jg	SHORT $LN14@AnalogInpu
	cmp	DWORD PTR tv64[ebp], 27			; 0000001bH
	je	SHORT $LN9@AnalogInpu
	cmp	DWORD PTR tv64[ebp], 1
	je	$LN4@AnalogInpu
	cmp	DWORD PTR tv64[ebp], 15			; 0000000fH
	je	$LN3@AnalogInpu
	cmp	DWORD PTR tv64[ebp], 26			; 0000001aH
	je	SHORT $LN8@AnalogInpu
	jmp	$LN1@AnalogInpu
$LN14@AnalogInpu:
	cmp	DWORD PTR tv64[ebp], 28			; 0000001cH
	je	SHORT $LN7@AnalogInpu
	cmp	DWORD PTR tv64[ebp], 275		; 00000113H
	je	SHORT $LN6@AnalogInpu
	jmp	$LN1@AnalogInpu
$LN9@AnalogInpu:
; Line 118
	mov	eax, DWORD PTR _hAnalogInputsScale
	push	eax
	push	15					; 0000000fH
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	15					; 0000000fH
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 119
	jmp	$LN12@AnalogInpu
$LN8@AnalogInpu:
; Line 122
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_SaveData
	add	esp, 4
; Line 123
	jmp	$LN12@AnalogInpu
$LN7@AnalogInpu:
; Line 126
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_SaveData
	add	esp, 4
; Line 127
	mov	eax, DWORD PTR _hAnalogInputsScale
	push	eax
	push	15					; 0000000fH
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	15					; 0000000fH
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 128
	jmp	SHORT $LN12@AnalogInpu
$LN6@AnalogInpu:
; Line 131
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _hScreenTimer
	jne	SHORT $LN5@AnalogInpu
; Line 133
	push	125					; 0000007dH
	mov	eax, DWORD PTR _hScreenTimer
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
$LN5@AnalogInpu:
; Line 137
	jmp	SHORT $LN12@AnalogInpu
$LN4@AnalogInpu:
; Line 140
	call	_AnalogInputsScaleIgnoreNextKeyRelease
; Line 141
	jmp	SHORT $LN12@AnalogInpu
$LN3@AnalogInpu:
; Line 144
	call	_GetScreenType
	cmp	eax, 18					; 00000012H
	jne	SHORT $LN2@AnalogInpu
; Line 147
	mov	esi, esp
	mov	eax, DWORD PTR _hAnalogInputsScale
	push	eax
	push	18					; 00000012H
	call	_GetLastScreen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _AnalogInputsScaleScreenList[eax+8]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@AnalogInpu:
; Line 152
	jmp	SHORT $LN12@AnalogInpu
$LN1@AnalogInpu:
; Line 155
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN12@AnalogInpu:
; Line 157
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AnalogInputsScaleCallback ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_CreateKeyboard:PROC
EXTRN	_trimn:PROC
EXTRN	_sprintf:PROC
EXTRN	_InputCleanUpKeyboards:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayVoltsLow
_TEXT	SEGMENT
_scratch$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_hParent$ = 8						; size = 4
_DisplayVoltsLow PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 163
	call	_InputCleanUpKeyboards
; Line 167
	movzx	eax, BYTE PTR _globalInput
	push	eax
	push	OFFSET $SG19434
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 168
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+164]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG19435
	push	OFFSET _voltsLowString
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 169
	push	9
	push	OFFSET _voltsLowString
	call	_trimn
	add	esp, 8
; Line 170
	push	1
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	0
	push	9
	push	1
	push	2
	push	OFFSET _voltsLowString
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_CreateKeyboard
	add	esp, 32					; 00000020H
	mov	DWORD PTR _pVoltsLow, eax
; Line 171
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@DisplayVol
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@DisplayVol:
	DD	1
	DD	$LN4@DisplayVol
$LN4@DisplayVol:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN3@DisplayVol
$LN3@DisplayVol:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_DisplayVoltsLow ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayVoltsHigh
_TEXT	SEGMENT
_scratch$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_hParent$ = 8						; size = 4
_DisplayVoltsHigh PROC					; COMDAT
; Line 174
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 177
	call	_InputCleanUpKeyboards
; Line 181
	movzx	eax, BYTE PTR _globalInput
	push	eax
	push	OFFSET $SG19440
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 182
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+168]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG19441
	push	OFFSET _voltsHighString
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 183
	push	9
	push	OFFSET _voltsHighString
	call	_trimn
	add	esp, 8
; Line 184
	push	1
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	1
	push	9
	push	1
	push	2
	push	OFFSET _voltsHighString
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_CreateKeyboard
	add	esp, 32					; 00000020H
	mov	DWORD PTR _pVoltsHigh, eax
; Line 185
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@DisplayVol@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@DisplayVol@2:
	DD	1
	DD	$LN4@DisplayVol@2
$LN4@DisplayVol@2:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN3@DisplayVol@2
$LN3@DisplayVol@2:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_DisplayVoltsHigh ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayValueLow
_TEXT	SEGMENT
_scratch$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_hParent$ = 8						; size = 4
_DisplayValueLow PROC					; COMDAT
; Line 188
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 191
	call	_InputCleanUpKeyboards
; Line 195
	movzx	eax, BYTE PTR _globalInput
	push	eax
	push	OFFSET $SG19446
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 196
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+172]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG19447
	push	OFFSET _valueLowString
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 197
	push	9
	push	OFFSET _valueLowString
	call	_trimn
	add	esp, 8
; Line 198
	push	1
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	2
	push	9
	push	1
	push	2
	push	OFFSET _valueLowString
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_CreateKeyboard
	add	esp, 32					; 00000020H
	mov	DWORD PTR _pValueLow, eax
; Line 199
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@DisplayVal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@DisplayVal:
	DD	1
	DD	$LN4@DisplayVal
$LN4@DisplayVal:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN3@DisplayVal
$LN3@DisplayVal:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_DisplayValueLow ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayValueHigh
_TEXT	SEGMENT
_scratch$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_hParent$ = 8						; size = 4
_DisplayValueHigh PROC					; COMDAT
; Line 202
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 205
	call	_InputCleanUpKeyboards
; Line 209
	movzx	eax, BYTE PTR _globalInput
	push	eax
	push	OFFSET $SG19452
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 210
	movzx	eax, BYTE PTR _globalInput
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+176]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG19453
	push	OFFSET _valueHighString
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 211
	push	9
	push	OFFSET _valueHighString
	call	_trimn
	add	esp, 8
; Line 212
	push	1
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	3
	push	9
	push	1
	push	2
	push	OFFSET _valueHighString
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_CreateKeyboard
	add	esp, 32					; 00000020H
	mov	DWORD PTR _pValueHigh, eax
; Line 213
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@DisplayVal@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@DisplayVal@2:
	DD	1
	DD	$LN4@DisplayVal@2
$LN4@DisplayVal@2:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN3@DisplayVal@2
$LN3@DisplayVal@2:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_DisplayValueHigh ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _VoltsLowPaint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_VoltsLowPaint PROC					; COMDAT
; Line 216
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 217
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_VoltsLowPaint ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _VoltsHighPaint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_VoltsHighPaint PROC					; COMDAT
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 222
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_VoltsHighPaint ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ValueLowPaint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_ValueLowPaint PROC					; COMDAT
; Line 225
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 226
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ValueLowPaint ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ValueHighPaint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_ValueHighPaint PROC					; COMDAT
; Line 229
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 230
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ValueHighPaint ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _AnalogInputsScaleIgnoreNextKeyRelease
_TEXT	SEGMENT
_AnalogInputsScaleIgnoreNextKeyRelease PROC		; COMDAT
; Line 233
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 234
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_AnalogInputsScaleIgnoreNextKeyRelease ENDP
_TEXT	ENDS
PUBLIC	_DeleteAnalogScaleKeyboards
EXTRN	_DestroyKeyboard:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DeleteAnalogScaleKeyboards
_TEXT	SEGMENT
_DeleteAnalogScaleKeyboards PROC			; COMDAT
; Line 237
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 238
	cmp	DWORD PTR _pVoltsHigh, 0
	je	SHORT $LN4@DeleteAnal
; Line 240
	mov	eax, DWORD PTR _pVoltsHigh
	push	eax
	call	_DestroyKeyboard
	add	esp, 4
; Line 241
	mov	DWORD PTR _pVoltsHigh, 0
$LN4@DeleteAnal:
; Line 243
	cmp	DWORD PTR _pVoltsLow, 0
	je	SHORT $LN3@DeleteAnal
; Line 245
	mov	eax, DWORD PTR _pVoltsLow
	push	eax
	call	_DestroyKeyboard
	add	esp, 4
; Line 246
	mov	DWORD PTR _pVoltsLow, 0
$LN3@DeleteAnal:
; Line 248
	cmp	DWORD PTR _pValueHigh, 0
	je	SHORT $LN2@DeleteAnal
; Line 250
	mov	eax, DWORD PTR _pValueHigh
	push	eax
	call	_DestroyKeyboard
	add	esp, 4
; Line 251
	mov	DWORD PTR _pValueHigh, 0
$LN2@DeleteAnal:
; Line 253
	cmp	DWORD PTR _pValueLow, 0
	je	SHORT $LN5@DeleteAnal
; Line 255
	mov	eax, DWORD PTR _pValueLow
	push	eax
	call	_DestroyKeyboard
	add	esp, 4
; Line 256
	mov	DWORD PTR _pValueLow, 0
$LN5@DeleteAnal:
; Line 258
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DeleteAnalogScaleKeyboards ENDP
_TEXT	ENDS
END
