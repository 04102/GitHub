; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUICC_0.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_LCD_API_ColorConv_0
CONST	SEGMENT
_LCD_API_ColorConv_0 DD FLAT:__Color2Index_0
	DD	FLAT:__Index2Color_0
	DD	FLAT:__GetIndexMask_0
CONST	ENDS
EXTRN	_GUI_CalcColorDist:PROC
EXTRN	_LCD_GetPalette:PROC
EXTRN	_LCD_GetNumColors:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\guicc_0.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __Color2Index_0
_TEXT	SEGMENT
_BestDiff$ = -68					; size = 4
_Diff$ = -56						; size = 4
_BestIndex$ = -44					; size = 4
_NumEntries$ = -32					; size = 4
_i$ = -20						; size = 4
_pPalEntry$ = -8					; size = 4
_Color$ = 8						; size = 4
__Color2Index_0 PROC					; COMDAT
; Line 35
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 43
	call	_LCD_GetNumColors
	mov	DWORD PTR _NumEntries$[ebp], eax
; Line 44
	mov	DWORD PTR _BestIndex$[ebp], 0
; Line 45
	mov	DWORD PTR _BestDiff$[ebp], 16777215	; 00ffffffH
; Line 49
	mov	DWORD PTR _i$[ebp], 0
; Line 50
	call	_LCD_GetPalette
	mov	DWORD PTR _pPalEntry$[ebp], eax
; Line 51
	cmp	DWORD PTR _pPalEntry$[ebp], 0
	je	SHORT $LN9@Color2Inde
$LN8@Color2Inde:
; Line 53
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pPalEntry$[ebp]
	mov	edx, DWORD PTR _Color$[ebp]
	cmp	edx, DWORD PTR [ecx+eax*4]
	jne	SHORT $LN7@Color2Inde
; Line 54
	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN10@Color2Inde
$LN7@Color2Inde:
; Line 56
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _NumEntries$[ebp]
	jl	SHORT $LN8@Color2Inde
; Line 60
	mov	DWORD PTR _i$[ebp], 0
$LN4@Color2Inde:
; Line 62
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pPalEntry$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	call	_GUI_CalcColorDist
	add	esp, 8
	mov	DWORD PTR _Diff$[ebp], eax
; Line 63
	mov	eax, DWORD PTR _Diff$[ebp]
	cmp	eax, DWORD PTR _BestDiff$[ebp]
	jae	SHORT $LN3@Color2Inde
; Line 64
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _BestDiff$[ebp], eax
; Line 65
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _BestIndex$[ebp], eax
$LN3@Color2Inde:
; Line 67
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _NumEntries$[ebp]
	jl	SHORT $LN4@Color2Inde
$LN9@Color2Inde:
; Line 69
	mov	eax, DWORD PTR _BestIndex$[ebp]
$LN10@Color2Inde:
; Line 70
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Color2Index_0 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Index2Color_0
_TEXT	SEGMENT
_NumEntries$ = -20					; size = 4
_pPalEntry$ = -8					; size = 4
_Index$ = 8						; size = 4
__Index2Color_0 PROC					; COMDAT
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 80
	call	_LCD_GetNumColors
	mov	DWORD PTR _NumEntries$[ebp], eax
; Line 81
	call	_LCD_GetPalette
	mov	DWORD PTR _pPalEntry$[ebp], eax
; Line 82
	mov	eax, DWORD PTR _Index$[ebp]
	cmp	eax, DWORD PTR _NumEntries$[ebp]
	jb	SHORT $LN2@Index2Colo
; Line 83
	xor	eax, eax
	jmp	SHORT $LN3@Index2Colo
$LN2@Index2Colo:
; Line 85
	cmp	DWORD PTR _pPalEntry$[ebp], 0
	jne	SHORT $LN1@Index2Colo
; Line 86
	xor	eax, eax
	jmp	SHORT $LN3@Index2Colo
$LN1@Index2Colo:
; Line 88
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pPalEntry$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
$LN3@Index2Colo:
; Line 89
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Index2Color_0 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetIndexMask_0
_TEXT	SEGMENT
_Shift$ = -20						; size = 4
_NumEntries$ = -8					; size = 4
__GetIndexMask_0 PROC					; COMDAT
; Line 95
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 98
	call	_LCD_GetNumColors
	mov	DWORD PTR _NumEntries$[ebp], eax
; Line 99
	cmp	DWORD PTR _NumEntries$[ebp], 256	; 00000100H
	jne	SHORT $LN16@GetIndexMa
; Line 100
	mov	DWORD PTR _Shift$[ebp], 8
	jmp	SHORT $LN15@GetIndexMa
$LN16@GetIndexMa:
; Line 101
	cmp	DWORD PTR _NumEntries$[ebp], 128	; 00000080H
	jb	SHORT $LN14@GetIndexMa
; Line 102
	mov	DWORD PTR _Shift$[ebp], 7
	jmp	SHORT $LN15@GetIndexMa
$LN14@GetIndexMa:
; Line 103
	cmp	DWORD PTR _NumEntries$[ebp], 64		; 00000040H
	jb	SHORT $LN12@GetIndexMa
; Line 104
	mov	DWORD PTR _Shift$[ebp], 6
	jmp	SHORT $LN15@GetIndexMa
$LN12@GetIndexMa:
; Line 105
	cmp	DWORD PTR _NumEntries$[ebp], 32		; 00000020H
	jb	SHORT $LN10@GetIndexMa
; Line 106
	mov	DWORD PTR _Shift$[ebp], 5
	jmp	SHORT $LN15@GetIndexMa
$LN10@GetIndexMa:
; Line 107
	cmp	DWORD PTR _NumEntries$[ebp], 16		; 00000010H
	jb	SHORT $LN8@GetIndexMa
; Line 108
	mov	DWORD PTR _Shift$[ebp], 4
	jmp	SHORT $LN15@GetIndexMa
$LN8@GetIndexMa:
; Line 109
	cmp	DWORD PTR _NumEntries$[ebp], 8
	jb	SHORT $LN6@GetIndexMa
; Line 110
	mov	DWORD PTR _Shift$[ebp], 3
	jmp	SHORT $LN15@GetIndexMa
$LN6@GetIndexMa:
; Line 111
	cmp	DWORD PTR _NumEntries$[ebp], 4
	jb	SHORT $LN4@GetIndexMa
; Line 112
	mov	DWORD PTR _Shift$[ebp], 2
	jmp	SHORT $LN15@GetIndexMa
$LN4@GetIndexMa:
; Line 113
	cmp	DWORD PTR _NumEntries$[ebp], 2
	jb	SHORT $LN2@GetIndexMa
; Line 114
	mov	DWORD PTR _Shift$[ebp], 1
; Line 115
	jmp	SHORT $LN15@GetIndexMa
$LN2@GetIndexMa:
; Line 116
	mov	DWORD PTR _Shift$[ebp], 0
$LN15@GetIndexMa:
; Line 118
	mov	eax, 1
	mov	ecx, DWORD PTR _Shift$[ebp]
	shl	eax, cl
	sub	eax, 1
; Line 119
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetIndexMask_0 ENDP
_TEXT	ENDS
PUBLIC	_LCD_SetLUTEx
EXTRN	_LCD_SetLUTEntryEx:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LCD_SetLUTEx
_TEXT	SEGMENT
_i$ = -8						; size = 4
_LayerIndex$ = 8					; size = 4
_pPalette$ = 12						; size = 4
_LCD_SetLUTEx PROC					; COMDAT
; Line 147
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 150
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@LCD_SetLUT
$LN2@LCD_SetLUT:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@LCD_SetLUT:
	mov	eax, DWORD PTR _pPalette$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN4@LCD_SetLUT
; Line 151
	mov	eax, DWORD PTR _pPalette$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	movzx	ecx, BYTE PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _LayerIndex$[ebp]
	push	edx
	call	_LCD_SetLUTEntryEx
	add	esp, 12					; 0000000cH
; Line 152
	jmp	SHORT $LN2@LCD_SetLUT
$LN4@LCD_SetLUT:
; Line 153
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LCD_SetLUTEx ENDP
_TEXT	ENDS
PUBLIC	_LCD_SetLUT
EXTRN	_GUI_Context:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LCD_SetLUT
_TEXT	SEGMENT
_pPalette$ = 8						; size = 4
_LCD_SetLUT PROC					; COMDAT
; Line 159
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 160
	mov	eax, DWORD PTR _pPalette$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _GUI_Context+17
	push	ecx
	call	_LCD_SetLUTEx
	add	esp, 8
; Line 161
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LCD_SetLUT ENDP
_TEXT	ENDS
END
