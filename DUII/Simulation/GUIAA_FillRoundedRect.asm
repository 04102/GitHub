; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Antialias\GUIAA_FillRoundedRect.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_AA_FillRoundedRect
EXTRN	_WM__GetNextIVR:PROC
EXTRN	_WM__InitIVRSearch:PROC
EXTRN	_GUI_AA_HiRes2Pixel:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	_WM__GetOrgY_AA:PROC
EXTRN	_WM__GetOrgX_AA:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\antialias\guiaa_fillroundedrect.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_AA_FillRoundedRect
_TEXT	SEGMENT
_Rect$ = -12						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_r$ = 24						; size = 4
_GUI_AA_FillRoundedRect PROC				; COMDAT
; Line 124
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 130
	call	_WM__GetOrgX_AA
	add	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x0$[ebp], eax
	call	_WM__GetOrgY_AA
	add	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _y0$[ebp], eax
; Line 132
	movzx	eax, BYTE PTR _GUI_Context+93
	test	eax, eax
	jne	SHORT $LN5@GUI_AA_Fil
; Line 133
	movzx	eax, BYTE PTR _GUI_Context+92
	imul	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x0$[ebp], eax
; Line 134
	movzx	eax, BYTE PTR _GUI_Context+92
	imul	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _y0$[ebp], eax
; Line 135
	movzx	eax, BYTE PTR _GUI_Context+92
	imul	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _x1$[ebp], eax
; Line 136
	movzx	eax, BYTE PTR _GUI_Context+92
	imul	eax, DWORD PTR _y1$[ebp]
	mov	DWORD PTR _y1$[ebp], eax
; Line 137
	movzx	eax, BYTE PTR _GUI_Context+92
	imul	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _r$[ebp], eax
$LN5@GUI_AA_Fil:
; Line 140
	mov	eax, DWORD PTR _x0$[ebp]
	sub	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_GUI_AA_HiRes2Pixel
	add	esp, 4
	mov	WORD PTR _Rect$[ebp], ax
; Line 141
	mov	eax, DWORD PTR _x1$[ebp]
	add	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_GUI_AA_HiRes2Pixel
	add	esp, 4
	mov	WORD PTR _Rect$[ebp+4], ax
; Line 142
	mov	eax, DWORD PTR _y0$[ebp]
	sub	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_GUI_AA_HiRes2Pixel
	add	esp, 4
	mov	WORD PTR _Rect$[ebp+2], ax
; Line 143
	mov	eax, DWORD PTR _y1$[ebp]
	add	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_GUI_AA_HiRes2Pixel
	add	esp, 4
	mov	WORD PTR _Rect$[ebp+6], ax
; Line 144
	lea	eax, DWORD PTR _Rect$[ebp]
	push	eax
	call	_WM__InitIVRSearch
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@GUI_AA_Fil
$LN3@GUI_AA_Fil:
; Line 146
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x1$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	__FillRoundedRectAA_HiRes
	add	esp, 20					; 00000014H
; Line 148
	call	_WM__GetNextIVR
	test	eax, eax
	jne	SHORT $LN3@GUI_AA_Fil
$LN6@GUI_AA_Fil:
; Line 151
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@GUI_AA_Fil
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@GUI_AA_Fil:
	DD	1
	DD	$LN9@GUI_AA_Fil
$LN9@GUI_AA_Fil:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN8@GUI_AA_Fil
$LN8@GUI_AA_Fil:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_GUI_AA_FillRoundedRect ENDP
_TEXT	ENDS
EXTRN	_GUI_AA_Exit:PROC
EXTRN	_GUI_AA_Init_HiRes:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __FillRoundedRectAA_HiRes
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_r$ = 24						; size = 4
__FillRoundedRectAA_HiRes PROC				; COMDAT
; Line 99
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 103
	mov	eax, DWORD PTR _x1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_GUI_AA_Init_HiRes
	add	esp, 8
; Line 107
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x1$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	__FillRoundedRect
	add	esp, 20					; 00000014H
; Line 111
	call	_GUI_AA_Exit
; Line 112
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FillRoundedRectAA_HiRes ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __FillRoundedRect
_TEXT	SEGMENT
_yMax$ = -68						; size = 4
_yMin$ = -56						; size = 4
_sqmax$ = -44						; size = 4
_y$ = -32						; size = 4
_x$ = -20						; size = 4
_i$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_r$ = 24						; size = 4
__FillRoundedRect PROC					; COMDAT
; Line 35
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 40
	mov	ecx, DWORD PTR _r$[ebp]
	imul	ecx, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR _r$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	mov	DWORD PTR _sqmax$[ebp], ecx
; Line 44
	mov	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _yMin$[ebp], eax
; Line 45
	mov	eax, DWORD PTR _y1$[ebp]
	mov	DWORD PTR _yMax$[ebp], eax
; Line 49
	cmp	DWORD PTR _GUI_Context+20, 0
	je	SHORT $LN18@FillRounde
; Line 50
	mov	eax, DWORD PTR _GUI_Context+20
	movsx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _yMax$[ebp], ecx
	jle	SHORT $LN17@FillRounde
; Line 51
	mov	eax, DWORD PTR _GUI_Context+20
	movsx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR _yMax$[ebp], ecx
$LN17@FillRounde:
; Line 53
	mov	eax, DWORD PTR _GUI_Context+20
	movsx	ecx, WORD PTR [eax+2]
	cmp	DWORD PTR _yMin$[ebp], ecx
	jge	SHORT $LN18@FillRounde
; Line 54
	mov	eax, DWORD PTR _GUI_Context+20
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _yMin$[ebp], ecx
$LN18@FillRounde:
; Line 60
	mov	DWORD PTR _i$[ebp], 1
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN15@FillRounde
$LN14@FillRounde:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@FillRounde:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _r$[ebp]
	jge	SHORT $LN13@FillRounde
; Line 61
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _r$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _y$[ebp], eax
; Line 62
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _yMin$[ebp]
	jl	SHORT $LN12@FillRounde
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _yMax$[ebp]
	jg	SHORT $LN12@FillRounde
$LN11@FillRounde:
; Line 66
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	imul	ecx, DWORD PTR _x$[ebp]
	add	eax, ecx
	cmp	eax, DWORD PTR _sqmax$[ebp]
	jle	SHORT $LN10@FillRounde
; Line 67
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 68
	jmp	SHORT $LN11@FillRounde
$LN10@FillRounde:
; Line 69
	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _r$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	add	edx, DWORD PTR _r$[ebp]
	sub	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _GUI_Context+88
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@FillRounde:
; Line 71
	jmp	SHORT $LN14@FillRounde
$LN13@FillRounde:
; Line 75
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN9@FillRounde
$LN8@FillRounde:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@FillRounde:
	mov	eax, DWORD PTR _y1$[ebp]
	sub	eax, DWORD PTR _r$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN7@FillRounde
; Line 76
	mov	esi, esp
	mov	eax, DWORD PTR _x1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _GUI_Context+88
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 77
	jmp	SHORT $LN8@FillRounde
$LN7@FillRounde:
; Line 81
	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN6@FillRounde
$LN5@FillRounde:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@FillRounde:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _r$[ebp]
	jge	SHORT $LN19@FillRounde
; Line 82
	mov	eax, DWORD PTR _y1$[ebp]
	sub	eax, DWORD PTR _r$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _y$[ebp], eax
; Line 83
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _yMin$[ebp]
	jl	SHORT $LN3@FillRounde
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _yMax$[ebp]
	jg	SHORT $LN3@FillRounde
$LN2@FillRounde:
; Line 87
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	imul	ecx, DWORD PTR _x$[ebp]
	add	eax, ecx
	cmp	eax, DWORD PTR _sqmax$[ebp]
	jle	SHORT $LN1@FillRounde
; Line 88
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 89
	jmp	SHORT $LN2@FillRounde
$LN1@FillRounde:
; Line 90
	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _r$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	add	edx, DWORD PTR _r$[ebp]
	sub	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _GUI_Context+88
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@FillRounde:
; Line 92
	jmp	SHORT $LN5@FillRounde
$LN19@FillRounde:
; Line 93
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FillRoundedRect ENDP
_TEXT	ENDS
END
