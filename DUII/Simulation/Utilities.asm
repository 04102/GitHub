; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\DUII\Utilities.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_timeString:BYTE:0fH
$SG18197 DB	'%02d:%02d', 00H
	ORG $+2
$SG18200 DB	'%d:%02d:%02d', 00H
	ORG $+3
$SG18202 DB	'%d:%02d', 00H
$SG18215 DB	'%d:%02d.%d', 00H
	ORG $+1
$SG18217 DB	'%d.%d', 00H
	ORG $+2
$SG18219 DB	'%d', 00H
_DATA	ENDS
PUBLIC	_formatElapsedTime
EXTRN	_sprintf:PROC
EXTRN	_GetValue:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\duii\utilities.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _formatElapsedTime
_TEXT	SEGMENT
$T18325 = -216						; size = 8
_time$ = -8						; size = 4
_formatElapsedTime PROC					; COMDAT
; Line 42
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 45
	push	35					; 00000023H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T18325[ebp], eax
	mov	DWORD PTR $T18325[ebp+4], edx
	mov	eax, DWORD PTR $T18325[ebp]
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR _time$[ebp], eax
; Line 47
	cmp	DWORD PTR _time$[ebp], 3600		; 00000e10H
	jae	SHORT $LN4@formatElap
; Line 48
	mov	eax, DWORD PTR _time$[ebp]
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	push	edx
	mov	eax, DWORD PTR _time$[ebp]
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	push	eax
	push	OFFSET $SG18197
	push	OFFSET _timeString
	call	_sprintf
	add	esp, 16					; 00000010H
	jmp	$LN3@formatElap
$LN4@formatElap:
; Line 49
	cmp	DWORD PTR _time$[ebp], 36000		; 00008ca0H
	jae	SHORT $LN2@formatElap
; Line 50
	mov	eax, DWORD PTR _time$[ebp]
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	push	edx
	mov	eax, DWORD PTR _time$[ebp]
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	push	edx
	mov	eax, DWORD PTR _time$[ebp]
	xor	edx, edx
	mov	ecx, 3600				; 00000e10H
	div	ecx
	push	eax
	push	OFFSET $SG18200
	push	OFFSET _timeString
	call	_sprintf
	add	esp, 20					; 00000014H
; Line 51
	jmp	SHORT $LN3@formatElap
$LN2@formatElap:
; Line 52
	mov	eax, DWORD PTR _time$[ebp]
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	push	edx
	mov	eax, DWORD PTR _time$[ebp]
	xor	edx, edx
	mov	ecx, 3600				; 00000e10H
	div	ecx
	push	eax
	push	OFFSET $SG18202
	push	OFFSET _timeString
	call	_sprintf
	add	esp, 16					; 00000010H
$LN3@formatElap:
; Line 54
	mov	eax, OFFSET _timeString
; Line 55
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_formatElapsedTime ENDP
_TEXT	ENDS
PUBLIC	_formatLapTime
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _formatLapTime
_TEXT	SEGMENT
_pStr$ = -44						; size = 4
_mins$ = -32						; size = 4
_secs$ = -20						; size = 4
_tenhun$ = -8						; size = 4
_time$ = 8						; size = 4
_twodigits$ = 12					; size = 4
_formatLapTime PROC					; COMDAT
; Line 63
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 67
	cmp	DWORD PTR _twodigits$[ebp], 0
	je	SHORT $LN5@formatLapT
; Line 68
	mov	eax, DWORD PTR _time$[ebp]
	add	eax, 5
	mov	DWORD PTR _time$[ebp], eax
; Line 69
	jmp	SHORT $LN4@formatLapT
$LN5@formatLapT:
; Line 70
	mov	eax, DWORD PTR _time$[ebp]
	add	eax, 50					; 00000032H
	mov	DWORD PTR _time$[ebp], eax
$LN4@formatLapT:
; Line 72
	mov	eax, DWORD PTR _time$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	xor	edx, edx
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	DWORD PTR _tenhun$[ebp], edx
; Line 73
	mov	eax, DWORD PTR _time$[ebp]
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	mov	DWORD PTR _secs$[ebp], edx
; Line 75
	mov	DWORD PTR _pStr$[ebp], OFFSET _timeString
; Line 77
	cmp	DWORD PTR _time$[ebp], 60000		; 0000ea60H
	jb	SHORT $LN3@formatLapT
; Line 78
	mov	eax, DWORD PTR _time$[ebp]
	xor	edx, edx
	mov	ecx, 60000				; 0000ea60H
	div	ecx
	mov	DWORD PTR _mins$[ebp], eax
; Line 79
	mov	eax, DWORD PTR _tenhun$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	push	eax
	mov	edx, DWORD PTR _secs$[ebp]
	push	edx
	mov	eax, DWORD PTR _mins$[ebp]
	push	eax
	push	OFFSET $SG18215
	push	OFFSET _timeString
	call	_sprintf
	add	esp, 20					; 00000014H
	add	eax, DWORD PTR _pStr$[ebp]
	mov	DWORD PTR _pStr$[ebp], eax
; Line 81
	jmp	SHORT $LN2@formatLapT
$LN3@formatLapT:
; Line 82
	mov	eax, DWORD PTR _tenhun$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	push	eax
	mov	edx, DWORD PTR _secs$[ebp]
	push	edx
	push	OFFSET $SG18217
	push	OFFSET _timeString
	call	_sprintf
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _pStr$[ebp]
	mov	DWORD PTR _pStr$[ebp], eax
$LN2@formatLapT:
; Line 84
	cmp	DWORD PTR _twodigits$[ebp], 0
	je	SHORT $LN1@formatLapT
; Line 85
	mov	eax, DWORD PTR _tenhun$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	push	edx
	push	OFFSET $SG18219
	mov	edx, DWORD PTR _pStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN1@formatLapT:
; Line 87
	mov	eax, OFFSET _timeString
; Line 88
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_formatLapTime ENDP
_TEXT	ENDS
PUBLIC	_trim
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _trim
_TEXT	SEGMENT
_ptr$ = -8						; size = 4
_s$ = 8							; size = 4
_trim	PROC						; COMDAT
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 96
	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN6@trim
; Line 97
	jmp	SHORT $LN7@trim
$LN6@trim:
; Line 98
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@trim
; Line 99
	jmp	SHORT $LN7@trim
$LN5@trim:
; Line 100
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _ptr$[ebp], edx
	jmp	SHORT $LN4@trim
$LN3@trim:
	mov	eax, DWORD PTR _ptr$[ebp]
	sub	eax, 1
	mov	DWORD PTR _ptr$[ebp], eax
$LN4@trim:
	mov	eax, DWORD PTR _ptr$[ebp]
	cmp	eax, DWORD PTR _s$[ebp]
	jb	SHORT $LN2@trim
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jne	SHORT $LN2@trim
; Line 101
	jmp	SHORT $LN3@trim
$LN2@trim:
; Line 102
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	BYTE PTR [eax+1], 0
; Line 103
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 46					; 0000002eH
	jne	SHORT $LN7@trim
	mov	eax, DWORD PTR _ptr$[ebp]
	cmp	eax, DWORD PTR _s$[ebp]
	je	SHORT $LN7@trim
; Line 104
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	BYTE PTR [eax], 0
$LN7@trim:
; Line 105
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_trim	ENDP
_TEXT	ENDS
PUBLIC	_trimn
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _trimn
_TEXT	SEGMENT
_s$ = 8							; size = 4
_n$ = 12						; size = 4
_trimn	PROC						; COMDAT
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 112
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	mov	BYTE PTR [eax], 0
; Line 113
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_trim
	add	esp, 4
; Line 114
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_trimn	ENDP
_TEXT	ENDS
PUBLIC	_EnsurePositive
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _EnsurePositive
_TEXT	SEGMENT
_ch$ = -5						; size = 1
_pStr$ = 8						; size = 4
_EnsurePositive PROC					; COMDAT
; Line 120
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN4@EnsurePosi:
; Line 123
	mov	eax, DWORD PTR _pStr$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _ch$[ebp], cl
	movzx	edx, BYTE PTR _ch$[ebp]
	test	edx, edx
	je	SHORT $LN5@EnsurePosi
; Line 125
	movzx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN2@EnsurePosi
; Line 127
	mov	eax, DWORD PTR _pStr$[ebp]
	mov	BYTE PTR [eax], 0
; Line 128
	jmp	SHORT $LN5@EnsurePosi
	jmp	SHORT $LN1@EnsurePosi
$LN2@EnsurePosi:
; Line 130
	mov	eax, DWORD PTR _pStr$[ebp]
	add	eax, 1
	mov	DWORD PTR _pStr$[ebp], eax
$LN1@EnsurePosi:
; Line 131
	jmp	SHORT $LN4@EnsurePosi
$LN5@EnsurePosi:
; Line 132
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_EnsurePositive ENDP
_TEXT	ENDS
PUBLIC	__real@41200000
PUBLIC	__real@40a00000
PUBLIC	__real@40000000
PUBLIC	__real@3f800000
PUBLIC	__real@3f000000
PUBLIC	_GetPredictiveScale
EXTRN	_sysData:BYTE
EXTRN	__fltused:DWORD
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _GetPredictiveScale
_TEXT	SEGMENT
tv65 = -196						; size = 4
_GetPredictiveScale PROC				; COMDAT
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 136
	movzx	eax, BYTE PTR _sysData+121
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 4
	ja	SHORT $LN1@GetPredict
	mov	ecx, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN11@GetPredict[ecx*4]
$LN6@GetPredict:
; Line 138
	fld	DWORD PTR __real@3f000000
	jmp	SHORT $LN7@GetPredict
$LN5@GetPredict:
; Line 139
	fld1
	jmp	SHORT $LN7@GetPredict
$LN4@GetPredict:
; Line 140
	fld	DWORD PTR __real@40000000
	jmp	SHORT $LN7@GetPredict
$LN3@GetPredict:
; Line 141
	fld	DWORD PTR __real@40a00000
	jmp	SHORT $LN7@GetPredict
$LN2@GetPredict:
; Line 142
	fld	DWORD PTR __real@41200000
	jmp	SHORT $LN7@GetPredict
$LN1@GetPredict:
; Line 143
	fld1
$LN7@GetPredict:
; Line 145
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@GetPredict:
	DD	$LN6@GetPredict
	DD	$LN5@GetPredict
	DD	$LN4@GetPredict
	DD	$LN3@GetPredict
	DD	$LN2@GetPredict
_GetPredictiveScale ENDP
_TEXT	ENDS
PUBLIC	_iSort
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _iSort
_TEXT	SEGMENT
_tmp$ = -44						; size = 4
_j$ = -32						; size = 4
_i$ = -20						; size = 4
_swapped$ = -8						; size = 4
_arr$ = 8						; size = 4
_n$ = 12						; size = 4
_iSort	PROC						; COMDAT
; Line 151
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 152
	mov	DWORD PTR _swapped$[ebp], 1
; Line 154
	mov	DWORD PTR _j$[ebp], 0
$LN6@iSort:
; Line 156
	cmp	DWORD PTR _swapped$[ebp], 0
	je	SHORT $LN7@iSort
; Line 157
	mov	DWORD PTR _swapped$[ebp], 0
; Line 158
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 159
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@iSort
$LN3@iSort:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@iSort:
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@iSort
; Line 160
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arr$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _arr$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, DWORD PTR [esi+edx*4+4]
	jle	SHORT $LN1@iSort
; Line 161
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arr$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _tmp$[ebp], edx
; Line 162
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arr$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _arr$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+4]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 163
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arr$[ebp]
	mov	edx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [ecx+eax*4+4], edx
; Line 164
	mov	DWORD PTR _swapped$[ebp], 1
$LN1@iSort:
; Line 166
	jmp	SHORT $LN3@iSort
$LN2@iSort:
; Line 167
	jmp	SHORT $LN6@iSort
$LN7@iSort:
; Line 168
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_iSort	ENDP
_TEXT	ENDS
PUBLIC	_fSort
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _fSort
_TEXT	SEGMENT
_tmp$ = -44						; size = 4
_j$ = -32						; size = 4
_i$ = -20						; size = 4
_swapped$ = -8						; size = 4
_arr$ = 8						; size = 4
_n$ = 12						; size = 4
_fSort	PROC						; COMDAT
; Line 171
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 172
	mov	DWORD PTR _swapped$[ebp], 1
; Line 174
	mov	DWORD PTR _j$[ebp], 0
$LN6@fSort:
; Line 176
	cmp	DWORD PTR _swapped$[ebp], 0
	je	$LN5@fSort
; Line 177
	mov	DWORD PTR _swapped$[ebp], 0
; Line 178
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 179
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@fSort
$LN3@fSort:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@fSort:
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@fSort
; Line 180
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arr$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _arr$[ebp]
	fld	DWORD PTR [esi+edx*4+4]
	fcomp	DWORD PTR [ecx+eax*4]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@fSort
; Line 181
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arr$[ebp]
	fld	DWORD PTR [ecx+eax*4]
	fstp	DWORD PTR _tmp$[ebp]
; Line 182
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arr$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _arr$[ebp]
	fld	DWORD PTR [esi+edx*4+4]
	fstp	DWORD PTR [ecx+eax*4]
; Line 183
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arr$[ebp]
	fld	DWORD PTR _tmp$[ebp]
	fstp	DWORD PTR [ecx+eax*4+4]
; Line 184
	mov	DWORD PTR _swapped$[ebp], 1
$LN1@fSort:
; Line 186
	jmp	SHORT $LN3@fSort
$LN2@fSort:
; Line 187
	jmp	$LN6@fSort
$LN5@fSort:
; Line 188
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_fSort	ENDP
_TEXT	ENDS
PUBLIC	_CalculateScaleTop
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _CalculateScaleTop
_TEXT	SEGMENT
_rpm$ = 8						; size = 4
_CalculateScaleTop PROC					; COMDAT
; Line 194
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 195
	cmp	DWORD PTR _rpm$[ebp], 9000		; 00002328H
	jl	SHORT $LN2@CalculateS
; Line 196
	mov	eax, DWORD PTR _rpm$[ebp]
	cdq
	mov	ecx, 2000				; 000007d0H
	idiv	ecx
	add	eax, 1
	imul	eax, 2000				; 000007d0H
	jmp	SHORT $LN3@CalculateS
; Line 197
	jmp	SHORT $LN3@CalculateS
$LN2@CalculateS:
; Line 198
	mov	eax, DWORD PTR _rpm$[ebp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	add	eax, 1
	imul	eax, 1000				; 000003e8H
$LN3@CalculateS:
; Line 199
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CalculateScaleTop ENDP
_TEXT	ENDS
PUBLIC	_kmc_stricmp
EXTRN	_toupper:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _kmc_stricmp
_TEXT	SEGMENT
_b$18303 = -29						; size = 1
_a$18302 = -17						; size = 1
_i$ = -8						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_kmc_stricmp PROC					; COMDAT
; Line 206
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 207
	mov	DWORD PTR _i$[ebp], 0
$LN7@kmc_stricm:
; Line 208
	mov	eax, DWORD PTR _s1$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN6@kmc_stricm
; Line 212
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@kmc_stricm
; Line 213
	mov	eax, 1
	jmp	SHORT $LN8@kmc_stricm
	jmp	SHORT $LN4@kmc_stricm
$LN5@kmc_stricm:
; Line 214
	mov	eax, DWORD PTR _s1$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_toupper
	add	esp, 4
	mov	BYTE PTR _a$18302[ebp], al
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	call	_toupper
	add	esp, 4
	mov	BYTE PTR _b$18303[ebp], al
	movzx	ecx, BYTE PTR _b$18303[ebp]
	movzx	edx, BYTE PTR _a$18302[ebp]
	cmp	edx, ecx
	jge	SHORT $LN3@kmc_stricm
; Line 215
	or	eax, -1
	jmp	SHORT $LN8@kmc_stricm
	jmp	SHORT $LN4@kmc_stricm
$LN3@kmc_stricm:
; Line 216
	movzx	eax, BYTE PTR _a$18302[ebp]
	movzx	ecx, BYTE PTR _b$18303[ebp]
	cmp	eax, ecx
	jle	SHORT $LN4@kmc_stricm
; Line 217
	mov	eax, 1
	jmp	SHORT $LN8@kmc_stricm
$LN4@kmc_stricm:
; Line 218
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 219
	jmp	SHORT $LN7@kmc_stricm
$LN6@kmc_stricm:
; Line 220
	xor	eax, eax
$LN8@kmc_stricm:
; Line 221
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kmc_stricmp ENDP
_TEXT	ENDS
END
