; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\MemDev\GUIDEV_8.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_MEMDEV_DEVICE_8
_DATA	SEGMENT
$SG9956	DB	'_XY2PTR: parameters out of bounds', 00H
	ORG $+2
$SG9987	DB	'GUIDEV.c: DrawBitLine1BPP, Act= %d, Border= %d, Clip= %d'
	DB	00H
_DATA	ENDS
CONST	SEGMENT
_aID	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	09H
	DD	0aH
	DD	0bH
	DD	0cH
	DD	0dH
	DD	0eH
	DD	0fH
_GUI_MEMDEV_DEVICE_8 DD 04H
	DD	FLAT:__DrawBitmap
	DD	FLAT:__DrawHLine
	DD	FLAT:__DrawVLine
	DD	FLAT:__FillRect
	DD	FLAT:__GetPixelIndex
	DD	FLAT:__SetPixelIndex
	DD	FLAT:__XorPixel
	DD	FLAT:__SetOrg
	DD	FLAT:__GetDevFunc
	DD	FLAT:__GetDevProp
	DD	FLAT:__GetDevData
	DD	FLAT:__GetRect
CONST	ENDS
EXTRN	_GUI_USAGE_AddRect:PROC
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\memdev\guidev_8.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __DrawBitmap
_TEXT	SEGMENT
tv144 = -256						; size = 4
tv71 = -256						; size = 4
_pDest$ = -56						; size = 4
_BytesPerLineDest$ = -44				; size = 4
_pUsage$ = -32						; size = 4
_pDev$ = -20						; size = 4
_i$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xsize$ = 20						; size = 4
_ysize$ = 24						; size = 4
_BitsPerPixel$ = 28					; size = 4
_BytesPerLine$ = 32					; size = 4
_pData$ = 36						; size = 4
_Diff$ = 40						; size = 4
_pTrans$ = 44						; size = 4
__DrawBitmap PROC					; COMDAT
; Line 464
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 466
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 467
	mov	eax, DWORD PTR _pDev$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN20@DrawBitmap
	mov	ecx, DWORD PTR _pDev$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN21@DrawBitmap
$LN20@DrawBitmap:
	mov	DWORD PTR tv71[ebp], 0
$LN21@DrawBitmap:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _pUsage$[ebp], eax
; Line 470
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _BytesPerLineDest$[ebp], ecx
; Line 471
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x0$[ebp], eax
; Line 473
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN17@DrawBitmap
; Line 474
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 2
	jne	SHORT $LN17@DrawBitmap
; Line 475
	mov	eax, DWORD PTR _ysize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pUsage$[ebp]
	push	ecx
	call	_GUI_USAGE_AddRect
	add	esp, 20					; 00000014H
$LN17@DrawBitmap:
; Line 478
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pDest$[ebp], eax
; Line 516
	cmp	DWORD PTR _BitsPerPixel$[ebp], 8
	jne	$LN15@DrawBitmap
; Line 517
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@DrawBitmap
$LN13@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ysize$[ebp]
	jge	SHORT $LN12@DrawBitmap
; Line 518
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	SHORT $LN11@DrawBitmap
; Line 519
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTrans$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__DrawBitLine8BPP
	add	esp, 32					; 00000020H
; Line 520
	jmp	SHORT $LN10@DrawBitmap
$LN11@DrawBitmap:
; Line 521
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine8BPP_DDB
	add	esp, 28					; 0000001cH
$LN10@DrawBitmap:
; Line 523
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 524
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, DWORD PTR _BytesPerLineDest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 525
	jmp	SHORT $LN13@DrawBitmap
$LN12@DrawBitmap:
; Line 526
	jmp	$LN18@DrawBitmap
$LN15@DrawBitmap:
; Line 529
	cmp	DWORD PTR _pTrans$[ebp], 0
	jne	SHORT $LN9@DrawBitmap
; Line 530
	mov	DWORD PTR _pTrans$[ebp], OFFSET _aID
$LN9@DrawBitmap:
; Line 532
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@DrawBitmap
$LN7@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ysize$[ebp]
	jge	$LN18@DrawBitmap
; Line 533
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR tv144[ebp], eax
	cmp	DWORD PTR tv144[ebp], 1
	je	SHORT $LN3@DrawBitmap
	cmp	DWORD PTR tv144[ebp], 2
	je	SHORT $LN2@DrawBitmap
	cmp	DWORD PTR tv144[ebp], 4
	je	SHORT $LN1@DrawBitmap
	jmp	$LN4@DrawBitmap
$LN3@DrawBitmap:
; Line 535
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pTrans$[ebp]
	push	edx
	mov	eax, DWORD PTR _xsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Diff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine1BPP
	add	esp, 40					; 00000028H
; Line 536
	jmp	SHORT $LN4@DrawBitmap
$LN2@DrawBitmap:
; Line 538
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTrans$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _Diff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pUsage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__DrawBitLine2BPP
	add	esp, 36					; 00000024H
; Line 539
	jmp	SHORT $LN4@DrawBitmap
$LN1@DrawBitmap:
; Line 541
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTrans$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _Diff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pUsage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__DrawBitLine4BPP
	add	esp, 36					; 00000024H
$LN4@DrawBitmap:
; Line 544
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 545
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, DWORD PTR _BytesPerLineDest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 546
	jmp	$LN7@DrawBitmap
$LN18@DrawBitmap:
; Line 547
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitmap ENDP
_TEXT	ENDS
EXTRN	_GUI_ErrorOut2:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __XY2PTR
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_pDev$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__XY2PTR PROC						; COMDAT
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 77
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 78
	mov	eax, DWORD PTR _pDev$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _pData$[ebp], eax
; Line 80
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [edx+8]
	add	ecx, eax
	xor	edx, edx
	cmp	DWORD PTR _x$[ebp], ecx
	setge	dl
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	xor	eax, eax
	cmp	DWORD PTR _x$[ebp], ecx
	setl	al
	or	edx, eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [ecx+6]
	mov	ecx, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [ecx+10]
	add	eax, ecx
	xor	ecx, ecx
	cmp	DWORD PTR _y$[ebp], eax
	setge	cl
	or	edx, ecx
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	xor	eax, eax
	cmp	DWORD PTR _y$[ebp], ecx
	setl	al
	or	edx, eax
	je	SHORT $LN1@XY2PTR
; Line 81
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	push	OFFSET $SG9956
	call	_GUI_ErrorOut2
	add	esp, 12					; 0000000cH
$LN1@XY2PTR:
; Line 84
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _pDev$[ebp]
	imul	edx, DWORD PTR [eax+12]
	add	edx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pData$[ebp], edx
; Line 85
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pDev$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	sub	eax, edx
; Line 86
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__XY2PTR ENDP
_TEXT	ENDS
EXTRN	_GUI_ErrorOut3:PROC
EXTRN	_LCD_aMirror:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitLine1BPP
_TEXT	SEGMENT
tv81 = -244						; size = 4
_PixelCnt$ = -44					; size = 4
_pixels$ = -32						; size = 4
_IndexMask$ = -17					; size = 1
_Index1$ = -5						; size = 1
_pDevice$ = 8						; size = 4
_pUsage$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_p$ = 24						; size = 4
_Diff$ = 28						; size = 4
_xsize$ = 32						; size = 4
_pTrans$ = 36						; size = 4
_pDev$ = 40						; size = 4
_pDest$ = 44						; size = 4
__DrawBitLine1BPP PROC					; COMDAT
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 100
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	DWORD PTR _pDev$[ebp], eax
; Line 101
	mov	eax, 8
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _PixelCnt$[ebp], eax
; Line 102
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _LCD_aMirror[ecx]
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	edx, cl
	mov	DWORD PTR _pixels$[ebp], edx
; Line 104
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	cmp	DWORD PTR _x$[ebp], ecx
	jge	SHORT $LN42@DrawBitLin
	movsx	eax, WORD PTR _GUI_Context+8
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	push	OFFSET $SG9987
	call	_GUI_ErrorOut3
	add	esp, 16					; 00000010H
$LN42@DrawBitLin:
; Line 106
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv81[ebp], eax
	cmp	DWORD PTR tv81[ebp], 3
	ja	$LN43@DrawBitLin
	mov	ecx, DWORD PTR tv81[ebp]
	jmp	DWORD PTR $LN45@DrawBitLin[ecx*4]
$LN38@DrawBitLin:
; Line 110
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jbe	SHORT $LN35@DrawBitLin
; Line 111
	mov	eax, DWORD PTR _xsize$[ebp]
	mov	DWORD PTR _PixelCnt$[ebp], eax
$LN35@DrawBitLin:
; Line 113
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, DWORD PTR _PixelCnt$[ebp]
	mov	DWORD PTR _xsize$[ebp], eax
$LN34@DrawBitLin:
; Line 116
	mov	eax, DWORD PTR _pixels$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	al, BYTE PTR [edx+eax*4]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _pDest$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pDest$[ebp], ecx
; Line 117
	mov	eax, DWORD PTR _pixels$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pixels$[ebp], eax
; Line 118
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _PixelCnt$[ebp], eax
	jne	SHORT $LN34@DrawBitLin
; Line 120
	cmp	DWORD PTR _xsize$[ebp], 0
	jne	SHORT $LN31@DrawBitLin
; Line 121
	jmp	$LN43@DrawBitLin
$LN31@DrawBitLin:
; Line 123
	mov	DWORD PTR _PixelCnt$[ebp], 8
; Line 124
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _LCD_aMirror[edx]
	mov	DWORD PTR _pixels$[ebp], eax
; Line 125
	mov	eax, 1
	test	eax, eax
	jne	SHORT $LN38@DrawBitLin
$LN30@DrawBitLin:
; Line 127
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	cl, BYTE PTR [eax+4]
	mov	BYTE PTR _Index1$[ebp], cl
$LN29@DrawBitLin:
; Line 130
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jbe	SHORT $LN26@DrawBitLin
; Line 131
	mov	eax, DWORD PTR _xsize$[ebp]
	mov	DWORD PTR _PixelCnt$[ebp], eax
$LN26@DrawBitLin:
; Line 133
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, DWORD PTR _PixelCnt$[ebp]
	mov	DWORD PTR _xsize$[ebp], eax
; Line 134
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN17@DrawBitLin
$LN24@DrawBitLin:
; Line 136
	cmp	DWORD PTR _pixels$[ebp], 0
	jne	SHORT $LN21@DrawBitLin
; Line 137
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, DWORD PTR _PixelCnt$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 138
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _PixelCnt$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 139
	jmp	SHORT $LN22@DrawBitLin
$LN21@DrawBitLin:
; Line 141
	mov	eax, DWORD PTR _pixels$[ebp]
	and	eax, 1
	je	SHORT $LN20@DrawBitLin
; Line 142
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 143
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cl, BYTE PTR _Index1$[ebp]
	mov	BYTE PTR [eax], cl
$LN20@DrawBitLin:
; Line 145
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 146
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 1
	mov	DWORD PTR _pDest$[ebp], eax
; Line 147
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _PixelCnt$[ebp], eax
	jne	SHORT $LN19@DrawBitLin
; Line 148
	jmp	SHORT $LN22@DrawBitLin
$LN19@DrawBitLin:
; Line 150
	mov	eax, DWORD PTR _pixels$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pixels$[ebp], eax
; Line 151
	mov	eax, 1
	test	eax, eax
	jne	SHORT $LN24@DrawBitLin
$LN22@DrawBitLin:
; Line 152
	jmp	SHORT $LN18@DrawBitLin
$LN17@DrawBitLin:
; Line 154
	cmp	DWORD PTR _pixels$[ebp], 0
	jne	SHORT $LN14@DrawBitLin
; Line 155
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, DWORD PTR _PixelCnt$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 156
	jmp	SHORT $LN18@DrawBitLin
$LN14@DrawBitLin:
; Line 158
	mov	eax, DWORD PTR _pixels$[ebp]
	and	eax, 1
	je	SHORT $LN13@DrawBitLin
; Line 159
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cl, BYTE PTR _Index1$[ebp]
	mov	BYTE PTR [eax], cl
$LN13@DrawBitLin:
; Line 161
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 1
	mov	DWORD PTR _pDest$[ebp], eax
; Line 162
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _PixelCnt$[ebp], eax
	jne	SHORT $LN12@DrawBitLin
; Line 163
	jmp	SHORT $LN18@DrawBitLin
$LN12@DrawBitLin:
; Line 165
	mov	eax, DWORD PTR _pixels$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pixels$[ebp], eax
; Line 166
	mov	eax, 1
	test	eax, eax
	jne	SHORT $LN17@DrawBitLin
$LN18@DrawBitLin:
; Line 169
	cmp	DWORD PTR _xsize$[ebp], 0
	jne	SHORT $LN11@DrawBitLin
; Line 170
	jmp	$LN43@DrawBitLin
$LN11@DrawBitLin:
; Line 172
	mov	DWORD PTR _PixelCnt$[ebp], 8
; Line 173
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _LCD_aMirror[edx]
	mov	DWORD PTR _pixels$[ebp], eax
; Line 174
	mov	eax, 1
	test	eax, eax
	jne	$LN29@DrawBitLin
$LN10@DrawBitLin:
; Line 177
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _IndexMask$[ebp], al
$LN9@DrawBitLin:
; Line 180
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jbe	SHORT $LN6@DrawBitLin
; Line 181
	mov	eax, DWORD PTR _xsize$[ebp]
	mov	DWORD PTR _PixelCnt$[ebp], eax
$LN6@DrawBitLin:
; Line 183
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, DWORD PTR _PixelCnt$[ebp]
	mov	DWORD PTR _xsize$[ebp], eax
$LN5@DrawBitLin:
; Line 186
	mov	eax, DWORD PTR _pixels$[ebp]
	and	eax, 1
	je	SHORT $LN2@DrawBitLin
; Line 187
	movzx	eax, BYTE PTR _IndexMask$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	movzx	edx, BYTE PTR [ecx]
	xor	edx, eax
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [eax], dl
$LN2@DrawBitLin:
; Line 189
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 1
	mov	DWORD PTR _pDest$[ebp], eax
; Line 190
	mov	eax, DWORD PTR _pixels$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pixels$[ebp], eax
; Line 191
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _PixelCnt$[ebp], eax
	jne	SHORT $LN5@DrawBitLin
; Line 193
	cmp	DWORD PTR _xsize$[ebp], 0
	jne	SHORT $LN1@DrawBitLin
; Line 194
	jmp	SHORT $LN43@DrawBitLin
$LN1@DrawBitLin:
; Line 196
	mov	DWORD PTR _PixelCnt$[ebp], 8
; Line 197
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _LCD_aMirror[edx]
	mov	DWORD PTR _pixels$[ebp], eax
; Line 198
	mov	eax, 1
	test	eax, eax
	jne	SHORT $LN9@DrawBitLin
$LN43@DrawBitLin:
; Line 200
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN45@DrawBitLin:
	DD	$LN38@DrawBitLin
	DD	$LN10@DrawBitLin
	DD	$LN30@DrawBitLin
	DD	$LN10@DrawBitLin
__DrawBitLine1BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine2BPP
_TEXT	SEGMENT
tv72 = -220						; size = 4
_PixelCnt$ = -17					; size = 1
_pixels$ = -5						; size = 1
_pDevice$ = 8						; size = 4
_pUsage$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_p$ = 24						; size = 4
_Diff$ = 28						; size = 4
_xsize$ = 32						; size = 4
_pTrans$ = 36						; size = 4
_pDest$ = 40						; size = 4
__DrawBitLine2BPP PROC					; COMDAT
; Line 208
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 212
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 213
	mov	eax, 4
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
; Line 214
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _Diff$[ebp]
	shl	ecx, 1
	shl	edx, cl
	mov	BYTE PTR _pixels$[ebp], dl
; Line 215
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv72[ebp], eax
	je	SHORT $PixelLoopWrite$10058
	cmp	DWORD PTR tv72[ebp], 1
	je	$PixelLoopXor$10074
	cmp	DWORD PTR tv72[ebp], 2
	je	SHORT $PixelLoopTrans$10065
	jmp	$LN24@DrawBitLin@2
$PixelLoopWrite$10058:
; Line 218
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jle	SHORT $LN20@DrawBitLin@2
; Line 219
	mov	al, BYTE PTR _xsize$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
$LN20@DrawBitLin@2:
; Line 221
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	mov	ecx, DWORD PTR _xsize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _xsize$[ebp], ecx
$LN19@DrawBitLin@2:
; Line 223
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 6
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	al, BYTE PTR [edx+eax*4]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _pDest$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pDest$[ebp], ecx
; Line 224
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 2
	mov	BYTE PTR _pixels$[ebp], al
; Line 225
	mov	al, BYTE PTR _PixelCnt$[ebp]
	sub	al, 1
	mov	BYTE PTR _PixelCnt$[ebp], al
	movzx	ecx, BYTE PTR _PixelCnt$[ebp]
	test	ecx, ecx
	jne	SHORT $LN19@DrawBitLin@2
; Line 226
	cmp	DWORD PTR _xsize$[ebp], 0
	je	SHORT $LN16@DrawBitLin@2
; Line 227
	mov	BYTE PTR _PixelCnt$[ebp], 4
; Line 228
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 229
	jmp	SHORT $PixelLoopWrite$10058
$LN16@DrawBitLin@2:
; Line 231
	jmp	$LN24@DrawBitLin@2
$PixelLoopTrans$10065:
; Line 234
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jle	SHORT $LN14@DrawBitLin@2
; Line 235
	mov	al, BYTE PTR _xsize$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
$LN14@DrawBitLin@2:
; Line 236
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	mov	ecx, DWORD PTR _xsize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _xsize$[ebp], ecx
$LN13@DrawBitLin@2:
; Line 238
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 192				; 000000c0H
	je	SHORT $LN10@DrawBitLin@2
; Line 239
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 6
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	al, BYTE PTR [edx+eax*4]
	mov	BYTE PTR [ecx], al
; Line 240
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN10@DrawBitLin@2
; Line 241
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@DrawBitLin@2:
; Line 244
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 1
	mov	DWORD PTR _pDest$[ebp], eax
; Line 245
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 246
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 2
	mov	BYTE PTR _pixels$[ebp], al
; Line 247
	mov	al, BYTE PTR _PixelCnt$[ebp]
	sub	al, 1
	mov	BYTE PTR _PixelCnt$[ebp], al
	movzx	ecx, BYTE PTR _PixelCnt$[ebp]
	test	ecx, ecx
	jne	SHORT $LN13@DrawBitLin@2
; Line 248
	cmp	DWORD PTR _xsize$[ebp], 0
	je	SHORT $LN8@DrawBitLin@2
; Line 249
	mov	BYTE PTR _PixelCnt$[ebp], 4
; Line 250
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 251
	jmp	$PixelLoopTrans$10065
$LN8@DrawBitLin@2:
; Line 253
	jmp	SHORT $LN24@DrawBitLin@2
$PixelLoopXor$10074:
; Line 256
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jle	SHORT $LN6@DrawBitLin@2
; Line 257
	mov	al, BYTE PTR _xsize$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
$LN6@DrawBitLin@2:
; Line 258
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	mov	ecx, DWORD PTR _xsize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _xsize$[ebp], ecx
$LN5@DrawBitLin@2:
; Line 260
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 192				; 000000c0H
	je	SHORT $LN2@DrawBitLin@2
; Line 261
	mov	eax, DWORD PTR _pDest$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [edx], cl
$LN2@DrawBitLin@2:
; Line 262
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 1
	mov	DWORD PTR _pDest$[ebp], eax
; Line 263
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 2
	mov	BYTE PTR _pixels$[ebp], al
; Line 264
	mov	al, BYTE PTR _PixelCnt$[ebp]
	sub	al, 1
	mov	BYTE PTR _PixelCnt$[ebp], al
	movzx	ecx, BYTE PTR _PixelCnt$[ebp]
	test	ecx, ecx
	jne	SHORT $LN5@DrawBitLin@2
; Line 265
	cmp	DWORD PTR _xsize$[ebp], 0
	je	SHORT $LN24@DrawBitLin@2
; Line 266
	mov	BYTE PTR _PixelCnt$[ebp], 4
; Line 267
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 268
	jmp	SHORT $PixelLoopXor$10074
$LN24@DrawBitLin@2:
; Line 272
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine2BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine4BPP
_TEXT	SEGMENT
tv72 = -232						; size = 4
_i$10110 = -32						; size = 4
_PixelCnt$ = -17					; size = 1
_pixels$ = -5						; size = 1
_pDevice$ = 8						; size = 4
_pUsage$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_p$ = 24						; size = 4
_Diff$ = 28						; size = 4
_xsize$ = 32						; size = 4
_pTrans$ = 36						; size = 4
_pDest$ = 40						; size = 4
__DrawBitLine4BPP PROC					; COMDAT
; Line 280
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 284
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 285
	mov	eax, 2
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
; Line 286
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _Diff$[ebp]
	shl	ecx, 2
	shl	edx, cl
	mov	BYTE PTR _pixels$[ebp], dl
; Line 287
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv72[ebp], eax
	je	SHORT $LN27@DrawBitLin@3
	cmp	DWORD PTR tv72[ebp], 1
	je	$PixelLoopXor$10130
	cmp	DWORD PTR tv72[ebp], 2
	je	$LN20@DrawBitLin@3
	jmp	$LN30@DrawBitLin@3
$LN27@DrawBitLin@3:
; Line 293
	cmp	DWORD PTR _Diff$[ebp], 0
	je	SHORT $LN26@DrawBitLin@3
; Line 294
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 4
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	al, BYTE PTR [edx+eax*4]
	mov	BYTE PTR [ecx], al
; Line 295
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 1
	mov	DWORD PTR _pDest$[ebp], eax
; Line 296
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
; Line 297
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
$LN26@DrawBitLin@3:
; Line 300
	cmp	DWORD PTR _xsize$[ebp], 2
	jl	SHORT $LN25@DrawBitLin@3
; Line 301
	mov	eax, DWORD PTR _xsize$[ebp]
	sar	eax, 1
	mov	DWORD PTR _i$10110[ebp], eax
; Line 302
	mov	eax, DWORD PTR _xsize$[ebp]
	and	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
$LN24@DrawBitLin@3:
; Line 304
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 4
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	al, BYTE PTR [edx+eax*4]
	mov	BYTE PTR [ecx], al
; Line 305
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	al, BYTE PTR [edx+eax*4]
	mov	BYTE PTR [ecx+1], al
; Line 306
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 2
	mov	DWORD PTR _pDest$[ebp], eax
; Line 307
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 308
	mov	eax, DWORD PTR _i$10110[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$10110[ebp], eax
	jne	SHORT $LN24@DrawBitLin@3
$LN25@DrawBitLin@3:
; Line 311
	cmp	DWORD PTR _xsize$[ebp], 0
	je	SHORT $LN21@DrawBitLin@3
; Line 312
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 4
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	al, BYTE PTR [edx+eax*4]
	mov	BYTE PTR [ecx], al
$LN21@DrawBitLin@3:
; Line 314
	jmp	$LN30@DrawBitLin@3
$LN20@DrawBitLin@3:
; Line 320
	cmp	DWORD PTR _Diff$[ebp], 0
	je	SHORT $LN16@DrawBitLin@3
; Line 321
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 240				; 000000f0H
	je	SHORT $LN18@DrawBitLin@3
; Line 322
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 4
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	al, BYTE PTR [edx+eax*4]
	mov	BYTE PTR [ecx], al
; Line 323
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN18@DrawBitLin@3
; Line 324
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@DrawBitLin@3:
; Line 327
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 1
	mov	DWORD PTR _pDest$[ebp], eax
; Line 328
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 329
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
; Line 330
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
$LN16@DrawBitLin@3:
; Line 333
	cmp	DWORD PTR _xsize$[ebp], 2
	jl	$LN15@DrawBitLin@3
; Line 335
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 240				; 000000f0H
	je	SHORT $LN14@DrawBitLin@3
; Line 336
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 4
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	al, BYTE PTR [edx+eax*4]
	mov	BYTE PTR [ecx], al
; Line 337
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN14@DrawBitLin@3
; Line 338
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@DrawBitLin@3:
; Line 342
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 15					; 0000000fH
	mov	BYTE PTR _pixels$[ebp], al
	movzx	ecx, BYTE PTR _pixels$[ebp]
	test	ecx, ecx
	je	SHORT $LN12@DrawBitLin@3
; Line 343
	movzx	eax, BYTE PTR _pixels$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	al, BYTE PTR [edx+eax*4]
	mov	BYTE PTR [ecx+1], al
; Line 344
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN12@DrawBitLin@3
; Line 345
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@DrawBitLin@3:
; Line 348
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 2
	mov	DWORD PTR _pDest$[ebp], eax
; Line 349
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 2
	mov	DWORD PTR _x$[ebp], eax
; Line 350
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 2
	mov	DWORD PTR _xsize$[ebp], eax
; Line 351
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 352
	jmp	$LN16@DrawBitLin@3
$LN15@DrawBitLin@3:
; Line 354
	cmp	DWORD PTR _xsize$[ebp], 0
	je	SHORT $LN10@DrawBitLin@3
; Line 355
	mov	al, BYTE PTR _pixels$[ebp]
	shr	al, 4
	mov	BYTE PTR _pixels$[ebp], al
	movzx	ecx, BYTE PTR _pixels$[ebp]
	test	ecx, ecx
	je	SHORT $LN10@DrawBitLin@3
; Line 356
	movzx	eax, BYTE PTR _pixels$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	al, BYTE PTR [edx+eax*4]
	mov	BYTE PTR [ecx], al
; Line 357
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN10@DrawBitLin@3
; Line 358
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@DrawBitLin@3:
; Line 362
	jmp	SHORT $LN30@DrawBitLin@3
$PixelLoopXor$10130:
; Line 365
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jle	SHORT $LN6@DrawBitLin@3
; Line 366
	mov	al, BYTE PTR _xsize$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
$LN6@DrawBitLin@3:
; Line 367
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	mov	ecx, DWORD PTR _xsize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _xsize$[ebp], ecx
$LN5@DrawBitLin@3:
; Line 369
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 192				; 000000c0H
	je	SHORT $LN2@DrawBitLin@3
; Line 370
	mov	eax, DWORD PTR _pDest$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [edx], cl
$LN2@DrawBitLin@3:
; Line 372
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 1
	mov	DWORD PTR _pDest$[ebp], eax
; Line 373
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 4
	mov	BYTE PTR _pixels$[ebp], al
; Line 374
	mov	al, BYTE PTR _PixelCnt$[ebp]
	sub	al, 1
	mov	BYTE PTR _PixelCnt$[ebp], al
	movzx	ecx, BYTE PTR _PixelCnt$[ebp]
	test	ecx, ecx
	jne	SHORT $LN5@DrawBitLin@3
; Line 375
	cmp	DWORD PTR _xsize$[ebp], 0
	je	SHORT $LN30@DrawBitLin@3
; Line 376
	mov	BYTE PTR _PixelCnt$[ebp], 2
; Line 377
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 378
	jmp	SHORT $PixelLoopXor$10130
$LN30@DrawBitLin@3:
; Line 382
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine4BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine8BPP
_TEXT	SEGMENT
tv66 = -196						; size = 4
_pDevice$ = 8						; size = 4
_pUsage$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_pSrc$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
_pDest$ = 36						; size = 4
__DrawBitLine8BPP PROC					; COMDAT
; Line 389
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 390
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 391
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv66[ebp], eax
	je	SHORT $LN9@DrawBitLin@4
	cmp	DWORD PTR tv66[ebp], 2
	je	SHORT $LN5@DrawBitLin@4
	jmp	$LN13@DrawBitLin@4
$LN9@DrawBitLin@4:
; Line 394
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	cl, BYTE PTR [eax+ecx*4]
	mov	BYTE PTR [edx], cl
; Line 395
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 1
	mov	DWORD PTR _pDest$[ebp], eax
; Line 396
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 397
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN9@DrawBitLin@4
; Line 398
	jmp	SHORT $LN13@DrawBitLin@4
$LN5@DrawBitLin@4:
; Line 401
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@DrawBitLin@4
; Line 402
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	cl, BYTE PTR [eax+ecx*4]
	mov	BYTE PTR [edx], cl
; Line 403
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN2@DrawBitLin@4
; Line 404
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawBitLin@4:
; Line 407
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 408
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 1
	mov	DWORD PTR _pDest$[ebp], eax
; Line 409
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 410
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN5@DrawBitLin@4
$LN13@DrawBitLin@4:
; Line 413
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine8BPP ENDP
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitLine8BPP_DDB
_TEXT	SEGMENT
tv66 = -196						; size = 4
_pDevice$ = 8						; size = 4
_pUsage$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_pSrc$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pDest$ = 32						; size = 4
__DrawBitLine8BPP_DDB PROC				; COMDAT
; Line 431
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 432
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 433
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv66[ebp], eax
	je	SHORT $LN7@DrawBitLin@5
	cmp	DWORD PTR tv66[ebp], 2
	je	SHORT $LN5@DrawBitLin@5
	jmp	SHORT $LN10@DrawBitLin@5
$LN7@DrawBitLin@5:
; Line 438
	mov	eax, DWORD PTR _xsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDest$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 440
	jmp	SHORT $LN10@DrawBitLin@5
$LN5@DrawBitLin@5:
; Line 443
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@DrawBitLin@5
; Line 444
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	ecx, DWORD PTR _pSrc$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
; Line 445
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN2@DrawBitLin@5
; Line 446
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawBitLin@5:
; Line 449
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 450
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 1
	mov	DWORD PTR _pDest$[ebp], eax
; Line 451
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 452
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN5@DrawBitLin@5
$LN10@DrawBitLin@5:
; Line 455
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine8BPP_DDB ENDP
_TEXT	ENDS
EXTRN	_GUI__memset:PROC
EXTRN	_LCD_pColorIndex:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __FillRect
_TEXT	SEGMENT
_ColorIndex$ = -92					; size = 4
_IndexMask$ = -77					; size = 1
_pDest$ = -68						; size = 4
_pData$ = -56						; size = 4
_pDev$ = -44						; size = 4
_RemPixels$ = -32					; size = 4
_Len$ = -20						; size = 4
_BytesPerLine$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
__FillRect PROC						; COMDAT
; Line 553
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 562
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ColorIndex$[ebp], ecx
; Line 563
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 564
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pData$[ebp], eax
; Line 565
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _BytesPerLine$[ebp], ecx
; Line 566
	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _x0$[ebp]
	add	eax, 1
	mov	DWORD PTR _Len$[ebp], eax
; Line 568
	mov	eax, DWORD PTR _pDev$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN9@FillRect
; Line 569
	mov	eax, DWORD PTR _y1$[ebp]
	sub	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _Len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	push	eax
	call	_GUI_USAGE_AddRect
	add	esp, 20					; 00000014H
$LN9@FillRect:
; Line 570
	jmp	SHORT $LN8@FillRect
$LN7@FillRect:
; Line 572
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
$LN8@FillRect:
	mov	eax, DWORD PTR _y0$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jg	SHORT $LN10@FillRect
; Line 573
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 1
	je	SHORT $LN5@FillRect
; Line 574
	mov	eax, DWORD PTR _Len$[ebp]
	mov	DWORD PTR _RemPixels$[ebp], eax
; Line 575
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 576
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _IndexMask$[ebp], al
$LN4@FillRect:
; Line 578
	mov	eax, DWORD PTR _pDest$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _IndexMask$[ebp]
	xor	ecx, edx
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [eax], cl
; Line 579
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 1
	mov	DWORD PTR _pDest$[ebp], eax
; Line 580
	mov	eax, DWORD PTR _RemPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _RemPixels$[ebp], eax
	jne	SHORT $LN4@FillRect
; Line 581
	jmp	SHORT $LN1@FillRect
$LN5@FillRect:
; Line 583
	mov	eax, DWORD PTR _Len$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _ColorIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	call	_GUI__memset
	add	esp, 12					; 0000000cH
$LN1@FillRect:
; Line 599
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 600
	jmp	$LN7@FillRect
$LN10@FillRect:
; Line 601
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FillRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawHLine
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y$ = 16						; size = 4
_x1$ = 20						; size = 4
__DrawHLine PROC					; COMDAT
; Line 607
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 608
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__FillRect
	add	esp, 20					; 00000014H
; Line 609
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawHLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawVLine
_TEXT	SEGMENT
tv70 = -292						; size = 4
_ColorIndex$ = -92					; size = 4
_NumPixels$ = -80					; size = 4
_IndexMask$ = -65					; size = 1
_BytesPerLine$ = -56					; size = 4
_pData$ = -44						; size = 4
_pUsage$ = -32						; size = 4
_hUsage$ = -20						; size = 4
_pDev$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y0$ = 16						; size = 4
_y1$ = 20						; size = 4
__DrawVLine PROC					; COMDAT
; Line 615
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 625
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 626
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _hUsage$[ebp], ecx
; Line 627
	cmp	DWORD PTR _hUsage$[ebp], 0
	je	SHORT $LN17@DrawVLine
	mov	eax, DWORD PTR _hUsage$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN18@DrawVLine
$LN17@DrawVLine:
	mov	DWORD PTR tv70[ebp], 0
$LN18@DrawVLine:
	mov	ecx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _pUsage$[ebp], ecx
; Line 628
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pData$[ebp], eax
; Line 629
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _BytesPerLine$[ebp], ecx
; Line 630
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 1
	je	SHORT $LN14@DrawVLine
; Line 631
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _IndexMask$[ebp], al
$LN13@DrawVLine:
; Line 633
	cmp	DWORD PTR _hUsage$[ebp], 0
	je	SHORT $LN10@DrawVLine
; Line 634
	mov	esi, esp
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@DrawVLine:
; Line 636
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _IndexMask$[ebp]
	xor	ecx, edx
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], cl
; Line 637
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	add	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pData$[ebp], ecx
; Line 638
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
	mov	ecx, DWORD PTR _y0$[ebp]
	cmp	ecx, DWORD PTR _y1$[ebp]
	jle	SHORT $LN13@DrawVLine
; Line 639
	jmp	SHORT $LN15@DrawVLine
$LN14@DrawVLine:
; Line 640
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ColorIndex$[ebp], ecx
; Line 641
	cmp	DWORD PTR _hUsage$[ebp], 0
	je	SHORT $LN8@DrawVLine
$LN7@DrawVLine:
; Line 643
	mov	esi, esp
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 644
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cl, BYTE PTR _ColorIndex$[ebp]
	mov	BYTE PTR [eax], cl
; Line 645
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 646
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
	mov	ecx, DWORD PTR _y0$[ebp]
	cmp	ecx, DWORD PTR _y1$[ebp]
	jle	SHORT $LN7@DrawVLine
; Line 647
	jmp	SHORT $LN15@DrawVLine
$LN8@DrawVLine:
; Line 648
	mov	eax, DWORD PTR _y1$[ebp]
	sub	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
$LN3@DrawVLine:
; Line 650
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cl, BYTE PTR _ColorIndex$[ebp]
	mov	BYTE PTR [eax], cl
; Line 651
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 652
	mov	eax, DWORD PTR _NumPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
	jne	SHORT $LN3@DrawVLine
$LN15@DrawVLine:
; Line 655
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawVLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetPixelIndex
_TEXT	SEGMENT
_pData$ = -32						; size = 4
_hUsage$ = -20						; size = 4
_pDev$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_Index$ = 20						; size = 4
__SetPixelIndex PROC					; COMDAT
; Line 661
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 666
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 667
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 668
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _hUsage$[ebp], ecx
; Line 669
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pData$[ebp], eax
; Line 670
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cl, BYTE PTR _Index$[ebp]
	mov	BYTE PTR [eax], cl
; Line 671
	cmp	DWORD PTR _hUsage$[ebp], 0
	je	SHORT $LN2@SetPixelIn
; Line 672
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hUsage$[ebp]
	push	edx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _hUsage$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SetPixelIn:
; Line 674
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetPixelIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __XorPixel
_TEXT	SEGMENT
_pData$ = -44						; size = 4
_hUsage$ = -32						; size = 4
_pDev$ = -20						; size = 4
_IndexMask$ = -5					; size = 1
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__XorPixel PROC						; COMDAT
; Line 680
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 682
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 683
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _hUsage$[ebp], ecx
; Line 684
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pData$[ebp], eax
; Line 685
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _IndexMask$[ebp], al
; Line 686
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _IndexMask$[ebp]
	xor	ecx, edx
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], cl
; Line 687
	cmp	DWORD PTR _hUsage$[ebp], 0
	je	SHORT $LN2@XorPixel
; Line 688
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hUsage$[ebp]
	push	edx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _hUsage$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@XorPixel:
; Line 690
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__XorPixel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetPixelIndex
_TEXT	SEGMENT
_pData$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__GetPixelIndex PROC					; COMDAT
; Line 696
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 699
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 700
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pData$[ebp], eax
; Line 701
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	eax, BYTE PTR [eax]
; Line 702
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetPixelIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetRect
_TEXT	SEGMENT
_pDev$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_pRect$ = 12						; size = 4
__GetRect PROC						; COMDAT
; Line 708
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 711
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 712
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	ecx, DWORD PTR _pDev$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax], dx
; Line 713
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	ecx, DWORD PTR _pDev$[ebp]
	mov	dx, WORD PTR [ecx+6]
	mov	WORD PTR [eax+2], dx
; Line 714
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [edx+8]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	edx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [edx+4], cx
; Line 715
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [edx+10]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	edx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [edx+6], cx
; Line 716
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevData
_TEXT	SEGMENT
tv64 = -196						; size = 4
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevData PROC					; COMDAT
; Line 722
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 723
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 724
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN1@GetDevData
	jmp	SHORT $LN2@GetDevData
$LN1@GetDevData:
; Line 726
	mov	eax, OFFSET _GUI_MEMDEV_DEVICE_8
	jmp	SHORT $LN4@GetDevData
$LN2@GetDevData:
; Line 728
	xor	eax, eax
$LN4@GetDevData:
; Line 729
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevData ENDP
_TEXT	ENDS
EXTRN	_GUI_MEMDEV__WriteToActiveOpaque:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetDevFunc
_TEXT	SEGMENT
tv64 = -196						; size = 4
_ppDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevFunc PROC					; COMDAT
; Line 735
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 736
	mov	eax, DWORD PTR _ppDevice$[ebp]
	mov	DWORD PTR _ppDevice$[ebp], eax
; Line 737
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 22			; 00000016H
	je	SHORT $LN1@GetDevFunc
	jmp	SHORT $LN2@GetDevFunc
$LN1@GetDevFunc:
; Line 739
	mov	eax, OFFSET _GUI_MEMDEV__WriteToActiveOpaque
	jmp	SHORT $LN4@GetDevFunc
$LN2@GetDevFunc:
; Line 741
	xor	eax, eax
$LN4@GetDevFunc:
; Line 742
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevFunc ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetOrg
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__SetOrg PROC						; COMDAT
; Line 748
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 749
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 750
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 751
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetOrg ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevProp
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevProp PROC					; COMDAT
; Line 752
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 753
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 754
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+40]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 755
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevProp ENDP
_TEXT	ENDS
END
