; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Antialias\GUIAA_Char2.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
?_aColor@?1??_DrawCharAA2_NoTrans@@9@9 DD 04H DUP (?)	; `_DrawCharAA2_NoTrans'::`2'::_aColor
_BSS	ENDS
_DATA	SEGMENT
?_Palette@?1??_DrawCharAA2_NoTrans@@9@9 DD 04H		; `_DrawCharAA2_NoTrans'::`2'::_Palette
	DB	00H
	ORG $+3
	DD	FLAT:?_aColor@?1??_DrawCharAA2_NoTrans@@9@9
?_Bitmap@?1??_DrawCharAA2_NoTrans@@9@9 DW 00H		; `_DrawCharAA2_NoTrans'::`2'::_Bitmap
	DW	00H
	DW	00H
	DW	02H
	DD	00H
	DD	FLAT:?_Palette@?1??_DrawCharAA2_NoTrans@@9@9
	DD	00H
_DATA	ENDS
PUBLIC	_GUI_AA__DrawCharAA2
EXTRN	_LCD_SetPixelAA_Xor:PROC
EXTRN	_LCD_SetPixelAA:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\antialias\guiaa_char2.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_AA__DrawCharAA2
_TEXT	SEGMENT
tv66 = -196						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_XSize$ = 16						; size = 4
_YSize$ = 20						; size = 4
_BytesPerLine$ = 24					; size = 4
_pData$ = 28						; size = 4
_GUI_AA__DrawCharAA2 PROC				; COMDAT
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 140
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 3
	ja	SHORT $LN6@GUI_AA__Dr
	mov	ecx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN8@GUI_AA__Dr[ecx*4]
$LN3@GUI_AA__Dr:
; Line 142
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BytesPerLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _YSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _XSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	__DrawCharAA2_NoTrans
	add	esp, 24					; 00000018H
; Line 143
	jmp	SHORT $LN6@GUI_AA__Dr
$LN2@GUI_AA__Dr:
; Line 145
	push	OFFSET _LCD_SetPixelAA
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BytesPerLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _YSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _XSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	__DrawCharAA2_Trans
	add	esp, 28					; 0000001cH
; Line 146
	jmp	SHORT $LN6@GUI_AA__Dr
$LN1@GUI_AA__Dr:
; Line 149
	push	OFFSET _LCD_SetPixelAA_Xor
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BytesPerLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _YSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _XSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	__DrawCharAA2_Trans
	add	esp, 28					; 0000001cH
$LN6@GUI_AA__Dr:
; Line 152
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@GUI_AA__Dr:
	DD	$LN3@GUI_AA__Dr
	DD	$LN1@GUI_AA__Dr
	DD	$LN2@GUI_AA__Dr
	DD	$LN1@GUI_AA__Dr
_GUI_AA__DrawCharAA2 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawCharAA2_Trans
_TEXT	SEGMENT
tv150 = -308						; size = 4
tv140 = -308						; size = 4
_aConvTable$ = -108					; size = 16
_Data$ = -81						; size = 1
_RemPixels$ = -72					; size = 4
_yPos$ = -60						; size = 4
_xPos$ = -48						; size = 4
_y$ = -36						; size = 4
_x$ = -24						; size = 4
_pData0$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_XSize$ = 16						; size = 4
_YSize$ = 20						; size = 4
_BytesPerLine$ = 24					; size = 4
_pData$ = 28						; size = 4
_pfSetPixelAA$ = 32					; size = 4
__DrawCharAA2_Trans PROC				; COMDAT
; Line 40
	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 44
	mov	DWORD PTR _aConvTable$[ebp], 0
	mov	DWORD PTR _aConvTable$[ebp+4], 5
	mov	DWORD PTR _aConvTable$[ebp+8], 10	; 0000000aH
	mov	DWORD PTR _aConvTable$[ebp+12], 15	; 0000000fH
; Line 46
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN8@DrawCharAA
$LN7@DrawCharAA:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN8@DrawCharAA:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _YSize$[ebp]
	jge	$LN9@DrawCharAA
; Line 47
	mov	DWORD PTR _x$[ebp], 0
; Line 48
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pData0$[ebp], eax
; Line 49
	mov	eax, DWORD PTR _XSize$[ebp]
	mov	DWORD PTR _RemPixels$[ebp], eax
; Line 50
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _yPos$[ebp], eax
$LN5@DrawCharAA:
; Line 51
	cmp	DWORD PTR _RemPixels$[ebp], 4
	jl	$LN4@DrawCharAA
; Line 52
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _xPos$[ebp], eax
; Line 53
	mov	eax, DWORD PTR _pData0$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _Data$[ebp], cl
	mov	edx, DWORD PTR _pData0$[ebp]
	add	edx, 1
	mov	DWORD PTR _pData0$[ebp], edx
; Line 54
	movzx	eax, BYTE PTR _Data$[ebp]
	sar	eax, 6
	mov	esi, esp
	movzx	ecx, BYTE PTR _aConvTable$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _yPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _xPos$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelAA$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 55
	mov	al, BYTE PTR _Data$[ebp]
	shl	al, 2
	mov	BYTE PTR _Data$[ebp], al
; Line 56
	movzx	eax, BYTE PTR _Data$[ebp]
	sar	eax, 6
	mov	esi, esp
	movzx	ecx, BYTE PTR _aConvTable$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _yPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _xPos$[ebp]
	add	eax, 1
	push	eax
	call	DWORD PTR _pfSetPixelAA$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 57
	mov	al, BYTE PTR _Data$[ebp]
	shl	al, 2
	mov	BYTE PTR _Data$[ebp], al
; Line 58
	movzx	eax, BYTE PTR _Data$[ebp]
	sar	eax, 6
	mov	esi, esp
	movzx	ecx, BYTE PTR _aConvTable$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _yPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _xPos$[ebp]
	add	eax, 2
	push	eax
	call	DWORD PTR _pfSetPixelAA$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 59
	mov	al, BYTE PTR _Data$[ebp]
	shl	al, 2
	mov	BYTE PTR _Data$[ebp], al
; Line 60
	movzx	eax, BYTE PTR _Data$[ebp]
	sar	eax, 6
	mov	esi, esp
	movzx	ecx, BYTE PTR _aConvTable$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _yPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _xPos$[ebp]
	add	eax, 3
	push	eax
	call	DWORD PTR _pfSetPixelAA$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 61
	mov	eax, DWORD PTR _RemPixels$[ebp]
	sub	eax, 4
	mov	DWORD PTR _RemPixels$[ebp], eax
; Line 62
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 4
	mov	DWORD PTR _x$[ebp], eax
; Line 63
	jmp	$LN5@DrawCharAA
$LN4@DrawCharAA:
; Line 64
	cmp	DWORD PTR _RemPixels$[ebp], 0
	je	SHORT $LN3@DrawCharAA
; Line 65
	mov	eax, DWORD PTR _pData0$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _Data$[ebp], cl
$LN2@DrawCharAA:
; Line 66
	mov	eax, DWORD PTR _RemPixels$[ebp]
	mov	DWORD PTR tv140[ebp], eax
	mov	ecx, DWORD PTR _RemPixels$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _RemPixels$[ebp], ecx
	cmp	DWORD PTR tv140[ebp], 0
	je	SHORT $LN3@DrawCharAA
; Line 67
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR tv150[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	movzx	edx, BYTE PTR _Data$[ebp]
	sar	edx, 6
	mov	esi, esp
	movzx	eax, BYTE PTR _aConvTable$[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _yPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv150[ebp]
	push	edx
	call	DWORD PTR _pfSetPixelAA$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 68
	mov	al, BYTE PTR _Data$[ebp]
	shl	al, 2
	mov	BYTE PTR _Data$[ebp], al
; Line 69
	jmp	SHORT $LN2@DrawCharAA
$LN3@DrawCharAA:
; Line 71
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 72
	jmp	$LN7@DrawCharAA
$LN9@DrawCharAA:
; Line 73
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@DrawCharAA
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@DrawCharAA:
	DD	1
	DD	$LN12@DrawCharAA
$LN12@DrawCharAA:
	DD	-108					; ffffff94H
	DD	16					; 00000010H
	DD	$LN11@DrawCharAA
$LN11@DrawCharAA:
	DB	97					; 00000061H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
__DrawCharAA2_Trans ENDP
_TEXT	ENDS
EXTRN	_GL_DrawBitmap:PROC
EXTRN	_GUI__CharHasTrans:BYTE
EXTRN	_LCD_GetpPalConvTableUncached:PROC
EXTRN	_LCD_AA_MixColors:PROC
EXTRN	_LCD_Index2Color:PROC
EXTRN	_LCD_pColorIndex:DWORD
EXTRN	_LCD_pBkColorIndex:DWORD
_BSS	SEGMENT
?_OldBkColorIndex@?1??_DrawCharAA2_NoTrans@@9@9 DD 01H DUP (?) ; `_DrawCharAA2_NoTrans'::`2'::_OldBkColorIndex
?_OldColorIndex@?1??_DrawCharAA2_NoTrans@@9@9 DD 01H DUP (?) ; `_DrawCharAA2_NoTrans'::`2'::_OldColorIndex
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __DrawCharAA2_NoTrans
_TEXT	SEGMENT
_BkColor$ = -56						; size = 4
_Color$ = -44						; size = 4
_BkColorIndex$ = -32					; size = 4
_ColorIndex$ = -20					; size = 4
_i$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_XSize$ = 16						; size = 4
_YSize$ = 20						; size = 4
_BytesPerLine$ = 24					; size = 4
_pData$ = 28						; size = 4
__DrawCharAA2_NoTrans PROC				; COMDAT
; Line 82
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 94
	mov	eax, DWORD PTR _LCD_pBkColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _BkColorIndex$[ebp], ecx
; Line 95
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ColorIndex$[ebp], ecx
; Line 100
	mov	eax, DWORD PTR ?_OldColorIndex@?1??_DrawCharAA2_NoTrans@@9@9
	cmp	eax, DWORD PTR _ColorIndex$[ebp]
	jne	SHORT $LN4@DrawCharAA@2
	mov	eax, DWORD PTR ?_OldBkColorIndex@?1??_DrawCharAA2_NoTrans@@9@9
	cmp	eax, DWORD PTR _BkColorIndex$[ebp]
	je	$LN5@DrawCharAA@2
$LN4@DrawCharAA@2:
; Line 101
	mov	eax, DWORD PTR _BkColorIndex$[ebp]
	push	eax
	call	_LCD_Index2Color
	add	esp, 4
	mov	DWORD PTR _BkColor$[ebp], eax
; Line 102
	mov	eax, DWORD PTR _ColorIndex$[ebp]
	push	eax
	call	_LCD_Index2Color
	add	esp, 4
	mov	DWORD PTR _Color$[ebp], eax
; Line 103
	mov	eax, DWORD PTR _BkColor$[ebp]
	mov	DWORD PTR ?_aColor@?1??_DrawCharAA2_NoTrans@@9@9, eax
; Line 104
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN3@DrawCharAA@2
$LN2@DrawCharAA@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@DrawCharAA@2:
	cmp	DWORD PTR _i$[ebp], 3
	jge	SHORT $LN1@DrawCharAA@2
; Line 105
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 5
	push	eax
	mov	ecx, DWORD PTR _BkColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Color$[ebp]
	push	edx
	call	_LCD_AA_MixColors
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR ?_aColor@?1??_DrawCharAA2_NoTrans@@9@9[ecx*4], eax
; Line 106
	jmp	SHORT $LN2@DrawCharAA@2
$LN1@DrawCharAA@2:
; Line 107
	mov	eax, DWORD PTR _Color$[ebp]
	mov	DWORD PTR ?_aColor@?1??_DrawCharAA2_NoTrans@@9@9+12, eax
; Line 108
	push	OFFSET ?_Palette@?1??_DrawCharAA2_NoTrans@@9@9
	call	_LCD_GetpPalConvTableUncached
	add	esp, 4
; Line 109
	mov	eax, DWORD PTR _ColorIndex$[ebp]
	mov	DWORD PTR ?_OldColorIndex@?1??_DrawCharAA2_NoTrans@@9@9, eax
; Line 110
	mov	eax, DWORD PTR _BkColorIndex$[ebp]
	mov	DWORD PTR ?_OldBkColorIndex@?1??_DrawCharAA2_NoTrans@@9@9, eax
$LN5@DrawCharAA@2:
; Line 115
	mov	ax, WORD PTR _XSize$[ebp]
	mov	WORD PTR ?_Bitmap@?1??_DrawCharAA2_NoTrans@@9@9, ax
; Line 116
	mov	ax, WORD PTR _YSize$[ebp]
	mov	WORD PTR ?_Bitmap@?1??_DrawCharAA2_NoTrans@@9@9+2, ax
; Line 117
	mov	ax, WORD PTR _BytesPerLine$[ebp]
	mov	WORD PTR ?_Bitmap@?1??_DrawCharAA2_NoTrans@@9@9+4, ax
; Line 118
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR ?_Bitmap@?1??_DrawCharAA2_NoTrans@@9@9+8, eax
; Line 122
	mov	al, BYTE PTR _GUI__CharHasTrans
	mov	BYTE PTR ?_Palette@?1??_DrawCharAA2_NoTrans@@9@9+4, al
; Line 126
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	push	OFFSET ?_Bitmap@?1??_DrawCharAA2_NoTrans@@9@9
	call	_GL_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 127
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawCharAA2_NoTrans ENDP
_TEXT	ENDS
PUBLIC	_GUIPROP_AA2_DispChar
EXTRN	_GUI_pLCD_APIList:DWORD
EXTRN	_LCD_SetDrawMode:PROC
EXTRN	_GUIPROP__FindChar:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUIPROP_AA2_DispChar
_TEXT	SEGMENT
_pCharInfo$ = -56					; size = 4
_pProp$ = -44						; size = 4
_OldDrawMode$ = -32					; size = 4
_DrawMode$ = -20					; size = 4
_BytesPerLine$ = -8					; size = 4
_c$ = 8							; size = 2
_GUIPROP_AA2_DispChar PROC				; COMDAT
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 164
	movsx	eax, WORD PTR _GUI_Context+42
	mov	DWORD PTR _DrawMode$[ebp], eax
; Line 165
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _GUI_Context+28
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_GUIPROP__FindChar
	add	esp, 8
	mov	DWORD PTR _pProp$[ebp], eax
; Line 166
	cmp	DWORD PTR _pProp$[ebp], 0
	je	$LN4@GUIPROP_AA
; Line 167
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pProp$[ebp]
	movzx	edx, WORD PTR [ecx]
	sub	eax, edx
	mov	ecx, DWORD PTR _pProp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _pCharInfo$[ebp], eax
; Line 168
	mov	eax, DWORD PTR _pCharInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	mov	DWORD PTR _BytesPerLine$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _DrawMode$[ebp]
	push	eax
	call	_LCD_SetDrawMode
	add	esp, 4
	mov	DWORD PTR _OldDrawMode$[ebp], eax
; Line 171
	cmp	DWORD PTR _GUI_pLCD_APIList, 0
	je	SHORT $LN2@GUIPROP_AA
; Line 181
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _pCharInfo$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _BytesPerLine$[ebp]
	push	edx
	push	2
	push	1
	push	1
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _pCharInfo$[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	movsx	ecx, WORD PTR _GUI_Context+36
	push	ecx
	movsx	edx, WORD PTR _GUI_Context+34
	push	edx
	mov	eax, DWORD PTR _GUI_pLCD_APIList
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 182
	jmp	SHORT $LN1@GUIPROP_AA
$LN2@GUIPROP_AA:
; Line 191
	mov	eax, DWORD PTR _pCharInfo$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _BytesPerLine$[ebp]
	push	edx
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _pCharInfo$[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	movsx	ecx, WORD PTR _GUI_Context+36
	push	ecx
	movsx	edx, WORD PTR _GUI_Context+34
	push	edx
	call	_GUI_AA__DrawCharAA2
	add	esp, 24					; 00000018H
$LN1@GUIPROP_AA:
; Line 193
	mov	eax, DWORD PTR _OldDrawMode$[ebp]
	push	eax
	call	_LCD_SetDrawMode
	add	esp, 4
; Line 194
	mov	eax, DWORD PTR _pCharInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	movsx	edx, WORD PTR _GUI_Context+34
	add	edx, ecx
	mov	WORD PTR _GUI_Context+34, dx
$LN4@GUIPROP_AA:
; Line 196
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUIPROP_AA2_DispChar ENDP
_TEXT	ENDS
PUBLIC	_GUIPROP_AA2_GetCharDistX
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUIPROP_AA2_GetCharDistX
_TEXT	SEGMENT
tv76 = -208						; size = 4
_pProp$ = -8						; size = 4
_c$ = 8							; size = 2
_GUIPROP_AA2_GetCharDistX PROC				; COMDAT
; Line 202
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 205
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _GUI_Context+28
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_GUIPROP__FindChar
	add	esp, 8
	mov	DWORD PTR _pProp$[ebp], eax
; Line 206
	cmp	DWORD PTR _pProp$[ebp], 0
	je	SHORT $LN3@GUIPROP_AA@2
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pProp$[ebp]
	movzx	edx, WORD PTR [ecx]
	sub	eax, edx
	mov	ecx, DWORD PTR _pProp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movzx	eax, BYTE PTR [edx+eax*8]
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@GUIPROP_AA@2
$LN3@GUIPROP_AA@2:
	mov	DWORD PTR tv76[ebp], 0
$LN4@GUIPROP_AA@2:
	mov	eax, DWORD PTR tv76[ebp]
; Line 207
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUIPROP_AA2_GetCharDistX ENDP
_TEXT	ENDS
PUBLIC	_GUIPROP_AA2_GetFontInfo
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUIPROP_AA2_GetFontInfo
_TEXT	SEGMENT
_pFont$ = 8						; size = 4
_pfi$ = 12						; size = 4
_GUIPROP_AA2_GetFontInfo PROC				; COMDAT
; Line 213
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 214
	mov	eax, DWORD PTR _pFont$[ebp]
	mov	DWORD PTR _pFont$[ebp], eax
; Line 215
	mov	eax, 9
	mov	ecx, DWORD PTR _pfi$[ebp]
	mov	WORD PTR [ecx], ax
; Line 216
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUIPROP_AA2_GetFontInfo ENDP
_TEXT	ENDS
PUBLIC	_GUIPROP_AA2_IsInFont
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUIPROP_AA2_IsInFont
_TEXT	SEGMENT
_pProp$ = -8						; size = 4
_pFont$ = 8						; size = 4
_c$ = 12						; size = 2
_GUIPROP_AA2_IsInFont PROC				; COMDAT
; Line 222
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 225
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pFont$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_GUIPROP__FindChar
	add	esp, 8
	mov	DWORD PTR _pProp$[ebp], eax
; Line 226
	xor	eax, eax
	cmp	DWORD PTR _pProp$[ebp], 0
	setne	al
; Line 227
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUIPROP_AA2_IsInFont ENDP
_TEXT	ENDS
END
