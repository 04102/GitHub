; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Widget\EDITHex.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_EDIT_SetHexMode
EXTRN	_WM_InvalidateWindow:PROC
EXTRN	_EDIT_SetMaxLen:PROC
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_EDIT_LockH:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\widget\edithex.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _EDIT_SetHexMode
_TEXT	SEGMENT
_MaxLenOld$ = -32					; size = 4
_MaxLen$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hEdit$ = 8						; size = 4
_Value$ = 12						; size = 4
_Min$ = 16						; size = 4
_Max$ = 20						; size = 4
_EDIT_SetHexMode PROC					; COMDAT
; Line 194
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 198
	cmp	DWORD PTR _hEdit$[ebp], 0
	je	$LN5@EDIT_SetHe
; Line 199
	mov	eax, DWORD PTR _hEdit$[ebp]
	push	eax
	call	_EDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 200
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+92], OFFSET __AddKeyHex
; Line 201
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+96], OFFSET __UpdateBuffer
; Line 202
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	DWORD PTR [eax+76], ecx
; Line 203
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+80], 0
; Line 204
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+60]
	mov	DWORD PTR _MaxLen$[ebp], ecx
; Line 205
	cmp	DWORD PTR _MaxLen$[ebp], 0
	jg	SHORT $LN3@EDIT_SetHe
; Line 206
	mov	eax, DWORD PTR _Max$[ebp]
	push	eax
	call	__GetNumDigits
	add	esp, 4
	mov	DWORD PTR _MaxLen$[ebp], eax
$LN3@EDIT_SetHe:
; Line 208
	cmp	DWORD PTR _MaxLen$[ebp], 8
	jle	SHORT $LN2@EDIT_SetHe
; Line 209
	mov	DWORD PTR _MaxLen$[ebp], 8
$LN2@EDIT_SetHe:
; Line 211
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Min$[ebp]
	mov	DWORD PTR [eax+64], ecx
; Line 212
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Max$[ebp]
	mov	DWORD PTR [eax+68], ecx
; Line 213
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	BYTE PTR [eax+88], 1
; Line 214
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+60]
	mov	DWORD PTR _MaxLenOld$[ebp], ecx
; Line 215
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 216
	mov	eax, DWORD PTR _MaxLen$[ebp]
	cmp	eax, DWORD PTR _MaxLenOld$[ebp]
	je	SHORT $LN1@EDIT_SetHe
; Line 217
	mov	eax, DWORD PTR _MaxLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hEdit$[ebp]
	push	ecx
	call	_EDIT_SetMaxLen
	add	esp, 8
$LN1@EDIT_SetHe:
; Line 219
	mov	eax, DWORD PTR _hEdit$[ebp]
	push	eax
	call	__UpdateBuffer
	add	esp, 4
; Line 220
	mov	eax, DWORD PTR _hEdit$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN5@EDIT_SetHe:
; Line 223
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_EDIT_SetHexMode ENDP
_TEXT	ENDS
EXTRN	_GUI_AddHex:PROC
EXTRN	_GUI_ALLOC_LockH:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __UpdateBuffer
_TEXT	SEGMENT
_pObj$ = -20						; size = 4
_s$ = -8						; size = 4
_hObj$ = 8						; size = 4
__UpdateBuffer PROC					; COMDAT
; Line 63
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 66
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_EDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 67
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 68
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	call	_GUI_AddHex
	add	esp, 12					; 0000000cH
; Line 69
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 70
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _s$[ebp], 0
; Line 71
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@UpdateBuff
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@UpdateBuff:
	DD	1
	DD	$LN4@UpdateBuff
$LN4@UpdateBuff:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@UpdateBuff
$LN3@UpdateBuff:
	DB	115					; 00000073H
	DB	0
__UpdateBuffer ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetNumDigits
_TEXT	SEGMENT
_Ret$ = -8						; size = 4
_Value$ = 8						; size = 4
__GetNumDigits PROC					; COMDAT
; Line 103
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 105
	mov	DWORD PTR _Ret$[ebp], 0
	jmp	SHORT $LN3@GetNumDigi
$LN2@GetNumDigi:
	mov	eax, DWORD PTR _Value$[ebp]
	shr	eax, 4
	mov	DWORD PTR _Value$[ebp], eax
	mov	ecx, DWORD PTR _Ret$[ebp]
	add	ecx, 1
	mov	DWORD PTR _Ret$[ebp], ecx
$LN3@GetNumDigi:
	cmp	DWORD PTR _Value$[ebp], 0
	je	SHORT $LN1@GetNumDigi
	jmp	SHORT $LN2@GetNumDigi
$LN1@GetNumDigi:
; Line 106
	mov	eax, DWORD PTR _Ret$[ebp]
; Line 107
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetNumDigits ENDP
_TEXT	ENDS
EXTRN	_EDIT__SetCursorPos:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __AddKeyHex
_TEXT	SEGMENT
tv67 = -220						; size = 4
_Nibble$11442 = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Key$ = 12						; size = 4
__AddKeyHex PROC					; COMDAT
; Line 137
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 139
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_EDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 140
	cmp	DWORD PTR _pObj$[ebp], 0
	je	$LN9@AddKeyHex
; Line 141
	mov	eax, DWORD PTR _Key$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 3
	ja	SHORT $LN2@AddKeyHex
	mov	edx, DWORD PTR tv67[ebp]
	jmp	DWORD PTR $LN12@AddKeyHex[edx*4]
$LN6@AddKeyHex:
; Line 157
	push	1
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__AddPosition
	add	esp, 12					; 0000000cH
; Line 158
	jmp	$LN9@AddKeyHex
$LN5@AddKeyHex:
; Line 160
	push	-1
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__AddPosition
	add	esp, 12					; 0000000cH
; Line 161
	jmp	SHORT $LN9@AddKeyHex
$LN4@AddKeyHex:
; Line 164
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_EDIT__SetCursorPos
	add	esp, 8
; Line 165
	jmp	SHORT $LN9@AddKeyHex
$LN3@AddKeyHex:
; Line 167
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_EDIT__SetCursorPos
	add	esp, 8
; Line 168
	jmp	SHORT $LN9@AddKeyHex
$LN2@AddKeyHex:
; Line 171
	mov	eax, DWORD PTR _Key$[ebp]
	push	eax
	call	__HexChar2Int
	add	esp, 4
	mov	DWORD PTR _Nibble$11442[ebp], eax
; Line 172
	cmp	DWORD PTR _Nibble$11442[ebp], 0
	jl	SHORT $LN9@AddKeyHex
; Line 173
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Nibble$11442[ebp]
	push	edx
	call	__EditHex
	add	esp, 12					; 0000000cH
; Line 174
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_EDIT__SetCursorPos
	add	esp, 8
$LN9@AddKeyHex:
; Line 180
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 181
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__UpdateBuffer
	add	esp, 4
; Line 182
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@AddKeyHex:
	DD	$LN3@AddKeyHex
	DD	$LN6@AddKeyHex
	DD	$LN4@AddKeyHex
	DD	$LN5@AddKeyHex
__AddKeyHex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __HexChar2Int
_TEXT	SEGMENT
_Char$ = 8						; size = 4
__HexChar2Int PROC					; COMDAT
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 51
	cmp	DWORD PTR _Char$[ebp], 48		; 00000030H
	jl	SHORT $LN2@HexChar2In
	cmp	DWORD PTR _Char$[ebp], 57		; 00000039H
	jg	SHORT $LN2@HexChar2In
; Line 52
	mov	eax, DWORD PTR _Char$[ebp]
	sub	eax, 48					; 00000030H
	jmp	SHORT $LN3@HexChar2In
$LN2@HexChar2In:
; Line 53
	mov	eax, DWORD PTR _Char$[ebp]
	and	eax, -33				; ffffffdfH
	mov	DWORD PTR _Char$[ebp], eax
; Line 54
	cmp	DWORD PTR _Char$[ebp], 65		; 00000041H
	jl	SHORT $LN1@HexChar2In
	cmp	DWORD PTR _Char$[ebp], 70		; 00000046H
	jg	SHORT $LN1@HexChar2In
; Line 55
	mov	eax, DWORD PTR _Char$[ebp]
	sub	eax, 55					; 00000037H
	jmp	SHORT $LN3@HexChar2In
$LN1@HexChar2In:
; Line 56
	or	eax, -1
$LN3@HexChar2In:
; Line 57
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__HexChar2Int ENDP
_TEXT	ENDS
EXTRN	_EDIT__SetValueUnsigned:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __EditHex
_TEXT	SEGMENT
_Result$ = -44						; size = 4
_OrMask$ = -32						; size = 4
_AndMask$ = -20						; size = 4
_Pos$ = -8						; size = 4
_Nibble$ = 8						; size = 4
_pObj$ = 12						; size = 4
_hObj$ = 16						; size = 4
__EditHex PROC						; COMDAT
; Line 77
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 78
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+60]
	mov	edx, DWORD PTR _pObj$[ebp]
	sub	ecx, DWORD PTR [edx+80]
	sub	ecx, 1
	mov	DWORD PTR _Pos$[ebp], ecx
; Line 79
	mov	ecx, DWORD PTR _Pos$[ebp]
	shl	ecx, 2
	mov	eax, 15					; 0000000fH
	shl	eax, cl
	not	eax
	mov	DWORD PTR _AndMask$[ebp], eax
; Line 80
	mov	ecx, DWORD PTR _Pos$[ebp]
	shl	ecx, 2
	mov	eax, DWORD PTR _Nibble$[ebp]
	shl	eax, cl
	mov	DWORD PTR _OrMask$[ebp], eax
; Line 81
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	and	ecx, DWORD PTR _AndMask$[ebp]
	mov	DWORD PTR _Result$[ebp], ecx
; Line 82
	mov	eax, DWORD PTR _Result$[ebp]
	or	eax, DWORD PTR _OrMask$[ebp]
	mov	DWORD PTR _Result$[ebp], eax
; Line 83
	mov	eax, DWORD PTR _Result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_EDIT__SetValueUnsigned
	add	esp, 8
; Line 84
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__EditHex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __AddPosition
_TEXT	SEGMENT
tv70 = -220						; size = 4
_v$ = -20						; size = 4
_Pos$ = -8						; size = 4
_pObj$ = 8						; size = 4
_hObj$ = 12						; size = 4
_Sign$ = 16						; size = 4
__AddPosition PROC					; COMDAT
; Line 113
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 116
	mov	DWORD PTR _v$[ebp], 1
; Line 117
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+60]
	mov	edx, DWORD PTR _pObj$[ebp]
	sub	ecx, DWORD PTR [edx+80]
	sub	ecx, 1
	mov	DWORD PTR _Pos$[ebp], ecx
$LN3@AddPositio:
; Line 118
	mov	eax, DWORD PTR _Pos$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	mov	ecx, DWORD PTR _Pos$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _Pos$[ebp], ecx
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN2@AddPositio
; Line 119
	mov	eax, DWORD PTR _v$[ebp]
	shl	eax, 4
	mov	DWORD PTR _v$[ebp], eax
; Line 120
	jmp	SHORT $LN3@AddPositio
$LN2@AddPositio:
; Line 121
	cmp	DWORD PTR _Sign$[ebp], 0
	jge	SHORT $LN1@AddPositio
; Line 122
	mov	eax, DWORD PTR _v$[ebp]
	not	eax
	add	eax, 1
	mov	DWORD PTR _v$[ebp], eax
$LN1@AddPositio:
; Line 124
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_EDIT__SetValueUnsigned
	add	esp, 8
; Line 125
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__AddPosition ENDP
_TEXT	ENDS
END
