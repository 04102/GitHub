; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\DUII\Alarm.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0Alarm@@QAE@_NMMKKW4AlarmType@@PAV0@2@Z	; Alarm::Alarm
PUBLIC	??0Alarm@@QAE@_NMMK@Z				; Alarm::Alarm
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\duii\alarm.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0Alarm@@QAE@_NMMK@Z
_TEXT	SEGMENT
$T13495 = -240						; size = 32
_this$ = -8						; size = 4
_bEnabled$ = 8						; size = 1
_fMinValue$ = 12					; size = 4
_fMaxValue$ = 16					; size = 4
_cColor$ = 20						; size = 4
??0Alarm@@QAE@_NMMK@Z PROC				; Alarm::Alarm, COMDAT
; _this$ = ecx
; Line 12
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 13
	push	0
	push	0
	push	1
	mov	eax, DWORD PTR _cColor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cColor$[ebp]
	push	ecx
	push	ecx
	fld	DWORD PTR _fMaxValue$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fMinValue$[ebp]
	fstp	DWORD PTR [esp]
	movzx	edx, BYTE PTR _bEnabled$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T13495[ebp]
	call	??0Alarm@@QAE@_NMMKKW4AlarmType@@PAV0@2@Z ; Alarm::Alarm
; Line 14
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Alarm@@QAE@_NMMK@Z ENDP				; Alarm::Alarm
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0Alarm@@QAE@_NMMKKW4AlarmType@@PAV0@2@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bEnabled$ = 8						; size = 1
_fMinValue$ = 12					; size = 4
_fMaxValue$ = 16					; size = 4
_cColor$ = 20						; size = 4
_cDarkColor$ = 24					; size = 4
_tType$ = 28						; size = 4
_pNext$ = 32						; size = 4
_pPrev$ = 36						; size = 4
??0Alarm@@QAE@_NMMKKW4AlarmType@@PAV0@2@Z PROC		; Alarm::Alarm, COMDAT
; _this$ = ecx
; Line 17
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 18
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bEnabled$[ebp]
	mov	BYTE PTR [eax], cl
; Line 19
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fMinValue$[ebp]
	fstp	DWORD PTR [eax+4]
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fMaxValue$[ebp]
	fstp	DWORD PTR [eax+8]
; Line 21
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cColor$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cDarkColor$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 23
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pNext$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 24
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pPrev$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _tType$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 26
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
??0Alarm@@QAE@_NMMKKW4AlarmType@@PAV0@2@Z ENDP		; Alarm::Alarm
_TEXT	ENDS
END
