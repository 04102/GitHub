; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_SPRITE.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
__Sprite_API DD	03H
	DD	FLAT:__DrawBitmap
	DD	FLAT:__DrawHLine
	DD	FLAT:__DrawVLine
	DD	FLAT:__FillRect
	DD	FLAT:__GetPixelIndex
	DD	FLAT:__SetPixelIndex
	DD	FLAT:__XorPixel
	DD	FLAT:__SetOrg
	DD	FLAT:__GetDevFunc
	DD	FLAT:__GetDevProp
	DD	FLAT:__GetDevData
	DD	FLAT:__GetRect
CONST	ENDS
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	_GUI_GetBitmapPixelIndex:PROC
EXTRN	_GUI_GetBitmapPixelIndexEx:PROC
EXTRN	_GUI__IntersectRect:PROC
EXTRN	_GUI_RectsIntersect:PROC
EXTRN	_GUI_ALLOC_LockH:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_sprite.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __DrawBitmap
_TEXT	SEGMENT
tv297 = -384						; size = 4
tv267 = -384						; size = 4
tv260 = -384						; size = 4
tv248 = -384						; size = 4
_pRect$ = -184						; size = 4
_Rect$ = -172						; size = 8
_xSizeSprite$ = -156					; size = 4
_y$ = -144						; size = 4
_x$ = -132						; size = 4
_pSave$ = -120						; size = 4
_pBM$ = -108						; size = 4
_IndexMask$ = -96					; size = 4
_Index$ = -84						; size = 4
_Param$ = -72						; size = 24
_pSprite$ = -40						; size = 4
_Context$ = -28						; size = 24
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xSize$ = 20						; size = 4
_ySize$ = 24						; size = 4
_BitsPerPixel$ = 28					; size = 4
_BytesPerLine$ = 32					; size = 4
_pData$ = 36						; size = 4
_Diff$ = 40						; size = 4
_pTrans$ = 44						; size = 4
__DrawBitmap PROC					; COMDAT
; Line 305
	push	ebp
	mov	ebp, esp
	sub	esp, 384				; 00000180H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 306
	mov	DWORD PTR _Context$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _Context$[ebp+4], eax
	mov	DWORD PTR _Context$[ebp+8], eax
	mov	DWORD PTR _Context$[ebp+12], eax
	mov	DWORD PTR _Context$[ebp+16], eax
	mov	DWORD PTR _Context$[ebp+20], eax
; Line 316
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 317
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _pSprite$[ebp]
	movsx	eax, WORD PTR [edx+4]
	sub	ecx, eax
	add	ecx, 1
	mov	DWORD PTR _xSizeSprite$[ebp], ecx
; Line 318
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pBM$[ebp], ecx
; Line 319
	mov	eax, DWORD PTR _pSprite$[ebp]
	add	eax, 4
	mov	DWORD PTR _Context$[ebp], eax
; Line 320
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 321
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	WORD PTR _Context$[ebp+12], ax
; Line 322
	mov	ax, WORD PTR _y0$[ebp]
	mov	WORD PTR _Context$[ebp+14], ax
; Line 323
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	ecx, DWORD PTR _xSize$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	mov	WORD PTR _Context$[ebp+16], dx
; Line 324
	mov	eax, DWORD PTR _ySize$[ebp]
	mov	ecx, DWORD PTR _y0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	WORD PTR _Context$[ebp+18], dx
; Line 325
	mov	eax, DWORD PTR _Context$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Context$[ebp+12]
	push	ecx
	call	_GUI_RectsIntersect
	add	esp, 8
	test	eax, eax
	je	$LN43@DrawBitmap
$LN42@DrawBitmap:
; Line 329
	lea	eax, DWORD PTR _Context$[ebp]
	push	eax
	call	__GetClipRect
	add	esp, 4
	test	eax, eax
	je	SHORT $LN41@DrawBitmap
; Line 330
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Context$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BytesPerLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _BitsPerPixel$[ebp]
	push	edx
	mov	eax, DWORD PTR _ySize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	call	__GetClipParam
	add	esp, 40					; 00000028H
	test	eax, eax
	je	SHORT $LN40@DrawBitmap
; Line 331
	jmp	SHORT $LN42@DrawBitmap
$LN40@DrawBitmap:
; Line 333
	mov	esi, esp
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Param$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Param$[ebp+20]
	push	edx
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BitsPerPixel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Param$[ebp+16]
	push	edx
	mov	eax, DWORD PTR _Param$[ebp+12]
	push	eax
	mov	ecx, DWORD PTR _Param$[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _Param$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 334
	jmp	$LN42@DrawBitmap
$LN41@DrawBitmap:
; Line 338
	mov	eax, DWORD PTR _Context$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _Rect$[ebp], ecx
	mov	DWORD PTR _Rect$[ebp+4], edx
; Line 339
	lea	eax, DWORD PTR _Context$[ebp+12]
	push	eax
	lea	ecx, DWORD PTR _Rect$[ebp]
	push	ecx
	call	_GUI_RectsIntersect
	add	esp, 8
	test	eax, eax
	je	$LN39@DrawBitmap
; Line 340
	lea	eax, DWORD PTR _Context$[ebp+12]
	push	eax
	lea	ecx, DWORD PTR _Rect$[ebp]
	push	ecx
	call	_GUI__IntersectRect
	add	esp, 8
; Line 341
	lea	eax, DWORD PTR _Rect$[ebp]
	mov	DWORD PTR _pRect$[ebp], eax
; Line 342
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BytesPerLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _BitsPerPixel$[ebp]
	push	edx
	mov	eax, DWORD PTR _ySize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	call	__GetClipParam
	add	esp, 40					; 00000028H
	test	eax, eax
	jne	$LN39@DrawBitmap
; Line 343
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$[ebp], eax
; Line 344
	mov	eax, DWORD PTR _pRect$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _y$[ebp], ecx
	jmp	SHORT $LN37@DrawBitmap
$LN36@DrawBitmap:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN37@DrawBitmap:
	mov	eax, DWORD PTR _pRect$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _y$[ebp], ecx
	jg	$LN39@DrawBitmap
; Line 345
	mov	eax, DWORD PTR _pRect$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	DWORD PTR _x$[ebp], ecx
	jmp	SHORT $LN34@DrawBitmap
$LN33@DrawBitmap:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN34@DrawBitmap:
	mov	eax, DWORD PTR _pRect$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	cmp	DWORD PTR _x$[ebp], ecx
	jg	$LN32@DrawBitmap
; Line 349
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _Param$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, DWORD PTR _Param$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _Param$[ebp+20]
	push	edx
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BitsPerPixel$[ebp]
	push	ecx
	call	_GUI_GetBitmapPixelIndexEx
	add	esp, 20					; 00000014H
	mov	DWORD PTR _Index$[ebp], eax
; Line 353
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _pBM$[ebp]
	push	eax
	call	_GUI_GetBitmapPixelIndex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN31@DrawBitmap
; Line 357
	mov	eax, DWORD PTR _pSprite$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pSave$[ebp], eax
; Line 358
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	imul	edx, DWORD PTR _xSizeSprite$[ebp]
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, ecx
	add	edx, eax
	mov	ecx, DWORD PTR _pSave$[ebp]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pSave$[ebp], edx
; Line 359
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	SHORT $LN30@DrawBitmap
; Line 360
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv248[ebp], eax
	cmp	DWORD PTR tv248[ebp], 3
	ja	SHORT $LN28@DrawBitmap
	mov	ecx, DWORD PTR tv248[ebp]
	jmp	DWORD PTR $LN52@DrawBitmap[ecx*4]
$LN27@DrawBitmap:
; Line 362
	mov	eax, DWORD PTR _pSave$[ebp]
	mov	ecx, DWORD PTR _Index$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax], ecx
; Line 363
	jmp	SHORT $LN28@DrawBitmap
$LN26@DrawBitmap:
; Line 365
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN25@DrawBitmap
; Line 366
	mov	eax, DWORD PTR _pSave$[ebp]
	mov	ecx, DWORD PTR _Index$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax], ecx
$LN25@DrawBitmap:
; Line 368
	jmp	SHORT $LN28@DrawBitmap
$LN24@DrawBitmap:
; Line 371
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	xor	edx, DWORD PTR _IndexMask$[ebp]
	mov	eax, DWORD PTR _pSave$[ebp]
	mov	DWORD PTR [eax], edx
$LN28@DrawBitmap:
; Line 374
	jmp	SHORT $LN23@DrawBitmap
$LN30@DrawBitmap:
; Line 375
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv260[ebp], eax
	cmp	DWORD PTR tv260[ebp], 3
	ja	SHORT $LN23@DrawBitmap
	mov	ecx, DWORD PTR tv260[ebp]
	jmp	DWORD PTR $LN53@DrawBitmap[ecx*4]
$LN20@DrawBitmap:
; Line 377
	mov	eax, DWORD PTR _pSave$[ebp]
	mov	ecx, DWORD PTR _Index$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 378
	jmp	SHORT $LN23@DrawBitmap
$LN19@DrawBitmap:
; Line 380
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN18@DrawBitmap
; Line 381
	mov	eax, DWORD PTR _pSave$[ebp]
	mov	ecx, DWORD PTR _Index$[ebp]
	mov	DWORD PTR [eax], ecx
$LN18@DrawBitmap:
; Line 383
	jmp	SHORT $LN23@DrawBitmap
$LN17@DrawBitmap:
; Line 386
	mov	eax, DWORD PTR _Index$[ebp]
	xor	eax, DWORD PTR _IndexMask$[ebp]
	mov	ecx, DWORD PTR _pSave$[ebp]
	mov	DWORD PTR [ecx], eax
$LN23@DrawBitmap:
; Line 390
	jmp	$LN16@DrawBitmap
$LN31@DrawBitmap:
; Line 394
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN15@DrawBitmap
; Line 395
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv267[ebp], eax
	cmp	DWORD PTR tv267[ebp], 3
	ja	$LN13@DrawBitmap
	mov	ecx, DWORD PTR tv267[ebp]
	jmp	DWORD PTR $LN54@DrawBitmap[ecx*4]
$LN12@DrawBitmap:
; Line 397
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 398
	jmp	SHORT $LN13@DrawBitmap
$LN11@DrawBitmap:
; Line 400
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN10@DrawBitmap
; Line 401
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@DrawBitmap:
; Line 403
	jmp	SHORT $LN13@DrawBitmap
$LN9@DrawBitmap:
; Line 406
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	xor	edx, DWORD PTR _IndexMask$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@DrawBitmap:
; Line 409
	jmp	$LN16@DrawBitmap
$LN15@DrawBitmap:
; Line 410
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv297[ebp], eax
	cmp	DWORD PTR tv297[ebp], 3
	ja	$LN16@DrawBitmap
	mov	ecx, DWORD PTR tv297[ebp]
	jmp	DWORD PTR $LN55@DrawBitmap[ecx*4]
$LN5@DrawBitmap:
; Line 412
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 413
	jmp	SHORT $LN16@DrawBitmap
$LN4@DrawBitmap:
; Line 415
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN3@DrawBitmap
; Line 416
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@DrawBitmap:
; Line 418
	jmp	SHORT $LN16@DrawBitmap
$LN2@DrawBitmap:
; Line 421
	mov	eax, DWORD PTR _Index$[ebp]
	xor	eax, DWORD PTR _IndexMask$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@DrawBitmap:
; Line 426
	jmp	$LN33@DrawBitmap
$LN32@DrawBitmap:
; Line 427
	jmp	$LN36@DrawBitmap
$LN39@DrawBitmap:
; Line 430
	jmp	SHORT $LN1@DrawBitmap
$LN43@DrawBitmap:
; Line 431
	mov	esi, esp
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Diff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BitsPerPixel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ySize$[ebp]
	push	edx
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DrawBitmap:
; Line 433
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 434
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN51@DrawBitmap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 384				; 00000180H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN51@DrawBitmap:
	DD	3
	DD	$LN50@DrawBitmap
$LN50@DrawBitmap:
	DD	-28					; ffffffe4H
	DD	24					; 00000018H
	DD	$LN47@DrawBitmap
	DD	-72					; ffffffb8H
	DD	24					; 00000018H
	DD	$LN48@DrawBitmap
	DD	-172					; ffffff54H
	DD	8
	DD	$LN49@DrawBitmap
$LN49@DrawBitmap:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN48@DrawBitmap:
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN47@DrawBitmap:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
	npad	1
$LN52@DrawBitmap:
	DD	$LN27@DrawBitmap
	DD	$LN24@DrawBitmap
	DD	$LN26@DrawBitmap
	DD	$LN24@DrawBitmap
$LN53@DrawBitmap:
	DD	$LN20@DrawBitmap
	DD	$LN17@DrawBitmap
	DD	$LN19@DrawBitmap
	DD	$LN17@DrawBitmap
$LN54@DrawBitmap:
	DD	$LN12@DrawBitmap
	DD	$LN9@DrawBitmap
	DD	$LN11@DrawBitmap
	DD	$LN9@DrawBitmap
$LN55@DrawBitmap:
	DD	$LN5@DrawBitmap
	DD	$LN2@DrawBitmap
	DD	$LN4@DrawBitmap
	DD	$LN2@DrawBitmap
__DrawBitmap ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetClipRect
_TEXT	SEGMENT
_y1$ = -68						; size = 4
_x1$ = -56						; size = 4
_y0$ = -44						; size = 4
_x0$ = -32						; size = 4
_pRectDraw$ = -20					; size = 4
_pRectSprite$ = -8					; size = 4
_pContext$ = 8						; size = 4
__GetClipRect PROC					; COMDAT
; Line 93
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 98
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pRectSprite$[ebp], ecx
; Line 99
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 4
	mov	DWORD PTR _pRectDraw$[ebp], eax
; Line 100
	mov	eax, DWORD PTR _pContext$[ebp]
	movsx	ecx, WORD PTR [eax+12]
	mov	DWORD PTR _x0$[ebp], ecx
; Line 101
	mov	eax, DWORD PTR _pContext$[ebp]
	movsx	ecx, WORD PTR [eax+14]
	mov	DWORD PTR _y0$[ebp], ecx
; Line 102
	mov	eax, DWORD PTR _pContext$[ebp]
	movsx	ecx, WORD PTR [eax+16]
	mov	DWORD PTR _x1$[ebp], ecx
; Line 103
	mov	eax, DWORD PTR _pContext$[ebp]
	movsx	ecx, WORD PTR [eax+18]
	mov	DWORD PTR _y1$[ebp], ecx
; Line 104
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	$LN20@GetClipRec
; Line 108
	mov	eax, DWORD PTR _pRectSprite$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	cmp	DWORD PTR _y1$[ebp], ecx
	jge	SHORT $LN19@GetClipRec
; Line 109
	xor	eax, eax
	jmp	$LN21@GetClipRec
$LN19@GetClipRec:
; Line 111
	mov	eax, DWORD PTR _pRectSprite$[ebp]
	movsx	ecx, WORD PTR [eax]
	cmp	DWORD PTR _x1$[ebp], ecx
	jge	SHORT $LN18@GetClipRec
; Line 112
	xor	eax, eax
	jmp	$LN21@GetClipRec
$LN18@GetClipRec:
; Line 114
	mov	eax, DWORD PTR _pRectSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _y0$[ebp], ecx
	jle	SHORT $LN17@GetClipRec
; Line 115
	xor	eax, eax
	jmp	$LN21@GetClipRec
$LN17@GetClipRec:
; Line 117
	mov	eax, DWORD PTR _pRectSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	cmp	DWORD PTR _x0$[ebp], ecx
	jle	SHORT $LN16@GetClipRec
; Line 118
	xor	eax, eax
	jmp	$LN21@GetClipRec
$LN16@GetClipRec:
; Line 123
	mov	eax, DWORD PTR _pRectSprite$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	cmp	DWORD PTR _y0$[ebp], ecx
	jge	SHORT $LN15@GetClipRec
; Line 124
	mov	eax, DWORD PTR _pRectDraw$[ebp]
	mov	cx, WORD PTR _y0$[ebp]
	mov	WORD PTR [eax+2], cx
; Line 125
	mov	eax, DWORD PTR _pRectSprite$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	sub	ecx, 1
	mov	edx, DWORD PTR _pRectDraw$[ebp]
	mov	WORD PTR [edx+6], cx
; Line 126
	mov	eax, DWORD PTR _pRectDraw$[ebp]
	mov	cx, WORD PTR _x0$[ebp]
	mov	WORD PTR [eax], cx
; Line 127
	mov	eax, DWORD PTR _pRectDraw$[ebp]
	mov	cx, WORD PTR _x1$[ebp]
	mov	WORD PTR [eax+4], cx
; Line 128
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 129
	mov	eax, 1
	jmp	$LN21@GetClipRec
$LN15@GetClipRec:
; Line 131
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN20@GetClipRec:
; Line 133
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+20], 1
	jne	$LN14@GetClipRec
; Line 137
	mov	eax, DWORD PTR _pRectSprite$[ebp]
	movsx	ecx, WORD PTR [eax]
	cmp	DWORD PTR _x0$[ebp], ecx
	jge	$LN13@GetClipRec
; Line 138
	mov	eax, DWORD PTR _pRectDraw$[ebp]
	mov	cx, WORD PTR _x0$[ebp]
	mov	WORD PTR [eax], cx
; Line 139
	mov	eax, DWORD PTR _pRectSprite$[ebp]
	movsx	ecx, WORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _pRectDraw$[ebp]
	mov	WORD PTR [edx+4], cx
; Line 140
	mov	eax, DWORD PTR _pRectSprite$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	cmp	DWORD PTR _y0$[ebp], ecx
	jge	SHORT $LN12@GetClipRec
; Line 141
	mov	eax, DWORD PTR _pRectDraw$[ebp]
	mov	ecx, DWORD PTR _pRectSprite$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax+2], dx
; Line 142
	jmp	SHORT $LN11@GetClipRec
$LN12@GetClipRec:
; Line 143
	mov	eax, DWORD PTR _pRectDraw$[ebp]
	mov	cx, WORD PTR _y0$[ebp]
	mov	WORD PTR [eax+2], cx
$LN11@GetClipRec:
; Line 145
	mov	eax, DWORD PTR _pRectSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _y1$[ebp], ecx
	jle	SHORT $LN10@GetClipRec
; Line 146
	mov	eax, DWORD PTR _pRectDraw$[ebp]
	mov	ecx, DWORD PTR _pRectSprite$[ebp]
	mov	dx, WORD PTR [ecx+6]
	mov	WORD PTR [eax+6], dx
; Line 147
	jmp	SHORT $LN9@GetClipRec
$LN10@GetClipRec:
; Line 148
	mov	eax, DWORD PTR _pRectDraw$[ebp]
	mov	cx, WORD PTR _y1$[ebp]
	mov	WORD PTR [eax+6], cx
$LN9@GetClipRec:
; Line 150
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 151
	mov	eax, 1
	jmp	$LN21@GetClipRec
$LN13@GetClipRec:
; Line 153
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN14@GetClipRec:
; Line 155
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+20], 2
	jne	$LN8@GetClipRec
; Line 159
	mov	eax, DWORD PTR _pRectSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	cmp	DWORD PTR _x1$[ebp], ecx
	jle	SHORT $LN7@GetClipRec
; Line 160
	mov	eax, DWORD PTR _pRectDraw$[ebp]
	mov	cx, WORD PTR _x1$[ebp]
	mov	WORD PTR [eax+4], cx
; Line 161
	mov	eax, DWORD PTR _pRectSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _pRectDraw$[ebp]
	mov	WORD PTR [edx], cx
; Line 162
	mov	eax, DWORD PTR _pRectSprite$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	cmp	DWORD PTR _y0$[ebp], ecx
	jge	SHORT $LN6@GetClipRec
; Line 163
	mov	eax, DWORD PTR _pRectDraw$[ebp]
	mov	ecx, DWORD PTR _pRectSprite$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax+2], dx
; Line 164
	jmp	SHORT $LN5@GetClipRec
$LN6@GetClipRec:
; Line 165
	mov	eax, DWORD PTR _pRectDraw$[ebp]
	mov	cx, WORD PTR _y0$[ebp]
	mov	WORD PTR [eax+2], cx
$LN5@GetClipRec:
; Line 167
	mov	eax, DWORD PTR _pRectSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _y1$[ebp], ecx
	jle	SHORT $LN4@GetClipRec
; Line 168
	mov	eax, DWORD PTR _pRectDraw$[ebp]
	mov	ecx, DWORD PTR _pRectSprite$[ebp]
	mov	dx, WORD PTR [ecx+6]
	mov	WORD PTR [eax+6], dx
; Line 169
	jmp	SHORT $LN3@GetClipRec
$LN4@GetClipRec:
; Line 170
	mov	eax, DWORD PTR _pRectDraw$[ebp]
	mov	cx, WORD PTR _y1$[ebp]
	mov	WORD PTR [eax+6], cx
$LN3@GetClipRec:
; Line 172
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 173
	mov	eax, 1
	jmp	SHORT $LN21@GetClipRec
$LN7@GetClipRec:
; Line 175
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN8@GetClipRec:
; Line 177
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+20], 3
	jne	SHORT $LN2@GetClipRec
; Line 181
	mov	eax, DWORD PTR _pRectSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _y1$[ebp], ecx
	jle	SHORT $LN1@GetClipRec
; Line 182
	mov	eax, DWORD PTR _pRectSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	add	ecx, 1
	mov	edx, DWORD PTR _pRectDraw$[ebp]
	mov	WORD PTR [edx+2], cx
; Line 183
	mov	eax, DWORD PTR _pRectDraw$[ebp]
	mov	cx, WORD PTR _y1$[ebp]
	mov	WORD PTR [eax+6], cx
; Line 184
	mov	eax, DWORD PTR _pRectDraw$[ebp]
	mov	cx, WORD PTR _x0$[ebp]
	mov	WORD PTR [eax], cx
; Line 185
	mov	eax, DWORD PTR _pRectDraw$[ebp]
	mov	cx, WORD PTR _x1$[ebp]
	mov	WORD PTR [eax+4], cx
; Line 186
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 187
	mov	eax, 1
	jmp	SHORT $LN21@GetClipRec
$LN1@GetClipRec:
; Line 189
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN2@GetClipRec:
; Line 191
	xor	eax, eax
$LN21@GetClipRec:
; Line 192
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetClipRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetClipParam
_TEXT	SEGMENT
tv149 = -220						; size = 4
_y1$ = -20						; size = 4
_x1$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xSize$ = 16						; size = 4
_ySize$ = 20						; size = 4
_BitsPerPixel$ = 24					; size = 4
_BytesPerLine$ = 28					; size = 4
_pData$ = 32						; size = 4
_Diff$ = 36						; size = 4
_pRect$ = 40						; size = 4
_p$ = 44						; size = 4
__GetClipParam PROC					; COMDAT
; Line 206
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 208
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 209
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _y0$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 210
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 211
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _ySize$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 212
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 213
	mov	eax, DWORD PTR _ySize$[ebp]
	mov	ecx, DWORD PTR _y0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _y1$[ebp], edx
; Line 214
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _x1$[ebp], edx
; Line 216
	mov	eax, DWORD PTR _pRect$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	sub	ecx, DWORD PTR _y0$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 217
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN16@GetClipPar
; Line 218
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 219
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jg	SHORT $LN15@GetClipPar
; Line 220
	mov	eax, 1
	jmp	$LN17@GetClipPar
$LN15@GetClipPar:
; Line 222
	mov	eax, DWORD PTR _pRect$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 224
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, DWORD PTR _BytesPerLine$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN16@GetClipPar:
; Line 230
	mov	eax, DWORD PTR _pRect$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y1$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx
; Line 231
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN14@GetClipPar
; Line 232
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 233
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jg	SHORT $LN14@GetClipPar
; Line 234
	mov	eax, 1
	jmp	$LN17@GetClipPar
$LN14@GetClipPar:
; Line 238
	mov	eax, DWORD PTR _pRect$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _x1$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx
; Line 239
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN12@GetClipPar
; Line 240
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN12@GetClipPar:
; Line 243
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 244
	mov	eax, DWORD PTR _pRect$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+4], ecx
	jge	$LN11@GetClipPar
; Line 245
	mov	eax, DWORD PTR _pRect$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 246
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _Diff$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 247
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 248
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR tv149[ebp], eax
	mov	ecx, DWORD PTR tv149[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv149[ebp], ecx
	cmp	DWORD PTR tv149[ebp], 31		; 0000001fH
	ja	$LN11@GetClipPar
	mov	edx, DWORD PTR tv149[ebp]
	movzx	eax, BYTE PTR $LN19@GetClipPar[edx]
	jmp	DWORD PTR $LN20@GetClipPar[eax*4]
$LN8@GetClipPar:
; Line 250
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	sar	ecx, 3
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	sar	ecx, 3
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 7
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 251
	jmp	$LN11@GetClipPar
$LN7@GetClipPar:
; Line 253
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	sar	ecx, 2
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	sar	ecx, 2
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 3
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 254
	jmp	$LN11@GetClipPar
$LN6@GetClipPar:
; Line 256
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	sar	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	sar	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 257
	jmp	$LN11@GetClipPar
$LN5@GetClipPar:
; Line 259
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
; Line 260
	jmp	SHORT $LN11@GetClipPar
$LN4@GetClipPar:
; Line 262
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+20]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
; Line 263
	jmp	SHORT $LN11@GetClipPar
$LN3@GetClipPar:
; Line 266
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+20]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
$LN11@GetClipPar:
; Line 270
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _pRect$[ebp]
	movsx	eax, WORD PTR [edx+4]
	cmp	ecx, eax
	jle	SHORT $LN2@GetClipPar
; Line 271
	mov	eax, DWORD PTR _pRect$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [edx]
	sub	ecx, eax
	add	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN2@GetClipPar:
; Line 273
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jg	SHORT $LN1@GetClipPar
; Line 274
	mov	eax, 1
	jmp	SHORT $LN17@GetClipPar
$LN1@GetClipPar:
; Line 276
	xor	eax, eax
$LN17@GetClipPar:
; Line 277
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@GetClipPar:
	DD	$LN8@GetClipPar
	DD	$LN7@GetClipPar
	DD	$LN6@GetClipPar
	DD	$LN5@GetClipPar
	DD	$LN4@GetClipPar
	DD	$LN3@GetClipPar
	DD	$LN11@GetClipPar
$LN19@GetClipPar:
	DB	0
	DB	1
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
__GetClipParam ENDP
_TEXT	ENDS
EXTRN	_LCD_pColorIndex:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawHLine
_TEXT	SEGMENT
_Rect$ = -104						; size = 8
_xSizeSprite$ = -88					; size = 4
_x$ = -76						; size = 4
_pSave$ = -64						; size = 4
_pBM$ = -52						; size = 4
_pSprite$ = -40						; size = 4
_Context$ = -28						; size = 24
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y$ = 16						; size = 4
_x1$ = 20						; size = 4
__DrawHLine PROC					; COMDAT
; Line 440
	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 441
	mov	DWORD PTR _Context$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _Context$[ebp+4], eax
	mov	DWORD PTR _Context$[ebp+8], eax
	mov	DWORD PTR _Context$[ebp+12], eax
	mov	DWORD PTR _Context$[ebp+16], eax
	mov	DWORD PTR _Context$[ebp+20], eax
; Line 448
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 449
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _pSprite$[ebp]
	movsx	eax, WORD PTR [edx+4]
	sub	ecx, eax
	add	ecx, 1
	mov	DWORD PTR _xSizeSprite$[ebp], ecx
; Line 450
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pBM$[ebp], ecx
; Line 451
	mov	eax, DWORD PTR _pSprite$[ebp]
	add	eax, 4
	mov	DWORD PTR _Context$[ebp], eax
; Line 452
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 453
	mov	ax, WORD PTR _x0$[ebp]
	mov	WORD PTR _Context$[ebp+12], ax
; Line 454
	mov	ax, WORD PTR _y$[ebp]
	mov	WORD PTR _Context$[ebp+14], ax
; Line 455
	mov	ax, WORD PTR _x1$[ebp]
	mov	WORD PTR _Context$[ebp+16], ax
; Line 456
	mov	ax, WORD PTR _y$[ebp]
	mov	WORD PTR _Context$[ebp+18], ax
; Line 457
	mov	eax, DWORD PTR _Context$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Context$[ebp+12]
	push	ecx
	call	_GUI_RectsIntersect
	add	esp, 8
	test	eax, eax
	je	$LN10@DrawHLine
$LN9@DrawHLine:
; Line 461
	lea	eax, DWORD PTR _Context$[ebp]
	push	eax
	call	__GetClipRect
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@DrawHLine
; Line 462
	movsx	eax, WORD PTR _Context$[ebp+8]
	mov	esi, esp
	push	eax
	movsx	ecx, WORD PTR _Context$[ebp+6]
	push	ecx
	movsx	edx, WORD PTR _Context$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 463
	jmp	SHORT $LN9@DrawHLine
$LN8@DrawHLine:
; Line 467
	mov	eax, DWORD PTR _Context$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _Rect$[ebp], ecx
	mov	DWORD PTR _Rect$[ebp+4], edx
; Line 468
	lea	eax, DWORD PTR _Context$[ebp+12]
	push	eax
	lea	ecx, DWORD PTR _Rect$[ebp]
	push	ecx
	call	_GUI_RectsIntersect
	add	esp, 8
	test	eax, eax
	je	$LN7@DrawHLine
; Line 469
	lea	eax, DWORD PTR _Context$[ebp+12]
	push	eax
	lea	ecx, DWORD PTR _Rect$[ebp]
	push	ecx
	call	_GUI__IntersectRect
	add	esp, 8
; Line 470
	movsx	eax, WORD PTR _Rect$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN6@DrawHLine
$LN5@DrawHLine:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN6@DrawHLine:
	movsx	eax, WORD PTR _Rect$[ebp+4]
	cmp	DWORD PTR _x$[ebp], eax
	jg	$LN7@DrawHLine
; Line 471
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _pBM$[ebp]
	push	eax
	call	_GUI_GetBitmapPixelIndex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN3@DrawHLine
; Line 475
	mov	eax, DWORD PTR _pSprite$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pSave$[ebp], eax
; Line 476
	movsx	eax, WORD PTR _Rect$[ebp+2]
	mov	ecx, DWORD PTR _pSprite$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	sub	eax, edx
	imul	eax, DWORD PTR _xSizeSprite$[ebp]
	mov	ecx, DWORD PTR _pSprite$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, edx
	add	eax, ecx
	mov	edx, DWORD PTR _pSave$[ebp]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _pSave$[ebp], eax
; Line 477
	mov	eax, DWORD PTR _pSave$[ebp]
	mov	ecx, DWORD PTR _LCD_pColorIndex
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 478
	jmp	SHORT $LN2@DrawHLine
$LN3@DrawHLine:
; Line 479
	mov	esi, esp
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawHLine:
; Line 481
	jmp	$LN5@DrawHLine
$LN7@DrawHLine:
; Line 483
	jmp	SHORT $LN1@DrawHLine
$LN10@DrawHLine:
; Line 484
	mov	esi, esp
	mov	eax, DWORD PTR _x1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DrawHLine:
; Line 486
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 487
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@DrawHLine
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@DrawHLine:
	DD	2
	DD	$LN15@DrawHLine
$LN15@DrawHLine:
	DD	-28					; ffffffe4H
	DD	24					; 00000018H
	DD	$LN13@DrawHLine
	DD	-104					; ffffff98H
	DD	8
	DD	$LN14@DrawHLine
$LN14@DrawHLine:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN13@DrawHLine:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
__DrawHLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawVLine
_TEXT	SEGMENT
_Rect$ = -104						; size = 8
_xSizeSprite$ = -88					; size = 4
_y$ = -76						; size = 4
_pSave$ = -64						; size = 4
_pBM$ = -52						; size = 4
_pSprite$ = -40						; size = 4
_Context$ = -28						; size = 24
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y0$ = 16						; size = 4
_y1$ = 20						; size = 4
__DrawVLine PROC					; COMDAT
; Line 493
	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 494
	mov	DWORD PTR _Context$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _Context$[ebp+4], eax
	mov	DWORD PTR _Context$[ebp+8], eax
	mov	DWORD PTR _Context$[ebp+12], eax
	mov	DWORD PTR _Context$[ebp+16], eax
	mov	DWORD PTR _Context$[ebp+20], eax
; Line 501
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 502
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _pSprite$[ebp]
	movsx	eax, WORD PTR [edx+4]
	sub	ecx, eax
	add	ecx, 1
	mov	DWORD PTR _xSizeSprite$[ebp], ecx
; Line 503
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pBM$[ebp], ecx
; Line 504
	mov	eax, DWORD PTR _pSprite$[ebp]
	add	eax, 4
	mov	DWORD PTR _Context$[ebp], eax
; Line 505
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 506
	mov	ax, WORD PTR _x$[ebp]
	mov	WORD PTR _Context$[ebp+12], ax
; Line 507
	mov	ax, WORD PTR _y0$[ebp]
	mov	WORD PTR _Context$[ebp+14], ax
; Line 508
	mov	ax, WORD PTR _x$[ebp]
	mov	WORD PTR _Context$[ebp+16], ax
; Line 509
	mov	ax, WORD PTR _y1$[ebp]
	mov	WORD PTR _Context$[ebp+18], ax
; Line 510
	mov	eax, DWORD PTR _Context$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Context$[ebp+12]
	push	ecx
	call	_GUI_RectsIntersect
	add	esp, 8
	test	eax, eax
	je	$LN10@DrawVLine
$LN9@DrawVLine:
; Line 514
	lea	eax, DWORD PTR _Context$[ebp]
	push	eax
	call	__GetClipRect
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@DrawVLine
; Line 515
	movsx	eax, WORD PTR _Context$[ebp+10]
	mov	esi, esp
	push	eax
	movsx	ecx, WORD PTR _Context$[ebp+6]
	push	ecx
	movsx	edx, WORD PTR _Context$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 516
	jmp	SHORT $LN9@DrawVLine
$LN8@DrawVLine:
; Line 520
	mov	eax, DWORD PTR _Context$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _Rect$[ebp], ecx
	mov	DWORD PTR _Rect$[ebp+4], edx
; Line 521
	lea	eax, DWORD PTR _Context$[ebp+12]
	push	eax
	lea	ecx, DWORD PTR _Rect$[ebp]
	push	ecx
	call	_GUI_RectsIntersect
	add	esp, 8
	test	eax, eax
	je	$LN7@DrawVLine
; Line 522
	lea	eax, DWORD PTR _Context$[ebp+12]
	push	eax
	lea	ecx, DWORD PTR _Rect$[ebp]
	push	ecx
	call	_GUI__IntersectRect
	add	esp, 8
; Line 523
	movsx	eax, WORD PTR _Rect$[ebp+2]
	mov	DWORD PTR _y$[ebp], eax
	jmp	SHORT $LN6@DrawVLine
$LN5@DrawVLine:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN6@DrawVLine:
	movsx	eax, WORD PTR _Rect$[ebp+6]
	cmp	DWORD PTR _y$[ebp], eax
	jg	$LN7@DrawVLine
; Line 524
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _pBM$[ebp]
	push	eax
	call	_GUI_GetBitmapPixelIndex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN3@DrawVLine
; Line 528
	mov	eax, DWORD PTR _pSprite$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pSave$[ebp], eax
; Line 529
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	imul	edx, DWORD PTR _xSizeSprite$[ebp]
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, ecx
	add	edx, eax
	mov	ecx, DWORD PTR _pSave$[ebp]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pSave$[ebp], edx
; Line 530
	mov	eax, DWORD PTR _pSave$[ebp]
	mov	ecx, DWORD PTR _LCD_pColorIndex
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 531
	jmp	SHORT $LN2@DrawVLine
$LN3@DrawVLine:
; Line 532
	mov	esi, esp
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawVLine:
; Line 534
	jmp	$LN5@DrawVLine
$LN7@DrawVLine:
; Line 536
	jmp	SHORT $LN1@DrawVLine
$LN10@DrawVLine:
; Line 537
	mov	esi, esp
	mov	eax, DWORD PTR _y1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DrawVLine:
; Line 539
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 540
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@DrawVLine
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@DrawVLine:
	DD	2
	DD	$LN15@DrawVLine
$LN15@DrawVLine:
	DD	-28					; ffffffe4H
	DD	24					; 00000018H
	DD	$LN13@DrawVLine
	DD	-104					; ffffff98H
	DD	8
	DD	$LN14@DrawVLine
$LN14@DrawVLine:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN13@DrawVLine:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
__DrawVLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __FillRect
_TEXT	SEGMENT
_pRect$ = -128						; size = 4
_Rect$ = -116						; size = 8
_xSizeSprite$ = -100					; size = 4
_y$ = -88						; size = 4
_x$ = -76						; size = 4
_pSave$ = -64						; size = 4
_pBM$ = -52						; size = 4
_pSprite$ = -40						; size = 4
_Context$ = -28						; size = 24
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
__FillRect PROC						; COMDAT
; Line 546
	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 547
	mov	DWORD PTR _Context$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _Context$[ebp+4], eax
	mov	DWORD PTR _Context$[ebp+8], eax
	mov	DWORD PTR _Context$[ebp+12], eax
	mov	DWORD PTR _Context$[ebp+16], eax
	mov	DWORD PTR _Context$[ebp+20], eax
; Line 555
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 556
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _pSprite$[ebp]
	movsx	eax, WORD PTR [edx+4]
	sub	ecx, eax
	add	ecx, 1
	mov	DWORD PTR _xSizeSprite$[ebp], ecx
; Line 557
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pBM$[ebp], ecx
; Line 558
	mov	eax, DWORD PTR _pSprite$[ebp]
	add	eax, 4
	mov	DWORD PTR _Context$[ebp], eax
; Line 559
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 560
	mov	ax, WORD PTR _x0$[ebp]
	mov	WORD PTR _Context$[ebp+12], ax
; Line 561
	mov	ax, WORD PTR _y0$[ebp]
	mov	WORD PTR _Context$[ebp+14], ax
; Line 562
	mov	ax, WORD PTR _x1$[ebp]
	mov	WORD PTR _Context$[ebp+16], ax
; Line 563
	mov	ax, WORD PTR _y1$[ebp]
	mov	WORD PTR _Context$[ebp+18], ax
; Line 564
	mov	eax, DWORD PTR _Context$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Context$[ebp+12]
	push	ecx
	call	_GUI_RectsIntersect
	add	esp, 8
	test	eax, eax
	je	$LN13@FillRect
$LN12@FillRect:
; Line 568
	lea	eax, DWORD PTR _Context$[ebp]
	push	eax
	call	__GetClipRect
	add	esp, 4
	test	eax, eax
	je	SHORT $LN11@FillRect
; Line 569
	movsx	eax, WORD PTR _Context$[ebp+10]
	mov	esi, esp
	push	eax
	movsx	ecx, WORD PTR _Context$[ebp+8]
	push	ecx
	movsx	edx, WORD PTR _Context$[ebp+6]
	push	edx
	movsx	eax, WORD PTR _Context$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 570
	jmp	SHORT $LN12@FillRect
$LN11@FillRect:
; Line 574
	mov	eax, DWORD PTR _Context$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _Rect$[ebp], ecx
	mov	DWORD PTR _Rect$[ebp+4], edx
; Line 575
	lea	eax, DWORD PTR _Context$[ebp+12]
	push	eax
	lea	ecx, DWORD PTR _Rect$[ebp]
	push	ecx
	call	_GUI_RectsIntersect
	add	esp, 8
	test	eax, eax
	je	$LN10@FillRect
; Line 576
	lea	eax, DWORD PTR _Context$[ebp+12]
	push	eax
	lea	ecx, DWORD PTR _Rect$[ebp]
	push	ecx
	call	_GUI__IntersectRect
	add	esp, 8
; Line 577
	lea	eax, DWORD PTR _Rect$[ebp]
	mov	DWORD PTR _pRect$[ebp], eax
; Line 578
	mov	eax, DWORD PTR _pRect$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _y$[ebp], ecx
	jmp	SHORT $LN9@FillRect
$LN8@FillRect:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN9@FillRect:
	mov	eax, DWORD PTR _pRect$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _y$[ebp], ecx
	jg	$LN10@FillRect
; Line 579
	mov	eax, DWORD PTR _pRect$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	DWORD PTR _x$[ebp], ecx
	jmp	SHORT $LN6@FillRect
$LN5@FillRect:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN6@FillRect:
	mov	eax, DWORD PTR _pRect$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	cmp	DWORD PTR _x$[ebp], ecx
	jg	$LN4@FillRect
; Line 580
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _pBM$[ebp]
	push	eax
	call	_GUI_GetBitmapPixelIndex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN3@FillRect
; Line 584
	mov	eax, DWORD PTR _pSprite$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pSave$[ebp], eax
; Line 585
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	imul	edx, DWORD PTR _xSizeSprite$[ebp]
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, ecx
	add	edx, eax
	mov	ecx, DWORD PTR _pSave$[ebp]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pSave$[ebp], edx
; Line 586
	mov	eax, DWORD PTR _pSave$[ebp]
	mov	ecx, DWORD PTR _LCD_pColorIndex
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 587
	jmp	SHORT $LN2@FillRect
$LN3@FillRect:
; Line 591
	mov	esi, esp
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@FillRect:
; Line 593
	jmp	$LN5@FillRect
$LN4@FillRect:
; Line 594
	jmp	$LN8@FillRect
$LN10@FillRect:
; Line 596
	jmp	SHORT $LN1@FillRect
$LN13@FillRect:
; Line 597
	mov	esi, esp
	mov	eax, DWORD PTR _y1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@FillRect:
; Line 599
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 600
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@FillRect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN19@FillRect:
	DD	2
	DD	$LN18@FillRect
$LN18@FillRect:
	DD	-28					; ffffffe4H
	DD	24					; 00000018H
	DD	$LN16@FillRect
	DD	-116					; ffffff8cH
	DD	8
	DD	$LN17@FillRect
$LN17@FillRect:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN16@FillRect:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
__FillRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetPixelIndex
_TEXT	SEGMENT
_xSizeSprite$ = -44					; size = 4
_Index$ = -32						; size = 4
_pSave$ = -20						; size = 4
_pSprite$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__GetPixelIndex PROC					; COMDAT
; Line 606
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 612
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 613
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _pSprite$[ebp]
	movsx	eax, WORD PTR [edx+4]
	sub	ecx, eax
	add	ecx, 1
	mov	DWORD PTR _xSizeSprite$[ebp], ecx
; Line 614
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 615
	mov	eax, DWORD PTR _pSprite$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__PixelExists
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN2@GetPixelIn
; Line 619
	mov	eax, DWORD PTR _pSprite$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pSave$[ebp], eax
; Line 620
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	imul	edx, DWORD PTR _xSizeSprite$[ebp]
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, ecx
	add	edx, eax
	mov	ecx, DWORD PTR _pSave$[ebp]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pSave$[ebp], edx
; Line 621
	mov	eax, DWORD PTR _pSave$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Index$[ebp], ecx
; Line 622
	jmp	SHORT $LN1@GetPixelIn
$LN2@GetPixelIn:
; Line 626
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Index$[ebp], eax
$LN1@GetPixelIn:
; Line 628
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 629
	mov	eax, DWORD PTR _Index$[ebp]
; Line 630
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetPixelIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __PixelExists
_TEXT	SEGMENT
_pBM$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_pSprite$ = 16						; size = 4
__PixelExists PROC					; COMDAT
; Line 283
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 285
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pBM$[ebp], ecx
; Line 286
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	cmp	DWORD PTR _x$[ebp], ecx
	jl	SHORT $LN3@PixelExist
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _y$[ebp], ecx
	jl	SHORT $LN3@PixelExist
; Line 287
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, ecx
	add	edx, 1
	mov	eax, DWORD PTR _pBM$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	edx, ecx
	jg	SHORT $LN3@PixelExist
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	add	edx, 1
	mov	eax, DWORD PTR _pBM$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cmp	edx, ecx
	jg	SHORT $LN3@PixelExist
; Line 288
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _pBM$[ebp]
	push	eax
	call	_GUI_GetBitmapPixelIndex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN3@PixelExist
; Line 289
	mov	eax, 1
	jmp	SHORT $LN4@PixelExist
$LN3@PixelExist:
; Line 293
	xor	eax, eax
$LN4@PixelExist:
; Line 294
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__PixelExists ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetPixelIndex
_TEXT	SEGMENT
_xSizeSprite$ = -32					; size = 4
_pSave$ = -20						; size = 4
_pSprite$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_ColorIndex$ = 20					; size = 4
__SetPixelIndex PROC					; COMDAT
; Line 636
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 641
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 642
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _pSprite$[ebp]
	movsx	eax, WORD PTR [edx+4]
	sub	ecx, eax
	add	ecx, 1
	mov	DWORD PTR _xSizeSprite$[ebp], ecx
; Line 643
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 644
	mov	eax, DWORD PTR _pSprite$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__PixelExists
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN2@SetPixelIn
; Line 648
	mov	eax, DWORD PTR _pSprite$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pSave$[ebp], eax
; Line 649
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	imul	edx, DWORD PTR _xSizeSprite$[ebp]
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, ecx
	add	edx, eax
	mov	ecx, DWORD PTR _pSave$[ebp]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pSave$[ebp], edx
; Line 650
	mov	eax, DWORD PTR _pSave$[ebp]
	mov	ecx, DWORD PTR _ColorIndex$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 651
	jmp	SHORT $LN1@SetPixelIn
$LN2@SetPixelIn:
; Line 655
	mov	esi, esp
	mov	eax, DWORD PTR _ColorIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@SetPixelIn:
; Line 657
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 658
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetPixelIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __XorPixel
_TEXT	SEGMENT
_xSizeSprite$ = -44					; size = 4
_IndexMask$ = -32					; size = 4
_pSave$ = -20						; size = 4
_pSprite$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__XorPixel PROC						; COMDAT
; Line 664
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 670
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 671
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _pSprite$[ebp]
	movsx	eax, WORD PTR [edx+4]
	sub	ecx, eax
	add	ecx, 1
	mov	DWORD PTR _xSizeSprite$[ebp], ecx
; Line 672
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 673
	mov	eax, DWORD PTR _pSprite$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__PixelExists
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN2@XorPixel
; Line 677
	mov	eax, DWORD PTR _pSprite$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pSave$[ebp], eax
; Line 678
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	imul	edx, DWORD PTR _xSizeSprite$[ebp]
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, ecx
	add	edx, eax
	mov	ecx, DWORD PTR _pSave$[ebp]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pSave$[ebp], edx
; Line 679
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$[ebp], eax
; Line 680
	mov	eax, DWORD PTR _pSave$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	ecx, DWORD PTR _IndexMask$[ebp]
	mov	edx, DWORD PTR _pSave$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 681
	jmp	SHORT $LN1@XorPixel
$LN2@XorPixel:
; Line 685
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@XorPixel:
; Line 687
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 688
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__XorPixel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevData
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevData PROC					; COMDAT
; Line 694
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 695
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 696
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR _Index$[ebp], eax
; Line 697
	xor	eax, eax
; Line 698
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevData ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetOrg
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__SetOrg PROC						; COMDAT
; Line 704
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 705
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 706
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN2@SetOrg
; Line 707
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SetOrg:
; Line 709
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetOrg ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevFunc
_TEXT	SEGMENT
_ppDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevFunc PROC					; COMDAT
; Line 710
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 711
	mov	eax, DWORD PTR _ppDevice$[ebp]
	mov	DWORD PTR _ppDevice$[ebp], eax
; Line 712
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR _Index$[ebp], eax
; Line 713
	xor	eax, eax
; Line 714
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevFunc ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevProp
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevProp PROC					; COMDAT
; Line 715
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 716
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 717
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN1@GetDevProp
; Line 718
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+40]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@GetDevProp
$LN1@GetDevProp:
; Line 720
	xor	eax, eax
$LN2@GetDevProp:
; Line 721
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevProp ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetRect
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_pRect$ = 12						; size = 4
__GetRect PROC						; COMDAT
; Line 722
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 723
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 724
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN2@GetRect
; Line 725
	mov	esi, esp
	mov	eax, DWORD PTR _pRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+48]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@GetRect:
; Line 727
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetRect ENDP
_TEXT	ENDS
PUBLIC	_GUI_SPRITE__CreateEx
EXTRN	_GUI_DEVICE_Delete:PROC
EXTRN	_GUI_ALLOC_AllocZero:PROC
EXTRN	_GUI_DEVICE_Create:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_SPRITE__CreateEx
_TEXT	SEGMENT
_FlagsDevice$ = -56					; size = 2
_AllocSize$ = -44					; size = 4
_pSpriteNew$ = -32					; size = 4
_hSpriteNew$ = -20					; size = 4
_pDevice$ = -8						; size = 4
_pBM$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_Layer$ = 20						; size = 4
_Flags$ = 24						; size = 2
_GUI_SPRITE__CreateEx PROC				; COMDAT
; Line 1294
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1301
	mov	eax, DWORD PTR _pBM$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN7@GUI_SPRITE
	mov	eax, DWORD PTR _pBM$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	test	ecx, ecx
	jne	SHORT $LN8@GUI_SPRITE
$LN7@GUI_SPRITE:
; Line 1302
	xor	eax, eax
	jmp	$LN9@GUI_SPRITE
$LN8@GUI_SPRITE:
; Line 1304
	mov	eax, DWORD PTR _pBM$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	cmp	ecx, 8
	jle	SHORT $LN6@GUI_SPRITE
; Line 1305
	xor	eax, eax
	jmp	$LN9@GUI_SPRITE
$LN6@GUI_SPRITE:
; Line 1307
	mov	eax, DWORD PTR _pBM$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN5@GUI_SPRITE
; Line 1308
	xor	eax, eax
	jmp	$LN9@GUI_SPRITE
$LN5@GUI_SPRITE:
; Line 1313
	movzx	eax, WORD PTR _Flags$[ebp]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	WORD PTR _FlagsDevice$[ebp], ax
; Line 1314
	mov	eax, DWORD PTR _Layer$[ebp]
	push	eax
	movzx	ecx, WORD PTR _FlagsDevice$[ebp]
	push	ecx
	push	0
	push	OFFSET __Sprite_API
	call	_GUI_DEVICE_Create
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 1315
	cmp	DWORD PTR _pDevice$[ebp], 0
	jne	SHORT $LN4@GUI_SPRITE
; Line 1316
	xor	eax, eax
	jmp	$LN9@GUI_SPRITE
$LN4@GUI_SPRITE:
; Line 1321
	mov	eax, DWORD PTR _pBM$[ebp]
	movzx	ecx, WORD PTR [eax]
	shl	ecx, 2
	mov	edx, DWORD PTR _pBM$[ebp]
	movzx	eax, WORD PTR [edx+2]
	imul	ecx, eax
	mov	DWORD PTR _AllocSize$[ebp], ecx
; Line 1323
	mov	eax, DWORD PTR _AllocSize$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hSpriteNew$[ebp], eax
; Line 1324
	cmp	DWORD PTR _hSpriteNew$[ebp], 0
	jne	SHORT $LN3@GUI_SPRITE
; Line 1325
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	_GUI_DEVICE_Delete
	add	esp, 4
; Line 1327
	xor	eax, eax
	jmp	$LN9@GUI_SPRITE
$LN3@GUI_SPRITE:
; Line 1329
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR _hSpriteNew$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1333
	mov	eax, DWORD PTR _hSpriteNew$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSpriteNew$[ebp], eax
; Line 1334
	mov	eax, DWORD PTR _pSpriteNew$[ebp]
	mov	cx, WORD PTR _Flags$[ebp]
	mov	WORD PTR [eax+24], cx
; Line 1335
	mov	eax, DWORD PTR _pSpriteNew$[ebp]
	mov	ecx, DWORD PTR _pBM$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 1336
	mov	eax, DWORD PTR _pSpriteNew$[ebp]
	mov	cx, WORD PTR _x$[ebp]
	mov	WORD PTR [eax+4], cx
; Line 1337
	mov	eax, DWORD PTR _pSpriteNew$[ebp]
	mov	cx, WORD PTR _y$[ebp]
	mov	WORD PTR [eax+6], cx
; Line 1338
	mov	eax, DWORD PTR _pSpriteNew$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _pBM$[ebp]
	movzx	eax, WORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	edx, DWORD PTR _pSpriteNew$[ebp]
	mov	WORD PTR [edx+8], cx
; Line 1339
	mov	eax, DWORD PTR _pSpriteNew$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _pBM$[ebp]
	movzx	eax, WORD PTR [edx+2]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	edx, DWORD PTR _pSpriteNew$[ebp]
	mov	WORD PTR [edx+10], cx
; Line 1340
	mov	eax, DWORD PTR _pSpriteNew$[ebp]
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1341
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSpriteNew$[ebp], 0
; Line 1345
	mov	eax, DWORD PTR _pBM$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hSpriteNew$[ebp]
	push	ecx
	call	__DoColorConversion
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@GUI_SPRITE
; Line 1347
	xor	eax, eax
	jmp	SHORT $LN9@GUI_SPRITE
$LN2@GUI_SPRITE:
; Line 1352
	movzx	eax, WORD PTR _Flags$[ebp]
	and	eax, 2
	je	SHORT $LN1@GUI_SPRITE
; Line 1353
	mov	eax, DWORD PTR _hSpriteNew$[ebp]
	push	eax
	call	__Link
	add	esp, 4
; Line 1354
	mov	eax, DWORD PTR _hSpriteNew$[ebp]
	push	eax
	call	__SpriteDraw
	add	esp, 4
$LN1@GUI_SPRITE:
; Line 1357
	mov	eax, DWORD PTR _hSpriteNew$[ebp]
$LN9@GUI_SPRITE:
; Line 1358
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_SPRITE__CreateEx ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SpriteDraw
_TEXT	SEGMENT
_pDevice$ = -168					; size = 4
_pBM$ = -156						; size = 4
_pColors$ = -144					; size = 4
_pData$ = -132						; size = 4
_PixelNew$ = -120					; size = 4
_LayerOld$ = -108					; size = 4
_Layer$ = -96						; size = 4
_Index$ = -84						; size = 4
_y$ = -72						; size = 4
_x$ = -60						; size = 4
_yPos$ = -48						; size = 4
_xPos$ = -36						; size = 4
_pSprite$ = -24						; size = 4
_ClipRect$ = -12					; size = 8
_hSprite$ = 8						; size = 4
__SpriteDraw PROC					; COMDAT
; Line 1162
	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1173
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 1174
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 1175
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _Layer$[ebp], ecx
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	DWORD PTR _LayerOld$[ebp], eax
	mov	eax, DWORD PTR _Layer$[ebp]
	cmp	eax, DWORD PTR _LayerOld$[ebp]
	je	SHORT $LN9@SpriteDraw
	mov	al, BYTE PTR _Layer$[ebp]
	mov	BYTE PTR _GUI_Context+17, al
$LN9@SpriteDraw:
; Line 1176
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pBM$[ebp], ecx
; Line 1177
	mov	eax, DWORD PTR _pSprite$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pData$[ebp], eax
; Line 1178
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	DWORD PTR [eax+28], 0
; Line 1179
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pColors$[ebp], eax
; Line 1180
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _ClipRect$[ebp], ecx
	mov	DWORD PTR _ClipRect$[ebp+4], edx
; Line 1181
	lea	eax, DWORD PTR _ClipRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__ClipRectEx
	add	esp, 8
; Line 1182
	movsx	eax, WORD PTR _ClipRect$[ebp+2]
	mov	DWORD PTR _y$[ebp], eax
	jmp	SHORT $LN8@SpriteDraw
$LN7@SpriteDraw:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN8@SpriteDraw:
	movsx	eax, WORD PTR _ClipRect$[ebp+6]
	cmp	DWORD PTR _y$[ebp], eax
	jg	$LN6@SpriteDraw
; Line 1183
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _yPos$[ebp], edx
; Line 1184
	movsx	eax, WORD PTR _ClipRect$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN5@SpriteDraw
$LN4@SpriteDraw:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN5@SpriteDraw:
	movsx	eax, WORD PTR _ClipRect$[ebp+4]
	cmp	DWORD PTR _x$[ebp], eax
	jg	$LN3@SpriteDraw
; Line 1185
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _xPos$[ebp], edx
; Line 1186
	mov	eax, DWORD PTR _yPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBM$[ebp]
	push	edx
	call	_GUI_GetBitmapPixelIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _PixelNew$[ebp], eax
; Line 1187
	cmp	DWORD PTR _PixelNew$[ebp], 0
	je	SHORT $LN2@SpriteDraw
; Line 1191
	mov	eax, DWORD PTR _pSprite$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__GetBkPixel
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _pBM$[ebp]
	movzx	edx, WORD PTR [ecx]
	imul	edx, DWORD PTR _yPos$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _xPos$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 1195
	mov	eax, DWORD PTR _PixelNew$[ebp]
	mov	ecx, DWORD PTR _pColors$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _Index$[ebp], edx
; Line 1196
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__SetSpriteBkPixel
	add	esp, 16					; 00000010H
$LN2@SpriteDraw:
; Line 1198
	jmp	$LN4@SpriteDraw
$LN3@SpriteDraw:
; Line 1199
	jmp	$LN7@SpriteDraw
$LN6@SpriteDraw:
; Line 1200
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pColors$[ebp], 0
; Line 1201
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR _pBM$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 1202
	mov	eax, DWORD PTR _Layer$[ebp]
	cmp	eax, DWORD PTR _LayerOld$[ebp]
	je	SHORT $LN1@SpriteDraw
	mov	al, BYTE PTR _LayerOld$[ebp]
	mov	BYTE PTR _GUI_Context+17, al
$LN1@SpriteDraw:
; Line 1203
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 1204
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@SpriteDraw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@SpriteDraw:
	DD	1
	DD	$LN13@SpriteDraw
$LN13@SpriteDraw:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN12@SpriteDraw
$LN12@SpriteDraw:
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
__SpriteDraw ENDP
_TEXT	ENDS
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetBkPixel
_TEXT	SEGMENT
$T10126 = -269						; size = 1
$T10127 = -257						; size = 1
_xSizeSprite$ = -56					; size = 4
_yPos$ = -44						; size = 4
_xPos$ = -32						; size = 4
_pSave$ = -20						; size = 4
_Index$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_pDevice$ = 16						; size = 4
_pSprite$ = 20						; size = 4
__GetBkPixel PROC					; COMDAT
; Line 768
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T10126[ebp], 0
	mov	BYTE PTR $T10127[ebp], 0
; Line 773
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	cmp	DWORD PTR _x$[ebp], ecx
	jl	$LN5@GetBkPixel
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	cmp	DWORD PTR _x$[ebp], ecx
	jg	$LN5@GetBkPixel
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _y$[ebp], ecx
	jl	$LN5@GetBkPixel
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	cmp	DWORD PTR _y$[ebp], ecx
	jg	SHORT $LN5@GetBkPixel
; Line 774
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, ecx
	mov	BYTE PTR $T10126[ebp], 1
	mov	DWORD PTR _xPos$[ebp], edx
; Line 775
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	mov	BYTE PTR $T10127[ebp], 1
	mov	DWORD PTR _yPos$[ebp], edx
; Line 776
	cmp	BYTE PTR $T10127[ebp], 0
	jne	SHORT $LN8@GetBkPixel
	push	OFFSET $LN9@GetBkPixel
	call	__RTC_UninitUse
	add	esp, 4
$LN8@GetBkPixel:
	cmp	BYTE PTR $T10126[ebp], 0
	jne	SHORT $LN10@GetBkPixel
	push	OFFSET $LN11@GetBkPixel
	call	__RTC_UninitUse
	add	esp, 4
$LN10@GetBkPixel:
	mov	eax, DWORD PTR _yPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSprite$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_GUI_GetBitmapPixelIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Index$[ebp], eax
; Line 777
	jmp	SHORT $LN4@GetBkPixel
$LN5@GetBkPixel:
; Line 778
	mov	DWORD PTR _Index$[ebp], 0
$LN4@GetBkPixel:
; Line 780
	cmp	DWORD PTR _Index$[ebp], 0
	jne	SHORT $LN3@GetBkPixel
; Line 781
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 782
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN2@GetBkPixel
; Line 783
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN6@GetBkPixel
$LN2@GetBkPixel:
; Line 785
	xor	eax, eax
	jmp	SHORT $LN6@GetBkPixel
; Line 786
	jmp	SHORT $LN6@GetBkPixel
$LN3@GetBkPixel:
; Line 787
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _pSprite$[ebp]
	movsx	eax, WORD PTR [edx+4]
	sub	ecx, eax
	add	ecx, 1
	mov	DWORD PTR _xSizeSprite$[ebp], ecx
; Line 788
	mov	eax, DWORD PTR _pSprite$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pSave$[ebp], eax
; Line 789
	cmp	BYTE PTR $T10127[ebp], 0
	jne	SHORT $LN12@GetBkPixel
	push	OFFSET $LN9@GetBkPixel
	call	__RTC_UninitUse
	add	esp, 4
$LN12@GetBkPixel:
	cmp	BYTE PTR $T10126[ebp], 0
	jne	SHORT $LN13@GetBkPixel
	push	OFFSET $LN11@GetBkPixel
	call	__RTC_UninitUse
	add	esp, 4
$LN13@GetBkPixel:
	mov	eax, DWORD PTR _xSizeSprite$[ebp]
	imul	eax, DWORD PTR _yPos$[ebp]
	add	eax, DWORD PTR _xPos$[ebp]
	mov	ecx, DWORD PTR _pSave$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pSave$[ebp], edx
; Line 790
	mov	eax, DWORD PTR _pSave$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Index$[ebp], ecx
; Line 791
	mov	eax, DWORD PTR _Index$[ebp]
$LN6@GetBkPixel:
; Line 793
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@GetBkPixel:
$LN11@GetBkPixel:
	DB	120					; 00000078H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN9@GetBkPixel:
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__GetBkPixel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetSpriteBkPixel
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_Index$ = 16						; size = 4
_pDevice$ = 20						; size = 4
__SetSpriteBkPixel PROC					; COMDAT
; Line 805
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 806
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 807
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN2@SetSpriteB
; Line 808
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SetSpriteB:
; Line 810
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetSpriteBkPixel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __ClipRectEx
_TEXT	SEGMENT
_RectDevice$ = -12					; size = 8
_pDevice$ = 8						; size = 4
_pRect$ = 12						; size = 4
__ClipRectEx PROC					; COMDAT
; Line 816
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 818
	mov	esi, esp
	lea	eax, DWORD PTR _RectDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+48]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 819
	lea	eax, DWORD PTR _RectDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	call	_GUI__IntersectRect
	add	esp, 8
; Line 820
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ClipRectEx
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@ClipRectEx:
	DD	1
	DD	$LN4@ClipRectEx
$LN4@ClipRectEx:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@ClipRectEx
$LN3@ClipRectEx:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
__ClipRectEx ENDP
_TEXT	ENDS
EXTRN	_GUI_DEVICE_Link:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Link
_TEXT	SEGMENT
_pSprite$ = -8						; size = 4
_hSprite$ = 8						; size = 4
__Link	PROC						; COMDAT
; Line 1215
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1218
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 1219
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_GUI_DEVICE_Link
	add	esp, 4
; Line 1220
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 1221
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Link	ENDP
_TEXT	ENDS
EXTRN	_GUI_ALLOC_Free:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DoColorConversion
_TEXT	SEGMENT
_Index$9885 = -80					; size = 4
_Color$9884 = -68					; size = 4
_hColors$ = -56						; size = 4
_Layer$ = -44						; size = 4
_i$ = -32						; size = 4
_pColors$ = -20						; size = 4
_pSprite$ = -8						; size = 4
_hSprite$ = 8						; size = 4
_pBM$ = 12						; size = 4
__DoColorConversion PROC				; COMDAT
; Line 1239
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1245
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 1246
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _hColors$[ebp], ecx
; Line 1247
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _Layer$[ebp], edx
; Line 1248
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 1249
	cmp	DWORD PTR _hColors$[ebp], 0
	je	SHORT $LN5@DoColorCon
; Line 1250
	mov	eax, DWORD PTR _hColors$[ebp]
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN5@DoColorCon:
; Line 1252
	mov	eax, DWORD PTR _pBM$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 2
	push	edx
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hColors$[ebp], eax
; Line 1253
	cmp	DWORD PTR _hColors$[ebp], 0
	jne	SHORT $LN4@DoColorCon
; Line 1254
	mov	eax, 1
	jmp	$LN6@DoColorCon
$LN4@DoColorCon:
; Line 1256
	mov	eax, DWORD PTR _hColors$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pColors$[ebp], eax
; Line 1257
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@DoColorCon
$LN2@DoColorCon:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@DoColorCon:
	mov	eax, DWORD PTR _pBM$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN1@DoColorCon
; Line 1260
	mov	eax, DWORD PTR _pBM$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _Color$9884[ebp], ecx
; Line 1261
	mov	esi, esp
	mov	eax, DWORD PTR _Color$9884[ebp]
	push	eax
	mov	ecx, DWORD PTR _Layer$[ebp]
	mov	edx, DWORD PTR _GUI_Context[ecx*4+72]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Index$9885[ebp], eax
; Line 1262
	mov	eax, DWORD PTR _pColors$[ebp]
	mov	ecx, DWORD PTR _Index$9885[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _pColors$[ebp]
	add	edx, 4
	mov	DWORD PTR _pColors$[ebp], edx
; Line 1263
	jmp	SHORT $LN2@DoColorCon
$LN1@DoColorCon:
; Line 1264
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pColors$[ebp], 0
; Line 1265
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 1266
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR _hColors$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1267
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 1268
	xor	eax, eax
$LN6@DoColorCon:
; Line 1269
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DoColorConversion ENDP
_TEXT	ENDS
PUBLIC	_GUI_SPRITE_CreateEx
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_SPRITE_CreateEx
_TEXT	SEGMENT
_pBM$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_Layer$ = 20						; size = 4
_GUI_SPRITE_CreateEx PROC				; COMDAT
; Line 1370
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1371
	push	2
	mov	eax, DWORD PTR _Layer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pBM$[ebp]
	push	eax
	call	_GUI_SPRITE__CreateEx
	add	esp, 20					; 00000014H
; Line 1372
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_SPRITE_CreateEx ENDP
_TEXT	ENDS
PUBLIC	_GUI_SPRITE_Create
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_SPRITE_Create
_TEXT	SEGMENT
_pBM$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_GUI_SPRITE_Create PROC					; COMDAT
; Line 1378
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1379
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pBM$[ebp]
	push	eax
	call	_GUI_SPRITE_CreateEx
	add	esp, 16					; 00000010H
; Line 1380
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_SPRITE_Create ENDP
_TEXT	ENDS
PUBLIC	_GUI_SPRITE_Delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_SPRITE_Delete
_TEXT	SEGMENT
_hSprite$ = 8						; size = 4
_GUI_SPRITE_Delete PROC					; COMDAT
; Line 1386
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1387
	cmp	DWORD PTR _hSprite$[ebp], 0
	je	SHORT $LN2@GUI_SPRITE@2
; Line 1389
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	__Undraw
	add	esp, 4
; Line 1390
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	__Unlink
	add	esp, 4
; Line 1391
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	__Delete
	add	esp, 4
$LN2@GUI_SPRITE@2:
; Line 1394
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_SPRITE_Delete ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Undraw
_TEXT	SEGMENT
_ClipRect$ = -144					; size = 8
_pDevice$ = -128					; size = 4
_pData$ = -116						; size = 4
_Data$ = -104						; size = 4
_pBM$ = -92						; size = 4
_LayerOld$ = -80					; size = 4
_Layer$ = -68						; size = 4
_yPos$ = -56						; size = 4
_xPos$ = -44						; size = 4
_y$ = -32						; size = 4
_x$ = -20						; size = 4
_pSprite$ = -8						; size = 4
_hSprite$ = 8						; size = 4
__Undraw PROC						; COMDAT
; Line 833
	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 843
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 844
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 845
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _Layer$[ebp], ecx
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	DWORD PTR _LayerOld$[ebp], eax
	mov	eax, DWORD PTR _Layer$[ebp]
	cmp	eax, DWORD PTR _LayerOld$[ebp]
	je	SHORT $LN9@Undraw
	mov	al, BYTE PTR _Layer$[ebp]
	mov	BYTE PTR _GUI_Context+17, al
$LN9@Undraw:
; Line 846
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pBM$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR _pSprite$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pData$[ebp], eax
; Line 848
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _ClipRect$[ebp], ecx
	mov	DWORD PTR _ClipRect$[ebp+4], edx
; Line 849
	lea	eax, DWORD PTR _ClipRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__ClipRectEx
	add	esp, 8
; Line 850
	movsx	eax, WORD PTR _ClipRect$[ebp+2]
	mov	DWORD PTR _y$[ebp], eax
	jmp	SHORT $LN8@Undraw
$LN7@Undraw:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN8@Undraw:
	movsx	eax, WORD PTR _ClipRect$[ebp+6]
	cmp	DWORD PTR _y$[ebp], eax
	jg	$LN6@Undraw
; Line 851
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _yPos$[ebp], edx
; Line 852
	movsx	eax, WORD PTR _ClipRect$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN5@Undraw
$LN4@Undraw:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN5@Undraw:
	movsx	eax, WORD PTR _ClipRect$[ebp+4]
	cmp	DWORD PTR _x$[ebp], eax
	jg	SHORT $LN3@Undraw
; Line 853
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _xPos$[ebp], edx
; Line 854
	mov	eax, DWORD PTR _yPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBM$[ebp]
	push	edx
	call	_GUI_GetBitmapPixelIndex
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN2@Undraw
; Line 855
	mov	eax, DWORD PTR _pBM$[ebp]
	movzx	ecx, WORD PTR [eax]
	imul	ecx, DWORD PTR _yPos$[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _xPos$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _Data$[ebp], edx
; Line 856
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__SetSpriteBkPixel
	add	esp, 16					; 00000010H
$LN2@Undraw:
; Line 858
	jmp	SHORT $LN4@Undraw
$LN3@Undraw:
; Line 859
	jmp	$LN7@Undraw
$LN6@Undraw:
; Line 860
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 861
	mov	eax, DWORD PTR _Layer$[ebp]
	cmp	eax, DWORD PTR _LayerOld$[ebp]
	je	SHORT $LN10@Undraw
	mov	al, BYTE PTR _LayerOld$[ebp]
	mov	BYTE PTR _GUI_Context+17, al
$LN10@Undraw:
; Line 862
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@Undraw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@Undraw:
	DD	1
	DD	$LN13@Undraw
$LN13@Undraw:
	DD	-144					; ffffff70H
	DD	8
	DD	$LN12@Undraw
$LN12@Undraw:
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
__Undraw ENDP
_TEXT	ENDS
EXTRN	_GUI_DEVICE_Unlink:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Unlink
_TEXT	SEGMENT
_pSprite$ = -8						; size = 4
_hSprite$ = 8						; size = 4
__Unlink PROC						; COMDAT
; Line 1227
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1230
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 1231
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_GUI_DEVICE_Unlink
	add	esp, 4
; Line 1232
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 1233
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Unlink ENDP
_TEXT	ENDS
EXTRN	_GUI_ALLOC_FreeFixedBlock:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Delete
_TEXT	SEGMENT
_pSprite$ = -8						; size = 4
_hSprite$ = 8						; size = 4
__Delete PROC						; COMDAT
; Line 1275
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1277
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 1278
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_GUI_ALLOC_FreeFixedBlock
	add	esp, 4
; Line 1279
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_GUI_ALLOC_Free
	add	esp, 4
; Line 1280
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
; Line 1281
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 1282
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Delete ENDP
_TEXT	ENDS
PUBLIC	_GUI_SPRITE_SetPosition
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_SPRITE_SetPosition
_TEXT	SEGMENT
_hSprite$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_GUI_SPRITE_SetPosition PROC				; COMDAT
; Line 1400
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1402
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hSprite$[ebp]
	push	edx
	call	__SetPosition
	add	esp, 12					; 0000000cH
; Line 1404
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_SPRITE_SetPosition ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetPosition
_TEXT	SEGMENT
tv200 = -644						; size = 4
tv148 = -644						; size = 4
_DoSetSpriteBkPixel$9739 = -444				; size = 4
_NewPixel$9738 = -432					; size = 4
_xNew$9736 = -420					; size = 4
_pSave$9735 = -408					; size = 4
_BkPixel$9734 = -396					; size = 4
_BitmapPixel$9733 = -384				; size = 4
_xyOverlaps$9732 = -369					; size = 1
_yNew$9728 = -360					; size = 4
_yOverlaps$9727 = -345					; size = 1
_ClipRect$ = -336					; size = 8
_pDevice$ = -320					; size = 4
_pBM$ = -308						; size = 4
_pColors$ = -296					; size = 4
_pData$ = -284						; size = 4
_LayerOld$ = -272					; size = 4
_Layer$ = -260						; size = 4
_ySize$ = -248						; size = 4
_xSize$ = -236						; size = 4
_yOverlapMax$ = -224					; size = 4
_yOverlapMin$ = -212					; size = 4
_yOff$ = -200						; size = 4
_yEnd$ = -188						; size = 4
_yStep$ = -176						; size = 4
_yStart$ = -164						; size = 4
_yPosBK$ = -152						; size = 4
_yPos$ = -140						; size = 4
_y$ = -128						; size = 4
_xOverlapMax$ = -116					; size = 4
_xOverlapMin$ = -104					; size = 4
_xOff$ = -92						; size = 4
_xEnd$ = -80						; size = 4
_xStep$ = -68						; size = 4
_xStart$ = -56						; size = 4
_xPosBK$ = -44						; size = 4
_xPos$ = -32						; size = 4
_x$ = -20						; size = 4
_pSprite$ = -8						; size = 4
_hSprite$ = 8						; size = 4
_xNewPos$ = 12						; size = 4
_yNewPos$ = 16						; size = 4
__SetPosition PROC					; COMDAT
; Line 926
	push	ebp
	mov	ebp, esp
	sub	esp, 644				; 00000284H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-644]
	mov	ecx, 161				; 000000a1H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 938
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 939
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 940
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	cmp	DWORD PTR _xNewPos$[ebp], ecx
	jne	SHORT $LN23@SetPositio
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _yNewPos$[ebp], ecx
	jne	SHORT $LN23@SetPositio
; Line 941
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 942
	jmp	$LN24@SetPositio
$LN23@SetPositio:
; Line 944
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _Layer$[ebp], ecx
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	DWORD PTR _LayerOld$[ebp], eax
	mov	eax, DWORD PTR _Layer$[ebp]
	cmp	eax, DWORD PTR _LayerOld$[ebp]
	je	SHORT $LN22@SetPositio
	mov	al, BYTE PTR _Layer$[ebp]
	mov	BYTE PTR _GUI_Context+17, al
$LN22@SetPositio:
; Line 945
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	DWORD PTR _xPos$[ebp], ecx
; Line 946
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR _yPos$[ebp], ecx
; Line 947
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	sub	ecx, DWORD PTR _xPos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _xSize$[ebp], ecx
; Line 948
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	sub	ecx, DWORD PTR _yPos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ySize$[ebp], ecx
; Line 949
	mov	eax, DWORD PTR _pSprite$[ebp]
	movzx	ecx, WORD PTR [eax+24]
	and	ecx, 2
	je	$LN21@SetPositio
; Line 950
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pBM$[ebp], ecx
; Line 951
	mov	eax, DWORD PTR _pSprite$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pData$[ebp], eax
; Line 952
	mov	eax, DWORD PTR _xNewPos$[ebp]
	sub	eax, DWORD PTR _xPos$[ebp]
	mov	DWORD PTR _xOff$[ebp], eax
; Line 953
	mov	eax, DWORD PTR _yNewPos$[ebp]
	sub	eax, DWORD PTR _yPos$[ebp]
	mov	DWORD PTR _yOff$[ebp], eax
; Line 954
	cmp	DWORD PTR _xOff$[ebp], 0
	jle	SHORT $LN20@SetPositio
; Line 955
	mov	DWORD PTR _xStep$[ebp], 1
; Line 956
	mov	DWORD PTR _xStart$[ebp], 0
; Line 957
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR _xEnd$[ebp], eax
; Line 958
	mov	eax, DWORD PTR _xEnd$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xOverlapMax$[ebp], eax
; Line 959
	mov	eax, DWORD PTR _xOff$[ebp]
	mov	DWORD PTR _xOverlapMin$[ebp], eax
; Line 960
	jmp	SHORT $LN19@SetPositio
$LN20@SetPositio:
; Line 961
	mov	DWORD PTR _xStep$[ebp], -1
; Line 962
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xStart$[ebp], eax
; Line 963
	mov	DWORD PTR _xEnd$[ebp], -1
; Line 964
	mov	DWORD PTR _xOverlapMin$[ebp], 0
; Line 965
	mov	eax, DWORD PTR _xStart$[ebp]
	add	eax, DWORD PTR _xOff$[ebp]
	mov	DWORD PTR _xOverlapMax$[ebp], eax
$LN19@SetPositio:
; Line 967
	cmp	DWORD PTR _yOff$[ebp], 0
	jle	SHORT $LN18@SetPositio
; Line 968
	mov	DWORD PTR _yStep$[ebp], 1
; Line 969
	mov	DWORD PTR _yStart$[ebp], 0
; Line 970
	mov	eax, DWORD PTR _ySize$[ebp]
	mov	DWORD PTR _yEnd$[ebp], eax
; Line 971
	mov	eax, DWORD PTR _yEnd$[ebp]
	sub	eax, 1
	mov	DWORD PTR _yOverlapMax$[ebp], eax
; Line 972
	mov	eax, DWORD PTR _yOff$[ebp]
	mov	DWORD PTR _yOverlapMin$[ebp], eax
; Line 973
	jmp	SHORT $LN17@SetPositio
$LN18@SetPositio:
; Line 974
	mov	DWORD PTR _yStep$[ebp], -1
; Line 975
	mov	eax, DWORD PTR _ySize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _yStart$[ebp], eax
; Line 976
	mov	DWORD PTR _yEnd$[ebp], -1
; Line 977
	mov	DWORD PTR _yOverlapMin$[ebp], 0
; Line 978
	mov	eax, DWORD PTR _yStart$[ebp]
	add	eax, DWORD PTR _yOff$[ebp]
	mov	DWORD PTR _yOverlapMax$[ebp], eax
$LN17@SetPositio:
; Line 980
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pColors$[ebp], eax
; Line 981
	mov	esi, esp
	lea	eax, DWORD PTR _ClipRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+48]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 982
	mov	eax, DWORD PTR _yStart$[ebp]
	mov	DWORD PTR _y$[ebp], eax
	jmp	SHORT $LN16@SetPositio
$LN15@SetPositio:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _yStep$[ebp]
	mov	DWORD PTR _y$[ebp], eax
$LN16@SetPositio:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _yEnd$[ebp]
	je	$LN14@SetPositio
; Line 984
	mov	eax, DWORD PTR _yPos$[ebp]
	add	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _yOff$[ebp]
	mov	DWORD PTR _yNew$9728[ebp], eax
; Line 985
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _yOverlapMin$[ebp]
	jl	SHORT $LN26@SetPositio
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _yOverlapMax$[ebp]
	jg	SHORT $LN26@SetPositio
	mov	DWORD PTR tv148[ebp], 1
	jmp	SHORT $LN27@SetPositio
$LN26@SetPositio:
	mov	DWORD PTR tv148[ebp], 0
$LN27@SetPositio:
	mov	dl, BYTE PTR tv148[ebp]
	mov	BYTE PTR _yOverlaps$9727[ebp], dl
; Line 986
	mov	eax, DWORD PTR _xStart$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN13@SetPositio
$LN12@SetPositio:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _xStep$[ebp]
	mov	DWORD PTR _x$[ebp], eax
$LN13@SetPositio:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _xEnd$[ebp]
	je	$LN11@SetPositio
; Line 993
	mov	DWORD PTR _BkPixel$9734[ebp], 0
; Line 994
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBM$[ebp]
	push	edx
	call	_GUI_GetBitmapPixelIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _BitmapPixel$9733[ebp], eax
; Line 998
	cmp	DWORD PTR _BitmapPixel$9733[ebp], 0
	je	$LN10@SetPositio
; Line 1001
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _xSize$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _pSave$9735[ebp], ecx
; Line 1002
	mov	eax, DWORD PTR _xPos$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _xOff$[ebp]
	mov	DWORD PTR _xNew$9736[ebp], eax
; Line 1003
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _xOverlapMin$[ebp]
	jl	SHORT $LN28@SetPositio
	mov	ecx, DWORD PTR _x$[ebp]
	cmp	ecx, DWORD PTR _xOverlapMax$[ebp]
	jg	SHORT $LN28@SetPositio
	movzx	edx, BYTE PTR _yOverlaps$9727[ebp]
	test	edx, edx
	je	SHORT $LN28@SetPositio
	mov	DWORD PTR tv200[ebp], 1
	jmp	SHORT $LN29@SetPositio
$LN28@SetPositio:
	mov	DWORD PTR tv200[ebp], 0
$LN29@SetPositio:
	mov	al, BYTE PTR tv200[ebp]
	mov	BYTE PTR _xyOverlaps$9732[ebp], al
; Line 1007
	movsx	eax, WORD PTR _ClipRect$[ebp]
	cmp	DWORD PTR _xNew$9736[ebp], eax
	jl	SHORT $LN9@SetPositio
	movsx	eax, WORD PTR _ClipRect$[ebp+2]
	cmp	DWORD PTR _yNew$9728[ebp], eax
	jl	SHORT $LN9@SetPositio
	movsx	eax, WORD PTR _ClipRect$[ebp+4]
	cmp	DWORD PTR _xNew$9736[ebp], eax
	jg	SHORT $LN9@SetPositio
	movsx	eax, WORD PTR _ClipRect$[ebp+6]
	cmp	DWORD PTR _yNew$9728[ebp], eax
	jg	SHORT $LN9@SetPositio
; Line 1008
	mov	eax, DWORD PTR _pSprite$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yNew$9728[ebp]
	push	edx
	mov	eax, DWORD PTR _xNew$9736[ebp]
	push	eax
	call	__GetBkPixel
	add	esp, 16					; 00000010H
	mov	DWORD PTR _BkPixel$9734[ebp], eax
$LN9@SetPositio:
; Line 1013
	mov	DWORD PTR _DoSetSpriteBkPixel$9739[ebp], 0
; Line 1014
	movzx	eax, BYTE PTR _xyOverlaps$9732[ebp]
	test	eax, eax
	jne	SHORT $LN8@SetPositio
; Line 1015
	mov	DWORD PTR _DoSetSpriteBkPixel$9739[ebp], 1
; Line 1016
	jmp	SHORT $LN7@SetPositio
$LN8@SetPositio:
; Line 1017
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR _xOff$[ebp]
	js	SHORT $LN7@SetPositio
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _yOff$[ebp]
	js	SHORT $LN7@SetPositio
; Line 1018
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _yOff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, DWORD PTR _xOff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBM$[ebp]
	push	edx
	call	_GUI_GetBitmapPixelIndex
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@SetPositio
; Line 1019
	mov	DWORD PTR _DoSetSpriteBkPixel$9739[ebp], 1
$LN7@SetPositio:
; Line 1023
	cmp	DWORD PTR _DoSetSpriteBkPixel$9739[ebp], 0
	je	SHORT $LN4@SetPositio
; Line 1024
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _xPos$[ebp]
	mov	DWORD PTR _xPosBK$[ebp], eax
; Line 1025
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _yPos$[ebp]
	mov	DWORD PTR _yPosBK$[ebp], eax
; Line 1026
	movsx	eax, WORD PTR _ClipRect$[ebp]
	cmp	DWORD PTR _xPosBK$[ebp], eax
	jl	SHORT $LN4@SetPositio
	movsx	eax, WORD PTR _ClipRect$[ebp+2]
	cmp	DWORD PTR _yPosBK$[ebp], eax
	jl	SHORT $LN4@SetPositio
	movsx	eax, WORD PTR _ClipRect$[ebp+4]
	cmp	DWORD PTR _xPosBK$[ebp], eax
	jg	SHORT $LN4@SetPositio
	movsx	eax, WORD PTR _ClipRect$[ebp+6]
	cmp	DWORD PTR _yPosBK$[ebp], eax
	jg	SHORT $LN4@SetPositio
; Line 1027
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSave$9735[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _yPosBK$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xPosBK$[ebp]
	push	ecx
	call	__SetSpriteBkPixel
	add	esp, 16					; 00000010H
$LN4@SetPositio:
; Line 1033
	movsx	eax, WORD PTR _ClipRect$[ebp]
	cmp	DWORD PTR _xNew$9736[ebp], eax
	jl	SHORT $LN2@SetPositio
	movsx	eax, WORD PTR _ClipRect$[ebp+2]
	cmp	DWORD PTR _yNew$9728[ebp], eax
	jl	SHORT $LN2@SetPositio
	movsx	eax, WORD PTR _ClipRect$[ebp+4]
	cmp	DWORD PTR _xNew$9736[ebp], eax
	jg	SHORT $LN2@SetPositio
	movsx	eax, WORD PTR _ClipRect$[ebp+6]
	cmp	DWORD PTR _yNew$9728[ebp], eax
	jg	SHORT $LN2@SetPositio
; Line 1034
	mov	eax, DWORD PTR _BitmapPixel$9733[ebp]
	mov	ecx, DWORD PTR _pColors$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _NewPixel$9738[ebp], edx
; Line 1035
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NewPixel$9738[ebp]
	push	ecx
	mov	edx, DWORD PTR _yNew$9728[ebp]
	push	edx
	mov	eax, DWORD PTR _xNew$9736[ebp]
	push	eax
	call	__SetSpriteBkPixel
	add	esp, 16					; 00000010H
$LN2@SetPositio:
; Line 1040
	mov	eax, DWORD PTR _pSave$9735[ebp]
	mov	ecx, DWORD PTR _BkPixel$9734[ebp]
	mov	DWORD PTR [eax], ecx
$LN10@SetPositio:
; Line 1042
	jmp	$LN12@SetPositio
$LN11@SetPositio:
; Line 1043
	jmp	$LN15@SetPositio
$LN14@SetPositio:
; Line 1044
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pColors$[ebp], 0
$LN21@SetPositio:
; Line 1049
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	cx, WORD PTR _xNewPos$[ebp]
	mov	WORD PTR [eax+4], cx
; Line 1050
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	cx, WORD PTR _yNewPos$[ebp]
	mov	WORD PTR [eax+6], cx
; Line 1051
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	ecx, DWORD PTR _xNewPos$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	WORD PTR [eax+8], dx
; Line 1052
	mov	eax, DWORD PTR _ySize$[ebp]
	mov	ecx, DWORD PTR _yNewPos$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	WORD PTR [eax+10], dx
; Line 1053
	mov	eax, DWORD PTR _Layer$[ebp]
	cmp	eax, DWORD PTR _LayerOld$[ebp]
	je	SHORT $LN1@SetPositio
	mov	al, BYTE PTR _LayerOld$[ebp]
	mov	BYTE PTR _GUI_Context+17, al
$LN1@SetPositio:
; Line 1054
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
$LN24@SetPositio:
; Line 1055
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@SetPositio
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 644				; 00000284H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN32@SetPositio:
	DD	1
	DD	$LN31@SetPositio
$LN31@SetPositio:
	DD	-336					; fffffeb0H
	DD	8
	DD	$LN30@SetPositio
$LN30@SetPositio:
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
__SetPosition ENDP
_TEXT	ENDS
PUBLIC	_GUI_SPRITE_SetBitmap
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_SPRITE_SetBitmap
_TEXT	SEGMENT
_pSprite$ = -44						; size = 4
_YSize$ = -32						; size = 4
_XSize$ = -20						; size = 4
_r$ = -8						; size = 4
_hSprite$ = 8						; size = 4
_pBM$ = 12						; size = 4
_GUI_SPRITE_SetBitmap PROC				; COMDAT
; Line 1410
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1411
	mov	DWORD PTR _r$[ebp], 1
; Line 1414
	cmp	DWORD PTR _hSprite$[ebp], 0
	je	SHORT $LN3@GUI_SPRITE@3
; Line 1416
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 1417
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR _XSize$[ebp], edx
; Line 1418
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	movzx	edx, WORD PTR [ecx+2]
	mov	DWORD PTR _YSize$[ebp], edx
; Line 1419
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 1423
	mov	eax, DWORD PTR _pBM$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	DWORD PTR _XSize$[ebp], ecx
	jne	SHORT $LN3@GUI_SPRITE@3
	mov	eax, DWORD PTR _pBM$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cmp	DWORD PTR _YSize$[ebp], ecx
	jne	SHORT $LN3@GUI_SPRITE@3
; Line 1427
	mov	eax, DWORD PTR _pBM$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hSprite$[ebp]
	push	ecx
	call	__DoColorConversion
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@GUI_SPRITE@3
; Line 1431
	mov	eax, DWORD PTR _pBM$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hSprite$[ebp]
	push	ecx
	call	__SetBitmap
	add	esp, 8
; Line 1432
	mov	DWORD PTR _r$[ebp], 0
$LN3@GUI_SPRITE@3:
; Line 1437
	mov	eax, DWORD PTR _r$[ebp]
; Line 1438
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_SPRITE_SetBitmap ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetBitmap
_TEXT	SEGMENT
_ClipRect$ = -168					; size = 8
_pDevice$ = -152					; size = 4
_pColors$ = -140					; size = 4
_pData$ = -128						; size = 4
_LayerOld$ = -116					; size = 4
_Layer$ = -104						; size = 4
_PixelNew$ = -92					; size = 4
_PixelOld$ = -80					; size = 4
_Index$ = -68						; size = 4
_y$ = -56						; size = 4
_x$ = -44						; size = 4
_yPos$ = -32						; size = 4
_xPos$ = -20						; size = 4
_pSprite$ = -8						; size = 4
_hSprite$ = 8						; size = 4
_pBM$ = 12						; size = 4
__SetBitmap PROC					; COMDAT
; Line 868
	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 878
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 879
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 880
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _Layer$[ebp], ecx
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	DWORD PTR _LayerOld$[ebp], eax
	mov	eax, DWORD PTR _Layer$[ebp]
	cmp	eax, DWORD PTR _LayerOld$[ebp]
	je	SHORT $LN11@SetBitmap
	mov	al, BYTE PTR _Layer$[ebp]
	mov	BYTE PTR _GUI_Context+17, al
$LN11@SetBitmap:
; Line 881
	mov	eax, DWORD PTR _pSprite$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pData$[ebp], eax
; Line 882
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pColors$[ebp], eax
; Line 883
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _ClipRect$[ebp], ecx
	mov	DWORD PTR _ClipRect$[ebp+4], edx
; Line 884
	lea	eax, DWORD PTR _ClipRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__ClipRectEx
	add	esp, 8
; Line 885
	movsx	eax, WORD PTR _ClipRect$[ebp+2]
	mov	DWORD PTR _y$[ebp], eax
	jmp	SHORT $LN10@SetBitmap
$LN9@SetBitmap:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN10@SetBitmap:
	movsx	eax, WORD PTR _ClipRect$[ebp+6]
	cmp	DWORD PTR _y$[ebp], eax
	jg	$LN8@SetBitmap
; Line 886
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _yPos$[ebp], edx
; Line 887
	movsx	eax, WORD PTR _ClipRect$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN7@SetBitmap
$LN6@SetBitmap:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@SetBitmap:
	movsx	eax, WORD PTR _ClipRect$[ebp+4]
	cmp	DWORD PTR _x$[ebp], eax
	jg	$LN5@SetBitmap
; Line 888
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _xPos$[ebp], edx
; Line 889
	mov	eax, DWORD PTR _yPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSprite$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_GUI_GetBitmapPixelIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _PixelOld$[ebp], eax
; Line 890
	mov	eax, DWORD PTR _yPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBM$[ebp]
	push	edx
	call	_GUI_GetBitmapPixelIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _PixelNew$[ebp], eax
; Line 891
	cmp	DWORD PTR _PixelNew$[ebp], 0
	jne	SHORT $LN4@SetBitmap
; Line 892
	cmp	DWORD PTR _PixelOld$[ebp], 0
	je	SHORT $LN3@SetBitmap
; Line 896
	mov	eax, DWORD PTR _pBM$[ebp]
	movzx	ecx, WORD PTR [eax]
	imul	ecx, DWORD PTR _yPos$[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _xPos$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _Index$[ebp], edx
; Line 897
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__SetSpriteBkPixel
	add	esp, 16					; 00000010H
$LN3@SetBitmap:
; Line 899
	jmp	SHORT $LN2@SetBitmap
$LN4@SetBitmap:
; Line 903
	mov	eax, DWORD PTR _pSprite$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__GetBkPixel
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _pBM$[ebp]
	movzx	edx, WORD PTR [ecx]
	imul	edx, DWORD PTR _yPos$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _xPos$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 907
	mov	eax, DWORD PTR _PixelNew$[ebp]
	mov	ecx, DWORD PTR _pColors$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _Index$[ebp], edx
; Line 908
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__SetSpriteBkPixel
	add	esp, 16					; 00000010H
$LN2@SetBitmap:
; Line 910
	jmp	$LN6@SetBitmap
$LN5@SetBitmap:
; Line 911
	jmp	$LN9@SetBitmap
$LN8@SetBitmap:
; Line 912
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR _pBM$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 913
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 914
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pColors$[ebp], 0
; Line 915
	mov	eax, DWORD PTR _Layer$[ebp]
	cmp	eax, DWORD PTR _LayerOld$[ebp]
	je	SHORT $LN12@SetBitmap
	mov	al, BYTE PTR _LayerOld$[ebp]
	mov	BYTE PTR _GUI_Context+17, al
$LN12@SetBitmap:
; Line 916
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@SetBitmap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@SetBitmap:
	DD	1
	DD	$LN15@SetBitmap
$LN15@SetBitmap:
	DD	-168					; ffffff58H
	DD	8
	DD	$LN14@SetBitmap
$LN14@SetBitmap:
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
__SetBitmap ENDP
_TEXT	ENDS
PUBLIC	_GUI_SPRITE_SetBitmapAndPosition
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_SPRITE_SetBitmapAndPosition
_TEXT	SEGMENT
_pSprite$ = -68						; size = 4
_y0$ = -56						; size = 4
_x0$ = -44						; size = 4
_YSize$ = -32						; size = 4
_XSize$ = -20						; size = 4
_r$ = -8						; size = 4
_hSprite$ = 8						; size = 4
_pBM$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_GUI_SPRITE_SetBitmapAndPosition PROC			; COMDAT
; Line 1444
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1445
	mov	DWORD PTR _r$[ebp], 1
; Line 1448
	cmp	DWORD PTR _hSprite$[ebp], 0
	je	$LN3@GUI_SPRITE@4
; Line 1450
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 1451
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR _XSize$[ebp], edx
; Line 1452
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	movzx	edx, WORD PTR [ecx+2]
	mov	DWORD PTR _YSize$[ebp], edx
; Line 1453
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	DWORD PTR _x0$[ebp], ecx
; Line 1454
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR _y0$[ebp], ecx
; Line 1455
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 1459
	mov	eax, DWORD PTR _pBM$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	DWORD PTR _XSize$[ebp], ecx
	jne	SHORT $LN3@GUI_SPRITE@4
	mov	eax, DWORD PTR _pBM$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cmp	DWORD PTR _YSize$[ebp], ecx
	jne	SHORT $LN3@GUI_SPRITE@4
; Line 1463
	mov	eax, DWORD PTR _pBM$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hSprite$[ebp]
	push	ecx
	call	__DoColorConversion
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@GUI_SPRITE@4
; Line 1467
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBM$[ebp]
	push	edx
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	__SetBitmapAndPosition
	add	esp, 16					; 00000010H
; Line 1468
	mov	DWORD PTR _r$[ebp], 0
$LN3@GUI_SPRITE@4:
; Line 1473
	mov	eax, DWORD PTR _r$[ebp]
; Line 1474
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_SPRITE_SetBitmapAndPosition ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetBitmapAndPosition
_TEXT	SEGMENT
tv147 = -536						; size = 4
_Data$ = -336						; size = 4
_LayerOld$ = -324					; size = 4
_Layer$ = -312						; size = 4
_BkIndex$ = -300					; size = 4
_Index$ = -288						; size = 4
_PixelNew$ = -276					; size = 4
_PixelOld$ = -264					; size = 4
_Undraw$ = -252						; size = 4
_Overlap$ = -240					; size = 4
_Pixel$ = -228						; size = 4
_yPos$ = -216						; size = 4
_xPos$ = -204						; size = 4
_ClipRect$ = -192					; size = 8
_pDevice$ = -176					; size = 4
_pColors$ = -164					; size = 4
_pData$ = -152						; size = 4
_pBM_Old$ = -140					; size = 4
_yInc$ = -128						; size = 4
_xInc$ = -116						; size = 4
_yEnd$ = -104						; size = 4
_yStart$ = -92						; size = 4
_xEnd$ = -80						; size = 4
_xStart$ = -68						; size = 4
_y$ = -56						; size = 4
_x$ = -44						; size = 4
_ySize$ = -32						; size = 4
_xSize$ = -20						; size = 4
_pSprite$ = -8						; size = 4
_hSprite$ = 8						; size = 4
_pBM_New$ = 12						; size = 4
_xOff$ = 16						; size = 4
_yOff$ = 20						; size = 4
__SetBitmapAndPosition PROC				; COMDAT
; Line 1061
	push	ebp
	mov	ebp, esp
	sub	esp, 536				; 00000218H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-536]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1079
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 1080
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 1081
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _Layer$[ebp], ecx
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	DWORD PTR _LayerOld$[ebp], eax
	mov	eax, DWORD PTR _Layer$[ebp]
	cmp	eax, DWORD PTR _LayerOld$[ebp]
	je	SHORT $LN19@SetBitmapA
	mov	al, BYTE PTR _Layer$[ebp]
	mov	BYTE PTR _GUI_Context+17, al
$LN19@SetBitmapA:
; Line 1082
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pBM_Old$[ebp], ecx
; Line 1083
	mov	eax, DWORD PTR _pSprite$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pData$[ebp], eax
; Line 1084
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _pSprite$[ebp]
	movsx	eax, WORD PTR [edx+4]
	sub	ecx, eax
	add	ecx, 1
	mov	DWORD PTR _xSize$[ebp], ecx
; Line 1085
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	mov	edx, DWORD PTR _pSprite$[ebp]
	movsx	eax, WORD PTR [edx+6]
	sub	ecx, eax
	add	ecx, 1
	mov	DWORD PTR _ySize$[ebp], ecx
; Line 1086
	cmp	DWORD PTR _yOff$[ebp], 0
	jge	SHORT $LN18@SetBitmapA
; Line 1087
	mov	eax, DWORD PTR _ySize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _yStart$[ebp], eax
; Line 1088
	mov	DWORD PTR _yEnd$[ebp], -1
; Line 1089
	mov	DWORD PTR _yInc$[ebp], -1
; Line 1090
	jmp	SHORT $LN17@SetBitmapA
$LN18@SetBitmapA:
; Line 1091
	mov	DWORD PTR _yStart$[ebp], 0
; Line 1092
	mov	eax, DWORD PTR _ySize$[ebp]
	mov	DWORD PTR _yEnd$[ebp], eax
; Line 1093
	mov	DWORD PTR _yInc$[ebp], 1
$LN17@SetBitmapA:
; Line 1095
	cmp	DWORD PTR _xOff$[ebp], 0
	jge	SHORT $LN16@SetBitmapA
; Line 1096
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xStart$[ebp], eax
; Line 1097
	mov	DWORD PTR _xEnd$[ebp], -1
; Line 1098
	mov	DWORD PTR _xInc$[ebp], -1
; Line 1099
	jmp	SHORT $LN15@SetBitmapA
$LN16@SetBitmapA:
; Line 1100
	mov	DWORD PTR _xStart$[ebp], 0
; Line 1101
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR _xEnd$[ebp], eax
; Line 1102
	mov	DWORD PTR _xInc$[ebp], 1
$LN15@SetBitmapA:
; Line 1104
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pColors$[ebp], eax
; Line 1105
	mov	esi, esp
	lea	eax, DWORD PTR _ClipRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+48]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1106
	mov	eax, DWORD PTR _yStart$[ebp]
	mov	DWORD PTR _y$[ebp], eax
	jmp	SHORT $LN14@SetBitmapA
$LN13@SetBitmapA:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _yInc$[ebp]
	mov	DWORD PTR _y$[ebp], eax
$LN14@SetBitmapA:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _yEnd$[ebp]
	je	$LN12@SetBitmapA
; Line 1107
	mov	eax, DWORD PTR _xStart$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN11@SetBitmapA
$LN10@SetBitmapA:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _xInc$[ebp]
	mov	DWORD PTR _x$[ebp], eax
$LN11@SetBitmapA:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _xEnd$[ebp]
	je	$LN9@SetBitmapA
; Line 1108
	mov	DWORD PTR _Undraw$[ebp], 1
; Line 1109
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBM_Old$[ebp]
	push	edx
	call	_GUI_GetBitmapPixelIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _PixelOld$[ebp], eax
; Line 1110
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBM_New$[ebp]
	push	edx
	call	_GUI_GetBitmapPixelIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _PixelNew$[ebp], eax
; Line 1111
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR _xOff$[ebp]
	mov	DWORD PTR _xPos$[ebp], eax
; Line 1112
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _yOff$[ebp]
	mov	DWORD PTR _yPos$[ebp], eax
; Line 1113
	cmp	DWORD PTR _xPos$[ebp], 0
	jl	SHORT $LN22@SetBitmapA
	cmp	DWORD PTR _yPos$[ebp], 0
	jl	SHORT $LN22@SetBitmapA
	mov	eax, DWORD PTR _pBM_New$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	DWORD PTR _xPos$[ebp], ecx
	jge	SHORT $LN22@SetBitmapA
	mov	edx, DWORD PTR _pBM_New$[ebp]
	movzx	eax, WORD PTR [edx+2]
	cmp	DWORD PTR _yPos$[ebp], eax
	jge	SHORT $LN22@SetBitmapA
	mov	DWORD PTR tv147[ebp], 1
	jmp	SHORT $LN23@SetBitmapA
$LN22@SetBitmapA:
	mov	DWORD PTR tv147[ebp], 0
$LN23@SetBitmapA:
	mov	ecx, DWORD PTR tv147[ebp]
	mov	DWORD PTR _Overlap$[ebp], ecx
; Line 1117
	cmp	DWORD PTR _PixelOld$[ebp], 0
	je	$LN8@SetBitmapA
; Line 1118
	cmp	DWORD PTR _Overlap$[ebp], 0
	je	SHORT $LN7@SetBitmapA
; Line 1119
	mov	eax, DWORD PTR _yPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBM_New$[ebp]
	push	edx
	call	_GUI_GetBitmapPixelIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Pixel$[ebp], eax
; Line 1120
	cmp	DWORD PTR _Pixel$[ebp], 0
	je	SHORT $LN7@SetBitmapA
; Line 1121
	mov	DWORD PTR _Undraw$[ebp], 0
$LN7@SetBitmapA:
; Line 1124
	cmp	DWORD PTR _Undraw$[ebp], 0
	je	$LN8@SetBitmapA
; Line 1125
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	add	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _xPos$[ebp], ecx
; Line 1126
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	add	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _yPos$[ebp], ecx
; Line 1127
	movsx	eax, WORD PTR _ClipRect$[ebp]
	cmp	DWORD PTR _xPos$[ebp], eax
	jl	SHORT $LN8@SetBitmapA
	movsx	eax, WORD PTR _ClipRect$[ebp+2]
	cmp	DWORD PTR _yPos$[ebp], eax
	jl	SHORT $LN8@SetBitmapA
	movsx	eax, WORD PTR _ClipRect$[ebp+4]
	cmp	DWORD PTR _xPos$[ebp], eax
	jg	SHORT $LN8@SetBitmapA
	movsx	eax, WORD PTR _ClipRect$[ebp+6]
	cmp	DWORD PTR _yPos$[ebp], eax
	jg	SHORT $LN8@SetBitmapA
; Line 1128
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _xSize$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _Data$[ebp], ecx
; Line 1129
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSprite$[ebp]
	movsx	eax, WORD PTR [edx+6]
	add	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSprite$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	add	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__SetSpriteBkPixel
	add	esp, 16					; 00000010H
$LN8@SetBitmapA:
; Line 1136
	cmp	DWORD PTR _PixelNew$[ebp], 0
	je	$LN3@SetBitmapA
; Line 1137
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	add	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _xOff$[ebp]
	mov	DWORD PTR _xPos$[ebp], ecx
; Line 1138
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	add	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _yOff$[ebp]
	mov	DWORD PTR _yPos$[ebp], ecx
; Line 1139
	movsx	eax, WORD PTR _ClipRect$[ebp]
	cmp	DWORD PTR _xPos$[ebp], eax
	jl	$LN3@SetBitmapA
	movsx	eax, WORD PTR _ClipRect$[ebp+2]
	cmp	DWORD PTR _yPos$[ebp], eax
	jl	$LN3@SetBitmapA
	movsx	eax, WORD PTR _ClipRect$[ebp+4]
	cmp	DWORD PTR _xPos$[ebp], eax
	jg	$LN3@SetBitmapA
	movsx	eax, WORD PTR _ClipRect$[ebp+6]
	cmp	DWORD PTR _yPos$[ebp], eax
	jg	SHORT $LN3@SetBitmapA
; Line 1140
	mov	eax, DWORD PTR _pSprite$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _xPos$[ebp]
	push	eax
	call	__GetBkPixel
	add	esp, 16					; 00000010H
	mov	DWORD PTR _BkIndex$[ebp], eax
; Line 1141
	mov	eax, DWORD PTR _PixelNew$[ebp]
	mov	ecx, DWORD PTR _pColors$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _Index$[ebp], edx
; Line 1142
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _xPos$[ebp]
	push	eax
	call	__SetSpriteBkPixel
	add	esp, 16					; 00000010H
; Line 1143
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _xSize$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _BkIndex$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
$LN3@SetBitmapA:
; Line 1146
	jmp	$LN10@SetBitmapA
$LN9@SetBitmapA:
; Line 1147
	jmp	$LN13@SetBitmapA
$LN12@SetBitmapA:
; Line 1148
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pColors$[ebp], 0
; Line 1149
	mov	eax, DWORD PTR _pSprite$[ebp]
	mov	ecx, DWORD PTR _pBM_New$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 1150
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	add	ecx, DWORD PTR _xOff$[ebp]
	mov	edx, DWORD PTR _pSprite$[ebp]
	mov	WORD PTR [edx+4], cx
; Line 1151
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	add	ecx, DWORD PTR _xOff$[ebp]
	mov	edx, DWORD PTR _pSprite$[ebp]
	mov	WORD PTR [edx+8], cx
; Line 1152
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	add	ecx, DWORD PTR _yOff$[ebp]
	mov	edx, DWORD PTR _pSprite$[ebp]
	mov	WORD PTR [edx+6], cx
; Line 1153
	mov	eax, DWORD PTR _pSprite$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	add	ecx, DWORD PTR _yOff$[ebp]
	mov	edx, DWORD PTR _pSprite$[ebp]
	mov	WORD PTR [edx+10], cx
; Line 1154
	mov	eax, DWORD PTR _Layer$[ebp]
	cmp	eax, DWORD PTR _LayerOld$[ebp]
	je	SHORT $LN1@SetBitmapA
	mov	al, BYTE PTR _LayerOld$[ebp]
	mov	BYTE PTR _GUI_Context+17, al
$LN1@SetBitmapA:
; Line 1155
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
; Line 1156
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@SetBitmapA
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 536				; 00000218H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN26@SetBitmapA:
	DD	1
	DD	$LN25@SetBitmapA
$LN25@SetBitmapA:
	DD	-192					; ffffff40H
	DD	8
	DD	$LN24@SetBitmapA
$LN24@SetBitmapA:
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
__SetBitmapAndPosition ENDP
_TEXT	ENDS
PUBLIC	_GUI_SPRITE_Hide
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_SPRITE_Hide
_TEXT	SEGMENT
_pSprite$ = -8						; size = 4
_hSprite$ = 8						; size = 4
_GUI_SPRITE_Hide PROC					; COMDAT
; Line 1480
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1482
	cmp	DWORD PTR _hSprite$[ebp], 0
	je	SHORT $LN3@GUI_SPRITE@5
; Line 1484
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 1485
	mov	eax, DWORD PTR _pSprite$[ebp]
	movzx	ecx, WORD PTR [eax+24]
	and	ecx, 2
	je	SHORT $LN1@GUI_SPRITE@5
; Line 1486
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	__Undraw
	add	esp, 4
; Line 1487
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	__Unlink
	add	esp, 4
; Line 1488
	mov	eax, DWORD PTR _pSprite$[ebp]
	movzx	ecx, WORD PTR [eax+24]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _pSprite$[ebp]
	mov	WORD PTR [edx+24], cx
$LN1@GUI_SPRITE@5:
; Line 1490
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
$LN3@GUI_SPRITE@5:
; Line 1493
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_SPRITE_Hide ENDP
_TEXT	ENDS
PUBLIC	_GUI_SPRITE_Show
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_SPRITE_Show
_TEXT	SEGMENT
_pSprite$ = -8						; size = 4
_hSprite$ = 8						; size = 4
_GUI_SPRITE_Show PROC					; COMDAT
; Line 1499
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1501
	cmp	DWORD PTR _hSprite$[ebp], 0
	je	SHORT $LN3@GUI_SPRITE@6
; Line 1503
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 1504
	mov	eax, DWORD PTR _pSprite$[ebp]
	movzx	ecx, WORD PTR [eax+24]
	and	ecx, 2
	jne	SHORT $LN1@GUI_SPRITE@6
; Line 1505
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	__Link
	add	esp, 4
; Line 1506
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	__SpriteDraw
	add	esp, 4
; Line 1507
	mov	eax, DWORD PTR _pSprite$[ebp]
	movzx	ecx, WORD PTR [eax+24]
	or	ecx, 2
	mov	edx, DWORD PTR _pSprite$[ebp]
	mov	WORD PTR [edx+24], cx
$LN1@GUI_SPRITE@6:
; Line 1509
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
$LN3@GUI_SPRITE@6:
; Line 1512
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_SPRITE_Show ENDP
_TEXT	ENDS
PUBLIC	_GUI_SPRITE_GetState
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_SPRITE_GetState
_TEXT	SEGMENT
_pSprite$ = -20						; size = 4
_r$ = -8						; size = 4
_hSprite$ = 8						; size = 4
_GUI_SPRITE_GetState PROC				; COMDAT
; Line 1518
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1519
	mov	DWORD PTR _r$[ebp], 0
; Line 1521
	cmp	DWORD PTR _hSprite$[ebp], 0
	je	SHORT $LN1@GUI_SPRITE@7
; Line 1523
	mov	eax, DWORD PTR _hSprite$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pSprite$[ebp], eax
; Line 1524
	mov	eax, DWORD PTR _pSprite$[ebp]
	movzx	ecx, WORD PTR [eax+24]
	and	ecx, 2
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	DWORD PTR _r$[ebp], ecx
; Line 1525
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pSprite$[ebp], 0
$LN1@GUI_SPRITE@7:
; Line 1528
	mov	eax, DWORD PTR _r$[ebp]
; Line 1529
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_SPRITE_GetState ENDP
_TEXT	ENDS
END
