; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_PolyEnlarge.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_EnlargePolygon
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_polyenlarge.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_EnlargePolygon
_TEXT	SEGMENT
_aVect$ = -56						; size = 16
_j$ = -32						; size = 4
_y$ = -20						; size = 4
_x$ = -8						; size = 4
_pDest$ = 8						; size = 4
_pSrc$ = 12						; size = 4
_NumPoints$ = 16					; size = 4
_Len$ = 20						; size = 4
_GUI_EnlargePolygon PROC				; COMDAT
; Line 142
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 147
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@GUI_Enlarg
$LN2@GUI_Enlarg:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@GUI_Enlarg:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _NumPoints$[ebp]
	jge	$LN1@GUI_Enlarg
; Line 149
	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NumPoints$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSrc$[ebp]
	push	edx
	lea	eax, DWORD PTR _aVect$[ebp]
	push	eax
	call	__GetVect
	add	esp, 16					; 00000010H
; Line 150
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _NumPoints$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSrc$[ebp]
	push	edx
	lea	eax, DWORD PTR _aVect$[ebp+8]
	push	eax
	call	__GetVect
	add	esp, 16					; 00000010H
; Line 152
	lea	eax, DWORD PTR _aVect$[ebp]
	push	eax
	call	__Normalize
	add	esp, 4
; Line 153
	lea	eax, DWORD PTR _aVect$[ebp+8]
	push	eax
	call	__Normalize
	add	esp, 4
; Line 154
	fld	DWORD PTR _aVect$[ebp]
	fadd	DWORD PTR _aVect$[ebp+8]
	fstp	DWORD PTR _aVect$[ebp]
; Line 155
	fld	DWORD PTR _aVect$[ebp+4]
	fadd	DWORD PTR _aVect$[ebp+12]
	fstp	DWORD PTR _aVect$[ebp+4]
; Line 157
	lea	eax, DWORD PTR _aVect$[ebp]
	push	eax
	call	__ReverseLen
	add	esp, 4
; Line 158
	fild	DWORD PTR _Len$[ebp]
	fmul	DWORD PTR _aVect$[ebp+4]
	push	ecx
	fstp	DWORD PTR [esp]
	call	__fround
	add	esp, 4
	mov	DWORD PTR _x$[ebp], eax
; Line 159
	fild	DWORD PTR _Len$[ebp]
	fmul	DWORD PTR _aVect$[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	__fround
	add	esp, 4
	neg	eax
	mov	DWORD PTR _y$[ebp], eax
; Line 161
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _pSrc$[ebp]
	movsx	edx, WORD PTR [ecx+eax*4]
	add	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx+eax*4], dx
; Line 162
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _pSrc$[ebp]
	movsx	edx, WORD PTR [ecx+eax*4+2]
	add	edx, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx+eax*4+2], dx
; Line 163
	jmp	$LN2@GUI_Enlarg
$LN1@GUI_Enlarg:
; Line 164
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@GUI_Enlarg
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@GUI_Enlarg:
	DD	1
	DD	$LN7@GUI_Enlarg
$LN7@GUI_Enlarg:
	DD	-56					; ffffffc8H
	DD	16					; 00000010H
	DD	$LN6@GUI_Enlarg
$LN6@GUI_Enlarg:
	DB	97					; 00000061H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_GUI_EnlargePolygon ENDP
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@00000000
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT __fround
_TEXT	SEGMENT
_f$ = 8							; size = 4
__fround PROC						; COMDAT
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 49
	fldz
	fcomp	DWORD PTR _f$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@fround
; Line 50
	fld	DWORD PTR _f$[ebp]
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	jmp	SHORT $LN2@fround
$LN1@fround:
; Line 52
	fld	DWORD PTR _f$[ebp]
	fsub	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
$LN2@fround:
; Line 53
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__fround ENDP
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Normalize
_TEXT	SEGMENT
_r$ = -32						; size = 4
_fy$ = -20						; size = 4
_fx$ = -8						; size = 4
_pfPoint$ = 8						; size = 4
__Normalize PROC					; COMDAT
; Line 59
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 64
	mov	eax, DWORD PTR _pfPoint$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _fx$[ebp]
; Line 65
	mov	eax, DWORD PTR _pfPoint$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _fy$[ebp]
; Line 66
	fld	DWORD PTR _fx$[ebp]
	fmul	DWORD PTR _fx$[ebp]
	fld	DWORD PTR _fy$[ebp]
	fmul	DWORD PTR _fy$[ebp]
	faddp	ST(1), ST(0)
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _r$[ebp]
; Line 67
	fldz
	fcomp	DWORD PTR _r$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@Normalize
; Line 68
	fld	DWORD PTR _fx$[ebp]
	fdiv	DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR _pfPoint$[ebp]
	fstp	DWORD PTR [eax]
; Line 69
	fld	DWORD PTR _fy$[ebp]
	fdiv	DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR _pfPoint$[ebp]
	fstp	DWORD PTR [eax+4]
$LN1@Normalize:
; Line 71
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Normalize ENDP
_TEXT	ENDS
PUBLIC	__real@40000000
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT __ReverseLen
_TEXT	SEGMENT
_r$ = -32						; size = 4
_fy$ = -20						; size = 4
_fx$ = -8						; size = 4
_pfPoint$ = 8						; size = 4
__ReverseLen PROC					; COMDAT
; Line 77
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 82
	mov	eax, DWORD PTR _pfPoint$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _fx$[ebp]
; Line 83
	mov	eax, DWORD PTR _pfPoint$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _fy$[ebp]
; Line 84
	fld	DWORD PTR _fx$[ebp]
	fmul	DWORD PTR _fx$[ebp]
	fld	DWORD PTR _fy$[ebp]
	fmul	DWORD PTR _fy$[ebp]
	faddp	ST(1), ST(0)
	fdiv	DWORD PTR __real@40000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _r$[ebp]
; Line 85
	fldz
	fcomp	DWORD PTR _r$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@ReverseLen
; Line 86
	fld	DWORD PTR _fx$[ebp]
	fdiv	DWORD PTR _r$[ebp]
	fdiv	DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR _pfPoint$[ebp]
	fstp	DWORD PTR [eax]
; Line 87
	fld	DWORD PTR _fy$[ebp]
	fdiv	DWORD PTR _r$[ebp]
	fdiv	DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR _pfPoint$[ebp]
	fstp	DWORD PTR [eax+4]
$LN1@ReverseLen:
; Line 89
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ReverseLen ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetVect
_TEXT	SEGMENT
tv137 = -220						; size = 4
tv131 = -220						; size = 4
_Off1$ = -20						; size = 4
_Off0$ = -8						; size = 4
_pfPoint$ = 8						; size = 4
_pSrc$ = 12						; size = 4
_NumPoints$ = 16					; size = 4
_Index$ = 20						; size = 4
__GetVect PROC						; COMDAT
; Line 95
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 99
	mov	eax, DWORD PTR _NumPoints$[ebp]
	mov	ecx, DWORD PTR _Index$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	xor	edx, edx
	div	DWORD PTR _NumPoints$[ebp]
	mov	DWORD PTR _Off0$[ebp], edx
; Line 100
	mov	eax, DWORD PTR _Index$[ebp]
	xor	edx, edx
	div	DWORD PTR _NumPoints$[ebp]
	mov	DWORD PTR _Off1$[ebp], edx
; Line 101
	mov	eax, DWORD PTR _Off1$[ebp]
	mov	ecx, DWORD PTR _pSrc$[ebp]
	movsx	edx, WORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _Off0$[ebp]
	mov	ecx, DWORD PTR _pSrc$[ebp]
	movsx	eax, WORD PTR [ecx+eax*4]
	sub	edx, eax
	mov	DWORD PTR tv131[ebp], edx
	fild	DWORD PTR tv131[ebp]
	mov	ecx, DWORD PTR _pfPoint$[ebp]
	fstp	DWORD PTR [ecx]
; Line 102
	mov	eax, DWORD PTR _Off1$[ebp]
	mov	ecx, DWORD PTR _pSrc$[ebp]
	movsx	edx, WORD PTR [ecx+eax*4+2]
	mov	eax, DWORD PTR _Off0$[ebp]
	mov	ecx, DWORD PTR _pSrc$[ebp]
	movsx	eax, WORD PTR [ecx+eax*4+2]
	sub	edx, eax
	mov	DWORD PTR tv137[ebp], edx
	fild	DWORD PTR tv137[ebp]
	mov	ecx, DWORD PTR _pfPoint$[ebp]
	fstp	DWORD PTR [ecx+4]
; Line 103
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetVect ENDP
_TEXT	ENDS
END
