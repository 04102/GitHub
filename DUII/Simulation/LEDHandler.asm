; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\DUII\LEDHandler.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_UpperRect
PUBLIC	_LowerRect
PUBLIC	_BacklightBrightness
PUBLIC	_WarningLEDBrightness
PUBLIC	_TachLEDBrightness
PUBLIC	_AmbientLightIntensity
PUBLIC	_level3On
PUBLIC	_level2On
PUBLIC	_level1On
PUBLIC	_centerOn
PUBLIC	_mask
PUBLIC	_BackLightQuickSteps
_DATA	SEGMENT
COMM	_WarningPopups:WORD:02H
COMM	_centerLEDMarkTime:DWORD
COMM	_LowerLED:BYTE:010H
COMM	_UpperLED:BYTE:010H
COMM	_upperLEDOnReason:DWORD:06H
COMM	_AlarmTriggerCause:BYTE:0cH
COMM	_lowerLEDOnReason:DWORD:06H
COMM	_lowerLEDMarkTime:DWORD
_DATA	ENDS
_BSS	SEGMENT
_level3On DD	01H DUP (?)
_level2On DD	01H DUP (?)
_level1On DD	01H DUP (?)
_centerOn DD	01H DUP (?)
$SG20142 DB	01H DUP (?)
	ALIGN	4

$SG20144 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_EnvironmentalUpdatesSuspended DD 01H
_mask	DW	01H
	ORG $+2
$SG20178 DB	', ', 00H
	ORG $+1
$SG20182 DB	'%s = %0.1f%s', 00H
	ORG $+3
$SG20184 DB	'%s = %s', 00H
_BackLightQuickSteps DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	09H
	DB	0fH
	DB	019H
	DB	023H
	DB	063H
_DATA	ENDS
CONST	SEGMENT
_UpperRect DW	05H
	DW	016H
	DW	0f4H
	DW	03eH
_LowerRect DW	05H
	DW	03eH
	DW	0f4H
	DW	066H
_BacklightBrightness DD 0172H
	DD	016bH
	DD	0164H
	DD	015dH
	DD	0156H
	DD	0151H
	DD	014cH
	DD	0147H
	DD	0142H
	DD	0139H
	DD	0127H
	DD	011dH
	DD	0113H
	DD	0109H
	DD	0ffH
	DD	0f5H
	DD	0ebH
	DD	0e1H
	DD	0d7H
	DD	0cdH
	DD	0c3H
	DD	0b9H
	DD	0afH
	DD	0a5H
	DD	09bH
	DD	091H
	DD	087H
	DD	07dH
	DD	073H
	DD	069H
	DD	05fH
	DD	055H
	DD	04bH
	DD	041H
	DD	037H
	DD	02dH
	DD	02aH
	DD	027H
	DD	024H
	DD	021H
	DD	01eH
	DD	01bH
	DD	018H
	DD	015H
	DD	012H
	DD	0fH
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_WarningLEDBrightness DD 063H
	DD	062H
	DD	061H
	DD	060H
	DD	05fH
	DD	05eH
	DD	05dH
	DD	05cH
	DD	05bH
	DD	05aH
	DD	059H
	DD	058H
	DD	057H
	DD	056H
	DD	055H
	DD	054H
	DD	053H
	DD	052H
	DD	051H
	DD	050H
	DD	04fH
	DD	04eH
	DD	04dH
	DD	04cH
	DD	04bH
	DD	04aH
	DD	049H
	DD	048H
	DD	047H
	DD	046H
	DD	045H
	DD	044H
	DD	043H
	DD	042H
	DD	041H
	DD	040H
	DD	03fH
	DD	03eH
	DD	03dH
	DD	03cH
	DD	03bH
	DD	03aH
	DD	039H
	DD	038H
	DD	037H
	DD	036H
	DD	035H
	DD	034H
	DD	033H
	DD	032H
	DD	031H
	DD	030H
	DD	02fH
	DD	02eH
	DD	02dH
	DD	02cH
	DD	02bH
	DD	02aH
	DD	029H
	DD	028H
	DD	027H
	DD	026H
	DD	025H
	DD	024H
	DD	023H
	DD	022H
	DD	021H
	DD	020H
	DD	01fH
	DD	01eH
	DD	01dH
	DD	01cH
	DD	01bH
	DD	01aH
	DD	019H
	DD	018H
	DD	017H
	DD	016H
	DD	015H
	DD	014H
	DD	013H
	DD	012H
	DD	011H
	DD	010H
	DD	0fH
	DD	0eH
	DD	0dH
	DD	0cH
	DD	0bH
	DD	0aH
	DD	09H
	DD	08H
	DD	07H
	DD	06H
	DD	05H
	DD	04H
	DD	03H
	DD	02H
	DD	01H
	DD	00H
_TachLEDBrightness DD 01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
	DD	0eH
	DD	0eH
	DD	0fH
	DD	0fH
	DD	010H
	DD	010H
	DD	011H
	DD	011H
	DD	012H
	DD	012H
	DD	013H
	DD	013H
	DD	014H
	DD	015H
	DD	016H
	DD	017H
	DD	018H
	DD	019H
	DD	01aH
	DD	01bH
	DD	01cH
	DD	01dH
	DD	01eH
	DD	01fH
	DD	020H
	DD	021H
	DD	022H
	DD	023H
	DD	024H
	DD	025H
	DD	026H
	DD	027H
	DD	028H
	DD	029H
	DD	02aH
	DD	02bH
	DD	02cH
	DD	02dH
	DD	02eH
	DD	02fH
	DD	030H
	DD	031H
	DD	032H
	DD	037H
	DD	03cH
	DD	041H
	DD	046H
	DD	04bH
	DD	050H
	DD	055H
	DD	05aH
	DD	05fH
	DD	064H
	DD	069H
	DD	06eH
	DD	073H
	DD	078H
	DD	064H
	DD	078H
	DD	08cH
	DD	0a0H
	DD	0b4H
	DD	0c8H
	DD	0e1H
	DD	0faH
	DD	012cH
	DD	015eH
	DD	012cH
	DD	0190H
	DD	0190H
	DD	0190H
	DD	0190H
_AmbientLightIntensity DD 03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	09H
	DD	0aH
	DD	0bH
	DD	0cH
	DD	0dH
	DD	0eH
	DD	0fH
	DD	010H
	DD	011H
	DD	012H
	DD	013H
	DD	014H
	DD	015H
	DD	016H
	DD	017H
	DD	018H
	DD	019H
	DD	01aH
	DD	01bH
	DD	01cH
	DD	01dH
	DD	01eH
	DD	01fH
	DD	020H
	DD	021H
	DD	022H
	DD	023H
	DD	024H
	DD	025H
	DD	026H
	DD	027H
	DD	028H
	DD	029H
	DD	02aH
	DD	02bH
	DD	02cH
	DD	02dH
	DD	02eH
	DD	02fH
	DD	030H
	DD	031H
	DD	032H
	DD	033H
	DD	034H
	DD	035H
	DD	036H
	DD	037H
	DD	038H
	DD	039H
	DD	03aH
	DD	03bH
	DD	03cH
	DD	03dH
	DD	03eH
	DD	03fH
	DD	040H
	DD	041H
	DD	042H
	DD	043H
	DD	044H
	DD	045H
	DD	046H
	DD	047H
	DD	048H
	DD	049H
	DD	04aH
	DD	04cH
	DD	04eH
	DD	050H
	DD	052H
	DD	054H
	DD	056H
	DD	05aH
	DD	05fH
	DD	064H
	DD	06eH
	DD	078H
	DD	082H
	DD	08cH
	DD	096H
	DD	0a0H
	DD	0b4H
	DD	0c8H
	DD	0e1H
	DD	0faH
	DD	0113H
	DD	012cH
	DD	0145H
	DD	015eH
	DD	0177H
	DD	0190H
	DD	01c2H
	DD	01f4H
	DD	0ffffH
CONST	ENDS
PUBLIC	_CenterOn
PUBLIC	_Level1On
PUBLIC	_Level2On
PUBLIC	_Level3On
PUBLIC	_Level3Off
PUBLIC	_Level2Off
PUBLIC	_Level1Off
PUBLIC	_CenterOff
PUBLIC	_SetTachLEDs
EXTRN	_vehicleData:BYTE
EXTRN	_unsavedSysData:BYTE
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
	ALIGN	4

_LEDUpdatesSuspended DD 01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\duii\duii\ledhandler.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _SetTachLEDs
_TEXT	SEGMENT
_step$ = -8						; size = 4
_rpm$ = 8						; size = 4
_SetTachLEDs PROC					; COMDAT
; Line 300
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 303
	cmp	DWORD PTR _LEDUpdatesSuspended, 0
	jne	SHORT $LN11@SetTachLED
	cmp	DWORD PTR _unsavedSysData+136, 0
	jne	SHORT $LN12@SetTachLED
$LN11@SetTachLED:
; Line 304
	jmp	$LN13@SetTachLED
$LN12@SetTachLED:
; Line 306
	mov	eax, DWORD PTR _rpm$[ebp]
	cmp	eax, DWORD PTR _vehicleData+32
	jge	SHORT $LN10@SetTachLED
; Line 309
	call	_CenterOff
; Line 310
	call	_Level1Off
; Line 311
	call	_Level2Off
; Line 312
	call	_Level3Off
	jmp	$LN13@SetTachLED
$LN10@SetTachLED:
; Line 318
	mov	eax, DWORD PTR _vehicleData+36
	sub	eax, DWORD PTR _vehicleData+32
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _step$[ebp], eax
	mov	edx, DWORD PTR _vehicleData+32
	add	edx, DWORD PTR _step$[ebp]
	cmp	DWORD PTR _rpm$[ebp], edx
	jge	SHORT $LN8@SetTachLED
; Line 321
	call	_CenterOff
; Line 322
	call	_Level1Off
; Line 323
	call	_Level2Off
; Line 324
	call	_Level3On
	jmp	$LN13@SetTachLED
$LN8@SetTachLED:
; Line 330
	mov	eax, DWORD PTR _step$[ebp]
	mov	ecx, DWORD PTR _vehicleData+32
	lea	edx, DWORD PTR [ecx+eax*2]
	cmp	DWORD PTR _rpm$[ebp], edx
	jge	SHORT $LN6@SetTachLED
; Line 333
	call	_CenterOff
; Line 334
	call	_Level1Off
; Line 335
	call	_Level2On
; Line 336
	call	_Level3On
	jmp	SHORT $LN13@SetTachLED
$LN6@SetTachLED:
; Line 342
	mov	eax, DWORD PTR _rpm$[ebp]
	cmp	eax, DWORD PTR _vehicleData+36
	jge	SHORT $LN4@SetTachLED
; Line 345
	call	_CenterOff
; Line 346
	call	_Level1On
; Line 347
	call	_Level2On
; Line 348
	call	_Level3On
	jmp	SHORT $LN13@SetTachLED
$LN4@SetTachLED:
; Line 354
	mov	eax, DWORD PTR _vehicleData+36
	add	eax, DWORD PTR _step$[ebp]
	cmp	DWORD PTR _rpm$[ebp], eax
	jge	SHORT $LN2@SetTachLED
; Line 358
	push	0
	call	_CenterOn
	add	esp, 4
; Line 359
	call	_Level1On
; Line 360
	call	_Level2On
; Line 361
	call	_Level3On
; Line 367
	jmp	SHORT $LN13@SetTachLED
$LN2@SetTachLED:
; Line 370
	push	1
	call	_CenterOn
	add	esp, 4
; Line 371
	call	_Level1On
; Line 372
	call	_Level2On
; Line 373
	call	_Level3On
$LN13@SetTachLED:
; Line 378
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SetTachLEDs ENDP
_TEXT	ENDS
EXTRN	_GUI_GetTime:PROC
EXTRN	_SIM_HARDKEY_SetState:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _CenterOn
_TEXT	SEGMENT
_currentLEDTime$19933 = -8				; size = 4
_state$ = 8						; size = 4
_CenterOn PROC						; COMDAT
; Line 383
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 384
	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN8@CenterOn
; Line 386
	cmp	DWORD PTR _centerOn, 0
	jne	SHORT $LN7@CenterOn
; Line 388
	push	1
	push	0
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 389
	mov	DWORD PTR _centerLEDMarkTime, 0
$LN7@CenterOn:
; Line 392
	jmp	SHORT $LN6@CenterOn
$LN8@CenterOn:
; Line 396
	cmp	DWORD PTR _centerLEDMarkTime, 0
	jne	SHORT $LN5@CenterOn
; Line 398
	call	_GUI_GetTime
	mov	DWORD PTR _centerLEDMarkTime, eax
; Line 399
	push	0
	push	0
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 401
	jmp	SHORT $LN6@CenterOn
$LN5@CenterOn:
; Line 405
	call	_GUI_GetTime
	mov	DWORD PTR _currentLEDTime$19933[ebp], eax
; Line 406
	mov	eax, DWORD PTR _currentLEDTime$19933[ebp]
	sub	eax, DWORD PTR _centerLEDMarkTime
	cmp	eax, 250				; 000000faH
	jle	SHORT $LN3@CenterOn
; Line 408
	push	0
	push	0
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 409
	mov	eax, DWORD PTR _centerLEDMarkTime
	add	eax, 250				; 000000faH
	mov	DWORD PTR _centerLEDMarkTime, eax
	jmp	SHORT $LN6@CenterOn
$LN3@CenterOn:
; Line 411
	mov	eax, DWORD PTR _currentLEDTime$19933[ebp]
	sub	eax, DWORD PTR _centerLEDMarkTime
	cmp	eax, 125				; 0000007dH
	jle	SHORT $LN6@CenterOn
; Line 413
	push	1
	push	0
	call	_SIM_HARDKEY_SetState
	add	esp, 8
$LN6@CenterOn:
; Line 418
	mov	DWORD PTR _centerOn, 1
; Line 419
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CenterOn ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _Level1On
_TEXT	SEGMENT
_Level1On PROC						; COMDAT
; Line 421
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 422
	cmp	DWORD PTR _level1On, 0
	jne	SHORT $LN2@Level1On
; Line 424
	push	1
	push	1
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 425
	push	1
	push	2
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 426
	mov	DWORD PTR _level1On, 1
$LN2@Level1On:
; Line 428
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Level1On ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _Level2On
_TEXT	SEGMENT
_Level2On PROC						; COMDAT
; Line 430
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 431
	cmp	DWORD PTR _level2On, 0
	jne	SHORT $LN2@Level2On
; Line 433
	push	1
	push	3
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 434
	push	1
	push	4
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 435
	mov	DWORD PTR _level2On, 1
$LN2@Level2On:
; Line 437
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Level2On ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _Level3On
_TEXT	SEGMENT
_Level3On PROC						; COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	cmp	DWORD PTR _level3On, 0
	jne	SHORT $LN2@Level3On
; Line 442
	push	1
	push	5
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 443
	push	1
	push	6
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 444
	mov	DWORD PTR _level3On, 1
$LN2@Level3On:
; Line 446
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Level3On ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _Level3Off
_TEXT	SEGMENT
_Level3Off PROC						; COMDAT
; Line 448
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 449
	cmp	DWORD PTR _level3On, 0
	je	SHORT $LN2@Level3Off
; Line 451
	push	0
	push	5
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 452
	push	0
	push	6
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 453
	mov	DWORD PTR _level3On, 0
$LN2@Level3Off:
; Line 455
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Level3Off ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _Level2Off
_TEXT	SEGMENT
_Level2Off PROC						; COMDAT
; Line 457
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 458
	cmp	DWORD PTR _level2On, 0
	je	SHORT $LN2@Level2Off
; Line 460
	push	0
	push	3
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 461
	push	0
	push	4
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 462
	mov	DWORD PTR _level2On, 0
$LN2@Level2Off:
; Line 464
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Level2Off ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _Level1Off
_TEXT	SEGMENT
_Level1Off PROC						; COMDAT
; Line 466
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 467
	cmp	DWORD PTR _level1On, 0
	je	SHORT $LN2@Level1Off
; Line 469
	push	0
	push	1
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 470
	push	0
	push	2
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 471
	mov	DWORD PTR _level1On, 0
$LN2@Level1Off:
; Line 473
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Level1Off ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _CenterOff
_TEXT	SEGMENT
_CenterOff PROC						; COMDAT
; Line 475
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 476
	cmp	DWORD PTR _centerOn, 0
	je	SHORT $LN2@CenterOff
; Line 478
	push	0
	push	0
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 479
	mov	DWORD PTR _centerOn, 0
; Line 480
	mov	DWORD PTR _centerLEDMarkTime, 0
$LN2@CenterOff:
; Line 482
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CenterOff ENDP
_TEXT	ENDS
PUBLIC	_WarningLEDOff
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WarningLEDOff
_TEXT	SEGMENT
_pLED$ = 8						; size = 4
_override$ = 12						; size = 4
_WarningLEDOff PROC					; COMDAT
; Line 491
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 492
	cmp	DWORD PTR _LEDUpdatesSuspended, 0
	je	SHORT $LN2@WarningLED
	cmp	DWORD PTR _override$[ebp], 0
	jne	SHORT $LN2@WarningLED
; Line 493
	jmp	SHORT $LN3@WarningLED
$LN2@WarningLED:
; Line 495
	mov	eax, DWORD PTR _pLED$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@WarningLED
; Line 497
	mov	eax, DWORD PTR _pLED$[ebp]
	mov	DWORD PTR [eax], 0
; Line 498
	mov	eax, DWORD PTR _pLED$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 499
	mov	eax, DWORD PTR _pLED$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 502
	push	0
	mov	eax, DWORD PTR _pLED$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_SIM_HARDKEY_SetState
	add	esp, 8
$LN3@WarningLED:
; Line 507
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WarningLEDOff ENDP
_TEXT	ENDS
PUBLIC	_WarningLEDOn
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WarningLEDOn
_TEXT	SEGMENT
_currentLEDTime$ = -8					; size = 4
_pLED$ = 8						; size = 4
_override$ = 12						; size = 4
_WarningLEDOn PROC					; COMDAT
; Line 511
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 514
	cmp	DWORD PTR _LEDUpdatesSuspended, 0
	je	SHORT $LN9@WarningLED@2
	cmp	DWORD PTR _override$[ebp], 0
	jne	SHORT $LN9@WarningLED@2
; Line 515
	jmp	$LN10@WarningLED@2
$LN9@WarningLED@2:
; Line 517
	mov	eax, DWORD PTR _pLED$[ebp]
	mov	DWORD PTR [eax], 1
; Line 519
	mov	eax, DWORD PTR _pLED$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@WarningLED@2
; Line 521
	call	_GUI_GetTime
	mov	ecx, DWORD PTR _pLED$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 523
	push	1
	mov	eax, DWORD PTR _pLED$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 528
	jmp	$LN10@WarningLED@2
$LN8@WarningLED@2:
; Line 533
	call	_GUI_GetTime
	mov	DWORD PTR _currentLEDTime$[ebp], eax
; Line 534
	mov	eax, DWORD PTR _pLED$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN6@WarningLED@2
; Line 535
	mov	eax, DWORD PTR _pLED$[ebp]
	mov	ecx, DWORD PTR _currentLEDTime$[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN5@WarningLED@2
$LN6@WarningLED@2:
; Line 536
	mov	eax, DWORD PTR _pLED$[ebp]
	mov	ecx, DWORD PTR _currentLEDTime$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	cmp	ecx, 5000				; 00001388H
	jle	SHORT $LN5@WarningLED@2
; Line 540
	push	1
	mov	eax, DWORD PTR _pLED$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 544
	jmp	SHORT $LN10@WarningLED@2
$LN5@WarningLED@2:
; Line 548
	mov	eax, DWORD PTR _pLED$[ebp]
	mov	ecx, DWORD PTR _currentLEDTime$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	cmp	ecx, 250				; 000000faH
	jle	SHORT $LN3@WarningLED@2
; Line 551
	push	1
	mov	eax, DWORD PTR _pLED$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 555
	mov	eax, DWORD PTR _pLED$[ebp]
	mov	ecx, DWORD PTR _currentLEDTime$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN10@WarningLED@2
$LN3@WarningLED@2:
; Line 557
	mov	eax, DWORD PTR _pLED$[ebp]
	mov	ecx, DWORD PTR _currentLEDTime$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	cmp	ecx, 125				; 0000007dH
	jle	SHORT $LN10@WarningLED@2
; Line 560
	push	0
	mov	eax, DWORD PTR _pLED$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_SIM_HARDKEY_SetState
	add	esp, 8
$LN10@WarningLED@2:
; Line 566
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WarningLEDOn ENDP
_TEXT	ENDS
PUBLIC	_InAlarm
EXTRN	_GetValue:PROC
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _InAlarm
_TEXT	SEGMENT
tv94 = -264						; size = 4
tv83 = -264						; size = 4
$T20289 = -256						; size = 8
$T20294 = -240						; size = 8
_tempint$19994 = -32					; size = 4
_tempfloat$19987 = -20					; size = 4
_alarm$ = -8						; size = 4
_datapoint$ = 8						; size = 4
_InAlarm PROC						; COMDAT
; Line 572
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 573
	mov	DWORD PTR _alarm$[ebp], 0
; Line 575
	cmp	DWORD PTR _datapoint$[ebp], 0
	jl	$LN8@InAlarm
	cmp	DWORD PTR _datapoint$[ebp], 3
	jg	$LN8@InAlarm
; Line 576
	mov	eax, DWORD PTR _datapoint$[ebp]
	add	eax, 54					; 00000036H
	push	eax
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T20289[ebp], eax
	mov	DWORD PTR $T20289[ebp+4], edx
	fld	DWORD PTR $T20289[ebp]
	fstp	DWORD PTR _tempfloat$19987[ebp]
; Line 578
	mov	eax, DWORD PTR _datapoint$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+147]
	test	ecx, ecx
	je	$LN5@InAlarm
; Line 579
	mov	eax, DWORD PTR _datapoint$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+148]
	cmp	ecx, 2
	jne	SHORT $LN6@InAlarm
; Line 580
	mov	eax, DWORD PTR _datapoint$[ebp]
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+152]
	fcomp	DWORD PTR _tempfloat$19987[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN11@InAlarm
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN12@InAlarm
$LN11@InAlarm:
	mov	DWORD PTR tv83[ebp], 0
$LN12@InAlarm:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _alarm$[ebp], ecx
$LN6@InAlarm:
; Line 581
	mov	eax, DWORD PTR _datapoint$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+149]
	cmp	ecx, 1
	jne	SHORT $LN5@InAlarm
; Line 582
	cmp	DWORD PTR _alarm$[ebp], 0
	jne	SHORT $LN13@InAlarm
	mov	eax, DWORD PTR _datapoint$[ebp]
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+156]
	fcomp	DWORD PTR _tempfloat$19987[ebp]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN13@InAlarm
	mov	DWORD PTR tv94[ebp], 0
	jmp	SHORT $LN14@InAlarm
$LN13@InAlarm:
	mov	DWORD PTR tv94[ebp], 1
$LN14@InAlarm:
	mov	ecx, DWORD PTR tv94[ebp]
	mov	DWORD PTR _alarm$[ebp], ecx
$LN5@InAlarm:
; Line 583
	jmp	SHORT $LN1@InAlarm
$LN8@InAlarm:
; Line 585
	cmp	DWORD PTR _datapoint$[ebp], 4
	jl	SHORT $LN1@InAlarm
	cmp	DWORD PTR _datapoint$[ebp], 5
	jg	SHORT $LN1@InAlarm
; Line 586
	mov	eax, DWORD PTR _datapoint$[ebp]
	add	eax, 54					; 00000036H
	push	eax
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T20294[ebp], eax
	mov	DWORD PTR $T20294[ebp+4], edx
	mov	ecx, DWORD PTR $T20294[ebp]
	mov	DWORD PTR _tempint$19994[ebp], ecx
; Line 588
	mov	eax, DWORD PTR _datapoint$[ebp]
	sub	eax, 4
	imul	eax, 47					; 0000002fH
	movzx	ecx, BYTE PTR _vehicleData[eax+419]
	test	ecx, ecx
	je	SHORT $LN1@InAlarm
; Line 589
	mov	eax, DWORD PTR _datapoint$[ebp]
	sub	eax, 4
	imul	eax, 47					; 0000002fH
	movsx	ecx, BYTE PTR _vehicleData[eax+420]
	cmp	DWORD PTR _tempint$19994[ebp], ecx
	jne	SHORT $LN1@InAlarm
; Line 590
	mov	DWORD PTR _alarm$[ebp], 1
$LN1@InAlarm:
; Line 594
	mov	eax, DWORD PTR _alarm$[ebp]
; Line 595
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_InAlarm ENDP
_TEXT	ENDS
PUBLIC	_CheckWarningPopups
PUBLIC	_SetWarningLED
EXTRN	_AnyGaugeScreen:PROC
EXTRN	_GetScreenType:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SetWarningLED
_TEXT	SEGMENT
_lowerledon$ = -29					; size = 1
_upperledon$ = -17					; size = 1
_iopoint$ = -8						; size = 4
_type$ = 8						; size = 4
_value$ = 12						; size = 4
_SetWarningLED PROC					; COMDAT
; Line 602
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 604
	mov	BYTE PTR _upperledon$[ebp], 0
; Line 605
	mov	BYTE PTR _lowerledon$[ebp], 0
; Line 607
	cmp	DWORD PTR _LEDUpdatesSuspended, 0
	jne	SHORT $LN32@SetWarning
	cmp	DWORD PTR _unsavedSysData+136, 0
	jne	SHORT $LN33@SetWarning
$LN32@SetWarning:
; Line 608
	jmp	$LN34@SetWarning
$LN33@SetWarning:
; Line 610
	mov	DWORD PTR _iopoint$[ebp], 0
	jmp	SHORT $LN31@SetWarning
$LN30@SetWarning:
	mov	eax, DWORD PTR _iopoint$[ebp]
	add	eax, 1
	mov	DWORD PTR _iopoint$[ebp], eax
$LN31@SetWarning:
	cmp	DWORD PTR _iopoint$[ebp], 4
	jge	$LN29@SetWarning
; Line 611
	cmp	DWORD PTR _type$[ebp], 2
	je	SHORT $LN28@SetWarning
; Line 612
	mov	eax, DWORD PTR _iopoint$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+180]
	test	ecx, ecx
	je	SHORT $LN28@SetWarning
; Line 613
	mov	eax, DWORD PTR _iopoint$[ebp]
	push	eax
	call	_InAlarm
	add	esp, 4
	test	eax, eax
	je	SHORT $LN26@SetWarning
; Line 615
	mov	BYTE PTR _upperledon$[ebp], 1
; Line 616
	mov	eax, DWORD PTR _iopoint$[ebp]
	mov	BYTE PTR _AlarmTriggerCause[eax], 1
; Line 619
	mov	eax, DWORD PTR _iopoint$[ebp]
	cmp	DWORD PTR _upperLEDOnReason[eax*4], 0
	jne	SHORT $LN25@SetWarning
; Line 622
	mov	DWORD PTR _UpperLED+8, 0
; Line 623
	mov	eax, DWORD PTR _iopoint$[ebp]
	mov	DWORD PTR _upperLEDOnReason[eax*4], 1
$LN25@SetWarning:
; Line 626
	jmp	SHORT $LN28@SetWarning
$LN26@SetWarning:
; Line 628
	mov	eax, DWORD PTR _iopoint$[ebp]
	mov	BYTE PTR _AlarmTriggerCause[eax], 0
; Line 629
	mov	eax, DWORD PTR _iopoint$[ebp]
	mov	DWORD PTR _upperLEDOnReason[eax*4], 0
$LN28@SetWarning:
; Line 632
	cmp	DWORD PTR _type$[ebp], 1
	je	SHORT $LN23@SetWarning
; Line 633
	mov	eax, DWORD PTR _iopoint$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+181]
	test	ecx, ecx
	je	SHORT $LN23@SetWarning
; Line 634
	mov	eax, DWORD PTR _iopoint$[ebp]
	push	eax
	call	_InAlarm
	add	esp, 4
	test	eax, eax
	je	SHORT $LN21@SetWarning
; Line 636
	mov	BYTE PTR _lowerledon$[ebp], 1
; Line 637
	mov	eax, DWORD PTR _iopoint$[ebp]
	mov	BYTE PTR _AlarmTriggerCause[eax+6], 1
; Line 640
	mov	eax, DWORD PTR _iopoint$[ebp]
	cmp	DWORD PTR _lowerLEDOnReason[eax*4], 0
	jne	SHORT $LN20@SetWarning
; Line 643
	mov	DWORD PTR _LowerLED+8, 0
; Line 644
	mov	eax, DWORD PTR _iopoint$[ebp]
	mov	DWORD PTR _lowerLEDOnReason[eax*4], 1
$LN20@SetWarning:
; Line 647
	jmp	SHORT $LN23@SetWarning
$LN21@SetWarning:
; Line 649
	mov	eax, DWORD PTR _iopoint$[ebp]
	mov	BYTE PTR _AlarmTriggerCause[eax+6], 0
; Line 650
	mov	eax, DWORD PTR _iopoint$[ebp]
	mov	DWORD PTR _lowerLEDOnReason[eax*4], 0
$LN23@SetWarning:
; Line 652
	jmp	$LN30@SetWarning
$LN29@SetWarning:
; Line 654
	mov	DWORD PTR _iopoint$[ebp], 0
	jmp	SHORT $LN18@SetWarning
$LN17@SetWarning:
	mov	eax, DWORD PTR _iopoint$[ebp]
	add	eax, 1
	mov	DWORD PTR _iopoint$[ebp], eax
$LN18@SetWarning:
	cmp	DWORD PTR _iopoint$[ebp], 2
	jge	$LN16@SetWarning
; Line 655
	cmp	DWORD PTR _type$[ebp], 2
	je	SHORT $LN15@SetWarning
; Line 656
	mov	eax, DWORD PTR _iopoint$[ebp]
	imul	eax, 47					; 0000002fH
	movzx	ecx, BYTE PTR _vehicleData[eax+421]
	test	ecx, ecx
	je	SHORT $LN15@SetWarning
; Line 657
	mov	eax, DWORD PTR _iopoint$[ebp]
	add	eax, 4
	push	eax
	call	_InAlarm
	add	esp, 4
	test	eax, eax
	je	SHORT $LN13@SetWarning
; Line 659
	mov	BYTE PTR _upperledon$[ebp], 1
; Line 660
	mov	eax, DWORD PTR _iopoint$[ebp]
	mov	BYTE PTR _AlarmTriggerCause[eax+4], 1
; Line 663
	mov	eax, DWORD PTR _iopoint$[ebp]
	cmp	DWORD PTR _upperLEDOnReason[eax*4+16], 0
	jne	SHORT $LN12@SetWarning
; Line 666
	mov	DWORD PTR _UpperLED+8, 0
; Line 667
	mov	eax, DWORD PTR _iopoint$[ebp]
	mov	DWORD PTR _upperLEDOnReason[eax*4+16], 1
$LN12@SetWarning:
; Line 670
	jmp	SHORT $LN15@SetWarning
$LN13@SetWarning:
; Line 672
	mov	eax, DWORD PTR _iopoint$[ebp]
	mov	BYTE PTR _AlarmTriggerCause[eax+4], 0
; Line 673
	mov	eax, DWORD PTR _iopoint$[ebp]
	mov	DWORD PTR _upperLEDOnReason[eax*4+16], 0
$LN15@SetWarning:
; Line 676
	cmp	DWORD PTR _type$[ebp], 1
	je	SHORT $LN10@SetWarning
; Line 677
	mov	eax, DWORD PTR _iopoint$[ebp]
	imul	eax, 47					; 0000002fH
	movzx	ecx, BYTE PTR _vehicleData[eax+422]
	test	ecx, ecx
	je	SHORT $LN10@SetWarning
; Line 678
	mov	eax, DWORD PTR _iopoint$[ebp]
	add	eax, 4
	push	eax
	call	_InAlarm
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@SetWarning
; Line 680
	mov	BYTE PTR _lowerledon$[ebp], 1
; Line 681
	mov	eax, DWORD PTR _iopoint$[ebp]
	mov	BYTE PTR _AlarmTriggerCause[eax+10], 1
; Line 684
	mov	eax, DWORD PTR _iopoint$[ebp]
	cmp	DWORD PTR _lowerLEDOnReason[eax*4+16], 0
	jne	SHORT $LN7@SetWarning
; Line 687
	mov	DWORD PTR _LowerLED+8, 0
; Line 688
	mov	eax, DWORD PTR _iopoint$[ebp]
	mov	DWORD PTR _lowerLEDOnReason[eax*4+16], 1
$LN7@SetWarning:
; Line 691
	jmp	SHORT $LN10@SetWarning
$LN8@SetWarning:
; Line 693
	mov	eax, DWORD PTR _iopoint$[ebp]
	mov	BYTE PTR _AlarmTriggerCause[eax+10], 0
; Line 694
	mov	eax, DWORD PTR _iopoint$[ebp]
	mov	DWORD PTR _lowerLEDOnReason[eax*4+16], 0
$LN10@SetWarning:
; Line 696
	jmp	$LN17@SetWarning
$LN16@SetWarning:
; Line 698
	movzx	eax, BYTE PTR _upperledon$[ebp]
	test	eax, eax
	je	SHORT $LN5@SetWarning
; Line 700
	push	0
	push	OFFSET _UpperLED
	call	_WarningLEDOn
	add	esp, 8
; Line 701
	mov	BYTE PTR _WarningPopups, 1
; Line 703
	jmp	SHORT $LN4@SetWarning
$LN5@SetWarning:
; Line 705
	push	0
	push	OFFSET _UpperLED
	call	_WarningLEDOff
	add	esp, 8
; Line 706
	mov	BYTE PTR _WarningPopups, 0
$LN4@SetWarning:
; Line 709
	movzx	eax, BYTE PTR _lowerledon$[ebp]
	test	eax, eax
	je	SHORT $LN3@SetWarning
; Line 711
	push	0
	push	OFFSET _LowerLED
	call	_WarningLEDOn
	add	esp, 8
; Line 712
	mov	BYTE PTR _WarningPopups+2, 1
; Line 714
	jmp	SHORT $LN2@SetWarning
$LN3@SetWarning:
; Line 716
	push	0
	push	OFFSET _LowerLED
	call	_WarningLEDOff
	add	esp, 8
; Line 717
	mov	BYTE PTR _WarningPopups+2, 0
$LN2@SetWarning:
; Line 720
	call	_GetScreenType
	push	eax
	call	_AnyGaugeScreen
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN34@SetWarning
; Line 721
	call	_CheckWarningPopups
$LN34@SetWarning:
; Line 722
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SetWarningLED ENDP
_TEXT	ENDS
PUBLIC	_SuspendEnvironmentalUpdates
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SuspendEnvironmentalUpdates
_TEXT	SEGMENT
_SuspendEnvironmentalUpdates PROC			; COMDAT
; Line 728
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 729
	mov	DWORD PTR _EnvironmentalUpdatesSuspended, 1
; Line 733
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SuspendEnvironmentalUpdates ENDP
_TEXT	ENDS
PUBLIC	_ResumeEnvironmentalUpdates
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ResumeEnvironmentalUpdates
_TEXT	SEGMENT
_ResumeEnvironmentalUpdates PROC			; COMDAT
; Line 735
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 736
	mov	DWORD PTR _EnvironmentalUpdatesSuspended, 0
; Line 737
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ResumeEnvironmentalUpdates ENDP
_TEXT	ENDS
PUBLIC	_AutoAdjustOn
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _AutoAdjustOn
_TEXT	SEGMENT
_state$ = 8						; size = 1
_AutoAdjustOn PROC					; COMDAT
; Line 743
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 751
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_AutoAdjustOn ENDP
_TEXT	ENDS
PUBLIC	_GetNormalizedLightIntensity
PUBLIC	_RecordAmbientLight
EXTRN	_sysData:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _RecordAmbientLight
_TEXT	SEGMENT
_RecordAmbientLight PROC				; COMDAT
; Line 757
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 758
	call	_GetNormalizedLightIntensity
	mov	DWORD PTR _sysData+116, eax
; Line 759
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_RecordAmbientLight ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _GetNormalizedLightIntensity
_TEXT	SEGMENT
_GetNormalizedLightIntensity PROC			; COMDAT
; Line 762
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 764
	mov	eax, 50					; 00000032H
; Line 777
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GetNormalizedLightIntensity ENDP
_TEXT	ENDS
PUBLIC	_SuspendLEDUpdates
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SuspendLEDUpdates
_TEXT	SEGMENT
_lightsOn$ = 8						; size = 1
_SuspendLEDUpdates PROC					; COMDAT
; Line 783
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 784
	movzx	eax, BYTE PTR _lightsOn$[ebp]
	test	eax, eax
	je	SHORT $LN1@SuspendLED
; Line 787
	push	0
	call	_CenterOn
	add	esp, 4
; Line 788
	call	_Level1On
; Line 789
	call	_Level2On
; Line 790
	call	_Level3On
; Line 791
	push	1
	mov	eax, DWORD PTR _UpperLED+12
	push	eax
	call	_SIM_HARDKEY_SetState
	add	esp, 8
; Line 792
	push	1
	mov	eax, DWORD PTR _LowerLED+12
	push	eax
	call	_SIM_HARDKEY_SetState
	add	esp, 8
$LN1@SuspendLED:
; Line 799
	mov	DWORD PTR _LEDUpdatesSuspended, 1
; Line 800
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SuspendLEDUpdates ENDP
_TEXT	ENDS
PUBLIC	_ResumeLEDUpdates
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ResumeLEDUpdates
_TEXT	SEGMENT
_ResumeLEDUpdates PROC					; COMDAT
; Line 806
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 807
	call	_RecordAmbientLight
; Line 812
	mov	DWORD PTR _LEDUpdatesSuspended, 0
; Line 814
	cmp	DWORD PTR _UpperLED, 0
	je	SHORT $LN4@ResumeLEDU
; Line 815
	push	1
	push	8
	call	_SIM_HARDKEY_SetState
	add	esp, 8
	jmp	SHORT $LN3@ResumeLEDU
$LN4@ResumeLEDU:
; Line 816
	push	0
	push	8
	call	_SIM_HARDKEY_SetState
	add	esp, 8
$LN3@ResumeLEDU:
; Line 817
	cmp	DWORD PTR _LowerLED, 0
	je	SHORT $LN2@ResumeLEDU
; Line 818
	push	1
	push	9
	call	_SIM_HARDKEY_SetState
	add	esp, 8
	jmp	SHORT $LN5@ResumeLEDU
$LN2@ResumeLEDU:
; Line 819
	push	0
	push	9
	call	_SIM_HARDKEY_SetState
	add	esp, 8
$LN5@ResumeLEDU:
; Line 830
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ResumeLEDUpdates ENDP
_TEXT	ENDS
PUBLIC	_TurnOffLEDs
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _TurnOffLEDs
_TEXT	SEGMENT
_TurnOffLEDs PROC					; COMDAT
; Line 836
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 838
	call	_CenterOff
; Line 839
	call	_Level1Off
; Line 840
	call	_Level2Off
; Line 841
	call	_Level3Off
; Line 845
	push	1
	push	OFFSET _LowerLED
	call	_WarningLEDOff
	add	esp, 8
; Line 846
	push	1
	push	OFFSET _UpperLED
	call	_WarningLEDOff
	add	esp, 8
; Line 847
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TurnOffLEDs ENDP
_TEXT	ENDS
PUBLIC	_LEDSystemShutdown
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _LEDSystemShutdown
_TEXT	SEGMENT
_LEDSystemShutdown PROC					; COMDAT
; Line 853
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 854
	call	_SuspendEnvironmentalUpdates
; Line 855
	call	_TurnOffLEDs
; Line 861
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LEDSystemShutdown ENDP
_TEXT	ENDS
PUBLIC	__real@43b40000
PUBLIC	__real@c1a00000
PUBLIC	__real@43c20000
PUBLIC	__real@c1e00000
PUBLIC	__real@43dc0000
PUBLIC	__real@43eb0000
PUBLIC	__real@c1f00000
PUBLIC	__real@40400000
PUBLIC	__real@43f78000
PUBLIC	__real@c1c80000
PUBLIC	__real@40000000
PUBLIC	__real@44098000
PUBLIC	__real@c25c0000
PUBLIC	__real@441b0000
PUBLIC	__real@c28c0000
PUBLIC	__real@44280000
PUBLIC	__real@c2500000
PUBLIC	__real@40a00000
PUBLIC	_CalculateTempCorrection
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@c1a00000
CONST	SEGMENT
__real@c1a00000 DD 0c1a00000r			; -20
CONST	ENDS
;	COMDAT __real@43c20000
CONST	SEGMENT
__real@43c20000 DD 043c20000r			; 388
CONST	ENDS
;	COMDAT __real@c1e00000
CONST	SEGMENT
__real@c1e00000 DD 0c1e00000r			; -28
CONST	ENDS
;	COMDAT __real@43dc0000
CONST	SEGMENT
__real@43dc0000 DD 043dc0000r			; 440
CONST	ENDS
;	COMDAT __real@43eb0000
CONST	SEGMENT
__real@43eb0000 DD 043eb0000r			; 470
CONST	ENDS
;	COMDAT __real@c1f00000
CONST	SEGMENT
__real@c1f00000 DD 0c1f00000r			; -30
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@43f78000
CONST	SEGMENT
__real@43f78000 DD 043f78000r			; 495
CONST	ENDS
;	COMDAT __real@c1c80000
CONST	SEGMENT
__real@c1c80000 DD 0c1c80000r			; -25
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@44098000
CONST	SEGMENT
__real@44098000 DD 044098000r			; 550
CONST	ENDS
;	COMDAT __real@c25c0000
CONST	SEGMENT
__real@c25c0000 DD 0c25c0000r			; -55
CONST	ENDS
;	COMDAT __real@441b0000
CONST	SEGMENT
__real@441b0000 DD 0441b0000r			; 620
CONST	ENDS
;	COMDAT __real@c28c0000
CONST	SEGMENT
__real@c28c0000 DD 0c28c0000r			; -70
CONST	ENDS
;	COMDAT __real@44280000
CONST	SEGMENT
__real@44280000 DD 044280000r			; 672
CONST	ENDS
;	COMDAT __real@c2500000
CONST	SEGMENT
__real@c2500000 DD 0c2500000r			; -52
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _CalculateTempCorrection
_TEXT	SEGMENT
tv171 = -220						; size = 4
tv168 = -220						; size = 4
tv165 = -220						; size = 4
tv162 = -220						; size = 4
tv159 = -220						; size = 4
tv156 = -220						; size = 4
tv153 = -220						; size = 4
tv150 = -220						; size = 4
_interpolatedValue$ = -20				; size = 4
_calTemp$ = -8						; size = 4
_CalculateTempCorrection PROC				; COMDAT
; Line 870
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 871
	mov	eax, DWORD PTR _sysData+216
	mov	DWORD PTR _calTemp$[ebp], eax
; Line 875
	cmp	DWORD PTR _calTemp$[ebp], 15		; 0000000fH
	jg	SHORT $LN18@CalculateT
; Line 876
	xor	eax, eax
	jmp	$LN19@CalculateT
	jmp	$LN1@CalculateT
$LN18@CalculateT:
; Line 878
	cmp	DWORD PTR _calTemp$[ebp], 20		; 00000014H
	jge	SHORT $LN16@CalculateT
; Line 879
	mov	eax, DWORD PTR _calTemp$[ebp]
	sub	eax, 15					; 0000000fH
	mov	DWORD PTR tv150[ebp], eax
	fild	DWORD PTR tv150[ebp]
	fdiv	DWORD PTR __real@40a00000
	fmul	DWORD PTR __real@c2500000
	fadd	DWORD PTR __real@44280000
	fstp	DWORD PTR _interpolatedValue$[ebp]
	jmp	$LN1@CalculateT
$LN16@CalculateT:
; Line 880
	cmp	DWORD PTR _calTemp$[ebp], 25		; 00000019H
	jge	SHORT $LN14@CalculateT
; Line 881
	mov	eax, DWORD PTR _calTemp$[ebp]
	sub	eax, 20					; 00000014H
	mov	DWORD PTR tv153[ebp], eax
	fild	DWORD PTR tv153[ebp]
	fdiv	DWORD PTR __real@40a00000
	fmul	DWORD PTR __real@c28c0000
	fadd	DWORD PTR __real@441b0000
	fstp	DWORD PTR _interpolatedValue$[ebp]
	jmp	$LN1@CalculateT
$LN14@CalculateT:
; Line 882
	cmp	DWORD PTR _calTemp$[ebp], 30		; 0000001eH
	jge	SHORT $LN12@CalculateT
; Line 883
	mov	eax, DWORD PTR _calTemp$[ebp]
	sub	eax, 25					; 00000019H
	mov	DWORD PTR tv156[ebp], eax
	fild	DWORD PTR tv156[ebp]
	fdiv	DWORD PTR __real@40a00000
	fmul	DWORD PTR __real@c25c0000
	fadd	DWORD PTR __real@44098000
	fstp	DWORD PTR _interpolatedValue$[ebp]
	jmp	$LN1@CalculateT
$LN12@CalculateT:
; Line 884
	cmp	DWORD PTR _calTemp$[ebp], 32		; 00000020H
	jge	SHORT $LN10@CalculateT
; Line 885
	mov	eax, DWORD PTR _calTemp$[ebp]
	sub	eax, 30					; 0000001eH
	mov	DWORD PTR tv159[ebp], eax
	fild	DWORD PTR tv159[ebp]
	fdiv	DWORD PTR __real@40000000
	fmul	DWORD PTR __real@c1c80000
	fadd	DWORD PTR __real@43f78000
	fstp	DWORD PTR _interpolatedValue$[ebp]
	jmp	$LN1@CalculateT
$LN10@CalculateT:
; Line 886
	cmp	DWORD PTR _calTemp$[ebp], 35		; 00000023H
	jge	SHORT $LN8@CalculateT
; Line 887
	mov	eax, DWORD PTR _calTemp$[ebp]
	sub	eax, 32					; 00000020H
	mov	DWORD PTR tv162[ebp], eax
	fild	DWORD PTR tv162[ebp]
	fdiv	DWORD PTR __real@40400000
	fmul	DWORD PTR __real@c1f00000
	fadd	DWORD PTR __real@43eb0000
	fstp	DWORD PTR _interpolatedValue$[ebp]
	jmp	$LN1@CalculateT
$LN8@CalculateT:
; Line 888
	cmp	DWORD PTR _calTemp$[ebp], 40		; 00000028H
	jge	SHORT $LN6@CalculateT
; Line 889
	mov	eax, DWORD PTR _calTemp$[ebp]
	sub	eax, 35					; 00000023H
	mov	DWORD PTR tv165[ebp], eax
	fild	DWORD PTR tv165[ebp]
	fdiv	DWORD PTR __real@40a00000
	fmul	DWORD PTR __real@c2500000
	fadd	DWORD PTR __real@43dc0000
	fstp	DWORD PTR _interpolatedValue$[ebp]
	jmp	SHORT $LN1@CalculateT
$LN6@CalculateT:
; Line 890
	cmp	DWORD PTR _calTemp$[ebp], 45		; 0000002dH
	jge	SHORT $LN4@CalculateT
; Line 891
	mov	eax, DWORD PTR _calTemp$[ebp]
	sub	eax, 40					; 00000028H
	mov	DWORD PTR tv168[ebp], eax
	fild	DWORD PTR tv168[ebp]
	fdiv	DWORD PTR __real@40a00000
	fmul	DWORD PTR __real@c1e00000
	fadd	DWORD PTR __real@43c20000
	fstp	DWORD PTR _interpolatedValue$[ebp]
	jmp	SHORT $LN1@CalculateT
$LN4@CalculateT:
; Line 892
	cmp	DWORD PTR _calTemp$[ebp], 50		; 00000032H
	jge	SHORT $LN2@CalculateT
; Line 893
	mov	eax, DWORD PTR _calTemp$[ebp]
	sub	eax, 45					; 0000002dH
	mov	DWORD PTR tv171[ebp], eax
	fild	DWORD PTR tv171[ebp]
	fdiv	DWORD PTR __real@40a00000
	fmul	DWORD PTR __real@c1a00000
	fadd	DWORD PTR __real@43b40000
	fstp	DWORD PTR _interpolatedValue$[ebp]
; Line 894
	jmp	SHORT $LN1@CalculateT
$LN2@CalculateT:
; Line 895
	xor	eax, eax
	jmp	SHORT $LN19@CalculateT
$LN1@CalculateT:
; Line 897
	fld	DWORD PTR _interpolatedValue$[ebp]
	call	__ftol2_sse
	sub	eax, DWORD PTR _sysData+220
$LN19@CalculateT:
; Line 898
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CalculateTempCorrection ENDP
_TEXT	ENDS
PUBLIC	_InitializeLEDStructures
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _InitializeLEDStructures
_TEXT	SEGMENT
_InitializeLEDStructures PROC				; COMDAT
; Line 1149
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1151
	mov	DWORD PTR _UpperLED, 0
; Line 1152
	mov	DWORD PTR _UpperLED+8, 0
; Line 1153
	mov	DWORD PTR _LowerLED+8, 0
; Line 1156
	mov	DWORD PTR _UpperLED+12, 8
; Line 1157
	mov	DWORD PTR _LowerLED+12, 9
; Line 1162
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_InitializeLEDStructures ENDP
_TEXT	ENDS
PUBLIC	_InitializeLEDs
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _InitializeLEDs
_TEXT	SEGMENT
_InitializeLEDs PROC					; COMDAT
; Line 1166
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1171
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_InitializeLEDs ENDP
_TEXT	ENDS
PUBLIC	_WarningPopupInit
EXTRN	_BUTTON_SetPressed:PROC
EXTRN	_BUTTON_SetTextColor:PROC
EXTRN	_BUTTON_SetBitmap:PROC
EXTRN	_bmWarningPopupBlank:BYTE
EXTRN	_BUTTON_CreateEx:PROC
EXTRN	_WM_GetDesktopWindow:PROC
_BSS	SEGMENT
_hLowerWarning DD 01H DUP (?)
_hUpperWarning DD 01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT _WarningPopupInit
_TEXT	SEGMENT
_WarningPopupInit PROC					; COMDAT
; Line 1175
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1176
	push	0
	push	0
	push	28					; 0000001cH
	call	_WM_GetDesktopWindow
	push	eax
	push	40					; 00000028H
	push	250					; 000000faH
	push	22					; 00000016H
	push	0
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hUpperWarning, eax
; Line 1177
	push	OFFSET _bmWarningPopupBlank
	push	0
	mov	eax, DWORD PTR _hUpperWarning
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 1179
	push	0
	push	0
	push	28					; 0000001cH
	call	_WM_GetDesktopWindow
	push	eax
	push	40					; 00000028H
	push	250					; 000000faH
	push	62					; 0000003eH
	push	0
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hLowerWarning, eax
; Line 1180
	push	OFFSET _bmWarningPopupBlank
	push	0
	mov	eax, DWORD PTR _hLowerWarning
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 1182
	push	16777215				; 00ffffffH
	push	2
	mov	eax, DWORD PTR _hLowerWarning
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 1183
	push	16777215				; 00ffffffH
	push	2
	mov	eax, DWORD PTR _hUpperWarning
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 1184
	push	1
	mov	eax, DWORD PTR _hUpperWarning
	push	eax
	call	_BUTTON_SetPressed
	add	esp, 8
; Line 1185
	push	1
	mov	eax, DWORD PTR _hLowerWarning
	push	eax
	call	_BUTTON_SetPressed
	add	esp, 8
; Line 1186
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WarningPopupInit ENDP
_TEXT	ENDS
PUBLIC	_DeleteWarningPopup
PUBLIC	_UpdateWarningPopup
PUBLIC	_CreateWarningPopup
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _CheckWarningPopups
_TEXT	SEGMENT
_gaugeScreen$ = -17					; size = 1
_i$ = -5						; size = 1
_CheckWarningPopups PROC				; COMDAT
; Line 1190
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1193
	call	_GetScreenType
	push	eax
	call	_AnyGaugeScreen
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@CheckWarni
; Line 1194
	mov	BYTE PTR _gaugeScreen$[ebp], 1
	jmp	SHORT $LN8@CheckWarni
$LN9@CheckWarni:
; Line 1195
	mov	BYTE PTR _gaugeScreen$[ebp], 0
$LN8@CheckWarni:
; Line 1197
	mov	BYTE PTR _i$[ebp], 0
	jmp	SHORT $LN7@CheckWarni
$LN6@CheckWarni:
	mov	al, BYTE PTR _i$[ebp]
	add	al, 1
	mov	BYTE PTR _i$[ebp], al
$LN7@CheckWarni:
	movzx	eax, BYTE PTR _i$[ebp]
	cmp	eax, 2
	jge	SHORT $LN10@CheckWarni
; Line 1199
	movzx	eax, BYTE PTR _i$[ebp]
	movzx	ecx, BYTE PTR _WarningPopups[eax*2]
	test	ecx, ecx
	je	SHORT $LN4@CheckWarni
; Line 1201
	movzx	eax, BYTE PTR _i$[ebp]
	movzx	ecx, BYTE PTR _WarningPopups[eax*2+1]
	test	ecx, ecx
	jne	SHORT $LN3@CheckWarni
; Line 1202
	movzx	eax, BYTE PTR _i$[ebp]
	push	eax
	call	_CreateWarningPopup
	add	esp, 4
$LN3@CheckWarni:
; Line 1203
	movzx	eax, BYTE PTR _gaugeScreen$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _i$[ebp]
	push	ecx
	call	_UpdateWarningPopup
	add	esp, 8
	jmp	SHORT $LN2@CheckWarni
$LN4@CheckWarni:
; Line 1205
	movzx	eax, BYTE PTR _i$[ebp]
	movzx	ecx, BYTE PTR _WarningPopups[eax*2+1]
	test	ecx, ecx
	je	SHORT $LN2@CheckWarni
; Line 1206
	movzx	eax, BYTE PTR _gaugeScreen$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _i$[ebp]
	push	ecx
	call	_DeleteWarningPopup
	add	esp, 8
$LN2@CheckWarni:
; Line 1207
	jmp	SHORT $LN6@CheckWarni
$LN10@CheckWarni:
; Line 1208
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CheckWarningPopups ENDP
_TEXT	ENDS
EXTRN	_WM_BringToTop:PROC
EXTRN	_WM_ShowWindow:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _CreateWarningPopup
_TEXT	SEGMENT
_i$ = 8							; size = 1
_CreateWarningPopup PROC				; COMDAT
; Line 1212
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1213
	movzx	eax, BYTE PTR _i$[ebp]
	test	eax, eax
	je	SHORT $LN2@CreateWarn
; Line 1215
	mov	eax, DWORD PTR _hLowerWarning
	push	eax
	call	_WM_ShowWindow
	add	esp, 4
; Line 1216
	mov	eax, DWORD PTR _hLowerWarning
	push	eax
	call	_WM_BringToTop
	add	esp, 4
; Line 1218
	jmp	SHORT $LN1@CreateWarn
$LN2@CreateWarn:
; Line 1220
	mov	eax, DWORD PTR _hUpperWarning
	push	eax
	call	_WM_ShowWindow
	add	esp, 4
; Line 1221
	mov	eax, DWORD PTR _hUpperWarning
	push	eax
	call	_WM_BringToTop
	add	esp, 4
$LN1@CreateWarn:
; Line 1224
	movzx	eax, BYTE PTR _i$[ebp]
	mov	BYTE PTR _WarningPopups[eax*2+1], 1
; Line 1225
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CreateWarningPopup ENDP
_TEXT	ENDS
EXTRN	_GUI_ClearRect:PROC
EXTRN	_BUTTON_SetText:PROC
EXTRN	_WM_HideWindow:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DeleteWarningPopup
_TEXT	SEGMENT
_i$ = 8							; size = 1
_gaugeScreen$ = 12					; size = 1
_DeleteWarningPopup PROC				; COMDAT
; Line 1229
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1230
	movzx	eax, BYTE PTR _i$[ebp]
	test	eax, eax
	je	SHORT $LN5@DeleteWarn
; Line 1232
	mov	eax, DWORD PTR _hLowerWarning
	push	eax
	call	_WM_HideWindow
	add	esp, 4
; Line 1233
	push	OFFSET $SG20142
	mov	eax, DWORD PTR _hLowerWarning
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
; Line 1235
	jmp	SHORT $LN4@DeleteWarn
$LN5@DeleteWarn:
; Line 1237
	mov	eax, DWORD PTR _hUpperWarning
	push	eax
	call	_WM_HideWindow
	add	esp, 4
; Line 1238
	push	OFFSET $SG20144
	mov	eax, DWORD PTR _hUpperWarning
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
$LN4@DeleteWarn:
; Line 1241
	movzx	eax, BYTE PTR _i$[ebp]
	mov	BYTE PTR _WarningPopups[eax*2+1], 0
; Line 1243
	movzx	eax, BYTE PTR _gaugeScreen$[ebp]
	test	eax, eax
	je	SHORT $LN6@DeleteWarn
; Line 1245
	movzx	eax, BYTE PTR _i$[ebp]
	test	eax, eax
	je	SHORT $LN2@DeleteWarn
; Line 1246
	push	102					; 00000066H
	push	250					; 000000faH
	push	62					; 0000003eH
	push	0
	call	_GUI_ClearRect
	add	esp, 16					; 00000010H
	jmp	SHORT $LN6@DeleteWarn
$LN2@DeleteWarn:
; Line 1247
	push	62					; 0000003eH
	push	250					; 000000faH
	push	22					; 00000016H
	push	0
	call	_GUI_ClearRect
	add	esp, 16					; 00000010H
$LN6@DeleteWarn:
; Line 1249
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DeleteWarningPopup ENDP
_TEXT	ENDS
PUBLIC	_DrawWarningPopups
EXTRN	_GUI_DispStringInRect:PROC
EXTRN	_GUI_DrawBitmap:PROC
EXTRN	_GUI_SetTextMode:PROC
EXTRN	_GUI_Font10_ASCII:BYTE
EXTRN	_GUI_Font16_ASCII:BYTE
EXTRN	_GUI_SetFont:PROC
EXTRN	_GUI_Font24_ASCII:BYTE
EXTRN	_GUI_SetColor:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DrawWarningPopups
_TEXT	SEGMENT
_justify$ = -8						; size = 4
_i$ = 8							; size = 1
_pText$ = 12						; size = 4
_alarmCount$ = 16					; size = 4
_DrawWarningPopups PROC					; COMDAT
; Line 1253
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1256
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 1258
	cmp	DWORD PTR _alarmCount$[ebp], 1
	jne	SHORT $LN6@DrawWarnin
; Line 1260
	push	OFFSET _GUI_Font24_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 1261
	mov	DWORD PTR _justify$[ebp], 14		; 0000000eH
; Line 1263
	jmp	SHORT $LN5@DrawWarnin
$LN6@DrawWarnin:
; Line 1265
	mov	DWORD PTR _justify$[ebp], 12		; 0000000cH
; Line 1266
	cmp	DWORD PTR _alarmCount$[ebp], 2
	jne	SHORT $LN4@DrawWarnin
; Line 1267
	push	OFFSET _GUI_Font16_ASCII
	call	_GUI_SetFont
	add	esp, 4
	jmp	SHORT $LN5@DrawWarnin
$LN4@DrawWarnin:
; Line 1268
	push	OFFSET _GUI_Font10_ASCII
	call	_GUI_SetFont
	add	esp, 4
$LN5@DrawWarnin:
; Line 1271
	push	0
	call	_GUI_SetTextMode
	add	esp, 4
; Line 1272
	movzx	eax, BYTE PTR _i$[ebp]
	test	eax, eax
	je	SHORT $LN2@DrawWarnin
; Line 1274
	push	62					; 0000003eH
	push	0
	push	OFFSET _bmWarningPopupBlank
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 1275
	mov	eax, DWORD PTR _justify$[ebp]
	push	eax
	push	OFFSET _LowerRect
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
; Line 1277
	jmp	SHORT $LN7@DrawWarnin
$LN2@DrawWarnin:
; Line 1279
	push	22					; 00000016H
	push	0
	push	OFFSET _bmWarningPopupBlank
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 1280
	mov	eax, DWORD PTR _justify$[ebp]
	push	eax
	push	OFFSET _UpperRect
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	_GUI_DispStringInRect
	add	esp, 12					; 0000000cH
$LN7@DrawWarnin:
; Line 1282
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DrawWarningPopups ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_BUTTON_SetTextAlign:PROC
EXTRN	_BUTTON_SetFont:PROC
EXTRN	_sprintf:PROC
EXTRN	_strcat:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _UpdateWarningPopup
_TEXT	SEGMENT
tv138 = -640						; size = 4
$T20372 = -632						; size = 8
_hButton$20186 = -424					; size = 4
_tempfloat$20180 = -412					; size = 4
_outputString$ = -400					; size = 306
_scratch$ = -84						; size = 50
_alarmCount$ = -24					; size = 4
_j$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_i$ = 8							; size = 1
_gaugeScreen$ = 12					; size = 1
_UpdateWarningPopup PROC				; COMDAT
; Line 1285
	push	ebp
	mov	ebp, esp
	sub	esp, 640				; 00000280H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-640]
	mov	ecx, 160				; 000000a0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1289
	mov	BYTE PTR _outputString$[ebp], 0
; Line 1290
	mov	DWORD PTR _alarmCount$[ebp], 0
	mov	eax, DWORD PTR _alarmCount$[ebp]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN15@UpdateWarn
$LN14@UpdateWarn:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN15@UpdateWarn:
	cmp	DWORD PTR _j$[ebp], 6
	jge	$LN13@UpdateWarn
; Line 1292
	movzx	eax, BYTE PTR _i$[ebp]
	imul	eax, 6
	mov	ecx, DWORD PTR _j$[ebp]
	movzx	edx, BYTE PTR _AlarmTriggerCause[eax+ecx]
	test	edx, edx
	je	$LN12@UpdateWarn
; Line 1294
	mov	eax, DWORD PTR _alarmCount$[ebp]
	add	eax, 1
	mov	DWORD PTR _alarmCount$[ebp], eax
	cmp	DWORD PTR _alarmCount$[ebp], 1
	jle	SHORT $LN11@UpdateWarn
; Line 1295
	push	OFFSET $SG20178
	lea	eax, DWORD PTR _outputString$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
$LN11@UpdateWarn:
; Line 1297
	cmp	DWORD PTR _j$[ebp], 4
	jge	SHORT $LN10@UpdateWarn
; Line 1299
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 54					; 00000036H
	push	eax
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T20372[ebp], eax
	mov	DWORD PTR $T20372[ebp+4], edx
	fld	DWORD PTR $T20372[ebp]
	fstp	DWORD PTR _tempfloat$20180[ebp]
; Line 1301
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 6
	add	eax, OFFSET _vehicleData+137
	push	eax
	fld	DWORD PTR _tempfloat$20180[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 6
	add	ecx, OFFSET _vehicleData+120
	push	ecx
	push	OFFSET $SG20182
	lea	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_sprintf
	add	esp, 24					; 00000018H
; Line 1303
	jmp	SHORT $LN9@UpdateWarn
$LN10@UpdateWarn:
; Line 1307
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 4
	imul	eax, 47					; 0000002fH
	movsx	ecx, BYTE PTR _vehicleData[eax+420]
	test	ecx, ecx
	je	SHORT $LN18@UpdateWarn
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 4
	imul	edx, 47					; 0000002fH
	add	edx, OFFSET _vehicleData+393
	mov	DWORD PTR tv138[ebp], edx
	jmp	SHORT $LN19@UpdateWarn
$LN18@UpdateWarn:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 4
	imul	eax, 47					; 0000002fH
	add	eax, OFFSET _vehicleData+406
	mov	DWORD PTR tv138[ebp], eax
$LN19@UpdateWarn:
	mov	ecx, DWORD PTR tv138[ebp]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 4
	imul	edx, 47					; 0000002fH
	add	edx, OFFSET _vehicleData+376
	push	edx
	push	OFFSET $SG20184
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
$LN9@UpdateWarn:
; Line 1309
	lea	eax, DWORD PTR _scratch$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outputString$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
$LN12@UpdateWarn:
; Line 1311
	jmp	$LN14@UpdateWarn
$LN13@UpdateWarn:
; Line 1313
	movzx	eax, BYTE PTR _gaugeScreen$[ebp]
	test	eax, eax
	jne	$LN8@UpdateWarn
; Line 1317
	movzx	eax, BYTE PTR _i$[ebp]
	test	eax, eax
	je	SHORT $LN7@UpdateWarn
; Line 1318
	mov	eax, DWORD PTR _hLowerWarning
	mov	DWORD PTR _hButton$20186[ebp], eax
	jmp	SHORT $LN6@UpdateWarn
$LN7@UpdateWarn:
; Line 1319
	mov	eax, DWORD PTR _hUpperWarning
	mov	DWORD PTR _hButton$20186[ebp], eax
$LN6@UpdateWarn:
; Line 1321
	lea	eax, DWORD PTR _outputString$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hButton$20186[ebp]
	push	ecx
	call	_BUTTON_SetText
	add	esp, 8
; Line 1322
	cmp	DWORD PTR _alarmCount$[ebp], 1
	jne	SHORT $LN5@UpdateWarn
; Line 1324
	push	OFFSET _GUI_Font24_ASCII
	mov	eax, DWORD PTR _hButton$20186[ebp]
	push	eax
	call	_BUTTON_SetFont
	add	esp, 8
; Line 1325
	push	14					; 0000000eH
	mov	eax, DWORD PTR _hButton$20186[ebp]
	push	eax
	call	_BUTTON_SetTextAlign
	add	esp, 8
; Line 1327
	jmp	SHORT $LN2@UpdateWarn
$LN5@UpdateWarn:
; Line 1329
	push	12					; 0000000cH
	mov	eax, DWORD PTR _hButton$20186[ebp]
	push	eax
	call	_BUTTON_SetTextAlign
	add	esp, 8
; Line 1330
	cmp	DWORD PTR _alarmCount$[ebp], 2
	jne	SHORT $LN3@UpdateWarn
; Line 1331
	push	OFFSET _GUI_Font16_ASCII
	mov	eax, DWORD PTR _hButton$20186[ebp]
	push	eax
	call	_BUTTON_SetFont
	add	esp, 8
	jmp	SHORT $LN2@UpdateWarn
$LN3@UpdateWarn:
; Line 1332
	push	OFFSET _GUI_Font10_ASCII
	mov	eax, DWORD PTR _hButton$20186[ebp]
	push	eax
	call	_BUTTON_SetFont
	add	esp, 8
$LN2@UpdateWarn:
; Line 1333
	jmp	SHORT $LN1@UpdateWarn
$LN8@UpdateWarn:
; Line 1335
	mov	eax, DWORD PTR _alarmCount$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outputString$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _i$[ebp]
	push	edx
	call	_DrawWarningPopups
	add	esp, 12					; 0000000cH
$LN1@UpdateWarn:
; Line 1336
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@UpdateWarn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 640				; 00000280H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN23@UpdateWarn:
	DD	2
	DD	$LN22@UpdateWarn
$LN22@UpdateWarn:
	DD	-84					; ffffffacH
	DD	50					; 00000032H
	DD	$LN20@UpdateWarn
	DD	-400					; fffffe70H
	DD	306					; 00000132H
	DD	$LN21@UpdateWarn
$LN21@UpdateWarn:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN20@UpdateWarn:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_UpdateWarningPopup ENDP
_TEXT	ENDS
PUBLIC	_DecreaseLEDBrightness
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DecreaseLEDBrightness
_TEXT	SEGMENT
_temp$ = -8						; size = 4
_DecreaseLEDBrightness PROC				; COMDAT
; Line 1339
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1342
	mov	BYTE PTR _sysData+108, 0
; Line 1343
	mov	eax, DWORD PTR _sysData+112
	mov	DWORD PTR _temp$[ebp], eax
; Line 1344
	mov	eax, DWORD PTR _temp$[ebp]
	sub	eax, 10					; 0000000aH
	mov	DWORD PTR _temp$[ebp], eax
	jns	SHORT $LN1@DecreaseLE
; Line 1345
	mov	DWORD PTR _temp$[ebp], 0
$LN1@DecreaseLE:
; Line 1346
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _sysData+112, eax
; Line 1354
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_DecreaseLEDBrightness ENDP
_TEXT	ENDS
PUBLIC	_IncreaseLEDBrightness
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _IncreaseLEDBrightness
_TEXT	SEGMENT
_IncreaseLEDBrightness PROC				; COMDAT
; Line 1357
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1358
	mov	BYTE PTR _sysData+108, 0
; Line 1359
	mov	eax, DWORD PTR _sysData+112
	add	eax, 10					; 0000000aH
	mov	DWORD PTR _sysData+112, eax
	cmp	DWORD PTR _sysData+112, 99		; 00000063H
	jbe	SHORT $LN2@IncreaseLE
; Line 1360
	mov	DWORD PTR _sysData+112, 99		; 00000063H
$LN2@IncreaseLE:
; Line 1368
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_IncreaseLEDBrightness ENDP
_TEXT	ENDS
PUBLIC	_DecreaseBacklightBrightness
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DecreaseBacklightBrightness
_TEXT	SEGMENT
_i$ = -8						; size = 4
_DecreaseBacklightBrightness PROC			; COMDAT
; Line 1373
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1376
	mov	BYTE PTR _sysData+108, 0
; Line 1377
	mov	DWORD PTR _i$[ebp], 8
	jmp	SHORT $LN4@DecreaseBa
$LN3@DecreaseBa:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@DecreaseBa:
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN2@DecreaseBa
; Line 1378
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _BackLightQuickSteps[eax]
	cmp	DWORD PTR _sysData+104, ecx
	jbe	SHORT $LN1@DecreaseBa
; Line 1379
	jmp	SHORT $LN2@DecreaseBa
$LN1@DecreaseBa:
; Line 1380
	jmp	SHORT $LN3@DecreaseBa
$LN2@DecreaseBa:
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _BackLightQuickSteps[eax]
	mov	DWORD PTR _sysData+104, ecx
; Line 1387
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_DecreaseBacklightBrightness ENDP
_TEXT	ENDS
PUBLIC	_IncreaseBacklightBrightness
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _IncreaseBacklightBrightness
_TEXT	SEGMENT
_i$ = -8						; size = 4
_IncreaseBacklightBrightness PROC			; COMDAT
; Line 1390
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1393
	mov	BYTE PTR _sysData+108, 0
; Line 1394
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@IncreaseBa
$LN3@IncreaseBa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@IncreaseBa:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN2@IncreaseBa
; Line 1395
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _BackLightQuickSteps[eax]
	cmp	DWORD PTR _sysData+104, ecx
	jae	SHORT $LN1@IncreaseBa
; Line 1396
	jmp	SHORT $LN2@IncreaseBa
$LN1@IncreaseBa:
; Line 1397
	jmp	SHORT $LN3@IncreaseBa
$LN2@IncreaseBa:
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _BackLightQuickSteps[eax]
	mov	DWORD PTR _sysData+104, ecx
; Line 1404
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_IncreaseBacklightBrightness ENDP
_TEXT	ENDS
END
