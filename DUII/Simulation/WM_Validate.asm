; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\WM\WM_Validate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_WM_ValidateRect
EXTRN	_WM__NumInvalidWindows:WORD
EXTRN	_WM__RectIsNZ:PROC
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\wm\wm_validate.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _WM_ValidateRect
_TEXT	SEGMENT
_pWin$ = -8						; size = 4
_hWin$ = 8						; size = 4
_pRect$ = 12						; size = 4
_WM_ValidateRect PROC					; COMDAT
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 76
	cmp	DWORD PTR _hWin$[ebp], 0
	je	SHORT $Done$9458
; Line 78
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 79
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32					; 00000020H
	je	SHORT $Done$9458
; Line 80
	cmp	DWORD PTR _pRect$[ebp], 0
	je	SHORT $LN2@WM_Validat
; Line 81
	mov	eax, DWORD PTR _pRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _pWin$[ebp]
	add	edx, 8
	push	edx
	call	__SubRect
	add	esp, 12					; 0000000cH
; Line 82
	mov	eax, DWORD PTR _pWin$[ebp]
	add	eax, 8
	push	eax
	call	_WM__RectIsNZ
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@WM_Validat
; Line 83
	jmp	SHORT $Done$9458
$LN2@WM_Validat:
; Line 85
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, -33				; ffffffdfH
	mov	edx, DWORD PTR _pWin$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 86
	mov	ax, WORD PTR _WM__NumInvalidWindows
	sub	ax, 1
	mov	WORD PTR _WM__NumInvalidWindows, ax
$Done$9458:
; Line 91
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_ValidateRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SubRect
_TEXT	SEGMENT
tv159 = -196						; size = 4
tv147 = -196						; size = 4
tv95 = -196						; size = 4
tv85 = -196						; size = 4
_pDest$ = 8						; size = 4
_pr0$ = 12						; size = 4
_pr1$ = 16						; size = 4
__SubRect PROC						; COMDAT
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 45
	cmp	DWORD PTR _pDest$[ebp], 0
	je	SHORT $LN4@SubRect
	cmp	DWORD PTR _pr0$[ebp], 0
	jne	SHORT $LN5@SubRect
$LN4@SubRect:
; Line 46
	jmp	$LN6@SubRect
$LN5@SubRect:
; Line 47
	mov	eax, DWORD PTR _pr0$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
; Line 48
	cmp	DWORD PTR _pr1$[ebp], 0
	jne	SHORT $LN3@SubRect
; Line 49
	jmp	$LN6@SubRect
$LN3@SubRect:
; Line 52
	mov	eax, DWORD PTR _pr1$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _pr0$[ebp]
	movsx	eax, WORD PTR [edx+2]
	cmp	ecx, eax
	jg	$LN2@SubRect
	mov	eax, DWORD PTR _pr1$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _pr0$[ebp]
	movsx	eax, WORD PTR [edx+6]
	cmp	ecx, eax
	jl	SHORT $LN2@SubRect
; Line 53
	mov	eax, DWORD PTR _pr0$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _pr1$[ebp]
	movsx	eax, WORD PTR [edx+4]
	cmp	ecx, eax
	jle	SHORT $LN8@SubRect
	mov	ecx, DWORD PTR _pr0$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	DWORD PTR tv85[ebp], edx
	jmp	SHORT $LN9@SubRect
$LN8@SubRect:
	mov	eax, DWORD PTR _pr1$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	DWORD PTR tv85[ebp], ecx
$LN9@SubRect:
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	ax, WORD PTR tv85[ebp]
	mov	WORD PTR [edx], ax
; Line 54
	mov	eax, DWORD PTR _pr0$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _pr1$[ebp]
	movsx	eax, WORD PTR [edx]
	cmp	ecx, eax
	jge	SHORT $LN10@SubRect
	mov	ecx, DWORD PTR _pr0$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	mov	DWORD PTR tv95[ebp], edx
	jmp	SHORT $LN11@SubRect
$LN10@SubRect:
	mov	eax, DWORD PTR _pr1$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	DWORD PTR tv95[ebp], ecx
$LN11@SubRect:
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	ax, WORD PTR tv95[ebp]
	mov	WORD PTR [edx+4], ax
$LN2@SubRect:
; Line 58
	mov	eax, DWORD PTR _pr1$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _pr0$[ebp]
	movsx	eax, WORD PTR [edx]
	cmp	ecx, eax
	jg	$LN6@SubRect
	mov	eax, DWORD PTR _pr1$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _pr0$[ebp]
	movsx	eax, WORD PTR [edx+4]
	cmp	ecx, eax
	jl	SHORT $LN6@SubRect
; Line 59
	mov	eax, DWORD PTR _pr0$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _pr1$[ebp]
	movsx	eax, WORD PTR [edx+6]
	cmp	ecx, eax
	jle	SHORT $LN12@SubRect
	mov	ecx, DWORD PTR _pr0$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	DWORD PTR tv147[ebp], edx
	jmp	SHORT $LN13@SubRect
$LN12@SubRect:
	mov	eax, DWORD PTR _pr1$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR tv147[ebp], ecx
$LN13@SubRect:
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	ax, WORD PTR tv147[ebp]
	mov	WORD PTR [edx+2], ax
; Line 60
	mov	eax, DWORD PTR _pr0$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _pr1$[ebp]
	movsx	eax, WORD PTR [edx+2]
	cmp	ecx, eax
	jge	SHORT $LN14@SubRect
	mov	ecx, DWORD PTR _pr0$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	mov	DWORD PTR tv159[ebp], edx
	jmp	SHORT $LN15@SubRect
$LN14@SubRect:
	mov	eax, DWORD PTR _pr1$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR tv159[ebp], ecx
$LN15@SubRect:
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	ax, WORD PTR tv159[ebp]
	mov	WORD PTR [edx+6], ax
$LN6@SubRect:
; Line 62
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__SubRect ENDP
_TEXT	ENDS
END
