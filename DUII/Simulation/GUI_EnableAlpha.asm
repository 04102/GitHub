; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_EnableAlpha.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
__ALPHA_Device_API DD 06H
	DD	FLAT:__DrawBitmap
	DD	FLAT:__DrawHLine
	DD	FLAT:__DrawVLine
	DD	FLAT:__FillRect
	DD	FLAT:__GetPixelIndex
	DD	FLAT:__SetPixelIndex
	DD	FLAT:__XorPixel
	DD	FLAT:__SetOrg
	DD	FLAT:__GetDevFunc
	DD	FLAT:__GetDevProp
	DD	FLAT:__GetDevData
	DD	FLAT:__GetRect
__SetColorAPI DD FLAT:__SetColor
	DD	FLAT:__SetBkColor
	DD	FLAT:__SetDrawMode
CONST	ENDS
EXTRN	_GUI_Context:BYTE
EXTRN	_LCD_pBkColorIndex:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
__Buffersize DD	01H DUP (?)
__pBuffer DD	01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_enablealpha.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __DrawBitmap
_TEXT	SEGMENT
tv132 = -256						; size = 4
_pDst$ = -56						; size = 4
_pSrc$ = -44						; size = 4
_MaxBytes$ = -32					; size = 4
_i$ = -20						; size = 4
_pDeviceNext$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xSize$ = 20						; size = 4
_ySize$ = 24						; size = 4
_BitsPerPixel$ = 28					; size = 4
_BytesPerLine$ = 32					; size = 4
_pData$ = 36						; size = 4
_Diff$ = 40						; size = 4
_pTrans$ = 44						; size = 4
__DrawBitmap PROC					; COMDAT
; Line 130
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 139
	cmp	DWORD PTR _BitsPerPixel$[ebp], 1
	jne	$LN12@DrawBitmap
	mov	eax, DWORD PTR _pTrans$[ebp]
	cmp	eax, DWORD PTR _LCD_pBkColorIndex
	jne	$LN12@DrawBitmap
	movzx	eax, BYTE PTR _GUI_Context+16
	test	eax, eax
	jne	$LN12@DrawBitmap
; Line 143
	mov	BYTE PTR _GUI_Context+16, 2
; Line 144
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDeviceNext$[ebp], ecx
; Line 148
	mov	esi, esp
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Diff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BitsPerPixel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ySize$[ebp]
	push	edx
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDeviceNext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDeviceNext$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 152
	call	__SwapColors
; Line 153
	call	__SwapIndices
; Line 154
	call	__ManageAlpha
; Line 155
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 159
	cmp	DWORD PTR __pBuffer, 0
	je	$LN11@DrawBitmap
; Line 160
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	cmp	eax, DWORD PTR __Buffersize
	jle	SHORT $LN10@DrawBitmap
; Line 161
	mov	eax, DWORD PTR __Buffersize
	mov	DWORD PTR _MaxBytes$[ebp], eax
; Line 162
	mov	eax, DWORD PTR __Buffersize
	shl	eax, 3
	mov	DWORD PTR _xSize$[ebp], eax
; Line 163
	jmp	SHORT $LN8@DrawBitmap
$LN10@DrawBitmap:
; Line 164
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _MaxBytes$[ebp], eax
$LN8@DrawBitmap:
; Line 167
	mov	eax, DWORD PTR _MaxBytes$[ebp]
	mov	DWORD PTR _i$[ebp], eax
; Line 168
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 169
	mov	eax, DWORD PTR __pBuffer
	mov	DWORD PTR _pDst$[ebp], eax
$LN5@DrawBitmap:
; Line 174
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _pDst$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _pDst$[ebp]
	add	eax, 1
	mov	DWORD PTR _pDst$[ebp], eax
	mov	ecx, DWORD PTR _pSrc$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pSrc$[ebp], ecx
; Line 175
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jne	SHORT $LN5@DrawBitmap
; Line 182
	mov	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR tv132[ebp], eax
	mov	ecx, DWORD PTR _y0$[ebp]
	add	ecx, 1
	mov	DWORD PTR _y0$[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR _pTrans$[ebp]
	push	edx
	mov	eax, DWORD PTR _Diff$[ebp]
	push	eax
	mov	ecx, DWORD PTR __pBuffer
	push	ecx
	mov	edx, DWORD PTR _BytesPerLine$[ebp]
	push	edx
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv132[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 186
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 187
	mov	eax, DWORD PTR _ySize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _ySize$[ebp], eax
	jne	$LN8@DrawBitmap
$LN11@DrawBitmap:
; Line 192
	call	__SwapColors
; Line 193
	call	__SwapIndices
; Line 194
	call	__ManageAlpha
; Line 195
	mov	BYTE PTR _GUI_Context+16, 0
; Line 196
	jmp	SHORT $LN13@DrawBitmap
$LN12@DrawBitmap:
; Line 200
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 201
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN13@DrawBitmap
; Line 205
	mov	esi, esp
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Diff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BitsPerPixel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ySize$[ebp]
	push	edx
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@DrawBitmap:
; Line 208
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitmap ENDP
_TEXT	ENDS
EXTRN	_LCD_pColorIndex:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __SwapIndices
_TEXT	SEGMENT
_Temp$ = -8						; size = 4
__SwapIndices PROC					; COMDAT
; Line 51
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 56
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Temp$[ebp], ecx
; Line 57
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR _LCD_pBkColorIndex
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 58
	mov	eax, DWORD PTR _LCD_pBkColorIndex
	mov	ecx, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 59
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__SwapIndices ENDP
_TEXT	ENDS
_BSS	SEGMENT
__BkColor DD	01H DUP (?)
__Color	DD	01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __SwapColors
_TEXT	SEGMENT
_Temp$ = -8						; size = 4
__SwapColors PROC					; COMDAT
; Line 65
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 70
	mov	eax, DWORD PTR __Color
	mov	DWORD PTR _Temp$[ebp], eax
; Line 71
	mov	eax, DWORD PTR __BkColor
	mov	DWORD PTR __Color, eax
; Line 72
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR __BkColor, eax
; Line 73
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__SwapColors ENDP
_TEXT	ENDS
EXTRN	_GUI_SetAlpha:PROC
EXTRN	_GUI_DEVICE_Unlink:PROC
EXTRN	_GUI_DEVICE_Link:PROC
_BSS	SEGMENT
?AlphaOld@?1??_ManageAlpha@@9@9 DD 01H DUP (?)		; `_ManageAlpha'::`2'::AlphaOld
__UserAlpha DD	01H DUP (?)
__pDevice DD	01H DUP (?)
__Linked DD	01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __ManageAlpha
_TEXT	SEGMENT
_BkAlpha$ = -20						; size = 4
_Alpha$ = -8						; size = 4
__ManageAlpha PROC					; COMDAT
; Line 79
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 84
	mov	eax, DWORD PTR __Color
	shr	eax, 24					; 00000018H
	mov	DWORD PTR _Alpha$[ebp], eax
; Line 85
	mov	eax, DWORD PTR __BkColor
	shr	eax, 24					; 00000018H
	mov	DWORD PTR _BkAlpha$[ebp], eax
; Line 86
	cmp	DWORD PTR _Alpha$[ebp], 0
	jne	SHORT $LN6@ManageAlph
	cmp	DWORD PTR _BkAlpha$[ebp], 0
	je	SHORT $LN7@ManageAlph
$LN6@ManageAlph:
; Line 87
	cmp	DWORD PTR __Linked, 0
	jne	SHORT $LN5@ManageAlph
; Line 88
	mov	eax, DWORD PTR __pDevice
	push	eax
	call	_GUI_DEVICE_Link
	add	esp, 4
; Line 89
	mov	DWORD PTR __Linked, 1
$LN5@ManageAlph:
; Line 91
	jmp	SHORT $LN4@ManageAlph
$LN7@ManageAlph:
; Line 92
	cmp	DWORD PTR __Linked, 1
	jne	SHORT $LN4@ManageAlph
; Line 93
	mov	eax, DWORD PTR __pDevice
	push	eax
	call	_GUI_DEVICE_Unlink
	add	esp, 4
; Line 94
	mov	DWORD PTR __Linked, 0
$LN4@ManageAlph:
; Line 97
	cmp	DWORD PTR __UserAlpha, 0
	je	SHORT $LN2@ManageAlph
; Line 98
	mov	eax, 255				; 000000ffH
	sub	eax, DWORD PTR _Alpha$[ebp]
	imul	eax, DWORD PTR __UserAlpha
	xor	edx, edx
	mov	ecx, 255				; 000000ffH
	div	ecx
	add	eax, DWORD PTR _Alpha$[ebp]
	mov	DWORD PTR _Alpha$[ebp], eax
$LN2@ManageAlph:
; Line 100
	mov	eax, DWORD PTR _Alpha$[ebp]
	cmp	eax, DWORD PTR ?AlphaOld@?1??_ManageAlpha@@9@9
	je	SHORT $LN8@ManageAlph
; Line 101
	movzx	eax, BYTE PTR _Alpha$[ebp]
	push	eax
	call	_GUI_SetAlpha
	add	esp, 4
; Line 102
	mov	eax, DWORD PTR _Alpha$[ebp]
	mov	DWORD PTR ?AlphaOld@?1??_ManageAlpha@@9@9, eax
$LN8@ManageAlph:
; Line 104
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ManageAlpha ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawHLine
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y$ = 16						; size = 4
_x1$ = 20						; size = 4
__DrawHLine PROC					; COMDAT
; Line 217
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 218
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 219
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN2@DrawHLine
; Line 220
	mov	esi, esp
	mov	eax, DWORD PTR _x1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawHLine:
; Line 222
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawHLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawVLine
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y0$ = 16						; size = 4
_y1$ = 20						; size = 4
__DrawVLine PROC					; COMDAT
; Line 231
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 232
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 233
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN2@DrawVLine
; Line 234
	mov	esi, esp
	mov	eax, DWORD PTR _y1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawVLine:
; Line 236
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawVLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __FillRect
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
__FillRect PROC						; COMDAT
; Line 245
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 246
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 247
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN2@FillRect
; Line 248
	mov	esi, esp
	mov	eax, DWORD PTR _y1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@FillRect:
; Line 250
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FillRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetPixelIndex
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__GetPixelIndex PROC					; COMDAT
; Line 259
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 260
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 261
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN1@GetPixelIn
; Line 262
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@GetPixelIn
$LN1@GetPixelIn:
; Line 264
	xor	eax, eax
$LN2@GetPixelIn:
; Line 265
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetPixelIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetPixelIndex
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_ColorIndex$ = 20					; size = 4
__SetPixelIndex PROC					; COMDAT
; Line 274
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 275
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 276
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN2@SetPixelIn
; Line 277
	mov	esi, esp
	mov	eax, DWORD PTR _ColorIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SetPixelIn:
; Line 279
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetPixelIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __XorPixel
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__XorPixel PROC						; COMDAT
; Line 288
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 289
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 290
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN2@XorPixel
; Line 291
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@XorPixel:
; Line 293
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__XorPixel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevData
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevData PROC					; COMDAT
; Line 302
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 303
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 304
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN1@GetDevData
; Line 305
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@GetDevData
$LN1@GetDevData:
; Line 307
	xor	eax, eax
$LN2@GetDevData:
; Line 308
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevData ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetOrg
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__SetOrg PROC						; COMDAT
; Line 317
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 318
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 319
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN2@SetOrg
; Line 320
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SetOrg:
; Line 322
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetOrg ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevFunc
_TEXT	SEGMENT
_ppDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevFunc PROC					; COMDAT
; Line 331
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 332
	mov	eax, DWORD PTR _ppDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ppDevice$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
; Line 333
	mov	eax, DWORD PTR _ppDevice$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@GetDevFunc
; Line 334
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppDevice$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@GetDevFunc
$LN1@GetDevFunc:
; Line 336
	xor	eax, eax
$LN2@GetDevFunc:
; Line 337
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevFunc ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevProp
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevProp PROC					; COMDAT
; Line 346
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 347
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 348
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN1@GetDevProp
; Line 349
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+40]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@GetDevProp
$LN1@GetDevProp:
; Line 351
	xor	eax, eax
$LN2@GetDevProp:
; Line 352
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevProp ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetRect
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_pRect$ = 12						; size = 4
__GetRect PROC						; COMDAT
; Line 361
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 362
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 363
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN2@GetRect
; Line 364
	mov	esi, esp
	mov	eax, DWORD PTR _pRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+48]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@GetRect:
; Line 366
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetRect ENDP
_TEXT	ENDS
_BSS	SEGMENT
__pSetColorAPI DD 01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __SetBkColor
_TEXT	SEGMENT
_Color$ = 8						; size = 4
__SetBkColor PROC					; COMDAT
; Line 406
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 410
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 4
	je	SHORT $LN2@SetBkColor
; Line 411
	mov	eax, DWORD PTR _Color$[ebp]
	mov	DWORD PTR __Color, eax
; Line 412
	jmp	SHORT $LN1@SetBkColor
$LN2@SetBkColor:
; Line 413
	mov	eax, DWORD PTR _Color$[ebp]
	mov	DWORD PTR __BkColor, eax
$LN1@SetBkColor:
; Line 418
	call	__ManageAlpha
; Line 422
	mov	eax, DWORD PTR _Color$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR __pSetColorAPI
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 423
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetBkColor ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetColor
_TEXT	SEGMENT
_Color$ = 8						; size = 4
__SetColor PROC						; COMDAT
; Line 429
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 433
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 4
	je	SHORT $LN2@SetColor
; Line 434
	mov	eax, DWORD PTR _Color$[ebp]
	mov	DWORD PTR __BkColor, eax
; Line 435
	jmp	SHORT $LN1@SetColor
$LN2@SetColor:
; Line 436
	mov	eax, DWORD PTR _Color$[ebp]
	mov	DWORD PTR __Color, eax
$LN1@SetColor:
; Line 441
	call	__ManageAlpha
; Line 445
	mov	eax, DWORD PTR _Color$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR __pSetColorAPI
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 446
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetColor ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetDrawMode
_TEXT	SEGMENT
_dm$ = 8						; size = 4
__SetDrawMode PROC					; COMDAT
; Line 452
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 453
	movzx	eax, BYTE PTR _GUI_Context+16
	xor	eax, DWORD PTR _dm$[ebp]
	and	eax, 4
	je	SHORT $LN1@SetDrawMod
; Line 454
	call	__SwapColors
$LN1@SetDrawMod:
; Line 459
	call	__ManageAlpha
; Line 463
	mov	esi, esp
	mov	eax, DWORD PTR _dm$[ebp]
	push	eax
	mov	ecx, DWORD PTR __pSetColorAPI
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 464
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetDrawMode ENDP
_TEXT	ENDS
PUBLIC	_GUI_SetUserAlpha
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_SetUserAlpha
_TEXT	SEGMENT
_pAlphaState$ = 8					; size = 4
_UserAlpha$ = 12					; size = 4
_GUI_SetUserAlpha PROC					; COMDAT
; Line 488
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 489
	mov	eax, DWORD PTR _pAlphaState$[ebp]
	mov	ecx, DWORD PTR __UserAlpha
	mov	DWORD PTR [eax], ecx
; Line 490
	mov	eax, DWORD PTR _UserAlpha$[ebp]
	mov	DWORD PTR __UserAlpha, eax
; Line 491
	mov	eax, DWORD PTR _pAlphaState$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 492
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_SetUserAlpha ENDP
_TEXT	ENDS
PUBLIC	_GUI_RestoreUserAlpha
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_RestoreUserAlpha
_TEXT	SEGMENT
_OldUserAlpha$ = -8					; size = 4
_pAlphaState$ = 8					; size = 4
_GUI_RestoreUserAlpha PROC				; COMDAT
; Line 498
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 501
	mov	eax, DWORD PTR __UserAlpha
	mov	DWORD PTR _OldUserAlpha$[ebp], eax
; Line 502
	mov	eax, DWORD PTR _pAlphaState$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __UserAlpha, ecx
; Line 503
	mov	eax, DWORD PTR _OldUserAlpha$[ebp]
; Line 504
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_RestoreUserAlpha ENDP
_TEXT	ENDS
PUBLIC	_GUI_EnableAlpha
EXTRN	_LCD__pSetColorAPI:DWORD
EXTRN	_GUI_ALLOC_GetFixedBlock:PROC
EXTRN	_LCD_GetVXSizeMax:PROC
EXTRN	_GUI_DEVICE_Create:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_EnableAlpha
_TEXT	SEGMENT
_vxSizeMax$ = -20					; size = 4
_OldState$ = -8						; size = 4
_OnOff$ = 8						; size = 4
_GUI_EnableAlpha PROC					; COMDAT
; Line 510
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 514
	cmp	DWORD PTR __pDevice, 0
	jne	SHORT $LN7@GUI_Enable
; Line 518
	push	1
	call	_GUI_SetAlpha
	add	esp, 4
; Line 519
	push	0
	call	_GUI_SetAlpha
	add	esp, 4
; Line 523
	push	0
	push	0
	push	0
	push	OFFSET __ALPHA_Device_API
	call	_GUI_DEVICE_Create
	add	esp, 16					; 00000010H
	mov	DWORD PTR __pDevice, eax
; Line 527
	call	_LCD_GetVXSizeMax
	mov	DWORD PTR _vxSizeMax$[ebp], eax
; Line 528
	mov	eax, DWORD PTR _vxSizeMax$[ebp]
	add	eax, 7
	shr	eax, 3
	mov	DWORD PTR __Buffersize, eax
; Line 532
	mov	eax, DWORD PTR __Buffersize
	push	eax
	call	_GUI_ALLOC_GetFixedBlock
	add	esp, 4
	mov	DWORD PTR __pBuffer, eax
$LN7@GUI_Enable:
; Line 534
	cmp	DWORD PTR _OnOff$[ebp], 0
	je	SHORT $LN6@GUI_Enable
; Line 535
	cmp	DWORD PTR __pSetColorAPI, 0
	jne	SHORT $LN5@GUI_Enable
; Line 536
	mov	DWORD PTR _OldState$[ebp], 0
; Line 537
	mov	eax, DWORD PTR _LCD__pSetColorAPI
	mov	DWORD PTR __pSetColorAPI, eax
; Line 538
	mov	DWORD PTR _LCD__pSetColorAPI, OFFSET __SetColorAPI
; Line 539
	jmp	SHORT $LN4@GUI_Enable
$LN5@GUI_Enable:
; Line 540
	mov	DWORD PTR _OldState$[ebp], 1
$LN4@GUI_Enable:
; Line 542
	jmp	SHORT $LN3@GUI_Enable
$LN6@GUI_Enable:
; Line 543
	cmp	DWORD PTR __pSetColorAPI, 0
	je	SHORT $LN2@GUI_Enable
; Line 544
	mov	DWORD PTR _OldState$[ebp], 1
; Line 545
	mov	eax, DWORD PTR __pSetColorAPI
	mov	DWORD PTR _LCD__pSetColorAPI, eax
; Line 546
	mov	DWORD PTR __pSetColorAPI, 0
; Line 547
	jmp	SHORT $LN3@GUI_Enable
$LN2@GUI_Enable:
; Line 548
	mov	DWORD PTR _OldState$[ebp], 0
$LN3@GUI_Enable:
; Line 551
	mov	eax, DWORD PTR _OldState$[ebp]
; Line 552
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_EnableAlpha ENDP
_TEXT	ENDS
END
