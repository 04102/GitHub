; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\MemDev\GUIDEV_Measure.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG10179 DB	'GUI_MEASDEV_Create: Alloc failed', 00H
_DATA	ENDS
CONST	SEGMENT
__MeasDev_API DD 07H
	DD	FLAT:__DrawBitmap
	DD	FLAT:__DrawHLine
	DD	FLAT:__DrawVLine
	DD	FLAT:__FillRect
	DD	FLAT:__GetPixelIndex
	DD	FLAT:__SetPixelIndex
	DD	FLAT:__XorPixel
	DD	FLAT:__SetOrg
	DD	FLAT:__GetDevFunc
	DD	FLAT:__GetDevProp
	DD	FLAT:__GetDevData
	DD	FLAT:__GetRect
CONST	ENDS
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\memdev\guidev_measure.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __DrawBitmap
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xsize$ = 20						; size = 4
_ysize$ = 24						; size = 4
_BitsPerPixel$ = 28					; size = 4
_BytesPerLine$ = 32					; size = 4
_pData$ = 36						; size = 4
_Diff$ = 40						; size = 4
_pTrans$ = 44						; size = 4
__DrawBitmap PROC					; COMDAT
; Line 115
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 116
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 117
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR _BitsPerPixel$[ebp], eax
; Line 118
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _BytesPerLine$[ebp], eax
; Line 119
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 120
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _Diff$[ebp], eax
; Line 121
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	DWORD PTR _pTrans$[ebp], eax
; Line 122
	mov	eax, DWORD PTR _ysize$[ebp]
	mov	ecx, DWORD PTR _y0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _xsize$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	__MarkRect
	add	esp, 16					; 00000010H
; Line 123
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitmap ENDP
_TEXT	ENDS
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	_GUI_Context:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __MarkRect
_TEXT	SEGMENT
_pDev$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
__MarkRect PROC						; COMDAT
; Line 91
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 92
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 93
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	cmp	DWORD PTR _x0$[ebp], ecx
	jge	SHORT $LN4@MarkRect
; Line 94
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	cx, WORD PTR _x0$[ebp]
	mov	WORD PTR [eax+4], cx
$LN4@MarkRect:
; Line 96
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	cmp	DWORD PTR _x1$[ebp], ecx
	jle	SHORT $LN3@MarkRect
; Line 97
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	cx, WORD PTR _x1$[ebp]
	mov	WORD PTR [eax+8], cx
$LN3@MarkRect:
; Line 99
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _y0$[ebp], ecx
	jge	SHORT $LN2@MarkRect
; Line 100
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	cx, WORD PTR _y0$[ebp]
	mov	WORD PTR [eax+6], cx
$LN2@MarkRect:
; Line 102
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	cmp	DWORD PTR _y1$[ebp], ecx
	jle	SHORT $LN5@MarkRect
; Line 103
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	cx, WORD PTR _y1$[ebp]
	mov	WORD PTR [eax+10], cx
$LN5@MarkRect:
; Line 105
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__MarkRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawHLine
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y$ = 16						; size = 4
_x1$ = 20						; size = 4
__DrawHLine PROC					; COMDAT
; Line 129
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 130
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 131
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	call	__MarkRect
	add	esp, 16					; 00000010H
; Line 132
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawHLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawVLine
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y0$ = 16						; size = 4
_y1$ = 20						; size = 4
__DrawVLine PROC					; COMDAT
; Line 138
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 139
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 140
	mov	eax, DWORD PTR _y1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__MarkRect
	add	esp, 16					; 00000010H
; Line 141
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawVLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetPixelIndex
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_Index$ = 20						; size = 4
__SetPixelIndex PROC					; COMDAT
; Line 147
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 148
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 149
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR _Index$[ebp], eax
; Line 150
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__MarkPixel
	add	esp, 8
; Line 151
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetPixelIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __MarkPixel
_TEXT	SEGMENT
_pDev$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MarkPixel PROC					; COMDAT
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 72
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 73
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	cmp	DWORD PTR _x$[ebp], ecx
	jge	SHORT $LN4@MarkPixel
; Line 74
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	cx, WORD PTR _x$[ebp]
	mov	WORD PTR [eax+4], cx
$LN4@MarkPixel:
; Line 76
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	cmp	DWORD PTR _x$[ebp], ecx
	jle	SHORT $LN3@MarkPixel
; Line 77
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	cx, WORD PTR _x$[ebp]
	mov	WORD PTR [eax+8], cx
$LN3@MarkPixel:
; Line 79
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _y$[ebp], ecx
	jge	SHORT $LN2@MarkPixel
; Line 80
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	cx, WORD PTR _y$[ebp]
	mov	WORD PTR [eax+6], cx
$LN2@MarkPixel:
; Line 82
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	cmp	DWORD PTR _y$[ebp], ecx
	jle	SHORT $LN5@MarkPixel
; Line 83
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	cx, WORD PTR _y$[ebp]
	mov	WORD PTR [eax+10], cx
$LN5@MarkPixel:
; Line 85
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__MarkPixel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __XorPixel
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__XorPixel PROC						; COMDAT
; Line 157
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 158
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 159
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__MarkPixel
	add	esp, 8
; Line 160
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__XorPixel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetPixelIndex
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__GetPixelIndex PROC					; COMDAT
; Line 166
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 167
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 168
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 169
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y$[ebp], eax
; Line 170
	xor	eax, eax
; Line 171
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetPixelIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __FillRect
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
__FillRect PROC						; COMDAT
; Line 177
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 178
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 179
	mov	eax, DWORD PTR _y1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	call	__MarkRect
	add	esp, 16					; 00000010H
; Line 180
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FillRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetRect
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_pRect$ = 12						; size = 4
__GetRect PROC						; COMDAT
; Line 186
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 187
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 188
	mov	eax, -4095				; fffff001H
	mov	ecx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	edx, -4095				; fffff001H
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [eax], dx
; Line 189
	mov	eax, 4095				; 00000fffH
	mov	ecx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [ecx+6], ax
	mov	edx, 4095				; 00000fffH
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [eax+4], dx
; Line 190
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevData
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevData PROC					; COMDAT
; Line 258
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 259
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 260
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR _Index$[ebp], eax
; Line 261
	xor	eax, eax
; Line 262
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevData ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetOrg
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__SetOrg PROC						; COMDAT
; Line 268
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 269
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 270
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 271
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetOrg ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevFunc
_TEXT	SEGMENT
tv64 = -196						; size = 4
_ppDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevFunc PROC					; COMDAT
; Line 276
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 277
	mov	eax, DWORD PTR _ppDevice$[ebp]
	mov	DWORD PTR _ppDevice$[ebp], eax
; Line 278
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 17			; 00000011H
	je	SHORT $LN2@GetDevFunc
	cmp	DWORD PTR tv64[ebp], 18			; 00000012H
	je	SHORT $LN1@GetDevFunc
	jmp	SHORT $LN3@GetDevFunc
$LN2@GetDevFunc:
; Line 280
	mov	eax, OFFSET __FillPolygon
	jmp	SHORT $LN5@GetDevFunc
$LN1@GetDevFunc:
; Line 282
	mov	eax, OFFSET __FillPolygonAA
	jmp	SHORT $LN5@GetDevFunc
$LN3@GetDevFunc:
; Line 284
	xor	eax, eax
$LN5@GetDevFunc:
; Line 285
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevFunc ENDP
_TEXT	ENDS
EXTRN	_GUI_MoveRect:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __FillPolygon
_TEXT	SEGMENT
_r$ = -12						; size = 8
_pDevice$ = 8						; size = 4
_paPoint$ = 12						; size = 4
_NumPoints$ = 16					; size = 4
_x0$ = 20						; size = 4
_y0$ = 24						; size = 4
__FillPolygon PROC					; COMDAT
; Line 226
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 229
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 230
	mov	eax, DWORD PTR _NumPoints$[ebp]
	push	eax
	mov	ecx, DWORD PTR _paPoint$[ebp]
	push	ecx
	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__CalcPolyRect
	add	esp, 12					; 0000000cH
; Line 231
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	call	_GUI_MoveRect
	add	esp, 12					; 0000000cH
; Line 232
	movsx	eax, WORD PTR _r$[ebp+6]
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+4]
	push	ecx
	movsx	edx, WORD PTR _r$[ebp+2]
	push	edx
	movsx	eax, WORD PTR _r$[ebp]
	push	eax
	call	__MarkRect
	add	esp, 16					; 00000010H
; Line 233
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@FillPolygo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@FillPolygo:
	DD	1
	DD	$LN4@FillPolygo
$LN4@FillPolygo:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@FillPolygo
$LN3@FillPolygo:
	DB	114					; 00000072H
	DB	0
__FillPolygon ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __CalcPolyRect
_TEXT	SEGMENT
_y$10081 = -80						; size = 4
_x$10080 = -68						; size = 4
_yMax$ = -56						; size = 4
_yMin$ = -44						; size = 4
_xMax$ = -32						; size = 4
_xMin$ = -20						; size = 4
_i$ = -8						; size = 4
_pr$ = 8						; size = 4
_paPoint$ = 12						; size = 4
_NumPoints$ = 16					; size = 4
__CalcPolyRect PROC					; COMDAT
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 199
	mov	DWORD PTR _xMin$[ebp], 4095		; 00000fffH
; Line 200
	mov	DWORD PTR _yMin$[ebp], 4095		; 00000fffH
; Line 201
	mov	DWORD PTR _xMax$[ebp], -4095		; fffff001H
; Line 202
	mov	DWORD PTR _yMax$[ebp], -4095		; fffff001H
; Line 203
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@CalcPolyRe
$LN6@CalcPolyRe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@CalcPolyRe:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _NumPoints$[ebp]
	jge	SHORT $LN5@CalcPolyRe
; Line 204
	mov	eax, DWORD PTR _paPoint$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	DWORD PTR _x$10080[ebp], ecx
; Line 205
	mov	eax, DWORD PTR _paPoint$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _y$10081[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _xMin$[ebp]
	cmp	eax, DWORD PTR _x$10080[ebp]
	jle	SHORT $LN4@CalcPolyRe
; Line 207
	mov	eax, DWORD PTR _x$10080[ebp]
	mov	DWORD PTR _xMin$[ebp], eax
$LN4@CalcPolyRe:
; Line 208
	mov	eax, DWORD PTR _xMax$[ebp]
	cmp	eax, DWORD PTR _x$10080[ebp]
	jge	SHORT $LN3@CalcPolyRe
; Line 209
	mov	eax, DWORD PTR _x$10080[ebp]
	mov	DWORD PTR _xMax$[ebp], eax
$LN3@CalcPolyRe:
; Line 210
	mov	eax, DWORD PTR _yMin$[ebp]
	cmp	eax, DWORD PTR _y$10081[ebp]
	jle	SHORT $LN2@CalcPolyRe
; Line 211
	mov	eax, DWORD PTR _y$10081[ebp]
	mov	DWORD PTR _yMin$[ebp], eax
$LN2@CalcPolyRe:
; Line 212
	mov	eax, DWORD PTR _yMax$[ebp]
	cmp	eax, DWORD PTR _y$10081[ebp]
	jge	SHORT $LN1@CalcPolyRe
; Line 213
	mov	eax, DWORD PTR _y$10081[ebp]
	mov	DWORD PTR _yMax$[ebp], eax
$LN1@CalcPolyRe:
; Line 214
	mov	eax, DWORD PTR _paPoint$[ebp]
	add	eax, 4
	mov	DWORD PTR _paPoint$[ebp], eax
; Line 215
	jmp	SHORT $LN6@CalcPolyRe
$LN5@CalcPolyRe:
; Line 216
	mov	eax, DWORD PTR _pr$[ebp]
	mov	cx, WORD PTR _xMin$[ebp]
	mov	WORD PTR [eax], cx
; Line 217
	mov	eax, DWORD PTR _pr$[ebp]
	mov	cx, WORD PTR _xMax$[ebp]
	mov	WORD PTR [eax+4], cx
; Line 218
	mov	eax, DWORD PTR _pr$[ebp]
	mov	cx, WORD PTR _yMin$[ebp]
	mov	WORD PTR [eax+2], cx
; Line 219
	mov	eax, DWORD PTR _pr$[ebp]
	mov	cx, WORD PTR _yMax$[ebp]
	mov	WORD PTR [eax+6], cx
; Line 220
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__CalcPolyRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __FillPolygonAA
_TEXT	SEGMENT
_r$ = -12						; size = 8
_pDevice$ = 8						; size = 4
_paPoint$ = 12						; size = 4
_NumPoints$ = 16					; size = 4
_x0$ = 20						; size = 4
_y0$ = 24						; size = 4
__FillPolygonAA PROC					; COMDAT
; Line 239
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 242
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 243
	mov	eax, DWORD PTR _NumPoints$[ebp]
	push	eax
	mov	ecx, DWORD PTR _paPoint$[ebp]
	push	ecx
	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__CalcPolyRect
	add	esp, 12					; 0000000cH
; Line 244
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	call	_GUI_MoveRect
	add	esp, 12					; 0000000cH
; Line 245
	movzx	eax, BYTE PTR _GUI_Context+93
	test	eax, eax
	je	SHORT $LN1@FillPolygo@2
; Line 246
	movzx	ecx, BYTE PTR _GUI_Context+92
	movsx	eax, WORD PTR _r$[ebp]
	cdq
	idiv	ecx
	mov	WORD PTR _r$[ebp], ax
; Line 247
	movzx	ecx, BYTE PTR _GUI_Context+92
	movsx	eax, WORD PTR _r$[ebp+2]
	cdq
	idiv	ecx
	mov	WORD PTR _r$[ebp+2], ax
; Line 248
	movsx	eax, WORD PTR _r$[ebp+4]
	movzx	ecx, BYTE PTR _GUI_Context+92
	lea	eax, DWORD PTR [eax+ecx-1]
	movzx	ecx, BYTE PTR _GUI_Context+92
	cdq
	idiv	ecx
	mov	WORD PTR _r$[ebp+4], ax
; Line 249
	movsx	eax, WORD PTR _r$[ebp+6]
	movzx	ecx, BYTE PTR _GUI_Context+92
	lea	eax, DWORD PTR [eax+ecx-1]
	movzx	ecx, BYTE PTR _GUI_Context+92
	cdq
	idiv	ecx
	mov	WORD PTR _r$[ebp+6], ax
$LN1@FillPolygo@2:
; Line 251
	movsx	eax, WORD PTR _r$[ebp+6]
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+4]
	push	ecx
	movsx	edx, WORD PTR _r$[ebp+2]
	push	edx
	movsx	eax, WORD PTR _r$[ebp]
	push	eax
	call	__MarkRect
	add	esp, 16					; 00000010H
; Line 252
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@FillPolygo@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@FillPolygo@2:
	DD	1
	DD	$LN5@FillPolygo@2
$LN5@FillPolygo@2:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN4@FillPolygo@2
$LN4@FillPolygo@2:
	DB	114					; 00000072H
	DB	0
__FillPolygonAA ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevProp
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevProp PROC					; COMDAT
; Line 290
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 291
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 292
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR _Index$[ebp], eax
; Line 293
	xor	eax, eax
; Line 294
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevProp ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEASDEV_Delete
EXTRN	_GUI_DEVICE_Delete:PROC
EXTRN	_GUI_DEVICE_Unlink:PROC
EXTRN	_GUI_ALLOC_Free:PROC
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_GUI_ALLOC_LockH:PROC
EXTRN	_GUI_SelectLCD:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEASDEV_Delete
_TEXT	SEGMENT
_pDevData$ = -20					; size = 4
_pDevice$ = -8						; size = 4
_hMemDev$ = 8						; size = 4
_GUI_MEASDEV_Delete PROC				; COMDAT
; Line 338
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 345
	mov	eax, DWORD PTR _GUI_Context+76
	xor	ecx, ecx
	cmp	eax, DWORD PTR _hMemDev$[ebp]
	sete	cl
	test	ecx, ecx
	je	SHORT $LN1@GUI_MEASDE
; Line 346
	call	_GUI_SelectLCD
$LN1@GUI_MEASDE:
; Line 349
	mov	eax, DWORD PTR _hMemDev$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pDevData$[ebp], eax
; Line 350
	mov	eax, DWORD PTR _pDevData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 351
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pDevData$[ebp], 0
; Line 352
	mov	eax, DWORD PTR _hMemDev$[ebp]
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
; Line 353
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	_GUI_DEVICE_Unlink
	add	esp, 4
; Line 354
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	_GUI_DEVICE_Delete
	add	esp, 4
; Line 356
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEASDEV_Delete ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEASDEV_ClearRect
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEASDEV_ClearRect
_TEXT	SEGMENT
_pDevData$10165 = -8					; size = 4
_hMemDev$ = 8						; size = 4
_GUI_MEASDEV_ClearRect PROC				; COMDAT
; Line 362
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 363
	cmp	DWORD PTR _hMemDev$[ebp], 0
	je	SHORT $LN2@GUI_MEASDE@2
; Line 366
	mov	eax, DWORD PTR _hMemDev$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDevData$10165[ebp], eax
; Line 367
	mov	eax, 4095				; 00000fffH
	mov	ecx, DWORD PTR _pDevData$10165[ebp]
	mov	WORD PTR [ecx+4], ax
; Line 368
	mov	eax, 4095				; 00000fffH
	mov	ecx, DWORD PTR _pDevData$10165[ebp]
	mov	WORD PTR [ecx+6], ax
; Line 369
	mov	eax, -4095				; fffff001H
	mov	ecx, DWORD PTR _pDevData$10165[ebp]
	mov	WORD PTR [ecx+8], ax
; Line 370
	mov	eax, -4095				; fffff001H
	mov	ecx, DWORD PTR _pDevData$10165[ebp]
	mov	WORD PTR [ecx+10], ax
$LN2@GUI_MEASDE@2:
; Line 373
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEASDEV_ClearRect ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEASDEV_Create
EXTRN	_GUI_Warn:PROC
EXTRN	_GUI_ALLOC_AllocZero:PROC
EXTRN	_GUI_DEVICE_Create:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEASDEV_Create
_TEXT	SEGMENT
_pDevice$ = -44						; size = 4
_pDevData$ = -32					; size = 4
_hMemDev$ = -20						; size = 4
_MemSize$ = -8						; size = 4
_GUI_MEASDEV_Create PROC				; COMDAT
; Line 379
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 385
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	push	0
	movzx	ecx, BYTE PTR _GUI_Context+17
	mov	edx, DWORD PTR _GUI_Context[ecx*4+72]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	push	OFFSET __MeasDev_API
	call	_GUI_DEVICE_Create
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 386
	cmp	DWORD PTR _pDevice$[ebp], 0
	jne	SHORT $LN3@GUI_MEASDE@3
; Line 387
	xor	eax, eax
	jmp	SHORT $LN4@GUI_MEASDE@3
$LN3@GUI_MEASDE@3:
; Line 389
	mov	DWORD PTR _MemSize$[ebp], 24		; 00000018H
; Line 390
	mov	eax, DWORD PTR _MemSize$[ebp]
	push	eax
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hMemDev$[ebp], eax
; Line 391
	cmp	DWORD PTR _hMemDev$[ebp], 0
	je	SHORT $LN2@GUI_MEASDE@3
; Line 393
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR _hMemDev$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 394
	mov	eax, DWORD PTR _hMemDev$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pDevData$[ebp], eax
; Line 395
	mov	eax, DWORD PTR _pDevData$[ebp]
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 396
	mov	eax, DWORD PTR _hMemDev$[ebp]
	push	eax
	call	_GUI_MEASDEV_ClearRect
	add	esp, 4
; Line 397
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pDevData$[ebp], 0
; Line 399
	jmp	SHORT $LN1@GUI_MEASDE@3
$LN2@GUI_MEASDE@3:
; Line 400
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	_GUI_DEVICE_Delete
	add	esp, 4
; Line 401
	push	OFFSET $SG10179
	call	_GUI_Warn
	add	esp, 4
$LN1@GUI_MEASDE@3:
; Line 403
	mov	eax, DWORD PTR _hMemDev$[ebp]
$LN4@GUI_MEASDE@3:
; Line 404
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEASDEV_Create ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEASDEV_Select
EXTRN	_LCD_SetClipRectMax:PROC
EXTRN	_GUI_DEVICE_Link:PROC
EXTRN	_WM_Deactivate:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEASDEV_Select
_TEXT	SEGMENT
_pDevData$ = -8						; size = 4
_hMemDev$ = 8						; size = 4
_GUI_MEASDEV_Select PROC				; COMDAT
; Line 410
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 413
	cmp	DWORD PTR _hMemDev$[ebp], 0
	jne	SHORT $LN2@GUI_MEASDE@4
; Line 414
	call	_GUI_SelectLCD
; Line 415
	jmp	SHORT $LN3@GUI_MEASDE@4
$LN2@GUI_MEASDE@4:
; Line 417
	call	_WM_Deactivate
; Line 419
	mov	eax, DWORD PTR _hMemDev$[ebp]
	mov	DWORD PTR _GUI_Context+76, eax
; Line 421
	mov	eax, DWORD PTR _hMemDev$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pDevData$[ebp], eax
; Line 422
	mov	eax, DWORD PTR _pDevData$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_GUI_DEVICE_Link
	add	esp, 4
; Line 423
	mov	DWORD PTR _GUI_Context+20, 0
; Line 424
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pDevData$[ebp], 0
; Line 426
	call	_LCD_SetClipRectMax
$LN3@GUI_MEASDE@4:
; Line 428
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEASDEV_Select ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEASDEV_GetRect
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEASDEV_GetRect
_TEXT	SEGMENT
_pDev$10195 = -8					; size = 4
_hMem$ = 8						; size = 4
_pRect$ = 12						; size = 4
_GUI_MEASDEV_GetRect PROC				; COMDAT
; Line 434
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 435
	cmp	DWORD PTR _hMem$[ebp], 0
	je	SHORT $LN3@GUI_MEASDE@5
; Line 438
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$10195[ebp], eax
; Line 439
	cmp	DWORD PTR _pRect$[ebp], 0
	je	SHORT $LN3@GUI_MEASDE@5
; Line 440
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	ecx, DWORD PTR _pDev$10195[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax], dx
; Line 441
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	ecx, DWORD PTR _pDev$10195[ebp]
	mov	dx, WORD PTR [ecx+6]
	mov	WORD PTR [eax+2], dx
; Line 442
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	ecx, DWORD PTR _pDev$10195[ebp]
	mov	dx, WORD PTR [ecx+8]
	mov	WORD PTR [eax+4], dx
; Line 443
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	ecx, DWORD PTR _pDev$10195[ebp]
	mov	dx, WORD PTR [ecx+10]
	mov	WORD PTR [eax+6], dx
$LN3@GUI_MEASDE@5:
; Line 447
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEASDEV_GetRect ENDP
_TEXT	ENDS
END
