; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI__Read.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI__Read16
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui__read.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI__Read16
_TEXT	SEGMENT
_Value$ = -20						; size = 2
_pData$ = -8						; size = 4
_ppData$ = 8						; size = 4
_GUI__Read16 PROC					; COMDAT
; Line 35
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 38
	mov	eax, DWORD PTR _ppData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pData$[ebp], ecx
; Line 39
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	cx, BYTE PTR [eax]
	mov	WORD PTR _Value$[ebp], cx
; Line 40
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 8
	movzx	edx, cx
	movzx	eax, WORD PTR _Value$[ebp]
	or	eax, edx
	mov	WORD PTR _Value$[ebp], ax
; Line 41
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 2
	mov	DWORD PTR _pData$[ebp], eax
; Line 42
	mov	eax, DWORD PTR _ppData$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 43
	mov	ax, WORD PTR _Value$[ebp]
; Line 44
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI__Read16 ENDP
_TEXT	ENDS
PUBLIC	_GUI__Read32
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI__Read32
_TEXT	SEGMENT
_Value$ = -20						; size = 4
_pData$ = -8						; size = 4
_ppData$ = 8						; size = 4
_GUI__Read32 PROC					; COMDAT
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 53
	mov	eax, DWORD PTR _ppData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pData$[ebp], ecx
; Line 54
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Value$[ebp], ecx
; Line 55
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 8
	or	ecx, DWORD PTR _Value$[ebp]
	mov	DWORD PTR _Value$[ebp], ecx
; Line 56
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 16					; 00000010H
	or	ecx, DWORD PTR _Value$[ebp]
	mov	DWORD PTR _Value$[ebp], ecx
; Line 57
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	shl	ecx, 24					; 00000018H
	or	ecx, DWORD PTR _Value$[ebp]
	mov	DWORD PTR _Value$[ebp], ecx
; Line 58
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 4
	mov	DWORD PTR _pData$[ebp], eax
; Line 59
	mov	eax, DWORD PTR _ppData$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 60
	mov	eax, DWORD PTR _Value$[ebp]
; Line 61
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI__Read32 ENDP
_TEXT	ENDS
END
