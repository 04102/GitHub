; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\WM\WM_Move.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_WM__MoveWindow
EXTRN	_WM__SendMsgNoData:PROC
EXTRN	_WM__InvalidateParent:PROC
EXTRN	_GUI_MoveRect:PROC
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\wm\wm_move.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _WM__MoveWindow
_TEXT	SEGMENT
_pWin$ = -24						; size = 4
_r$ = -12						; size = 8
_hWin$ = 8						; size = 4
_dx$ = 12						; size = 4
_dy$ = 16						; size = 4
_WM__MoveWindow PROC					; COMDAT
; Line 69
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 73
	cmp	DWORD PTR _hWin$[ebp], 0
	je	$LN4@WM__MoveWi
	cmp	DWORD PTR _dx$[ebp], 0
	jne	SHORT $LN2@WM__MoveWi
	cmp	DWORD PTR _dy$[ebp], 0
	je	$LN4@WM__MoveWi
$LN2@WM__MoveWi:
; Line 74
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 75
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _r$[ebp], ecx
	mov	DWORD PTR _r$[ebp+4], edx
; Line 76
	mov	eax, DWORD PTR _dy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pWin$[ebp]
	push	edx
	call	_GUI_MoveRect
	add	esp, 12					; 0000000cH
; Line 77
	mov	eax, DWORD PTR _dy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pWin$[ebp]
	add	edx, 8
	push	edx
	call	_GUI_MoveRect
	add	esp, 12					; 0000000cH
; Line 78
	mov	eax, DWORD PTR _dy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pWin$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	__MoveDescendents
	add	esp, 12					; 0000000cH
; Line 82
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 2
	je	SHORT $LN1@WM__MoveWi
	mov	eax, DWORD PTR _pWin$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN1@WM__MoveWi
; Line 83
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _pWin$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _pWin$[ebp]
	push	ecx
	call	_WM__InvalidateParent
	add	esp, 12					; 0000000cH
; Line 84
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _pWin$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	_WM__InvalidateParent
	add	esp, 12					; 0000000cH
$LN1@WM__MoveWi:
; Line 86
	push	3
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM__SendMsgNoData
	add	esp, 8
$LN4@WM__MoveWi:
; Line 88
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@WM__MoveWi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@WM__MoveWi:
	DD	1
	DD	$LN7@WM__MoveWi
$LN7@WM__MoveWi:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN6@WM__MoveWi
$LN6@WM__MoveWi:
	DB	114					; 00000072H
	DB	0
_WM__MoveWindow ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __MoveDescendents
_TEXT	SEGMENT
_pWin$ = -8						; size = 4
_hWin$ = 8						; size = 4
_dx$ = 12						; size = 4
_dy$ = 16						; size = 4
__MoveDescendents PROC					; COMDAT
; Line 47
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 50
	jmp	SHORT $LN3@MoveDescen
$LN2@MoveDescen:
	mov	eax, DWORD PTR _pWin$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _hWin$[ebp], ecx
$LN3@MoveDescen:
	cmp	DWORD PTR _hWin$[ebp], 0
	je	SHORT $LN4@MoveDescen
; Line 51
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$[ebp], eax
; Line 52
	mov	eax, DWORD PTR _dy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pWin$[ebp]
	push	edx
	call	_GUI_MoveRect
	add	esp, 12					; 0000000cH
; Line 53
	mov	eax, DWORD PTR _dy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pWin$[ebp]
	add	edx, 8
	push	edx
	call	_GUI_MoveRect
	add	esp, 12					; 0000000cH
; Line 54
	mov	eax, DWORD PTR _dy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pWin$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	__MoveDescendents
	add	esp, 12					; 0000000cH
; Line 55
	push	3
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM__SendMsgNoData
	add	esp, 8
; Line 56
	jmp	SHORT $LN2@MoveDescen
$LN4@MoveDescen:
; Line 57
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__MoveDescendents ENDP
_TEXT	ENDS
PUBLIC	_WM__MoveTo
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__MoveTo
_TEXT	SEGMENT
_pWin$9465 = -8						; size = 4
_hWin$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_WM__MoveTo PROC					; COMDAT
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 95
	cmp	DWORD PTR _hWin$[ebp], 0
	je	SHORT $LN2@WM__MoveTo
; Line 96
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$9465[ebp], eax
; Line 97
	mov	eax, DWORD PTR _pWin$9465[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _x$[ebp], edx
; Line 98
	mov	eax, DWORD PTR _pWin$9465[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _y$[ebp], edx
; Line 99
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWin$[ebp]
	push	edx
	call	_WM__MoveWindow
	add	esp, 12					; 0000000cH
$LN2@WM__MoveTo:
; Line 101
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__MoveTo ENDP
_TEXT	ENDS
PUBLIC	_WM_MoveWindow
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_MoveWindow
_TEXT	SEGMENT
_hWin$ = 8						; size = 4
_dx$ = 12						; size = 4
_dy$ = 16						; size = 4
_WM_MoveWindow PROC					; COMDAT
; Line 113
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 115
	mov	eax, DWORD PTR _dy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWin$[ebp]
	push	edx
	call	_WM__MoveWindow
	add	esp, 12					; 0000000cH
; Line 117
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_MoveWindow ENDP
_TEXT	ENDS
PUBLIC	_WM_MoveTo
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_MoveTo
_TEXT	SEGMENT
_hWin$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_WM_MoveTo PROC						; COMDAT
; Line 123
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 125
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWin$[ebp]
	push	edx
	call	_WM__MoveTo
	add	esp, 12					; 0000000cH
; Line 127
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_MoveTo ENDP
_TEXT	ENDS
END
