; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Widget\MULTIEDIT.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

EXTRN	_GUI_Font13_1:BYTE
_BSS	SEGMENT
__aDefaultColor DD 02H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
__aDefaultBkColor DD 0ffffffH
	DD	0c0c0c0H
__pDefaultFont DD FLAT:_GUI_Font13_1
$SG17480 DB	'MULTIEDIT.c: Wrong handle type or Object not init''ed', 00H
	ORG $+3
$SG17566 DB	'MULTIEDIT_CreateEx failed to alloc buffer', 00H
	ORG $+2
$SG17569 DB	'MULTIEDIT_CreateEx failed', 00H
	ORG $+2
$SG17761 DB	'MULTIEDIT_SetBufferSize failed to alloc buffer', 00H
_DATA	ENDS
PUBLIC	_MULTIEDIT_LockH
EXTRN	_GUI_ErrorOut:PROC
EXTRN	_GUI_ALLOC_LockH:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\widget\multiedit.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _MULTIEDIT_LockH
_TEXT	SEGMENT
_p$ = -8						; size = 4
_h$ = 8							; size = 4
_MULTIEDIT_LockH PROC					; COMDAT
; Line 1689
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1690
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 1691
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@MULTIEDIT_
; Line 1692
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+148], 1297435717		; 4d554c45H
	je	SHORT $LN2@MULTIEDIT_
; Line 1693
	push	OFFSET $SG17480
	call	_GUI_ErrorOut
	add	esp, 4
; Line 1694
	xor	eax, eax
	jmp	SHORT $LN3@MULTIEDIT_
$LN2@MULTIEDIT_:
; Line 1697
	mov	eax, DWORD PTR _p$[ebp]
$LN3@MULTIEDIT_:
; Line 1698
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_LockH ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_MULTIEDIT_Callback
EXTRN	_WM_DefaultProc:PROC
EXTRN	_GUI_ALLOC_FreePtr:PROC
EXTRN	_WM_GetScrollbarH:PROC
EXTRN	_WM_NotifyParent:PROC
EXTRN	_WM_InvalidateWindow:PROC
EXTRN	_WM_GetScrollState:PROC
EXTRN	_WM_GetScrollbarV:PROC
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_WM_RestartTimer:PROC
EXTRN	_WM_SelectWindow:PROC
EXTRN	_WIDGET_HandleActive:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_Callback
_TEXT	SEGMENT
tv88 = -256						; size = 4
tv71 = -256						; size = 4
_Key$17518 = -56					; size = 4
_ScrollState$ = -44					; size = 12
_pObj$ = -24						; size = 4
_hObj$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pMsg$ = 8						; size = 4
_MULTIEDIT_Callback PROC				; COMDAT
; Line 1711
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1715
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _hObj$[ebp], ecx
; Line 1717
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WIDGET_HandleActive
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN23@MULTIEDIT_@2
; Line 1718
	jmp	$LN24@MULTIEDIT_@2
$LN23@MULTIEDIT_@2:
; Line 1720
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1721
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv71[ebp], ecx
	cmp	DWORD PTR tv71[ebp], 11			; 0000000bH
	jg	SHORT $LN26@MULTIEDIT_@2
	cmp	DWORD PTR tv71[ebp], 11			; 0000000bH
	je	$LN7@MULTIEDIT_@2
	cmp	DWORD PTR tv71[ebp], 5
	je	$LN18@MULTIEDIT_@2
	jmp	$LN21@MULTIEDIT_@2
$LN26@MULTIEDIT_@2:
	cmp	DWORD PTR tv71[ebp], 37			; 00000025H
	jg	SHORT $LN27@MULTIEDIT_@2
	cmp	DWORD PTR tv71[ebp], 37			; 00000025H
	je	SHORT $LN19@MULTIEDIT_@2
	cmp	DWORD PTR tv71[ebp], 12			; 0000000cH
	je	$LN8@MULTIEDIT_@2
	cmp	DWORD PTR tv71[ebp], 14			; 0000000eH
	je	$LN6@MULTIEDIT_@2
	cmp	DWORD PTR tv71[ebp], 15			; 0000000fH
	je	$LN9@MULTIEDIT_@2
	jmp	$LN21@MULTIEDIT_@2
$LN27@MULTIEDIT_@2:
	cmp	DWORD PTR tv71[ebp], 38			; 00000026H
	je	$LN17@MULTIEDIT_@2
	cmp	DWORD PTR tv71[ebp], 275		; 00000113H
	je	SHORT $LN20@MULTIEDIT_@2
	jmp	$LN21@MULTIEDIT_@2
$LN20@MULTIEDIT_@2:
; Line 1723
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_SelectWindow
	add	esp, 4
; Line 1724
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__InvertCursor
	add	esp, 4
; Line 1725
	push	0
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_WM_RestartTimer
	add	esp, 8
; Line 1726
	jmp	$LN21@MULTIEDIT_@2
$LN19@MULTIEDIT_@2:
; Line 1728
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateCursorXY
	add	esp, 4
; Line 1729
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateNumLines
	add	esp, 4
; Line 1730
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateTextSizeX
	add	esp, 4
; Line 1731
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__ClearCache
	add	esp, 4
; Line 1732
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1733
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__CalcScrollParas
	add	esp, 4
; Line 1734
	jmp	$LN21@MULTIEDIT_@2
$LN18@MULTIEDIT_@2:
; Line 1736
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateCursorXY
	add	esp, 4
; Line 1737
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateNumLines
	add	esp, 4
; Line 1738
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateTextSizeX
	add	esp, 4
; Line 1739
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__ClearCache
	add	esp, 4
; Line 1740
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1741
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__Invalidate
	add	esp, 4
; Line 1742
	jmp	$LN21@MULTIEDIT_@2
$LN17@MULTIEDIT_@2:
; Line 1744
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv88[ebp], ecx
	cmp	DWORD PTR tv88[ebp], 5
	je	SHORT $LN14@MULTIEDIT_@2
	cmp	DWORD PTR tv88[ebp], 6
	je	$LN10@MULTIEDIT_@2
	jmp	$LN15@MULTIEDIT_@2
$LN14@MULTIEDIT_@2:
; Line 1746
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetScrollbarV
	add	esp, 4
	mov	ecx, DWORD PTR _pMsg$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN13@MULTIEDIT_@2
; Line 1747
	lea	eax, DWORD PTR _ScrollState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMsg$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_WM_GetScrollState
	add	esp, 8
; Line 1748
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _ScrollState$[ebp+4]
	mov	DWORD PTR [eax+112], ecx
; Line 1749
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1750
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 1751
	push	10					; 0000000aH
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_NotifyParent
	add	esp, 8
	jmp	SHORT $LN12@MULTIEDIT_@2
$LN13@MULTIEDIT_@2:
; Line 1752
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetScrollbarH
	add	esp, 4
	mov	ecx, DWORD PTR _pMsg$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN12@MULTIEDIT_@2
; Line 1753
	lea	eax, DWORD PTR _ScrollState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMsg$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_WM_GetScrollState
	add	esp, 8
; Line 1754
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _ScrollState$[ebp+4]
	mov	DWORD PTR [eax+124], ecx
; Line 1755
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1756
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 1757
	push	10					; 0000000aH
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_NotifyParent
	add	esp, 8
$LN12@MULTIEDIT_@2:
; Line 1759
	jmp	SHORT $LN15@MULTIEDIT_@2
$LN10@MULTIEDIT_@2:
; Line 1764
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1765
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__SetScrollState
	add	esp, 4
$LN15@MULTIEDIT_@2:
; Line 1768
	jmp	$LN21@MULTIEDIT_@2
$LN9@MULTIEDIT_@2:
; Line 1770
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__MULTIEDIT_Paint
	add	esp, 8
; Line 1771
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1772
	jmp	$LN24@MULTIEDIT_@2
$LN8@MULTIEDIT_@2:
; Line 1774
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__OnTouch
	add	esp, 12					; 0000000cH
; Line 1775
	jmp	SHORT $LN21@MULTIEDIT_@2
$LN7@MULTIEDIT_@2:
; Line 1777
	mov	eax, DWORD PTR _pObj$[ebp]
	add	eax, 72					; 00000048H
	push	eax
	call	_GUI_ALLOC_FreePtr
	add	esp, 4
; Line 1778
	jmp	SHORT $LN21@MULTIEDIT_@2
$LN6@MULTIEDIT_@2:
; Line 1780
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+4], 0
	jle	SHORT $LN5@MULTIEDIT_@2
; Line 1781
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _Key$17518[ebp], edx
; Line 1790
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1791
	movzx	eax, WORD PTR _Key$17518[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__AddKey
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@MULTIEDIT_@2
; Line 1792
	jmp	SHORT $LN24@MULTIEDIT_@2
$LN4@MULTIEDIT_@2:
; Line 1794
	jmp	SHORT $LN21@MULTIEDIT_@2
$LN5@MULTIEDIT_@2:
; Line 1795
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, 1
	jne	SHORT $LN21@MULTIEDIT_@2
; Line 1796
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1797
	jmp	SHORT $LN24@MULTIEDIT_@2
$LN21@MULTIEDIT_@2:
; Line 1801
	cmp	DWORD PTR _pObj$[ebp], 0
	je	SHORT $LN1@MULTIEDIT_@2
; Line 1802
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN1@MULTIEDIT_@2:
; Line 1804
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN24@MULTIEDIT_@2:
; Line 1805
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@MULTIEDIT_@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN30@MULTIEDIT_@2:
	DD	1
	DD	$LN29@MULTIEDIT_@2
$LN29@MULTIEDIT_@2:
	DD	-44					; ffffffd4H
	DD	12					; 0000000cH
	DD	$LN28@MULTIEDIT_@2
$LN28@MULTIEDIT_@2:
	DB	83					; 00000053H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_MULTIEDIT_Callback ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __ClearCache
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
__ClearCache PROC					; COMDAT
; Line 366
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 367
	xor	eax, eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	WORD PTR [ecx+100], ax
; Line 368
	xor	eax, eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	WORD PTR [ecx+98], ax
; Line 369
	xor	eax, eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	WORD PTR [ecx+104], ax
; Line 370
	xor	eax, eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	WORD PTR [ecx+102], ax
; Line 371
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__ClearCache ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __InvalidateCursorXY
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
__InvalidateCursorXY PROC				; COMDAT
; Line 456
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 457
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+137]
	or	ecx, 8
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	BYTE PTR [edx+137], cl
; Line 458
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__InvalidateCursorXY ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_WIDGET__SetScrollState:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __SetScrollState
_TEXT	SEGMENT
_ScrollStateH$ = -52					; size = 12
_ScrollStateV$ = -32					; size = 12
_pObj$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_hObj$ = 8						; size = 4
__SetScrollState PROC					; COMDAT
; Line 464
	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 467
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 468
	mov	eax, DWORD PTR _pObj$[ebp]
	add	eax, 108				; 0000006cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ScrollStateV$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _ScrollStateV$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _ScrollStateV$[ebp+8], eax
; Line 469
	mov	eax, DWORD PTR _pObj$[ebp]
	add	eax, 120				; 00000078H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ScrollStateH$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _ScrollStateH$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _ScrollStateH$[ebp+8], eax
; Line 470
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 471
	lea	eax, DWORD PTR _ScrollStateH$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ScrollStateV$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_WIDGET__SetScrollState
	add	esp, 12					; 0000000cH
; Line 472
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SetScrollS
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@SetScrollS:
	DD	2
	DD	$LN5@SetScrollS
$LN5@SetScrollS:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN3@SetScrollS
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN4@SetScrollS
$LN4@SetScrollS:
	DB	83					; 00000053H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	72					; 00000048H
	DB	0
$LN3@SetScrollS:
	DB	83					; 00000053H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	86					; 00000056H
	DB	0
__SetScrollState ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __InvalidateNumLines
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
__InvalidateNumLines PROC				; COMDAT
; Line 586
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 587
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+137]
	or	ecx, 2
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	BYTE PTR [edx+137], cl
; Line 588
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__InvalidateNumLines ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __InvalidateTextSizeX
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
__InvalidateTextSizeX PROC				; COMDAT
; Line 596
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 597
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+137]
	or	ecx, 4
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	BYTE PTR [edx+137], cl
; Line 598
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__InvalidateTextSizeX ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __CalcScrollParas
_TEXT	SEGMENT
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__CalcScrollParas PROC					; COMDAT
; Line 607
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 609
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 611
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetNumLines
	add	esp, 8
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [edx+108], eax
; Line 612
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetNumVisLines
	add	esp, 8
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [edx+116], eax
; Line 614
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetTextSizeX
	add	esp, 8
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [edx+120], eax
; Line 615
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetXSize
	add	esp, 8
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [edx+128], eax
; Line 616
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 617
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__CalcScrollPos
	add	esp, 4
; Line 618
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__CalcScrollParas ENDP
_TEXT	ENDS
EXTRN	_WM_GetInsideRectExScrollbar:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetXSize
_TEXT	SEGMENT
_Rect$ = -12						; size = 8
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
__GetXSize PROC						; COMDAT
; Line 199
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 201
	lea	eax, DWORD PTR _Rect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_GetInsideRectExScrollbar
	add	esp, 8
; Line 202
	movsx	eax, WORD PTR _Rect$[ebp+4]
	movsx	ecx, WORD PTR _Rect$[ebp]
	sub	eax, ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [edx+139]
	shl	ecx, 1
	sub	eax, ecx
	sub	eax, 1
; Line 203
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GetXSize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@GetXSize:
	DD	1
	DD	$LN4@GetXSize
$LN4@GetXSize:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@GetXSize
$LN3@GetXSize:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
__GetXSize ENDP
_TEXT	ENDS
EXTRN	_WM_CheckScrollPos:PROC
EXTRN	_GUI_GetYDistOfFont:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __CalcScrollPos
_TEXT	SEGMENT
_yCursor$ = -32						; size = 4
_xCursor$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__CalcScrollPos PROC					; COMDAT
; Line 484
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 487
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 488
	lea	eax, DWORD PTR _yCursor$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xCursor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__GetCursorXY
	add	esp, 16					; 00000010H
; Line 489
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	call	_GUI_GetYDistOfFont
	add	esp, 4
	mov	ecx, eax
	mov	eax, DWORD PTR _yCursor$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _yCursor$[ebp], eax
; Line 490
	push	0
	push	0
	mov	eax, DWORD PTR _yCursor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_WM_CheckScrollPos
	add	esp, 16					; 00000010H
; Line 491
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+106]
	cmp	ecx, 1
	jne	SHORT $LN1@CalcScroll
; Line 492
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetXSize
	add	esp, 8
	sub	eax, DWORD PTR _xCursor$[ebp]
	mov	DWORD PTR _xCursor$[ebp], eax
$LN1@CalcScroll:
; Line 494
	push	30					; 0000001eH
	push	30					; 0000001eH
	mov	eax, DWORD PTR _xCursor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	add	ecx, 120				; 00000078H
	push	ecx
	call	_WM_CheckScrollPos
	add	esp, 16					; 00000010H
; Line 495
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 496
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__SetScrollState
	add	esp, 4
; Line 497
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@CalcScroll
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@CalcScroll:
	DD	2
	DD	$LN6@CalcScroll
$LN6@CalcScroll:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@CalcScroll
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@CalcScroll
$LN5@CalcScroll:
	DB	121					; 00000079H
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN4@CalcScroll:
	DB	120					; 00000078H
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
__CalcScrollPos ENDP
_TEXT	ENDS
EXTRN	_GUI_GetFontDistY:PROC
EXTRN	_GUI__GetLineDistX:PROC
EXTRN	_GUI__GetCursorPosX:PROC
EXTRN	_GUI_UC_GetCharSize:PROC
EXTRN	_GUI_SetFont:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetCursorXY
_TEXT	SEGMENT
_NumCharsToNextLine$16859 = -92				; size = 4
_NumChars$16858 = -80					; size = 4
_p$16857 = -68						; size = 4
_xSize$16856 = -56					; size = 4
_pCursor$16848 = -44					; size = 4
_pLine$16847 = -32					; size = 4
_x$16845 = -20						; size = 4
_CursorLine$16844 = -8					; size = 4
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
_px$ = 16						; size = 4
_py$ = 20						; size = 4
__GetCursorXY PROC					; COMDAT
; Line 409
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 410
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+137]
	and	ecx, 8
	je	$LN9@GetCursorX
; Line 411
	mov	DWORD PTR _CursorLine$16844[ebp], 0
	mov	DWORD PTR _x$16845[ebp], 0
; Line 412
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	call	_GUI_SetFont
	add	esp, 4
; Line 413
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN8@GetCursorX
; Line 416
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pLine$16847[ebp], eax
; Line 417
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+92]
	add	ecx, DWORD PTR _pLine$16847[ebp]
	mov	DWORD PTR _pCursor$16848[ebp], ecx
; Line 418
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+88]
	mov	DWORD PTR _CursorLine$16844[ebp], ecx
; Line 419
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pLine$16847[ebp], 0
; Line 420
	mov	eax, DWORD PTR _CursorLine$16844[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__GetpLineLocked
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pLine$16847[ebp], eax
; Line 421
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, 32					; 00000020H
	je	SHORT $LN7@GetCursorX
$LN6@GetCursorX:
; Line 422
	mov	eax, DWORD PTR _pLine$16847[ebp]
	cmp	eax, DWORD PTR _pCursor$16848[ebp]
	jae	SHORT $LN5@GetCursorX
; Line 423
	mov	eax, DWORD PTR _pLine$16847[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__GetCharDistX
	add	esp, 8
	add	eax, DWORD PTR _x$16845[ebp]
	mov	DWORD PTR _x$16845[ebp], eax
; Line 424
	mov	eax, DWORD PTR _pLine$16847[ebp]
	push	eax
	call	_GUI_UC_GetCharSize
	add	esp, 4
	add	eax, DWORD PTR _pLine$16847[ebp]
	mov	DWORD PTR _pLine$16847[ebp], eax
; Line 425
	jmp	SHORT $LN6@GetCursorX
$LN5@GetCursorX:
; Line 426
	jmp	$LN4@GetCursorX
$LN7@GetCursorX:
; Line 429
	mov	DWORD PTR _NumChars$16858[ebp], 0
; Line 430
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetXSize
	add	esp, 8
	mov	DWORD PTR _xSize$16856[ebp], eax
; Line 431
	mov	eax, DWORD PTR _pLine$16847[ebp]
	mov	DWORD PTR _p$16857[ebp], eax
$LN3@GetCursorX:
; Line 432
	mov	eax, DWORD PTR _pLine$16847[ebp]
	cmp	eax, DWORD PTR _pCursor$16848[ebp]
	jae	SHORT $LN2@GetCursorX
; Line 433
	mov	eax, DWORD PTR _NumChars$16858[ebp]
	add	eax, 1
	mov	DWORD PTR _NumChars$16858[ebp], eax
; Line 434
	mov	eax, DWORD PTR _pLine$16847[ebp]
	push	eax
	call	_GUI_UC_GetCharSize
	add	esp, 4
	add	eax, DWORD PTR _pLine$16847[ebp]
	mov	DWORD PTR _pLine$16847[ebp], eax
; Line 435
	jmp	SHORT $LN3@GetCursorX
$LN2@GetCursorX:
; Line 436
	mov	eax, DWORD PTR _p$16857[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__WrapGetNumCharsDisp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _NumCharsToNextLine$16859[ebp], eax
; Line 437
	mov	eax, DWORD PTR _NumCharsToNextLine$16859[ebp]
	push	eax
	mov	ecx, DWORD PTR _NumChars$16858[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$16857[ebp]
	push	edx
	call	_GUI__GetCursorPosX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _x$16845[ebp], eax
; Line 438
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+106]
	cmp	ecx, 1
	jne	SHORT $LN4@GetCursorX
; Line 439
	mov	eax, DWORD PTR _NumCharsToNextLine$16859[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$16857[ebp]
	push	ecx
	call	_GUI__GetLineDistX
	add	esp, 8
	mov	edx, DWORD PTR _xSize$16856[ebp]
	sub	edx, eax
	add	edx, DWORD PTR _x$16845[ebp]
	mov	DWORD PTR _x$16845[ebp], edx
$LN4@GetCursorX:
; Line 442
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pLine$16847[ebp], 0
$LN8@GetCursorX:
; Line 444
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	cx, WORD PTR _x$16845[ebp]
	mov	WORD PTR [eax+94], cx
; Line 445
	call	_GUI_GetFontDistY
	imul	eax, DWORD PTR _CursorLine$16844[ebp]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	WORD PTR [ecx+96], ax
; Line 446
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+137]
	and	ecx, -9					; fffffff7H
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	BYTE PTR [edx+137], cl
$LN9@GetCursorX:
; Line 448
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+94]
	mov	edx, DWORD PTR _px$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 449
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+96]
	mov	edx, DWORD PTR _py$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 450
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetCursorXY ENDP
_TEXT	ENDS
EXTRN	_GUI_GetCharDistX:PROC
EXTRN	_GUI_UC__GetCharCodeInc:PROC
EXTRN	_GUI_UC__NumChars2NumBytes:PROC
EXTRN	_GUI__GetNumChars:PROC
EXTRN	_GUI__WrapGetNumCharsDisp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __WrapGetNumCharsDisp
_TEXT	SEGMENT
tv81 = -244						; size = 4
_x$16731 = -44						; size = 4
_NumCharsPrompt$16729 = -32				; size = 4
_r$ = -20						; size = 4
_xSize$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
_pText$ = 16						; size = 4
__WrapGetNumCharsDisp PROC				; COMDAT
; Line 225
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 227
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetXSize
	add	esp, 8
	mov	DWORD PTR _xSize$[ebp], eax
; Line 228
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, 32					; 00000020H
	je	$LN10@WrapGetNum
; Line 230
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__GetNumCharsInPrompt
	add	esp, 8
	mov	DWORD PTR _NumCharsPrompt$16729[ebp], eax
; Line 231
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	push	ecx
	mov	edx, DWORD PTR _xSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	call	_GUI__WrapGetNumCharsDisp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r$[ebp], eax
; Line 232
	mov	eax, DWORD PTR _r$[ebp]
	cmp	eax, DWORD PTR _NumCharsPrompt$16729[ebp]
	jl	$LN9@WrapGetNum
; Line 234
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	mov	DWORD PTR tv81[ebp], ecx
	cmp	DWORD PTR tv81[ebp], 0
	je	SHORT $LN6@WrapGetNum
	jmp	SHORT $LN5@WrapGetNum
$LN6@WrapGetNum:
; Line 236
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	call	_GUI__GetNumChars
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax
; Line 237
	jmp	SHORT $LN9@WrapGetNum
$LN5@WrapGetNum:
; Line 239
	mov	eax, DWORD PTR _NumCharsPrompt$16729[ebp]
	mov	DWORD PTR _r$[ebp], eax
; Line 240
	mov	eax, DWORD PTR _NumCharsPrompt$16729[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	_GUI__GetLineDistX
	add	esp, 8
	mov	DWORD PTR _x$16731[ebp], eax
; Line 241
	mov	eax, DWORD PTR _NumCharsPrompt$16729[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	add	eax, DWORD PTR _pText$[ebp]
	mov	DWORD PTR _pText$[ebp], eax
$LN4@WrapGetNum:
; Line 242
	lea	eax, DWORD PTR _pText$[ebp]
	push	eax
	call	_GUI_UC__GetCharCodeInc
	add	esp, 4
	movzx	ecx, ax
	test	ecx, ecx
	je	SHORT $LN9@WrapGetNum
; Line 243
	push	42					; 0000002aH
	call	_GUI_GetCharDistX
	add	esp, 4
	add	eax, DWORD PTR _x$16731[ebp]
	mov	DWORD PTR _x$16731[ebp], eax
; Line 244
	cmp	DWORD PTR _r$[ebp], 0
	je	SHORT $LN2@WrapGetNum
	mov	eax, DWORD PTR _x$16731[ebp]
	cmp	eax, DWORD PTR _xSize$[ebp]
	jle	SHORT $LN2@WrapGetNum
; Line 245
	jmp	SHORT $LN9@WrapGetNum
$LN2@WrapGetNum:
; Line 247
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 1
	mov	DWORD PTR _r$[ebp], eax
; Line 248
	jmp	SHORT $LN4@WrapGetNum
$LN9@WrapGetNum:
; Line 252
	jmp	SHORT $LN1@WrapGetNum
$LN10@WrapGetNum:
; Line 253
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	push	ecx
	mov	edx, DWORD PTR _xSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	call	_GUI__WrapGetNumCharsDisp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r$[ebp], eax
$LN1@WrapGetNum:
; Line 255
	mov	eax, DWORD PTR _r$[ebp]
; Line 256
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__WrapGetNumCharsDisp ENDP
_TEXT	ENDS
EXTRN	_GUI_UC__NumBytes2NumChars:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetNumCharsInPrompt
_TEXT	SEGMENT
_r$ = -32						; size = 4
_pEndPrompt$ = -20					; size = 4
_pString$ = -8						; size = 4
_pObj$ = 8						; size = 4
_pText$ = 12						; size = 4
__GetNumCharsInPrompt PROC				; COMDAT
; Line 209
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 211
	mov	DWORD PTR _r$[ebp], 0
; Line 212
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pString$[ebp], eax
; Line 213
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _pString$[ebp]
	push	edx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	add	eax, DWORD PTR _pString$[ebp]
	mov	DWORD PTR _pEndPrompt$[ebp], eax
; Line 214
	mov	eax, DWORD PTR _pText$[ebp]
	cmp	eax, DWORD PTR _pEndPrompt$[ebp]
	jae	SHORT $LN1@GetNumChar
; Line 215
	mov	eax, DWORD PTR _pEndPrompt$[ebp]
	sub	eax, DWORD PTR _pText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	_GUI_UC__NumBytes2NumChars
	add	esp, 8
	mov	DWORD PTR _r$[ebp], eax
$LN1@GetNumChar:
; Line 217
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pString$[ebp], 0
; Line 218
	mov	eax, DWORD PTR _r$[ebp]
; Line 219
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetNumCharsInPrompt ENDP
_TEXT	ENDS
EXTRN	_GUI_UC_GetCharCode:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetCharDistX
_TEXT	SEGMENT
_c$16768 = -20						; size = 2
_r$ = -8						; size = 4
_pObj$ = 8						; size = 4
_pText$ = 12						; size = 4
__GetCharDistX PROC					; COMDAT
; Line 285
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 287
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, 32					; 00000020H
	je	SHORT $LN2@GetCharDis
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__GetNumCharsInPrompt
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@GetCharDis
; Line 288
	push	42					; 0000002aH
	call	_GUI_GetCharDistX
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax
; Line 289
	jmp	SHORT $LN1@GetCharDis
$LN2@GetCharDis:
; Line 291
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	call	_GUI_UC_GetCharCode
	add	esp, 4
	mov	WORD PTR _c$16768[ebp], ax
; Line 292
	movzx	eax, WORD PTR _c$16768[ebp]
	push	eax
	call	_GUI_GetCharDistX
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax
$LN1@GetCharDis:
; Line 294
	mov	eax, DWORD PTR _r$[ebp]
; Line 295
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetCharDistX ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetpLineLocked
_TEXT	SEGMENT
tv82 = -232						; size = 4
_OldNumber$16803 = -32					; size = 4
_pLine$ = -20						; size = 4
_pText$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
_LineNumber$ = 16					; size = 4
__GetpLineLocked PROC					; COMDAT
; Line 336
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 338
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$[ebp], eax
; Line 339
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+100]
	cmp	ecx, DWORD PTR _LineNumber$[ebp]
	je	$LN5@GetpLineLo
; Line 340
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+100]
	cmp	DWORD PTR _LineNumber$[ebp], ecx
	jbe	SHORT $LN4@GetpLineLo
; Line 342
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+100]
	mov	DWORD PTR _OldNumber$16803[ebp], ecx
; Line 343
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+98]
	add	ecx, DWORD PTR _pText$[ebp]
	mov	DWORD PTR _pLine$[ebp], ecx
; Line 344
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	cx, WORD PTR _LineNumber$[ebp]
	mov	WORD PTR [eax+100], cx
; Line 345
	mov	eax, DWORD PTR _LineNumber$[ebp]
	sub	eax, DWORD PTR _OldNumber$16803[ebp]
	mov	DWORD PTR _LineNumber$[ebp], eax
; Line 346
	jmp	SHORT $LN2@GetpLineLo
$LN4@GetpLineLo:
; Line 348
	mov	eax, DWORD PTR _pText$[ebp]
	mov	DWORD PTR _pLine$[ebp], eax
; Line 349
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	cx, WORD PTR _LineNumber$[ebp]
	mov	WORD PTR [eax+100], cx
$LN2@GetpLineLo:
; Line 351
	mov	eax, DWORD PTR _LineNumber$[ebp]
	mov	DWORD PTR tv82[ebp], eax
	mov	ecx, DWORD PTR _LineNumber$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _LineNumber$[ebp], ecx
	cmp	DWORD PTR tv82[ebp], 0
	je	SHORT $LN1@GetpLineLo
; Line 352
	mov	eax, DWORD PTR _pLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__WrapGetNumBytesToNextLine
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _pLine$[ebp]
	mov	DWORD PTR _pLine$[ebp], eax
; Line 353
	jmp	SHORT $LN2@GetpLineLo
$LN1@GetpLineLo:
; Line 354
	mov	eax, DWORD PTR _pLine$[ebp]
	sub	eax, DWORD PTR _pText$[ebp]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	WORD PTR [ecx+98], ax
$LN5@GetpLineLo:
; Line 356
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	eax, WORD PTR [eax+98]
	add	eax, DWORD PTR _pText$[ebp]
; Line 357
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetpLineLocked ENDP
_TEXT	ENDS
EXTRN	_GUI__WrapGetNumBytesToNextLine:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __WrapGetNumBytesToNextLine
_TEXT	SEGMENT
_NumCharsPrompt$16755 = -44				; size = 4
_NumChars$16754 = -32					; size = 4
_r$ = -20						; size = 4
_xSize$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
_pText$ = 16						; size = 4
__WrapGetNumBytesToNextLine PROC			; COMDAT
; Line 262
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 264
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetXSize
	add	esp, 8
	mov	DWORD PTR _xSize$[ebp], eax
; Line 265
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, 32					; 00000020H
	je	SHORT $LN4@WrapGetNum@2
; Line 267
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__GetNumCharsInPrompt
	add	esp, 8
	mov	DWORD PTR _NumCharsPrompt$16755[ebp], eax
; Line 268
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__WrapGetNumCharsDisp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _NumChars$16754[ebp], eax
; Line 269
	mov	eax, DWORD PTR _NumChars$16754[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	mov	DWORD PTR _r$[ebp], eax
; Line 270
	mov	eax, DWORD PTR _NumChars$16754[ebp]
	cmp	eax, DWORD PTR _NumCharsPrompt$16755[ebp]
	jge	SHORT $LN3@WrapGetNum@2
; Line 271
	mov	eax, DWORD PTR _pText$[ebp]
	add	eax, DWORD PTR _r$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN3@WrapGetNum@2
; Line 272
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 1
	mov	DWORD PTR _r$[ebp], eax
$LN3@WrapGetNum@2:
; Line 275
	jmp	SHORT $LN1@WrapGetNum@2
$LN4@WrapGetNum@2:
; Line 276
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	push	ecx
	mov	edx, DWORD PTR _xSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	call	_GUI__WrapGetNumBytesToNextLine
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r$[ebp], eax
$LN1@WrapGetNum@2:
; Line 278
	mov	eax, DWORD PTR _r$[ebp]
; Line 279
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__WrapGetNumBytesToNextLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetTextSizeX
_TEXT	SEGMENT
tv85 = -244						; size = 4
_pLine$16897 = -44					; size = 4
_pText$16896 = -32					; size = 4
_xSizeLine$16895 = -20					; size = 4
_NumChars$16894 = -8					; size = 4
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
__GetTextSizeX PROC					; COMDAT
; Line 505
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 506
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+137]
	and	ecx, 4
	je	$LN10@GetTextSiz
; Line 507
	xor	eax, eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	WORD PTR [ecx+84], ax
; Line 508
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN9@GetTextSiz
; Line 512
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	call	_GUI_SetFont
	add	esp, 4
; Line 513
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$16896[ebp], eax
$LN8@GetTextSiz:
; Line 515
	mov	eax, DWORD PTR _pText$16896[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__WrapGetNumCharsDisp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _NumChars$16894[ebp], eax
; Line 516
	mov	DWORD PTR _xSizeLine$16895[ebp], 0
; Line 517
	mov	eax, DWORD PTR _pText$16896[ebp]
	mov	DWORD PTR _pLine$16897[ebp], eax
; Line 518
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, 32					; 00000020H
	je	SHORT $LN5@GetTextSiz
$LN4@GetTextSiz:
; Line 519
	mov	eax, DWORD PTR _NumChars$16894[ebp]
	mov	DWORD PTR tv85[ebp], eax
	mov	ecx, DWORD PTR _NumChars$16894[ebp]
	sub	ecx, 1
	mov	DWORD PTR _NumChars$16894[ebp], ecx
	cmp	DWORD PTR tv85[ebp], 0
	je	SHORT $LN3@GetTextSiz
; Line 520
	mov	eax, DWORD PTR _pLine$16897[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__GetCharDistX
	add	esp, 8
	add	eax, DWORD PTR _xSizeLine$16895[ebp]
	mov	DWORD PTR _xSizeLine$16895[ebp], eax
; Line 521
	mov	eax, DWORD PTR _pLine$16897[ebp]
	push	eax
	call	_GUI_UC_GetCharSize
	add	esp, 4
	add	eax, DWORD PTR _pLine$16897[ebp]
	mov	DWORD PTR _pLine$16897[ebp], eax
; Line 522
	jmp	SHORT $LN4@GetTextSiz
$LN3@GetTextSiz:
; Line 523
	jmp	SHORT $LN2@GetTextSiz
$LN5@GetTextSiz:
; Line 524
	mov	eax, DWORD PTR _NumChars$16894[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLine$16897[ebp]
	push	ecx
	call	_GUI__GetLineDistX
	add	esp, 8
	add	eax, DWORD PTR _xSizeLine$16895[ebp]
	mov	DWORD PTR _xSizeLine$16895[ebp], eax
$LN2@GetTextSiz:
; Line 526
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+84]
	cmp	DWORD PTR _xSizeLine$16895[ebp], ecx
	jle	SHORT $LN1@GetTextSiz
; Line 527
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	cx, WORD PTR _xSizeLine$16895[ebp]
	mov	WORD PTR [eax+84], cx
$LN1@GetTextSiz:
; Line 529
	mov	eax, DWORD PTR _pText$16896[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__WrapGetNumBytesToNextLine
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _pText$16896[ebp]
	mov	DWORD PTR _pText$16896[ebp], eax
; Line 530
	mov	eax, DWORD PTR _pText$16896[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	$LN8@GetTextSiz
; Line 531
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$16896[ebp], 0
$LN9@GetTextSiz:
; Line 533
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+137]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	BYTE PTR [edx+137], cl
$LN10@GetTextSiz:
; Line 535
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	eax, WORD PTR [eax+84]
; Line 536
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetTextSizeX ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetNumVisLines
_TEXT	SEGMENT
_Rect$ = -12						; size = 8
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
__GetNumVisLines PROC					; COMDAT
; Line 542
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 544
	lea	eax, DWORD PTR _Rect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_GetInsideRectExScrollbar
	add	esp, 8
; Line 545
	movsx	esi, WORD PTR _Rect$[ebp+6]
	movsx	eax, WORD PTR _Rect$[ebp+2]
	sub	esi, eax
	add	esi, 1
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	push	edx
	call	_GUI_GetYDistOfFont
	add	esp, 4
	mov	ecx, eax
	mov	eax, esi
	cdq
	idiv	ecx
; Line 546
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GetNumVisL
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@GetNumVisL:
	DD	1
	DD	$LN4@GetNumVisL
$LN4@GetNumVisL:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@GetNumVisL
$LN3@GetNumVisL:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
__GetNumVisLines ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetNumLines
_TEXT	SEGMENT
_Char$16928 = -56					; size = 2
_pText$16927 = -44					; size = 4
_NumBytes$16926 = -32					; size = 4
_NumChars$16925 = -20					; size = 4
_NumLines$16923 = -8					; size = 4
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
__GetNumLines PROC					; COMDAT
; Line 554
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 555
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	$LN6@GetNumLine
; Line 556
	mov	DWORD PTR _NumLines$16923[ebp], 0
; Line 557
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN5@GetNumLine
; Line 561
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$16927[ebp], eax
; Line 562
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	call	_GUI_SetFont
	add	esp, 4
$LN4@GetNumLine:
; Line 564
	mov	eax, DWORD PTR _pText$16927[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__WrapGetNumCharsDisp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _NumChars$16925[ebp], eax
; Line 565
	mov	eax, DWORD PTR _NumChars$16925[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$16927[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	mov	DWORD PTR _NumBytes$16926[ebp], eax
; Line 566
	mov	eax, DWORD PTR _pText$16927[ebp]
	add	eax, DWORD PTR _NumBytes$16926[ebp]
	push	eax
	call	_GUI_UC_GetCharCode
	add	esp, 4
	mov	WORD PTR _Char$16928[ebp], ax
; Line 567
	movzx	eax, WORD PTR _Char$16928[ebp]
	test	eax, eax
	je	SHORT $LN1@GetNumLine
; Line 568
	mov	eax, DWORD PTR _NumLines$16923[ebp]
	add	eax, 1
	mov	DWORD PTR _NumLines$16923[ebp], eax
$LN1@GetNumLine:
; Line 570
	mov	eax, DWORD PTR _pText$16927[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__WrapGetNumBytesToNextLine
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _pText$16927[ebp]
	mov	DWORD PTR _pText$16927[ebp], eax
; Line 571
	movzx	eax, WORD PTR _Char$16928[ebp]
	test	eax, eax
	jne	SHORT $LN4@GetNumLine
; Line 572
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$16927[ebp], 0
$LN5@GetNumLine:
; Line 574
	mov	eax, DWORD PTR _NumLines$16923[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	WORD PTR [ecx+82], ax
; Line 575
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+137]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	BYTE PTR [edx+137], cl
$LN6@GetNumLine:
; Line 577
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	eax, WORD PTR [eax+82]
; Line 578
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetNumLines ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Invalidate
_TEXT	SEGMENT
_hObj$ = 8						; size = 4
__Invalidate PROC					; COMDAT
; Line 682
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 683
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__ManageScrollers
	add	esp, 4
; Line 684
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 685
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Invalidate ENDP
_TEXT	ENDS
EXTRN	_WM_SetScrollbarH:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __ManageScrollers
_TEXT	SEGMENT
_r$16969 = -32						; size = 4
_IsRequired$16968 = -17					; size = 1
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__ManageScrollers PROC					; COMDAT
; Line 656
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 659
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__ManageAutoScrollV
	add	esp, 4
; Line 660
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 662
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@ManageScro
; Line 665
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetXSize
	add	esp, 8
	mov	esi, eax
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__GetTextSizeX
	add	esp, 8
	xor	ecx, ecx
	cmp	esi, eax
	setl	cl
	mov	BYTE PTR _IsRequired$16968[ebp], cl
; Line 666
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 667
	movzx	eax, BYTE PTR _IsRequired$16968[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_SetScrollbarH
	add	esp, 8
	mov	DWORD PTR _r$16969[ebp], eax
; Line 668
	movzx	eax, BYTE PTR _IsRequired$16968[ebp]
	cmp	DWORD PTR _r$16969[ebp], eax
	je	SHORT $LN2@ManageScro
; Line 670
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__ManageAutoScrollV
	add	esp, 4
$LN2@ManageScro:
; Line 672
	jmp	SHORT $LN1@ManageScro
$LN3@ManageScro:
; Line 673
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN1@ManageScro:
; Line 675
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__CalcScrollParas
	add	esp, 4
; Line 676
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ManageScrollers ENDP
_TEXT	ENDS
EXTRN	_WM_SetScrollbarV:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __ManageAutoScrollV
_TEXT	SEGMENT
_r$ = -32						; size = 4
_IsRequired$ = -17					; size = 1
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__ManageAutoScrollV PROC				; COMDAT
; Line 624
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 628
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 629
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, 8
	je	$LN3@ManageAuto
; Line 630
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetNumVisLines
	add	esp, 8
	mov	esi, eax
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__GetNumLines
	add	esp, 8
	xor	ecx, ecx
	cmp	esi, eax
	setl	cl
	mov	BYTE PTR _IsRequired$[ebp], cl
; Line 631
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 632
	movzx	eax, BYTE PTR _IsRequired$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_SetScrollbarV
	add	esp, 8
	mov	DWORD PTR _r$[ebp], eax
; Line 633
	movzx	eax, BYTE PTR _IsRequired$[ebp]
	cmp	DWORD PTR _r$[ebp], eax
	je	SHORT $LN2@ManageAuto
; Line 634
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 635
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateNumLines
	add	esp, 4
; Line 636
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateTextSizeX
	add	esp, 4
; Line 637
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateCursorXY
	add	esp, 4
; Line 638
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__ClearCache
	add	esp, 4
; Line 639
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN2@ManageAuto:
; Line 641
	jmp	SHORT $LN4@ManageAuto
$LN3@ManageAuto:
; Line 642
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN4@ManageAuto:
; Line 644
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ManageAutoScrollV ENDP
_TEXT	ENDS
EXTRN	_GUI_InvertRect:PROC
EXTRN	_WM_HasFocus:PROC
EXTRN	_GUI_GetYSizeOfFont:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __InvertCursor
_TEXT	SEGMENT
_r$ = -132						; size = 8
_ScrollPosY$ = -116					; size = 4
_ScrollPosX$ = -104					; size = 4
_CursorSize$ = -92					; size = 4
_FontSizeY$ = -80					; size = 4
_yOff$ = -68						; size = 4
_xOff$ = -56						; size = 4
_IsRTL$ = -44						; size = 4
_y$ = -32						; size = 4
_x$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__InvertCursor PROC					; COMDAT
; Line 1248
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1252
	mov	DWORD PTR _IsRTL$[ebp], 0
; Line 1253
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1254
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	call	_GUI_GetYSizeOfFont
	add	esp, 4
	mov	DWORD PTR _FontSizeY$[ebp], eax
; Line 1255
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	DWORD PTR _ScrollPosX$[ebp], ecx
; Line 1256
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _ScrollPosY$[ebp], ecx
; Line 1257
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_HasFocus
	add	esp, 4
	test	eax, eax
	je	$LN4@InvertCurs
; Line 1258
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _pObj$[ebp]
	movzx	eax, BYTE PTR [edx+139]
	mov	ecx, DWORD PTR [ecx]
	add	ecx, eax
	sub	ecx, DWORD PTR _ScrollPosX$[ebp]
	mov	DWORD PTR _xOff$[ebp], ecx
; Line 1259
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _ScrollPosY$[ebp]
	imul	edx, DWORD PTR _FontSizeY$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, edx
	mov	DWORD PTR _yOff$[ebp], eax
; Line 1260
	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__GetCursorXY
	add	esp, 16					; 00000010H
; Line 1261
	lea	eax, DWORD PTR _IsRTL$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__GetCursorSizeX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _CursorSize$[ebp], eax
; Line 1262
	cmp	DWORD PTR _IsRTL$[ebp], 0
	je	SHORT $LN3@InvertCurs
; Line 1263
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _xOff$[ebp]
	sub	eax, DWORD PTR _CursorSize$[ebp]
	mov	WORD PTR _r$[ebp], ax
; Line 1264
	movsx	eax, WORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _CursorSize$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	mov	WORD PTR _r$[ebp+4], dx
; Line 1265
	jmp	SHORT $LN2@InvertCurs
$LN3@InvertCurs:
; Line 1266
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _xOff$[ebp]
	mov	WORD PTR _r$[ebp], ax
; Line 1267
	movsx	eax, WORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _CursorSize$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	mov	WORD PTR _r$[ebp+4], dx
$LN2@InvertCurs:
; Line 1269
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _yOff$[ebp]
	mov	WORD PTR _r$[ebp+2], ax
; Line 1270
	movsx	eax, WORD PTR _r$[ebp+2]
	mov	ecx, DWORD PTR _FontSizeY$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	mov	WORD PTR _r$[ebp+6], dx
; Line 1271
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+106]
	cmp	ecx, 1
	jne	SHORT $LN1@InvertCurs
; Line 1272
	movsx	eax, WORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _ScrollPosX$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	WORD PTR _r$[ebp], dx
; Line 1273
	movsx	eax, WORD PTR _r$[ebp+4]
	mov	ecx, DWORD PTR _ScrollPosX$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	WORD PTR _r$[ebp+4], dx
$LN1@InvertCurs:
; Line 1275
	movsx	eax, WORD PTR _r$[ebp+6]
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+4]
	push	ecx
	movsx	edx, WORD PTR _r$[ebp+2]
	push	edx
	movsx	eax, WORD PTR _r$[ebp]
	push	eax
	call	_GUI_InvertRect
	add	esp, 16					; 00000010H
$LN4@InvertCurs:
; Line 1277
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1278
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@InvertCurs
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@InvertCurs:
	DD	4
	DD	$LN11@InvertCurs
$LN11@InvertCurs:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@InvertCurs
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@InvertCurs
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN9@InvertCurs
	DD	-132					; ffffff7cH
	DD	8
	DD	$LN10@InvertCurs
$LN10@InvertCurs:
	DB	114					; 00000072H
	DB	0
$LN9@InvertCurs:
	DB	73					; 00000049H
	DB	115					; 00000073H
	DB	82					; 00000052H
	DB	84					; 00000054H
	DB	76					; 0000004cH
	DB	0
$LN8@InvertCurs:
	DB	121					; 00000079H
	DB	0
$LN7@InvertCurs:
	DB	120					; 00000078H
	DB	0
__InvertCursor ENDP
_TEXT	ENDS
EXTRN	__pfGUI__BIDI_GetCharDir:DWORD
EXTRN	__pfGUI__BIDI_GetLogChar:DWORD
EXTRN	_GUI__BIDI_Enabled:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetCursorSizeX
_TEXT	SEGMENT
_r$ = -32						; size = 4
_Char$ = -20						; size = 2
_pText$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
_pIsRTL$ = 16						; size = 4
__GetCursorSizeX PROC					; COMDAT
; Line 1016
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1021
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__IsOverwriteAtThisChar
	add	esp, 4
	test	eax, eax
	je	$LN7@GetCursorS
; Line 1022
	cmp	DWORD PTR _GUI__BIDI_Enabled, 1
	jne	$LN6@GetCursorS
; Line 1023
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, 32					; 00000020H
	je	SHORT $LN5@GetCursorS
; Line 1024
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$[ebp], eax
; Line 1025
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+92]
	add	ecx, DWORD PTR _pText$[ebp]
	mov	DWORD PTR _pText$[ebp], ecx
; Line 1026
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__GetCharDistX
	add	esp, 8
	mov	DWORD PTR _r$[ebp], eax
; Line 1027
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$[ebp], 0
; Line 1028
	mov	eax, DWORD PTR _r$[ebp]
	jmp	$LN8@GetCursorS
; Line 1029
	jmp	$LN4@GetCursorS
$LN5@GetCursorS:
; Line 1030
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$[ebp], eax
; Line 1031
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+90]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	movzx	eax, WORD PTR [edx+78]
	push	eax
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	DWORD PTR __pfGUI__BIDI_GetLogChar
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _Char$[ebp], ax
; Line 1032
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+90]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	movzx	eax, WORD PTR [edx+78]
	push	eax
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	DWORD PTR __pfGUI__BIDI_GetCharDir
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _pIsRTL$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1033
	movzx	eax, WORD PTR _Char$[ebp]
	push	eax
	call	_GUI_GetCharDistX
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax
; Line 1034
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$[ebp], 0
; Line 1035
	mov	eax, DWORD PTR _r$[ebp]
	jmp	$LN8@GetCursorS
$LN4@GetCursorS:
; Line 1037
	jmp	SHORT $LN3@GetCursorS
$LN6@GetCursorS:
; Line 1038
	mov	eax, DWORD PTR _pIsRTL$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1039
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$[ebp], eax
; Line 1040
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+92]
	add	ecx, DWORD PTR _pText$[ebp]
	mov	DWORD PTR _pText$[ebp], ecx
; Line 1041
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__GetCharDistX
	add	esp, 8
	mov	DWORD PTR _r$[ebp], eax
; Line 1042
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$[ebp], 0
; Line 1043
	mov	eax, DWORD PTR _r$[ebp]
	jmp	SHORT $LN8@GetCursorS
$LN3@GetCursorS:
; Line 1045
	jmp	SHORT $LN8@GetCursorS
$LN7@GetCursorS:
; Line 1046
	cmp	DWORD PTR _GUI__BIDI_Enabled, 1
	jne	SHORT $LN1@GetCursorS
; Line 1047
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$[ebp], eax
; Line 1048
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+90]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	movzx	eax, WORD PTR [edx+78]
	push	eax
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	DWORD PTR __pfGUI__BIDI_GetCharDir
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _pIsRTL$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1049
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$[ebp], 0
$LN1@GetCursorS:
; Line 1051
	mov	eax, 2
$LN8@GetCursorS:
; Line 1053
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetCursorSizeX ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __IsOverwriteAtThisChar
_TEXT	SEGMENT
_Char$17147 = -80					; size = 2
_Line2$17146 = -68					; size = 4
_Line1$17145 = -56					; size = 4
_CurPos$17144 = -44					; size = 4
_pText$17143 = -32					; size = 4
_r$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__IsOverwriteAtThisChar PROC				; COMDAT
; Line 978
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 980
	mov	DWORD PTR _r$[ebp], 0
; Line 981
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 982
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN8@IsOverwrit
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, 4
	jne	$LN8@IsOverwrit
; Line 986
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$17143[ebp], eax
; Line 987
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+88]
	mov	DWORD PTR _Line1$17145[ebp], ecx
; Line 988
	push	0
	push	0
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+90]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__CalcNextValidCursorPos
	add	esp, 20					; 00000014H
	mov	DWORD PTR _CurPos$17144[ebp], eax
; Line 989
	mov	eax, DWORD PTR _CurPos$17144[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$17143[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__GetCursorLine
	add	esp, 16					; 00000010H
	mov	DWORD PTR _Line2$17146[ebp], eax
; Line 990
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+92]
	add	ecx, DWORD PTR _pText$17143[ebp]
	mov	DWORD PTR _pText$17143[ebp], ecx
; Line 991
	mov	eax, DWORD PTR _pText$17143[ebp]
	push	eax
	call	_GUI_UC_GetCharCode
	add	esp, 4
	mov	WORD PTR _Char$17147[ebp], ax
; Line 992
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$17143[ebp], 0
; Line 993
	movzx	eax, WORD PTR _Char$17147[ebp]
	test	eax, eax
	je	SHORT $LN8@IsOverwrit
; Line 994
	mov	eax, DWORD PTR _Line1$17145[ebp]
	cmp	eax, DWORD PTR _Line2$17146[ebp]
	je	SHORT $LN5@IsOverwrit
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, 32					; 00000020H
	je	SHORT $LN6@IsOverwrit
$LN5@IsOverwrit:
; Line 995
	mov	DWORD PTR _r$[ebp], 1
; Line 996
	jmp	SHORT $LN8@IsOverwrit
$LN6@IsOverwrit:
; Line 997
	movzx	eax, WORD PTR _Char$17147[ebp]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN8@IsOverwrit
; Line 998
	movzx	eax, WORD PTR _Char$17147[ebp]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN1@IsOverwrit
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+144], 2
	jne	SHORT $LN8@IsOverwrit
$LN1@IsOverwrit:
; Line 999
	mov	DWORD PTR _r$[ebp], 1
$LN8@IsOverwrit:
; Line 1005
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1006
	mov	eax, DWORD PTR _r$[ebp]
; Line 1007
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__IsOverwriteAtThisChar ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetCursorLine
_TEXT	SEGMENT
_LineNumber$ = -56					; size = 4
_ByteOffsetNewCursor$ = -44				; size = 4
_NumChars$ = -32					; size = 4
_pEndLine$ = -20					; size = 4
_pCursor$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
_pText$ = 16						; size = 4
_CursorPosChar$ = 20					; size = 4
__GetCursorLine PROC					; COMDAT
; Line 379
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 382
	mov	DWORD PTR _LineNumber$[ebp], 0
; Line 383
	mov	eax, DWORD PTR _CursorPosChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	mov	DWORD PTR _ByteOffsetNewCursor$[ebp], eax
; Line 384
	mov	eax, DWORD PTR _pText$[ebp]
	add	eax, DWORD PTR _ByteOffsetNewCursor$[ebp]
	mov	DWORD PTR _pCursor$[ebp], eax
; Line 385
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+98]
	cmp	ecx, DWORD PTR _ByteOffsetNewCursor$[ebp]
	jge	SHORT $LN4@GetCursorL
; Line 387
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+98]
	add	ecx, DWORD PTR _pText$[ebp]
	mov	DWORD PTR _pText$[ebp], ecx
; Line 388
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+100]
	add	ecx, DWORD PTR _LineNumber$[ebp]
	mov	DWORD PTR _LineNumber$[ebp], ecx
$LN4@GetCursorL:
; Line 390
	mov	eax, DWORD PTR _pText$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN3@GetCursorL
	mov	eax, DWORD PTR _pCursor$[ebp]
	cmp	eax, DWORD PTR _pText$[ebp]
	jbe	$LN3@GetCursorL
; Line 391
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__WrapGetNumCharsDisp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _NumChars$[ebp], eax
; Line 392
	mov	eax, DWORD PTR _NumChars$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	add	eax, DWORD PTR _pText$[ebp]
	mov	DWORD PTR _pEndLine$[ebp], eax
; Line 393
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__WrapGetNumBytesToNextLine
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _pText$[ebp]
	mov	DWORD PTR _pText$[ebp], eax
; Line 394
	mov	eax, DWORD PTR _pCursor$[ebp]
	cmp	eax, DWORD PTR _pEndLine$[ebp]
	ja	SHORT $LN2@GetCursorL
; Line 395
	mov	eax, DWORD PTR _pCursor$[ebp]
	cmp	eax, DWORD PTR _pEndLine$[ebp]
	jne	SHORT $LN1@GetCursorL
	mov	eax, DWORD PTR _pEndLine$[ebp]
	cmp	eax, DWORD PTR _pText$[ebp]
	jne	SHORT $LN1@GetCursorL
	mov	eax, DWORD PTR _pText$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@GetCursorL
; Line 396
	mov	eax, DWORD PTR _LineNumber$[ebp]
	add	eax, 1
	mov	DWORD PTR _LineNumber$[ebp], eax
$LN1@GetCursorL:
; Line 398
	jmp	SHORT $LN3@GetCursorL
$LN2@GetCursorL:
; Line 400
	mov	eax, DWORD PTR _LineNumber$[ebp]
	add	eax, 1
	mov	DWORD PTR _LineNumber$[ebp], eax
; Line 401
	jmp	$LN4@GetCursorL
$LN3@GetCursorL:
; Line 402
	mov	eax, DWORD PTR _LineNumber$[ebp]
; Line 403
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetCursorLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __CalcNextValidCursorPos
_TEXT	SEGMENT
_pPrevLine$17027 = -80					; size = 4
_CursorPosByte$17020 = -68				; size = 4
_NumChars$17019 = -56					; size = 4
_CursorLine$17018 = -44					; size = 4
_pText$17017 = -32					; size = 4
_pCursor$17016 = -20					; size = 4
_pNextLine$17015 = -8					; size = 4
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
_CursorPosChar$ = 16					; size = 4
_pCursorPosByte$ = 20					; size = 4
_pCursorLine$ = 24					; size = 4
__CalcNextValidCursorPos PROC				; COMDAT
; Line 746
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 747
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN8@CalcNextVa
; Line 752
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$17017[ebp], eax
; Line 753
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__GetNumChars
	add	esp, 4
	mov	DWORD PTR _NumChars$17019[ebp], eax
; Line 755
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+80]
	cmp	DWORD PTR _CursorPosChar$[ebp], ecx
	jge	SHORT $LN7@CalcNextVa
; Line 756
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+80]
	mov	DWORD PTR _CursorPosChar$[ebp], ecx
$LN7@CalcNextVa:
; Line 758
	mov	eax, DWORD PTR _CursorPosChar$[ebp]
	cmp	eax, DWORD PTR _NumChars$17019[ebp]
	jle	SHORT $LN6@CalcNextVa
; Line 759
	mov	eax, DWORD PTR _NumChars$17019[ebp]
	mov	DWORD PTR _CursorPosChar$[ebp], eax
$LN6@CalcNextVa:
; Line 761
	mov	eax, DWORD PTR _CursorPosChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$17017[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	mov	DWORD PTR _CursorPosByte$17020[ebp], eax
; Line 762
	mov	eax, DWORD PTR _CursorPosChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$17017[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__GetCursorLine
	add	esp, 16					; 00000010H
	mov	DWORD PTR _CursorLine$17018[ebp], eax
; Line 763
	mov	eax, DWORD PTR _pText$17017[ebp]
	add	eax, DWORD PTR _CursorPosByte$17020[ebp]
	mov	DWORD PTR _pCursor$17016[ebp], eax
; Line 764
	mov	eax, DWORD PTR _CursorLine$17018[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__GetpLineLocked
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pNextLine$17015[ebp], eax
; Line 765
	mov	eax, DWORD PTR _pNextLine$17015[ebp]
	cmp	eax, DWORD PTR _pCursor$17016[ebp]
	jbe	$LN5@CalcNextVa
; Line 766
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+90]
	cmp	ecx, DWORD PTR _CursorPosChar$[ebp]
	jge	SHORT $LN4@CalcNextVa
; Line 767
	mov	eax, DWORD PTR _pNextLine$17015[ebp]
	mov	DWORD PTR _pCursor$17016[ebp], eax
; Line 768
	jmp	SHORT $LN3@CalcNextVa
$LN4@CalcNextVa:
; Line 770
	mov	eax, DWORD PTR _CursorLine$17018[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__GetpLineLocked
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pPrevLine$17027[ebp], eax
; Line 771
	mov	eax, DWORD PTR _pPrevLine$17027[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__WrapGetNumCharsDisp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _NumChars$17019[ebp], eax
; Line 772
	mov	eax, DWORD PTR _NumChars$17019[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPrevLine$17027[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	add	eax, DWORD PTR _pPrevLine$17027[ebp]
	mov	DWORD PTR _pPrevLine$17027[ebp], eax
; Line 773
	mov	eax, DWORD PTR _pPrevLine$17027[ebp]
	mov	DWORD PTR _pCursor$17016[ebp], eax
; Line 774
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pPrevLine$17027[ebp], 0
$LN3@CalcNextVa:
; Line 776
	mov	eax, DWORD PTR _pCursor$17016[ebp]
	sub	eax, DWORD PTR _pText$17017[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$17017[ebp]
	push	ecx
	call	_GUI_UC__NumBytes2NumChars
	add	esp, 8
	mov	DWORD PTR _CursorPosChar$[ebp], eax
; Line 777
	mov	eax, DWORD PTR _CursorPosChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$17017[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	mov	DWORD PTR _CursorPosByte$17020[ebp], eax
; Line 778
	mov	eax, DWORD PTR _CursorPosChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$17017[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__GetCursorLine
	add	esp, 16					; 00000010H
	mov	DWORD PTR _CursorLine$17018[ebp], eax
$LN5@CalcNextVa:
; Line 780
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pNextLine$17015[ebp], 0
; Line 781
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$17017[ebp], 0
; Line 782
	cmp	DWORD PTR _pCursorPosByte$[ebp], 0
	je	SHORT $LN2@CalcNextVa
; Line 783
	mov	eax, DWORD PTR _pCursorPosByte$[ebp]
	mov	ecx, DWORD PTR _CursorPosByte$17020[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@CalcNextVa:
; Line 785
	cmp	DWORD PTR _pCursorLine$[ebp], 0
	je	SHORT $LN1@CalcNextVa
; Line 786
	mov	eax, DWORD PTR _pCursorLine$[ebp]
	mov	ecx, DWORD PTR _CursorLine$17018[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@CalcNextVa:
; Line 788
	mov	eax, DWORD PTR _CursorPosChar$[ebp]
	jmp	SHORT $LN9@CalcNextVa
$LN8@CalcNextVa:
; Line 790
	xor	eax, eax
$LN9@CalcNextVa:
; Line 791
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__CalcNextValidCursorPos ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetNumChars
_TEXT	SEGMENT
_pText$16696 = -8					; size = 4
_pObj$ = 8						; size = 4
__GetNumChars PROC					; COMDAT
; Line 182
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 183
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+137]
	and	ecx, 1
	je	SHORT $LN1@GetNumChar@2
; Line 185
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$16696[ebp], eax
; Line 186
	mov	eax, DWORD PTR _pText$16696[ebp]
	push	eax
	call	_GUI__GetNumChars
	add	esp, 4
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	WORD PTR [ecx+78], ax
; Line 187
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$16696[ebp], 0
; Line 188
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+137]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	BYTE PTR [edx+137], cl
$LN1@GetNumChar@2:
; Line 190
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	eax, WORD PTR [eax+78]
; Line 191
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetNumChars ENDP
_TEXT	ENDS
EXTRN	_WIDGET__EFFECT_DrawDown:PROC
EXTRN	_WM__IsEnabled:PROC
EXTRN	_WM_SetUserClipRect:PROC
EXTRN	_WM_GetWindowSizeY:PROC
EXTRN	_WM_GetWindowSizeX:PROC
EXTRN	_GUI_Clear:PROC
EXTRN	_LCD_SetColor:PROC
EXTRN	_LCD_SetBkColor:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __MULTIEDIT_Paint
_TEXT	SEGMENT
_p$17316 = -184						; size = 4
_NumVisLines$17306 = -172				; size = 4
_xSize$17305 = -160					; size = 4
_Line$17304 = -148					; size = 4
_pText$17303 = -136					; size = 4
_prOldClip$ = -124					; size = 4
_rClip$ = -112						; size = 8
_r$ = -96						; size = 8
_FontSizeY$ = -80					; size = 4
_ColorIndex$ = -68					; size = 4
_xOff$ = -56						; size = 4
_HBorder$ = -44						; size = 4
_EffectSize$ = -32					; size = 4
_ScrollPosY$ = -20					; size = 4
_ScrollPosX$ = -8					; size = 4
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
__MULTIEDIT_Paint PROC					; COMDAT
; Line 1284
	push	ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-380]
	mov	ecx, 95					; 0000005fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1290
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	call	_GUI_SetFont
	add	esp, 4
; Line 1291
	call	_GUI_GetFontDistY
	mov	DWORD PTR _FontSizeY$[ebp], eax
; Line 1292
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	DWORD PTR _ScrollPosX$[ebp], ecx
; Line 1293
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _ScrollPosY$[ebp], ecx
; Line 1294
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _EffectSize$[ebp], edx
; Line 1295
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+139]
	mov	DWORD PTR _HBorder$[ebp], ecx
; Line 1296
	mov	eax, DWORD PTR _EffectSize$[ebp]
	add	eax, DWORD PTR _HBorder$[ebp]
	sub	eax, DWORD PTR _ScrollPosX$[ebp]
	mov	DWORD PTR _xOff$[ebp], eax
; Line 1297
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, 1
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	DWORD PTR _ColorIndex$[ebp], ecx
; Line 1299
	mov	eax, DWORD PTR _ColorIndex$[ebp]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+56]
	push	edx
	call	_LCD_SetBkColor
	add	esp, 4
; Line 1300
	mov	eax, DWORD PTR _ColorIndex$[ebp]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+64]
	push	edx
	call	_LCD_SetColor
	add	esp, 4
; Line 1301
	call	_GUI_Clear
; Line 1303
	mov	eax, DWORD PTR _EffectSize$[ebp]
	add	eax, DWORD PTR _HBorder$[ebp]
	mov	WORD PTR _rClip$[ebp], ax
; Line 1304
	mov	ax, WORD PTR _EffectSize$[ebp]
	mov	WORD PTR _rClip$[ebp+2], ax
; Line 1305
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetWindowSizeX
	add	esp, 4
	sub	eax, DWORD PTR _EffectSize$[ebp]
	sub	eax, DWORD PTR _HBorder$[ebp]
	sub	eax, 1
	mov	WORD PTR _rClip$[ebp+4], ax
; Line 1306
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetWindowSizeY
	add	esp, 4
	sub	eax, DWORD PTR _EffectSize$[ebp]
	sub	eax, 1
	mov	WORD PTR _rClip$[ebp+6], ax
; Line 1307
	lea	eax, DWORD PTR _rClip$[ebp]
	push	eax
	call	_WM_SetUserClipRect
	add	esp, 4
	mov	DWORD PTR _prOldClip$[ebp], eax
; Line 1308
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN12@MULTIEDIT_@3
; Line 1310
	mov	DWORD PTR _Line$17304[ebp], 0
; Line 1311
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetXSize
	add	esp, 8
	mov	DWORD PTR _xSize$17305[ebp], eax
; Line 1312
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetNumVisLines
	add	esp, 8
	mov	DWORD PTR _NumVisLines$17306[ebp], eax
; Line 1314
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$17303[ebp], eax
; Line 1316
	mov	ax, WORD PTR _xOff$[ebp]
	mov	WORD PTR _r$[ebp], ax
; Line 1317
	mov	ax, WORD PTR _EffectSize$[ebp]
	mov	WORD PTR _r$[ebp+2], ax
; Line 1318
	mov	eax, DWORD PTR _xSize$17305[ebp]
	add	eax, DWORD PTR _EffectSize$[ebp]
	mov	ecx, DWORD PTR _HBorder$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	mov	WORD PTR _r$[ebp+4], dx
; Line 1319
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _pObj$[ebp]
	movsx	eax, WORD PTR [edx+2]
	sub	ecx, eax
	add	ecx, 1
	mov	WORD PTR _r$[ebp+6], cx
; Line 1321
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+102]
	cmp	DWORD PTR _ScrollPosY$[ebp], ecx
	jl	SHORT $LN11@MULTIEDIT_@3
; Line 1322
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+104]
	test	ecx, ecx
	je	SHORT $LN11@MULTIEDIT_@3
; Line 1323
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+104]
	add	ecx, DWORD PTR _pText$17303[ebp]
	mov	DWORD PTR _pText$17303[ebp], ecx
; Line 1324
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+102]
	mov	DWORD PTR _Line$17304[ebp], ecx
$LN11@MULTIEDIT_@3:
; Line 1327
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+106]
	cmp	ecx, 1
	jne	SHORT $LN8@MULTIEDIT_@3
; Line 1328
	movsx	eax, WORD PTR _r$[ebp]
	add	eax, DWORD PTR _ScrollPosX$[ebp]
	mov	WORD PTR _r$[ebp], ax
; Line 1329
	movsx	eax, WORD PTR _r$[ebp+4]
	add	eax, DWORD PTR _ScrollPosX$[ebp]
	mov	WORD PTR _r$[ebp+4], ax
$LN8@MULTIEDIT_@3:
; Line 1334
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+102]
	cmp	ecx, DWORD PTR _ScrollPosY$[ebp]
	je	SHORT $LN5@MULTIEDIT_@3
; Line 1335
	mov	eax, DWORD PTR _Line$17304[ebp]
	cmp	eax, DWORD PTR _ScrollPosY$[ebp]
	jne	SHORT $LN5@MULTIEDIT_@3
; Line 1337
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _p$17316[ebp], eax
; Line 1338
	mov	eax, DWORD PTR _pText$17303[ebp]
	sub	eax, DWORD PTR _p$17316[ebp]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	WORD PTR [ecx+104], ax
; Line 1339
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	cx, WORD PTR _ScrollPosY$[ebp]
	mov	WORD PTR [eax+102], cx
; Line 1340
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _p$17316[ebp], 0
$LN5@MULTIEDIT_@3:
; Line 1344
	mov	eax, DWORD PTR _Line$17304[ebp]
	cmp	eax, DWORD PTR _ScrollPosY$[ebp]
	jl	SHORT $LN3@MULTIEDIT_@3
	mov	eax, DWORD PTR _Line$17304[ebp]
	sub	eax, DWORD PTR _ScrollPosY$[ebp]
	cmp	eax, DWORD PTR _NumVisLines$17306[ebp]
	jg	SHORT $LN3@MULTIEDIT_@3
; Line 1345
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$17303[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__DispString
	add	esp, 16					; 00000010H
; Line 1346
	movsx	eax, WORD PTR _r$[ebp+2]
	add	eax, DWORD PTR _FontSizeY$[ebp]
	mov	WORD PTR _r$[ebp+2], ax
$LN3@MULTIEDIT_@3:
; Line 1348
	mov	eax, DWORD PTR _pText$17303[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__WrapGetNumBytesToNextLine
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _pText$17303[ebp]
	mov	DWORD PTR _pText$17303[ebp], eax
; Line 1349
	mov	eax, DWORD PTR _Line$17304[ebp]
	add	eax, 1
	mov	DWORD PTR _Line$17304[ebp], eax
; Line 1350
	mov	eax, DWORD PTR _pText$17303[ebp]
	push	eax
	call	_GUI_UC_GetCharCode
	add	esp, 4
	movzx	ecx, ax
	test	ecx, ecx
	je	SHORT $LN6@MULTIEDIT_@3
	mov	eax, DWORD PTR _Line$17304[ebp]
	sub	eax, DWORD PTR _ScrollPosY$[ebp]
	cmp	eax, DWORD PTR _NumVisLines$17306[ebp]
	jle	$LN8@MULTIEDIT_@3
$LN6@MULTIEDIT_@3:
; Line 1351
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$17303[ebp], 0
$LN12@MULTIEDIT_@3:
; Line 1354
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM__IsEnabled
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@MULTIEDIT_@3
; Line 1355
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__InvertCursor
	add	esp, 4
; Line 1356
	push	0
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_WM_RestartTimer
	add	esp, 8
$LN1@MULTIEDIT_@3:
; Line 1358
	mov	eax, DWORD PTR _prOldClip$[ebp]
	push	eax
	call	_WM_SetUserClipRect
	add	esp, 4
; Line 1360
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	_WIDGET__EFFECT_DrawDown
	add	esp, 4
; Line 1361
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@MULTIEDIT_@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 380				; 0000017cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN18@MULTIEDIT_@3:
	DD	2
	DD	$LN17@MULTIEDIT_@3
$LN17@MULTIEDIT_@3:
	DD	-96					; ffffffa0H
	DD	8
	DD	$LN15@MULTIEDIT_@3
	DD	-112					; ffffff90H
	DD	8
	DD	$LN16@MULTIEDIT_@3
$LN16@MULTIEDIT_@3:
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	0
$LN15@MULTIEDIT_@3:
	DB	114					; 00000072H
	DB	0
__MULTIEDIT_Paint ENDP
_TEXT	ENDS
EXTRN	_GUI_DispChars:PROC
EXTRN	_GUI_DispCharAt:PROC
EXTRN	_GUI_DispStringInRectMax:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DispString
_TEXT	SEGMENT
_NumCharsLeft$16783 = -44				; size = 4
_NumCharsPrompt$16782 = -32				; size = 4
_x$16781 = -20						; size = 4
_NumCharsDisp$ = -8					; size = 4
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
_pText$ = 16						; size = 4
_pRect$ = 20						; size = 4
__DispString PROC					; COMDAT
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 303
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__WrapGetNumCharsDisp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _NumCharsDisp$[ebp], eax
; Line 304
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, 32					; 00000020H
	je	$LN5@DispString
; Line 305
	mov	DWORD PTR _NumCharsLeft$16783[ebp], 0
; Line 306
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__GetNumCharsInPrompt
	add	esp, 8
	mov	DWORD PTR _NumCharsPrompt$16782[ebp], eax
; Line 307
	mov	eax, DWORD PTR _NumCharsDisp$[ebp]
	cmp	eax, DWORD PTR _NumCharsPrompt$16782[ebp]
	jge	SHORT $LN4@DispString
; Line 308
	mov	eax, DWORD PTR _NumCharsDisp$[ebp]
	mov	DWORD PTR _NumCharsPrompt$16782[ebp], eax
; Line 309
	jmp	SHORT $LN3@DispString
$LN4@DispString:
; Line 310
	mov	eax, DWORD PTR _NumCharsDisp$[ebp]
	sub	eax, DWORD PTR _NumCharsPrompt$16782[ebp]
	mov	DWORD PTR _NumCharsLeft$16783[ebp], eax
$LN3@DispString:
; Line 312
	mov	eax, DWORD PTR _NumCharsPrompt$16782[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pText$[ebp]
	push	edx
	call	_GUI_DispStringInRectMax
	add	esp, 16					; 00000010H
; Line 313
	mov	eax, DWORD PTR _pRect$[ebp]
	movsx	esi, WORD PTR [eax]
	mov	ecx, DWORD PTR _NumCharsPrompt$16782[ebp]
	push	ecx
	mov	edx, DWORD PTR _pText$[ebp]
	push	edx
	call	_GUI__GetLineDistX
	add	esp, 8
	add	esi, eax
	mov	DWORD PTR _x$16781[ebp], esi
; Line 314
	cmp	DWORD PTR _NumCharsLeft$16783[ebp], 0
	je	SHORT $LN2@DispString
; Line 315
	mov	eax, DWORD PTR _pRect$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	push	ecx
	movzx	edx, WORD PTR _x$16781[ebp]
	push	edx
	push	42					; 0000002aH
	call	_GUI_DispCharAt
	add	esp, 12					; 0000000cH
; Line 316
	mov	eax, DWORD PTR _NumCharsLeft$16783[ebp]
	sub	eax, 1
	push	eax
	push	42					; 0000002aH
	call	_GUI_DispChars
	add	esp, 8
$LN2@DispString:
; Line 318
	jmp	SHORT $LN6@DispString
$LN5@DispString:
; Line 319
	mov	eax, DWORD PTR _NumCharsDisp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	movzx	edx, WORD PTR [ecx+106]
	push	edx
	mov	eax, DWORD PTR _pRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	_GUI_DispStringInRectMax
	add	esp, 16					; 00000010H
$LN6@DispString:
; Line 321
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DispString ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __OnTouch
_TEXT	SEGMENT
_yPos$17338 = -56					; size = 4
_xPos$17337 = -44					; size = 4
_Effect$17336 = -32					; size = 4
_pState$ = -20						; size = 4
_Notification$ = -8					; size = 4
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
_pMsg$ = 16						; size = 4
__OnTouch PROC						; COMDAT
; Line 1367
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1369
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pState$[ebp], ecx
; Line 1370
	mov	eax, DWORD PTR _pMsg$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	$LN4@OnTouch
; Line 1371
	mov	eax, DWORD PTR _pState$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN3@OnTouch
; Line 1373
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _Effect$17336[ebp], edx
; Line 1374
	mov	eax, DWORD PTR _pState$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pObj$[ebp]
	add	ecx, DWORD PTR [edx+124]
	sub	ecx, DWORD PTR _Effect$17336[ebp]
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	edx, BYTE PTR [eax+139]
	sub	ecx, edx
	mov	DWORD PTR _xPos$17337[ebp], ecx
; Line 1375
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	call	_GUI_GetYDistOfFont
	add	esp, 4
	mov	edx, DWORD PTR _pObj$[ebp]
	imul	eax, DWORD PTR [edx+112]
	mov	ecx, DWORD PTR _pState$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, eax
	sub	edx, DWORD PTR _Effect$17336[ebp]
	mov	DWORD PTR _yPos$17338[ebp], edx
; Line 1376
	mov	eax, DWORD PTR _yPos$17338[ebp]
	push	eax
	mov	ecx, DWORD PTR _xPos$17337[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__SetCursorXY
	add	esp, 16					; 00000010H
; Line 1377
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__Invalidate
	add	esp, 4
; Line 1378
	mov	DWORD PTR _Notification$[ebp], 1
; Line 1379
	jmp	SHORT $LN2@OnTouch
$LN3@OnTouch:
; Line 1380
	mov	DWORD PTR _Notification$[ebp], 2
$LN2@OnTouch:
; Line 1382
	jmp	SHORT $LN1@OnTouch
$LN4@OnTouch:
; Line 1383
	mov	DWORD PTR _Notification$[ebp], 3
$LN1@OnTouch:
; Line 1385
	mov	eax, DWORD PTR _Notification$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_NotifyParent
	add	esp, 8
; Line 1386
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__OnTouch ENDP
_TEXT	ENDS
EXTRN	_GUI__GetCursorPosChar:PROC
EXTRN	_GUI_pUC_API:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __SetCursorXY
_TEXT	SEGMENT
_Char$17078 = -80					; size = 2
_SizeX$17077 = -68					; size = 4
_WrapChars$17076 = -56					; size = 4
_CursorLine$17075 = -44					; size = 4
_pText$17074 = -32					; size = 4
_pLine$17073 = -20					; size = 4
_CursorPosChar$ = -8					; size = 4
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
__SetCursorXY PROC					; COMDAT
; Line 854
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 855
	mov	DWORD PTR _CursorPosChar$[ebp], 0
; Line 856
	cmp	DWORD PTR _x$[ebp], 0
	jl	SHORT $LN15@SetCursorX
	cmp	DWORD PTR _y$[ebp], 0
	jge	SHORT $LN16@SetCursorX
$LN15@SetCursorX:
; Line 857
	jmp	$LN17@SetCursorX
$LN16@SetCursorX:
; Line 859
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN14@SetCursorX
; Line 862
	mov	DWORD PTR _SizeX$17077[ebp], 0
; Line 864
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	call	_GUI_SetFont
	add	esp, 4
; Line 865
	call	_GUI_GetFontDistY
	mov	ecx, eax
	mov	eax, DWORD PTR _y$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _CursorLine$17075[ebp], eax
; Line 866
	mov	eax, DWORD PTR _CursorLine$17075[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__GetpLineLocked
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pLine$17073[ebp], eax
; Line 867
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$17074[ebp], eax
; Line 868
	mov	eax, DWORD PTR _pLine$17073[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__WrapGetNumCharsDisp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _WrapChars$17076[ebp], eax
; Line 869
	mov	eax, DWORD PTR _WrapChars$17076[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLine$17073[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	add	eax, DWORD PTR _pLine$17073[ebp]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _GUI_pUC_API
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _Char$17078[ebp], ax
; Line 870
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, 32					; 00000020H
	je	SHORT $LN13@SetCursorX
; Line 871
	movzx	eax, WORD PTR _Char$17078[ebp]
	test	eax, eax
	jne	SHORT $LN12@SetCursorX
; Line 872
	mov	eax, DWORD PTR _WrapChars$17076[ebp]
	add	eax, 1
	mov	DWORD PTR _WrapChars$17076[ebp], eax
$LN12@SetCursorX:
; Line 874
	jmp	SHORT $LN11@SetCursorX
$LN13@SetCursorX:
; Line 875
	movzx	eax, WORD PTR _Char$17078[ebp]
	test	eax, eax
	je	SHORT $LN9@SetCursorX
	movzx	eax, WORD PTR _Char$17078[ebp]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN9@SetCursorX
	movzx	eax, WORD PTR _Char$17078[ebp]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN11@SetCursorX
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+144], 1
	jne	SHORT $LN11@SetCursorX
$LN9@SetCursorX:
; Line 876
	mov	eax, DWORD PTR _WrapChars$17076[ebp]
	add	eax, 1
	mov	DWORD PTR _WrapChars$17076[ebp], eax
$LN11@SetCursorX:
; Line 879
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+106]
	cmp	ecx, 1
	jne	SHORT $LN8@SetCursorX
; Line 880
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetXSize
	add	esp, 8
	mov	esi, eax
	mov	edx, DWORD PTR _WrapChars$17076[ebp]
	push	edx
	mov	eax, DWORD PTR _pLine$17073[ebp]
	push	eax
	call	_GUI__GetLineDistX
	add	esp, 8
	sub	esi, eax
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, esi
	mov	DWORD PTR _x$[ebp], ecx
; Line 881
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	shl	ecx, 1
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _x$[ebp], edx
; Line 882
	jns	SHORT $LN8@SetCursorX
; Line 883
	mov	DWORD PTR _x$[ebp], 0
$LN8@SetCursorX:
; Line 887
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, 32					; 00000020H
	je	SHORT $LN6@SetCursorX
$LN5@SetCursorX:
; Line 888
	mov	eax, DWORD PTR _WrapChars$17076[ebp]
	sub	eax, 1
	mov	DWORD PTR _WrapChars$17076[ebp], eax
	cmp	DWORD PTR _WrapChars$17076[ebp], 0
	jle	SHORT $LN4@SetCursorX
; Line 889
	mov	eax, DWORD PTR _pLine$17073[ebp]
	push	eax
	call	_GUI_UC_GetCharCode
	add	esp, 4
	mov	WORD PTR _Char$17078[ebp], ax
; Line 890
	mov	eax, DWORD PTR _pLine$17073[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__GetCharDistX
	add	esp, 8
	add	eax, DWORD PTR _SizeX$17077[ebp]
	mov	DWORD PTR _SizeX$17077[ebp], eax
; Line 891
	movzx	eax, WORD PTR _Char$17078[ebp]
	test	eax, eax
	je	SHORT $LN2@SetCursorX
	mov	eax, DWORD PTR _SizeX$17077[ebp]
	cmp	eax, DWORD PTR _x$[ebp]
	jle	SHORT $LN3@SetCursorX
$LN2@SetCursorX:
; Line 892
	jmp	SHORT $LN4@SetCursorX
$LN3@SetCursorX:
; Line 894
	mov	eax, DWORD PTR _pLine$17073[ebp]
	push	eax
	call	_GUI_UC_GetCharSize
	add	esp, 4
	add	eax, DWORD PTR _pLine$17073[ebp]
	mov	DWORD PTR _pLine$17073[ebp], eax
; Line 895
	jmp	SHORT $LN5@SetCursorX
$LN4@SetCursorX:
; Line 896
	mov	eax, DWORD PTR _pLine$17073[ebp]
	sub	eax, DWORD PTR _pText$17074[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$17074[ebp]
	push	ecx
	call	_GUI_UC__NumBytes2NumChars
	add	esp, 8
	mov	DWORD PTR _CursorPosChar$[ebp], eax
; Line 897
	jmp	SHORT $LN1@SetCursorX
$LN6@SetCursorX:
; Line 898
	mov	eax, DWORD PTR _pLine$17073[ebp]
	sub	eax, DWORD PTR _pText$17074[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$17074[ebp]
	push	ecx
	call	_GUI_UC__NumBytes2NumChars
	add	esp, 8
	mov	esi, eax
	mov	edx, DWORD PTR _WrapChars$17076[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLine$17073[ebp]
	push	ecx
	call	_GUI__GetCursorPosChar
	add	esp, 12					; 0000000cH
	add	esi, eax
	mov	DWORD PTR _CursorPosChar$[ebp], esi
$LN1@SetCursorX:
; Line 900
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pLine$17073[ebp], 0
; Line 901
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$17074[ebp], 0
$LN14@SetCursorX:
; Line 903
	mov	eax, DWORD PTR _CursorPosChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetCursorPos
	add	esp, 8
$LN17@SetCursorX:
; Line 904
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetCursorXY ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetCursorPos
_TEXT	SEGMENT
_CursorLine$ = -32					; size = 4
_CursorPosByte$ = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_CursorPosChar$ = 12					; size = 4
__SetCursorPos PROC					; COMDAT
; Line 799
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 802
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 803
	lea	eax, DWORD PTR _CursorLine$[ebp]
	push	eax
	lea	ecx, DWORD PTR _CursorPosByte$[ebp]
	push	ecx
	mov	edx, DWORD PTR _CursorPosChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__CalcNextValidCursorPos
	add	esp, 20					; 00000014H
	mov	DWORD PTR _CursorPosChar$[ebp], eax
; Line 805
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+90]
	cmp	ecx, DWORD PTR _CursorPosChar$[ebp]
	je	SHORT $LN2@SetCursorP
; Line 807
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	cx, WORD PTR _CursorPosByte$[ebp]
	mov	WORD PTR [eax+92], cx
; Line 808
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	cx, WORD PTR _CursorPosChar$[ebp]
	mov	WORD PTR [eax+90], cx
; Line 809
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	cx, WORD PTR _CursorLine$[ebp]
	mov	WORD PTR [eax+88], cx
; Line 810
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateCursorXY
	add	esp, 4
; Line 811
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 812
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__CalcScrollPos
	add	esp, 4
; Line 813
	jmp	SHORT $LN3@SetCursorP
$LN2@SetCursorP:
; Line 814
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
$LN3@SetCursorP:
; Line 816
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@SetCursorP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@SetCursorP:
	DD	2
	DD	$LN7@SetCursorP
$LN7@SetCursorP:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@SetCursorP
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN6@SetCursorP
$LN6@SetCursorP:
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
$LN5@SetCursorP:
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	66					; 00000042H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
__SetCursorPos ENDP
_TEXT	ENDS
EXTRN	_WM_InvalidateRect:PROC
EXTRN	_SCROLLBAR_Inc:PROC
EXTRN	_SCROLLBAR_Dec:PROC
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __AddKey
_TEXT	SEGMENT
tv143 = -524						; size = 4
tv68 = -524						; size = 4
$T18043 = -513						; size = 1
_CharRectY0$17443 = -312				; size = 4
_IsRTL$17430 = -300					; size = 4
_OldCharRectX1$17427 = -288				; size = 4
_CharRectY0$17426 = -276				; size = 4
_CharRectX1$17425 = -264				; size = 4
_CharRectX0$17424 = -252				; size = 4
_CharSizeX$17423 = -240					; size = 4
_FontSizeY$17422 = -228					; size = 4
_HBorder$17421 = -216					; size = 4
_EffectSize$17420 = -204				; size = 4
_IsRTL$17377 = -192					; size = 4
_pScrollFunc$17363 = -180				; size = 4
_NoChanges$ = -168					; size = 4
_OldCursorPosX$ = -156					; size = 4
_Flags$ = -141						; size = 1
_NumCharsPrompt$ = -132					; size = 2
_CursorPosChar$ = -120					; size = 2
_OldScrollPosH$ = -108					; size = 4
_OldScrollPosV$ = -96					; size = 4
_pObj$ = -84						; size = 4
_OldCharSizeX$ = -72					; size = 4
_OldCursorPosY$ = -60					; size = 4
_NoScroll$ = -48					; size = 4
_RectInvalid$ = -36					; size = 8
_pText$ = -20						; size = 4
_r$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Key$ = 12						; size = 2
__AddKey PROC						; COMDAT
; Line 1395
	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T18043[ebp], 0
; Line 1396
	mov	DWORD PTR _r$[ebp], 0
; Line 1409
	mov	DWORD PTR _NoChanges$[ebp], 0
; Line 1411
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM__IsEnabled
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN60@AddKey
; Line 1417
	movzx	eax, WORD PTR _Key$[ebp]
	mov	DWORD PTR tv68[ebp], eax
	cmp	DWORD PTR tv68[ebp], 17			; 00000011H
	je	SHORT $LN57@AddKey
	cmp	DWORD PTR tv68[ebp], 19			; 00000013H
	je	SHORT $LN56@AddKey
	jmp	SHORT $LN55@AddKey
$LN57@AddKey:
; Line 1419
	mov	DWORD PTR _pScrollFunc$17363[ebp], OFFSET _SCROLLBAR_Dec
; Line 1420
	jmp	SHORT $LN58@AddKey
$LN56@AddKey:
; Line 1422
	mov	DWORD PTR _pScrollFunc$17363[ebp], OFFSET _SCROLLBAR_Inc
; Line 1423
	jmp	SHORT $LN58@AddKey
$LN55@AddKey:
; Line 1425
	mov	DWORD PTR _pScrollFunc$17363[ebp], 0
$LN58@AddKey:
; Line 1427
	cmp	DWORD PTR _pScrollFunc$17363[ebp], 0
	je	SHORT $LN54@AddKey
; Line 1428
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetScrollbarV
	add	esp, 4
	mov	esi, esp
	push	eax
	call	DWORD PTR _pScrollFunc$17363[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1429
	mov	eax, 1
	jmp	$LN61@AddKey
$LN54@AddKey:
; Line 1431
	xor	eax, eax
	jmp	$LN61@AddKey
$LN60@AddKey:
; Line 1433
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1434
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$[ebp], eax
; Line 1435
	cmp	DWORD PTR _GUI__BIDI_Enabled, 0
	jne	SHORT $LN53@AddKey
; Line 1436
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+94]
	mov	edx, DWORD PTR _pObj$[ebp]
	sub	ecx, DWORD PTR [edx+124]
	mov	BYTE PTR $T18043[ebp], 1
	mov	DWORD PTR _OldCursorPosX$[ebp], ecx
$LN53@AddKey:
; Line 1438
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	esi, WORD PTR [eax+96]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	push	edx
	call	_GUI_GetYSizeOfFont
	add	esp, 4
	mov	ecx, DWORD PTR _pObj$[ebp]
	imul	eax, DWORD PTR [ecx+112]
	sub	esi, eax
	mov	DWORD PTR _OldCursorPosY$[ebp], esi
; Line 1439
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+92]
	add	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	_GUI_UC_GetCharCode
	add	esp, 4
	movzx	edx, ax
	push	edx
	call	_GUI_GetCharDistX
	add	esp, 4
	mov	DWORD PTR _OldCharSizeX$[ebp], eax
; Line 1440
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _OldScrollPosV$[ebp], ecx
; Line 1441
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	DWORD PTR _OldScrollPosH$[ebp], ecx
; Line 1442
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	cx, WORD PTR [eax+90]
	mov	WORD PTR _CursorPosChar$[ebp], cx
; Line 1443
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	cx, WORD PTR [eax+80]
	mov	WORD PTR _NumCharsPrompt$[ebp], cx
; Line 1444
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	cl, BYTE PTR [eax+136]
	mov	BYTE PTR _Flags$[ebp], cl
; Line 1445
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$[ebp], 0
; Line 1446
	cmp	DWORD PTR _OldCharSizeX$[ebp], 0
	jne	SHORT $LN52@AddKey
; Line 1448
	lea	eax, DWORD PTR _IsRTL$17377[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__GetCursorSizeX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _OldCharSizeX$[ebp], eax
$LN52@AddKey:
; Line 1450
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1451
	movzx	eax, WORD PTR _Key$[ebp]
	mov	DWORD PTR tv143[ebp], eax
	mov	ecx, DWORD PTR tv143[ebp]
	sub	ecx, 8
	mov	DWORD PTR tv143[ebp], ecx
	cmp	DWORD PTR tv143[ebp], 22		; 00000016H
	ja	$LN21@AddKey
	mov	edx, DWORD PTR tv143[ebp]
	movzx	eax, BYTE PTR $LN65@AddKey[edx]
	jmp	DWORD PTR $LN71@AddKey[eax*4]
$LN49@AddKey:
; Line 1453
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__MoveCursorUp
	add	esp, 4
; Line 1454
	cmp	DWORD PTR _GUI__BIDI_Enabled, 0
	jne	SHORT $LN48@AddKey
; Line 1455
	mov	DWORD PTR _NoChanges$[ebp], 1
$LN48@AddKey:
; Line 1457
	mov	DWORD PTR _r$[ebp], 1
; Line 1458
	jmp	$LN50@AddKey
$LN47@AddKey:
; Line 1460
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__MoveCursorDown
	add	esp, 4
; Line 1461
	cmp	DWORD PTR _GUI__BIDI_Enabled, 0
	jne	SHORT $LN46@AddKey
; Line 1462
	mov	DWORD PTR _NoChanges$[ebp], 1
$LN46@AddKey:
; Line 1464
	mov	DWORD PTR _r$[ebp], 1
; Line 1465
	jmp	$LN50@AddKey
$LN45@AddKey:
; Line 1467
	movzx	eax, WORD PTR _CursorPosChar$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetCursorPos
	add	esp, 8
; Line 1468
	cmp	DWORD PTR _GUI__BIDI_Enabled, 0
	jne	SHORT $LN44@AddKey
; Line 1469
	mov	DWORD PTR _NoChanges$[ebp], 1
$LN44@AddKey:
; Line 1471
	mov	DWORD PTR _r$[ebp], 1
; Line 1472
	jmp	$LN50@AddKey
$LN43@AddKey:
; Line 1474
	movzx	eax, WORD PTR _CursorPosChar$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetCursorPos
	add	esp, 8
; Line 1475
	cmp	DWORD PTR _GUI__BIDI_Enabled, 0
	jne	SHORT $LN42@AddKey
; Line 1476
	mov	DWORD PTR _NoChanges$[ebp], 1
$LN42@AddKey:
; Line 1478
	mov	DWORD PTR _r$[ebp], 1
; Line 1479
	jmp	$LN50@AddKey
$LN41@AddKey:
; Line 1481
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__MoveCursor2LineEnd
	add	esp, 4
; Line 1482
	cmp	DWORD PTR _GUI__BIDI_Enabled, 0
	jne	SHORT $LN40@AddKey
; Line 1483
	mov	DWORD PTR _NoChanges$[ebp], 1
$LN40@AddKey:
; Line 1485
	mov	DWORD PTR _r$[ebp], 1
; Line 1486
	jmp	$LN50@AddKey
$LN39@AddKey:
; Line 1488
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__MoveCursor2LinePos1
	add	esp, 4
; Line 1489
	cmp	DWORD PTR _GUI__BIDI_Enabled, 0
	jne	SHORT $LN38@AddKey
; Line 1490
	mov	DWORD PTR _NoChanges$[ebp], 1
$LN38@AddKey:
; Line 1492
	mov	DWORD PTR _r$[ebp], 1
; Line 1493
	jmp	$LN50@AddKey
$LN37@AddKey:
; Line 1495
	movzx	eax, BYTE PTR _Flags$[ebp]
	and	eax, 1
	jne	SHORT $LN36@AddKey
; Line 1496
	movzx	eax, WORD PTR _CursorPosChar$[ebp]
	movzx	ecx, WORD PTR _NumCharsPrompt$[ebp]
	cmp	eax, ecx
	jle	SHORT $LN35@AddKey
; Line 1497
	movzx	eax, WORD PTR _CursorPosChar$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetCursorPos
	add	esp, 8
; Line 1498
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__DeleteChar
	add	esp, 4
$LN35@AddKey:
; Line 1500
	mov	DWORD PTR _r$[ebp], 1
$LN36@AddKey:
; Line 1502
	jmp	$LN50@AddKey
$LN34@AddKey:
; Line 1504
	movzx	eax, BYTE PTR _Flags$[ebp]
	and	eax, 1
	jne	SHORT $LN33@AddKey
; Line 1505
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__DeleteChar
	add	esp, 4
; Line 1506
	mov	DWORD PTR _r$[ebp], 1
$LN33@AddKey:
; Line 1508
	jmp	$LN50@AddKey
$LN32@AddKey:
; Line 1510
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1511
	movzx	eax, BYTE PTR _Flags$[ebp]
	and	eax, 4
	jne	SHORT $LN31@AddKey
; Line 1512
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	or	ecx, 4
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	BYTE PTR [edx+136], cl
; Line 1513
	jmp	SHORT $LN30@AddKey
$LN31@AddKey:
; Line 1514
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	BYTE PTR [edx+136], cl
$LN30@AddKey:
; Line 1516
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1517
	cmp	DWORD PTR _GUI__BIDI_Enabled, 0
	jne	SHORT $LN29@AddKey
; Line 1518
	mov	DWORD PTR _NoChanges$[ebp], 1
$LN29@AddKey:
; Line 1520
	mov	DWORD PTR _r$[ebp], 1
; Line 1521
	jmp	$LN50@AddKey
$LN28@AddKey:
; Line 1523
	movzx	eax, BYTE PTR _Flags$[ebp]
	and	eax, 1
	je	SHORT $LN27@AddKey
; Line 1524
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__MoveCursor2NextLine
	add	esp, 4
; Line 1525
	jmp	SHORT $LN26@AddKey
$LN27@AddKey:
; Line 1526
	push	10					; 0000000aH
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__InsertChar
	add	esp, 8
	test	eax, eax
	je	SHORT $LN26@AddKey
; Line 1527
	movzx	eax, BYTE PTR _Flags$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN24@AddKey
; Line 1528
	movzx	eax, WORD PTR _CursorPosChar$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetCursorPos
	add	esp, 8
; Line 1529
	jmp	SHORT $LN26@AddKey
$LN24@AddKey:
; Line 1530
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__MoveCursor2NextLine
	add	esp, 4
$LN26@AddKey:
; Line 1534
	mov	DWORD PTR _r$[ebp], 1
; Line 1535
	jmp	SHORT $LN50@AddKey
$LN22@AddKey:
; Line 1537
	jmp	SHORT $LN50@AddKey
$LN21@AddKey:
; Line 1539
	movzx	eax, BYTE PTR _Flags$[ebp]
	and	eax, 1
	jne	SHORT $LN50@AddKey
	movzx	eax, WORD PTR _Key$[ebp]
	cmp	eax, 32					; 00000020H
	jl	SHORT $LN50@AddKey
; Line 1540
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__IsOverwriteAtThisChar
	add	esp, 4
	test	eax, eax
	je	SHORT $LN19@AddKey
; Line 1541
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__DeleteChar
	add	esp, 4
$LN19@AddKey:
; Line 1543
	movzx	eax, WORD PTR _Key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__InsertChar
	add	esp, 8
	test	eax, eax
	je	SHORT $LN18@AddKey
; Line 1544
	movzx	eax, WORD PTR _CursorPosChar$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetCursorPos
	add	esp, 8
$LN18@AddKey:
; Line 1546
	mov	DWORD PTR _r$[ebp], 1
$LN50@AddKey:
; Line 1550
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__ManageScrollers
	add	esp, 4
; Line 1551
	lea	eax, DWORD PTR _RectInvalid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_GetInsideRectExScrollbar
	add	esp, 8
; Line 1553
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1554
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	cmp	ecx, DWORD PTR _OldScrollPosH$[ebp]
	jne	SHORT $LN17@AddKey
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	cmp	ecx, DWORD PTR _OldScrollPosV$[ebp]
	jne	SHORT $LN17@AddKey
; Line 1555
	mov	DWORD PTR _NoScroll$[ebp], 1
; Line 1556
	jmp	SHORT $LN16@AddKey
$LN17@AddKey:
; Line 1557
	mov	DWORD PTR _NoScroll$[ebp], 0
$LN16@AddKey:
; Line 1561
	cmp	DWORD PTR _GUI__BIDI_Enabled, 0
	jne	$LN15@AddKey
	cmp	DWORD PTR _NoChanges$[ebp], 1
	jne	$LN15@AddKey
	cmp	DWORD PTR _NoScroll$[ebp], 1
	jne	$LN15@AddKey
; Line 1568
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$[ebp], eax
; Line 1569
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _EffectSize$17420[ebp], edx
; Line 1570
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+139]
	mov	DWORD PTR _HBorder$17421[ebp], ecx
; Line 1571
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	call	_GUI_GetYSizeOfFont
	add	esp, 4
	mov	DWORD PTR _FontSizeY$17422[ebp], eax
; Line 1572
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+92]
	add	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	_GUI_UC_GetCharCode
	add	esp, 4
	movzx	edx, ax
	push	edx
	call	_GUI_GetCharDistX
	add	esp, 4
	mov	DWORD PTR _CharSizeX$17423[ebp], eax
; Line 1573
	cmp	DWORD PTR _CharSizeX$17423[ebp], 0
	jne	SHORT $LN14@AddKey
; Line 1575
	lea	eax, DWORD PTR _IsRTL$17430[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__GetCursorSizeX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _CharSizeX$17423[ebp], eax
$LN14@AddKey:
; Line 1578
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+94]
	mov	edx, DWORD PTR _pObj$[ebp]
	sub	ecx, DWORD PTR [edx+124]
	mov	DWORD PTR _CharRectX0$17424[ebp], ecx
; Line 1579
	mov	eax, DWORD PTR _OldCursorPosX$[ebp]
	cmp	eax, DWORD PTR _CharRectX0$17424[ebp]
	jge	SHORT $LN13@AddKey
; Line 1580
	cmp	BYTE PTR $T18043[ebp], 0
	jne	SHORT $LN63@AddKey
	push	OFFSET $LN64@AddKey
	call	__RTC_UninitUse
	add	esp, 4
$LN63@AddKey:
	mov	ax, WORD PTR _OldCursorPosX$[ebp]
	mov	WORD PTR _RectInvalid$[ebp], ax
; Line 1581
	jmp	SHORT $LN12@AddKey
$LN13@AddKey:
; Line 1582
	mov	ax, WORD PTR _CharRectX0$17424[ebp]
	mov	WORD PTR _RectInvalid$[ebp], ax
$LN12@AddKey:
; Line 1584
	mov	eax, DWORD PTR _EffectSize$17420[ebp]
	add	eax, DWORD PTR _HBorder$17421[ebp]
	movsx	ecx, WORD PTR _RectInvalid$[ebp]
	add	ecx, eax
	mov	WORD PTR _RectInvalid$[ebp], cx
; Line 1586
	mov	eax, DWORD PTR _CharSizeX$17423[ebp]
	mov	ecx, DWORD PTR _CharRectX0$17424[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _CharRectX1$17425[ebp], edx
; Line 1587
	mov	eax, DWORD PTR _OldCharSizeX$[ebp]
	mov	ecx, DWORD PTR _OldCursorPosX$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _OldCharRectX1$17427[ebp], edx
; Line 1588
	mov	eax, DWORD PTR _OldCharRectX1$17427[ebp]
	cmp	eax, DWORD PTR _CharRectX1$17425[ebp]
	jle	SHORT $LN11@AddKey
; Line 1589
	mov	ax, WORD PTR _OldCharRectX1$17427[ebp]
	mov	WORD PTR _RectInvalid$[ebp+4], ax
; Line 1590
	jmp	SHORT $LN10@AddKey
$LN11@AddKey:
; Line 1591
	mov	ax, WORD PTR _CharRectX1$17425[ebp]
	mov	WORD PTR _RectInvalid$[ebp+4], ax
$LN10@AddKey:
; Line 1593
	mov	eax, DWORD PTR _EffectSize$17420[ebp]
	add	eax, DWORD PTR _HBorder$17421[ebp]
	movsx	ecx, WORD PTR _RectInvalid$[ebp+4]
	add	ecx, eax
	mov	WORD PTR _RectInvalid$[ebp+4], cx
; Line 1595
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+96]
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	eax, DWORD PTR [edx+112]
	imul	eax, DWORD PTR _FontSizeY$17422[ebp]
	sub	ecx, eax
	mov	DWORD PTR _CharRectY0$17426[ebp], ecx
; Line 1596
	mov	eax, DWORD PTR _OldCursorPosY$[ebp]
	cmp	eax, DWORD PTR _CharRectY0$17426[ebp]
	jge	SHORT $LN9@AddKey
; Line 1597
	mov	ax, WORD PTR _OldCursorPosY$[ebp]
	mov	WORD PTR _RectInvalid$[ebp+2], ax
; Line 1598
	jmp	SHORT $LN8@AddKey
$LN9@AddKey:
; Line 1599
	mov	ax, WORD PTR _CharRectY0$17426[ebp]
	mov	WORD PTR _RectInvalid$[ebp+2], ax
$LN8@AddKey:
; Line 1601
	movsx	eax, WORD PTR _RectInvalid$[ebp+2]
	add	eax, DWORD PTR _EffectSize$17420[ebp]
	mov	WORD PTR _RectInvalid$[ebp+2], ax
; Line 1603
	mov	eax, DWORD PTR _OldCursorPosY$[ebp]
	cmp	eax, DWORD PTR _CharRectY0$17426[ebp]
	jle	SHORT $LN7@AddKey
; Line 1604
	mov	eax, DWORD PTR _OldCursorPosY$[ebp]
	mov	ecx, DWORD PTR _FontSizeY$17422[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	WORD PTR _RectInvalid$[ebp+6], dx
; Line 1605
	jmp	SHORT $LN6@AddKey
$LN7@AddKey:
; Line 1606
	mov	eax, DWORD PTR _CharRectY0$17426[ebp]
	mov	ecx, DWORD PTR _FontSizeY$17422[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	WORD PTR _RectInvalid$[ebp+6], dx
$LN6@AddKey:
; Line 1608
	movsx	eax, WORD PTR _RectInvalid$[ebp+6]
	add	eax, DWORD PTR _EffectSize$17420[ebp]
	mov	WORD PTR _RectInvalid$[ebp+6], ax
; Line 1609
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$[ebp], 0
; Line 1610
	jmp	SHORT $LN5@AddKey
$LN15@AddKey:
; Line 1611
	cmp	DWORD PTR _GUI__BIDI_Enabled, 0
	je	SHORT $LN3@AddKey
	cmp	DWORD PTR _NoScroll$[ebp], 0
	je	SHORT $LN5@AddKey
$LN3@AddKey:
; Line 1617
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	esi, WORD PTR [eax+96]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	push	edx
	call	_GUI_GetYSizeOfFont
	add	esp, 4
	mov	ecx, DWORD PTR _pObj$[ebp]
	imul	eax, DWORD PTR [ecx+112]
	sub	esi, eax
	mov	DWORD PTR _CharRectY0$17443[ebp], esi
; Line 1618
	mov	eax, DWORD PTR _OldCursorPosY$[ebp]
	cmp	eax, DWORD PTR _CharRectY0$17443[ebp]
	jge	SHORT $LN2@AddKey
; Line 1619
	mov	ax, WORD PTR _OldCursorPosY$[ebp]
	mov	WORD PTR _RectInvalid$[ebp+2], ax
; Line 1620
	jmp	SHORT $LN5@AddKey
$LN2@AddKey:
; Line 1621
	mov	ax, WORD PTR _CharRectY0$17443[ebp]
	mov	WORD PTR _RectInvalid$[ebp+2], ax
$LN5@AddKey:
; Line 1625
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1626
	lea	eax, DWORD PTR _RectInvalid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_InvalidateRect
	add	esp, 8
; Line 1627
	mov	eax, DWORD PTR _r$[ebp]
$LN61@AddKey:
; Line 1628
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN70@AddKey
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN70@AddKey:
	DD	3
	DD	$LN69@AddKey
$LN69@AddKey:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN66@AddKey
	DD	-192					; ffffff40H
	DD	4
	DD	$LN67@AddKey
	DD	-300					; fffffed4H
	DD	4
	DD	$LN68@AddKey
$LN68@AddKey:
	DB	73					; 00000049H
	DB	115					; 00000073H
	DB	82					; 00000052H
	DB	84					; 00000054H
	DB	76					; 0000004cH
	DB	0
$LN67@AddKey:
	DB	73					; 00000049H
	DB	115					; 00000073H
	DB	82					; 00000052H
	DB	84					; 00000054H
	DB	76					; 0000004cH
	DB	0
$LN66@AddKey:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$LN64@AddKey:
	DB	79					; 0000004fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	88					; 00000058H
	DB	0
	npad	2
$LN71@AddKey:
	DD	$LN37@AddKey
	DD	$LN28@AddKey
	DD	$LN43@AddKey
	DD	$LN49@AddKey
	DD	$LN45@AddKey
	DD	$LN47@AddKey
	DD	$LN39@AddKey
	DD	$LN41@AddKey
	DD	$LN22@AddKey
	DD	$LN32@AddKey
	DD	$LN34@AddKey
	DD	$LN21@AddKey
$LN65@AddKey:
	DB	0
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	1
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	2
	DB	3
	DB	4
	DB	5
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	6
	DB	7
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	8
	DB	11					; 0000000bH
	DB	9
	DB	10					; 0000000aH
__AddKey ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __MoveCursorUp
_TEXT	SEGMENT
_yPos$ = -32						; size = 4
_xPos$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__MoveCursorUp PROC					; COMDAT
; Line 910
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 913
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 914
	lea	eax, DWORD PTR _yPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__GetCursorXY
	add	esp, 16					; 00000010H
; Line 915
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	call	_GUI_GetYDistOfFont
	add	esp, 4
	mov	edx, DWORD PTR _yPos$[ebp]
	sub	edx, eax
	mov	DWORD PTR _yPos$[ebp], edx
; Line 916
	mov	eax, DWORD PTR _yPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__SetCursorXY
	add	esp, 16					; 00000010H
; Line 917
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 918
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MoveCursor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@MoveCursor:
	DD	2
	DD	$LN5@MoveCursor
$LN5@MoveCursor:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@MoveCursor
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@MoveCursor
$LN4@MoveCursor:
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN3@MoveCursor:
	DB	120					; 00000078H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__MoveCursorUp ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __MoveCursorDown
_TEXT	SEGMENT
_yPos$ = -32						; size = 4
_xPos$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__MoveCursorDown PROC					; COMDAT
; Line 924
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 927
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 928
	lea	eax, DWORD PTR _yPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__GetCursorXY
	add	esp, 16					; 00000010H
; Line 929
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	call	_GUI_GetYDistOfFont
	add	esp, 4
	add	eax, DWORD PTR _yPos$[ebp]
	mov	DWORD PTR _yPos$[ebp], eax
; Line 930
	mov	eax, DWORD PTR _yPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__SetCursorXY
	add	esp, 16					; 00000010H
; Line 931
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 932
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MoveCursor@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@MoveCursor@2:
	DD	2
	DD	$LN5@MoveCursor@2
$LN5@MoveCursor@2:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@MoveCursor@2
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@MoveCursor@2
$LN4@MoveCursor@2:
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN3@MoveCursor@2:
	DB	120					; 00000078H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__MoveCursorDown ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __MoveCursor2NextLine
_TEXT	SEGMENT
_yPos$ = -32						; size = 4
_xPos$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__MoveCursor2NextLine PROC				; COMDAT
; Line 938
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 941
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 942
	lea	eax, DWORD PTR _yPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__GetCursorXY
	add	esp, 16					; 00000010H
; Line 943
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	call	_GUI_GetYDistOfFont
	add	esp, 4
	add	eax, DWORD PTR _yPos$[ebp]
	mov	DWORD PTR _yPos$[ebp], eax
; Line 944
	mov	eax, DWORD PTR _yPos$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__SetCursorXY
	add	esp, 16					; 00000010H
; Line 945
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 946
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MoveCursor@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@MoveCursor@3:
	DD	2
	DD	$LN5@MoveCursor@3
$LN5@MoveCursor@3:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@MoveCursor@3
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@MoveCursor@3
$LN4@MoveCursor@3:
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN3@MoveCursor@3:
	DB	120					; 00000078H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__MoveCursor2NextLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __MoveCursor2LineEnd
_TEXT	SEGMENT
_yPos$ = -32						; size = 4
_xPos$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__MoveCursor2LineEnd PROC				; COMDAT
; Line 952
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 955
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 956
	lea	eax, DWORD PTR _yPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__GetCursorXY
	add	esp, 16					; 00000010H
; Line 957
	mov	eax, DWORD PTR _yPos$[ebp]
	push	eax
	push	32767					; 00007fffH
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__SetCursorXY
	add	esp, 16					; 00000010H
; Line 958
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 959
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MoveCursor@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@MoveCursor@4:
	DD	2
	DD	$LN5@MoveCursor@4
$LN5@MoveCursor@4:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@MoveCursor@4
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@MoveCursor@4
$LN4@MoveCursor@4:
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN3@MoveCursor@4:
	DB	120					; 00000078H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__MoveCursor2LineEnd ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __MoveCursor2LinePos1
_TEXT	SEGMENT
_yPos$ = -32						; size = 4
_xPos$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__MoveCursor2LinePos1 PROC				; COMDAT
; Line 965
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 968
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 969
	lea	eax, DWORD PTR _yPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__GetCursorXY
	add	esp, 16					; 00000010H
; Line 970
	mov	eax, DWORD PTR _yPos$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__SetCursorXY
	add	esp, 16					; 00000010H
; Line 971
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 972
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MoveCursor@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@MoveCursor@5:
	DD	2
	DD	$LN5@MoveCursor@5
$LN5@MoveCursor@5:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@MoveCursor@5
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@MoveCursor@5
$LN4@MoveCursor@5:
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN3@MoveCursor@5:
	DB	120					; 00000078H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__MoveCursor2LinePos1 ENDP
_TEXT	ENDS
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DeleteChar
_TEXT	SEGMENT
_NumBytes$17244 = -104					; size = 4
_NumChars$17243 = -92					; size = 4
_CursorLine$17242 = -80					; size = 4
_pEndLine$17241 = -68					; size = 4
_pLine$17240 = -56					; size = 4
_pCursor$17239 = -44					; size = 4
_s$17236 = -32						; size = 4
_CursorOffset$17235 = -20				; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__DeleteChar PROC					; COMDAT
; Line 1165
	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1167
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1168
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN4@DeleteChar
; Line 1171
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _s$17236[ebp], eax
; Line 1172
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+92]
	mov	DWORD PTR _CursorOffset$17235[ebp], ecx
; Line 1173
	mov	eax, DWORD PTR _s$17236[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	cmp	DWORD PTR _CursorOffset$17235[ebp], eax
	jae	$LN3@DeleteChar
; Line 1176
	mov	eax, DWORD PTR _s$17236[ebp]
	add	eax, DWORD PTR _CursorOffset$17235[ebp]
	mov	DWORD PTR _pCursor$17239[ebp], eax
; Line 1177
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+88]
	mov	DWORD PTR _CursorLine$17242[ebp], ecx
; Line 1178
	mov	eax, DWORD PTR _CursorLine$17242[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__GetpLineLocked
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pLine$17240[ebp], eax
; Line 1179
	mov	eax, DWORD PTR _pLine$17240[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__WrapGetNumCharsDisp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _NumChars$17243[ebp], eax
; Line 1180
	mov	eax, DWORD PTR _NumChars$17243[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLine$17240[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	add	eax, DWORD PTR _pLine$17240[ebp]
	mov	DWORD PTR _pEndLine$17241[ebp], eax
; Line 1181
	mov	eax, DWORD PTR _pLine$17240[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	__WrapGetNumBytesToNextLine
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _pLine$17240[ebp]
	mov	DWORD PTR _pLine$17240[ebp], eax
; Line 1182
	mov	eax, DWORD PTR _pCursor$17239[ebp]
	cmp	eax, DWORD PTR _pEndLine$17241[ebp]
	jne	SHORT $LN2@DeleteChar
; Line 1183
	mov	eax, DWORD PTR _pLine$17240[ebp]
	sub	eax, DWORD PTR _pEndLine$17241[ebp]
	mov	DWORD PTR _NumBytes$17244[ebp], eax
; Line 1184
	jmp	SHORT $LN1@DeleteChar
$LN2@DeleteChar:
; Line 1185
	mov	eax, DWORD PTR _pCursor$17239[ebp]
	push	eax
	call	_GUI_UC_GetCharSize
	add	esp, 4
	mov	DWORD PTR _NumBytes$17244[ebp], eax
$LN1@DeleteChar:
; Line 1187
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pLine$17240[ebp], 0
; Line 1188
	mov	eax, DWORD PTR _NumBytes$17244[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCursor$17239[ebp]
	push	ecx
	call	_GUI_UC__NumBytes2NumChars
	add	esp, 8
	mov	DWORD PTR _NumChars$17243[ebp], eax
; Line 1189
	mov	eax, DWORD PTR _pCursor$17239[ebp]
	add	eax, DWORD PTR _NumBytes$17244[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCursor$17239[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 1190
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1191
	push	5
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_NotifyParent
	add	esp, 8
; Line 1192
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1193
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+78]
	sub	ecx, DWORD PTR _NumChars$17243[ebp]
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	WORD PTR [edx+78], cx
; Line 1194
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateNumLines
	add	esp, 4
; Line 1195
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateTextSizeX
	add	esp, 4
; Line 1196
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateCursorXY
	add	esp, 4
; Line 1197
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__ClearCache
	add	esp, 4
; Line 1198
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+90]
	push	ecx
	mov	edx, DWORD PTR _s$17236[ebp]
	push	edx
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__GetCursorLine
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	WORD PTR [edx+88], ax
$LN3@DeleteChar:
; Line 1200
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _s$17236[ebp], 0
$LN4@DeleteChar:
; Line 1202
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1203
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DeleteChar ENDP
_TEXT	ENDS
EXTRN	_GUI_UC_Encode:PROC
EXTRN	_memmove:PROC
EXTRN	_GUI_UC__CalcSizeOfChar:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __InsertChar
_TEXT	SEGMENT
_pText$17262 = -44					; size = 4
_CursorOffset$17261 = -32				; size = 4
_BytesNeeded$17259 = -20				; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Char$ = 12						; size = 2
__InsertChar PROC					; COMDAT
; Line 1211
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1213
	push	1
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__IsCharsAvailable
	add	esp, 8
	test	eax, eax
	je	$LN2@InsertChar
; Line 1215
	movzx	eax, WORD PTR _Char$[ebp]
	push	eax
	call	_GUI_UC__CalcSizeOfChar
	add	esp, 4
	mov	DWORD PTR _BytesNeeded$17259[ebp], eax
; Line 1216
	mov	eax, DWORD PTR _BytesNeeded$17259[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__IsSpaceInBuffer
	add	esp, 8
	test	eax, eax
	je	$LN2@InsertChar
; Line 1219
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1220
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$17262[ebp], eax
; Line 1221
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+92]
	mov	DWORD PTR _CursorOffset$17261[ebp], ecx
; Line 1222
	mov	eax, DWORD PTR _pText$17262[ebp]
	add	eax, DWORD PTR _CursorOffset$17261[ebp]
	mov	DWORD PTR _pText$17262[ebp], eax
; Line 1223
	mov	eax, DWORD PTR _pText$17262[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pText$17262[ebp]
	push	ecx
	mov	edx, DWORD PTR _pText$17262[ebp]
	add	edx, DWORD PTR _BytesNeeded$17259[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH
; Line 1224
	movzx	eax, WORD PTR _Char$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$17262[ebp]
	push	ecx
	call	_GUI_UC_Encode
	add	esp, 8
; Line 1225
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$17262[ebp], 0
; Line 1226
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+78]
	add	ecx, 1
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	WORD PTR [edx+78], cx
; Line 1227
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateNumLines
	add	esp, 4
; Line 1228
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateTextSizeX
	add	esp, 4
; Line 1229
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__ClearCache
	add	esp, 4
; Line 1230
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1231
	push	5
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_NotifyParent
	add	esp, 8
; Line 1232
	mov	eax, 1
	jmp	SHORT $LN3@InsertChar
$LN2@InsertChar:
; Line 1235
	xor	eax, eax
$LN3@InsertChar:
; Line 1236
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__InsertChar ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __IsSpaceInBuffer
_TEXT	SEGMENT
_pText$17210 = -32					; size = 4
_NumBytes$ = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_BytesNeeded$ = 12					; size = 4
__IsSpaceInBuffer PROC					; COMDAT
; Line 1105
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1107
	mov	DWORD PTR _NumBytes$[ebp], 0
; Line 1108
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1109
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN3@IsSpaceInB
; Line 1111
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$17210[ebp], eax
; Line 1112
	mov	eax, DWORD PTR _pText$17210[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _NumBytes$[ebp], eax
; Line 1113
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$17210[ebp], 0
$LN3@IsSpaceInB:
; Line 1115
	mov	eax, DWORD PTR _NumBytes$[ebp]
	mov	ecx, DWORD PTR _BytesNeeded$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+86]
	sub	edx, ecx
	mov	DWORD PTR _BytesNeeded$[ebp], edx
; Line 1116
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1117
	cmp	DWORD PTR _BytesNeeded$[ebp], 0
	jle	SHORT $LN2@IsSpaceInB
; Line 1118
	mov	eax, DWORD PTR _BytesNeeded$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__IncrementBuffer
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@IsSpaceInB
; Line 1119
	xor	eax, eax
	jmp	SHORT $LN4@IsSpaceInB
$LN2@IsSpaceInB:
; Line 1122
	mov	eax, 1
$LN4@IsSpaceInB:
; Line 1123
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__IsSpaceInBuffer ENDP
_TEXT	ENDS
EXTRN	_GUI_ALLOC_Realloc:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __IncrementBuffer
_TEXT	SEGMENT
_pText$17197 = -56					; size = 4
_NewSize$ = -44						; size = 4
_hText$ = -32						; size = 4
_hNew$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_AddBytes$ = 12						; size = 4
__IncrementBuffer PROC					; COMDAT
; Line 1068
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1073
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1074
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _hText$[ebp], ecx
; Line 1075
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+86]
	add	ecx, DWORD PTR _AddBytes$[ebp]
	mov	DWORD PTR _NewSize$[ebp], ecx
; Line 1076
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1077
	mov	eax, DWORD PTR _NewSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hText$[ebp]
	push	ecx
	call	_GUI_ALLOC_Realloc
	add	esp, 8
	mov	DWORD PTR _hNew$[ebp], eax
; Line 1078
	cmp	DWORD PTR _hNew$[ebp], 0
	je	SHORT $LN2@IncrementB
; Line 1079
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1080
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+72], 0
	jne	SHORT $LN1@IncrementB
; Line 1082
	mov	eax, DWORD PTR _hNew$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$17197[ebp], eax
; Line 1083
	mov	eax, DWORD PTR _pText$17197[ebp]
	mov	BYTE PTR [eax], 0
; Line 1084
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$17197[ebp], 0
$LN1@IncrementB:
; Line 1086
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	cx, WORD PTR _NewSize$[ebp]
	mov	WORD PTR [eax+86], cx
; Line 1087
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _hNew$[ebp]
	mov	DWORD PTR [eax+72], ecx
; Line 1088
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1089
	mov	eax, 1
	jmp	SHORT $LN3@IncrementB
$LN2@IncrementB:
; Line 1091
	xor	eax, eax
$LN3@IncrementB:
; Line 1092
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__IncrementBuffer ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __IsCharsAvailable
_TEXT	SEGMENT
_NumChars$17225 = -32					; size = 4
_r$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_CharsNeeded$ = 12					; size = 4
__IsCharsAvailable PROC					; COMDAT
; Line 1135
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1137
	mov	DWORD PTR _r$[ebp], 1
; Line 1138
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1139
	cmp	DWORD PTR _CharsNeeded$[ebp], 0
	jle	SHORT $LN3@IsCharsAva
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+76]
	test	ecx, ecx
	jle	SHORT $LN3@IsCharsAva
; Line 1140
	mov	DWORD PTR _NumChars$17225[ebp], 0
; Line 1141
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN2@IsCharsAva
; Line 1142
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__GetNumChars
	add	esp, 4
	mov	DWORD PTR _NumChars$17225[ebp], eax
$LN2@IsCharsAva:
; Line 1144
	mov	eax, DWORD PTR _CharsNeeded$[ebp]
	add	eax, DWORD PTR _NumChars$17225[ebp]
	mov	ecx, DWORD PTR _pObj$[ebp]
	movzx	edx, WORD PTR [ecx+76]
	cmp	eax, edx
	jle	SHORT $LN3@IsCharsAva
; Line 1145
	mov	DWORD PTR _r$[ebp], 0
$LN3@IsCharsAva:
; Line 1148
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1149
	mov	eax, DWORD PTR _r$[ebp]
; Line 1150
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__IsCharsAvailable ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetText
PUBLIC	_MULTIEDIT_CreateEx
EXTRN	_WM_DeleteWindow:PROC
EXTRN	_GUI_ALLOC_AllocZero:PROC
EXTRN	_WIDGET__Init:PROC
EXTRN	_WM_CreateWindowAsChild:PROC
EXTRN	_WM_GetClientRectEx:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_CreateEx
_TEXT	SEGMENT
_hText$17562 = -60					; size = 4
_pObj$17555 = -48					; size = 4
_i$17554 = -36						; size = 4
_Rect$17550 = -24					; size = 8
_hObj$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xsize$ = 16						; size = 4
_ysize$ = 20						; size = 4
_hParent$ = 24						; size = 4
_WinFlags$ = 28						; size = 4
_ExFlags$ = 32						; size = 4
_Id$ = 36						; size = 4
_BufferSize$ = 40					; size = 4
_pText$ = 44						; size = 4
_MULTIEDIT_CreateEx PROC				; COMDAT
; Line 1823
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1827
	cmp	DWORD PTR _xsize$[ebp], 0
	jne	SHORT $LN10@MULTIEDIT_@4
	cmp	DWORD PTR _ysize$[ebp], 0
	jne	SHORT $LN10@MULTIEDIT_@4
	cmp	DWORD PTR _x0$[ebp], 0
	jne	SHORT $LN10@MULTIEDIT_@4
	cmp	DWORD PTR _y0$[ebp], 0
	jne	SHORT $LN10@MULTIEDIT_@4
; Line 1829
	lea	eax, DWORD PTR _Rect$17550[ebp]
	push	eax
	mov	ecx, DWORD PTR _hParent$[ebp]
	push	ecx
	call	_WM_GetClientRectEx
	add	esp, 8
; Line 1830
	movsx	eax, WORD PTR _Rect$17550[ebp+4]
	movsx	ecx, WORD PTR _Rect$17550[ebp]
	sub	eax, ecx
	add	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
; Line 1831
	movsx	eax, WORD PTR _Rect$17550[ebp+6]
	movsx	ecx, WORD PTR _Rect$17550[ebp+2]
	sub	eax, ecx
	add	eax, 1
	mov	DWORD PTR _ysize$[ebp], eax
$LN10@MULTIEDIT_@4:
; Line 1834
	push	104					; 00000068H
	push	OFFSET _MULTIEDIT_Callback
	mov	eax, DWORD PTR _WinFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hParent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ysize$[ebp]
	push	edx
	mov	eax, DWORD PTR _xsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	_WM_CreateWindowAsChild
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hObj$[ebp], eax
; Line 1835
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN9@MULTIEDIT_@4
; Line 1838
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17555[ebp], eax
; Line 1840
	push	16					; 00000010H
	mov	eax, DWORD PTR _Id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$17555[ebp]
	push	ecx
	call	_WIDGET__Init
	add	esp, 12					; 0000000cH
; Line 1842
	mov	eax, DWORD PTR _pObj$17555[ebp]
	mov	DWORD PTR [eax+148], 1297435717		; 4d554c45H
; Line 1843
	mov	DWORD PTR _i$17554[ebp], 0
	jmp	SHORT $LN8@MULTIEDIT_@4
$LN7@MULTIEDIT_@4:
	mov	eax, DWORD PTR _i$17554[ebp]
	add	eax, 1
	mov	DWORD PTR _i$17554[ebp], eax
$LN8@MULTIEDIT_@4:
	cmp	DWORD PTR _i$17554[ebp], 2
	jge	SHORT $LN6@MULTIEDIT_@4
; Line 1844
	mov	eax, DWORD PTR _i$17554[ebp]
	mov	ecx, DWORD PTR _pObj$17555[ebp]
	mov	edx, DWORD PTR _i$17554[ebp]
	mov	edx, DWORD PTR __aDefaultBkColor[edx*4]
	mov	DWORD PTR [ecx+eax*4+56], edx
; Line 1845
	mov	eax, DWORD PTR _i$17554[ebp]
	mov	ecx, DWORD PTR _pObj$17555[ebp]
	mov	edx, DWORD PTR _i$17554[ebp]
	mov	edx, DWORD PTR __aDefaultColor[edx*4]
	mov	DWORD PTR [ecx+eax*4+64], edx
; Line 1846
	jmp	SHORT $LN7@MULTIEDIT_@4
$LN6@MULTIEDIT_@4:
; Line 1847
	mov	eax, DWORD PTR _pObj$17555[ebp]
	mov	ecx, DWORD PTR __pDefaultFont
	mov	DWORD PTR [eax+132], ecx
; Line 1848
	mov	eax, DWORD PTR _pObj$17555[ebp]
	mov	cl, BYTE PTR _ExFlags$[ebp]
	mov	BYTE PTR [eax+136], cl
; Line 1849
	xor	eax, eax
	mov	ecx, DWORD PTR _pObj$17555[ebp]
	mov	WORD PTR [ecx+90], ax
; Line 1850
	xor	eax, eax
	mov	ecx, DWORD PTR _pObj$17555[ebp]
	mov	WORD PTR [ecx+92], ax
; Line 1851
	mov	eax, DWORD PTR _pObj$17555[ebp]
	mov	BYTE PTR [eax+139], 1
; Line 1852
	xor	eax, eax
	mov	ecx, DWORD PTR _pObj$17555[ebp]
	mov	WORD PTR [ecx+76], ax
; Line 1853
	xor	eax, eax
	mov	ecx, DWORD PTR _pObj$17555[ebp]
	mov	WORD PTR [ecx+80], ax
; Line 1854
	xor	eax, eax
	mov	ecx, DWORD PTR _pObj$17555[ebp]
	mov	WORD PTR [ecx+86], ax
; Line 1855
	mov	eax, DWORD PTR _pObj$17555[ebp]
	mov	DWORD PTR [eax+72], 0
; Line 1856
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17555[ebp], 0
; Line 1857
	cmp	DWORD PTR _BufferSize$[ebp], 0
	jle	SHORT $LN5@MULTIEDIT_@4
; Line 1859
	mov	eax, DWORD PTR _BufferSize$[ebp]
	push	eax
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hText$17562[ebp], eax
; Line 1860
	cmp	DWORD PTR _hText$17562[ebp], 0
	je	SHORT $LN4@MULTIEDIT_@4
; Line 1861
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17555[ebp], eax
; Line 1862
	mov	eax, DWORD PTR _pObj$17555[ebp]
	mov	cx, WORD PTR _BufferSize$[ebp]
	mov	WORD PTR [eax+86], cx
; Line 1863
	mov	eax, DWORD PTR _pObj$17555[ebp]
	mov	ecx, DWORD PTR _hText$17562[ebp]
	mov	DWORD PTR [eax+72], ecx
; Line 1864
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17555[ebp], 0
; Line 1865
	jmp	SHORT $LN5@MULTIEDIT_@4
$LN4@MULTIEDIT_@4:
; Line 1866
	push	OFFSET $SG17566
	call	_GUI_ErrorOut
	add	esp, 4
; Line 1867
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_DeleteWindow
	add	esp, 4
; Line 1868
	mov	DWORD PTR _hObj$[ebp], 0
$LN5@MULTIEDIT_@4:
; Line 1871
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_MULTIEDIT_SetText
	add	esp, 8
; Line 1872
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__ManageScrollers
	add	esp, 4
; Line 1873
	jmp	SHORT $LN2@MULTIEDIT_@4
$LN9@MULTIEDIT_@4:
; Line 1874
	cmp	DWORD PTR _hObj$[ebp], 0
	jne	SHORT $LN2@MULTIEDIT_@4
	push	OFFSET $SG17569
	call	_GUI_ErrorOut
	add	esp, 4
$LN2@MULTIEDIT_@4:
; Line 1877
	mov	eax, DWORD PTR _hObj$[ebp]
; Line 1878
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@MULTIEDIT_@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@MULTIEDIT_@4:
	DD	1
	DD	$LN14@MULTIEDIT_@4
$LN14@MULTIEDIT_@4:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN13@MULTIEDIT_@4
$LN13@MULTIEDIT_@4:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_MULTIEDIT_CreateEx ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_AddKey
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_AddKey
_TEXT	SEGMENT
_r$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Key$ = 12						; size = 2
_MULTIEDIT_AddKey PROC					; COMDAT
; Line 1890
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1891
	mov	DWORD PTR _r$[ebp], 0
; Line 1892
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN1@MULTIEDIT_@5
; Line 1894
	movzx	eax, WORD PTR _Key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__AddKey
	add	esp, 8
	mov	DWORD PTR _r$[ebp], eax
$LN1@MULTIEDIT_@5:
; Line 1897
	mov	eax, DWORD PTR _r$[ebp]
; Line 1898
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_AddKey ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_AddText
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_AddText
_TEXT	SEGMENT
_CursorPosChar$17601 = -116				; size = 2
_NumBytesOld$17594 = -104				; size = 4
_NumBytesNew$17593 = -92				; size = 4
_NumCharsOld$17592 = -80				; size = 4
_NumCharsNew$17591 = -68				; size = 4
_pText$17590 = -56					; size = 4
_MaxNumChars$17586 = -44				; size = 2
_hText$17585 = -32					; size = 4
_pObj$17584 = -20					; size = 4
_Result$ = -8						; size = 4
_hObj$ = 8						; size = 4
_s$ = 12						; size = 4
_MULTIEDIT_AddText PROC					; COMDAT
; Line 1904
	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1906
	mov	DWORD PTR _Result$[ebp], 1
; Line 1907
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN7@MULTIEDIT_@6
	cmp	DWORD PTR _s$[ebp], 0
	je	$LN7@MULTIEDIT_@6
; Line 1912
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17584[ebp], eax
; Line 1913
	mov	eax, DWORD PTR _pObj$17584[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _hText$17585[ebp], ecx
; Line 1914
	mov	eax, DWORD PTR _pObj$17584[ebp]
	mov	cx, WORD PTR [eax+76]
	mov	WORD PTR _MaxNumChars$17586[ebp], cx
; Line 1915
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17584[ebp], 0
; Line 1916
	cmp	DWORD PTR _hText$17585[ebp], 0
	jne	SHORT $LN6@MULTIEDIT_@6
; Line 1917
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetText
	add	esp, 8
; Line 1918
	jmp	$LN7@MULTIEDIT_@6
$LN6@MULTIEDIT_@6:
; Line 1921
	mov	eax, DWORD PTR _hText$17585[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$17590[ebp], eax
; Line 1922
	mov	eax, DWORD PTR _pText$17590[ebp]
	push	eax
	call	_GUI__GetNumChars
	add	esp, 4
	mov	DWORD PTR _NumCharsOld$17592[ebp], eax
; Line 1923
	mov	eax, DWORD PTR _NumCharsOld$17592[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$17590[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	mov	DWORD PTR _NumBytesOld$17594[ebp], eax
; Line 1924
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_GUI__GetNumChars
	add	esp, 4
	mov	DWORD PTR _NumCharsNew$17591[ebp], eax
; Line 1925
	movzx	eax, WORD PTR _MaxNumChars$17586[ebp]
	test	eax, eax
	jle	SHORT $LN4@MULTIEDIT_@6
; Line 1926
	mov	eax, DWORD PTR _NumCharsOld$17592[ebp]
	add	eax, DWORD PTR _NumCharsNew$17591[ebp]
	movzx	ecx, WORD PTR _MaxNumChars$17586[ebp]
	cmp	eax, ecx
	jle	SHORT $LN4@MULTIEDIT_@6
; Line 1927
	movzx	eax, WORD PTR _MaxNumChars$17586[ebp]
	sub	eax, DWORD PTR _NumCharsOld$17592[ebp]
	mov	DWORD PTR _NumCharsNew$17591[ebp], eax
$LN4@MULTIEDIT_@6:
; Line 1930
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$17590[ebp], 0
; Line 1931
	cmp	DWORD PTR _NumCharsNew$17591[ebp], 0
	jle	$LN7@MULTIEDIT_@6
; Line 1932
	mov	eax, DWORD PTR _NumCharsNew$17591[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	mov	DWORD PTR _NumBytesNew$17593[ebp], eax
; Line 1933
	mov	eax, DWORD PTR _NumBytesNew$17593[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__IsSpaceInBuffer
	add	esp, 8
	test	eax, eax
	je	$LN7@MULTIEDIT_@6
; Line 1935
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17584[ebp], eax
; Line 1936
	mov	eax, DWORD PTR _pObj$17584[ebp]
	mov	cx, WORD PTR [eax+90]
	mov	WORD PTR _CursorPosChar$17601[ebp], cx
; Line 1937
	mov	eax, DWORD PTR _pObj$17584[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$17590[ebp], eax
; Line 1940
	mov	eax, DWORD PTR _pObj$17584[ebp]
	movzx	ecx, WORD PTR [eax+92]
	mov	edx, DWORD PTR _NumBytesOld$17594[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _pObj$17584[ebp]
	movzx	ecx, WORD PTR [eax+92]
	add	ecx, DWORD PTR _pText$17590[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$17584[ebp]
	movzx	eax, WORD PTR [edx+92]
	add	eax, DWORD PTR _pText$17590[ebp]
	add	eax, DWORD PTR _NumBytesNew$17593[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; Line 1941
	mov	eax, DWORD PTR _NumBytesNew$17593[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$17584[ebp]
	movzx	eax, WORD PTR [edx+92]
	add	eax, DWORD PTR _pText$17590[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1942
	mov	eax, DWORD PTR _pText$17590[ebp]
	add	eax, DWORD PTR _NumBytesOld$17594[ebp]
	mov	ecx, DWORD PTR _NumBytesNew$17593[ebp]
	mov	BYTE PTR [eax+ecx], 0
; Line 1943
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$17590[ebp], 0
; Line 1944
	mov	eax, DWORD PTR _pObj$17584[ebp]
	movzx	ecx, WORD PTR [eax+78]
	add	ecx, DWORD PTR _NumCharsNew$17591[ebp]
	mov	edx, DWORD PTR _pObj$17584[ebp]
	mov	WORD PTR [edx+78], cx
; Line 1945
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17584[ebp], 0
; Line 1946
	movzx	eax, WORD PTR _CursorPosChar$17601[ebp]
	add	eax, DWORD PTR _NumCharsNew$17591[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetCursorPos
	add	esp, 8
; Line 1947
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17584[ebp], eax
; Line 1948
	mov	eax, DWORD PTR _pObj$17584[ebp]
	push	eax
	call	__InvalidateNumLines
	add	esp, 4
; Line 1949
	mov	eax, DWORD PTR _pObj$17584[ebp]
	push	eax
	call	__InvalidateTextSizeX
	add	esp, 4
; Line 1950
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17584[ebp], 0
; Line 1951
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__InvalidateTextArea
	add	esp, 4
; Line 1952
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17584[ebp], eax
; Line 1953
	mov	eax, DWORD PTR _pObj$17584[ebp]
	push	eax
	call	__InvalidateCursorXY
	add	esp, 4
; Line 1954
	mov	eax, DWORD PTR _pObj$17584[ebp]
	push	eax
	call	__ClearCache
	add	esp, 4
; Line 1955
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17584[ebp], 0
; Line 1956
	push	5
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_NotifyParent
	add	esp, 8
; Line 1957
	mov	DWORD PTR _Result$[ebp], 0
$LN7@MULTIEDIT_@6:
; Line 1963
	mov	eax, DWORD PTR _Result$[ebp]
; Line 1964
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_AddText ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __InvalidateTextArea
_TEXT	SEGMENT
_rInsideRect$ = -12					; size = 8
_hObj$ = 8						; size = 4
__InvalidateTextArea PROC				; COMDAT
; Line 693
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 695
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__ManageScrollers
	add	esp, 4
; Line 696
	lea	eax, DWORD PTR _rInsideRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_GetInsideRectExScrollbar
	add	esp, 8
; Line 697
	lea	eax, DWORD PTR _rInsideRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_InvalidateRect
	add	esp, 8
; Line 698
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Invalidate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Invalidate:
	DD	1
	DD	$LN4@Invalidate
$LN4@Invalidate:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@Invalidate
$LN3@Invalidate:
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
__InvalidateTextArea ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetText
_TEXT	SEGMENT
_NumCharsPrompt$17466 = -80				; size = 2
_pText$ = -68						; size = 4
_NumBytesOld$ = -56					; size = 4
_NumBytesNew$ = -44					; size = 4
_NumCharsOld$ = -32					; size = 4
_NumCharsNew$ = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pNew$ = 12						; size = 4
__SetText PROC						; COMDAT
; Line 1634
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1638
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1639
	mov	DWORD PTR _NumBytesOld$[ebp], 0
	mov	eax, DWORD PTR _NumBytesOld$[ebp]
	mov	DWORD PTR _NumBytesNew$[ebp], eax
	mov	ecx, DWORD PTR _NumBytesNew$[ebp]
	mov	DWORD PTR _NumCharsOld$[ebp], ecx
	mov	edx, DWORD PTR _NumCharsOld$[ebp]
	mov	DWORD PTR _NumCharsNew$[ebp], edx
; Line 1640
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN6@SetText
; Line 1641
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$[ebp], eax
; Line 1642
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _pText$[ebp]
	push	edx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	add	eax, DWORD PTR _pText$[ebp]
	mov	DWORD PTR _pText$[ebp], eax
; Line 1643
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	call	_GUI__GetNumChars
	add	esp, 4
	mov	DWORD PTR _NumCharsOld$[ebp], eax
; Line 1644
	mov	eax, DWORD PTR _NumCharsOld$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	mov	DWORD PTR _NumBytesOld$[ebp], eax
; Line 1645
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$[ebp], 0
$LN6@SetText:
; Line 1647
	cmp	DWORD PTR _pNew$[ebp], 0
	je	SHORT $LN5@SetText
; Line 1648
	mov	eax, DWORD PTR _pNew$[ebp]
	push	eax
	call	_GUI__GetNumChars
	add	esp, 4
	mov	DWORD PTR _NumCharsNew$[ebp], eax
; Line 1649
	mov	eax, DWORD PTR _NumCharsNew$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pNew$[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	mov	DWORD PTR _NumBytesNew$[ebp], eax
$LN5@SetText:
; Line 1651
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1652
	mov	eax, DWORD PTR _NumCharsNew$[ebp]
	sub	eax, DWORD PTR _NumCharsOld$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__IsCharsAvailable
	add	esp, 8
	test	eax, eax
	je	$LN7@SetText
; Line 1653
	mov	eax, DWORD PTR _NumBytesNew$[ebp]
	sub	eax, DWORD PTR _NumBytesOld$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__IsSpaceInBuffer
	add	esp, 8
	test	eax, eax
	je	$LN7@SetText
; Line 1655
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1656
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$[ebp], eax
; Line 1657
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _pText$[ebp]
	push	edx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	add	eax, DWORD PTR _pText$[ebp]
	mov	DWORD PTR _pText$[ebp], eax
; Line 1658
	cmp	DWORD PTR _pNew$[ebp], 0
	je	SHORT $LN2@SetText
; Line 1659
	mov	eax, DWORD PTR _pNew$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 1660
	jmp	SHORT $LN1@SetText
$LN2@SetText:
; Line 1661
	mov	eax, DWORD PTR _pText$[ebp]
	mov	BYTE PTR [eax], 0
$LN1@SetText:
; Line 1663
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	cx, WORD PTR [eax+80]
	mov	WORD PTR _NumCharsPrompt$17466[ebp], cx
; Line 1664
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$[ebp], 0
; Line 1665
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1666
	movzx	eax, WORD PTR _NumCharsPrompt$17466[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetCursorPos
	add	esp, 8
; Line 1667
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 1668
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateNumChars
	add	esp, 4
; Line 1669
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateNumLines
	add	esp, 4
; Line 1670
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateTextSizeX
	add	esp, 4
; Line 1671
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	__InvalidateCursorXY
	add	esp, 4
; Line 1672
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 1673
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__InvalidateTextArea
	add	esp, 4
$LN7@SetText:
; Line 1676
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetText ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __InvalidateNumChars
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
__InvalidateNumChars PROC				; COMDAT
; Line 172
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 173
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+137]
	or	ecx, 1
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	BYTE PTR [edx+137], cl
; Line 174
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__InvalidateNumChars ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _MULTIEDIT_SetText
_TEXT	SEGMENT
_hObj$ = 8						; size = 4
_pNew$ = 12						; size = 4
_MULTIEDIT_SetText PROC					; COMDAT
; Line 1970
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1971
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN2@MULTIEDIT_@7
; Line 1973
	mov	eax, DWORD PTR _pNew$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetText
	add	esp, 8
$LN2@MULTIEDIT_@7:
; Line 1976
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetText ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_GetText
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_GetText
_TEXT	SEGMENT
_Len$17623 = -32					; size = 4
_pText$17622 = -20					; size = 4
_pObj$17621 = -8					; size = 4
_hObj$ = 8						; size = 4
_sDest$ = 12						; size = 4
_MaxLen$ = 16						; size = 4
_MULTIEDIT_GetText PROC					; COMDAT
; Line 1982
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1983
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN3@MULTIEDIT_@8
; Line 1988
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17621[ebp], eax
; Line 1989
	mov	eax, DWORD PTR _pObj$17621[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$17622[ebp], eax
; Line 1990
	mov	eax, DWORD PTR _pObj$17621[ebp]
	movzx	ecx, WORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _pText$17622[ebp]
	push	edx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	add	eax, DWORD PTR _pText$17622[ebp]
	mov	DWORD PTR _pText$17622[ebp], eax
; Line 1991
	mov	eax, DWORD PTR _pText$17622[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _Len$17623[ebp], eax
; Line 1992
	mov	eax, DWORD PTR _MaxLen$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _Len$17623[ebp], eax
	jle	SHORT $LN1@MULTIEDIT_@8
; Line 1993
	mov	eax, DWORD PTR _MaxLen$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Len$17623[ebp], eax
$LN1@MULTIEDIT_@8:
; Line 1995
	mov	eax, DWORD PTR _Len$17623[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$17622[ebp]
	push	ecx
	mov	edx, DWORD PTR _sDest$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1996
	mov	eax, DWORD PTR _sDest$[ebp]
	add	eax, DWORD PTR _Len$17623[ebp]
	mov	BYTE PTR [eax], 0
; Line 1997
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17621[ebp], 0
; Line 1998
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$17622[ebp], 0
$LN3@MULTIEDIT_@8:
; Line 2001
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_GetText ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_GetPrompt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_GetPrompt
_TEXT	SEGMENT
_pObj$17638 = -32					; size = 4
_Len$17637 = -20					; size = 4
_sSource$17636 = -8					; size = 4
_hObj$ = 8						; size = 4
_sDest$ = 12						; size = 4
_MaxLen$ = 16						; size = 4
_MULTIEDIT_GetPrompt PROC				; COMDAT
; Line 2007
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2008
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN3@MULTIEDIT_@9
; Line 2013
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17638[ebp], eax
; Line 2014
	mov	eax, DWORD PTR _pObj$17638[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _sSource$17636[ebp], eax
; Line 2015
	mov	eax, DWORD PTR _pObj$17638[ebp]
	movzx	ecx, WORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _sSource$17636[ebp]
	push	edx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	mov	DWORD PTR _Len$17637[ebp], eax
; Line 2016
	mov	eax, DWORD PTR _MaxLen$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _Len$17637[ebp], eax
	jle	SHORT $LN1@MULTIEDIT_@9
; Line 2017
	mov	eax, DWORD PTR _MaxLen$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Len$17637[ebp], eax
$LN1@MULTIEDIT_@9:
; Line 2019
	mov	eax, DWORD PTR _Len$17637[ebp]
	push	eax
	mov	ecx, DWORD PTR _sSource$17636[ebp]
	push	ecx
	mov	edx, DWORD PTR _sDest$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2020
	mov	eax, DWORD PTR _sDest$[ebp]
	add	eax, DWORD PTR _Len$17637[ebp]
	mov	BYTE PTR [eax], 0
; Line 2021
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17638[ebp], 0
; Line 2022
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _sSource$17636[ebp], 0
$LN3@MULTIEDIT_@9:
; Line 2025
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_GetPrompt ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetWrapWord
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_SetWrapWord
_TEXT	SEGMENT
_hObj$ = 8						; size = 4
_MULTIEDIT_SetWrapWord PROC				; COMDAT
; Line 2031
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2032
	push	1
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__SetWrapMode
	add	esp, 8
; Line 2033
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetWrapWord ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetWrapMode
_TEXT	SEGMENT
_Position$17056 = -32					; size = 4
_pObj$17054 = -20					; size = 4
_r$ = -8						; size = 4
_hObj$ = 8						; size = 4
_WrapMode$ = 12						; size = 4
__SetWrapMode PROC					; COMDAT
; Line 822
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 824
	mov	DWORD PTR _r$[ebp], 0
; Line 825
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN2@SetWrapMod
; Line 828
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17054[ebp], eax
; Line 829
	mov	eax, DWORD PTR _pObj$17054[ebp]
	mov	ecx, DWORD PTR [eax+144]
	mov	DWORD PTR _r$[ebp], ecx
; Line 830
	mov	eax, DWORD PTR _pObj$17054[ebp]
	mov	ecx, DWORD PTR [eax+144]
	cmp	ecx, DWORD PTR _WrapMode$[ebp]
	je	SHORT $LN1@SetWrapMod
; Line 832
	mov	eax, DWORD PTR _pObj$17054[ebp]
	mov	ecx, DWORD PTR _WrapMode$[ebp]
	mov	DWORD PTR [eax+144], ecx
; Line 833
	mov	eax, DWORD PTR _pObj$17054[ebp]
	push	eax
	call	__ClearCache
	add	esp, 4
; Line 834
	mov	eax, DWORD PTR _pObj$17054[ebp]
	push	eax
	call	__InvalidateNumLines
	add	esp, 4
; Line 835
	mov	eax, DWORD PTR _pObj$17054[ebp]
	push	eax
	call	__InvalidateTextSizeX
	add	esp, 4
; Line 836
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17054[ebp], 0
; Line 837
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__InvalidateTextArea
	add	esp, 4
; Line 838
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17054[ebp], eax
; Line 839
	mov	eax, DWORD PTR _pObj$17054[ebp]
	push	eax
	call	__InvalidateCursorPos
	add	esp, 4
	mov	DWORD PTR _Position$17056[ebp], eax
; Line 840
	mov	eax, DWORD PTR _Position$17056[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetCursorPos
	add	esp, 8
$LN1@SetWrapMod:
; Line 842
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17054[ebp], 0
$LN2@SetWrapMod:
; Line 845
	mov	eax, DWORD PTR _r$[ebp]
; Line 846
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetWrapMode ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __InvalidateCursorPos
_TEXT	SEGMENT
_Value$ = -8						; size = 4
_pObj$ = 8						; size = 4
__InvalidateCursorPos PROC				; COMDAT
; Line 706
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 708
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+90]
	mov	DWORD PTR _Value$[ebp], ecx
; Line 709
	mov	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	WORD PTR [ecx+90], ax
; Line 710
	mov	eax, DWORD PTR _Value$[ebp]
; Line 711
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__InvalidateCursorPos ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetWrapChar
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_SetWrapChar
_TEXT	SEGMENT
_hObj$ = 8						; size = 4
_MULTIEDIT_SetWrapChar PROC				; COMDAT
; Line 2039
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2040
	push	2
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__SetWrapMode
	add	esp, 8
; Line 2041
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetWrapChar ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetWrapNone
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_SetWrapNone
_TEXT	SEGMENT
_hObj$ = 8						; size = 4
_MULTIEDIT_SetWrapNone PROC				; COMDAT
; Line 2047
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2048
	push	0
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__SetWrapMode
	add	esp, 8
; Line 2049
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetWrapNone ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetInsertMode
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_SetInsertMode
_TEXT	SEGMENT
_hObj$ = 8						; size = 4
_OnOff$ = 12						; size = 4
_MULTIEDIT_SetInsertMode PROC				; COMDAT
; Line 2055
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2056
	push	4
	mov	eax, DWORD PTR _OnOff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetFlag
	add	esp, 12					; 0000000cH
; Line 2057
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetInsertMode ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetFlag
_TEXT	SEGMENT
_pObj$16997 = -8					; size = 4
_hObj$ = 8						; size = 4
_OnOff$ = 12						; size = 4
_Flag$ = 16						; size = 1
__SetFlag PROC						; COMDAT
; Line 717
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 718
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN4@SetFlag
; Line 721
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$16997[ebp], eax
; Line 722
	cmp	DWORD PTR _OnOff$[ebp], 0
	je	SHORT $LN2@SetFlag
; Line 723
	movzx	eax, BYTE PTR _Flag$[ebp]
	mov	ecx, DWORD PTR _pObj$16997[ebp]
	movzx	edx, BYTE PTR [ecx+136]
	or	edx, eax
	mov	eax, DWORD PTR _pObj$16997[ebp]
	mov	BYTE PTR [eax+136], dl
; Line 724
	jmp	SHORT $LN1@SetFlag
$LN2@SetFlag:
; Line 725
	movzx	eax, BYTE PTR _Flag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _pObj$16997[ebp]
	movzx	edx, BYTE PTR [ecx+136]
	and	edx, eax
	mov	eax, DWORD PTR _pObj$16997[ebp]
	mov	BYTE PTR [eax+136], dl
$LN1@SetFlag:
; Line 727
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$16997[ebp], 0
; Line 728
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__InvalidateTextArea
	add	esp, 4
$LN4@SetFlag:
; Line 731
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetFlag ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetReadOnly
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_SetReadOnly
_TEXT	SEGMENT
_hObj$ = 8						; size = 4
_OnOff$ = 12						; size = 4
_MULTIEDIT_SetReadOnly PROC				; COMDAT
; Line 2063
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2064
	push	1
	mov	eax, DWORD PTR _OnOff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetFlag
	add	esp, 12					; 0000000cH
; Line 2065
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetReadOnly ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetPasswordMode
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_SetPasswordMode
_TEXT	SEGMENT
_pObj$17668 = -8					; size = 4
_hObj$ = 8						; size = 4
_OnOff$ = 12						; size = 4
_MULTIEDIT_SetPasswordMode PROC				; COMDAT
; Line 2071
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2072
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN2@MULTIEDIT_@10
; Line 2075
	push	32					; 00000020H
	mov	eax, DWORD PTR _OnOff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetFlag
	add	esp, 12					; 0000000cH
; Line 2076
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17668[ebp], eax
; Line 2077
	mov	eax, DWORD PTR _pObj$17668[ebp]
	push	eax
	call	__InvalidateCursorXY
	add	esp, 4
; Line 2078
	mov	eax, DWORD PTR _pObj$17668[ebp]
	push	eax
	call	__InvalidateNumLines
	add	esp, 4
; Line 2079
	mov	eax, DWORD PTR _pObj$17668[ebp]
	push	eax
	call	__InvalidateTextSizeX
	add	esp, 4
; Line 2080
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17668[ebp], 0
$LN2@MULTIEDIT_@10:
; Line 2083
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetPasswordMode ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetAutoScrollV
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_SetAutoScrollV
_TEXT	SEGMENT
_hObj$ = 8						; size = 4
_OnOff$ = 12						; size = 4
_MULTIEDIT_SetAutoScrollV PROC				; COMDAT
; Line 2089
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2090
	push	8
	mov	eax, DWORD PTR _OnOff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetFlag
	add	esp, 12					; 0000000cH
; Line 2091
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetAutoScrollV ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetAutoScrollH
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_SetAutoScrollH
_TEXT	SEGMENT
_hObj$ = 8						; size = 4
_OnOff$ = 12						; size = 4
_MULTIEDIT_SetAutoScrollH PROC				; COMDAT
; Line 2097
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2098
	push	16					; 00000010H
	mov	eax, DWORD PTR _OnOff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetFlag
	add	esp, 12					; 0000000cH
; Line 2099
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetAutoScrollH ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetHBorder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_SetHBorder
_TEXT	SEGMENT
_pObj$17686 = -8					; size = 4
_hObj$ = 8						; size = 4
_HBorder$ = 12						; size = 4
_MULTIEDIT_SetHBorder PROC				; COMDAT
; Line 2105
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2106
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN4@MULTIEDIT_@11
; Line 2109
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17686[ebp], eax
; Line 2110
	mov	eax, DWORD PTR _pObj$17686[ebp]
	movzx	ecx, BYTE PTR [eax+139]
	cmp	ecx, DWORD PTR _HBorder$[ebp]
	je	SHORT $LN2@MULTIEDIT_@11
; Line 2111
	mov	eax, DWORD PTR _pObj$17686[ebp]
	mov	cl, BYTE PTR _HBorder$[ebp]
	mov	BYTE PTR [eax+139], cl
; Line 2112
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17686[ebp], 0
; Line 2113
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__Invalidate
	add	esp, 4
; Line 2114
	jmp	SHORT $LN4@MULTIEDIT_@11
$LN2@MULTIEDIT_@11:
; Line 2115
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17686[ebp], 0
$LN4@MULTIEDIT_@11:
; Line 2119
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetHBorder ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetFont
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_SetFont
_TEXT	SEGMENT
_pObj$17698 = -8					; size = 4
_hObj$ = 8						; size = 4
_pFont$ = 12						; size = 4
_MULTIEDIT_SetFont PROC					; COMDAT
; Line 2125
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2126
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN3@MULTIEDIT_@12
; Line 2129
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17698[ebp], eax
; Line 2130
	mov	eax, DWORD PTR _pObj$17698[ebp]
	mov	ecx, DWORD PTR [eax+132]
	cmp	ecx, DWORD PTR _pFont$[ebp]
	je	SHORT $LN1@MULTIEDIT_@12
; Line 2131
	mov	eax, DWORD PTR _pObj$17698[ebp]
	mov	ecx, DWORD PTR _pFont$[ebp]
	mov	DWORD PTR [eax+132], ecx
; Line 2132
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17698[ebp], 0
; Line 2133
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__InvalidateTextArea
	add	esp, 4
; Line 2134
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17698[ebp], eax
; Line 2135
	mov	eax, DWORD PTR _pObj$17698[ebp]
	push	eax
	call	__InvalidateCursorXY
	add	esp, 4
; Line 2136
	mov	eax, DWORD PTR _pObj$17698[ebp]
	push	eax
	call	__InvalidateNumLines
	add	esp, 4
; Line 2137
	mov	eax, DWORD PTR _pObj$17698[ebp]
	push	eax
	call	__InvalidateTextSizeX
	add	esp, 4
$LN1@MULTIEDIT_@12:
; Line 2139
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17698[ebp], 0
$LN3@MULTIEDIT_@12:
; Line 2142
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetFont ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetBkColor
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_SetBkColor
_TEXT	SEGMENT
_pObj$17710 = -8					; size = 4
_hObj$ = 8						; size = 4
_Index$ = 12						; size = 4
_color$ = 16						; size = 4
_MULTIEDIT_SetBkColor PROC				; COMDAT
; Line 2148
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2149
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN2@MULTIEDIT_@13
	cmp	DWORD PTR _Index$[ebp], 2
	jae	SHORT $LN2@MULTIEDIT_@13
; Line 2152
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17710[ebp], eax
; Line 2153
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pObj$17710[ebp]
	mov	edx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [ecx+eax*4+56], edx
; Line 2154
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17710[ebp], 0
; Line 2155
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__InvalidateTextArea
	add	esp, 4
$LN2@MULTIEDIT_@13:
; Line 2158
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetBkColor ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetCursorOffset
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_SetCursorOffset
_TEXT	SEGMENT
_hObj$ = 8						; size = 4
_Offset$ = 12						; size = 4
_MULTIEDIT_SetCursorOffset PROC				; COMDAT
; Line 2164
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2165
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN2@MULTIEDIT_@14
; Line 2167
	mov	eax, DWORD PTR _Offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetCursorPos
	add	esp, 8
; Line 2168
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN2@MULTIEDIT_@14:
; Line 2171
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetCursorOffset ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetTextColor
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_SetTextColor
_TEXT	SEGMENT
_pObj$17726 = -8					; size = 4
_hObj$ = 8						; size = 4
_Index$ = 12						; size = 4
_color$ = 16						; size = 4
_MULTIEDIT_SetTextColor PROC				; COMDAT
; Line 2177
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2178
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN2@MULTIEDIT_@15
	cmp	DWORD PTR _Index$[ebp], 2
	jae	SHORT $LN2@MULTIEDIT_@15
; Line 2181
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17726[ebp], eax
; Line 2182
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pObj$17726[ebp]
	mov	edx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [ecx+eax*4+64], edx
; Line 2183
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17726[ebp], 0
; Line 2184
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN2@MULTIEDIT_@15:
; Line 2187
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetTextColor ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetPrompt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_SetPrompt
_TEXT	SEGMENT
_pText$17739 = -68					; size = 4
_NumBytesOld$17738 = -56				; size = 4
_NumBytesNew$17737 = -44				; size = 4
_NumCharsOld$17736 = -32				; size = 4
_NumCharsNew$17735 = -20				; size = 4
_pObj$17734 = -8					; size = 4
_hObj$ = 8						; size = 4
_pPrompt$ = 12						; size = 4
_MULTIEDIT_SetPrompt PROC				; COMDAT
; Line 2193
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2194
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN7@MULTIEDIT_@16
; Line 2196
	mov	DWORD PTR _NumCharsNew$17735[ebp], 0
	mov	DWORD PTR _NumCharsOld$17736[ebp], 0
; Line 2197
	mov	DWORD PTR _NumBytesNew$17737[ebp], 0
	mov	DWORD PTR _NumBytesOld$17738[ebp], 0
; Line 2200
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17734[ebp], eax
; Line 2201
	mov	eax, DWORD PTR _pObj$17734[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN5@MULTIEDIT_@16
; Line 2202
	mov	eax, DWORD PTR _pObj$17734[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$17739[ebp], eax
; Line 2203
	mov	eax, DWORD PTR _pObj$17734[ebp]
	movzx	ecx, WORD PTR [eax+80]
	mov	DWORD PTR _NumCharsOld$17736[ebp], ecx
; Line 2204
	mov	eax, DWORD PTR _NumCharsOld$17736[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$17739[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	mov	DWORD PTR _NumBytesOld$17738[ebp], eax
; Line 2205
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$17739[ebp], 0
$LN5@MULTIEDIT_@16:
; Line 2207
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17734[ebp], 0
; Line 2208
	cmp	DWORD PTR _pPrompt$[ebp], 0
	je	SHORT $LN4@MULTIEDIT_@16
; Line 2209
	mov	eax, DWORD PTR _pPrompt$[ebp]
	push	eax
	call	_GUI__GetNumChars
	add	esp, 4
	mov	DWORD PTR _NumCharsNew$17735[ebp], eax
; Line 2210
	mov	eax, DWORD PTR _NumCharsNew$17735[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPrompt$[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	mov	DWORD PTR _NumBytesNew$17737[ebp], eax
$LN4@MULTIEDIT_@16:
; Line 2212
	mov	eax, DWORD PTR _NumCharsNew$17735[ebp]
	sub	eax, DWORD PTR _NumCharsOld$17736[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__IsCharsAvailable
	add	esp, 8
	test	eax, eax
	je	$LN7@MULTIEDIT_@16
; Line 2213
	mov	eax, DWORD PTR _NumBytesNew$17737[ebp]
	sub	eax, DWORD PTR _NumBytesOld$17738[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__IsSpaceInBuffer
	add	esp, 8
	test	eax, eax
	je	$LN7@MULTIEDIT_@16
; Line 2214
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17734[ebp], eax
; Line 2215
	mov	eax, DWORD PTR _pObj$17734[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$17739[ebp], eax
; Line 2216
	mov	eax, DWORD PTR _pText$17739[ebp]
	add	eax, DWORD PTR _NumBytesOld$17738[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pText$17739[ebp]
	add	ecx, DWORD PTR _NumBytesOld$17738[ebp]
	push	ecx
	mov	edx, DWORD PTR _pText$17739[ebp]
	add	edx, DWORD PTR _NumBytesNew$17737[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH
; Line 2217
	cmp	DWORD PTR _pPrompt$[ebp], 0
	je	SHORT $LN1@MULTIEDIT_@16
; Line 2218
	mov	eax, DWORD PTR _NumBytesNew$17737[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPrompt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pText$17739[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@MULTIEDIT_@16:
; Line 2220
	mov	eax, DWORD PTR _pObj$17734[ebp]
	mov	cx, WORD PTR _NumCharsNew$17735[ebp]
	mov	WORD PTR [eax+80], cx
; Line 2221
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$17739[ebp], 0
; Line 2222
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17734[ebp], 0
; Line 2223
	mov	eax, DWORD PTR _NumCharsNew$17735[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetCursorPos
	add	esp, 8
; Line 2224
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__InvalidateTextArea
	add	esp, 4
; Line 2225
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17734[ebp], eax
; Line 2226
	mov	eax, DWORD PTR _pObj$17734[ebp]
	push	eax
	call	__InvalidateNumChars
	add	esp, 4
; Line 2227
	mov	eax, DWORD PTR _pObj$17734[ebp]
	push	eax
	call	__InvalidateNumLines
	add	esp, 4
; Line 2228
	mov	eax, DWORD PTR _pObj$17734[ebp]
	push	eax
	call	__InvalidateTextSizeX
	add	esp, 4
; Line 2229
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17734[ebp], 0
$LN7@MULTIEDIT_@16:
; Line 2234
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetPrompt ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetBufferSize
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_SetBufferSize
_TEXT	SEGMENT
_hText$17759 = -20					; size = 4
_pObj$17758 = -8					; size = 4
_hObj$ = 8						; size = 4
_BufferSize$ = 12					; size = 4
_MULTIEDIT_SetBufferSize PROC				; COMDAT
; Line 2240
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2241
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN4@MULTIEDIT_@17
; Line 2245
	mov	eax, DWORD PTR _BufferSize$[ebp]
	push	eax
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hText$17759[ebp], eax
	cmp	DWORD PTR _hText$17759[ebp], 0
	jne	SHORT $LN2@MULTIEDIT_@17
; Line 2246
	push	OFFSET $SG17761
	call	_GUI_ErrorOut
	add	esp, 4
; Line 2247
	jmp	$LN4@MULTIEDIT_@17
$LN2@MULTIEDIT_@17:
; Line 2248
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17758[ebp], eax
; Line 2249
	mov	eax, DWORD PTR _pObj$17758[ebp]
	add	eax, 72					; 00000048H
	push	eax
	call	_GUI_ALLOC_FreePtr
	add	esp, 4
; Line 2250
	mov	eax, DWORD PTR _pObj$17758[ebp]
	mov	ecx, DWORD PTR _hText$17759[ebp]
	mov	DWORD PTR [eax+72], ecx
; Line 2251
	mov	eax, DWORD PTR _pObj$17758[ebp]
	mov	cx, WORD PTR _BufferSize$[ebp]
	mov	WORD PTR [eax+86], cx
; Line 2252
	xor	eax, eax
	mov	ecx, DWORD PTR _pObj$17758[ebp]
	mov	WORD PTR [ecx+80], ax
; Line 2253
	mov	eax, DWORD PTR _pObj$17758[ebp]
	push	eax
	call	__InvalidateNumChars
	add	esp, 4
; Line 2254
	mov	eax, DWORD PTR _pObj$17758[ebp]
	push	eax
	call	__InvalidateCursorXY
	add	esp, 4
; Line 2255
	mov	eax, DWORD PTR _pObj$17758[ebp]
	push	eax
	call	__InvalidateNumLines
	add	esp, 4
; Line 2256
	mov	eax, DWORD PTR _pObj$17758[ebp]
	push	eax
	call	__InvalidateTextSizeX
	add	esp, 4
; Line 2257
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17758[ebp], 0
; Line 2258
	push	0
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__SetCursorPos
	add	esp, 8
; Line 2259
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__InvalidateTextArea
	add	esp, 4
$LN4@MULTIEDIT_@17:
; Line 2263
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetBufferSize ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetMaxNumChars
EXTRN	_GUI__GetLineNumChars:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_SetMaxNumChars
_TEXT	SEGMENT
_NumCharsCur$17777 = -56				; size = 4
_LenText$17776 = -44					; size = 4
_Offset$17775 = -32					; size = 4
_pText$17774 = -20					; size = 4
_pObj$17770 = -8					; size = 4
_hObj$ = 8						; size = 4
_MaxNumChars$ = 12					; size = 4
_MULTIEDIT_SetMaxNumChars PROC				; COMDAT
; Line 2269
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2270
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN9@MULTIEDIT_@18
; Line 2273
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17770[ebp], eax
; Line 2274
	mov	eax, DWORD PTR _pObj$17770[ebp]
	mov	cx, WORD PTR _MaxNumChars$[ebp]
	mov	WORD PTR [eax+76], cx
; Line 2275
	mov	eax, DWORD PTR _pObj$17770[ebp]
	movzx	ecx, WORD PTR [eax+80]
	cmp	DWORD PTR _MaxNumChars$[ebp], ecx
	jae	SHORT $LN7@MULTIEDIT_@18
; Line 2276
	mov	eax, DWORD PTR _pObj$17770[ebp]
	mov	cx, WORD PTR _MaxNumChars$[ebp]
	mov	WORD PTR [eax+80], cx
$LN7@MULTIEDIT_@18:
; Line 2278
	mov	eax, DWORD PTR _pObj$17770[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN6@MULTIEDIT_@18
	cmp	DWORD PTR _MaxNumChars$[ebp], 0
	je	$LN6@MULTIEDIT_@18
; Line 2282
	mov	eax, DWORD PTR _pObj$17770[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$17774[ebp], eax
; Line 2283
	mov	eax, DWORD PTR _pText$17774[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _LenText$17776[ebp], eax
; Line 2284
	mov	eax, DWORD PTR _LenText$17776[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$17774[ebp]
	push	ecx
	call	_GUI__GetLineNumChars
	add	esp, 8
	mov	DWORD PTR _NumCharsCur$17777[ebp], eax
; Line 2285
	mov	eax, DWORD PTR _NumCharsCur$17777[ebp]
	cmp	eax, DWORD PTR _MaxNumChars$[ebp]
	jbe	$LN5@MULTIEDIT_@18
; Line 2286
	mov	eax, DWORD PTR _MaxNumChars$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$17774[ebp]
	push	ecx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	mov	DWORD PTR _Offset$17775[ebp], eax
; Line 2287
	mov	eax, DWORD PTR _pObj$17770[ebp]
	movzx	ecx, WORD PTR [eax+86]
	cmp	DWORD PTR _Offset$17775[ebp], ecx
	jge	SHORT $LN4@MULTIEDIT_@18
; Line 2288
	mov	eax, DWORD PTR _pText$17774[ebp]
	add	eax, DWORD PTR _Offset$17775[ebp]
	mov	DWORD PTR _pText$17774[ebp], eax
; Line 2289
	mov	eax, DWORD PTR _pText$17774[ebp]
	mov	BYTE PTR [eax], 0
; Line 2290
	mov	eax, DWORD PTR _pObj$17770[ebp]
	push	eax
	call	__InvalidateNumChars
	add	esp, 4
; Line 2291
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$17774[ebp], 0
; Line 2292
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17770[ebp], 0
; Line 2293
	mov	eax, DWORD PTR _Offset$17775[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__SetCursorPos
	add	esp, 8
; Line 2294
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__InvalidateTextArea
	add	esp, 4
; Line 2295
	jmp	SHORT $LN3@MULTIEDIT_@18
$LN4@MULTIEDIT_@18:
; Line 2296
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$17774[ebp], 0
; Line 2297
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17770[ebp], 0
$LN3@MULTIEDIT_@18:
; Line 2299
	jmp	SHORT $LN2@MULTIEDIT_@18
$LN5@MULTIEDIT_@18:
; Line 2300
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$17774[ebp], 0
; Line 2301
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17770[ebp], 0
$LN2@MULTIEDIT_@18:
; Line 2303
	jmp	SHORT $LN9@MULTIEDIT_@18
$LN6@MULTIEDIT_@18:
; Line 2304
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17770[ebp], 0
$LN9@MULTIEDIT_@18:
; Line 2308
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetMaxNumChars ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_GetTextSize
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_GetTextSize
_TEXT	SEGMENT
_s$17798 = -32						; size = 4
_pObj$17796 = -20					; size = 4
_r$ = -8						; size = 4
_hObj$ = 8						; size = 4
_MULTIEDIT_GetTextSize PROC				; COMDAT
; Line 2319
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2320
	mov	DWORD PTR _r$[ebp], 0
; Line 2321
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN2@MULTIEDIT_@19
; Line 2324
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17796[ebp], eax
; Line 2325
	mov	eax, DWORD PTR _pObj$17796[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN1@MULTIEDIT_@19
; Line 2327
	mov	eax, DWORD PTR _pObj$17796[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _s$17798[ebp], eax
; Line 2328
	mov	eax, DWORD PTR _pObj$17796[ebp]
	movzx	ecx, WORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _s$17798[ebp]
	push	edx
	call	_GUI_UC__NumChars2NumBytes
	add	esp, 8
	add	eax, DWORD PTR _s$17798[ebp]
	mov	DWORD PTR _s$17798[ebp], eax
; Line 2329
	mov	eax, DWORD PTR _s$17798[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _r$[ebp], eax
; Line 2330
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _s$17798[ebp], 0
$LN1@MULTIEDIT_@19:
; Line 2332
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17796[ebp], 0
$LN2@MULTIEDIT_@19:
; Line 2335
	mov	eax, DWORD PTR _r$[ebp]
; Line 2336
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_GetTextSize ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_SetTextAlign
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_SetTextAlign
_TEXT	SEGMENT
_pObj$17808 = -8					; size = 4
_hObj$ = 8						; size = 4
_Align$ = 12						; size = 4
_MULTIEDIT_SetTextAlign PROC				; COMDAT
; Line 2343
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2344
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN3@MULTIEDIT_@20
; Line 2347
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17808[ebp], eax
; Line 2348
	mov	eax, DWORD PTR _Align$[ebp]
	and	eax, 1
	mov	DWORD PTR _Align$[ebp], eax
; Line 2349
	mov	eax, DWORD PTR _pObj$17808[ebp]
	movzx	ecx, WORD PTR [eax+106]
	cmp	ecx, DWORD PTR _Align$[ebp]
	je	SHORT $LN1@MULTIEDIT_@20
; Line 2350
	mov	eax, DWORD PTR _pObj$17808[ebp]
	mov	cx, WORD PTR _Align$[ebp]
	mov	WORD PTR [eax+106], cx
; Line 2351
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17808[ebp], 0
; Line 2352
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__InvalidateTextArea
	add	esp, 4
; Line 2353
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17808[ebp], eax
; Line 2354
	mov	eax, DWORD PTR _pObj$17808[ebp]
	push	eax
	call	__InvalidateCursorXY
	add	esp, 4
; Line 2355
	mov	eax, DWORD PTR _pObj$17808[ebp]
	push	eax
	call	__InvalidateTextSizeX
	add	esp, 4
$LN1@MULTIEDIT_@20:
; Line 2357
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17808[ebp], 0
$LN3@MULTIEDIT_@20:
; Line 2360
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_SetTextAlign ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_GetCursorCharPos
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_GetCursorCharPos
_TEXT	SEGMENT
_pObj$17817 = -20					; size = 4
_r$ = -8						; size = 4
_hObj$ = 8						; size = 4
_MULTIEDIT_GetCursorCharPos PROC			; COMDAT
; Line 2366
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2367
	mov	DWORD PTR _r$[ebp], 0
; Line 2368
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN1@MULTIEDIT_@21
; Line 2371
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17817[ebp], eax
; Line 2372
	mov	eax, DWORD PTR _pObj$17817[ebp]
	movzx	ecx, WORD PTR [eax+90]
	mov	DWORD PTR _r$[ebp], ecx
; Line 2373
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17817[ebp], 0
$LN1@MULTIEDIT_@21:
; Line 2376
	mov	eax, DWORD PTR _r$[ebp]
; Line 2377
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_GetCursorCharPos ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_GetCursorPixelPos
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_GetCursorPixelPos
_TEXT	SEGMENT
_EffectSize$17829 = -32					; size = 4
_FontSizeY$17828 = -20					; size = 4
_pObj$17827 = -8					; size = 4
_hObj$ = 8						; size = 4
_pxPos$ = 12						; size = 4
_pyPos$ = 16						; size = 4
_MULTIEDIT_GetCursorPixelPos PROC			; COMDAT
; Line 2383
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2384
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN2@MULTIEDIT_@22
; Line 2388
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17827[ebp], eax
; Line 2389
	mov	eax, DWORD PTR _pObj$17827[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	call	_GUI_GetYSizeOfFont
	add	esp, 4
	mov	DWORD PTR _FontSizeY$17828[ebp], eax
; Line 2390
	mov	eax, DWORD PTR _pObj$17827[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _EffectSize$17829[ebp], edx
; Line 2391
	mov	eax, DWORD PTR _pyPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pxPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pObj$17827[ebp]
	push	edx
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__GetCursorXY
	add	esp, 16					; 00000010H
; Line 2392
	mov	eax, DWORD PTR _pObj$17827[ebp]
	mov	ecx, DWORD PTR _EffectSize$17829[ebp]
	sub	ecx, DWORD PTR [eax+124]
	mov	edx, DWORD PTR _pObj$17827[ebp]
	movzx	eax, BYTE PTR [edx+139]
	add	ecx, eax
	mov	edx, DWORD PTR _pxPos$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _pxPos$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 2393
	mov	eax, DWORD PTR _pObj$17827[ebp]
	mov	ecx, DWORD PTR [eax+112]
	imul	ecx, DWORD PTR _FontSizeY$17828[ebp]
	mov	edx, DWORD PTR _EffectSize$17829[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _pyPos$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pyPos$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 2394
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17827[ebp], 0
$LN2@MULTIEDIT_@22:
; Line 2397
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_GetCursorPixelPos ENDP
_TEXT	ENDS
PUBLIC	_MULTIEDIT_EnableBlink
EXTRN	_WM_DeleteTimer:PROC
EXTRN	_WM_CreateTimer:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MULTIEDIT_EnableBlink
_TEXT	SEGMENT
_hTimer$17841 = -20					; size = 4
_pObj$17839 = -8					; size = 4
_hObj$ = 8						; size = 4
_Period$ = 12						; size = 4
_OnOff$ = 16						; size = 4
_MULTIEDIT_EnableBlink PROC				; COMDAT
; Line 2403
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2404
	cmp	DWORD PTR _hObj$[ebp], 0
	je	$LN6@MULTIEDIT_@23
; Line 2407
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17839[ebp], eax
; Line 2408
	cmp	DWORD PTR _OnOff$[ebp], 0
	je	SHORT $LN4@MULTIEDIT_@23
; Line 2410
	mov	eax, DWORD PTR _pObj$17839[ebp]
	cmp	DWORD PTR [eax+140], 0
	je	SHORT $LN3@MULTIEDIT_@23
; Line 2411
	mov	eax, DWORD PTR _Period$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$17839[ebp]
	mov	edx, DWORD PTR [ecx+140]
	push	edx
	call	_WM_RestartTimer
	add	esp, 8
; Line 2412
	jmp	SHORT $LN2@MULTIEDIT_@23
$LN3@MULTIEDIT_@23:
; Line 2413
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17839[ebp], 0
; Line 2414
	push	0
	mov	eax, DWORD PTR _Period$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_CreateTimer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hTimer$17841[ebp], eax
; Line 2415
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_MULTIEDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$17839[ebp], eax
; Line 2416
	mov	eax, DWORD PTR _pObj$17839[ebp]
	mov	ecx, DWORD PTR _hTimer$17841[ebp]
	mov	DWORD PTR [eax+140], ecx
$LN2@MULTIEDIT_@23:
; Line 2418
	jmp	SHORT $LN1@MULTIEDIT_@23
$LN4@MULTIEDIT_@23:
; Line 2419
	mov	eax, DWORD PTR _pObj$17839[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_WM_DeleteTimer
	add	esp, 4
; Line 2420
	mov	eax, DWORD PTR _pObj$17839[ebp]
	mov	DWORD PTR [eax+140], 0
; Line 2421
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN1@MULTIEDIT_@23:
; Line 2423
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$17839[ebp], 0
$LN6@MULTIEDIT_@23:
; Line 2426
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MULTIEDIT_EnableBlink ENDP
_TEXT	ENDS
END
