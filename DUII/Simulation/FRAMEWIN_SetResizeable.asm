; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Widget\FRAMEWIN_SetResizeable.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
__ColorsCursor DD 0ffH
	DD	00H
	DD	0ffffffH
__PalCursor DD	03H
	DB	01H
	ORG $+3
	DD	FLAT:__ColorsCursor
__acResizeCursorH DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	040H
	DB	00H
	DB	040H
	DB	00H
	DB	01H
	DB	040H
	DB	00H
	DB	050H
	DB	00H
	DB	06H
	DB	040H
	DB	00H
	DB	064H
	DB	00H
	DB	01aH
	DB	055H
	DB	055H
	DB	069H
	DB	00H
	DB	06aH
	DB	0aaH
	DB	0aaH
	DB	0aaH
	DB	040H
	DB	01aH
	DB	055H
	DB	055H
	DB	069H
	DB	00H
	DB	06H
	DB	040H
	DB	00H
	DB	064H
	DB	00H
	DB	01H
	DB	040H
	DB	00H
	DB	050H
	DB	00H
	DB	00H
	DB	040H
	DB	00H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
__bmResizeCursorH DW 011H
	DW	011H
	DW	05H
	DW	02H
	DD	FLAT:__acResizeCursorH
	DD	FLAT:__PalCursor
	ORG $+4
__ResizeCursorH DD FLAT:__bmResizeCursorH
	DD	08H
	DD	08H
__acResizeCursorV DB 00H
	DB	00H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	0a4H
	DB	00H
	DB	00H
	DB	00H
	DB	01aH
	DB	0a9H
	DB	00H
	DB	00H
	DB	00H
	DB	055H
	DB	095H
	DB	040H
	DB	00H
	DB	00H
	DB	01H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	055H
	DB	095H
	DB	040H
	DB	00H
	DB	00H
	DB	01aH
	DB	0a9H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	0a4H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	040H
	DB	00H
	DB	00H
	ORG $+3
__bmResizeCursorV DW 011H
	DW	011H
	DW	05H
	DW	02H
	DD	FLAT:__acResizeCursorV
	DD	FLAT:__PalCursor
	ORG $+4
__ResizeCursorV DD FLAT:__bmResizeCursorV
	DD	08H
	DD	08H
__acResizeCursorDD DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	055H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	0a4H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	064H
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	019H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	06H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	064H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	019H
	DB	014H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	064H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	0a4H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	0a4H
	DB	00H
	DB	00H
	DB	00H
	DB	015H
	DB	054H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
__bmResizeCursorDD DW 011H
	DW	011H
	DW	05H
	DW	02H
	DD	FLAT:__acResizeCursorDD
	DD	FLAT:__PalCursor
	ORG $+4
__ResizeCursorDD DD FLAT:__bmResizeCursorDD
	DD	08H
	DD	08H
__acResizeCursorDU DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	015H
	DB	054H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	0a4H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	0a4H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	064H
	DB	00H
	DB	00H
	DB	00H
	DB	019H
	DB	014H
	DB	00H
	DB	00H
	DB	00H
	DB	064H
	DB	04H
	DB	00H
	DB	00H
	DB	01H
	DB	090H
	DB	00H
	DB	00H
	DB	04H
	DB	06H
	DB	040H
	DB	00H
	DB	00H
	DB	05H
	DB	019H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	064H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	0a4H
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	055H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
__bmResizeCursorDU DW 011H
	DW	011H
	DW	05H
	DW	02H
	DD	FLAT:__acResizeCursorDU
	DD	FLAT:__PalCursor
	ORG $+4
__ResizeCursorDU DD FLAT:__bmResizeCursorDU
	DD	08H
	DD	08H
CONST	ENDS
PUBLIC	_FRAMEWIN_SetResizeable
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_GUI_HOOK_Remove:PROC
EXTRN	_GUI_HOOK_Add:PROC
EXTRN	_FRAMEWIN_LockH:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
__HOOK_Resizeable DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\widget\framewin_setresizeable.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _FRAMEWIN_SetResizeable
_TEXT	SEGMENT
_pObj$12115 = -8					; size = 4
_hObj$ = 8						; size = 4
_State$ = 12						; size = 4
_FRAMEWIN_SetResizeable PROC				; COMDAT
; Line 532
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 533
	cmp	DWORD PTR _hObj$[ebp], 0
	je	SHORT $LN4@FRAMEWIN_S
; Line 536
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_FRAMEWIN_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$12115[ebp], eax
; Line 537
	cmp	DWORD PTR _State$[ebp], 0
	je	SHORT $LN2@FRAMEWIN_S
; Line 538
	push	OFFSET __HOOKFUNC_Resizeable
	push	OFFSET __HOOK_Resizeable
	mov	eax, DWORD PTR _pObj$12115[ebp]
	add	eax, 140				; 0000008cH
	push	eax
	call	_GUI_HOOK_Add
	add	esp, 12					; 0000000cH
; Line 539
	jmp	SHORT $LN1@FRAMEWIN_S
$LN2@FRAMEWIN_S:
; Line 540
	push	OFFSET __HOOK_Resizeable
	mov	eax, DWORD PTR _pObj$12115[ebp]
	add	eax, 140				; 0000008cH
	push	eax
	call	_GUI_HOOK_Remove
	add	esp, 8
$LN1@FRAMEWIN_S:
; Line 542
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$12115[ebp], 0
$LN4@FRAMEWIN_S:
; Line 545
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FRAMEWIN_SetResizeable ENDP
_TEXT	ENDS
EXTRN	_FRAMEWIN_IsMaximized:PROC
EXTRN	_FRAMEWIN_IsMinimized:PROC
EXTRN	_WM_HasCaptured:PROC
_BSS	SEGMENT
__CaptureFlags DD 01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __HOOKFUNC_Resizeable
_TEXT	SEGMENT
tv75 = -208						; size = 4
_hWin$ = -8						; size = 4
_pMsg$ = 8						; size = 4
__HOOKFUNC_Resizeable PROC				; COMDAT
; Line 497
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 498
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _hWin$[ebp], ecx
; Line 499
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_HasCaptured
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@HOOKFUNC_R
	cmp	DWORD PTR __CaptureFlags, 0
	jne	SHORT $LN8@HOOKFUNC_R
; Line 500
	xor	eax, eax
	jmp	$LN9@HOOKFUNC_R
$LN8@HOOKFUNC_R:
; Line 502
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_FRAMEWIN_IsMinimized
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@HOOKFUNC_R
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_FRAMEWIN_IsMaximized
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@HOOKFUNC_R
$LN6@HOOKFUNC_R:
; Line 503
	xor	eax, eax
	jmp	SHORT $LN9@HOOKFUNC_R
$LN7@HOOKFUNC_R:
; Line 505
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv75[ebp], ecx
	cmp	DWORD PTR tv75[ebp], 12			; 0000000cH
	je	SHORT $LN3@HOOKFUNC_R
	cmp	DWORD PTR tv75[ebp], 16			; 00000010H
	je	SHORT $LN2@HOOKFUNC_R
	cmp	DWORD PTR tv75[ebp], 24			; 00000018H
	je	SHORT $LN1@HOOKFUNC_R
	jmp	SHORT $LN4@HOOKFUNC_R
$LN3@HOOKFUNC_R:
; Line 507
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	__OnTouch
	add	esp, 8
	jmp	SHORT $LN9@HOOKFUNC_R
$LN2@HOOKFUNC_R:
; Line 510
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	__OnMouseOver
	add	esp, 8
	jmp	SHORT $LN9@HOOKFUNC_R
$LN1@HOOKFUNC_R:
; Line 514
	push	0
	call	__SetResizeCursor
	add	esp, 4
; Line 516
	mov	DWORD PTR __CaptureFlags, 0
; Line 517
	mov	eax, 1
	jmp	SHORT $LN9@HOOKFUNC_R
$LN4@HOOKFUNC_R:
; Line 519
	xor	eax, eax
$LN9@HOOKFUNC_R:
; Line 520
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__HOOKFUNC_Resizeable ENDP
_TEXT	ENDS
EXTRN	_GUI_CURSOR_SelectEx:PROC
EXTRN	_GUI_CURSOR_GetState:PROC
_BSS	SEGMENT
__pOldCursor DD	01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __SetResizeCursor
_TEXT	SEGMENT
_pOldCursor$11970 = -32					; size = 4
_Direction$11961 = -20					; size = 4
_pNewCursor$ = -8					; size = 4
_Mode$ = 8						; size = 4
__SetResizeCursor PROC					; COMDAT
; Line 251
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 252
	mov	DWORD PTR _pNewCursor$[ebp], 0
; Line 253
	call	_GUI_CURSOR_GetState
	test	eax, eax
	jne	SHORT $LN13@SetResizeC
; Line 254
	jmp	$LN14@SetResizeC
$LN13@SetResizeC:
; Line 256
	cmp	DWORD PTR _Mode$[ebp], 0
	je	SHORT $LN12@SetResizeC
; Line 258
	mov	eax, DWORD PTR _Mode$[ebp]
	and	eax, 3
	mov	DWORD PTR _Direction$11961[ebp], eax
; Line 259
	cmp	DWORD PTR _Direction$11961[ebp], 1
	jne	SHORT $LN11@SetResizeC
; Line 260
	mov	DWORD PTR _pNewCursor$[ebp], OFFSET __ResizeCursorH
	jmp	SHORT $LN12@SetResizeC
$LN11@SetResizeC:
; Line 261
	cmp	DWORD PTR _Direction$11961[ebp], 2
	jne	SHORT $LN9@SetResizeC
; Line 262
	mov	DWORD PTR _pNewCursor$[ebp], OFFSET __ResizeCursorV
; Line 263
	jmp	SHORT $LN12@SetResizeC
$LN9@SetResizeC:
; Line 264
	mov	eax, DWORD PTR _Mode$[ebp]
	and	eax, 12					; 0000000cH
	mov	DWORD PTR _Direction$11961[ebp], eax
; Line 265
	cmp	DWORD PTR _Direction$11961[ebp], 12	; 0000000cH
	je	SHORT $LN6@SetResizeC
	cmp	DWORD PTR _Direction$11961[ebp], 0
	jne	SHORT $LN7@SetResizeC
$LN6@SetResizeC:
; Line 266
	mov	DWORD PTR _pNewCursor$[ebp], OFFSET __ResizeCursorDD
; Line 267
	jmp	SHORT $LN12@SetResizeC
$LN7@SetResizeC:
; Line 268
	mov	DWORD PTR _pNewCursor$[ebp], OFFSET __ResizeCursorDU
$LN12@SetResizeC:
; Line 272
	cmp	DWORD PTR _pNewCursor$[ebp], 0
	je	SHORT $LN4@SetResizeC
; Line 274
	push	0
	mov	eax, DWORD PTR _pNewCursor$[ebp]
	push	eax
	call	_GUI_CURSOR_SelectEx
	add	esp, 8
	mov	DWORD PTR _pOldCursor$11970[ebp], eax
; Line 275
	cmp	DWORD PTR __pOldCursor, 0
	jne	SHORT $LN3@SetResizeC
; Line 276
	mov	eax, DWORD PTR _pOldCursor$11970[ebp]
	mov	DWORD PTR __pOldCursor, eax
$LN3@SetResizeC:
; Line 277
	jmp	SHORT $LN14@SetResizeC
$LN4@SetResizeC:
; Line 278
	cmp	DWORD PTR __pOldCursor, 0
	je	SHORT $LN14@SetResizeC
; Line 279
	push	0
	mov	eax, DWORD PTR __pOldCursor
	push	eax
	call	_GUI_CURSOR_SelectEx
	add	esp, 8
; Line 280
	mov	DWORD PTR __pOldCursor, 0
$LN14@SetResizeC:
; Line 282
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetResizeCursor ENDP
_TEXT	ENDS
EXTRN	_WM_ReleaseCapture:PROC
EXTRN	_WM_BringToTop:PROC
EXTRN	_WM_SetFocus:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __OnTouch
_TEXT	SEGMENT
_Mode$12057 = -44					; size = 4
_y$12056 = -32						; size = 4
_x$12055 = -20						; size = 4
_pState$ = -8						; size = 4
_hWin$ = 8						; size = 4
_pMsg$ = 12						; size = 4
__OnTouch PROC						; COMDAT
; Line 399
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 400
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pState$[ebp], ecx
; Line 401
	cmp	DWORD PTR _pState$[ebp], 0
	je	$LN10@OnTouch
; Line 403
	mov	eax, DWORD PTR _pState$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$12055[ebp], ecx
; Line 404
	mov	eax, DWORD PTR _pState$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _y$12056[ebp], ecx
; Line 405
	mov	eax, DWORD PTR _y$12056[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$12055[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWin$[ebp]
	push	edx
	call	__CheckReactBorder
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Mode$12057[ebp], eax
; Line 406
	mov	eax, DWORD PTR _pState$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	$LN9@OnTouch
; Line 407
	mov	eax, DWORD PTR __CaptureFlags
	and	eax, 15					; 0000000fH
	je	SHORT $LN8@OnTouch
; Line 408
	lea	eax, DWORD PTR _y$12056[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$12055[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWin$[ebp]
	push	edx
	call	__ChangeWindowPosSize
	add	esp, 12					; 0000000cH
; Line 409
	push	0
	mov	eax, DWORD PTR _y$12056[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$12055[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWin$[ebp]
	push	edx
	call	__SetCapture
	add	esp, 16					; 00000010H
; Line 410
	mov	eax, 1
	jmp	$LN11@OnTouch
	jmp	SHORT $LN7@OnTouch
$LN8@OnTouch:
; Line 411
	cmp	DWORD PTR _Mode$12057[ebp], 0
	je	SHORT $LN6@OnTouch
; Line 412
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_SetFocus
	add	esp, 4
; Line 413
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_BringToTop
	add	esp, 4
; Line 414
	mov	eax, DWORD PTR _Mode$12057[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$12056[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$12055[ebp]
	push	edx
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	__SetCapture
	add	esp, 16					; 00000010H
; Line 415
	mov	eax, 1
	jmp	SHORT $LN11@OnTouch
	jmp	SHORT $LN7@OnTouch
$LN6@OnTouch:
; Line 418
	cmp	DWORD PTR __CaptureFlags, 0
	je	SHORT $LN7@OnTouch
; Line 419
	call	_WM_ReleaseCapture
; Line 420
	mov	eax, 1
	jmp	SHORT $LN11@OnTouch
$LN7@OnTouch:
; Line 421
	jmp	SHORT $LN10@OnTouch
$LN9@OnTouch:
; Line 423
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_HasCaptured
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@OnTouch
; Line 424
	mov	eax, DWORD PTR __CaptureFlags
	and	eax, -16				; fffffff0H
	mov	DWORD PTR __CaptureFlags, eax
; Line 426
	cmp	DWORD PTR _Mode$12057[ebp], 0
	jne	SHORT $LN1@OnTouch
; Line 429
	call	_WM_ReleaseCapture
$LN1@OnTouch:
; Line 431
	mov	eax, 1
	jmp	SHORT $LN11@OnTouch
$LN10@OnTouch:
; Line 434
	xor	eax, eax
$LN11@OnTouch:
; Line 435
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@OnTouch
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@OnTouch:
	DD	2
	DD	$LN15@OnTouch
$LN15@OnTouch:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN13@OnTouch
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN14@OnTouch
$LN14@OnTouch:
	DB	121					; 00000079H
	DB	0
$LN13@OnTouch:
	DB	120					; 00000078H
	DB	0
__OnTouch ENDP
_TEXT	ENDS
EXTRN	_WM_SetCapture:PROC
_BSS	SEGMENT
__CaptureY DD	01H DUP (?)
__CaptureX DD	01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __SetCapture
_TEXT	SEGMENT
_hWin$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_Mode$ = 20						; size = 4
__SetCapture PROC					; COMDAT
; Line 289
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 290
	mov	eax, DWORD PTR __CaptureFlags
	and	eax, 4
	jne	SHORT $LN5@SetCapture
; Line 291
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR __CaptureX, eax
$LN5@SetCapture:
; Line 293
	mov	eax, DWORD PTR __CaptureFlags
	and	eax, 8
	jne	SHORT $LN4@SetCapture
; Line 294
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR __CaptureY, eax
$LN4@SetCapture:
; Line 296
	cmp	DWORD PTR _Mode$[ebp], 0
	je	SHORT $LN6@SetCapture
; Line 297
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_HasCaptured
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@SetCapture
; Line 298
	push	0
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_SetCapture
	add	esp, 8
$LN2@SetCapture:
; Line 301
	mov	eax, DWORD PTR _Mode$[ebp]
	push	eax
	call	__SetResizeCursor
	add	esp, 4
; Line 303
	mov	eax, DWORD PTR _Mode$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN1@SetCapture
; Line 304
	mov	DWORD PTR _Mode$[ebp], 0
$LN1@SetCapture:
; Line 306
	mov	eax, DWORD PTR _Mode$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR __CaptureFlags, eax
$LN6@SetCapture:
; Line 308
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetCapture ENDP
_TEXT	ENDS
EXTRN	_WM_ResizeWindow:PROC
EXTRN	_WM_MoveWindow:PROC
EXTRN	_WM_GetClientRectEx:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __ChangeWindowPosSize
_TEXT	SEGMENT
tv79 = -236						; size = 4
tv72 = -236						; size = 4
_Rect$ = -36						; size = 8
_dy$ = -20						; size = 4
_dx$ = -8						; size = 4
_hWin$ = 8						; size = 4
_px$ = 12						; size = 4
_py$ = 16						; size = 4
__ChangeWindowPosSize PROC				; COMDAT
; Line 314
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 315
	mov	DWORD PTR _dx$[ebp], 0
	mov	DWORD PTR _dy$[ebp], 0
; Line 317
	lea	eax, DWORD PTR _Rect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	_WM_GetClientRectEx
	add	esp, 8
; Line 319
	mov	eax, DWORD PTR __CaptureFlags
	and	eax, 1
	je	SHORT $LN6@ChangeWind
; Line 320
	mov	eax, DWORD PTR __CaptureFlags
	and	eax, 4
	je	SHORT $LN9@ChangeWind
	mov	ecx, DWORD PTR _px$[ebp]
	mov	edx, DWORD PTR __CaptureX
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv72[ebp], edx
	jmp	SHORT $LN10@ChangeWind
$LN9@ChangeWind:
	mov	eax, DWORD PTR _px$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR __CaptureX
	mov	DWORD PTR tv72[ebp], ecx
$LN10@ChangeWind:
	mov	edx, DWORD PTR tv72[ebp]
	mov	DWORD PTR _dx$[ebp], edx
$LN6@ChangeWind:
; Line 322
	mov	eax, DWORD PTR __CaptureFlags
	and	eax, 2
	je	SHORT $LN5@ChangeWind
; Line 323
	mov	eax, DWORD PTR __CaptureFlags
	and	eax, 8
	je	SHORT $LN11@ChangeWind
	mov	ecx, DWORD PTR _py$[ebp]
	mov	edx, DWORD PTR __CaptureY
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv79[ebp], edx
	jmp	SHORT $LN12@ChangeWind
$LN11@ChangeWind:
	mov	eax, DWORD PTR _py$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR __CaptureY
	mov	DWORD PTR tv79[ebp], ecx
$LN12@ChangeWind:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _dy$[ebp], edx
$LN5@ChangeWind:
; Line 326
	movsx	eax, WORD PTR _Rect$[ebp+4]
	mov	ecx, DWORD PTR _dx$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	cmp	edx, 20					; 00000014H
	jge	SHORT $LN4@ChangeWind
; Line 327
	movsx	eax, WORD PTR _Rect$[ebp+4]
	mov	ecx, 20					; 00000014H
	sub	ecx, eax
	sub	ecx, 1
	mov	DWORD PTR _dx$[ebp], ecx
; Line 328
	mov	eax, DWORD PTR __CaptureX
	add	eax, DWORD PTR _dx$[ebp]
	mov	ecx, DWORD PTR _px$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@ChangeWind:
; Line 330
	movsx	eax, WORD PTR _Rect$[ebp+6]
	mov	ecx, DWORD PTR _dy$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	cmp	edx, 20					; 00000014H
	jge	SHORT $LN3@ChangeWind
; Line 331
	movsx	eax, WORD PTR _Rect$[ebp+6]
	mov	ecx, 20					; 00000014H
	sub	ecx, eax
	sub	ecx, 1
	mov	DWORD PTR _dy$[ebp], ecx
; Line 332
	mov	eax, DWORD PTR __CaptureY
	add	eax, DWORD PTR _dy$[ebp]
	mov	ecx, DWORD PTR _py$[ebp]
	mov	DWORD PTR [ecx], eax
$LN3@ChangeWind:
; Line 335
	mov	eax, DWORD PTR __CaptureFlags
	and	eax, 4
	je	SHORT $LN2@ChangeWind
; Line 336
	push	0
	mov	eax, DWORD PTR _dx$[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	_WM_MoveWindow
	add	esp, 12					; 0000000cH
$LN2@ChangeWind:
; Line 338
	mov	eax, DWORD PTR __CaptureFlags
	and	eax, 8
	je	SHORT $LN1@ChangeWind
; Line 339
	mov	eax, DWORD PTR _dy$[ebp]
	neg	eax
	push	eax
	push	0
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	_WM_MoveWindow
	add	esp, 12					; 0000000cH
$LN1@ChangeWind:
; Line 342
	mov	eax, DWORD PTR _dy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWin$[ebp]
	push	edx
	call	_WM_ResizeWindow
	add	esp, 12					; 0000000cH
; Line 343
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@ChangeWind
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@ChangeWind:
	DD	1
	DD	$LN14@ChangeWind
$LN14@ChangeWind:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN13@ChangeWind
$LN13@ChangeWind:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
__ChangeWindowPosSize ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __CheckReactBorder
_TEXT	SEGMENT
_r$ = -24						; size = 8
_Mode$ = -8						; size = 4
_hWin$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__CheckReactBorder PROC					; COMDAT
; Line 377
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 378
	mov	DWORD PTR _Mode$[ebp], 0
; Line 380
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	_WM_GetClientRectEx
	add	esp, 8
; Line 381
	cmp	DWORD PTR _x$[ebp], 0
	jl	$LN4@CheckReact
	cmp	DWORD PTR _y$[ebp], 0
	jl	SHORT $LN4@CheckReact
	movsx	eax, WORD PTR _r$[ebp+4]
	cmp	DWORD PTR _x$[ebp], eax
	jg	SHORT $LN4@CheckReact
	movsx	eax, WORD PTR _r$[ebp+6]
	cmp	DWORD PTR _y$[ebp], eax
	jg	SHORT $LN4@CheckReact
; Line 382
	push	3
	movsx	eax, WORD PTR _r$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__CheckBorderX
	add	esp, 12					; 0000000cH
	or	eax, DWORD PTR _Mode$[ebp]
	mov	DWORD PTR _Mode$[ebp], eax
; Line 383
	je	SHORT $LN3@CheckReact
; Line 384
	push	12					; 0000000cH
	movsx	eax, WORD PTR _r$[ebp+6]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	call	__CheckBorderY
	add	esp, 12					; 0000000cH
	or	eax, DWORD PTR _Mode$[ebp]
	mov	DWORD PTR _Mode$[ebp], eax
; Line 385
	jmp	SHORT $LN4@CheckReact
$LN3@CheckReact:
; Line 386
	push	3
	movsx	eax, WORD PTR _r$[ebp+6]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	call	__CheckBorderY
	add	esp, 12					; 0000000cH
	or	eax, DWORD PTR _Mode$[ebp]
	mov	DWORD PTR _Mode$[ebp], eax
; Line 387
	je	SHORT $LN4@CheckReact
; Line 388
	push	12					; 0000000cH
	movsx	eax, WORD PTR _r$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__CheckBorderX
	add	esp, 12					; 0000000cH
	or	eax, DWORD PTR _Mode$[ebp]
	mov	DWORD PTR _Mode$[ebp], eax
$LN4@CheckReact:
; Line 392
	mov	eax, DWORD PTR _Mode$[ebp]
; Line 393
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@CheckReact
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@CheckReact:
	DD	1
	DD	$LN8@CheckReact
$LN8@CheckReact:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN7@CheckReact
$LN7@CheckReact:
	DB	114					; 00000072H
	DB	0
__CheckReactBorder ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __CheckBorderX
_TEXT	SEGMENT
_Mode$ = -8						; size = 4
_x$ = 8							; size = 4
_x1$ = 12						; size = 4
_Border$ = 16						; size = 4
__CheckBorderX PROC					; COMDAT
; Line 349
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 350
	mov	DWORD PTR _Mode$[ebp], 0
; Line 351
	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _Border$[ebp]
	cmp	DWORD PTR _x$[ebp], eax
	jle	SHORT $LN3@CheckBorde
; Line 352
	mov	DWORD PTR _Mode$[ebp], 1
	jmp	SHORT $LN2@CheckBorde
$LN3@CheckBorde:
; Line 353
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _Border$[ebp]
	jge	SHORT $LN2@CheckBorde
; Line 354
	mov	DWORD PTR _Mode$[ebp], 5
$LN2@CheckBorde:
; Line 356
	mov	eax, DWORD PTR _Mode$[ebp]
; Line 357
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__CheckBorderX ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __CheckBorderY
_TEXT	SEGMENT
_Mode$ = -8						; size = 4
_y$ = 8							; size = 4
_y1$ = 12						; size = 4
_Border$ = 16						; size = 4
__CheckBorderY PROC					; COMDAT
; Line 363
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 364
	mov	DWORD PTR _Mode$[ebp], 0
; Line 365
	mov	eax, DWORD PTR _y1$[ebp]
	sub	eax, DWORD PTR _Border$[ebp]
	cmp	DWORD PTR _y$[ebp], eax
	jle	SHORT $LN3@CheckBorde@2
; Line 366
	mov	DWORD PTR _Mode$[ebp], 2
	jmp	SHORT $LN2@CheckBorde@2
$LN3@CheckBorde@2:
; Line 367
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _Border$[ebp]
	jge	SHORT $LN2@CheckBorde@2
; Line 368
	mov	DWORD PTR _Mode$[ebp], 10		; 0000000aH
$LN2@CheckBorde@2:
; Line 370
	mov	eax, DWORD PTR _Mode$[ebp]
; Line 371
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__CheckBorderY ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __OnMouseOver
_TEXT	SEGMENT
_Mode$12088 = -44					; size = 4
_y$12087 = -32						; size = 4
_x$12086 = -20						; size = 4
_pState$ = -8						; size = 4
_hWin$ = 8						; size = 4
_pMsg$ = 12						; size = 4
__OnMouseOver PROC					; COMDAT
; Line 463
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 464
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pState$[ebp], ecx
; Line 465
	cmp	DWORD PTR _pState$[ebp], 0
	je	$LN6@OnMouseOve
; Line 467
	mov	eax, DWORD PTR _pState$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$12086[ebp], ecx
; Line 468
	mov	eax, DWORD PTR _pState$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _y$12087[ebp], ecx
; Line 469
	mov	eax, DWORD PTR _y$12087[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$12086[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWin$[ebp]
	push	edx
	call	__CheckReactBorder
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Mode$12088[ebp], eax
; Line 470
	cmp	DWORD PTR _Mode$12088[ebp], 0
	je	SHORT $LN5@OnMouseOve
; Line 471
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	__ForwardMouseOverMsg
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@OnMouseOve
; Line 472
	mov	eax, DWORD PTR _Mode$12088[ebp]
	or	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _y$12087[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$12086[ebp]
	push	edx
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	__SetCapture
	add	esp, 16					; 00000010H
$LN4@OnMouseOve:
; Line 474
	mov	eax, 1
	jmp	SHORT $LN7@OnMouseOve
	jmp	SHORT $LN6@OnMouseOve
$LN5@OnMouseOve:
; Line 475
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_HasCaptured
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@OnMouseOve
; Line 476
	mov	eax, DWORD PTR __CaptureFlags
	and	eax, 15					; 0000000fH
	jne	SHORT $LN1@OnMouseOve
; Line 477
	call	_WM_ReleaseCapture
; Line 478
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	__ForwardMouseOverMsg
	add	esp, 8
$LN1@OnMouseOve:
; Line 480
	mov	eax, 1
	jmp	SHORT $LN7@OnMouseOve
$LN6@OnMouseOve:
; Line 483
	xor	eax, eax
$LN7@OnMouseOve:
; Line 484
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__OnMouseOver ENDP
_TEXT	ENDS
EXTRN	_WM__SendMessage:PROC
EXTRN	_WM__IsInModalArea:PROC
EXTRN	_WM_Screen2hWin:PROC
EXTRN	_WM_GetWindowOrgY:PROC
EXTRN	_WM_GetWindowOrgX:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __ForwardMouseOverMsg
_TEXT	SEGMENT
_hBelow$ = -20						; size = 4
_pState$ = -8						; size = 4
_hWin$ = 8						; size = 4
_pMsg$ = 12						; size = 4
__ForwardMouseOverMsg PROC				; COMDAT
; Line 442
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 443
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pState$[ebp], ecx
; Line 445
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_GetWindowOrgX
	add	esp, 4
	mov	ecx, DWORD PTR _pState$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _pState$[ebp]
	mov	DWORD PTR [edx], eax
; Line 446
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_GetWindowOrgY
	add	esp, 4
	mov	ecx, DWORD PTR _pState$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pState$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 447
	mov	eax, DWORD PTR _pState$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pState$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_WM_Screen2hWin
	add	esp, 8
	mov	DWORD PTR _hBelow$[ebp], eax
; Line 448
	cmp	DWORD PTR _hBelow$[ebp], 0
	je	SHORT $LN1@ForwardMou
	mov	eax, DWORD PTR _hBelow$[ebp]
	cmp	eax, DWORD PTR _hWin$[ebp]
	je	SHORT $LN1@ForwardMou
	mov	eax, DWORD PTR _hBelow$[ebp]
	push	eax
	call	_WM__IsInModalArea
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@ForwardMou
; Line 449
	mov	eax, DWORD PTR _hBelow$[ebp]
	push	eax
	call	_WM_GetWindowOrgX
	add	esp, 4
	mov	ecx, DWORD PTR _pState$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, eax
	mov	eax, DWORD PTR _pState$[ebp]
	mov	DWORD PTR [eax], edx
; Line 450
	mov	eax, DWORD PTR _hBelow$[ebp]
	push	eax
	call	_WM_GetWindowOrgY
	add	esp, 4
	mov	ecx, DWORD PTR _pState$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, eax
	mov	eax, DWORD PTR _pState$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 451
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hBelow$[ebp]
	push	ecx
	call	_WM__SendMessage
	add	esp, 8
; Line 452
	mov	eax, 1
	jmp	SHORT $LN2@ForwardMou
$LN1@ForwardMou:
; Line 454
	xor	eax, eax
$LN2@ForwardMou:
; Line 455
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ForwardMouseOverMsg ENDP
_TEXT	ENDS
END
