; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\DisplayDriver\GUIDRV_Win32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUIDRV_Win_API
CONST	SEGMENT
_GUIDRV_Win_API DD 00H
	DD	FLAT:__DrawBitmap
	DD	FLAT:__DrawHLine
	DD	FLAT:__DrawVLine
	DD	FLAT:__FillRect
	DD	FLAT:__GetPixelIndex
	DD	FLAT:__SetPixelIndex
	DD	FLAT:__XorPixel
	DD	FLAT:__SetOrg
	DD	FLAT:__GetDevFunc
	DD	FLAT:__GetDevProp
	DD	FLAT:__GetDevData
	DD	FLAT:__GetRect
CONST	ENDS
_DATA	SEGMENT
$SG111238 DB	'LCDWin::SETPIXEL: parameters out of bounds', 00H
_DATA	ENDS
EXTRN	_LCDSIM_GetPixelIndex:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\displaydriver\guidrv_win32.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __GetPixelIndex
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__GetPixelIndex PROC					; COMDAT
; Line 108
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 109
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_LCDSIM_GetPixelIndex
	add	esp, 12					; 0000000cH
; Line 110
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetPixelIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __XorPixel
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__XorPixel PROC						; COMDAT
; Line 132
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 133
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__XOR_Pixel
	add	esp, 12					; 0000000cH
; Line 134
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__XorPixel ENDP
_TEXT	ENDS
EXTRN	_LCDSIM_SetPixelIndex:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __XOR_Pixel
_TEXT	SEGMENT
_IndexMask$ = -20					; size = 4
_PixelIndex$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__XOR_Pixel PROC					; COMDAT
; Line 116
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 120
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__GetPixelIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _PixelIndex$[ebp], eax
; Line 121
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$[ebp], eax
; Line 122
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _PixelIndex$[ebp]
	xor	edx, DWORD PTR _IndexMask$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
; Line 123
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__XOR_Pixel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetPixelIndex
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_ColorIndex$ = 20					; size = 4
__SetPixelIndex PROC					; COMDAT
; Line 143
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 144
	mov	eax, DWORD PTR _ColorIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@SetPixelIn
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _ColorIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN2@SetPixelIn:
; Line 145
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetPixelIndex ENDP
_TEXT	ENDS
EXTRN	_GUI_ErrorOut:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __CheckBound
_TEXT	SEGMENT
tv68 = -220						; size = 4
_NumColors$ = -20					; size = 4
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_c$ = 12						; size = 4
__CheckBound PROC					; COMDAT
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 80
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 81
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN4@CheckBound
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN5@CheckBound
$LN4@CheckBound:
	mov	DWORD PTR tv68[ebp], -1
$LN5@CheckBound:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR _NumColors$[ebp], eax
; Line 82
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _NumColors$[ebp]
	jbe	SHORT $LN1@CheckBound
; Line 83
	push	OFFSET $SG111238
	call	_GUI_ErrorOut
	add	esp, 4
; Line 84
	mov	eax, 1
	jmp	SHORT $LN2@CheckBound
$LN1@CheckBound:
; Line 86
	xor	eax, eax
$LN2@CheckBound:
; Line 87
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__CheckBound ENDP
_TEXT	ENDS
EXTRN	_LCD_pColorIndex:DWORD
EXTRN	_GUI_Context:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawHLine
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y$ = 16						; size = 4
_x1$ = 20						; size = 4
__DrawHLine PROC					; COMDAT
; Line 537
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 538
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 1
	je	SHORT $LN9@DrawHLine
	jmp	SHORT $LN8@DrawHLine
$LN7@DrawHLine:
; Line 539
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, 1
	mov	DWORD PTR _x0$[ebp], eax
$LN8@DrawHLine:
	mov	eax, DWORD PTR _x0$[ebp]
	cmp	eax, DWORD PTR _x1$[ebp]
	jg	SHORT $LN6@DrawHLine
; Line 540
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__XOR_Pixel
	add	esp, 12					; 0000000cH
; Line 541
	jmp	SHORT $LN7@DrawHLine
$LN6@DrawHLine:
; Line 542
	jmp	SHORT $LN10@DrawHLine
$LN9@DrawHLine:
; Line 543
	jmp	SHORT $LN4@DrawHLine
$LN3@DrawHLine:
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, 1
	mov	DWORD PTR _x0$[ebp], eax
$LN4@DrawHLine:
	mov	eax, DWORD PTR _x0$[ebp]
	cmp	eax, DWORD PTR _x1$[ebp]
	jg	SHORT $LN10@DrawHLine
; Line 544
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@DrawHLine
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _LCD_pColorIndex
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN1@DrawHLine:
; Line 545
	jmp	SHORT $LN3@DrawHLine
$LN10@DrawHLine:
; Line 547
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawHLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawVLine
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y0$ = 16						; size = 4
_y1$ = 20						; size = 4
__DrawVLine PROC					; COMDAT
; Line 553
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 554
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 1
	je	SHORT $LN3@DrawVLine
$LN6@DrawVLine:
; Line 555
	mov	eax, DWORD PTR _y0$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jg	SHORT $LN5@DrawVLine
; Line 556
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__XOR_Pixel
	add	esp, 12					; 0000000cH
; Line 557
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
; Line 558
	jmp	SHORT $LN6@DrawVLine
$LN5@DrawVLine:
; Line 559
	jmp	SHORT $LN8@DrawVLine
$LN3@DrawVLine:
; Line 560
	mov	eax, DWORD PTR _y0$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jg	SHORT $LN8@DrawVLine
; Line 561
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@DrawVLine
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _LCD_pColorIndex
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN1@DrawVLine:
; Line 562
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
; Line 563
	jmp	SHORT $LN3@DrawVLine
$LN8@DrawVLine:
; Line 565
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawVLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __FillRect
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
__FillRect PROC						; COMDAT
; Line 571
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 572
	jmp	SHORT $LN3@FillRect
$LN2@FillRect:
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
$LN3@FillRect:
	mov	eax, DWORD PTR _y0$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jg	SHORT $LN4@FillRect
; Line 573
	mov	eax, DWORD PTR _x1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawHLine
	add	esp, 16					; 00000010H
; Line 574
	jmp	SHORT $LN2@FillRect
$LN4@FillRect:
; Line 575
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FillRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitmap
_TEXT	SEGMENT
tv66 = -208						; size = 4
_i$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xSize$ = 20						; size = 4
_ySize$ = 24						; size = 4
_BitsPerPixel$ = 28					; size = 4
_BytesPerLine$ = 32					; size = 4
_pData$ = 36						; size = 4
_Diff$ = 40						; size = 4
_pTrans$ = 44						; size = 4
__DrawBitmap PROC					; COMDAT
; Line 587
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 592
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@DrawBitmap
$LN10@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	$LN12@DrawBitmap
; Line 593
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR tv66[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 31			; 0000001fH
	ja	$LN7@DrawBitmap
	mov	edx, DWORD PTR tv66[ebp]
	movzx	eax, BYTE PTR $LN14@DrawBitmap[edx]
	jmp	DWORD PTR $LN15@DrawBitmap[eax*4]
$LN6@DrawBitmap:
; Line 595
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine1BPP
	add	esp, 28					; 0000001cH
; Line 596
	jmp	$LN7@DrawBitmap
$LN5@DrawBitmap:
; Line 598
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine2BPP
	add	esp, 28					; 0000001cH
; Line 599
	jmp	$LN7@DrawBitmap
$LN4@DrawBitmap:
; Line 601
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine4BPP
	add	esp, 28					; 0000001cH
; Line 602
	jmp	SHORT $LN7@DrawBitmap
$LN3@DrawBitmap:
; Line 604
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__DrawBitLine8BPP
	add	esp, 24					; 00000018H
; Line 605
	jmp	SHORT $LN7@DrawBitmap
$LN2@DrawBitmap:
; Line 607
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__DrawBitLine16BPP
	add	esp, 20					; 00000014H
; Line 608
	jmp	SHORT $LN7@DrawBitmap
$LN1@DrawBitmap:
; Line 611
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__DrawBitLine32BPP
	add	esp, 20					; 00000014H
$LN7@DrawBitmap:
; Line 614
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 615
	jmp	$LN10@DrawBitmap
$LN12@DrawBitmap:
; Line 616
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@DrawBitmap:
	DD	$LN6@DrawBitmap
	DD	$LN5@DrawBitmap
	DD	$LN4@DrawBitmap
	DD	$LN3@DrawBitmap
	DD	$LN2@DrawBitmap
	DD	$LN1@DrawBitmap
	DD	$LN7@DrawBitmap
$LN14@DrawBitmap:
	DB	0
	DB	1
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
__DrawBitmap ENDP
_TEXT	ENDS
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitLine1BPP
_TEXT	SEGMENT
tv80 = -264						; size = 4
tv76 = -260						; size = 4
tv69 = -260						; size = 4
_aTrans$ = -60						; size = 8
_Pixel$ = -44						; size = 4
_IndexMask$ = -32					; size = 4
_Index1$ = -20						; size = 4
_Index0$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xSize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine1BPP PROC					; COMDAT
; Line 151
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 154
	mov	DWORD PTR _aTrans$[ebp], 0
	mov	DWORD PTR _aTrans$[ebp+4], 1
; Line 156
	cmp	DWORD PTR _pTrans$[ebp], 0
	jne	SHORT $LN20@DrawBitLin
; Line 157
	lea	eax, DWORD PTR _aTrans$[ebp]
	mov	DWORD PTR _pTrans$[ebp], eax
$LN20@DrawBitLin:
; Line 159
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Index0$[ebp], ecx
; Line 160
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Index1$[ebp], ecx
; Line 161
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 162
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv69[ebp], eax
	cmp	DWORD PTR tv69[ebp], 3
	ja	$LN21@DrawBitLin
	mov	ecx, DWORD PTR tv69[ebp]
	jmp	DWORD PTR $LN28@DrawBitLin[ecx*4]
$LN16@DrawBitLin:
; Line 165
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN23@DrawBitLin
	mov	ecx, DWORD PTR _Index1$[ebp]
	mov	DWORD PTR tv76[ebp], ecx
	jmp	SHORT $LN24@DrawBitLin
$LN23@DrawBitLin:
	mov	edx, DWORD PTR _Index0$[ebp]
	mov	DWORD PTR tv76[ebp], edx
$LN24@DrawBitLin:
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv80[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR tv76[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
; Line 166
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN15@DrawBitLin
; Line 167
	mov	DWORD PTR _Diff$[ebp], 0
; Line 168
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN15@DrawBitLin:
; Line 170
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN16@DrawBitLin
; Line 171
	jmp	$LN21@DrawBitLin
$LN11@DrawBitLin:
; Line 174
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN8@DrawBitLin
; Line 175
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _Index1$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN8@DrawBitLin:
; Line 176
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 177
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN10@DrawBitLin
; Line 178
	mov	DWORD PTR _Diff$[ebp], 0
; Line 179
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN10@DrawBitLin:
; Line 181
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	SHORT $LN11@DrawBitLin
; Line 182
	jmp	$LN21@DrawBitLin
$LN6@DrawBitLin:
; Line 185
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$[ebp], eax
$LN5@DrawBitLin:
; Line 187
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN2@DrawBitLin
; Line 188
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_LCDSIM_GetPixelIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Pixel$[ebp], eax
; Line 189
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _Pixel$[ebp]
	xor	edx, DWORD PTR _IndexMask$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN2@DrawBitLin:
; Line 191
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 192
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN4@DrawBitLin
; Line 193
	mov	DWORD PTR _Diff$[ebp], 0
; Line 194
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN4@DrawBitLin:
; Line 196
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	SHORT $LN5@DrawBitLin
$LN21@DrawBitLin:
; Line 199
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@DrawBitLin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@DrawBitLin:
	DD	1
	DD	$LN26@DrawBitLin
$LN26@DrawBitLin:
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN25@DrawBitLin
$LN25@DrawBitLin:
	DB	97					; 00000061H
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
	npad	1
$LN28@DrawBitLin:
	DD	$LN16@DrawBitLin
	DD	$LN6@DrawBitLin
	DD	$LN11@DrawBitLin
	DD	$LN6@DrawBitLin
__DrawBitLine1BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine2BPP
_TEXT	SEGMENT
tv142 = -340						; size = 4
tv87 = -340						; size = 4
tv68 = -340						; size = 4
_Index$111377 = -140					; size = 4
_Shift$111376 = -128					; size = 4
_PixelIndex$111369 = -116				; size = 4
_Index$111367 = -104					; size = 4
_Shift$111366 = -92					; size = 4
_Index$111358 = -80					; size = 4
_Shift$111357 = -68					; size = 4
_PixelIndex$111350 = -56				; size = 4
_Index$111349 = -44					; size = 4
_Shift$111348 = -32					; size = 4
_CurrentPixel$ = -20					; size = 4
_Pixels$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xSize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine2BPP PROC					; COMDAT
; Line 205
	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 206
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixels$[ebp], ecx
; Line 207
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _CurrentPixel$[ebp], eax
; Line 208
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 209
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv68[ebp], eax
	je	SHORT $LN28@DrawBitLin@2
	cmp	DWORD PTR tv68[ebp], 2
	je	$LN15@DrawBitLin@2
	jmp	$LN31@DrawBitLin@2
$LN28@DrawBitLin@2:
; Line 211
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN20@DrawBitLin@2
$LN26@DrawBitLin@2:
; Line 213
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$111348[ebp], eax
; Line 214
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$111348[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$111348[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$111349[ebp], eax
; Line 215
	mov	eax, DWORD PTR _Index$111349[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$111350[ebp], edx
; Line 216
	mov	eax, DWORD PTR _PixelIndex$111350[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN23@DrawBitLin@2
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv87[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _PixelIndex$111350[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR tv87[ebp]
	push	eax
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN23@DrawBitLin@2:
; Line 217
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN25@DrawBitLin@2
; Line 218
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 219
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN25@DrawBitLin@2:
; Line 221
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN26@DrawBitLin@2
; Line 222
	jmp	$LN21@DrawBitLin@2
$LN20@DrawBitLin@2:
; Line 224
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$111357[ebp], eax
; Line 225
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$111357[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$111357[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$111358[ebp], eax
; Line 226
	mov	eax, DWORD PTR _Index$111358[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@DrawBitLin@2
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv142[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _Index$111358[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR tv142[ebp]
	push	eax
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN17@DrawBitLin@2:
; Line 227
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN19@DrawBitLin@2
; Line 228
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 229
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN19@DrawBitLin@2:
; Line 231
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN20@DrawBitLin@2
$LN21@DrawBitLin@2:
; Line 233
	jmp	$LN31@DrawBitLin@2
$LN15@DrawBitLin@2:
; Line 235
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN6@DrawBitLin@2
$LN13@DrawBitLin@2:
; Line 237
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$111366[ebp], eax
; Line 238
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$111366[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$111366[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$111367[ebp], eax
; Line 239
	cmp	DWORD PTR _Index$111367[ebp], 0
	je	SHORT $LN10@DrawBitLin@2
; Line 240
	mov	eax, DWORD PTR _Index$111367[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$111369[ebp], edx
; Line 241
	mov	eax, DWORD PTR _PixelIndex$111369[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@DrawBitLin@2
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _PixelIndex$111369[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN10@DrawBitLin@2:
; Line 243
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 244
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN12@DrawBitLin@2
; Line 245
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 246
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN12@DrawBitLin@2:
; Line 248
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN13@DrawBitLin@2
; Line 249
	jmp	$LN31@DrawBitLin@2
$LN6@DrawBitLin@2:
; Line 251
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$111376[ebp], eax
; Line 252
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$111376[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$111376[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$111377[ebp], eax
; Line 253
	cmp	DWORD PTR _Index$111377[ebp], 0
	je	SHORT $LN3@DrawBitLin@2
; Line 254
	mov	eax, DWORD PTR _Index$111377[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@DrawBitLin@2
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _Index$111377[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN3@DrawBitLin@2:
; Line 256
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 257
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN5@DrawBitLin@2
; Line 258
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 259
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN5@DrawBitLin@2:
; Line 261
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN6@DrawBitLin@2
$LN31@DrawBitLin@2:
; Line 265
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine2BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine4BPP
_TEXT	SEGMENT
tv142 = -340						; size = 4
tv87 = -340						; size = 4
tv68 = -340						; size = 4
_Index$111437 = -140					; size = 4
_Shift$111436 = -128					; size = 4
_PixelIndex$111429 = -116				; size = 4
_Index$111427 = -104					; size = 4
_Shift$111426 = -92					; size = 4
_Index$111418 = -80					; size = 4
_Shift$111417 = -68					; size = 4
_PixelIndex$111410 = -56				; size = 4
_Index$111409 = -44					; size = 4
_Shift$111408 = -32					; size = 4
_CurrentPixel$ = -20					; size = 4
_Pixels$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xSize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine4BPP PROC					; COMDAT
; Line 271
	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 272
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixels$[ebp], ecx
; Line 273
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _CurrentPixel$[ebp], eax
; Line 274
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 275
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv68[ebp], eax
	je	SHORT $LN28@DrawBitLin@3
	cmp	DWORD PTR tv68[ebp], 2
	je	$LN15@DrawBitLin@3
	jmp	$LN31@DrawBitLin@3
$LN28@DrawBitLin@3:
; Line 277
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN20@DrawBitLin@3
$LN26@DrawBitLin@3:
; Line 279
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$111408[ebp], eax
; Line 280
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$111408[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$111408[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$111409[ebp], eax
; Line 281
	mov	eax, DWORD PTR _Index$111409[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$111410[ebp], edx
; Line 282
	mov	eax, DWORD PTR _PixelIndex$111410[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN23@DrawBitLin@3
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv87[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _PixelIndex$111410[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR tv87[ebp]
	push	eax
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN23@DrawBitLin@3:
; Line 283
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN25@DrawBitLin@3
; Line 284
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 285
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN25@DrawBitLin@3:
; Line 287
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN26@DrawBitLin@3
; Line 288
	jmp	$LN21@DrawBitLin@3
$LN20@DrawBitLin@3:
; Line 290
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$111417[ebp], eax
; Line 291
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$111417[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$111417[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$111418[ebp], eax
; Line 292
	mov	eax, DWORD PTR _Index$111418[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@DrawBitLin@3
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv142[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _Index$111418[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR tv142[ebp]
	push	eax
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN17@DrawBitLin@3:
; Line 293
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN19@DrawBitLin@3
; Line 294
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 295
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN19@DrawBitLin@3:
; Line 297
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN20@DrawBitLin@3
$LN21@DrawBitLin@3:
; Line 299
	jmp	$LN31@DrawBitLin@3
$LN15@DrawBitLin@3:
; Line 301
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN6@DrawBitLin@3
$LN13@DrawBitLin@3:
; Line 303
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$111426[ebp], eax
; Line 304
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$111426[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$111426[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$111427[ebp], eax
; Line 305
	cmp	DWORD PTR _Index$111427[ebp], 0
	je	SHORT $LN10@DrawBitLin@3
; Line 306
	mov	eax, DWORD PTR _Index$111427[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$111429[ebp], edx
; Line 307
	mov	eax, DWORD PTR _PixelIndex$111429[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@DrawBitLin@3
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _PixelIndex$111429[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN10@DrawBitLin@3:
; Line 309
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 310
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN12@DrawBitLin@3
; Line 311
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 312
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN12@DrawBitLin@3:
; Line 314
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN13@DrawBitLin@3
; Line 315
	jmp	$LN31@DrawBitLin@3
$LN6@DrawBitLin@3:
; Line 317
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$111436[ebp], eax
; Line 318
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$111436[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$111436[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$111437[ebp], eax
; Line 319
	cmp	DWORD PTR _Index$111437[ebp], 0
	je	SHORT $LN3@DrawBitLin@3
; Line 320
	mov	eax, DWORD PTR _Index$111437[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@DrawBitLin@3
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _Index$111437[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN3@DrawBitLin@3:
; Line 322
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 323
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN5@DrawBitLin@3
; Line 324
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 325
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN5@DrawBitLin@3:
; Line 327
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	jne	$LN6@DrawBitLin@3
$LN31@DrawBitLin@3:
; Line 331
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine4BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine8BPP
_TEXT	SEGMENT
_pixel$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xSize$ = 24						; size = 4
_pTrans$ = 28						; size = 4
__DrawBitLine8BPP PROC					; COMDAT
; Line 337
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 339
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 2
	jne	$LN24@DrawBitLin@4
; Line 340
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	SHORT $LN23@DrawBitLin@4
	jmp	SHORT $LN22@DrawBitLin@4
$LN21@DrawBitLin@4:
; Line 341
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN22@DrawBitLin@4:
	cmp	DWORD PTR _xSize$[ebp], 0
	jle	SHORT $LN20@DrawBitLin@4
; Line 342
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _pixel$[ebp], ecx
; Line 343
	mov	eax, DWORD PTR _pixel$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@DrawBitLin@4
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _pixel$[ebp]
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN19@DrawBitLin@4:
; Line 344
	jmp	SHORT $LN21@DrawBitLin@4
$LN20@DrawBitLin@4:
; Line 345
	jmp	SHORT $LN18@DrawBitLin@4
$LN23@DrawBitLin@4:
; Line 346
	jmp	SHORT $LN17@DrawBitLin@4
$LN16@DrawBitLin@4:
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN17@DrawBitLin@4:
	cmp	DWORD PTR _xSize$[ebp], 0
	jle	SHORT $LN18@DrawBitLin@4
; Line 347
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@DrawBitLin@4
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN14@DrawBitLin@4:
; Line 348
	jmp	SHORT $LN16@DrawBitLin@4
$LN18@DrawBitLin@4:
; Line 350
	jmp	$LN25@DrawBitLin@4
$LN24@DrawBitLin@4:
; Line 351
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	SHORT $LN12@DrawBitLin@4
	jmp	SHORT $LN11@DrawBitLin@4
$LN10@DrawBitLin@4:
; Line 352
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN11@DrawBitLin@4:
	cmp	DWORD PTR _xSize$[ebp], 0
	jle	SHORT $LN9@DrawBitLin@4
; Line 353
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _pixel$[ebp], ecx
; Line 354
	cmp	DWORD PTR _pixel$[ebp], 0
	je	SHORT $LN8@DrawBitLin@4
; Line 355
	mov	eax, DWORD PTR _pixel$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@DrawBitLin@4
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _pixel$[ebp]
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN8@DrawBitLin@4:
; Line 357
	jmp	SHORT $LN10@DrawBitLin@4
$LN9@DrawBitLin@4:
; Line 358
	jmp	SHORT $LN25@DrawBitLin@4
$LN12@DrawBitLin@4:
; Line 359
	jmp	SHORT $LN5@DrawBitLin@4
$LN4@DrawBitLin@4:
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN5@DrawBitLin@4:
	cmp	DWORD PTR _xSize$[ebp], 0
	jle	SHORT $LN25@DrawBitLin@4
; Line 360
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _pixel$[ebp], ecx
; Line 361
	cmp	DWORD PTR _pixel$[ebp], 0
	je	SHORT $LN2@DrawBitLin@4
; Line 362
	mov	eax, DWORD PTR _pixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@DrawBitLin@4
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _pixel$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN2@DrawBitLin@4:
; Line 364
	jmp	SHORT $LN4@DrawBitLin@4
$LN25@DrawBitLin@4:
; Line 367
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine8BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine16BPP
_TEXT	SEGMENT
_pixel$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xSize$ = 24						; size = 4
__DrawBitLine16BPP PROC					; COMDAT
; Line 373
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 375
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 2
	jne	SHORT $LN11@DrawBitLin@5
	jmp	SHORT $LN10@DrawBitLin@5
$LN9@DrawBitLin@5:
; Line 376
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
$LN10@DrawBitLin@5:
	cmp	DWORD PTR _xSize$[ebp], 0
	jle	SHORT $LN8@DrawBitLin@5
; Line 377
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@DrawBitLin@5
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN7@DrawBitLin@5:
; Line 378
	jmp	SHORT $LN9@DrawBitLin@5
$LN8@DrawBitLin@5:
; Line 379
	jmp	SHORT $LN12@DrawBitLin@5
$LN11@DrawBitLin@5:
; Line 380
	jmp	SHORT $LN5@DrawBitLin@5
$LN4@DrawBitLin@5:
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
$LN5@DrawBitLin@5:
	cmp	DWORD PTR _xSize$[ebp], 0
	jle	SHORT $LN12@DrawBitLin@5
; Line 381
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _pixel$[ebp], ecx
; Line 382
	cmp	DWORD PTR _pixel$[ebp], 0
	je	SHORT $LN2@DrawBitLin@5
; Line 383
	mov	eax, DWORD PTR _pixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@DrawBitLin@5
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _pixel$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN2@DrawBitLin@5:
; Line 385
	jmp	SHORT $LN4@DrawBitLin@5
$LN12@DrawBitLin@5:
; Line 387
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine16BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine32BPP
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xSize$ = 24						; size = 4
__DrawBitLine32BPP PROC					; COMDAT
; Line 393
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 394
	jmp	SHORT $LN4@DrawBitLin@6
$LN3@DrawBitLin@6:
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xSize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
$LN4@DrawBitLin@6:
	cmp	DWORD PTR _xSize$[ebp], 0
	jle	SHORT $LN5@DrawBitLin@6
; Line 395
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__CheckBound
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@DrawBitLin@6
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
$LN1@DrawBitLin@6:
; Line 396
	jmp	SHORT $LN3@DrawBitLin@6
$LN5@DrawBitLin@6:
; Line 397
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine32BPP ENDP
_TEXT	ENDS
EXTRN	_LCDSIM_SetOrg:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __SetOrg
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__SetOrg PROC						; COMDAT
; Line 626
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 627
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_LCDSIM_SetOrg
	add	esp, 12					; 0000000cH
; Line 628
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetOrg ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetRect
_TEXT	SEGMENT
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_pRect$ = 12						; size = 4
__GetRect PROC						; COMDAT
; Line 675
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 678
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 679
	xor	eax, eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [ecx], ax
; Line 680
	xor	eax, eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 681
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [edx+4], cx
; Line 682
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [edx+6], cx
; Line 683
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevFunc
_TEXT	SEGMENT
tv64 = -196						; size = 4
_ppDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevFunc PROC					; COMDAT
; Line 689
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 690
	mov	eax, DWORD PTR _ppDevice$[ebp]
	mov	DWORD PTR _ppDevice$[ebp], eax
; Line 691
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 14			; 0000000eH
	ja	SHORT $LN8@GetDevFunc
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN12@GetDevFunc[edx]
	jmp	DWORD PTR $LN13@GetDevFunc[eax*4]
$LN7@GetDevFunc:
; Line 693
	mov	eax, OFFSET __SetPos
	jmp	SHORT $LN10@GetDevFunc
$LN6@GetDevFunc:
; Line 695
	mov	eax, OFFSET __GetPos
	jmp	SHORT $LN10@GetDevFunc
$LN5@GetDevFunc:
; Line 697
	mov	eax, OFFSET __SetVis
	jmp	SHORT $LN10@GetDevFunc
$LN4@GetDevFunc:
; Line 699
	mov	eax, OFFSET __SetAlpha
	jmp	SHORT $LN10@GetDevFunc
$LN3@GetDevFunc:
; Line 701
	mov	eax, OFFSET __SetVSize
	jmp	SHORT $LN10@GetDevFunc
$LN2@GetDevFunc:
; Line 703
	mov	eax, OFFSET __SetSize
	jmp	SHORT $LN10@GetDevFunc
$LN1@GetDevFunc:
; Line 705
	mov	eax, OFFSET __SetLUTEntry
	jmp	SHORT $LN10@GetDevFunc
$LN8@GetDevFunc:
; Line 707
	xor	eax, eax
$LN10@GetDevFunc:
; Line 708
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@GetDevFunc:
	DD	$LN4@GetDevFunc
	DD	$LN7@GetDevFunc
	DD	$LN6@GetDevFunc
	DD	$LN5@GetDevFunc
	DD	$LN3@GetDevFunc
	DD	$LN2@GetDevFunc
	DD	$LN1@GetDevFunc
	DD	$LN8@GetDevFunc
$LN12@GetDevFunc:
	DB	0
	DB	1
	DB	2
	DB	7
	DB	3
	DB	7
	DB	7
	DB	7
	DB	4
	DB	5
	DB	7
	DB	7
	DB	7
	DB	7
	DB	6
__GetDevFunc ENDP
_TEXT	ENDS
EXTRN	_LCDSIM_SetLayerPos:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __SetPos
_TEXT	SEGMENT
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_xPos$ = 12						; size = 4
_yPos$ = 16						; size = 4
__SetPos PROC						; COMDAT
; Line 436
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 439
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__InitOnce
	add	esp, 4
; Line 440
	mov	eax, DWORD PTR _pDevice$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@SetPos
; Line 441
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 442
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _xPos$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 443
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _yPos$[ebp]
	mov	DWORD PTR [eax+28], ecx
$LN1@SetPos:
; Line 445
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _yPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _xPos$[ebp]
	push	eax
	call	_LCDSIM_SetLayerPos
	add	esp, 12					; 0000000cH
; Line 446
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetPos ENDP
_TEXT	ENDS
EXTRN	_LCD__GetBPP:PROC
EXTRN	_memset:PROC
EXTRN	_GUI_ALLOC_GetFixedBlock:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __InitOnce
_TEXT	SEGMENT
_BitsPerPixel$ = -32					; size = 4
_IndexMask$ = -20					; size = 4
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
__InitOnce PROC						; COMDAT
; Line 409
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 414
	mov	eax, DWORD PTR _pDevice$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN3@InitOnce
; Line 415
	push	1068					; 0000042cH
	call	_GUI_ALLOC_GetFixedBlock
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 416
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 417
	push	1068					; 0000042cH
	push	0
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 418
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$[ebp], eax
; Line 419
	mov	eax, DWORD PTR _IndexMask$[ebp]
	push	eax
	call	_LCD__GetBPP
	add	esp, 4
	mov	DWORD PTR _BitsPerPixel$[ebp], eax
; Line 420
	cmp	DWORD PTR _BitsPerPixel$[ebp], 24	; 00000018H
	jge	SHORT $LN2@InitOnce
; Line 421
	mov	eax, 1
	mov	ecx, DWORD PTR _BitsPerPixel$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 422
	jmp	SHORT $LN3@InitOnce
$LN2@InitOnce:
; Line 423
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+40], 0
$LN3@InitOnce:
; Line 426
	mov	eax, DWORD PTR _pDevice$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+8], 0
	sete	cl
	mov	eax, ecx
; Line 427
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__InitOnce ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetPos
_TEXT	SEGMENT
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_pxPos$ = 12						; size = 4
_pyPos$ = 16						; size = 4
__GetPos PROC						; COMDAT
; Line 452
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 455
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__InitOnce
	add	esp, 4
; Line 456
	mov	eax, DWORD PTR _pDevice$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@GetPos
; Line 457
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 458
	mov	eax, DWORD PTR _pxPos$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax], edx
; Line 459
	mov	eax, DWORD PTR _pyPos$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax], edx
$LN2@GetPos:
; Line 461
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetPos ENDP
_TEXT	ENDS
EXTRN	_LCDSIM_SetLayerVis:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __SetVis
_TEXT	SEGMENT
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_OnOff$ = 12						; size = 4
__SetVis PROC						; COMDAT
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 473
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__InitOnce
	add	esp, 4
; Line 474
	mov	eax, DWORD PTR _pDevice$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@SetVis
; Line 475
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 476
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _OnOff$[ebp]
	mov	DWORD PTR [eax+36], ecx
$LN1@SetVis:
; Line 478
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _OnOff$[ebp]
	push	edx
	call	_LCDSIM_SetLayerVis
	add	esp, 8
; Line 479
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetVis ENDP
_TEXT	ENDS
EXTRN	_LCDSIM_SetAlpha:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __SetAlpha
_TEXT	SEGMENT
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_Alpha$ = 12						; size = 4
__SetAlpha PROC						; COMDAT
; Line 488
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 491
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__InitOnce
	add	esp, 4
; Line 492
	mov	eax, DWORD PTR _pDevice$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@SetAlpha
; Line 493
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 494
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _Alpha$[ebp]
	mov	DWORD PTR [eax+32], ecx
$LN1@SetAlpha:
; Line 496
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _Alpha$[ebp]
	push	edx
	call	_LCDSIM_SetAlpha
	add	esp, 8
; Line 497
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetAlpha ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetVSize
_TEXT	SEGMENT
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_xSize$ = 12						; size = 4
_ySize$ = 16						; size = 4
__SetVSize PROC						; COMDAT
; Line 503
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 506
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__InitOnce
	add	esp, 4
; Line 507
	mov	eax, DWORD PTR _pDevice$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@SetVSize
; Line 508
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 509
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 510
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _ySize$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 511
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _ySize$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN2@SetVSize:
; Line 513
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetVSize ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetSize
_TEXT	SEGMENT
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_xSize$ = 12						; size = 4
_ySize$ = 16						; size = 4
__SetSize PROC						; COMDAT
; Line 519
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 522
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__InitOnce
	add	esp, 4
; Line 523
	mov	eax, DWORD PTR _pDevice$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@SetSize
; Line 524
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 525
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@SetSize
; Line 526
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _ySize$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN1@SetSize:
; Line 528
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 529
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _ySize$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@SetSize:
; Line 531
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetSize ENDP
_TEXT	ENDS
EXTRN	_LCDSIM_SetLUTEntry:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __SetLUTEntry
_TEXT	SEGMENT
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_Pos$ = 12						; size = 1
_Color$ = 16						; size = 4
__SetLUTEntry PROC					; COMDAT
; Line 644
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 647
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__InitOnce
	add	esp, 4
; Line 648
	mov	eax, DWORD PTR _pDevice$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@SetLUTEntr
; Line 649
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 650
	movzx	eax, BYTE PTR _Pos$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [ecx+40], eax
	ja	SHORT $LN2@SetLUTEntr
; Line 651
	movzx	eax, BYTE PTR _Pos$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [ecx+40], eax
$LN2@SetLUTEntr:
; Line 653
	movzx	eax, BYTE PTR _Pos$[ebp]
	cmp	eax, 256				; 00000100H
	jae	SHORT $LN3@SetLUTEntr
; Line 654
	movzx	eax, BYTE PTR _Pos$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR _Color$[ebp]
	mov	DWORD PTR [ecx+eax*4+44], edx
$LN3@SetLUTEntr:
; Line 657
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _Color$[ebp]
	push	edx
	movzx	eax, BYTE PTR _Pos$[ebp]
	push	eax
	call	_LCDSIM_SetLUTEntry
	add	esp, 12					; 0000000cH
; Line 658
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetLUTEntry ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevProp
_TEXT	SEGMENT
tv65 = -208						; size = 4
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevProp PROC					; COMDAT
; Line 714
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 717
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 718
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 13			; 0000000dH
	ja	SHORT $LN12@GetDevProp
	mov	edx, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN16@GetDevProp[edx*4]
$LN11@GetDevProp:
; Line 720
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [eax+4]
	jmp	SHORT $LN14@GetDevProp
$LN10@GetDevProp:
; Line 722
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN14@GetDevProp
$LN9@GetDevProp:
; Line 724
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [eax+12]
	jmp	SHORT $LN14@GetDevProp
$LN8@GetDevProp:
; Line 726
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN14@GetDevProp
$LN7@GetDevProp:
; Line 728
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_LCD__GetBPP
	add	esp, 4
	jmp	SHORT $LN14@GetDevProp
$LN6@GetDevProp:
; Line 730
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [eax+40]
	jmp	SHORT $LN14@GetDevProp
$LN5@GetDevProp:
; Line 732
	mov	eax, 1
	jmp	SHORT $LN14@GetDevProp
$LN4@GetDevProp:
; Line 734
	mov	eax, 1
	jmp	SHORT $LN14@GetDevProp
$LN3@GetDevProp:
; Line 736
	xor	eax, eax
	jmp	SHORT $LN14@GetDevProp
$LN2@GetDevProp:
; Line 738
	xor	eax, eax
	jmp	SHORT $LN14@GetDevProp
$LN1@GetDevProp:
; Line 740
	xor	eax, eax
	jmp	SHORT $LN14@GetDevProp
$LN12@GetDevProp:
; Line 742
	or	eax, -1
$LN14@GetDevProp:
; Line 743
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@GetDevProp:
	DD	$LN11@GetDevProp
	DD	$LN10@GetDevProp
	DD	$LN9@GetDevProp
	DD	$LN8@GetDevProp
	DD	$LN12@GetDevProp
	DD	$LN12@GetDevProp
	DD	$LN12@GetDevProp
	DD	$LN7@GetDevProp
	DD	$LN6@GetDevProp
	DD	$LN5@GetDevProp
	DD	$LN4@GetDevProp
	DD	$LN3@GetDevProp
	DD	$LN2@GetDevProp
	DD	$LN1@GetDevProp
__GetDevProp ENDP
_TEXT	ENDS
EXTRN	_GUI_MEMDEV_DEVICE_32:BYTE
EXTRN	_GUI_MEMDEV_DEVICE_16:BYTE
EXTRN	_GUI_MEMDEV_DEVICE_8:BYTE
EXTRN	_GUI_MEMDEV_DEVICE_1:BYTE
EXTRN	_LCD__GetBPPDevice:PROC
EXTRN	_GUI_DEVICE__GetpDriver:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetDevData
_TEXT	SEGMENT
tv74 = -208						; size = 4
tv65 = -208						; size = 4
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevData PROC					; COMDAT
; Line 749
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 752
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 753
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 1
	je	SHORT $LN8@GetDevData
	cmp	DWORD PTR tv65[ebp], 2
	je	$LN1@GetDevData
	jmp	$LN9@GetDevData
$LN8@GetDevData:
; Line 756
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_GUI_DEVICE__GetpDriver
	add	esp, 4
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 757
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_LCD__GetBPPDevice
	add	esp, 4
	mov	DWORD PTR tv74[ebp], eax
	mov	eax, DWORD PTR tv74[ebp]
	sub	eax, 1
	mov	DWORD PTR tv74[ebp], eax
	cmp	DWORD PTR tv74[ebp], 31			; 0000001fH
	ja	SHORT $LN6@GetDevData
	mov	ecx, DWORD PTR tv74[ebp]
	movzx	edx, BYTE PTR $LN13@GetDevData[ecx]
	jmp	DWORD PTR $LN14@GetDevData[edx*4]
$LN5@GetDevData:
; Line 759
	mov	eax, OFFSET _GUI_MEMDEV_DEVICE_1
	jmp	SHORT $LN11@GetDevData
$LN4@GetDevData:
; Line 761
	mov	eax, OFFSET _GUI_MEMDEV_DEVICE_8
	jmp	SHORT $LN11@GetDevData
$LN3@GetDevData:
; Line 763
	mov	eax, OFFSET _GUI_MEMDEV_DEVICE_16
	jmp	SHORT $LN11@GetDevData
$LN2@GetDevData:
; Line 765
	mov	eax, OFFSET _GUI_MEMDEV_DEVICE_32
	jmp	SHORT $LN11@GetDevData
$LN6@GetDevData:
; Line 767
	xor	eax, eax
	jmp	SHORT $LN11@GetDevData
$LN1@GetDevData:
; Line 770
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 44					; 0000002cH
	jmp	SHORT $LN11@GetDevData
$LN9@GetDevData:
; Line 772
	xor	eax, eax
$LN11@GetDevData:
; Line 773
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@GetDevData:
	DD	$LN5@GetDevData
	DD	$LN4@GetDevData
	DD	$LN3@GetDevData
	DD	$LN2@GetDevData
	DD	$LN6@GetDevData
$LN13@GetDevData:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
__GetDevData ENDP
_TEXT	ENDS
END
