; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\DUII\DigitalInputSettings.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_RenameLowPaint
PUBLIC	_DisplayRenameLow
PUBLIC	_RenameHighPaint
PUBLIC	_DisplayRenameHigh
PUBLIC	_DigRenameInputPaint
PUBLIC	_DigDisplayRenameInput
PUBLIC	_DigAlarmPaint
PUBLIC	_DigDisplayAlarm
PUBLIC	_DigitalInputSettingsScreenList
_BSS	SEGMENT
_pRenameHigh DD	01H DUP (?)
_pRenameLow DD	01H DUP (?)
_pRenameInput DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_DigitalInputSettingsScreenList DD 00H
	DD	FLAT:_DigDisplayAlarm
	DD	FLAT:_DigAlarmPaint
	DD	01H
	DD	FLAT:_DigDisplayRenameInput
	DD	FLAT:_DigRenameInputPaint
	DD	02H
	DD	FLAT:_DisplayRenameHigh
	DD	FLAT:_RenameHighPaint
	DD	03H
	DD	FLAT:_DisplayRenameLow
	DD	FLAT:_RenameLowPaint
	DD	0ffffffffH
	DD	00H
	DD	00H
$SG19563 DB	'Alarm Indicator', 00H
$SG19564 DB	'Alarm State', 00H
$SG19566 DB	'LED 1 Enabled', 00H
	ORG $+2
$SG19568 DB	'LED 1 Disabled', 00H
	ORG $+1
$SG19570 DB	'LED 2 Enabled', 00H
	ORG $+2
$SG19572 DB	'LED 2 Disabled', 00H
	ORG $+1
$SG19578 DB	'Disabled', 00H
	ORG $+3
$SG19585 DB	'Rename Input %d', 00H
$SG19593 DB	'Rename High %d', 00H
	ORG $+1
$SG19601 DB	'Rename Low %d', 00H
_DATA	ENDS
PUBLIC	_GetDigitalInputSettingsWindowHandle
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
_hDigitalInputSettings DD 01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\duii\duii\digitalinputsettings.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GetDigitalInputSettingsWindowHandle
_TEXT	SEGMENT
_GetDigitalInputSettingsWindowHandle PROC		; COMDAT
; Line 125
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 126
	mov	eax, DWORD PTR _hDigitalInputSettings
; Line 127
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GetDigitalInputSettingsWindowHandle ENDP
_TEXT	ENDS
PUBLIC	_SetDigitalInputSettingsWindowHandle
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _SetDigitalInputSettingsWindowHandle
_TEXT	SEGMENT
_hWin$ = 8						; size = 4
_SetDigitalInputSettingsWindowHandle PROC		; COMDAT
; Line 130
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 131
	mov	eax, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR _hDigitalInputSettings, eax
; Line 132
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SetDigitalInputSettingsWindowHandle ENDP
_TEXT	ENDS
PUBLIC	_DigitalInputSettingsIgnoreNextKeyRelease
PUBLIC	_DigitalInputSettingsCallback
EXTRN	_WM_DefaultProc:PROC
EXTRN	_WM_InvalidateWindow:PROC
EXTRN	_WM_GetParent:PROC
EXTRN	_vehicleData:BYTE
EXTRN	_globalInput:BYTE
EXTRN	_WM_GetId:PROC
EXTRN	_DrawInfo:PROC
EXTRN	_GetScreenType:PROC
EXTRN	_WM_InvalidateRect:PROC
EXTRN	_InfoTimeRect:QWORD
EXTRN	_WM_RestartTimer:PROC
EXTRN	_hScreenTimer:DWORD
EXTRN	_DisplayNewScreenList:PROC
EXTRN	_GetLastScreen:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DigitalInputSettingsCallback
_TEXT	SEGMENT
tv90 = -220						; size = 4
tv89 = -220						; size = 4
tv64 = -220						; size = 4
_Id$ = -20						; size = 4
_NCode$ = -8						; size = 4
_pMsg$ = 8						; size = 4
_DigitalInputSettingsCallback PROC			; COMDAT
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 138
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 28			; 0000001cH
	jg	SHORT $LN29@DigitalInp
	cmp	DWORD PTR tv64[ebp], 27			; 0000001bH
	jge	SHORT $LN24@DigitalInp
	cmp	DWORD PTR tv64[ebp], 1
	je	$LN21@DigitalInp
	cmp	DWORD PTR tv64[ebp], 15			; 0000000fH
	je	$LN20@DigitalInp
	jmp	$LN1@DigitalInp
$LN29@DigitalInp:
	cmp	DWORD PTR tv64[ebp], 38			; 00000026H
	je	$LN18@DigitalInp
	cmp	DWORD PTR tv64[ebp], 275		; 00000113H
	je	SHORT $LN23@DigitalInp
	jmp	$LN1@DigitalInp
$LN24@DigitalInp:
; Line 142
	mov	eax, DWORD PTR _hDigitalInputSettings
	push	eax
	push	10					; 0000000aH
	call	_GetLastScreen
	add	esp, 4
	push	eax
	push	10					; 0000000aH
	call	_DisplayNewScreenList
	add	esp, 12					; 0000000cH
; Line 143
	jmp	$LN27@DigitalInp
$LN23@DigitalInp:
; Line 146
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _hScreenTimer
	jne	SHORT $LN22@DigitalInp
; Line 148
	push	125					; 0000007dH
	mov	eax, DWORD PTR _hScreenTimer
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
; Line 151
	push	OFFSET _InfoTimeRect
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_WM_InvalidateRect
	add	esp, 8
$LN22@DigitalInp:
; Line 153
	jmp	$LN27@DigitalInp
$LN21@DigitalInp:
; Line 156
	call	_DigitalInputSettingsIgnoreNextKeyRelease
; Line 157
	jmp	$LN27@DigitalInp
$LN20@DigitalInp:
; Line 160
	call	_GetScreenType
	cmp	eax, 16					; 00000010H
	jne	SHORT $LN19@DigitalInp
; Line 163
	mov	esi, esp
	mov	eax, DWORD PTR _hDigitalInputSettings
	push	eax
	push	16					; 00000010H
	call	_GetLastScreen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _DigitalInputSettingsScreenList[eax+8]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 167
	call	_DrawInfo
$LN19@DigitalInp:
; Line 169
	jmp	$LN27@DigitalInp
$LN18@DigitalInp:
; Line 172
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_WM_GetId
	add	esp, 4
	mov	DWORD PTR _Id$[ebp], eax
; Line 173
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _NCode$[ebp], ecx
; Line 174
	mov	eax, DWORD PTR _NCode$[ebp]
	mov	DWORD PTR tv89[ebp], eax
	cmp	DWORD PTR tv89[ebp], 2
	je	SHORT $LN15@DigitalInp
	jmp	$LN16@DigitalInp
$LN15@DigitalInp:
; Line 177
	mov	eax, DWORD PTR _Id$[ebp]
	mov	DWORD PTR tv90[ebp], eax
	cmp	DWORD PTR tv90[ebp], 2049		; 00000801H
	je	SHORT $LN12@DigitalInp
	cmp	DWORD PTR tv90[ebp], 2050		; 00000802H
	je	SHORT $LN9@DigitalInp
	cmp	DWORD PTR tv90[ebp], 2051		; 00000803H
	je	SHORT $LN6@DigitalInp
	jmp	$LN13@DigitalInp
$LN12@DigitalInp:
; Line 180
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	movzx	ecx, BYTE PTR _vehicleData[eax+421]
	test	ecx, ecx
	je	SHORT $LN11@DigitalInp
; Line 181
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	mov	BYTE PTR _vehicleData[eax+421], 0
	jmp	SHORT $LN10@DigitalInp
$LN11@DigitalInp:
; Line 182
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	mov	BYTE PTR _vehicleData[eax+421], 1
$LN10@DigitalInp:
; Line 183
	jmp	$LN13@DigitalInp
$LN9@DigitalInp:
; Line 186
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	movzx	ecx, BYTE PTR _vehicleData[eax+422]
	test	ecx, ecx
	je	SHORT $LN8@DigitalInp
; Line 187
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	mov	BYTE PTR _vehicleData[eax+422], 0
	jmp	SHORT $LN7@DigitalInp
$LN8@DigitalInp:
; Line 188
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	mov	BYTE PTR _vehicleData[eax+422], 1
$LN7@DigitalInp:
; Line 189
	jmp	SHORT $LN13@DigitalInp
$LN6@DigitalInp:
; Line 192
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	movsx	ecx, BYTE PTR _vehicleData[eax+420]
	cmp	ecx, -1
	jne	SHORT $LN5@DigitalInp
; Line 193
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	mov	BYTE PTR _vehicleData[eax+420], 0
	jmp	SHORT $LN13@DigitalInp
$LN5@DigitalInp:
; Line 194
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	movsx	ecx, BYTE PTR _vehicleData[eax+420]
	test	ecx, ecx
	jne	SHORT $LN3@DigitalInp
; Line 195
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	mov	BYTE PTR _vehicleData[eax+420], 1
	jmp	SHORT $LN13@DigitalInp
$LN3@DigitalInp:
; Line 196
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	mov	BYTE PTR _vehicleData[eax+420], -1
$LN13@DigitalInp:
; Line 200
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_WM_GetParent
	add	esp, 4
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN16@DigitalInp:
; Line 203
	jmp	SHORT $LN27@DigitalInp
$LN1@DigitalInp:
; Line 206
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN27@DigitalInp:
; Line 208
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DigitalInputSettingsCallback ENDP
_TEXT	ENDS
EXTRN	_BUTTON_SetTextColor:PROC
EXTRN	_BUTTON_SetSkinClassic:PROC
EXTRN	_BUTTON_SetBitmap:PROC
EXTRN	_bmMiniButton:BYTE
EXTRN	_BUTTON_CreateEx:PROC
_BSS	SEGMENT
_hAlarmStateButton DD 01H DUP (?)
_hLED2Button DD	01H DUP (?)
_hLED1Button DD	01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT _DigDisplayAlarm
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_DigDisplayAlarm PROC					; COMDAT
; Line 213
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 214
	push	2049					; 00000801H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	53					; 00000035H
	push	180					; 000000b4H
	push	76					; 0000004cH
	push	25					; 00000019H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hLED1Button, eax
; Line 215
	push	OFFSET _bmMiniButton
	push	0
	mov	eax, DWORD PTR _hLED1Button
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 216
	mov	eax, DWORD PTR _hLED1Button
	push	eax
	call	_BUTTON_SetSkinClassic
	add	esp, 4
; Line 218
	push	2050					; 00000802H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	53					; 00000035H
	push	180					; 000000b4H
	push	138					; 0000008aH
	push	25					; 00000019H
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hLED2Button, eax
; Line 219
	push	OFFSET _bmMiniButton
	push	0
	mov	eax, DWORD PTR _hLED2Button
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 220
	mov	eax, DWORD PTR _hLED2Button
	push	eax
	call	_BUTTON_SetSkinClassic
	add	esp, 4
; Line 222
	push	2051					; 00000803H
	push	0
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	53					; 00000035H
	push	180					; 000000b4H
	push	76					; 0000004cH
	push	284					; 0000011cH
	call	_BUTTON_CreateEx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hAlarmStateButton, eax
; Line 223
	push	OFFSET _bmMiniButton
	push	0
	mov	eax, DWORD PTR _hAlarmStateButton
	push	eax
	call	_BUTTON_SetBitmap
	add	esp, 12					; 0000000cH
; Line 224
	push	16777215				; 00ffffffH
	push	0
	mov	eax, DWORD PTR _hAlarmStateButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 225
	push	16777215				; 00ffffffH
	push	1
	mov	eax, DWORD PTR _hAlarmStateButton
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 226
	mov	eax, DWORD PTR _hAlarmStateButton
	push	eax
	call	_BUTTON_SetSkinClassic
	add	esp, 4
; Line 227
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DigDisplayAlarm ENDP
_TEXT	ENDS
EXTRN	_bmleftarrow:BYTE
EXTRN	_BUTTON_SetText:PROC
EXTRN	_GUI_DispStringHCenterAt:PROC
EXTRN	_bmDigitalAlarm:BYTE
EXTRN	_bmDigital:BYTE
EXTRN	_bm5:BYTE
EXTRN	_bm4:BYTE
EXTRN	_GUI_DrawBitmap:PROC
EXTRN	_bmBackgroundWithPanel:BYTE
EXTRN	_GUI_SetTextMode:PROC
EXTRN	_GUI_SetColor:PROC
EXTRN	_GUI_SetFont:PROC
EXTRN	_GUI_Font24_ASCII:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DigAlarmPaint
_TEXT	SEGMENT
tv171 = -208						; size = 4
tv71 = -208						; size = 4
_pBanner$ = -8						; size = 4
_hParent$ = 8						; size = 4
_DigAlarmPaint PROC					; COMDAT
; Line 230
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 234
	push	OFFSET _GUI_Font24_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 235
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 236
	push	2
	call	_GUI_SetTextMode
	add	esp, 4
; Line 238
	push	0
	push	0
	push	OFFSET _bmBackgroundWithPanel
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 241
	mov	al, BYTE PTR _globalInput
	mov	BYTE PTR tv71[ebp], al
	cmp	BYTE PTR tv71[ebp], 1
	je	SHORT $LN10@DigAlarmPa
; Line 244
	mov	DWORD PTR _pBanner$[ebp], OFFSET _bm4
	jmp	SHORT $LN12@DigAlarmPa
$LN10@DigAlarmPa:
; Line 245
	mov	DWORD PTR _pBanner$[ebp], OFFSET _bm5
$LN12@DigAlarmPa:
; Line 247
	push	0
	push	0
	push	OFFSET _bmDigital
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 248
	push	0
	push	224					; 000000e0H
	mov	eax, DWORD PTR _pBanner$[ebp]
	push	eax
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 249
	push	0
	push	250					; 000000faH
	push	OFFSET _bmDigitalAlarm
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 251
	push	48					; 00000030H
	push	115					; 00000073H
	push	OFFSET $SG19563
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 252
	push	48					; 00000030H
	push	374					; 00000176H
	push	OFFSET $SG19564
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 254
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	movzx	ecx, BYTE PTR _vehicleData[eax+421]
	test	ecx, ecx
	je	SHORT $LN9@DigAlarmPa
; Line 256
	push	255					; 000000ffH
	push	0
	mov	eax, DWORD PTR _hLED1Button
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 257
	push	255					; 000000ffH
	push	1
	mov	eax, DWORD PTR _hLED1Button
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 258
	push	OFFSET $SG19566
	mov	eax, DWORD PTR _hLED1Button
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
; Line 260
	jmp	SHORT $LN8@DigAlarmPa
$LN9@DigAlarmPa:
; Line 262
	push	16777215				; 00ffffffH
	push	0
	mov	eax, DWORD PTR _hLED1Button
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 263
	push	16777215				; 00ffffffH
	push	1
	mov	eax, DWORD PTR _hLED1Button
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 264
	push	OFFSET $SG19568
	mov	eax, DWORD PTR _hLED1Button
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
$LN8@DigAlarmPa:
; Line 267
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	movzx	ecx, BYTE PTR _vehicleData[eax+422]
	test	ecx, ecx
	je	SHORT $LN7@DigAlarmPa
; Line 269
	push	255					; 000000ffH
	push	0
	mov	eax, DWORD PTR _hLED2Button
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 270
	push	255					; 000000ffH
	push	1
	mov	eax, DWORD PTR _hLED2Button
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 271
	push	OFFSET $SG19570
	mov	eax, DWORD PTR _hLED2Button
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
; Line 273
	jmp	SHORT $LN6@DigAlarmPa
$LN7@DigAlarmPa:
; Line 275
	push	16777215				; 00ffffffH
	push	0
	mov	eax, DWORD PTR _hLED2Button
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 276
	push	16777215				; 00ffffffH
	push	1
	mov	eax, DWORD PTR _hLED2Button
	push	eax
	call	_BUTTON_SetTextColor
	add	esp, 12					; 0000000cH
; Line 277
	push	OFFSET $SG19572
	mov	eax, DWORD PTR _hLED2Button
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
$LN6@DigAlarmPa:
; Line 280
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	mov	cl, BYTE PTR _vehicleData[eax+420]
	mov	BYTE PTR tv171[ebp], cl
	cmp	BYTE PTR tv171[ebp], -1
	je	SHORT $LN3@DigAlarmPa
	cmp	BYTE PTR tv171[ebp], 0
	je	SHORT $LN1@DigAlarmPa
	cmp	BYTE PTR tv171[ebp], 1
	je	SHORT $LN2@DigAlarmPa
	jmp	SHORT $LN4@DigAlarmPa
$LN3@DigAlarmPa:
; Line 283
	push	OFFSET $SG19578
	mov	eax, DWORD PTR _hAlarmStateButton
	push	eax
	call	_BUTTON_SetText
	add	esp, 8
; Line 284
	jmp	SHORT $LN4@DigAlarmPa
$LN2@DigAlarmPa:
; Line 286
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	add	eax, OFFSET _vehicleData+393
	push	eax
	mov	ecx, DWORD PTR _hAlarmStateButton
	push	ecx
	call	_BUTTON_SetText
	add	esp, 8
; Line 287
	jmp	SHORT $LN4@DigAlarmPa
$LN1@DigAlarmPa:
; Line 289
	movzx	eax, BYTE PTR _globalInput
	imul	eax, 47					; 0000002fH
	add	eax, OFFSET _vehicleData+406
	push	eax
	mov	ecx, DWORD PTR _hAlarmStateButton
	push	ecx
	call	_BUTTON_SetText
	add	esp, 8
$LN4@DigAlarmPa:
; Line 292
	push	229					; 000000e5H
	push	0
	push	OFFSET _bmleftarrow
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 293
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DigAlarmPaint ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_CreateKeyboard:PROC
EXTRN	_sprintf:PROC
EXTRN	_InputCleanUpKeyboards:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DigDisplayRenameInput
_TEXT	SEGMENT
_scratch$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_hParent$ = 8						; size = 4
_DigDisplayRenameInput PROC				; COMDAT
; Line 297
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 300
	call	_InputCleanUpKeyboards
; Line 303
	movzx	eax, BYTE PTR _globalInput
	add	eax, 4
	push	eax
	push	OFFSET $SG19585
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 304
	push	1
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	1
	push	12					; 0000000cH
	push	0
	push	1
	movzx	ecx, BYTE PTR _globalInput
	imul	ecx, 47					; 0000002fH
	add	ecx, OFFSET _vehicleData+376
	push	ecx
	lea	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_CreateKeyboard
	add	esp, 32					; 00000020H
	mov	DWORD PTR _pRenameInput, eax
; Line 305
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@DigDisplay
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@DigDisplay:
	DD	1
	DD	$LN4@DigDisplay
$LN4@DigDisplay:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN3@DigDisplay
$LN3@DigDisplay:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_DigDisplayRenameInput ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _DigRenameInputPaint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_DigRenameInputPaint PROC				; COMDAT
; Line 309
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 310
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_DigRenameInputPaint ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayRenameHigh
_TEXT	SEGMENT
_scratch$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_hParent$ = 8						; size = 4
_DisplayRenameHigh PROC					; COMDAT
; Line 313
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 316
	call	_InputCleanUpKeyboards
; Line 319
	movzx	eax, BYTE PTR _globalInput
	add	eax, 4
	push	eax
	push	OFFSET $SG19593
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 320
	push	1
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	2
	push	12					; 0000000cH
	push	0
	push	1
	movzx	ecx, BYTE PTR _globalInput
	imul	ecx, 47					; 0000002fH
	add	ecx, OFFSET _vehicleData+393
	push	ecx
	lea	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_CreateKeyboard
	add	esp, 32					; 00000020H
	mov	DWORD PTR _pRenameHigh, eax
; Line 321
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@DisplayRen
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@DisplayRen:
	DD	1
	DD	$LN4@DisplayRen
$LN4@DisplayRen:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN3@DisplayRen
$LN3@DisplayRen:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_DisplayRenameHigh ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _RenameHighPaint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_RenameHighPaint PROC					; COMDAT
; Line 324
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 325
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_RenameHighPaint ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayRenameLow
_TEXT	SEGMENT
_scratch$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_hParent$ = 8						; size = 4
_DisplayRenameLow PROC					; COMDAT
; Line 328
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 331
	call	_InputCleanUpKeyboards
; Line 334
	movzx	eax, BYTE PTR _globalInput
	add	eax, 4
	push	eax
	push	OFFSET $SG19601
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 335
	push	1
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	3
	push	12					; 0000000cH
	push	0
	push	1
	movzx	ecx, BYTE PTR _globalInput
	imul	ecx, 47					; 0000002fH
	add	ecx, OFFSET _vehicleData+406
	push	ecx
	lea	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_CreateKeyboard
	add	esp, 32					; 00000020H
	mov	DWORD PTR _pRenameLow, eax
; Line 336
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@DisplayRen@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@DisplayRen@2:
	DD	1
	DD	$LN4@DisplayRen@2
$LN4@DisplayRen@2:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN3@DisplayRen@2
$LN3@DisplayRen@2:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_DisplayRenameLow ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _RenameLowPaint
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_RenameLowPaint PROC					; COMDAT
; Line 339
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 340
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_RenameLowPaint ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _DigitalInputSettingsIgnoreNextKeyRelease
_TEXT	SEGMENT
_DigitalInputSettingsIgnoreNextKeyRelease PROC		; COMDAT
; Line 344
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 346
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_DigitalInputSettingsIgnoreNextKeyRelease ENDP
_TEXT	ENDS
PUBLIC	_DeleteDigitalKeyboards
EXTRN	_DestroyKeyboard:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DeleteDigitalKeyboards
_TEXT	SEGMENT
_DeleteDigitalKeyboards PROC				; COMDAT
; Line 349
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 350
	cmp	DWORD PTR _pRenameHigh, 0
	je	SHORT $LN3@DeleteDigi
; Line 352
	mov	eax, DWORD PTR _pRenameHigh
	push	eax
	call	_DestroyKeyboard
	add	esp, 4
; Line 353
	mov	DWORD PTR _pRenameHigh, 0
$LN3@DeleteDigi:
; Line 355
	cmp	DWORD PTR _pRenameLow, 0
	je	SHORT $LN2@DeleteDigi
; Line 357
	mov	eax, DWORD PTR _pRenameLow
	push	eax
	call	_DestroyKeyboard
	add	esp, 4
; Line 358
	mov	DWORD PTR _pRenameLow, 0
$LN2@DeleteDigi:
; Line 360
	cmp	DWORD PTR _pRenameInput, 0
	je	SHORT $LN4@DeleteDigi
; Line 362
	mov	eax, DWORD PTR _pRenameInput
	push	eax
	call	_DestroyKeyboard
	add	esp, 4
; Line 363
	mov	DWORD PTR _pRenameInput, 0
$LN4@DeleteDigi:
; Line 365
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DeleteDigitalKeyboards ENDP
_TEXT	ENDS
END
