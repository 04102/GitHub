; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_GetBlankCols.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
__DeviceAPI DD	04H
	DD	FLAT:__DrawBitmap
	DD	00H
	DD	00H
	DD	FLAT:__FillRect
	DD	00H
	DD	FLAT:__SetPixelIndex
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__GetRect
CONST	ENDS
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_GUI_ALLOC_LockH:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_getblankcols.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __DrawBitmap
_TEXT	SEGMENT
tv74 = -232						; size = 4
_pContext$ = -32					; size = 4
_pDest$ = -20						; size = 4
_i$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xsize$ = 20						; size = 4
_ysize$ = 24						; size = 4
_BitsPerPixel$ = 28					; size = 4
_BytesPerLine$ = 32					; size = 4
_pData$ = 36						; size = 4
_Diff$ = 40						; size = 4
_pTrans$ = 44						; size = 4
__DrawBitmap PROC					; COMDAT
; Line 154
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 159
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 160
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x0$[ebp], eax
; Line 161
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	__XY2PTR
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pDest$[ebp], eax
; Line 162
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@DrawBitmap
$LN7@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ysize$[ebp]
	jge	$LN6@DrawBitmap
; Line 163
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR tv74[ebp], eax
	cmp	DWORD PTR tv74[ebp], 1
	je	SHORT $LN3@DrawBitmap
	cmp	DWORD PTR tv74[ebp], 2
	je	SHORT $LN2@DrawBitmap
	cmp	DWORD PTR tv74[ebp], 4
	je	SHORT $LN1@DrawBitmap
	jmp	SHORT $LN4@DrawBitmap
$LN3@DrawBitmap:
; Line 165
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTrans$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _Diff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	call	__DrawBitLine1BPP
	add	esp, 20					; 00000014H
; Line 166
	jmp	SHORT $LN4@DrawBitmap
$LN2@DrawBitmap:
; Line 168
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTrans$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _Diff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	call	__DrawBitLine2BPP
	add	esp, 20					; 00000014H
; Line 169
	jmp	SHORT $LN4@DrawBitmap
$LN1@DrawBitmap:
; Line 171
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTrans$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _Diff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	call	__DrawBitLine4BPP
	add	esp, 20					; 00000014H
$LN4@DrawBitmap:
; Line 174
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 175
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pDest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 176
	jmp	$LN7@DrawBitmap
$LN6@DrawBitmap:
; Line 177
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 178
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitmap ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __XY2PTR
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_pContext$ = 16						; size = 4
__XY2PTR PROC						; COMDAT
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 49
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pContext$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+4]
	mov	ecx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
; Line 50
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__XY2PTR ENDP
_TEXT	ENDS
EXTRN	_LCD_aMirror:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitLine1BPP
_TEXT	SEGMENT
_PixelCnt$ = -20					; size = 4
_Pixels$ = -8						; size = 4
_p$ = 8							; size = 4
_Diff$ = 12						; size = 4
_xsize$ = 16						; size = 4
_pTrans$ = 20						; size = 4
_pDest$ = 24						; size = 4
__DrawBitLine1BPP PROC					; COMDAT
; Line 58
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 61
	mov	eax, 8
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _PixelCnt$[ebp], eax
; Line 62
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _LCD_aMirror[ecx]
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	edx, cl
	mov	DWORD PTR _Pixels$[ebp], edx
$LN8@DrawBitLin:
; Line 68
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jbe	SHORT $LN5@DrawBitLin
; Line 69
	mov	eax, DWORD PTR _xsize$[ebp]
	mov	DWORD PTR _PixelCnt$[ebp], eax
$LN5@DrawBitLin:
; Line 71
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, DWORD PTR _PixelCnt$[ebp]
	mov	DWORD PTR _xsize$[ebp], eax
$LN4@DrawBitLin:
; Line 76
	mov	eax, DWORD PTR _Pixels$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR _pDest$[ebp]
	add	ecx, 4
	mov	DWORD PTR _pDest$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _Pixels$[ebp]
	shr	eax, 1
	mov	DWORD PTR _Pixels$[ebp], eax
; Line 78
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _PixelCnt$[ebp], eax
	jne	SHORT $LN4@DrawBitLin
; Line 82
	cmp	DWORD PTR _xsize$[ebp], 0
	jne	SHORT $LN1@DrawBitLin
; Line 83
	jmp	SHORT $LN9@DrawBitLin
$LN1@DrawBitLin:
; Line 85
	mov	DWORD PTR _PixelCnt$[ebp], 8
; Line 86
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _LCD_aMirror[edx]
	mov	DWORD PTR _Pixels$[ebp], eax
; Line 87
	mov	eax, 1
	test	eax, eax
	jne	SHORT $LN8@DrawBitLin
$LN9@DrawBitLin:
; Line 88
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine1BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine2BPP
_TEXT	SEGMENT
_PixelCnt$ = -17					; size = 1
_pixels$ = -5						; size = 1
_p$ = 8							; size = 4
_Diff$ = 12						; size = 4
_xsize$ = 16						; size = 4
_pTrans$ = 20						; size = 4
_pDest$ = 24						; size = 4
__DrawBitLine2BPP PROC					; COMDAT
; Line 96
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 99
	mov	eax, 4
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
; Line 100
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _Diff$[ebp]
	shl	ecx, 1
	shl	edx, cl
	mov	BYTE PTR _pixels$[ebp], dl
$LN8@DrawBitLin@2:
; Line 102
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jbe	SHORT $LN5@DrawBitLin@2
; Line 103
	mov	al, BYTE PTR _xsize$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
$LN5@DrawBitLin@2:
; Line 105
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	mov	ecx, DWORD PTR _xsize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _xsize$[ebp], ecx
$LN4@DrawBitLin@2:
; Line 107
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 6
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR _pDest$[ebp]
	add	ecx, 4
	mov	DWORD PTR _pDest$[ebp], ecx
; Line 108
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 2
	mov	BYTE PTR _pixels$[ebp], al
; Line 109
	mov	al, BYTE PTR _PixelCnt$[ebp]
	sub	al, 1
	mov	BYTE PTR _PixelCnt$[ebp], al
	movzx	ecx, BYTE PTR _PixelCnt$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@DrawBitLin@2
; Line 110
	cmp	DWORD PTR _xsize$[ebp], 0
	jne	SHORT $LN1@DrawBitLin@2
; Line 111
	jmp	SHORT $LN9@DrawBitLin@2
$LN1@DrawBitLin@2:
; Line 113
	mov	BYTE PTR _PixelCnt$[ebp], 4
; Line 114
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 115
	cmp	DWORD PTR _xsize$[ebp], 0
	jne	SHORT $LN8@DrawBitLin@2
$LN9@DrawBitLin@2:
; Line 116
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine2BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine4BPP
_TEXT	SEGMENT
_PixelCnt$ = -17					; size = 1
_pixels$ = -5						; size = 1
_p$ = 8							; size = 4
_Diff$ = 12						; size = 4
_xsize$ = 16						; size = 4
_pTrans$ = 20						; size = 4
_pDest$ = 24						; size = 4
__DrawBitLine4BPP PROC					; COMDAT
; Line 124
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 127
	mov	eax, 2
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
; Line 128
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _Diff$[ebp]
	shl	ecx, 2
	shl	edx, cl
	mov	BYTE PTR _pixels$[ebp], dl
$LN8@DrawBitLin@3:
; Line 130
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jbe	SHORT $LN5@DrawBitLin@3
; Line 131
	mov	al, BYTE PTR _xsize$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
$LN5@DrawBitLin@3:
; Line 133
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	mov	ecx, DWORD PTR _xsize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _xsize$[ebp], ecx
$LN4@DrawBitLin@3:
; Line 135
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 4
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR _pDest$[ebp]
	add	ecx, 4
	mov	DWORD PTR _pDest$[ebp], ecx
; Line 136
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 4
	mov	BYTE PTR _pixels$[ebp], al
; Line 137
	mov	al, BYTE PTR _PixelCnt$[ebp]
	sub	al, 1
	mov	BYTE PTR _PixelCnt$[ebp], al
	movzx	ecx, BYTE PTR _PixelCnt$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@DrawBitLin@3
; Line 138
	cmp	DWORD PTR _xsize$[ebp], 0
	jne	SHORT $LN1@DrawBitLin@3
; Line 139
	jmp	SHORT $LN9@DrawBitLin@3
$LN1@DrawBitLin@3:
; Line 141
	mov	BYTE PTR _PixelCnt$[ebp], 2
; Line 142
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 143
	cmp	DWORD PTR _xsize$[ebp], 0
	jne	SHORT $LN8@DrawBitLin@3
$LN9@DrawBitLin@3:
; Line 144
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine4BPP ENDP
_TEXT	ENDS
EXTRN	_LCD_pColorIndex:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __FillRect
_TEXT	SEGMENT
_pContext$ = -32					; size = 4
_pDest$ = -20						; size = 4
_i$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
__FillRect PROC						; COMDAT
; Line 184
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 189
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
$LN6@FillRect:
; Line 191
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	__XY2PTR
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pDest$[ebp], eax
; Line 192
	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _x0$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@FillRect
$LN2@FillRect:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@FillRect:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN5@FillRect
; Line 193
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	ecx, DWORD PTR _LCD_pColorIndex
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDest$[ebp], eax
; Line 194
	jmp	SHORT $LN2@FillRect
$LN5@FillRect:
; Line 195
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
	mov	ecx, DWORD PTR _y0$[ebp]
	cmp	ecx, DWORD PTR _y1$[ebp]
	jle	SHORT $LN6@FillRect
; Line 196
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 197
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FillRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetRect
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_pRect$ = 12						; size = 4
__GetRect PROC						; COMDAT
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 204
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 205
	mov	eax, -4095				; fffff001H
	mov	ecx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	edx, -4095				; fffff001H
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [eax], dx
; Line 206
	mov	eax, 4095				; 00000fffH
	mov	ecx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [ecx+6], ax
	mov	edx, 4095				; 00000fffH
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [eax+4], dx
; Line 207
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetPixelIndex
_TEXT	SEGMENT
_pContext$ = -20					; size = 4
_pDest$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_Index$ = 20						; size = 4
__SetPixelIndex PROC					; COMDAT
; Line 213
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 217
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 218
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__XY2PTR
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pDest$[ebp], eax
; Line 219
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	ecx, DWORD PTR _Index$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 220
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 221
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetPixelIndex ENDP
_TEXT	ENDS
PUBLIC	_GUI_GetLeadingBlankCols
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_GetLeadingBlankCols
_TEXT	SEGMENT
_c$ = 8							; size = 2
_GUI_GetLeadingBlankCols PROC				; COMDAT
; Line 429
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 430
	push	0
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	call	__GetBlanks
	add	esp, 8
; Line 431
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_GetLeadingBlankCols ENDP
_TEXT	ENDS
EXTRN	_GUI_GetBkColorIndex:PROC
EXTRN	_GUI_DispCharAt:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	_GUI_GetFontSizeY:PROC
EXTRN	_GUI_GetCharDistX:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetBlanks
_TEXT	SEGMENT
_pContext$ = -140					; size = 4
_pDataOld$ = -128					; size = 4
_pData$ = -116						; size = 4
_BkColorIndex$ = -104					; size = 4
_DispPosY$ = -92					; size = 4
_DispPosX$ = -80					; size = 4
_r$ = -68						; size = 4
_j$ = -56						; size = 4
_i$ = -44						; size = 4
_ySize$ = -32						; size = 4
_xSize$ = -20						; size = 4
_pDevice$ = -8						; size = 4
_c$ = 8							; size = 2
_Trailing$ = 12						; size = 4
__GetBlanks PROC					; COMDAT
; Line 334
	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 343
	mov	DWORD PTR _r$[ebp], -1
; Line 347
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	call	_GUI_GetCharDistX
	add	esp, 4
	mov	DWORD PTR _xSize$[ebp], eax
; Line 348
	call	_GUI_GetFontSizeY
	mov	DWORD PTR _ySize$[ebp], eax
; Line 352
	mov	eax, DWORD PTR _ySize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	call	__DeviceCreate
	add	esp, 8
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 353
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	$LN13@GetBlanks
; Line 354
	movsx	eax, WORD PTR _GUI_Context+34
	mov	DWORD PTR _DispPosX$[ebp], eax
; Line 355
	movsx	eax, WORD PTR _GUI_Context+36
	mov	DWORD PTR _DispPosY$[ebp], eax
; Line 356
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 360
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 4
	mov	DWORD PTR _pData$[ebp], eax
; Line 361
	je	$LN12@GetBlanks
; Line 365
	push	0
	push	0
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	call	_GUI_DispCharAt
	add	esp, 12					; 0000000cH
; Line 366
	call	_GUI_GetBkColorIndex
	mov	DWORD PTR _BkColorIndex$[ebp], eax
; Line 367
	cmp	DWORD PTR _Trailing$[ebp], 0
	je	SHORT $LN11@GetBlanks
; Line 368
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4-4]
	mov	DWORD PTR _pData$[ebp], edx
$LN11@GetBlanks:
; Line 370
	mov	DWORD PTR _r$[ebp], -1
; Line 374
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@GetBlanks
$LN9@GetBlanks:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@GetBlanks:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _xSize$[ebp]
	jge	SHORT $LN12@GetBlanks
; Line 375
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pDataOld$[ebp], eax
; Line 379
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@GetBlanks
$LN6@GetBlanks:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@GetBlanks:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN5@GetBlanks
; Line 380
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _BkColorIndex$[ebp]
	je	SHORT $LN4@GetBlanks
; Line 384
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _r$[ebp], eax
; Line 385
	jmp	SHORT $LN5@GetBlanks
$LN4@GetBlanks:
; Line 387
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pData$[ebp], edx
; Line 388
	jmp	SHORT $LN6@GetBlanks
$LN5@GetBlanks:
; Line 389
	cmp	DWORD PTR _r$[ebp], 0
	jl	SHORT $LN3@GetBlanks
; Line 390
	jmp	SHORT $LN12@GetBlanks
$LN3@GetBlanks:
; Line 392
	mov	eax, DWORD PTR _pDataOld$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 393
	cmp	DWORD PTR _Trailing$[ebp], 0
	je	SHORT $LN2@GetBlanks
; Line 394
	mov	eax, DWORD PTR _pData$[ebp]
	sub	eax, 4
	mov	DWORD PTR _pData$[ebp], eax
; Line 395
	jmp	SHORT $LN1@GetBlanks
$LN2@GetBlanks:
; Line 396
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 4
	mov	DWORD PTR _pData$[ebp], eax
$LN1@GetBlanks:
; Line 398
	jmp	SHORT $LN9@GetBlanks
$LN12@GetBlanks:
; Line 400
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DeviceDelete
	add	esp, 4
; Line 401
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 402
	mov	ax, WORD PTR _DispPosX$[ebp]
	mov	WORD PTR _GUI_Context+34, ax
; Line 403
	mov	ax, WORD PTR _DispPosY$[ebp]
	mov	WORD PTR _GUI_Context+36, ax
$LN13@GetBlanks:
; Line 406
	mov	eax, DWORD PTR _r$[ebp]
; Line 407
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetBlanks ENDP
_TEXT	ENDS
EXTRN	_GUI_DEVICE_Delete:PROC
EXTRN	_GUI_ALLOC_AllocZero:PROC
EXTRN	_GUI_DEVICE_CreateAndLink:PROC
EXTRN	_GUI_DEVICE__GetpDriver:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DeviceCreate
_TEXT	SEGMENT
_pColorConvAPI$ = -44					; size = 4
_pDeviceCurrent$ = -32					; size = 4
_pDevice$ = -20						; size = 4
_pContext$ = -8						; size = 4
_xSize$ = 8						; size = 4
_ySize$ = 12						; size = 4
__DeviceCreate PROC					; COMDAT
; Line 268
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 274
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_GUI_DEVICE__GetpDriver
	add	esp, 4
	mov	DWORD PTR _pDeviceCurrent$[ebp], eax
; Line 275
	mov	eax, DWORD PTR _pDeviceCurrent$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pColorConvAPI$[ebp], ecx
; Line 279
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	push	0
	mov	ecx, DWORD PTR _pColorConvAPI$[ebp]
	push	ecx
	push	OFFSET __DeviceAPI
	call	_GUI_DEVICE_CreateAndLink
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 280
	cmp	DWORD PTR _pDevice$[ebp], 0
	je	SHORT $LN3@DeviceCrea
; Line 284
	mov	eax, DWORD PTR _xSize$[ebp]
	shl	eax, 2
	imul	eax, DWORD PTR _ySize$[ebp]
	add	eax, 4
	push	eax
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 286
	mov	eax, DWORD PTR _pDevice$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@DeviceCrea
; Line 287
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 288
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 289
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pContext$[ebp], 0
; Line 290
	jmp	SHORT $LN3@DeviceCrea
$LN2@DeviceCrea:
; Line 291
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	_GUI_DEVICE_Delete
	add	esp, 4
$LN3@DeviceCrea:
; Line 294
	mov	eax, DWORD PTR _pDevice$[ebp]
; Line 295
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DeviceCreate ENDP
_TEXT	ENDS
EXTRN	_GUI_ALLOC_Free:PROC
EXTRN	_GUI_DEVICE_Unlink:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DeviceDelete
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
__DeviceDelete PROC					; COMDAT
; Line 304
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 308
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	_GUI_DEVICE_Unlink
	add	esp, 4
; Line 312
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GUI_ALLOC_Free
	add	esp, 4
; Line 316
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	_GUI_DEVICE_Delete
	add	esp, 4
; Line 317
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DeviceDelete ENDP
_TEXT	ENDS
PUBLIC	_GUI_GetTrailingBlankCols
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_GetTrailingBlankCols
_TEXT	SEGMENT
_c$ = 8							; size = 2
_GUI_GetTrailingBlankCols PROC				; COMDAT
; Line 447
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 448
	push	1
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	call	__GetBlanks
	add	esp, 8
; Line 449
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_GetTrailingBlankCols ENDP
_TEXT	ENDS
END
