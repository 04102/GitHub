; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Widget\EDITDec.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_EDIT_SetDecMode
EXTRN	_WM_InvalidateWindow:PROC
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_EDIT__SetCursorPos:PROC
EXTRN	_EDIT__GetCurrentChar:PROC
EXTRN	_EDIT_LockH:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\widget\editdec.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _EDIT_SetDecMode
_TEXT	SEGMENT
_pObj$ = -8						; size = 4
_hEdit$ = 8						; size = 4
_Value$ = 12						; size = 4
_Min$ = 16						; size = 4
_Max$ = 20						; size = 4
_Shift$ = 24						; size = 4
_Flags$ = 28						; size = 1
_EDIT_SetDecMode PROC					; COMDAT
; Line 348
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 351
	cmp	DWORD PTR _hEdit$[ebp], 0
	je	$LN3@EDIT_SetDe
; Line 352
	mov	eax, DWORD PTR _hEdit$[ebp]
	push	eax
	call	_EDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 353
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+92], OFFSET __AddKeyDec
; Line 354
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+96], OFFSET __UpdateBuffer
; Line 355
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	DWORD PTR [eax+76], ecx
; Line 356
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+80], 0
; Line 357
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Min$[ebp]
	mov	DWORD PTR [eax+64], ecx
; Line 358
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Max$[ebp]
	mov	DWORD PTR [eax+68], ecx
; Line 359
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	cl, BYTE PTR _Shift$[ebp]
	mov	BYTE PTR [eax+72], cl
; Line 360
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	cl, BYTE PTR _Flags$[ebp]
	mov	BYTE PTR [eax+90], cl
; Line 361
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	BYTE PTR [eax+88], 1
; Line 362
	mov	eax, DWORD PTR _hEdit$[ebp]
	push	eax
	call	__UpdateBuffer
	add	esp, 4
; Line 363
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	_EDIT__GetCurrentChar
	add	esp, 4
	movzx	ecx, ax
	cmp	ecx, 46					; 0000002eH
	jne	SHORT $LN1@EDIT_SetDe
; Line 364
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _hEdit$[ebp]
	push	edx
	call	_EDIT__SetCursorPos
	add	esp, 8
$LN1@EDIT_SetDe:
; Line 366
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 367
	mov	eax, DWORD PTR _hEdit$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN3@EDIT_SetDe:
; Line 370
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_EDIT_SetDecMode ENDP
_TEXT	ENDS
EXTRN	_GUI_AddDecShift:PROC
EXTRN	_GUI_AddSign:PROC
EXTRN	_GUI_ALLOC_LockH:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __UpdateBuffer
_TEXT	SEGMENT
_LastIndex$11401 = -68					; size = 4
_i$11400 = -56						; size = 4
_Len$11394 = -44					; size = 4
_Result$11391 = -32					; size = 4
_pObj$ = -20						; size = 4
_s$ = -8						; size = 4
_hObj$ = 8						; size = 4
__UpdateBuffer PROC					; COMDAT
; Line 62
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 65
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_EDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 66
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 67
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+90]
	and	ecx, 1
	je	SHORT $LN15@UpdateBuff
; Line 68
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+76], 0
	jl	SHORT $LN14@UpdateBuff
; Line 69
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	call	_GUI_AddSign
	add	esp, 8
	mov	DWORD PTR _Result$11391[ebp], eax
; Line 70
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	movzx	edx, BYTE PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+60]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _Result$11391[ebp]
	push	edx
	call	_GUI_AddDecShift
	add	esp, 16					; 00000010H
; Line 71
	jmp	SHORT $LN13@UpdateBuff
$LN14@UpdateBuff:
; Line 72
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	movzx	edx, BYTE PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	call	_GUI_AddDecShift
	add	esp, 16					; 00000010H
$LN13@UpdateBuff:
; Line 74
	jmp	SHORT $LN12@UpdateBuff
$LN15@UpdateBuff:
; Line 76
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+60]
	mov	DWORD PTR _Len$11394[ebp], ecx
; Line 77
	cmp	DWORD PTR _Len$11394[ebp], 10		; 0000000aH
	jle	SHORT $LN11@UpdateBuff
; Line 78
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+76], 0
	jl	SHORT $LN11@UpdateBuff
; Line 79
	mov	DWORD PTR _Len$11394[ebp], 10		; 0000000aH
$LN11@UpdateBuff:
; Line 82
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	movzx	edx, BYTE PTR [ecx+72]
	push	edx
	movzx	eax, BYTE PTR _Len$11394[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	call	_GUI_AddDecShift
	add	esp, 16					; 00000010H
$LN12@UpdateBuff:
; Line 84
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _s$[ebp], 0
; Line 85
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+90]
	and	ecx, 2
	je	$LN9@UpdateBuff
; Line 87
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+60]
	sub	ecx, 2
	mov	DWORD PTR _LastIndex$11401[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+72]
	test	ecx, ecx
	je	SHORT $LN8@UpdateBuff
; Line 89
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+72]
	add	ecx, 1
	mov	edx, DWORD PTR _LastIndex$11401[ebp]
	sub	edx, ecx
	mov	DWORD PTR _LastIndex$11401[ebp], edx
$LN8@UpdateBuff:
; Line 91
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 92
	mov	DWORD PTR _i$11400[ebp], 0
	jmp	SHORT $LN7@UpdateBuff
$LN6@UpdateBuff:
	mov	eax, DWORD PTR _i$11400[ebp]
	add	eax, 1
	mov	DWORD PTR _i$11400[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
$LN7@UpdateBuff:
	mov	eax, DWORD PTR _i$11400[ebp]
	cmp	eax, DWORD PTR _LastIndex$11401[ebp]
	jg	SHORT $LN5@UpdateBuff
; Line 93
	cmp	DWORD PTR _i$11400[ebp], 0
	jne	SHORT $LN4@UpdateBuff
; Line 94
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 43					; 0000002bH
	je	SHORT $LN2@UpdateBuff
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN4@UpdateBuff
$LN2@UpdateBuff:
; Line 95
	jmp	SHORT $LN6@UpdateBuff
$LN4@UpdateBuff:
; Line 98
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	je	SHORT $LN1@UpdateBuff
; Line 99
	jmp	SHORT $LN5@UpdateBuff
$LN1@UpdateBuff:
; Line 101
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], 32			; 00000020H
; Line 102
	jmp	SHORT $LN6@UpdateBuff
$LN5@UpdateBuff:
; Line 103
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _s$[ebp], 0
$LN9@UpdateBuff:
; Line 105
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 106
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@UpdateBuff
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@UpdateBuff:
	DD	1
	DD	$LN19@UpdateBuff
$LN19@UpdateBuff:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN18@UpdateBuff
$LN18@UpdateBuff:
	DB	115					; 00000073H
	DB	0
__UpdateBuffer ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __AddKeyDec
_TEXT	SEGMENT
tv67 = -232						; size = 4
_Digit$11530 = -32					; size = 4
_pObj$ = -20						; size = 4
_c$ = -5						; size = 1
_hObj$ = 8						; size = 4
_Key$ = 12						; size = 4
__AddKeyDec PROC					; COMDAT
; Line 248
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 251
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_EDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 252
	cmp	DWORD PTR _pObj$[ebp], 0
	je	$LN23@AddKeyDec
; Line 253
	mov	eax, DWORD PTR _Key$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 29			; 0000001dH
	ja	$LN3@AddKeyDec
	mov	edx, DWORD PTR tv67[ebp]
	movzx	eax, BYTE PTR $LN26@AddKeyDec[edx]
	jmp	DWORD PTR $LN27@AddKeyDec[eax*4]
$LN20@AddKeyDec:
; Line 255
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jne	SHORT $LN19@AddKeyDec
; Line 256
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__MakePositive
	add	esp, 8
; Line 257
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__IncrementCursor
	add	esp, 8
$LN19@AddKeyDec:
; Line 259
	jmp	$LN23@AddKeyDec
$LN18@AddKeyDec:
; Line 261
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jne	SHORT $LN17@AddKeyDec
; Line 262
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__MakeNegative
	add	esp, 8
; Line 263
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__IncrementCursor
	add	esp, 8
$LN17@AddKeyDec:
; Line 265
	jmp	$LN23@AddKeyDec
$LN16@AddKeyDec:
; Line 291
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	_EDIT__GetCurrentChar
	add	esp, 4
	mov	BYTE PTR _c$[ebp], al
; Line 292
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN14@AddKeyDec
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN15@AddKeyDec
$LN14@AddKeyDec:
; Line 293
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__SwapSign
	add	esp, 8
; Line 294
	jmp	SHORT $LN13@AddKeyDec
$LN15@AddKeyDec:
; Line 295
	push	1
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__AddPosition
	add	esp, 12					; 0000000cH
$LN13@AddKeyDec:
; Line 297
	jmp	$LN23@AddKeyDec
$LN12@AddKeyDec:
; Line 299
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	_EDIT__GetCurrentChar
	add	esp, 4
	mov	BYTE PTR _c$[ebp], al
; Line 300
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN10@AddKeyDec
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN11@AddKeyDec
$LN10@AddKeyDec:
; Line 301
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__SwapSign
	add	esp, 8
; Line 302
	jmp	SHORT $LN9@AddKeyDec
$LN11@AddKeyDec:
; Line 303
	push	-1
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__AddPosition
	add	esp, 12					; 0000000cH
$LN9@AddKeyDec:
; Line 305
	jmp	$LN23@AddKeyDec
$LN8@AddKeyDec:
; Line 308
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__IncrementCursor
	add	esp, 8
; Line 309
	jmp	$LN23@AddKeyDec
$LN7@AddKeyDec:
; Line 311
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_EDIT__SetCursorPos
	add	esp, 8
; Line 312
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	_EDIT__GetCurrentChar
	add	esp, 4
	movzx	ecx, ax
	cmp	ecx, 46					; 0000002eH
	jne	SHORT $LN6@AddKeyDec
; Line 313
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jle	SHORT $LN5@AddKeyDec
; Line 314
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_EDIT__SetCursorPos
	add	esp, 8
; Line 315
	jmp	SHORT $LN6@AddKeyDec
$LN5@AddKeyDec:
; Line 316
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_EDIT__SetCursorPos
	add	esp, 8
$LN6@AddKeyDec:
; Line 319
	jmp	SHORT $LN23@AddKeyDec
$LN3@AddKeyDec:
; Line 322
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	_EDIT__GetCurrentChar
	add	esp, 4
	mov	BYTE PTR _c$[ebp], al
; Line 323
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN23@AddKeyDec
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 43					; 0000002bH
	je	SHORT $LN23@AddKeyDec
; Line 324
	mov	eax, DWORD PTR _Key$[ebp]
	push	eax
	call	__DecChar2Int
	add	esp, 4
	mov	DWORD PTR _Digit$11530[ebp], eax
; Line 325
	cmp	DWORD PTR _Digit$11530[ebp], 0
	jl	SHORT $LN23@AddKeyDec
; Line 326
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Digit$11530[ebp]
	push	edx
	call	__EditDec
	add	esp, 12					; 0000000cH
; Line 327
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__IncrementCursor
	add	esp, 8
$LN23@AddKeyDec:
; Line 334
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 335
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__UpdateBuffer
	add	esp, 4
; Line 336
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN27@AddKeyDec:
	DD	$LN7@AddKeyDec
	DD	$LN16@AddKeyDec
	DD	$LN8@AddKeyDec
	DD	$LN12@AddKeyDec
	DD	$LN20@AddKeyDec
	DD	$LN18@AddKeyDec
	DD	$LN3@AddKeyDec
$LN26@AddKeyDec:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	5
__AddKeyDec ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DecChar2Int
_TEXT	SEGMENT
_Char$ = 8						; size = 4
__DecChar2Int PROC					; COMDAT
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 53
	cmp	DWORD PTR _Char$[ebp], 48		; 00000030H
	jl	SHORT $LN1@DecChar2In
	cmp	DWORD PTR _Char$[ebp], 57		; 00000039H
	jg	SHORT $LN1@DecChar2In
; Line 54
	mov	eax, DWORD PTR _Char$[ebp]
	sub	eax, 48					; 00000030H
	jmp	SHORT $LN2@DecChar2In
$LN1@DecChar2In:
; Line 55
	or	eax, -1
$LN2@DecChar2In:
; Line 56
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__DecChar2Int ENDP
_TEXT	ENDS
EXTRN	_EDIT_SetValue:PROC
EXTRN	_GUI_Pow10:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __EditDec
_TEXT	SEGMENT
_Value$11433 = -80					; size = 4
_c$11432 = -65						; size = 1
_Index$11429 = -56					; size = 4
_s$ = -44						; size = 4
_Pos$ = -32						; size = 4
_i$ = -20						; size = 4
_Result$ = -8						; size = 4
_Digit$ = 8						; size = 4
_pObj$ = 12						; size = 4
_hObj$ = 16						; size = 4
__EditDec PROC						; COMDAT
; Line 112
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 113
	mov	DWORD PTR _Result$[ebp], 0
; Line 114
	mov	DWORD PTR _Pos$[ebp], 0
; Line 116
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 117
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@EditDec
$LN8@EditDec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@EditDec:
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+60]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$LN7@EditDec
; Line 118
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+60]
	sub	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _Index$11429[ebp], ecx
; Line 119
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Index$11429[ebp]
	cmp	ecx, DWORD PTR [eax+80]
	jne	SHORT $LN6@EditDec
; Line 120
	mov	eax, DWORD PTR _Pos$[ebp]
	mov	ecx, DWORD PTR _GUI_Pow10[eax*4]
	imul	ecx, DWORD PTR _Digit$[ebp]
	add	ecx, DWORD PTR _Result$[ebp]
	mov	DWORD PTR _Result$[ebp], ecx
	mov	edx, DWORD PTR _Pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _Pos$[ebp], edx
; Line 121
	jmp	SHORT $LN5@EditDec
$LN6@EditDec:
; Line 124
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _Index$11429[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$11432[ebp], cl
; Line 125
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+90]
	and	ecx, 2
	je	SHORT $LN4@EditDec
; Line 126
	movzx	eax, BYTE PTR _c$11432[ebp]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN4@EditDec
; Line 127
	mov	BYTE PTR _c$11432[ebp], 48		; 00000030H
$LN4@EditDec:
; Line 130
	movzx	eax, BYTE PTR _c$11432[ebp]
	push	eax
	call	__DecChar2Int
	add	esp, 4
	mov	DWORD PTR _Value$11433[ebp], eax
; Line 131
	cmp	DWORD PTR _Value$11433[ebp], 0
	jl	SHORT $LN2@EditDec
; Line 132
	mov	eax, DWORD PTR _Pos$[ebp]
	mov	ecx, DWORD PTR _GUI_Pow10[eax*4]
	imul	ecx, DWORD PTR _Value$11433[ebp]
	add	ecx, DWORD PTR _Result$[ebp]
	mov	DWORD PTR _Result$[ebp], ecx
	mov	edx, DWORD PTR _Pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _Pos$[ebp], edx
$LN2@EditDec:
; Line 134
	movzx	eax, BYTE PTR _c$11432[ebp]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN5@EditDec
; Line 135
	mov	eax, DWORD PTR _Result$[ebp]
	imul	eax, -1
	mov	DWORD PTR _Result$[ebp], eax
$LN5@EditDec:
; Line 138
	jmp	$LN8@EditDec
$LN7@EditDec:
; Line 139
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _s$[ebp], 0
; Line 140
	mov	eax, DWORD PTR _Result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_EDIT_SetValue
	add	esp, 8
; Line 141
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__EditDec ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __MakePositive
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
_hObj$ = 12						; size = 4
__MakePositive PROC					; COMDAT
; Line 157
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 158
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+76], 0
	jge	SHORT $LN2@MakePositi
; Line 159
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	imul	ecx, -1
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_EDIT_SetValue
	add	esp, 8
$LN2@MakePositi:
; Line 161
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__MakePositive ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __MakeNegative
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
_hObj$ = 12						; size = 4
__MakeNegative PROC					; COMDAT
; Line 167
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 168
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+76], 0
	jle	SHORT $LN2@MakeNegati
; Line 169
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	imul	ecx, -1
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_EDIT_SetValue
	add	esp, 8
$LN2@MakeNegati:
; Line 171
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__MakeNegative ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SwapSign
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
_hObj$ = 12						; size = 4
__SwapSign PROC						; COMDAT
; Line 177
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 178
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+76], 0
	jle	SHORT $LN2@SwapSign
; Line 179
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__MakeNegative
	add	esp, 8
; Line 180
	jmp	SHORT $LN3@SwapSign
$LN2@SwapSign:
; Line 181
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__MakePositive
	add	esp, 8
$LN3@SwapSign:
; Line 182
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SwapSign ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __IncrementCursor
_TEXT	SEGMENT
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
__IncrementCursor PROC					; COMDAT
; Line 188
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 189
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_EDIT__SetCursorPos
	add	esp, 8
; Line 190
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	_EDIT__GetCurrentChar
	add	esp, 4
	movzx	ecx, ax
	cmp	ecx, 46					; 0000002eH
	jne	SHORT $LN4@IncrementC
; Line 191
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+60]
	sub	ecx, 1
	mov	edx, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [edx+80], ecx
	jge	SHORT $LN2@IncrementC
; Line 192
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_EDIT__SetCursorPos
	add	esp, 8
; Line 193
	jmp	SHORT $LN4@IncrementC
$LN2@IncrementC:
; Line 194
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_EDIT__SetCursorPos
	add	esp, 8
$LN4@IncrementC:
; Line 197
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__IncrementCursor ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __AddPosition
_TEXT	SEGMENT
tv85 = -244						; size = 4
_NewValue$ = -44					; size = 4
_OldValue$ = -32					; size = 4
_v$ = -20						; size = 4
_Pos$ = -8						; size = 4
_pObj$ = 8						; size = 4
_hObj$ = 12						; size = 4
_Sign$ = 16						; size = 4
__AddPosition PROC					; COMDAT
; Line 204
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 208
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _OldValue$[ebp], ecx
; Line 209
	mov	eax, DWORD PTR _Sign$[ebp]
	mov	DWORD PTR _v$[ebp], eax
; Line 210
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+60]
	mov	edx, DWORD PTR _pObj$[ebp]
	sub	ecx, DWORD PTR [edx+80]
	sub	ecx, 1
	mov	DWORD PTR _Pos$[ebp], ecx
; Line 211
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+90]
	test	ecx, ecx
	je	SHORT $LN10@AddPositio
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN10@AddPositio
	cmp	DWORD PTR _OldValue$[ebp], 0
	jne	SHORT $LN10@AddPositio
	cmp	DWORD PTR _Pos$[ebp], 0
	jle	SHORT $LN10@AddPositio
; Line 212
	mov	eax, DWORD PTR _Pos$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Pos$[ebp], eax
$LN10@AddPositio:
; Line 214
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+72]
	test	ecx, ecx
	je	SHORT $LN8@AddPositio
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+72]
	cmp	DWORD PTR _Pos$[ebp], ecx
	jle	SHORT $LN8@AddPositio
; Line 215
	mov	eax, DWORD PTR _Pos$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Pos$[ebp], eax
$LN8@AddPositio:
; Line 217
	mov	eax, DWORD PTR _Pos$[ebp]
	mov	DWORD PTR tv85[ebp], eax
	mov	ecx, DWORD PTR _Pos$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _Pos$[ebp], ecx
	cmp	DWORD PTR tv85[ebp], 0
	je	SHORT $LN7@AddPositio
; Line 218
	mov	eax, DWORD PTR _v$[ebp]
	imul	eax, 10					; 0000000aH
	mov	DWORD PTR _v$[ebp], eax
; Line 219
	jmp	SHORT $LN8@AddPositio
$LN7@AddPositio:
; Line 220
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _NewValue$[ebp], ecx
; Line 221
	cmp	DWORD PTR _Sign$[ebp], 0
	jge	SHORT $LN4@AddPositio
	mov	eax, DWORD PTR _NewValue$[ebp]
	cmp	eax, DWORD PTR _OldValue$[ebp]
	jl	SHORT $LN5@AddPositio
$LN4@AddPositio:
	cmp	DWORD PTR _Sign$[ebp], 0
	jle	SHORT $LN6@AddPositio
	mov	eax, DWORD PTR _NewValue$[ebp]
	cmp	eax, DWORD PTR _OldValue$[ebp]
	jle	SHORT $LN6@AddPositio
$LN5@AddPositio:
; Line 222
	mov	eax, DWORD PTR _NewValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_EDIT_SetValue
	add	esp, 8
$LN6@AddPositio:
; Line 227
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+90]
	test	ecx, ecx
	je	SHORT $LN11@AddPositio
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN11@AddPositio
; Line 228
	cmp	DWORD PTR _OldValue$[ebp], 0
	jne	SHORT $LN2@AddPositio
	cmp	DWORD PTR _NewValue$[ebp], 0
	je	SHORT $LN2@AddPositio
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+60]
	sub	ecx, 1
	mov	edx, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [edx+80], ecx
	jge	SHORT $LN2@AddPositio
; Line 229
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	add	ecx, 1
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [edx+80], ecx
$LN2@AddPositio:
; Line 231
	cmp	DWORD PTR _OldValue$[ebp], 0
	je	SHORT $LN11@AddPositio
	cmp	DWORD PTR _NewValue$[ebp], 0
	jne	SHORT $LN11@AddPositio
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jle	SHORT $LN11@AddPositio
; Line 232
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	sub	ecx, 1
	mov	edx, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [edx+80], ecx
$LN11@AddPositio:
; Line 235
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__AddPosition ENDP
_TEXT	ENDS
END
