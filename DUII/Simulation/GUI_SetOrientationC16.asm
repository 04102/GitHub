; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_SetOrientationC16.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_OrientationAPI_C16
CONST	SEGMENT
_GUI_OrientationAPI_C16 DD FLAT:__DrawBitmap_CX
	DD	FLAT:__DrawHLine_CX
	DD	FLAT:__DrawVLine_CX
	DD	FLAT:__FillRect_CX
	DD	FLAT:__GetPixelIndex_CX
	DD	FLAT:__SetPixelIndex_CX
	DD	FLAT:__XorPixel_CX
	DD	02H
CONST	ENDS
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_setorientationcx.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __DrawBitmap_CX
_TEXT	SEGMENT
tv65 = -280						; size = 4
_pContext$ = -80					; size = 4
_pDataBM$ = -68						; size = 4
_i$ = -56						; size = 4
_y1_phys$ = -44						; size = 4
_x1_phys$ = -32						; size = 4
_y0_phys$ = -20						; size = 4
_x0_phys$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xSize$ = 20						; size = 4
_ySize$ = 24						; size = 4
_BitsPerPixel$ = 28					; size = 4
_BytesPerLine$ = 32					; size = 4
_pData$ = 36						; size = 4
_Diff$ = 40						; size = 4
_pTrans$ = 44						; size = 4
__DrawBitmap_CX PROC					; COMDAT
; Line 389
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 395
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 396
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 31			; 0000001fH
	ja	$LN25@DrawBitmap
	mov	edx, DWORD PTR tv65[ebp]
	movzx	eax, BYTE PTR $LN29@DrawBitmap[edx]
	jmp	DWORD PTR $LN36@DrawBitmap[eax*4]
$LN24@DrawBitmap:
; Line 398
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN23@DrawBitmap
$LN22@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN23@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN21@DrawBitmap
; Line 399
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine1BPP
	add	esp, 28					; 0000001cH
; Line 400
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 401
	jmp	SHORT $LN22@DrawBitmap
$LN21@DrawBitmap:
; Line 402
	jmp	$LN25@DrawBitmap
$LN20@DrawBitmap:
; Line 404
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@DrawBitmap
$LN18@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN19@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN17@DrawBitmap
; Line 405
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine2BPP
	add	esp, 28					; 0000001cH
; Line 406
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 407
	jmp	SHORT $LN18@DrawBitmap
$LN17@DrawBitmap:
; Line 408
	jmp	$LN25@DrawBitmap
$LN16@DrawBitmap:
; Line 410
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@DrawBitmap
$LN14@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN13@DrawBitmap
; Line 411
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine4BPP
	add	esp, 28					; 0000001cH
; Line 412
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 413
	jmp	SHORT $LN14@DrawBitmap
$LN13@DrawBitmap:
; Line 414
	jmp	$LN25@DrawBitmap
$LN12@DrawBitmap:
; Line 416
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@DrawBitmap
$LN10@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN9@DrawBitmap
; Line 417
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__DrawBitLine8BPP
	add	esp, 24					; 00000018H
; Line 418
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 419
	jmp	SHORT $LN10@DrawBitmap
$LN9@DrawBitmap:
; Line 420
	jmp	$LN25@DrawBitmap
$LN8@DrawBitmap:
; Line 422
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@DrawBitmap
$LN6@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN5@DrawBitmap
; Line 423
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__DrawBitLine16BPP
	add	esp, 20					; 00000014H
; Line 424
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 425
	jmp	SHORT $LN6@DrawBitmap
$LN5@DrawBitmap:
; Line 426
	jmp	SHORT $LN25@DrawBitmap
$LN4@DrawBitmap:
; Line 428
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@DrawBitmap
$LN2@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN25@DrawBitmap
; Line 429
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__DrawBitLine32BPP
	add	esp, 20					; 00000014H
; Line 430
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 431
	jmp	SHORT $LN2@DrawBitmap
$LN25@DrawBitmap:
; Line 435
	mov	esi, esp
	lea	eax, DWORD PTR _y0_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x0_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 436
	mov	esi, esp
	lea	eax, DWORD PTR _y1_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x1_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ySize$[ebp]
	mov	eax, DWORD PTR _y0$[ebp]
	lea	ecx, DWORD PTR [eax+edx-1]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	add	edx, DWORD PTR _Diff$[ebp]
	mov	eax, DWORD PTR _xSize$[ebp]
	lea	ecx, DWORD PTR [edx+eax-1]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 437
	lea	eax, DWORD PTR _x1_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x0_phys$[ebp]
	push	ecx
	call	__Sort
	add	esp, 8
; Line 438
	lea	eax, DWORD PTR _y1_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _y0_phys$[ebp]
	push	ecx
	call	__Sort
	add	esp, 8
; Line 439
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _y0_phys$[ebp]
	imul	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR _x0_phys$[ebp]
	imul	ecx, DWORD PTR [edx+28]
	add	eax, ecx
	mov	DWORD PTR _pDataBM$[ebp], eax
; Line 440
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 447
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _pDataBM$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	imul	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR [eax+28]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _y1_phys$[ebp]
	sub	edx, DWORD PTR _y0_phys$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _x1_phys$[ebp]
	sub	eax, DWORD PTR _x0_phys$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _y0_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0_phys$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 448
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN35@DrawBitmap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN35@DrawBitmap:
	DD	4
	DD	$LN34@DrawBitmap
$LN34@DrawBitmap:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN30@DrawBitmap
	DD	-20					; ffffffecH
	DD	4
	DD	$LN31@DrawBitmap
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN32@DrawBitmap
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN33@DrawBitmap
$LN33@DrawBitmap:
	DB	121					; 00000079H
	DB	49					; 00000031H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN32@DrawBitmap:
	DB	120					; 00000078H
	DB	49					; 00000031H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN31@DrawBitmap:
	DB	121					; 00000079H
	DB	48					; 00000030H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN30@DrawBitmap:
	DB	120					; 00000078H
	DB	48					; 00000030H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN36@DrawBitmap:
	DD	$LN24@DrawBitmap
	DD	$LN20@DrawBitmap
	DD	$LN16@DrawBitmap
	DD	$LN12@DrawBitmap
	DD	$LN8@DrawBitmap
	DD	$LN4@DrawBitmap
	DD	$LN25@DrawBitmap
$LN29@DrawBitmap:
	DB	0
	DB	1
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
__DrawBitmap_CX ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Sort
_TEXT	SEGMENT
_temp$ = -8						; size = 4
_p0$ = 8						; size = 4
_p1$ = 12						; size = 4
__Sort	PROC						; COMDAT
; Line 54
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 57
	mov	eax, DWORD PTR _p0$[ebp]
	mov	ecx, DWORD PTR _p1$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jle	SHORT $LN2@Sort
; Line 58
	mov	eax, DWORD PTR _p0$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$[ebp], ecx
; Line 59
	mov	eax, DWORD PTR _p0$[ebp]
	mov	ecx, DWORD PTR _p1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 60
	mov	eax, DWORD PTR _p1$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@Sort:
; Line 62
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__Sort	ENDP
_TEXT	ENDS
EXTRN	_GUI_Context:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitLine1BPP
_TEXT	SEGMENT
tv89 = -304						; size = 4
tv82 = -304						; size = 4
_pContext$ = -104					; size = 4
_y_phys$ = -92						; size = 4
_x_phys$ = -80						; size = 4
_pData$ = -68						; size = 4
_pfGetPixelIndex$ = -56					; size = 4
_Pixel$ = -44						; size = 4
_Index1$ = -32						; size = 4
_Index0$ = -20						; size = 4
_IndexMask$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine1BPP PROC					; COMDAT
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 81
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 82
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Index0$[ebp], ecx
; Line 83
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Index1$[ebp], ecx
; Line 84
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 85
	mov	esi, esp
	lea	eax, DWORD PTR _y_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 86
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _y_phys$[ebp]
	imul	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR _x_phys$[ebp]
	imul	ecx, DWORD PTR [edx+28]
	add	eax, ecx
	mov	DWORD PTR _pData$[ebp], eax
; Line 87
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv82[ebp], eax
	cmp	DWORD PTR tv82[ebp], 3
	ja	$LN20@DrawBitLin
	mov	ecx, DWORD PTR tv82[ebp]
	jmp	DWORD PTR $LN28@DrawBitLin[ecx*4]
$LN16@DrawBitLin:
; Line 90
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	movzx	ecx, dx
	test	ecx, ecx
	je	SHORT $LN22@DrawBitLin
	mov	edx, DWORD PTR _Index1$[ebp]
	mov	DWORD PTR tv89[ebp], edx
	jmp	SHORT $LN23@DrawBitLin
$LN22@DrawBitLin:
	mov	eax, DWORD PTR _Index0$[ebp]
	mov	DWORD PTR tv89[ebp], eax
$LN23@DrawBitLin:
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	dx, WORD PTR tv89[ebp]
	mov	WORD PTR [ecx], dx
; Line 91
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pData$[ebp], eax
; Line 92
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN15@DrawBitLin
; Line 93
	mov	DWORD PTR _Diff$[ebp], 0
; Line 94
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN15@DrawBitLin:
; Line 96
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN16@DrawBitLin
; Line 97
	jmp	$LN20@DrawBitLin
$LN11@DrawBitLin:
; Line 100
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN8@DrawBitLin
; Line 101
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _Index1$[ebp]
	mov	WORD PTR [eax], cx
$LN8@DrawBitLin:
; Line 103
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pData$[ebp], eax
; Line 104
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN10@DrawBitLin
; Line 105
	mov	DWORD PTR _Diff$[ebp], 0
; Line 106
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN10@DrawBitLin:
; Line 108
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN11@DrawBitLin
; Line 109
	jmp	$LN20@DrawBitLin
$LN6@DrawBitLin:
; Line 112
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _pfGetPixelIndex$[ebp], edx
; Line 113
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$[ebp], eax
$LN5@DrawBitLin:
; Line 115
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN2@DrawBitLin
; Line 116
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfGetPixelIndex$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Pixel$[ebp], eax
; Line 117
	mov	eax, DWORD PTR _Pixel$[ebp]
	xor	eax, DWORD PTR _IndexMask$[ebp]
	mov	DWORD PTR _Pixel$[ebp], eax
; Line 118
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _Pixel$[ebp]
	mov	WORD PTR [eax], cx
$LN2@DrawBitLin:
; Line 120
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pData$[ebp], eax
; Line 121
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 122
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN4@DrawBitLin
; Line 123
	mov	DWORD PTR _Diff$[ebp], 0
; Line 124
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN4@DrawBitLin:
; Line 126
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN5@DrawBitLin
$LN20@DrawBitLin:
; Line 129
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@DrawBitLin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN27@DrawBitLin:
	DD	2
	DD	$LN26@DrawBitLin
$LN26@DrawBitLin:
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN24@DrawBitLin
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN25@DrawBitLin
$LN25@DrawBitLin:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN24@DrawBitLin:
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
	npad	2
$LN28@DrawBitLin:
	DD	$LN16@DrawBitLin
	DD	$LN6@DrawBitLin
	DD	$LN11@DrawBitLin
	DD	$LN6@DrawBitLin
__DrawBitLine1BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine2BPP
_TEXT	SEGMENT
tv82 = -304						; size = 4
_pContext$ = -104					; size = 4
_y_phys$ = -92						; size = 4
_x_phys$ = -80						; size = 4
_pData$ = -68						; size = 4
_Index$ = -56						; size = 4
_Shift$ = -44						; size = 4
_CurrentPixel$ = -32					; size = 4
_PixelIndex$ = -20					; size = 4
_Pixels$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine2BPP PROC					; COMDAT
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 142
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 143
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixels$[ebp], ecx
; Line 144
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _CurrentPixel$[ebp], eax
; Line 145
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 146
	mov	esi, esp
	lea	eax, DWORD PTR _y_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 147
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _y_phys$[ebp]
	imul	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR _x_phys$[ebp]
	imul	ecx, DWORD PTR [edx+28]
	add	eax, ecx
	mov	DWORD PTR _pData$[ebp], eax
; Line 148
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv82[ebp], eax
	je	SHORT $LN24@DrawBitLin@2
	cmp	DWORD PTR tv82[ebp], 2
	je	$LN13@DrawBitLin@2
	jmp	$LN27@DrawBitLin@2
$LN24@DrawBitLin@2:
; Line 150
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN17@DrawBitLin@2
$LN22@DrawBitLin@2:
; Line 152
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$[ebp], eax
; Line 153
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 154
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$[ebp], edx
; Line 155
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _PixelIndex$[ebp]
	mov	WORD PTR [eax], cx
; Line 156
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pData$[ebp], eax
; Line 157
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN21@DrawBitLin@2
; Line 158
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 159
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN21@DrawBitLin@2:
; Line 161
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN22@DrawBitLin@2
; Line 162
	jmp	SHORT $LN18@DrawBitLin@2
$LN17@DrawBitLin@2:
; Line 164
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$[ebp], eax
; Line 165
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 166
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _Index$[ebp]
	mov	WORD PTR [eax], cx
; Line 167
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pData$[ebp], eax
; Line 168
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN16@DrawBitLin@2
; Line 169
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 170
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN16@DrawBitLin@2:
; Line 172
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN17@DrawBitLin@2
$LN18@DrawBitLin@2:
; Line 174
	jmp	$LN27@DrawBitLin@2
$LN13@DrawBitLin@2:
; Line 176
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN5@DrawBitLin@2
$LN11@DrawBitLin@2:
; Line 178
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$[ebp], eax
; Line 179
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 180
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN8@DrawBitLin@2
; Line 181
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$[ebp], edx
; Line 182
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _PixelIndex$[ebp]
	mov	WORD PTR [eax], cx
$LN8@DrawBitLin@2:
; Line 184
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pData$[ebp], eax
; Line 185
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 186
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN10@DrawBitLin@2
; Line 187
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 188
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN10@DrawBitLin@2:
; Line 190
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN11@DrawBitLin@2
; Line 191
	jmp	SHORT $LN27@DrawBitLin@2
$LN5@DrawBitLin@2:
; Line 193
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$[ebp], eax
; Line 194
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 195
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN2@DrawBitLin@2
; Line 196
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _Index$[ebp]
	mov	WORD PTR [eax], cx
$LN2@DrawBitLin@2:
; Line 198
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pData$[ebp], eax
; Line 199
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN4@DrawBitLin@2
; Line 200
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 201
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN4@DrawBitLin@2:
; Line 203
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN5@DrawBitLin@2
$LN27@DrawBitLin@2:
; Line 207
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@DrawBitLin@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN32@DrawBitLin@2:
	DD	2
	DD	$LN31@DrawBitLin@2
$LN31@DrawBitLin@2:
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN29@DrawBitLin@2
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN30@DrawBitLin@2
$LN30@DrawBitLin@2:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN29@DrawBitLin@2:
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
__DrawBitLine2BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine4BPP
_TEXT	SEGMENT
tv82 = -304						; size = 4
_pContext$ = -104					; size = 4
_y_phys$ = -92						; size = 4
_x_phys$ = -80						; size = 4
_pData$ = -68						; size = 4
_Index$ = -56						; size = 4
_Shift$ = -44						; size = 4
_CurrentPixel$ = -32					; size = 4
_PixelIndex$ = -20					; size = 4
_Pixels$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine4BPP PROC					; COMDAT
; Line 213
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 220
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 221
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixels$[ebp], ecx
; Line 222
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _CurrentPixel$[ebp], eax
; Line 223
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 224
	mov	esi, esp
	lea	eax, DWORD PTR _y_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 225
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _y_phys$[ebp]
	imul	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR _x_phys$[ebp]
	imul	ecx, DWORD PTR [edx+28]
	add	eax, ecx
	mov	DWORD PTR _pData$[ebp], eax
; Line 226
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv82[ebp], eax
	je	SHORT $LN24@DrawBitLin@3
	cmp	DWORD PTR tv82[ebp], 2
	je	$LN13@DrawBitLin@3
	jmp	$LN27@DrawBitLin@3
$LN24@DrawBitLin@3:
; Line 228
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN17@DrawBitLin@3
$LN22@DrawBitLin@3:
; Line 230
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 231
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 232
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$[ebp], edx
; Line 233
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _PixelIndex$[ebp]
	mov	WORD PTR [eax], cx
; Line 234
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pData$[ebp], eax
; Line 235
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN21@DrawBitLin@3
; Line 236
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 237
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN21@DrawBitLin@3:
; Line 239
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN22@DrawBitLin@3
; Line 240
	jmp	SHORT $LN18@DrawBitLin@3
$LN17@DrawBitLin@3:
; Line 242
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 243
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 244
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _Index$[ebp]
	mov	WORD PTR [eax], cx
; Line 245
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pData$[ebp], eax
; Line 246
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN16@DrawBitLin@3
; Line 247
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 248
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN16@DrawBitLin@3:
; Line 250
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN17@DrawBitLin@3
$LN18@DrawBitLin@3:
; Line 252
	jmp	$LN27@DrawBitLin@3
$LN13@DrawBitLin@3:
; Line 254
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN5@DrawBitLin@3
$LN11@DrawBitLin@3:
; Line 256
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 257
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 258
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN8@DrawBitLin@3
; Line 259
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$[ebp], edx
; Line 260
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _PixelIndex$[ebp]
	mov	WORD PTR [eax], cx
$LN8@DrawBitLin@3:
; Line 262
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pData$[ebp], eax
; Line 263
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN10@DrawBitLin@3
; Line 264
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 265
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN10@DrawBitLin@3:
; Line 267
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN11@DrawBitLin@3
; Line 268
	jmp	SHORT $LN27@DrawBitLin@3
$LN5@DrawBitLin@3:
; Line 270
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 271
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 272
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN2@DrawBitLin@3
; Line 273
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _Index$[ebp]
	mov	WORD PTR [eax], cx
$LN2@DrawBitLin@3:
; Line 275
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pData$[ebp], eax
; Line 276
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN4@DrawBitLin@3
; Line 277
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 278
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN4@DrawBitLin@3:
; Line 280
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN5@DrawBitLin@3
$LN27@DrawBitLin@3:
; Line 284
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@DrawBitLin@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN32@DrawBitLin@3:
	DD	2
	DD	$LN31@DrawBitLin@3
$LN31@DrawBitLin@3:
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN29@DrawBitLin@3
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN30@DrawBitLin@3
$LN30@DrawBitLin@3:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN29@DrawBitLin@3:
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
__DrawBitLine4BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine8BPP
_TEXT	SEGMENT
tv80 = -256						; size = 4
_pContext$ = -56					; size = 4
_y_phys$ = -44						; size = 4
_x_phys$ = -32						; size = 4
_pData$ = -20						; size = 4
_Pixel$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xsize$ = 24						; size = 4
_pTrans$ = 28						; size = 4
__DrawBitLine8BPP PROC					; COMDAT
; Line 290
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 296
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 297
	mov	esi, esp
	lea	eax, DWORD PTR _y_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 298
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _y_phys$[ebp]
	imul	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR _x_phys$[ebp]
	imul	ecx, DWORD PTR [edx+28]
	add	eax, ecx
	mov	DWORD PTR _pData$[ebp], eax
; Line 299
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv80[ebp], eax
	je	SHORT $LN20@DrawBitLin@4
	cmp	DWORD PTR tv80[ebp], 2
	je	SHORT $LN11@DrawBitLin@4
	jmp	$LN23@DrawBitLin@4
$LN20@DrawBitLin@4:
; Line 301
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	SHORT $LN14@DrawBitLin@4
$LN18@DrawBitLin@4:
; Line 303
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixel$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 304
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _Pixel$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	cx, WORD PTR [edx+ecx*4]
	mov	WORD PTR [eax], cx
; Line 305
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pData$[ebp], eax
; Line 306
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN18@DrawBitLin@4
; Line 307
	jmp	SHORT $LN15@DrawBitLin@4
$LN14@DrawBitLin@4:
; Line 309
	mov	eax, DWORD PTR _p$[ebp]
	movzx	cx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 310
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pData$[ebp], eax
; Line 311
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN14@DrawBitLin@4
$LN15@DrawBitLin@4:
; Line 313
	jmp	$LN23@DrawBitLin@4
$LN11@DrawBitLin@4:
; Line 315
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	SHORT $LN4@DrawBitLin@4
$LN9@DrawBitLin@4:
; Line 317
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixel$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 318
	cmp	DWORD PTR _Pixel$[ebp], 0
	je	SHORT $LN6@DrawBitLin@4
; Line 319
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _Pixel$[ebp]
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	cx, WORD PTR [edx+ecx*4]
	mov	WORD PTR [eax], cx
$LN6@DrawBitLin@4:
; Line 321
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pData$[ebp], eax
; Line 322
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN9@DrawBitLin@4
; Line 323
	jmp	SHORT $LN23@DrawBitLin@4
$LN4@DrawBitLin@4:
; Line 325
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixel$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 326
	cmp	DWORD PTR _Pixel$[ebp], 0
	je	SHORT $LN1@DrawBitLin@4
; Line 327
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _Pixel$[ebp]
	mov	WORD PTR [eax], cx
$LN1@DrawBitLin@4:
; Line 329
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pData$[ebp], eax
; Line 330
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN4@DrawBitLin@4
$LN23@DrawBitLin@4:
; Line 334
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@DrawBitLin@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN28@DrawBitLin@4:
	DD	2
	DD	$LN27@DrawBitLin@4
$LN27@DrawBitLin@4:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN25@DrawBitLin@4
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN26@DrawBitLin@4
$LN26@DrawBitLin@4:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN25@DrawBitLin@4:
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
__DrawBitLine8BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine16BPP
_TEXT	SEGMENT
_pContext$ = -56					; size = 4
_PixelOffset$ = -44					; size = 4
_y_phys$ = -32						; size = 4
_x_phys$ = -20						; size = 4
_pData$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xsize$ = 24						; size = 4
__DrawBitLine16BPP PROC					; COMDAT
; Line 340
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 345
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 346
	mov	esi, esp
	lea	eax, DWORD PTR _y_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 347
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _y_phys$[ebp]
	imul	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR _x_phys$[ebp]
	imul	ecx, DWORD PTR [edx+28]
	add	eax, ecx
	mov	DWORD PTR _pData$[ebp], eax
; Line 348
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _PixelOffset$[ebp], ecx
$LN3@DrawBitLin@5:
; Line 350
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
; Line 351
	mov	eax, DWORD PTR _PixelOffset$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _pData$[ebp], edx
; Line 352
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN3@DrawBitLin@5
; Line 353
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@DrawBitLin@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@DrawBitLin@5:
	DD	2
	DD	$LN8@DrawBitLin@5
$LN8@DrawBitLin@5:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@DrawBitLin@5
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN7@DrawBitLin@5
$LN7@DrawBitLin@5:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN6@DrawBitLin@5:
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
__DrawBitLine16BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine32BPP
_TEXT	SEGMENT
_pContext$ = -56					; size = 4
_PixelOffset$ = -44					; size = 4
_y_phys$ = -32						; size = 4
_x_phys$ = -20						; size = 4
_pData$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xsize$ = 24						; size = 4
__DrawBitLine32BPP PROC					; COMDAT
; Line 359
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 364
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 365
	mov	esi, esp
	lea	eax, DWORD PTR _y_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 366
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _y_phys$[ebp]
	imul	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR _x_phys$[ebp]
	imul	ecx, DWORD PTR [edx+28]
	add	eax, ecx
	mov	DWORD PTR _pData$[ebp], eax
; Line 367
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _PixelOffset$[ebp], ecx
$LN3@DrawBitLin@6:
; Line 369
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 370
	mov	eax, DWORD PTR _PixelOffset$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _pData$[ebp], edx
; Line 371
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN3@DrawBitLin@6
; Line 372
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@DrawBitLin@6
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@DrawBitLin@6:
	DD	2
	DD	$LN8@DrawBitLin@6
$LN8@DrawBitLin@6:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@DrawBitLin@6
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN7@DrawBitLin@6
$LN7@DrawBitLin@6:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN6@DrawBitLin@6:
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
__DrawBitLine32BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetPixelIndex_CX
_TEXT	SEGMENT
_pContext$ = -56					; size = 4
_y_phys$ = -44						; size = 4
_x_phys$ = -32						; size = 4
_Pixel$ = -20						; size = 2
_pData$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__GetPixelIndex_CX PROC					; COMDAT
; Line 454
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 460
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 461
	mov	esi, esp
	lea	eax, DWORD PTR _y_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 462
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _y_phys$[ebp]
	imul	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR _x_phys$[ebp]
	imul	ecx, DWORD PTR [edx+28]
	add	eax, ecx
	mov	DWORD PTR _pData$[ebp], eax
; Line 463
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _Pixel$[ebp], cx
; Line 464
	movzx	eax, WORD PTR _Pixel$[ebp]
; Line 465
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@GetPixelIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@GetPixelIn:
	DD	2
	DD	$LN5@GetPixelIn
$LN5@GetPixelIn:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN3@GetPixelIn
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN4@GetPixelIn
$LN4@GetPixelIn:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN3@GetPixelIn:
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
__GetPixelIndex_CX ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetPixelIndex_CX
_TEXT	SEGMENT
_pContext$ = -44					; size = 4
_y_phys$ = -32						; size = 4
_x_phys$ = -20						; size = 4
_pData$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_PixelIndex$ = 20					; size = 4
__SetPixelIndex_CX PROC					; COMDAT
; Line 471
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 476
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 477
	mov	esi, esp
	lea	eax, DWORD PTR _y_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 478
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _y_phys$[ebp]
	imul	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR _x_phys$[ebp]
	imul	ecx, DWORD PTR [edx+28]
	add	eax, ecx
	mov	DWORD PTR _pData$[ebp], eax
; Line 479
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cx, WORD PTR _PixelIndex$[ebp]
	mov	WORD PTR [eax], cx
; Line 480
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 481
	mov	esi, esp
	mov	eax, DWORD PTR _PixelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_phys$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 482
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SetPixelIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@SetPixelIn:
	DD	2
	DD	$LN5@SetPixelIn
$LN5@SetPixelIn:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@SetPixelIn
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@SetPixelIn
$LN4@SetPixelIn:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN3@SetPixelIn:
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
__SetPixelIndex_CX ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __XorPixel_CX
_TEXT	SEGMENT
_IndexMask$ = -20					; size = 2
_Pixel$ = -8						; size = 2
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__XorPixel_CX PROC					; COMDAT
; Line 488
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 491
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _IndexMask$[ebp], ax
; Line 492
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _Pixel$[ebp], ax
; Line 493
	movzx	eax, WORD PTR _IndexMask$[ebp]
	movzx	ecx, WORD PTR _Pixel$[ebp]
	xor	ecx, eax
	mov	WORD PTR _Pixel$[ebp], cx
; Line 494
	movzx	eax, WORD PTR _Pixel$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 495
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__XorPixel_CX ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawHLine_CX
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y$ = 16						; size = 4
_x1$ = 20						; size = 4
__DrawHLine_CX PROC					; COMDAT
; Line 501
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 502
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 503
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawHLine_CX ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawVLine_CX
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y0$ = 16						; size = 4
_y1$ = 20						; size = 4
__DrawVLine_CX PROC					; COMDAT
; Line 509
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 510
	mov	esi, esp
	mov	eax, DWORD PTR _y1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 511
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawVLine_CX ENDP
_TEXT	ENDS
EXTRN	_GUI__memset:PROC
EXTRN	_LCD_pColorIndex:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __FillRect_CX
_TEXT	SEGMENT
_pContext$ = -140					; size = 4
_NumLines$ = -128					; size = 4
_NumPixels$ = -116					; size = 4
_y1_phys$ = -104					; size = 4
_x1_phys$ = -92						; size = 4
_y0_phys$ = -80						; size = 4
_x0_phys$ = -68						; size = 4
_IndexMask$ = -56					; size = 2
_Pixel$ = -44						; size = 2
_pPixel$ = -32						; size = 4
_pLine$ = -20						; size = 4
_pData$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
__FillRect_CX PROC					; COMDAT
; Line 517
	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 526
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 527
	mov	esi, esp
	lea	eax, DWORD PTR _y0_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x0_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 528
	mov	esi, esp
	lea	eax, DWORD PTR _y1_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x1_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y1$[ebp]
	push	edx
	mov	eax, DWORD PTR _x1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 529
	lea	eax, DWORD PTR _x1_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x0_phys$[ebp]
	push	ecx
	call	__Sort
	add	esp, 8
; Line 530
	lea	eax, DWORD PTR _y1_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _y0_phys$[ebp]
	push	ecx
	call	__Sort
	add	esp, 8
; Line 531
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _y0_phys$[ebp]
	imul	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR _x0_phys$[ebp]
	imul	ecx, DWORD PTR [edx+28]
	add	eax, ecx
	mov	DWORD PTR _pLine$[ebp], eax
	mov	edx, DWORD PTR _pLine$[ebp]
	mov	DWORD PTR _pData$[ebp], edx
; Line 532
	mov	eax, DWORD PTR _y1_phys$[ebp]
	sub	eax, DWORD PTR _y0_phys$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumLines$[ebp], eax
; Line 533
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 1
	je	SHORT $LN19@FillRect_C
; Line 534
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _IndexMask$[ebp], ax
$LN18@FillRect_C:
; Line 536
	mov	eax, DWORD PTR _pLine$[ebp]
	mov	DWORD PTR _pPixel$[ebp], eax
; Line 537
	mov	eax, DWORD PTR _x1_phys$[ebp]
	sub	eax, DWORD PTR _x0_phys$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
$LN15@FillRect_C:
; Line 539
	movzx	eax, WORD PTR _IndexMask$[ebp]
	mov	ecx, DWORD PTR _pPixel$[ebp]
	movzx	edx, WORD PTR [ecx]
	xor	edx, eax
	mov	eax, DWORD PTR _pPixel$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _pPixel$[ebp]
	add	ecx, 2
	mov	DWORD PTR _pPixel$[ebp], ecx
; Line 540
	mov	eax, DWORD PTR _NumPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
	jne	SHORT $LN15@FillRect_C
; Line 541
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _pLine$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pLine$[ebp], eax
; Line 542
	mov	eax, DWORD PTR _NumLines$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumLines$[ebp], eax
	jne	SHORT $LN18@FillRect_C
; Line 543
	jmp	$LN12@FillRect_C
$LN19@FillRect_C:
; Line 544
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _Pixel$[ebp], cx
; Line 545
	xor	eax, eax
	je	SHORT $LN6@FillRect_C
; Line 546
	mov	eax, DWORD PTR _x1_phys$[ebp]
	sub	eax, DWORD PTR _x0_phys$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
$LN10@FillRect_C:
; Line 548
	mov	eax, DWORD PTR _NumPixels$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _Pixel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLine$[ebp]
	push	edx
	call	_GUI__memset
	add	esp, 12					; 0000000cH
; Line 549
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _pLine$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pLine$[ebp], eax
; Line 550
	mov	eax, DWORD PTR _NumLines$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumLines$[ebp], eax
	jne	SHORT $LN10@FillRect_C
; Line 551
	jmp	SHORT $LN12@FillRect_C
$LN6@FillRect_C:
; Line 553
	mov	eax, DWORD PTR _pLine$[ebp]
	mov	DWORD PTR _pPixel$[ebp], eax
; Line 554
	mov	eax, DWORD PTR _x1_phys$[ebp]
	sub	eax, DWORD PTR _x0_phys$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
$LN3@FillRect_C:
; Line 556
	mov	eax, DWORD PTR _pPixel$[ebp]
	mov	cx, WORD PTR _Pixel$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pPixel$[ebp]
	add	edx, 2
	mov	DWORD PTR _pPixel$[ebp], edx
; Line 557
	mov	eax, DWORD PTR _NumPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
	jne	SHORT $LN3@FillRect_C
; Line 558
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _pLine$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pLine$[ebp], eax
; Line 559
	mov	eax, DWORD PTR _NumLines$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumLines$[ebp], eax
	jne	SHORT $LN6@FillRect_C
$LN12@FillRect_C:
; Line 562
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 569
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	imul	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR [eax+28]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _y1_phys$[ebp]
	sub	edx, DWORD PTR _y0_phys$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _x1_phys$[ebp]
	sub	eax, DWORD PTR _x0_phys$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _y0_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0_phys$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 570
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@FillRect_C
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN27@FillRect_C:
	DD	4
	DD	$LN26@FillRect_C
$LN26@FillRect_C:
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN22@FillRect_C
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN23@FillRect_C
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN24@FillRect_C
	DD	-104					; ffffff98H
	DD	4
	DD	$LN25@FillRect_C
$LN25@FillRect_C:
	DB	121					; 00000079H
	DB	49					; 00000031H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN24@FillRect_C:
	DB	120					; 00000078H
	DB	49					; 00000031H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN23@FillRect_C:
	DB	121					; 00000079H
	DB	48					; 00000030H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN22@FillRect_C:
	DB	120					; 00000078H
	DB	48					; 00000030H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
__FillRect_CX ENDP
_TEXT	ENDS
END
