; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\MemDev\GUIDEV_1.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_MEMDEV_DEVICE_1
_DATA	SEGMENT
$SG9958	DB	'_XY2PTR: parameters out of bounds', 00H
	ORG $+2
$SG9992	DB	'GUIDEV.c: DrawBitLine1BPP, Act= %d, Border= %d, Clip= %d'
	DB	00H
_DATA	ENDS
CONST	SEGMENT
_aID	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	09H
	DD	0aH
	DD	0bH
	DD	0cH
	DD	0dH
	DD	0eH
	DD	0fH
_GUI_MEMDEV_DEVICE_1 DD 04H
	DD	FLAT:__DrawBitmap
	DD	FLAT:__DrawHLine
	DD	FLAT:__DrawVLine
	DD	FLAT:__FillRect
	DD	FLAT:__GetPixelIndex
	DD	FLAT:__SetPixelIndex
	DD	FLAT:__XorPixel
	DD	FLAT:__SetOrg
	DD	FLAT:__GetDevFunc
	DD	FLAT:__GetDevProp
	DD	FLAT:__GetDevData
	DD	FLAT:__GetRect
CONST	ENDS
EXTRN	_GUI_USAGE_AddRect:PROC
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\memdev\guidev_1.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __DrawBitmap
_TEXT	SEGMENT
tv147 = -256						; size = 4
tv71 = -256						; size = 4
_pDest$ = -56						; size = 4
_BytesPerLineDest$ = -44				; size = 4
_pUsage$ = -32						; size = 4
_pDev$ = -20						; size = 4
_i$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xsize$ = 20						; size = 4
_ysize$ = 24						; size = 4
_BitsPerPixel$ = 28					; size = 4
_BytesPerLine$ = 32					; size = 4
_pData$ = 36						; size = 4
_Diff$ = 40						; size = 4
_pTrans$ = 44						; size = 4
__DrawBitmap PROC					; COMDAT
; Line 472
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 474
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 475
	mov	eax, DWORD PTR _pDev$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN20@DrawBitmap
	mov	ecx, DWORD PTR _pDev$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN21@DrawBitmap
$LN20@DrawBitmap:
	mov	DWORD PTR tv71[ebp], 0
$LN21@DrawBitmap:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _pUsage$[ebp], eax
; Line 478
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _BytesPerLineDest$[ebp], ecx
; Line 479
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x0$[ebp], eax
; Line 483
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN17@DrawBitmap
; Line 484
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 2
	jne	SHORT $LN17@DrawBitmap
; Line 485
	mov	eax, DWORD PTR _ysize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pUsage$[ebp]
	push	ecx
	call	_GUI_USAGE_AddRect
	add	esp, 20					; 00000014H
$LN17@DrawBitmap:
; Line 488
	push	0
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	__XY2PTR_BITOFFSET
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pDest$[ebp], eax
; Line 492
	cmp	DWORD PTR _BitsPerPixel$[ebp], 8
	jne	$LN15@DrawBitmap
; Line 493
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@DrawBitmap
$LN13@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ysize$[ebp]
	jge	SHORT $LN12@DrawBitmap
; Line 494
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	SHORT $LN11@DrawBitmap
; Line 495
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pTrans$[ebp]
	push	edx
	mov	eax, DWORD PTR _xsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pUsage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__DrawBitLine8BPP
	add	esp, 36					; 00000024H
; Line 496
	jmp	SHORT $LN10@DrawBitmap
$LN11@DrawBitmap:
; Line 497
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__DrawBitLine8BPP_DDB
	add	esp, 32					; 00000020H
$LN10@DrawBitmap:
; Line 499
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 500
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, DWORD PTR _BytesPerLineDest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 501
	jmp	$LN13@DrawBitmap
$LN12@DrawBitmap:
; Line 502
	jmp	$LN18@DrawBitmap
$LN15@DrawBitmap:
; Line 507
	cmp	DWORD PTR _pTrans$[ebp], 0
	jne	SHORT $LN9@DrawBitmap
; Line 508
	mov	DWORD PTR _pTrans$[ebp], OFFSET _aID
$LN9@DrawBitmap:
; Line 510
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@DrawBitmap
$LN7@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ysize$[ebp]
	jge	$LN18@DrawBitmap
; Line 511
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR tv147[ebp], eax
	cmp	DWORD PTR tv147[ebp], 1
	je	SHORT $LN3@DrawBitmap
	cmp	DWORD PTR tv147[ebp], 2
	je	SHORT $LN2@DrawBitmap
	cmp	DWORD PTR tv147[ebp], 4
	je	SHORT $LN1@DrawBitmap
	jmp	$LN4@DrawBitmap
$LN3@DrawBitmap:
; Line 513
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pTrans$[ebp]
	push	edx
	mov	eax, DWORD PTR _xsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Diff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine1BPP
	add	esp, 40					; 00000028H
; Line 514
	jmp	SHORT $LN4@DrawBitmap
$LN2@DrawBitmap:
; Line 516
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pTrans$[ebp]
	push	edx
	mov	eax, DWORD PTR _xsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Diff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine2BPP
	add	esp, 40					; 00000028H
; Line 517
	jmp	SHORT $LN4@DrawBitmap
$LN1@DrawBitmap:
; Line 519
	mov	eax, DWORD PTR _pDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pTrans$[ebp]
	push	edx
	mov	eax, DWORD PTR _xsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Diff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine4BPP
	add	esp, 40					; 00000028H
$LN4@DrawBitmap:
; Line 522
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 523
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, DWORD PTR _BytesPerLineDest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 524
	jmp	$LN7@DrawBitmap
$LN18@DrawBitmap:
; Line 525
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitmap ENDP
_TEXT	ENDS
EXTRN	_GUI_ErrorOut2:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __XY2PTR_BITOFFSET
_TEXT	SEGMENT
_pData$ = -32						; size = 4
_pDev$ = -20						; size = 4
_Offset$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_pBitOffset$ = 16					; size = 4
__XY2PTR_BITOFFSET PROC					; COMDAT
; Line 70
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 74
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 75
	mov	eax, DWORD PTR _pDev$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _pData$[ebp], eax
; Line 77
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [edx+8]
	add	ecx, eax
	xor	edx, edx
	cmp	DWORD PTR _x$[ebp], ecx
	setge	dl
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	xor	eax, eax
	cmp	DWORD PTR _x$[ebp], ecx
	setl	al
	or	edx, eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [ecx+6]
	mov	ecx, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [ecx+10]
	add	eax, ecx
	xor	ecx, ecx
	cmp	DWORD PTR _y$[ebp], eax
	setge	cl
	or	edx, ecx
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	xor	eax, eax
	cmp	DWORD PTR _y$[ebp], ecx
	setl	al
	or	edx, eax
	je	SHORT $LN2@XY2PTR_BIT
; Line 78
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	push	OFFSET $SG9958
	call	_GUI_ErrorOut2
	add	esp, 12					; 0000000cH
$LN2@XY2PTR_BIT:
; Line 81
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _x$[ebp], edx
; Line 82
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _y$[ebp], edx
; Line 83
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _x$[ebp]
	sar	edx, 3
	add	ecx, edx
	mov	DWORD PTR _Offset$[ebp], ecx
; Line 84
	cmp	DWORD PTR _pBitOffset$[ebp], 0
	je	SHORT $LN1@XY2PTR_BIT
; Line 85
	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 7
	mov	ecx, 7
	sub	ecx, eax
	mov	edx, DWORD PTR _pBitOffset$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@XY2PTR_BIT:
; Line 87
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _Offset$[ebp]
; Line 88
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__XY2PTR_BITOFFSET ENDP
_TEXT	ENDS
EXTRN	_GUI_ErrorOut3:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitLine1BPP
_TEXT	SEGMENT
tv82 = -280						; size = 4
_NumPixels$ = -80					; size = 4
_Bit$ = -68						; size = 4
_pData$ = -56						; size = 4
_AndMask$ = -41						; size = 1
_PixelCnt$ = -32					; size = 4
_Index1$ = -17						; size = 1
_pixels$ = -5						; size = 1
_pDevice$ = 8						; size = 4
_pUsage$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_p$ = 24						; size = 4
_Diff$ = 28						; size = 4
_xsize$ = 32						; size = 4
_pTrans$ = 36						; size = 4
_pDev$ = 40						; size = 4
_pDest$ = 44						; size = 4
__DrawBitLine1BPP PROC					; COMDAT
; Line 96
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 105
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	DWORD PTR _pUsage$[ebp], eax
; Line 106
	mov	eax, DWORD PTR _Diff$[ebp]
	and	eax, 7
	mov	ecx, 8
	sub	ecx, eax
	mov	DWORD PTR _PixelCnt$[ebp], ecx
; Line 107
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _Diff$[ebp]
	and	ecx, 7
	shl	edx, cl
	mov	BYTE PTR _pixels$[ebp], dl
; Line 109
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	cmp	DWORD PTR _x$[ebp], ecx
	jge	SHORT $LN56@DrawBitLin
	movsx	eax, WORD PTR _GUI_Context+8
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	push	OFFSET $SG9992
	call	_GUI_ErrorOut3
	add	esp, 16					; 00000010H
$LN56@DrawBitLin:
; Line 110
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv82[ebp], eax
	cmp	DWORD PTR tv82[ebp], 3
	ja	$LN57@DrawBitLin
	mov	ecx, DWORD PTR tv82[ebp]
	jmp	DWORD PTR $LN62@DrawBitLin[ecx*4]
$LN53@DrawBitLin:
; Line 112
	lea	eax, DWORD PTR _Bit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__XY2PTR_BITOFFSET
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pData$[ebp], eax
; Line 116
	cmp	DWORD PTR _Bit$[ebp], 7
	jge	$LN46@DrawBitLin
; Line 117
	mov	ecx, DWORD PTR _Bit$[ebp]
	add	ecx, 1
	mov	eax, 255				; 000000ffH
	shl	eax, cl
	mov	BYTE PTR _AndMask$[ebp], al
; Line 118
	movzx	eax, BYTE PTR _AndMask$[ebp]
	xor	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _xsize$[ebp]
	sar	eax, cl
	movzx	ecx, BYTE PTR _AndMask$[ebp]
	or	ecx, eax
	mov	BYTE PTR _AndMask$[ebp], cl
; Line 119
	movzx	eax, BYTE PTR _AndMask$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
; Line 120
	mov	eax, DWORD PTR _Bit$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
; Line 121
	mov	eax, DWORD PTR _NumPixels$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jbe	SHORT $LN51@DrawBitLin
; Line 122
	mov	eax, DWORD PTR _xsize$[ebp]
	mov	DWORD PTR _NumPixels$[ebp], eax
$LN51@DrawBitLin:
; Line 124
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, DWORD PTR _NumPixels$[ebp]
	mov	DWORD PTR _xsize$[ebp], eax
$LN50@DrawBitLin:
; Line 126
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax]
	or	ecx, edx
	mov	edx, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _Bit$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Bit$[ebp], eax
; Line 127
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 1
	mov	BYTE PTR _pixels$[ebp], al
; Line 128
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _PixelCnt$[ebp], eax
	jne	SHORT $LN49@DrawBitLin
; Line 129
	mov	DWORD PTR _PixelCnt$[ebp], 8
; Line 130
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
$LN49@DrawBitLin:
; Line 132
	mov	eax, DWORD PTR _NumPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
	jne	SHORT $LN50@DrawBitLin
; Line 133
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 1
	mov	DWORD PTR _pData$[ebp], eax
$LN46@DrawBitLin:
; Line 138
	cmp	DWORD PTR _xsize$[ebp], 8
	jb	SHORT $LN45@DrawBitLin
; Line 139
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], 0
; Line 140
	mov	DWORD PTR _Bit$[ebp], 7
$LN44@DrawBitLin:
	cmp	DWORD PTR _Bit$[ebp], 0
	jl	SHORT $LN43@DrawBitLin
; Line 141
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax]
	or	ecx, edx
	mov	edx, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _Bit$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Bit$[ebp], eax
; Line 142
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 1
	mov	BYTE PTR _pixels$[ebp], al
; Line 143
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _PixelCnt$[ebp], eax
	jne	SHORT $LN42@DrawBitLin
; Line 144
	mov	DWORD PTR _PixelCnt$[ebp], 8
; Line 145
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
$LN42@DrawBitLin:
; Line 147
	jmp	SHORT $LN44@DrawBitLin
$LN43@DrawBitLin:
; Line 148
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 1
	mov	DWORD PTR _pData$[ebp], eax
; Line 149
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 8
	mov	DWORD PTR _xsize$[ebp], eax
; Line 150
	jmp	$LN46@DrawBitLin
$LN45@DrawBitLin:
; Line 154
	cmp	DWORD PTR _xsize$[ebp], 0
	je	$LN41@DrawBitLin
; Line 155
	mov	DWORD PTR _Bit$[ebp], 7
; Line 156
	mov	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _xsize$[ebp]
	sar	eax, cl
	mov	BYTE PTR _AndMask$[ebp], al
; Line 157
	movzx	eax, BYTE PTR _AndMask$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
$LN40@DrawBitLin:
; Line 159
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax]
	or	ecx, edx
	mov	edx, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _Bit$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Bit$[ebp], eax
; Line 160
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 1
	mov	BYTE PTR _pixels$[ebp], al
; Line 161
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _PixelCnt$[ebp], eax
	jne	SHORT $LN39@DrawBitLin
; Line 162
	mov	DWORD PTR _PixelCnt$[ebp], 8
; Line 163
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
$LN39@DrawBitLin:
; Line 165
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN40@DrawBitLin
$LN41@DrawBitLin:
; Line 167
	jmp	$LN57@DrawBitLin
$LN36@DrawBitLin:
; Line 169
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	cl, BYTE PTR [eax+4]
	mov	BYTE PTR _Index1$[ebp], cl
; Line 170
	lea	eax, DWORD PTR _Bit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__XY2PTR_BITOFFSET
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pData$[ebp], eax
; Line 174
	cmp	DWORD PTR _Bit$[ebp], 7
	jge	$LN25@DrawBitLin
; Line 175
	mov	eax, DWORD PTR _Bit$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
; Line 176
	mov	eax, DWORD PTR _NumPixels$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jbe	SHORT $LN34@DrawBitLin
; Line 177
	mov	eax, DWORD PTR _xsize$[ebp]
	mov	DWORD PTR _NumPixels$[ebp], eax
$LN34@DrawBitLin:
; Line 179
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, DWORD PTR _NumPixels$[ebp]
	mov	DWORD PTR _xsize$[ebp], eax
$LN33@DrawBitLin:
; Line 181
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN30@DrawBitLin
; Line 182
	movzx	eax, BYTE PTR _Index1$[ebp]
	test	eax, eax
	je	SHORT $LN29@DrawBitLin
; Line 183
	mov	eax, 1
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
; Line 184
	jmp	SHORT $LN28@DrawBitLin
$LN29@DrawBitLin:
; Line 185
	mov	eax, 1
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
$LN28@DrawBitLin:
; Line 187
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN30@DrawBitLin
; Line 188
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN30@DrawBitLin:
; Line 191
	mov	eax, DWORD PTR _Bit$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Bit$[ebp], eax
; Line 192
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 1
	mov	BYTE PTR _pixels$[ebp], al
; Line 193
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _PixelCnt$[ebp], eax
	jne	SHORT $LN26@DrawBitLin
; Line 194
	mov	DWORD PTR _PixelCnt$[ebp], 8
; Line 195
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
$LN26@DrawBitLin:
; Line 197
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 198
	mov	eax, DWORD PTR _NumPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
	jne	$LN33@DrawBitLin
; Line 199
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 1
	mov	DWORD PTR _pData$[ebp], eax
$LN25@DrawBitLin:
; Line 204
	cmp	DWORD PTR _xsize$[ebp], 8
	jb	$LN24@DrawBitLin
; Line 205
	mov	DWORD PTR _Bit$[ebp], 7
$LN23@DrawBitLin:
	cmp	DWORD PTR _Bit$[ebp], 0
	jl	$LN22@DrawBitLin
; Line 206
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN21@DrawBitLin
; Line 207
	movzx	eax, BYTE PTR _Index1$[ebp]
	test	eax, eax
	je	SHORT $LN20@DrawBitLin
; Line 208
	mov	eax, 1
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
; Line 209
	jmp	SHORT $LN19@DrawBitLin
$LN20@DrawBitLin:
; Line 210
	mov	eax, 1
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
$LN19@DrawBitLin:
; Line 212
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN21@DrawBitLin
; Line 213
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN21@DrawBitLin:
; Line 216
	mov	eax, DWORD PTR _Bit$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Bit$[ebp], eax
; Line 217
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 1
	mov	BYTE PTR _pixels$[ebp], al
; Line 218
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _PixelCnt$[ebp], eax
	jne	SHORT $LN17@DrawBitLin
; Line 219
	mov	DWORD PTR _PixelCnt$[ebp], 8
; Line 220
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
$LN17@DrawBitLin:
; Line 222
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 223
	jmp	$LN23@DrawBitLin
$LN22@DrawBitLin:
; Line 224
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 1
	mov	DWORD PTR _pData$[ebp], eax
; Line 225
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 8
	mov	DWORD PTR _xsize$[ebp], eax
; Line 226
	jmp	$LN25@DrawBitLin
$LN24@DrawBitLin:
; Line 230
	cmp	DWORD PTR _xsize$[ebp], 0
	je	$LN16@DrawBitLin
; Line 231
	mov	DWORD PTR _Bit$[ebp], 7
$LN15@DrawBitLin:
; Line 233
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN12@DrawBitLin
; Line 234
	movzx	eax, BYTE PTR _Index1$[ebp]
	test	eax, eax
	je	SHORT $LN11@DrawBitLin
; Line 235
	mov	eax, 1
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
; Line 236
	jmp	SHORT $LN10@DrawBitLin
$LN11@DrawBitLin:
; Line 237
	mov	eax, 1
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
$LN10@DrawBitLin:
; Line 239
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN12@DrawBitLin
; Line 240
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@DrawBitLin:
; Line 243
	mov	eax, DWORD PTR _Bit$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Bit$[ebp], eax
; Line 244
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 1
	mov	BYTE PTR _pixels$[ebp], al
; Line 245
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _PixelCnt$[ebp], eax
	jne	SHORT $LN8@DrawBitLin
; Line 246
	mov	DWORD PTR _PixelCnt$[ebp], 8
; Line 247
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
$LN8@DrawBitLin:
; Line 249
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 250
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN15@DrawBitLin
$LN16@DrawBitLin:
; Line 252
	jmp	$LN57@DrawBitLin
$PixelLoopXor$10051:
; Line 256
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jbe	SHORT $LN6@DrawBitLin
; Line 257
	mov	eax, DWORD PTR _xsize$[ebp]
	mov	DWORD PTR _PixelCnt$[ebp], eax
$LN6@DrawBitLin:
; Line 259
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, DWORD PTR _PixelCnt$[ebp]
	mov	DWORD PTR _xsize$[ebp], eax
$LN5@DrawBitLin:
; Line 261
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN2@DrawBitLin
; Line 262
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawBitLin:
; Line 264
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 265
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 1
	mov	DWORD PTR _pDest$[ebp], eax
; Line 266
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 1
	mov	BYTE PTR _pixels$[ebp], al
; Line 267
	mov	eax, DWORD PTR _PixelCnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _PixelCnt$[ebp], eax
	jne	SHORT $LN5@DrawBitLin
; Line 268
	cmp	DWORD PTR _xsize$[ebp], 0
	je	SHORT $LN57@DrawBitLin
; Line 269
	mov	DWORD PTR _PixelCnt$[ebp], 8
; Line 270
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 271
	jmp	$PixelLoopXor$10051
$LN57@DrawBitLin:
; Line 275
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN61@DrawBitLin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN61@DrawBitLin:
	DD	1
	DD	$LN60@DrawBitLin
$LN60@DrawBitLin:
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN59@DrawBitLin
$LN59@DrawBitLin:
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
$LN62@DrawBitLin:
	DD	$LN53@DrawBitLin
	DD	$PixelLoopXor$10051
	DD	$LN36@DrawBitLin
	DD	$PixelLoopXor$10051
__DrawBitLine1BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine2BPP
_TEXT	SEGMENT
tv88 = -220						; size = 4
tv74 = -220						; size = 4
_PixelCnt$ = -17					; size = 1
_pixels$ = -5						; size = 1
_pDevice$ = 8						; size = 4
_pUsage$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_p$ = 24						; size = 4
_Diff$ = 28						; size = 4
_xsize$ = 32						; size = 4
_pTrans$ = 36						; size = 4
_pDev$ = 40						; size = 4
_pDest$ = 44						; size = 4
__DrawBitLine2BPP PROC					; COMDAT
; Line 283
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 286
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	DWORD PTR _pUsage$[ebp], eax
; Line 287
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 288
	mov	eax, DWORD PTR _Diff$[ebp]
	and	eax, 3
	mov	ecx, 4
	sub	ecx, eax
	mov	BYTE PTR _PixelCnt$[ebp], cl
; Line 289
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _Diff$[ebp]
	and	ecx, 3
	shl	ecx, 1
	shl	edx, cl
	mov	BYTE PTR _pixels$[ebp], dl
; Line 290
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv74[ebp], eax
	je	SHORT $PixelLoopWrite$10087
	cmp	DWORD PTR tv74[ebp], 2
	je	$PixelLoopTrans$10094
	jmp	$LN16@DrawBitLin@2
$PixelLoopWrite$10087:
; Line 293
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jle	SHORT $LN12@DrawBitLin@2
; Line 294
	mov	al, BYTE PTR _xsize$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
$LN12@DrawBitLin@2:
; Line 296
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	mov	ecx, DWORD PTR _xsize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _xsize$[ebp], ecx
$LN11@DrawBitLin@2:
; Line 298
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	movzx	edx, BYTE PTR _pixels$[ebp]
	sar	edx, 6
	mov	esi, esp
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR tv88[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDev$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 299
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 2
	mov	BYTE PTR _pixels$[ebp], al
; Line 300
	mov	al, BYTE PTR _PixelCnt$[ebp]
	sub	al, 1
	mov	BYTE PTR _PixelCnt$[ebp], al
	movzx	ecx, BYTE PTR _PixelCnt$[ebp]
	test	ecx, ecx
	jne	SHORT $LN11@DrawBitLin@2
; Line 301
	cmp	DWORD PTR _xsize$[ebp], 0
	je	SHORT $LN8@DrawBitLin@2
; Line 302
	mov	BYTE PTR _PixelCnt$[ebp], 4
; Line 303
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 304
	jmp	$PixelLoopWrite$10087
$LN8@DrawBitLin@2:
; Line 306
	jmp	$LN16@DrawBitLin@2
$PixelLoopTrans$10094:
; Line 309
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jle	SHORT $LN6@DrawBitLin@2
; Line 310
	mov	al, BYTE PTR _xsize$[ebp]
	mov	BYTE PTR _PixelCnt$[ebp], al
$LN6@DrawBitLin@2:
; Line 311
	movzx	eax, BYTE PTR _PixelCnt$[ebp]
	mov	ecx, DWORD PTR _xsize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _xsize$[ebp], ecx
$LN5@DrawBitLin@2:
; Line 313
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 192				; 000000c0H
	je	SHORT $LN2@DrawBitLin@2
; Line 314
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 6
	mov	esi, esp
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawBitLin@2:
; Line 316
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 317
	mov	al, BYTE PTR _pixels$[ebp]
	shl	al, 2
	mov	BYTE PTR _pixels$[ebp], al
; Line 318
	mov	al, BYTE PTR _PixelCnt$[ebp]
	sub	al, 1
	mov	BYTE PTR _PixelCnt$[ebp], al
	movzx	ecx, BYTE PTR _PixelCnt$[ebp]
	test	ecx, ecx
	jne	SHORT $LN5@DrawBitLin@2
; Line 319
	cmp	DWORD PTR _xsize$[ebp], 0
	je	SHORT $LN16@DrawBitLin@2
; Line 320
	mov	BYTE PTR _PixelCnt$[ebp], 4
; Line 321
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 322
	jmp	$PixelLoopTrans$10094
$LN16@DrawBitLin@2:
; Line 326
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine2BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine4BPP
_TEXT	SEGMENT
tv159 = -220						; size = 4
tv143 = -220						; size = 4
tv131 = -220						; size = 4
tv82 = -220						; size = 4
tv71 = -220						; size = 4
_i$10131 = -20						; size = 4
_pixels$ = -5						; size = 1
_pDevice$ = 8						; size = 4
_pUsage$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_p$ = 24						; size = 4
_Diff$ = 28						; size = 4
_xsize$ = 32						; size = 4
_pTrans$ = 36						; size = 4
_pDev$ = 40						; size = 4
_pDest$ = 44						; size = 4
__DrawBitLine4BPP PROC					; COMDAT
; Line 334
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 336
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	DWORD PTR _pUsage$[ebp], eax
; Line 337
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 338
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _Diff$[ebp]
	and	ecx, 1
	shl	ecx, 2
	shl	edx, cl
	mov	BYTE PTR _pixels$[ebp], dl
; Line 339
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv71[ebp], eax
	je	SHORT $LN16@DrawBitLin@3
	cmp	DWORD PTR tv71[ebp], 2
	je	$LN9@DrawBitLin@3
	jmp	$LN19@DrawBitLin@3
$LN16@DrawBitLin@3:
; Line 344
	cmp	DWORD PTR _Diff$[ebp], 0
	je	SHORT $LN15@DrawBitLin@3
; Line 345
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv82[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	movzx	edx, BYTE PTR _pixels$[ebp]
	sar	edx, 4
	mov	esi, esp
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR tv82[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDev$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 346
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
; Line 347
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
$LN15@DrawBitLin@3:
; Line 352
	cmp	DWORD PTR _xsize$[ebp], 2
	jl	$LN14@DrawBitLin@3
; Line 353
	mov	eax, DWORD PTR _xsize$[ebp]
	sar	eax, 1
	mov	DWORD PTR _i$10131[ebp], eax
; Line 354
	mov	eax, DWORD PTR _xsize$[ebp]
	and	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
$LN13@DrawBitLin@3:
; Line 356
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	movzx	edx, BYTE PTR _pixels$[ebp]
	sar	edx, 4
	mov	esi, esp
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR tv131[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDev$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 357
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv143[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	movzx	edx, BYTE PTR _pixels$[ebp]
	and	edx, 15					; 0000000fH
	mov	esi, esp
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR tv143[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDev$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 358
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 359
	mov	eax, DWORD PTR _i$10131[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$10131[ebp], eax
	jne	$LN13@DrawBitLin@3
$LN14@DrawBitLin@3:
; Line 364
	cmp	DWORD PTR _xsize$[ebp], 0
	je	SHORT $LN10@DrawBitLin@3
; Line 365
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv159[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	movzx	edx, BYTE PTR _pixels$[ebp]
	sar	edx, 4
	mov	esi, esp
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR tv159[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDev$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@DrawBitLin@3:
; Line 367
	jmp	$LN19@DrawBitLin@3
$LN9@DrawBitLin@3:
; Line 372
	cmp	DWORD PTR _Diff$[ebp], 0
	je	SHORT $LN6@DrawBitLin@3
; Line 373
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 240				; 000000f0H
	je	SHORT $LN7@DrawBitLin@3
; Line 374
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 4
	mov	esi, esp
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@DrawBitLin@3:
; Line 376
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 377
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
; Line 378
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
$LN6@DrawBitLin@3:
; Line 383
	cmp	DWORD PTR _xsize$[ebp], 2
	jl	$LN5@DrawBitLin@3
; Line 387
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 240				; 000000f0H
	je	SHORT $LN4@DrawBitLin@3
; Line 388
	movzx	eax, BYTE PTR _pixels$[ebp]
	sar	eax, 4
	mov	esi, esp
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@DrawBitLin@3:
; Line 393
	movzx	eax, BYTE PTR _pixels$[ebp]
	and	eax, 15					; 0000000fH
	mov	BYTE PTR _pixels$[ebp], al
	movzx	ecx, BYTE PTR _pixels$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@DrawBitLin@3
; Line 394
	movzx	eax, BYTE PTR _pixels$[ebp]
	mov	esi, esp
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@DrawBitLin@3:
; Line 396
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 2
	mov	DWORD PTR _x$[ebp], eax
; Line 397
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 2
	mov	DWORD PTR _xsize$[ebp], eax
; Line 398
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _pixels$[ebp], dl
; Line 399
	jmp	$LN6@DrawBitLin@3
$LN5@DrawBitLin@3:
; Line 403
	cmp	DWORD PTR _xsize$[ebp], 0
	je	SHORT $LN19@DrawBitLin@3
; Line 404
	mov	al, BYTE PTR _pixels$[ebp]
	shr	al, 4
	mov	BYTE PTR _pixels$[ebp], al
	movzx	ecx, BYTE PTR _pixels$[ebp]
	test	ecx, ecx
	je	SHORT $LN19@DrawBitLin@3
; Line 405
	movzx	eax, BYTE PTR _pixels$[ebp]
	mov	esi, esp
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN19@DrawBitLin@3:
; Line 410
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine4BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine8BPP
_TEXT	SEGMENT
tv75 = -196						; size = 4
tv66 = -196						; size = 4
_pDevice$ = 8						; size = 4
_pUsage$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_pSrc$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
_pDev$ = 36						; size = 4
_pDest$ = 40						; size = 4
__DrawBitLine8BPP PROC					; COMDAT
; Line 417
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 418
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	DWORD PTR _pUsage$[ebp], eax
; Line 419
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 420
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv66[ebp], eax
	je	SHORT $LN8@DrawBitLin@4
	cmp	DWORD PTR tv66[ebp], 2
	je	SHORT $LN4@DrawBitLin@4
	jmp	$LN12@DrawBitLin@4
$LN8@DrawBitLin@4:
; Line 423
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv75[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _pSrc$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv75[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 424
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN8@DrawBitLin@4
; Line 426
	jmp	SHORT $LN12@DrawBitLin@4
$LN4@DrawBitLin@4:
; Line 429
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@DrawBitLin@4
; Line 430
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DrawBitLin@4:
; Line 432
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 433
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 434
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN4@DrawBitLin@4
$LN12@DrawBitLin@4:
; Line 437
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine8BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine8BPP_DDB
_TEXT	SEGMENT
tv73 = -196						; size = 4
tv66 = -196						; size = 4
_pDevice$ = 8						; size = 4
_pUsage$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_pSrc$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pDev$ = 32						; size = 4
_pDest$ = 36						; size = 4
__DrawBitLine8BPP_DDB PROC				; COMDAT
; Line 443
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 444
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	DWORD PTR _pUsage$[ebp], eax
; Line 445
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 446
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv66[ebp], eax
	je	SHORT $LN8@DrawBitLin@5
	cmp	DWORD PTR tv66[ebp], 2
	je	SHORT $LN4@DrawBitLin@5
	jmp	$LN12@DrawBitLin@5
$LN8@DrawBitLin@5:
; Line 449
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _pSrc$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv73[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 450
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 451
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN8@DrawBitLin@5
; Line 452
	jmp	SHORT $LN12@DrawBitLin@5
$LN4@DrawBitLin@5:
; Line 455
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@DrawBitLin@5
; Line 456
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDev$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DrawBitLin@5:
; Line 458
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 459
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 460
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN4@DrawBitLin@5
$LN12@DrawBitLin@5:
; Line 463
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine8BPP_DDB ENDP
_TEXT	ENDS
EXTRN	_GUI__memset:PROC
EXTRN	_LCD_pColorIndex:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __FillRect
_TEXT	SEGMENT
tv180 = -304						; size = 4
tv157 = -304						; size = 4
tv144 = -304						; size = 4
tv92 = -304						; size = 4
_ColorIndex$ = -104					; size = 4
_FillByte$ = -92					; size = 4
_Color$ = -80						; size = 4
_RemPixels$ = -68					; size = 4
_NumBytes$ = -56					; size = 4
_Len$ = -44						; size = 4
_Bit$ = -32						; size = 4
_pData$ = -20						; size = 4
_pDev$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
__FillRect PROC						; COMDAT
; Line 531
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 537
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 538
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 539
	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _x0$[ebp]
	add	eax, 1
	mov	DWORD PTR _Len$[ebp], eax
; Line 543
	mov	eax, DWORD PTR _pDev$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN23@FillRect
; Line 544
	mov	eax, DWORD PTR _y1$[ebp]
	sub	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _Len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	push	eax
	call	_GUI_USAGE_AddRect
	add	esp, 20					; 00000014H
$LN23@FillRect:
; Line 545
	jmp	SHORT $LN22@FillRect
$LN21@FillRect:
; Line 549
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
$LN22@FillRect:
	mov	eax, DWORD PTR _y0$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jg	$LN24@FillRect
; Line 550
	lea	eax, DWORD PTR _Bit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	__XY2PTR_BITOFFSET
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pData$[ebp], eax
; Line 551
	mov	eax, DWORD PTR _Len$[ebp]
	mov	DWORD PTR _RemPixels$[ebp], eax
; Line 552
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 1
	je	$LN19@FillRect
; Line 553
	cmp	DWORD PTR _Bit$[ebp], 7
	jge	SHORT $LN18@FillRect
$LN17@FillRect:
; Line 554
	cmp	DWORD PTR _Bit$[ebp], 0
	jl	SHORT $LN16@FillRect
	mov	eax, DWORD PTR _RemPixels$[ebp]
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR _RemPixels$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _RemPixels$[ebp], ecx
	cmp	DWORD PTR tv92[ebp], 0
	je	SHORT $LN16@FillRect
; Line 555
	mov	eax, 1
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	xor	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _Bit$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _Bit$[ebp], ecx
; Line 556
	jmp	SHORT $LN17@FillRect
$LN16@FillRect:
; Line 557
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 1
	mov	DWORD PTR _pData$[ebp], eax
$LN18@FillRect:
; Line 559
	cmp	DWORD PTR _RemPixels$[ebp], 0
	jle	$LN15@FillRect
; Line 560
	mov	eax, DWORD PTR _RemPixels$[ebp]
	sar	eax, 3
	mov	DWORD PTR _NumBytes$[ebp], eax
; Line 561
	cmp	DWORD PTR _NumBytes$[ebp], 0
	jle	SHORT $LN14@FillRect
; Line 562
	mov	eax, DWORD PTR _NumBytes$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _RemPixels$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _RemPixels$[ebp], ecx
$LN13@FillRect:
; Line 564
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [edx], cl
; Line 565
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 1
	mov	DWORD PTR _pData$[ebp], eax
; Line 566
	mov	eax, DWORD PTR _NumBytes$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumBytes$[ebp], eax
	jne	SHORT $LN13@FillRect
$LN14@FillRect:
; Line 568
	mov	DWORD PTR _Bit$[ebp], 7
$LN10@FillRect:
; Line 569
	mov	eax, DWORD PTR _RemPixels$[ebp]
	mov	DWORD PTR tv144[ebp], eax
	mov	ecx, DWORD PTR _RemPixels$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _RemPixels$[ebp], ecx
	cmp	DWORD PTR tv144[ebp], 0
	je	SHORT $LN15@FillRect
; Line 570
	mov	eax, 1
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	xor	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _Bit$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _Bit$[ebp], ecx
; Line 571
	jmp	SHORT $LN10@FillRect
$LN15@FillRect:
; Line 573
	jmp	$LN8@FillRect
$LN19@FillRect:
; Line 574
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ColorIndex$[ebp], ecx
; Line 575
	mov	eax, DWORD PTR _ColorIndex$[ebp]
	and	eax, 1
	mov	DWORD PTR _Color$[ebp], eax
; Line 576
	mov	eax, DWORD PTR _Color$[ebp]
	neg	eax
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _FillByte$[ebp], eax
; Line 577
	cmp	DWORD PTR _Bit$[ebp], 7
	jge	SHORT $LN7@FillRect
$LN6@FillRect:
; Line 578
	cmp	DWORD PTR _Bit$[ebp], 0
	jl	SHORT $LN5@FillRect
	mov	eax, DWORD PTR _RemPixels$[ebp]
	mov	DWORD PTR tv157[ebp], eax
	mov	ecx, DWORD PTR _RemPixels$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _RemPixels$[ebp], ecx
	cmp	DWORD PTR tv157[ebp], 0
	je	SHORT $LN5@FillRect
; Line 579
	mov	eax, 1
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
; Line 580
	mov	eax, DWORD PTR _Color$[ebp]
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _Bit$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _Bit$[ebp], ecx
; Line 581
	jmp	SHORT $LN6@FillRect
$LN5@FillRect:
; Line 582
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 1
	mov	DWORD PTR _pData$[ebp], eax
$LN7@FillRect:
; Line 584
	cmp	DWORD PTR _RemPixels$[ebp], 0
	jle	$LN8@FillRect
; Line 585
	mov	eax, DWORD PTR _RemPixels$[ebp]
	sar	eax, 3
	mov	DWORD PTR _NumBytes$[ebp], eax
; Line 586
	cmp	DWORD PTR _NumBytes$[ebp], 0
	jle	SHORT $LN3@FillRect
; Line 587
	mov	eax, DWORD PTR _NumBytes$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _FillByte$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	call	_GUI__memset
	add	esp, 12					; 0000000cH
; Line 588
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _NumBytes$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 589
	mov	eax, DWORD PTR _NumBytes$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _RemPixels$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _RemPixels$[ebp], ecx
$LN3@FillRect:
; Line 591
	mov	DWORD PTR _Bit$[ebp], 7
$LN2@FillRect:
; Line 592
	mov	eax, DWORD PTR _RemPixels$[ebp]
	mov	DWORD PTR tv180[ebp], eax
	mov	ecx, DWORD PTR _RemPixels$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _RemPixels$[ebp], ecx
	cmp	DWORD PTR tv180[ebp], 0
	je	SHORT $LN8@FillRect
; Line 593
	mov	eax, 1
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
; Line 594
	mov	eax, DWORD PTR _Color$[ebp]
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _Bit$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _Bit$[ebp], ecx
; Line 595
	jmp	SHORT $LN2@FillRect
$LN8@FillRect:
; Line 598
	jmp	$LN21@FillRect
$LN24@FillRect:
; Line 599
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@FillRect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN28@FillRect:
	DD	1
	DD	$LN27@FillRect
$LN27@FillRect:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN26@FillRect
$LN26@FillRect:
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
__FillRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawHLine
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y$ = 16						; size = 4
_x1$ = 20						; size = 4
__DrawHLine PROC					; COMDAT
; Line 605
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 606
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__FillRect
	add	esp, 20					; 00000014H
; Line 607
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawHLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawVLine
_TEXT	SEGMENT
tv70 = -292						; size = 4
_ColorIndex$ = -92					; size = 4
_Pixel$ = -80						; size = 4
_Mask$ = -68						; size = 4
_Bit$ = -56						; size = 4
_pData$ = -44						; size = 4
_pUsage$ = -32						; size = 4
_hUsage$ = -20						; size = 4
_pDev$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y0$ = 16						; size = 4
_y1$ = 20						; size = 4
__DrawVLine PROC					; COMDAT
; Line 613
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 621
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 622
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 623
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _hUsage$[ebp], ecx
; Line 624
	cmp	DWORD PTR _hUsage$[ebp], 0
	je	SHORT $LN13@DrawVLine
	mov	eax, DWORD PTR _hUsage$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN14@DrawVLine
$LN13@DrawVLine:
	mov	DWORD PTR tv70[ebp], 0
$LN14@DrawVLine:
	mov	ecx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _pUsage$[ebp], ecx
; Line 625
	lea	eax, DWORD PTR _Bit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__XY2PTR_BITOFFSET
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pData$[ebp], eax
; Line 626
	mov	eax, 1
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	eax, cl
	mov	DWORD PTR _Mask$[ebp], eax
; Line 627
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 1
	je	SHORT $LN10@DrawVLine
$LN9@DrawVLine:
; Line 629
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, DWORD PTR _Mask$[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [edx], cl
; Line 630
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN6@DrawVLine
; Line 631
	mov	esi, esp
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@DrawVLine:
; Line 633
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	add	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pData$[ebp], ecx
; Line 634
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
	mov	ecx, DWORD PTR _y0$[ebp]
	cmp	ecx, DWORD PTR _y1$[ebp]
	jle	SHORT $LN9@DrawVLine
; Line 635
	jmp	SHORT $LN11@DrawVLine
$LN10@DrawVLine:
; Line 636
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ColorIndex$[ebp], ecx
; Line 637
	mov	eax, DWORD PTR _ColorIndex$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	eax, cl
	mov	DWORD PTR _Pixel$[ebp], eax
$LN4@DrawVLine:
; Line 639
	mov	eax, DWORD PTR _Mask$[ebp]
	not	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
; Line 640
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax]
	or	ecx, DWORD PTR _Pixel$[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [edx], cl
; Line 641
	cmp	DWORD PTR _pUsage$[ebp], 0
	je	SHORT $LN1@DrawVLine
; Line 642
	mov	esi, esp
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DrawVLine:
; Line 644
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	add	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pData$[ebp], ecx
; Line 645
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
	mov	ecx, DWORD PTR _y0$[ebp]
	cmp	ecx, DWORD PTR _y1$[ebp]
	jle	SHORT $LN4@DrawVLine
$LN11@DrawVLine:
; Line 647
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@DrawVLine
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN17@DrawVLine:
	DD	1
	DD	$LN16@DrawVLine
$LN16@DrawVLine:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN15@DrawVLine
$LN15@DrawVLine:
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
__DrawVLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetPixelIndex
_TEXT	SEGMENT
_Bit$ = -32						; size = 4
_pData$ = -20						; size = 4
_pDev$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_Index$ = 20						; size = 4
__SetPixelIndex PROC					; COMDAT
; Line 653
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 658
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 659
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 660
	lea	eax, DWORD PTR _Bit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__XY2PTR_BITOFFSET
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pData$[ebp], eax
; Line 661
	mov	eax, 1
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
; Line 662
	mov	eax, DWORD PTR _Index$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
; Line 663
	mov	eax, DWORD PTR _pDev$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN2@SetPixelIn
; Line 664
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDev$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SetPixelIn:
; Line 666
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SetPixelIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@SetPixelIn:
	DD	1
	DD	$LN5@SetPixelIn
$LN5@SetPixelIn:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@SetPixelIn
$LN4@SetPixelIn:
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
__SetPixelIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __XorPixel
_TEXT	SEGMENT
_Bit$ = -32						; size = 4
_pData$ = -20						; size = 4
_pDev$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__XorPixel PROC						; COMDAT
; Line 672
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 677
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 678
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 679
	lea	eax, DWORD PTR _Bit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__XY2PTR_BITOFFSET
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pData$[ebp], eax
; Line 680
	mov	eax, 1
	mov	ecx, DWORD PTR _Bit$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	xor	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
; Line 681
	mov	eax, DWORD PTR _pDev$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN2@XorPixel
; Line 682
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDev$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pDev$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@XorPixel:
; Line 684
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XorPixel
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@XorPixel:
	DD	1
	DD	$LN5@XorPixel
$LN5@XorPixel:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@XorPixel
$LN4@XorPixel:
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
__XorPixel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetPixelIndex
_TEXT	SEGMENT
_Bit$ = -20						; size = 4
_pData$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__GetPixelIndex PROC					; COMDAT
; Line 690
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 694
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 695
	lea	eax, DWORD PTR _Bit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__XY2PTR_BITOFFSET
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pData$[ebp], eax
; Line 696
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	eax, BYTE PTR [eax]
	mov	ecx, DWORD PTR _Bit$[ebp]
	sar	eax, cl
	and	eax, 1
; Line 697
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GetPixelIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@GetPixelIn:
	DD	1
	DD	$LN4@GetPixelIn
$LN4@GetPixelIn:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@GetPixelIn
$LN3@GetPixelIn:
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
__GetPixelIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetRect
_TEXT	SEGMENT
_pDev$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_pRect$ = 12						; size = 4
__GetRect PROC						; COMDAT
; Line 703
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 706
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 707
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	ecx, DWORD PTR _pDev$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax], dx
; Line 708
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	ecx, DWORD PTR _pDev$[ebp]
	mov	dx, WORD PTR [ecx+6]
	mov	WORD PTR [eax+2], dx
; Line 709
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [edx+8]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	edx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [edx+4], cx
; Line 710
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [edx+10]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	edx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [edx+6], cx
; Line 711
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevData
_TEXT	SEGMENT
tv64 = -196						; size = 4
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevData PROC					; COMDAT
; Line 717
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 718
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 719
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN1@GetDevData
	jmp	SHORT $LN2@GetDevData
$LN1@GetDevData:
; Line 721
	mov	eax, OFFSET _GUI_MEMDEV_DEVICE_1
	jmp	SHORT $LN4@GetDevData
$LN2@GetDevData:
; Line 723
	xor	eax, eax
$LN4@GetDevData:
; Line 724
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevData ENDP
_TEXT	ENDS
EXTRN	_GUI_MEMDEV__WriteToActiveOpaque:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetDevFunc
_TEXT	SEGMENT
tv64 = -196						; size = 4
_ppDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevFunc PROC					; COMDAT
; Line 730
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 731
	mov	eax, DWORD PTR _ppDevice$[ebp]
	mov	DWORD PTR _ppDevice$[ebp], eax
; Line 732
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 22			; 00000016H
	je	SHORT $LN1@GetDevFunc
	jmp	SHORT $LN2@GetDevFunc
$LN1@GetDevFunc:
; Line 734
	mov	eax, OFFSET _GUI_MEMDEV__WriteToActiveOpaque
	jmp	SHORT $LN4@GetDevFunc
$LN2@GetDevFunc:
; Line 736
	xor	eax, eax
$LN4@GetDevFunc:
; Line 737
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevFunc ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetOrg
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__SetOrg PROC						; COMDAT
; Line 743
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 744
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 745
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 746
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetOrg ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevProp
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevProp PROC					; COMDAT
; Line 747
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 748
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 749
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+40]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 750
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevProp ENDP
_TEXT	ENDS
END
