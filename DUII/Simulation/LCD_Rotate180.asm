; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\LCD_Rotate180.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_LCD_APIList180
_DATA	SEGMENT
_LCD_APIList180 DD FLAT:__DrawBitmap180
	DD	FLAT:__Rect2TextRect
_DATA	ENDS
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\lcd_rotate180.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __Rect2TextRect
_TEXT	SEGMENT
_pRect$ = 8						; size = 4
__Rect2TextRect PROC					; COMDAT
; Line 197
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 198
	mov	eax, DWORD PTR _pRect$[ebp]
	mov	DWORD PTR _pRect$[ebp], eax
; Line 200
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__Rect2TextRect ENDP
_TEXT	ENDS
EXTRN	_LCD_FillRect:PROC
EXTRN	_LCD_pColorIndex:DWORD
EXTRN	_GUI_Context:BYTE
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitmap180
_TEXT	SEGMENT
tv130 = -364						; size = 4
_OldColor$9315 = -164					; size = 4
_Index$9311 = -149					; size = 1
_pDataLine$9307 = -140					; size = 4
_xi$9306 = -128						; size = 4
_BitsLeft$9305 = -116					; size = 4
_yMax$9303 = -104					; size = 4
_Shift$9299 = -92					; size = 4
_yi$9298 = -80						; size = 4
_y$9297 = -68						; size = 4
_x$9296 = -56						; size = 4
_Diff$ = -44						; size = 4
_y1$ = -32						; size = 4
_x1$ = -20						; size = 4
_Data$ = -5						; size = 1
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xsize$ = 16						; size = 4
_ysize$ = 20						; size = 4
_xMul$ = 24						; size = 4
_yMul$ = 28						; size = 4
_BitsPerPixel$ = 32					; size = 4
_BytesPerLine$ = 36					; size = 4
_pPixel$ = 40						; size = 4
_pTrans$ = 44						; size = 4
__DrawBitmap180 PROC					; COMDAT
; Line 243
	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 244
	mov	BYTE PTR _Data$[ebp], 0
; Line 247
	mov	eax, DWORD PTR _ysize$[ebp]
	mov	ecx, DWORD PTR _y0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _y1$[ebp], edx
; Line 248
	mov	eax, DWORD PTR _xsize$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _x1$[ebp], edx
; Line 250
	lea	eax, DWORD PTR _y0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	__TransformPoint180
	add	esp, 8
; Line 251
	lea	eax, DWORD PTR _y1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x1$[ebp]
	push	ecx
	call	__TransformPoint180
	add	esp, 8
; Line 253
	cmp	DWORD PTR _xMul$[ebp], 1
	jne	$LN23@DrawBitmap
	cmp	DWORD PTR _yMul$[ebp], 1
	jne	$LN23@DrawBitmap
; Line 255
	movsx	eax, WORD PTR _GUI_Context+14
	cmp	DWORD PTR _y0$[ebp], eax
	jle	SHORT $LN22@DrawBitmap
; Line 256
	movsx	eax, WORD PTR _GUI_Context+14
	mov	ecx, DWORD PTR _y0$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _Diff$[ebp], ecx
; Line 257
	movsx	eax, WORD PTR _GUI_Context+14
	mov	DWORD PTR _y0$[ebp], eax
; Line 258
	mov	eax, DWORD PTR _Diff$[ebp]
	imul	eax, DWORD PTR _BytesPerLine$[ebp]
	add	eax, DWORD PTR _pPixel$[ebp]
	mov	DWORD PTR _pPixel$[ebp], eax
; Line 259
	mov	eax, DWORD PTR _ysize$[ebp]
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _ysize$[ebp], eax
$LN22@DrawBitmap:
; Line 262
	movsx	eax, WORD PTR _GUI_Context+10
	cmp	DWORD PTR _y1$[ebp], eax
	jge	SHORT $LN21@DrawBitmap
; Line 263
	movsx	eax, WORD PTR _GUI_Context+10
	sub	eax, DWORD PTR _y1$[ebp]
	mov	DWORD PTR _Diff$[ebp], eax
; Line 264
	mov	eax, DWORD PTR _ysize$[ebp]
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _ysize$[ebp], eax
$LN21@DrawBitmap:
; Line 266
	cmp	DWORD PTR _ysize$[ebp], 0
	jg	SHORT $LN20@DrawBitmap
; Line 267
	jmp	$LN24@DrawBitmap
$LN20@DrawBitmap:
; Line 270
	movsx	eax, WORD PTR _GUI_Context+8
	cmp	DWORD PTR _x1$[ebp], eax
	jge	SHORT $LN19@DrawBitmap
; Line 271
	movsx	eax, WORD PTR _GUI_Context+8
	sub	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _Diff$[ebp], eax
; Line 272
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _xsize$[ebp], eax
$LN19@DrawBitmap:
; Line 275
	mov	DWORD PTR _Diff$[ebp], 0
; Line 276
	movsx	eax, WORD PTR _GUI_Context+12
	cmp	DWORD PTR _x0$[ebp], eax
	jle	SHORT $LN18@DrawBitmap
; Line 277
	movsx	eax, WORD PTR _GUI_Context+12
	mov	ecx, DWORD PTR _x0$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _Diff$[ebp], ecx
; Line 278
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _xsize$[ebp], eax
; Line 279
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR tv130[ebp], eax
	cmp	DWORD PTR tv130[ebp], 1
	je	SHORT $LN15@DrawBitmap
	jmp	SHORT $LN18@DrawBitmap
$LN15@DrawBitmap:
; Line 281
	mov	eax, DWORD PTR _Diff$[ebp]
	sar	eax, 3
	add	eax, DWORD PTR _pPixel$[ebp]
	mov	DWORD PTR _pPixel$[ebp], eax
	mov	eax, DWORD PTR _Diff$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _x0$[ebp], edx
	mov	eax, DWORD PTR _Diff$[ebp]
	and	eax, 7
	mov	DWORD PTR _Diff$[ebp], eax
$LN18@DrawBitmap:
; Line 285
	cmp	DWORD PTR _xsize$[ebp], 0
	jg	SHORT $LN14@DrawBitmap
; Line 286
	jmp	$LN24@DrawBitmap
$LN14@DrawBitmap:
; Line 288
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Diff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pPixel$[ebp]
	push	edx
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BitsPerPixel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ysize$[ebp]
	push	edx
	mov	eax, DWORD PTR _xsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	__DrawBitmap
	add	esp, 36					; 00000024H
; Line 289
	jmp	$LN24@DrawBitmap
$LN23@DrawBitmap:
; Line 293
	mov	eax, 8
	sub	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR _Shift$9299[ebp], eax
; Line 294
	mov	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _y$9297[ebp], eax
	mov	DWORD PTR _yi$9298[ebp], 0
	jmp	SHORT $LN12@DrawBitmap
$LN11@DrawBitmap:
	mov	eax, DWORD PTR _yi$9298[ebp]
	add	eax, 1
	mov	DWORD PTR _yi$9298[ebp], eax
	mov	ecx, DWORD PTR _y$9297[ebp]
	sub	ecx, DWORD PTR _yMul$[ebp]
	mov	DWORD PTR _y$9297[ebp], ecx
	mov	edx, DWORD PTR _pPixel$[ebp]
	add	edx, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pPixel$[ebp], edx
$LN12@DrawBitmap:
	mov	eax, DWORD PTR _yi$9298[ebp]
	cmp	eax, DWORD PTR _ysize$[ebp]
	jge	$LN24@DrawBitmap
; Line 295
	mov	eax, DWORD PTR _yMul$[ebp]
	mov	ecx, DWORD PTR _y$9297[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _yMax$9303[ebp], edx
; Line 297
	movsx	eax, WORD PTR _GUI_Context+10
	cmp	DWORD PTR _yMax$9303[ebp], eax
	jl	$LN9@DrawBitmap
	movsx	eax, WORD PTR _GUI_Context+14
	cmp	DWORD PTR _y$9297[ebp], eax
	jg	$LN9@DrawBitmap
; Line 298
	mov	DWORD PTR _BitsLeft$9305[ebp], 0
; Line 300
	mov	eax, DWORD PTR _pPixel$[ebp]
	mov	DWORD PTR _pDataLine$9307[ebp], eax
; Line 301
	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x$9296[ebp], eax
	mov	DWORD PTR _xi$9306[ebp], 0
	jmp	SHORT $LN8@DrawBitmap
$LN7@DrawBitmap:
	mov	eax, DWORD PTR _xi$9306[ebp]
	add	eax, 1
	mov	DWORD PTR _xi$9306[ebp], eax
	mov	ecx, DWORD PTR _x$9296[ebp]
	sub	ecx, DWORD PTR _xMul$[ebp]
	mov	DWORD PTR _x$9296[ebp], ecx
$LN8@DrawBitmap:
	mov	eax, DWORD PTR _xi$9306[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jge	$LN9@DrawBitmap
; Line 303
	cmp	DWORD PTR _BitsLeft$9305[ebp], 0
	jne	SHORT $LN5@DrawBitmap
; Line 304
	mov	eax, DWORD PTR _pDataLine$9307[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _Data$[ebp], cl
	mov	edx, DWORD PTR _pDataLine$9307[ebp]
	add	edx, 1
	mov	DWORD PTR _pDataLine$9307[ebp], edx
; Line 305
	mov	DWORD PTR _BitsLeft$9305[ebp], 8
$LN5@DrawBitmap:
; Line 307
	movzx	eax, BYTE PTR _Data$[ebp]
	mov	ecx, DWORD PTR _Shift$9299[ebp]
	sar	eax, cl
	mov	BYTE PTR _Index$9311[ebp], al
; Line 308
	mov	al, BYTE PTR _Data$[ebp]
	mov	cl, BYTE PTR _BitsPerPixel$[ebp]
	shl	al, cl
	mov	BYTE PTR _Data$[ebp], al
; Line 309
	mov	eax, DWORD PTR _BitsLeft$9305[ebp]
	sub	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR _BitsLeft$9305[ebp], eax
; Line 310
	movzx	eax, BYTE PTR _Index$9311[ebp]
	test	eax, eax
	jne	SHORT $LN3@DrawBitmap
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 2
	jne	SHORT $LN4@DrawBitmap
$LN3@DrawBitmap:
; Line 311
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _OldColor$9315[ebp], ecx
; Line 312
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	SHORT $LN2@DrawBitmap
; Line 313
	movzx	eax, BYTE PTR _Index$9311[ebp]
	mov	ecx, DWORD PTR _LCD_pColorIndex
	mov	edx, DWORD PTR _pTrans$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx], eax
; Line 314
	jmp	SHORT $LN1@DrawBitmap
$LN2@DrawBitmap:
; Line 315
	movzx	eax, BYTE PTR _Index$9311[ebp]
	mov	ecx, DWORD PTR _LCD_pColorIndex
	mov	DWORD PTR [ecx], eax
$LN1@DrawBitmap:
; Line 317
	mov	eax, DWORD PTR _yMax$9303[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$9296[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$9297[ebp]
	push	edx
	mov	eax, DWORD PTR _x$9296[ebp]
	sub	eax, DWORD PTR _xMul$[ebp]
	add	eax, 1
	push	eax
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
; Line 318
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR _OldColor$9315[ebp]
	mov	DWORD PTR [eax], ecx
$LN4@DrawBitmap:
; Line 320
	jmp	$LN7@DrawBitmap
$LN9@DrawBitmap:
; Line 322
	jmp	$LN11@DrawBitmap
$LN24@DrawBitmap:
; Line 324
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@DrawBitmap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@DrawBitmap:
	DD	2
	DD	$LN28@DrawBitmap
$LN28@DrawBitmap:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN26@DrawBitmap
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN27@DrawBitmap
$LN27@DrawBitmap:
	DB	121					; 00000079H
	DB	49					; 00000031H
	DB	0
$LN26@DrawBitmap:
	DB	120					; 00000078H
	DB	49					; 00000031H
	DB	0
__DrawBitmap180 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitmap
_TEXT	SEGMENT
tv66 = -208						; size = 4
_i$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xsize$ = 16						; size = 4
_ysize$ = 20						; size = 4
_BitsPerPixel$ = 24					; size = 4
_BytesPerLine$ = 28					; size = 4
_pData$ = 32						; size = 4
_Diff$ = 36						; size = 4
_pTrans$ = 40						; size = 4
__DrawBitmap PROC					; COMDAT
; Line 170
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 173
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@DrawBitmap@2
$LN7@DrawBitmap@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@DrawBitmap@2:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ysize$[ebp]
	jge	$LN9@DrawBitmap@2
; Line 174
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 1
	je	SHORT $LN3@DrawBitmap@2
	cmp	DWORD PTR tv66[ebp], 2
	je	SHORT $LN2@DrawBitmap@2
	cmp	DWORD PTR tv66[ebp], 4
	je	SHORT $LN1@DrawBitmap@2
	jmp	SHORT $LN4@DrawBitmap@2
$LN3@DrawBitmap@2:
; Line 176
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	sub	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	__DrawBitLine1BPP
	add	esp, 24					; 00000018H
; Line 177
	jmp	SHORT $LN4@DrawBitmap@2
$LN2@DrawBitmap@2:
; Line 179
	mov	eax, DWORD PTR _xsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Diff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	__DrawBitLine2BPP
	add	esp, 20					; 00000014H
; Line 180
	jmp	SHORT $LN4@DrawBitmap@2
$LN1@DrawBitmap@2:
; Line 182
	mov	eax, DWORD PTR _xsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Diff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	__DrawBitLine4BPP
	add	esp, 20					; 00000014H
$LN4@DrawBitmap@2:
; Line 185
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 186
	jmp	$LN7@DrawBitmap@2
$LN9@DrawBitmap@2:
; Line 187
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitmap ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine1BPP
_TEXT	SEGMENT
tv78 = -244						; size = 4
tv68 = -244						; size = 4
_Pixel$ = -44						; size = 4
_IndexMask$ = -32					; size = 4
_Index1$ = -20						; size = 4
_Index0$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_p$ = 16						; size = 4
_Diff$ = 20						; size = 4
_xsize$ = 24						; size = 4
_pTrans$ = 28						; size = 4
__DrawBitLine1BPP PROC					; COMDAT
; Line 58
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 62
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Index0$[ebp], ecx
; Line 63
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Index1$[ebp], ecx
; Line 64
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 65
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv68[ebp], eax
	je	SHORT $LN16@DrawBitLin
	cmp	DWORD PTR tv68[ebp], 1
	je	$LN6@DrawBitLin
	cmp	DWORD PTR tv68[ebp], 2
	je	$LN11@DrawBitLin
	jmp	$LN20@DrawBitLin
$LN16@DrawBitLin:
; Line 68
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN22@DrawBitLin
	mov	ecx, DWORD PTR _Index1$[ebp]
	mov	DWORD PTR tv78[ebp], ecx
	jmp	SHORT $LN23@DrawBitLin
$LN22@DrawBitLin:
	mov	edx, DWORD PTR _Index0$[ebp]
	mov	DWORD PTR tv78[ebp], edx
$LN23@DrawBitLin:
	mov	esi, esp
	mov	eax, DWORD PTR tv78[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	ecx, DWORD PTR _GUI_Context[eax*4+72]
	push	ecx
	movzx	edx, BYTE PTR _GUI_Context+17
	mov	eax, DWORD PTR _GUI_Context[edx*4+72]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 69
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 70
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN15@DrawBitLin
; Line 71
	mov	DWORD PTR _Diff$[ebp], 0
; Line 72
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN15@DrawBitLin:
; Line 74
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN16@DrawBitLin
; Line 75
	jmp	$LN20@DrawBitLin
$LN11@DrawBitLin:
; Line 78
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN8@DrawBitLin
; Line 79
	mov	esi, esp
	mov	eax, DWORD PTR _Index1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	ecx, DWORD PTR _GUI_Context[eax*4+72]
	push	ecx
	movzx	edx, BYTE PTR _GUI_Context+17
	mov	eax, DWORD PTR _GUI_Context[edx*4+72]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@DrawBitLin:
; Line 81
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 82
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN10@DrawBitLin
; Line 83
	mov	DWORD PTR _Diff$[ebp], 0
; Line 84
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN10@DrawBitLin:
; Line 86
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN11@DrawBitLin
; Line 87
	jmp	$LN20@DrawBitLin
$LN6@DrawBitLin:
; Line 89
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	ecx, DWORD PTR _GUI_Context[eax*4+72]
	mov	edx, DWORD PTR [ecx+16]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$[ebp], eax
$LN5@DrawBitLin:
; Line 91
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN2@DrawBitLin
; Line 92
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _GUI_Context+17
	mov	eax, DWORD PTR _GUI_Context[edx*4+72]
	push	eax
	movzx	ecx, BYTE PTR _GUI_Context+17
	mov	edx, DWORD PTR _GUI_Context[ecx*4+72]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Pixel$[ebp], eax
; Line 93
	mov	eax, DWORD PTR _Pixel$[ebp]
	xor	eax, DWORD PTR _IndexMask$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	ecx, DWORD PTR _GUI_Context[eax*4+72]
	push	ecx
	movzx	edx, BYTE PTR _GUI_Context+17
	mov	eax, DWORD PTR _GUI_Context[edx*4+72]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawBitLin:
; Line 95
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 96
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN4@DrawBitLin
; Line 97
	mov	DWORD PTR _Diff$[ebp], 0
; Line 98
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN4@DrawBitLin:
; Line 100
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN5@DrawBitLin
$LN20@DrawBitLin:
; Line 103
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine1BPP ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitLine2BPP
_TEXT	SEGMENT
_aConvTable$ = -96					; size = 16
_pfSetPixelAA$ = -72					; size = 4
_Index$ = -60						; size = 4
_Shift$ = -48						; size = 4
_CurrentPixel$ = -36					; size = 4
_PixelIndex$ = -24					; size = 4
_Pixels$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_p$ = 16						; size = 4
_Diff$ = 20						; size = 4
_xsize$ = 24						; size = 4
__DrawBitLine2BPP PROC					; COMDAT
; Line 109
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 113
	mov	DWORD PTR _aConvTable$[ebp], 0
	mov	DWORD PTR _aConvTable$[ebp+4], 5
	mov	DWORD PTR _aConvTable$[ebp+8], 10	; 0000000aH
	mov	DWORD PTR _aConvTable$[ebp+12], 15	; 0000000fH
; Line 115
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixels$[ebp], ecx
; Line 116
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _CurrentPixel$[ebp], eax
; Line 117
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 118
	call	__GetpfSetPixel
	mov	DWORD PTR _pfSetPixelAA$[ebp], eax
$LN4@DrawBitLin@2:
; Line 120
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$[ebp], eax
; Line 121
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 122
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _aConvTable$[ebp+eax*4]
	mov	DWORD PTR _PixelIndex$[ebp], ecx
; Line 123
	mov	esi, esp
	movzx	eax, BYTE PTR _PixelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	DWORD PTR _pfSetPixelAA$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 124
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 125
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN3@DrawBitLin@2
; Line 126
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 127
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN3@DrawBitLin@2:
; Line 129
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN4@DrawBitLin@2
; Line 130
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@DrawBitLin@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@DrawBitLin@2:
	DD	1
	DD	$LN8@DrawBitLin@2
$LN8@DrawBitLin@2:
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN7@DrawBitLin@2
$LN7@DrawBitLin@2:
	DB	97					; 00000061H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
__DrawBitLine2BPP ENDP
_TEXT	ENDS
EXTRN	_LCD_SetPixelAA_Xor:PROC
EXTRN	_LCD_SetPixelAA:PROC
EXTRN	_LCD_SetPixelAA_NoTrans:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetpfSetPixel
_TEXT	SEGMENT
tv66 = -196						; size = 4
__GetpfSetPixel PROC					; COMDAT
; Line 41
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 42
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 3
	ja	SHORT $LN4@GetpfSetPi
	mov	ecx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN8@GetpfSetPi[ecx*4]
$LN3@GetpfSetPi:
; Line 44
	mov	eax, OFFSET _LCD_SetPixelAA_NoTrans
	jmp	SHORT $LN6@GetpfSetPi
$LN2@GetpfSetPi:
; Line 46
	mov	eax, OFFSET _LCD_SetPixelAA
	jmp	SHORT $LN6@GetpfSetPi
$LN1@GetpfSetPi:
; Line 49
	mov	eax, OFFSET _LCD_SetPixelAA_Xor
	jmp	SHORT $LN6@GetpfSetPi
$LN4@GetpfSetPi:
; Line 51
	xor	eax, eax
$LN6@GetpfSetPi:
; Line 52
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@GetpfSetPi:
	DD	$LN3@GetpfSetPi
	DD	$LN1@GetpfSetPi
	DD	$LN2@GetpfSetPi
	DD	$LN1@GetpfSetPi
__GetpfSetPixel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine4BPP
_TEXT	SEGMENT
_pfSetPixelAA$ = -56					; size = 4
_Index$ = -44						; size = 4
_Shift$ = -32						; size = 4
_CurrentPixel$ = -20					; size = 4
_Pixels$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_p$ = 16						; size = 4
_Diff$ = 20						; size = 4
_xsize$ = 24						; size = 4
__DrawBitLine4BPP PROC					; COMDAT
; Line 136
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 141
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixels$[ebp], ecx
; Line 142
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _CurrentPixel$[ebp], eax
; Line 143
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 144
	call	__GetpfSetPixel
	mov	DWORD PTR _pfSetPixelAA$[ebp], eax
$LN4@DrawBitLin@3:
; Line 146
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 147
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 148
	mov	esi, esp
	movzx	eax, BYTE PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	DWORD PTR _pfSetPixelAA$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 149
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 150
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN3@DrawBitLin@3
; Line 151
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 152
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN3@DrawBitLin@3:
; Line 154
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN4@DrawBitLin@3
; Line 155
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine4BPP ENDP
_TEXT	ENDS
EXTRN	_GUI_RectDispString:QWORD
EXTRN	_LCD_GetYSize:PROC
EXTRN	_LCD_GetXSize:PROC
EXTRN	_WM_GetWindowRect:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __TransformPoint180
_TEXT	SEGMENT
_yNumPixel$ = -60					; size = 4
_xNumPixel$ = -48					; size = 4
_yPos$ = -36						; size = 4
_xPos$ = -24						; size = 4
_ClientRect$ = -12					; size = 8
_pXPos$ = 8						; size = 4
_pYPos$ = 12						; size = 4
__TransformPoint180 PROC				; COMDAT
; Line 211
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 212
	xor	eax, eax
	mov	WORD PTR _ClientRect$[ebp], ax
	xor	eax, eax
	mov	DWORD PTR _ClientRect$[ebp+2], eax
	mov	WORD PTR _ClientRect$[ebp+6], ax
; Line 216
	lea	eax, DWORD PTR _ClientRect$[ebp]
	push	eax
	call	_WM_GetWindowRect
	add	esp, 4
; Line 220
	call	_LCD_GetXSize
	sub	eax, 1
	mov	DWORD PTR _xNumPixel$[ebp], eax
; Line 221
	call	_LCD_GetYSize
	sub	eax, 1
	mov	DWORD PTR _yNumPixel$[ebp], eax
; Line 222
	movsx	eax, WORD PTR _ClientRect$[ebp+4]
	cmp	eax, DWORD PTR _xNumPixel$[ebp]
	jle	SHORT $LN2@TransformP
; Line 223
	mov	ax, WORD PTR _xNumPixel$[ebp]
	mov	WORD PTR _ClientRect$[ebp+4], ax
$LN2@TransformP:
; Line 225
	movsx	eax, WORD PTR _ClientRect$[ebp+6]
	cmp	eax, DWORD PTR _yNumPixel$[ebp]
	jle	SHORT $LN1@TransformP
; Line 226
	mov	ax, WORD PTR _yNumPixel$[ebp]
	mov	WORD PTR _ClientRect$[ebp+6], ax
$LN1@TransformP:
; Line 229
	mov	eax, DWORD PTR _pXPos$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _xPos$[ebp], ecx
; Line 230
	mov	eax, DWORD PTR _pYPos$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _yPos$[ebp], ecx
; Line 232
	movsx	eax, WORD PTR _ClientRect$[ebp]
	movsx	ecx, WORD PTR _GUI_RectDispString+4
	add	eax, ecx
	movsx	edx, WORD PTR _GUI_RectDispString
	mov	ecx, DWORD PTR _xPos$[ebp]
	sub	ecx, edx
	sub	eax, ecx
	mov	edx, DWORD PTR _pXPos$[ebp]
	mov	DWORD PTR [edx], eax
; Line 233
	movsx	eax, WORD PTR _ClientRect$[ebp+2]
	movsx	ecx, WORD PTR _GUI_RectDispString+6
	add	eax, ecx
	movsx	edx, WORD PTR _GUI_RectDispString+2
	mov	ecx, DWORD PTR _yPos$[ebp]
	sub	ecx, edx
	sub	eax, ecx
	mov	edx, DWORD PTR _pYPos$[ebp]
	mov	DWORD PTR [edx], eax
; Line 234
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@TransformP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@TransformP:
	DD	1
	DD	$LN6@TransformP
$LN6@TransformP:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN5@TransformP
$LN5@TransformP:
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
__TransformPoint180 ENDP
_TEXT	ENDS
END
