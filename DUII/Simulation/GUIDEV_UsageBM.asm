; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\MemDev\GUIDEV_UsageBM.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_API	DD	FLAT:_GUI_USAGE_BM_AddPixel
	DD	FLAT:_GUI_USAGE_BM_AddHLine
	DD	FLAT:_GUI_USAGE_BM_Clear
	DD	00H
	DD	FLAT:__GUI_USAGE_BM_Delete
	DD	FLAT:_GUI_USAGE_BM_GetNextDirty
CONST	ENDS
_DATA	SEGMENT
$SG9178	DB	'GUI_USAGE_BM_AddPixel: parameters out of bounds', 00H
$SG9194	DB	'GUIDEV.c: MarkPixels: negative x offset, Act= %d, Border'
	DB	'= %d, Clip= %d', 00H
	ORG $+1
$SG9270	DB	'GUI_USAGE_BM_Create: Too little memory', 00H
_DATA	ENDS
EXTRN	_GUI_ErrorOut2:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\memdev\guidev_usagebm.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_USAGE_BM_AddPixel
_TEXT	SEGMENT
_pThis$ = -20						; size = 4
_pData$ = -8						; size = 4
_p$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_GUI_USAGE_BM_AddPixel PROC				; COMDAT
; Line 55
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 57
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pThis$[ebp], eax
; Line 60
	mov	eax, DWORD PTR _pThis$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _pThis$[ebp]
	movsx	eax, WORD PTR [edx+4]
	add	ecx, eax
	xor	edx, edx
	cmp	DWORD PTR _x$[ebp], ecx
	setge	dl
	mov	eax, DWORD PTR _pThis$[ebp]
	movsx	ecx, WORD PTR [eax]
	xor	eax, eax
	cmp	DWORD PTR _x$[ebp], ecx
	setl	al
	or	edx, eax
	mov	ecx, DWORD PTR _pThis$[ebp]
	movsx	eax, WORD PTR [ecx+2]
	mov	ecx, DWORD PTR _pThis$[ebp]
	movsx	ecx, WORD PTR [ecx+6]
	add	eax, ecx
	xor	ecx, ecx
	cmp	DWORD PTR _y$[ebp], eax
	setge	cl
	or	edx, ecx
	mov	eax, DWORD PTR _pThis$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	xor	eax, eax
	cmp	DWORD PTR _y$[ebp], ecx
	setl	al
	or	edx, eax
	je	SHORT $LN1@GUI_USAGE_
; Line 62
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	push	OFFSET $SG9178
	call	_GUI_ErrorOut2
	add	esp, 12					; 0000000cH
$LN1@GUI_USAGE_:
; Line 65
	mov	eax, DWORD PTR _pThis$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _x$[ebp], edx
; Line 66
	mov	eax, DWORD PTR _pThis$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _pData$[ebp], eax
; Line 67
	mov	eax, DWORD PTR _pThis$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _pThis$[ebp]
	imul	edx, DWORD PTR [eax+16]
	add	edx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pData$[ebp], edx
; Line 68
	mov	eax, DWORD PTR _x$[ebp]
	sar	eax, 3
	add	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 69
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, 7
	mov	eax, 128				; 00000080H
	sar	eax, cl
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
; Line 70
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_USAGE_BM_AddPixel ENDP
_TEXT	ENDS
EXTRN	_memset:PROC
EXTRN	_GUI_ErrorOut3:PROC
EXTRN	_GUI_Context:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_USAGE_BM_AddHLine
_TEXT	SEGMENT
_Mask1$9199 = -65					; size = 1
_Mask0$9198 = -53					; size = 1
_NumBytes$9197 = -44					; size = 4
_x1$9196 = -32						; size = 4
_pThis$ = -20						; size = 4
_pData$ = -8						; size = 4
_p$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_len$ = 20						; size = 4
_GUI_USAGE_BM_AddHLine PROC				; COMDAT
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 82
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pThis$[ebp], eax
; Line 85
	mov	eax, DWORD PTR _pThis$[ebp]
	movsx	ecx, WORD PTR [eax]
	cmp	DWORD PTR _x$[ebp], ecx
	jge	SHORT $LN4@GUI_USAGE_@2
	movsx	eax, WORD PTR _GUI_Context+8
	push	eax
	mov	ecx, DWORD PTR _pThis$[ebp]
	movsx	edx, WORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	push	OFFSET $SG9194
	call	_GUI_ErrorOut3
	add	esp, 16					; 00000010H
$LN4@GUI_USAGE_@2:
; Line 87
	mov	eax, DWORD PTR _pThis$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _x$[ebp], edx
; Line 88
	mov	eax, DWORD PTR _pThis$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _pData$[ebp], eax
; Line 89
	mov	eax, DWORD PTR _pThis$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _pThis$[ebp]
	imul	edx, DWORD PTR [eax+16]
	add	edx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pData$[ebp], edx
; Line 90
	mov	eax, DWORD PTR _x$[ebp]
	sar	eax, 3
	add	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 93
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _x1$9196[ebp], edx
; Line 94
	mov	eax, DWORD PTR _x1$9196[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR _x$[ebp]
	sar	ecx, 3
	sub	eax, ecx
	mov	DWORD PTR _NumBytes$9197[ebp], eax
; Line 95
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, 7
	mov	eax, 255				; 000000ffH
	sar	eax, cl
	mov	BYTE PTR _Mask0$9198[ebp], al
; Line 96
	mov	eax, DWORD PTR _x1$9196[ebp]
	and	eax, 7
	mov	ecx, 7
	sub	ecx, eax
	mov	edx, 255				; 000000ffH
	shl	edx, cl
	mov	BYTE PTR _Mask1$9199[ebp], dl
; Line 97
	cmp	DWORD PTR _NumBytes$9197[ebp], 0
	jne	SHORT $LN3@GUI_USAGE_@2
; Line 98
	movzx	eax, BYTE PTR _Mask0$9198[ebp]
	movzx	ecx, BYTE PTR _Mask1$9199[ebp]
	and	eax, ecx
	mov	edx, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [edx]
	or	ecx, eax
	mov	edx, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [edx], cl
; Line 99
	jmp	SHORT $LN5@GUI_USAGE_@2
$LN3@GUI_USAGE_@2:
; Line 100
	movzx	eax, BYTE PTR _Mask0$9198[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _pData$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pData$[ebp], ecx
; Line 102
	mov	eax, DWORD PTR _NumBytes$9197[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumBytes$9197[ebp], eax
	cmp	DWORD PTR _NumBytes$9197[ebp], 0
	jle	SHORT $LN1@GUI_USAGE_@2
; Line 103
	mov	eax, DWORD PTR _NumBytes$9197[ebp]
	push	eax
	push	255					; 000000ffH
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 104
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _NumBytes$9197[ebp]
	mov	DWORD PTR _pData$[ebp], eax
$LN1@GUI_USAGE_@2:
; Line 106
	movzx	eax, BYTE PTR _Mask1$9199[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _pData$[ebp]
	mov	BYTE PTR [eax], dl
$LN5@GUI_USAGE_@2:
; Line 110
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_USAGE_BM_AddHLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _GUI_USAGE_BM_Clear
_TEXT	SEGMENT
_pThis$ = -8						; size = 4
_p$ = 8							; size = 4
_GUI_USAGE_BM_Clear PROC				; COMDAT
; Line 116
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 117
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pThis$[ebp], eax
; Line 118
	mov	eax, DWORD PTR _pThis$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _pThis$[ebp]
	imul	ecx, DWORD PTR [edx+16]
	push	ecx
	push	0
	mov	eax, DWORD PTR _pThis$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 119
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_USAGE_BM_Clear ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _GUI_USAGE_BM_GetNextDirty
_TEXT	SEGMENT
tv144 = -280						; size = 4
_Data$9227 = -77					; size = 1
_BytesLeft$9226 = -68					; size = 4
_pData$ = -56						; size = 4
_xSize$ = -44						; size = 4
_pThis$ = -32						; size = 4
_xEnd$ = -20						; size = 4
_x$ = -8						; size = 4
_p$ = 8							; size = 4
_pxOff$ = 12						; size = 4
_yOff$ = 16						; size = 4
_GUI_USAGE_BM_GetNextDirty PROC				; COMDAT
; Line 125
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 126
	mov	eax, DWORD PTR _pxOff$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$[ebp], ecx
; Line 128
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pThis$[ebp], eax
; Line 129
	mov	eax, DWORD PTR _pThis$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	DWORD PTR _xSize$[ebp], ecx
; Line 130
	mov	eax, DWORD PTR _pThis$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _pData$[ebp], eax
; Line 131
	mov	eax, DWORD PTR _pThis$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _yOff$[ebp], ecx
	jl	SHORT $LN18@GUI_USAGE_@3
; Line 132
	xor	eax, eax
	jmp	$LN19@GUI_USAGE_@3
$LN18@GUI_USAGE_@3:
; Line 134
	mov	eax, DWORD PTR _pThis$[ebp]
	mov	ecx, DWORD PTR _yOff$[ebp]
	imul	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pData$[ebp], ecx
; Line 135
	mov	eax, DWORD PTR _x$[ebp]
	sar	eax, 3
	add	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 136
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _xSize$[ebp]
	jl	SHORT $LN17@GUI_USAGE_@3
; Line 137
	xor	eax, eax
	jmp	$LN19@GUI_USAGE_@3
$LN17@GUI_USAGE_@3:
; Line 140
	mov	eax, DWORD PTR _xSize$[ebp]
	sub	eax, 1
	sar	eax, 3
	mov	ecx, DWORD PTR _x$[ebp]
	sar	ecx, 3
	sub	eax, ecx
	mov	DWORD PTR _BytesLeft$9226[ebp], eax
; Line 142
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, 7
	shl	edx, cl
	mov	BYTE PTR _Data$9227[ebp], dl
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 1
	mov	DWORD PTR _pData$[ebp], eax
$LN16@GUI_USAGE_@3:
; Line 143
	movzx	eax, BYTE PTR _Data$9227[ebp]
	test	eax, eax
	jne	SHORT $LN13@GUI_USAGE_@3
; Line 144
	cmp	DWORD PTR _BytesLeft$9226[ebp], 0
	jne	SHORT $LN14@GUI_USAGE_@3
; Line 145
	xor	eax, eax
	jmp	$LN19@GUI_USAGE_@3
$LN14@GUI_USAGE_@3:
; Line 146
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _Data$9227[ebp], cl
	mov	edx, DWORD PTR _pData$[ebp]
	add	edx, 1
	mov	DWORD PTR _pData$[ebp], edx
; Line 147
	mov	eax, DWORD PTR _BytesLeft$9226[ebp]
	sub	eax, 1
	mov	DWORD PTR _BytesLeft$9226[ebp], eax
; Line 148
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 8
	and	eax, -8					; fffffff8H
	mov	DWORD PTR _x$[ebp], eax
; Line 149
	jmp	SHORT $LN16@GUI_USAGE_@3
$LN13@GUI_USAGE_@3:
; Line 150
	movzx	eax, BYTE PTR _Data$9227[ebp]
	and	eax, 128				; 00000080H
	jne	SHORT $LN12@GUI_USAGE_@3
; Line 151
	mov	al, BYTE PTR _Data$9227[ebp]
	shl	al, 1
	mov	BYTE PTR _Data$9227[ebp], al
; Line 152
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 153
	jmp	SHORT $LN13@GUI_USAGE_@3
$LN12@GUI_USAGE_@3:
; Line 155
	movzx	eax, BYTE PTR _Data$9227[ebp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN11@GUI_USAGE_@3
; Line 156
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _xEnd$[ebp], eax
$LN10@GUI_USAGE_@3:
; Line 157
	movzx	eax, BYTE PTR _Data$9227[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $LN9@GUI_USAGE_@3
; Line 158
	mov	al, BYTE PTR _Data$9227[ebp]
	shl	al, 1
	mov	BYTE PTR _Data$9227[ebp], al
; Line 159
	mov	eax, DWORD PTR _xEnd$[ebp]
	add	eax, 1
	mov	DWORD PTR _xEnd$[ebp], eax
; Line 160
	jmp	SHORT $LN10@GUI_USAGE_@3
$LN9@GUI_USAGE_@3:
; Line 161
	jmp	SHORT $LN8@GUI_USAGE_@3
$LN11@GUI_USAGE_@3:
; Line 162
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 7
	mov	DWORD PTR _xEnd$[ebp], eax
$LN8@GUI_USAGE_@3:
; Line 164
	mov	eax, DWORD PTR _xEnd$[ebp]
	and	eax, 7
	cmp	eax, 7
	jne	SHORT $LN7@GUI_USAGE_@3
$LN6@GUI_USAGE_@3:
; Line 165
	mov	eax, DWORD PTR _BytesLeft$9226[ebp]
	sub	eax, 1
	mov	DWORD PTR _BytesLeft$9226[ebp], eax
	js	SHORT $LN7@GUI_USAGE_@3
; Line 166
	mov	eax, DWORD PTR _pData$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _Data$9227[ebp], cl
	movzx	edx, BYTE PTR _Data$9227[ebp]
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 1
	mov	DWORD PTR _pData$[ebp], eax
	cmp	edx, 255				; 000000ffH
	jne	SHORT $LN21@GUI_USAGE_@3
	mov	DWORD PTR tv144[ebp], 1
	jmp	SHORT $LN22@GUI_USAGE_@3
$LN21@GUI_USAGE_@3:
	mov	DWORD PTR tv144[ebp], 0
$LN22@GUI_USAGE_@3:
	cmp	DWORD PTR tv144[ebp], 0
	je	SHORT $LN2@GUI_USAGE_@3
; Line 167
	mov	eax, DWORD PTR _xEnd$[ebp]
	add	eax, 8
	mov	DWORD PTR _xEnd$[ebp], eax
; Line 168
	jmp	SHORT $LN3@GUI_USAGE_@3
$LN2@GUI_USAGE_@3:
; Line 169
	movzx	eax, BYTE PTR _Data$9227[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN1@GUI_USAGE_@3
; Line 170
	mov	al, BYTE PTR _Data$9227[ebp]
	shl	al, 1
	mov	BYTE PTR _Data$9227[ebp], al
; Line 171
	mov	eax, DWORD PTR _xEnd$[ebp]
	add	eax, 1
	mov	DWORD PTR _xEnd$[ebp], eax
; Line 172
	jmp	SHORT $LN2@GUI_USAGE_@3
$LN1@GUI_USAGE_@3:
; Line 173
	jmp	SHORT $LN7@GUI_USAGE_@3
$LN3@GUI_USAGE_@3:
; Line 175
	jmp	SHORT $LN6@GUI_USAGE_@3
$LN7@GUI_USAGE_@3:
; Line 179
	mov	eax, DWORD PTR _pxOff$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 180
	mov	eax, DWORD PTR _xEnd$[ebp]
	sub	eax, DWORD PTR _x$[ebp]
	add	eax, 1
$LN19@GUI_USAGE_@3:
; Line 181
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_USAGE_BM_GetNextDirty ENDP
_TEXT	ENDS
EXTRN	_GUI_ALLOC_Free:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GUI_USAGE_BM_Delete
_TEXT	SEGMENT
_hDevUsage$ = 8						; size = 4
__GUI_USAGE_BM_Delete PROC				; COMDAT
; Line 187
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 188
	mov	eax, DWORD PTR _hDevUsage$[ebp]
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
; Line 189
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GUI_USAGE_BM_Delete ENDP
_TEXT	ENDS
PUBLIC	_GUI_USAGE_BM_Create
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	_GUI_ErrorOut:PROC
EXTRN	_GUI_ALLOC_AllocZero:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_USAGE_BM_Create
_TEXT	SEGMENT
_pUsage$9271 = -44					; size = 4
_hMem$ = -32						; size = 4
_BytesPerLine$ = -20					; size = 4
_MemSize$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xsize$ = 16						; size = 4
_ysize$ = 20						; size = 4
_Flags$ = 24						; size = 4
_GUI_USAGE_BM_Create PROC				; COMDAT
; Line 215
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 219
	mov	eax, DWORD PTR _Flags$[ebp]
	mov	DWORD PTR _Flags$[ebp], eax
; Line 220
	mov	eax, DWORD PTR _xsize$[ebp]
	add	eax, 15					; 0000000fH
	sar	eax, 4
	shl	eax, 1
	mov	DWORD PTR _BytesPerLine$[ebp], eax
; Line 221
	mov	eax, DWORD PTR _ysize$[ebp]
	imul	eax, DWORD PTR _BytesPerLine$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _MemSize$[ebp], eax
; Line 222
	mov	eax, DWORD PTR _MemSize$[ebp]
	push	eax
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hMem$[ebp], eax
; Line 224
	cmp	DWORD PTR _hMem$[ebp], 0
	jne	SHORT $LN1@GUI_USAGE_@4
; Line 225
	push	OFFSET $SG9270
	call	_GUI_ErrorOut
	add	esp, 4
; Line 226
	xor	eax, eax
	jmp	SHORT $LN2@GUI_USAGE_@4
$LN1@GUI_USAGE_@4:
; Line 231
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pUsage$9271[ebp], eax
; Line 232
	mov	eax, DWORD PTR _pUsage$9271[ebp]
	mov	cx, WORD PTR _x0$[ebp]
	mov	WORD PTR [eax], cx
; Line 233
	mov	eax, DWORD PTR _pUsage$9271[ebp]
	mov	cx, WORD PTR _y0$[ebp]
	mov	WORD PTR [eax+2], cx
; Line 234
	mov	eax, DWORD PTR _pUsage$9271[ebp]
	mov	cx, WORD PTR _xsize$[ebp]
	mov	WORD PTR [eax+4], cx
; Line 235
	mov	eax, DWORD PTR _pUsage$9271[ebp]
	mov	cx, WORD PTR _ysize$[ebp]
	mov	WORD PTR [eax+6], cx
; Line 236
	mov	eax, DWORD PTR _pUsage$9271[ebp]
	mov	DWORD PTR [eax+8], OFFSET _API
; Line 237
	mov	eax, 1
	mov	ecx, DWORD PTR _pUsage$9271[ebp]
	mov	WORD PTR [ecx+12], ax
; Line 238
	mov	eax, DWORD PTR _pUsage$9271[ebp]
	mov	ecx, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 241
	mov	eax, DWORD PTR _hMem$[ebp]
$LN2@GUI_USAGE_@4:
; Line 242
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_USAGE_BM_Create ENDP
_TEXT	ENDS
END
