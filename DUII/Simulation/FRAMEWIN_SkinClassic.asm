; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Widget\FRAMEWIN_SkinClassic.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_FRAMEWIN__SkinClassic
CONST	SEGMENT
_FRAMEWIN__SkinClassic DD FLAT:__Paint
	DD	FLAT:__Create
	DD	FLAT:__SkinPrivate
CONST	ENDS
_DATA	SEGMENT
__SkinPrivate DD FLAT:__GetBorderSize
	ORG $+4
_DATA	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_WM__GetNextIVR:PROC
EXTRN	_WIDGET_EFFECT_3D_DrawUp:PROC
EXTRN	_GUI_FillRect:PROC
EXTRN	_LCD_SetColor:PROC
EXTRN	_WM_SetUserClipRect:PROC
EXTRN	_WM__InitIVRSearch:PROC
EXTRN	_FRAMEWIN__CalcPositions:PROC
EXTRN	_WM_GetWindowSizeY:PROC
EXTRN	_WM_GetWindowSizeX:PROC
EXTRN	_FRAMEWIN_LockH:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\widget\framewin_skinclassic.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __Paint
_TEXT	SEGMENT
_ItemInfo$ = -144					; size = 32
_r$ = -104						; size = 8
_Pos$ = -88						; size = 20
_y0$ = -60						; size = 4
_BorderSize$ = -48					; size = 4
_ysize$ = -36						; size = 4
_xsize$ = -24						; size = 4
_pObj$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_hObj$ = 8						; size = 4
__Paint	PROC						; COMDAT
; Line 39
	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 49
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_FRAMEWIN_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 50
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetWindowSizeX
	add	esp, 4
	mov	DWORD PTR _xsize$[ebp], eax
; Line 51
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetWindowSizeY
	add	esp, 4
	mov	DWORD PTR _ysize$[ebp], eax
; Line 52
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+90]
	mov	DWORD PTR _BorderSize$[ebp], ecx
; Line 56
	lea	eax, DWORD PTR _Pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_FRAMEWIN__CalcPositions
	add	esp, 8
; Line 57
	movsx	eax, WORD PTR _Pos$[ebp]
	add	eax, DWORD PTR _BorderSize$[ebp]
	mov	DWORD PTR _y0$[ebp], eax
; Line 61
	mov	DWORD PTR _ItemInfo$[ebp+4], 1
; Line 62
	mov	eax, DWORD PTR _hObj$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp], eax
; Line 63
	lea	eax, DWORD PTR _Pos$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp+28], eax
; Line 67
	mov	ax, WORD PTR _Pos$[ebp+4]
	mov	WORD PTR _r$[ebp], ax
	movsx	ecx, WORD PTR _r$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp+12], ecx
; Line 68
	mov	ax, WORD PTR _Pos$[ebp+8]
	mov	WORD PTR _r$[ebp+4], ax
	movsx	ecx, WORD PTR _r$[ebp+4]
	mov	DWORD PTR _ItemInfo$[ebp+20], ecx
; Line 69
	movsx	eax, WORD PTR _Pos$[ebp+14]
	sub	eax, 1
	mov	WORD PTR _r$[ebp+2], ax
	movsx	ecx, WORD PTR _r$[ebp+2]
	mov	DWORD PTR _ItemInfo$[ebp+16], ecx
; Line 70
	mov	ax, WORD PTR _Pos$[ebp+18]
	mov	WORD PTR _r$[ebp+6], ax
	movsx	ecx, WORD PTR _r$[ebp+6]
	mov	DWORD PTR _ItemInfo$[ebp+24], ecx
; Line 71
	mov	eax, DWORD PTR _ItemInfo$[ebp+16]
	add	eax, 1
	mov	DWORD PTR _ItemInfo$[ebp+16], eax
; Line 75
	push	0
	call	_WM__InitIVRSearch
	add	esp, 4
	test	eax, eax
	je	$LN7@Paint
$LN6@Paint:
; Line 79
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_WM_SetUserClipRect
	add	esp, 4
; Line 80
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+100], 0
	je	SHORT $LN3@Paint
; Line 81
	mov	esi, esp
	lea	eax, DWORD PTR _ItemInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Paint:
; Line 83
	push	0
	call	_WM_SetUserClipRect
	add	esp, 4
; Line 87
	push	11184810				; 00aaaaaaH
	call	_LCD_SetColor
	add	esp, 4
; Line 88
	mov	eax, DWORD PTR _BorderSize$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _xsize$[ebp]
	sub	ecx, 1
	push	ecx
	push	0
	push	0
	call	_GUI_FillRect
	add	esp, 16					; 00000010H
; Line 89
	mov	eax, DWORD PTR _ysize$[ebp]
	sub	eax, 1
	push	eax
	movsx	ecx, WORD PTR _Pos$[ebp+4]
	sub	ecx, 1
	push	ecx
	push	0
	push	0
	call	_GUI_FillRect
	add	esp, 16					; 00000010H
; Line 90
	mov	eax, DWORD PTR _ysize$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _xsize$[ebp]
	sub	ecx, 1
	push	ecx
	push	0
	movsx	edx, WORD PTR _Pos$[ebp+8]
	add	edx, 1
	push	edx
	call	_GUI_FillRect
	add	esp, 16					; 00000010H
; Line 91
	mov	eax, DWORD PTR _ysize$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _xsize$[ebp]
	sub	ecx, 1
	push	ecx
	movsx	edx, WORD PTR _Pos$[ebp+10]
	add	edx, 1
	push	edx
	push	0
	call	_GUI_FillRect
	add	esp, 16					; 00000010H
; Line 92
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+54]
	and	ecx, 32					; 00000020H
	je	SHORT $LN2@Paint
; Line 93
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+92]
	mov	edx, DWORD PTR _y0$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	push	eax
	mov	ecx, DWORD PTR _xsize$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	push	0
	call	_GUI_FillRect
	add	esp, 16					; 00000010H
$LN2@Paint:
; Line 98
	cmp	DWORD PTR _BorderSize$[ebp], 2
	jl	SHORT $LN5@Paint
; Line 100
	call	_WIDGET_EFFECT_3D_DrawUp
$LN5@Paint:
; Line 102
	call	_WM__GetNextIVR
	test	eax, eax
	jne	$LN6@Paint
$LN7@Paint:
; Line 103
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 104
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@Paint
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@Paint:
	DD	3
	DD	$LN13@Paint
$LN13@Paint:
	DD	-88					; ffffffa8H
	DD	20					; 00000014H
	DD	$LN10@Paint
	DD	-104					; ffffff98H
	DD	8
	DD	$LN11@Paint
	DD	-144					; ffffff70H
	DD	32					; 00000020H
	DD	$LN12@Paint
$LN12@Paint:
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN11@Paint:
	DB	114					; 00000072H
	DB	0
$LN10@Paint:
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__Paint	ENDP
_TEXT	ENDS
PUBLIC	_FRAMEWIN_OwnerDraw
EXTRN	_WIDGET__FillStringInRect:PROC
EXTRN	_LCD_SetBkColor:PROC
EXTRN	_GUI__CalcTextRect:PROC
EXTRN	_GUI_SetFont:PROC
EXTRN	_GUI_ALLOC_LockH:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _FRAMEWIN_OwnerDraw
_TEXT	SEGMENT
_rTitleText$ = -92					; size = 8
_rText$ = -76						; size = 8
_r$ = -60						; size = 8
_Index$ = -44						; size = 4
_pText$ = -32						; size = 4
_pPos$ = -20						; size = 4
_pObj$ = -8						; size = 4
_pDrawItemInfo$ = 8					; size = 4
_FRAMEWIN_OwnerDraw PROC				; COMDAT
; Line 110
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 117
	mov	eax, DWORD PTR _pDrawItemInfo$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FRAMEWIN_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 118
	mov	eax, DWORD PTR _pDrawItemInfo$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pPos$[ebp], ecx
; Line 119
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, WORD PTR [eax+128]
	and	ecx, 8
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	DWORD PTR _Index$[ebp], ecx
; Line 120
	mov	eax, DWORD PTR _pObj$[ebp]
	cmp	DWORD PTR [eax+116], 0
	je	SHORT $LN3@FRAMEWIN_O
; Line 121
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pText$[ebp], eax
; Line 122
	jmp	SHORT $LN2@FRAMEWIN_O
$LN3@FRAMEWIN_O:
; Line 123
	mov	DWORD PTR _pText$[ebp], 0
$LN2@FRAMEWIN_O:
; Line 125
	mov	eax, DWORD PTR _pPos$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR _rTitleText$[ebp], ecx
	mov	DWORD PTR _rTitleText$[ebp+4], edx
; Line 126
	mov	eax, DWORD PTR _pPos$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	sub	ecx, 1
	mov	WORD PTR _r$[ebp], cx
; Line 127
	mov	eax, DWORD PTR _pPos$[ebp]
	mov	cx, WORD PTR [eax+14]
	mov	WORD PTR _r$[ebp+2], cx
; Line 128
	mov	eax, DWORD PTR _pPos$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	add	ecx, 1
	mov	WORD PTR _r$[ebp+4], cx
; Line 129
	mov	eax, DWORD PTR _pPos$[ebp]
	mov	cx, WORD PTR [eax+18]
	mov	WORD PTR _r$[ebp+6], cx
; Line 130
	mov	ax, WORD PTR _rTitleText$[ebp]
	add	ax, 1
	mov	WORD PTR _rTitleText$[ebp], ax
; Line 131
	mov	ax, WORD PTR _rTitleText$[ebp+2]
	add	ax, 1
	mov	WORD PTR _rTitleText$[ebp+2], ax
; Line 132
	mov	ax, WORD PTR _rTitleText$[ebp+4]
	sub	ax, 1
	mov	WORD PTR _rTitleText$[ebp+4], ax
; Line 133
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_GUI_SetFont
	add	esp, 4
; Line 134
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+94]
	push	ecx
	lea	edx, DWORD PTR _rText$[ebp]
	push	edx
	lea	eax, DWORD PTR _rTitleText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pText$[ebp]
	push	ecx
	call	_GUI__CalcTextRect
	add	esp, 16					; 00000010H
; Line 135
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+60]
	push	edx
	call	_LCD_SetBkColor
	add	esp, 4
; Line 136
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+68]
	push	edx
	call	_LCD_SetColor
	add	esp, 4
; Line 137
	lea	eax, DWORD PTR _rText$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rTitleText$[ebp]
	push	ecx
	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	call	_WIDGET__FillStringInRect
	add	esp, 16					; 00000010H
; Line 138
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 139
	cmp	DWORD PTR _pText$[ebp], 0
	je	SHORT $LN1@FRAMEWIN_O
; Line 140
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pText$[ebp], 0
$LN1@FRAMEWIN_O:
; Line 142
	xor	eax, eax
; Line 143
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@FRAMEWIN_O
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@FRAMEWIN_O:
	DD	3
	DD	$LN9@FRAMEWIN_O
$LN9@FRAMEWIN_O:
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN6@FRAMEWIN_O
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN7@FRAMEWIN_O
	DD	-92					; ffffffa4H
	DD	8
	DD	$LN8@FRAMEWIN_O
$LN8@FRAMEWIN_O:
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN7@FRAMEWIN_O:
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN6@FRAMEWIN_O:
	DB	114					; 00000072H
	DB	0
_FRAMEWIN_OwnerDraw ENDP
_TEXT	ENDS
EXTRN	_FRAMEWIN_SetOwnerDraw:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Create
_TEXT	SEGMENT
_hObj$ = 8						; size = 4
__Create PROC						; COMDAT
; Line 149
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 150
	push	OFFSET _FRAMEWIN_OwnerDraw
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_FRAMEWIN_SetOwnerDraw
	add	esp, 8
; Line 151
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Create ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetBorderSize
_TEXT	SEGMENT
_pObj$ = -20						; size = 4
_BorderSize$ = -8					; size = 4
_hObj$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetBorderSize PROC					; COMDAT
; Line 157
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 161
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR _Index$[ebp], eax
; Line 162
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_FRAMEWIN_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 163
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+90]
	mov	DWORD PTR _BorderSize$[ebp], ecx
; Line 164
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 165
	mov	eax, DWORD PTR _BorderSize$[ebp]
; Line 166
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetBorderSize ENDP
_TEXT	ENDS
PUBLIC	_FRAMEWIN_SetSkinClassic
EXTRN	_WM_InvalidateWindow:PROC
EXTRN	_FRAMEWIN__UpdateButtons:PROC
EXTRN	_FRAMEWIN__UpdatePositions:PROC
EXTRN	_FRAMEWIN__CalcTitleHeight:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _FRAMEWIN_SetSkinClassic
_TEXT	SEGMENT
_OldBorderSizeT$ = -68					; size = 4
_OldBorderSizeR$ = -56					; size = 4
_OldBorderSizeL$ = -44					; size = 4
_OldHeight$ = -32					; size = 4
_pSkinPrivate$ = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_FRAMEWIN_SetSkinClassic PROC				; COMDAT
; Line 202
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 207
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_FRAMEWIN_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 208
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _pSkinPrivate$[ebp], edx
; Line 209
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	call	_FRAMEWIN__CalcTitleHeight
	add	esp, 4
	mov	DWORD PTR _OldHeight$[ebp], eax
; Line 210
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 214
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSkinPrivate$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _OldBorderSizeL$[ebp], eax
; Line 215
	mov	esi, esp
	push	3
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSkinPrivate$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _OldBorderSizeR$[ebp], eax
; Line 216
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSkinPrivate$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _OldBorderSizeT$[ebp], eax
; Line 220
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_FRAMEWIN_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 221
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+96], OFFSET _FRAMEWIN__SkinClassic
; Line 222
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 226
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_FRAMEWIN__UpdatePositions
	add	esp, 4
; Line 227
	mov	eax, DWORD PTR _OldBorderSizeT$[ebp]
	push	eax
	mov	ecx, DWORD PTR _OldBorderSizeR$[ebp]
	push	ecx
	mov	edx, DWORD PTR _OldBorderSizeL$[ebp]
	push	edx
	mov	eax, DWORD PTR _OldHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_FRAMEWIN__UpdateButtons
	add	esp, 20					; 00000014H
; Line 228
	push	OFFSET _FRAMEWIN_OwnerDraw
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_FRAMEWIN_SetOwnerDraw
	add	esp, 8
; Line 229
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 230
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FRAMEWIN_SetSkinClassic ENDP
_TEXT	ENDS
PUBLIC	_FRAMEWIN_SetDefaultSkinClassic
EXTRN	_FRAMEWIN__pSkinDefault:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _FRAMEWIN_SetDefaultSkinClassic
_TEXT	SEGMENT
_FRAMEWIN_SetDefaultSkinClassic PROC			; COMDAT
; Line 236
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 237
	mov	DWORD PTR _FRAMEWIN__pSkinDefault, OFFSET _FRAMEWIN__SkinClassic
; Line 238
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_FRAMEWIN_SetDefaultSkinClassic ENDP
_TEXT	ENDS
END
