; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\WM\WM_Timer.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_WM_DeleteTimer
PUBLIC	_WM__DeleteAssocTimer
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	_GUI_TIMER__GetNextTimer:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\wm\wm_timer.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _WM__DeleteAssocTimer
_TEXT	SEGMENT
_hTimerWM$ = -44					; size = 4
_Context$ = -32						; size = 4
_pTimer$ = -20						; size = 4
_hTimer$ = -8						; size = 4
_hWin$ = 8						; size = 4
_WM__DeleteAssocTimer PROC				; COMDAT
; Line 65
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 66
	mov	DWORD PTR _hTimer$[ebp], 0
; Line 71
	lea	eax, DWORD PTR _Context$[ebp]
	push	eax
	push	0
	call	_GUI_TIMER__GetNextTimer
	add	esp, 8
	mov	DWORD PTR _hTimer$[ebp], eax
$LN5@WM__Delete:
; Line 72
	cmp	DWORD PTR _hTimer$[ebp], 0
	je	SHORT $LN6@WM__Delete
; Line 73
	cmp	DWORD PTR _Context$[ebp], 0
	je	SHORT $LN3@WM__Delete
; Line 74
	mov	eax, DWORD PTR _Context$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pTimer$[ebp], eax
; Line 75
	mov	eax, DWORD PTR _pTimer$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _hWin$[ebp]
	jne	SHORT $LN2@WM__Delete
; Line 76
	mov	eax, DWORD PTR _Context$[ebp]
	mov	DWORD PTR _hTimerWM$[ebp], eax
; Line 77
	lea	eax, DWORD PTR _Context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hTimer$[ebp]
	push	ecx
	call	_GUI_TIMER__GetNextTimer
	add	esp, 8
	mov	DWORD PTR _hTimer$[ebp], eax
; Line 78
	mov	eax, DWORD PTR _hTimerWM$[ebp]
	push	eax
	call	_WM_DeleteTimer
	add	esp, 4
; Line 79
	jmp	SHORT $LN5@WM__Delete
$LN2@WM__Delete:
; Line 81
	lea	eax, DWORD PTR _Context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hTimer$[ebp]
	push	ecx
	call	_GUI_TIMER__GetNextTimer
	add	esp, 8
	mov	DWORD PTR _hTimer$[ebp], eax
; Line 82
	jmp	SHORT $LN1@WM__Delete
$LN3@WM__Delete:
; Line 83
	lea	eax, DWORD PTR _Context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hTimer$[ebp]
	push	ecx
	call	_GUI_TIMER__GetNextTimer
	add	esp, 8
	mov	DWORD PTR _hTimer$[ebp], eax
$LN1@WM__Delete:
; Line 85
	jmp	SHORT $LN5@WM__Delete
$LN6@WM__Delete:
; Line 87
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@WM__Delete
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@WM__Delete:
	DD	1
	DD	$LN10@WM__Delete
$LN10@WM__Delete:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN9@WM__Delete
$LN9@WM__Delete:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_WM__DeleteAssocTimer ENDP
_TEXT	ENDS
EXTRN	_GUI_ALLOC_Free:PROC
EXTRN	_GUI_TIMER_Delete:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_DeleteTimer
_TEXT	SEGMENT
_pTimer$9458 = -8					; size = 4
_hTimer$ = 8						; size = 4
_WM_DeleteTimer PROC					; COMDAT
; Line 103
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 104
	cmp	DWORD PTR _hTimer$[ebp], 0
	je	SHORT $LN2@WM_DeleteT
; Line 107
	mov	eax, DWORD PTR _hTimer$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pTimer$9458[ebp], eax
; Line 108
	mov	eax, DWORD PTR _pTimer$9458[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_GUI_TIMER_Delete
	add	esp, 4
; Line 109
	mov	eax, DWORD PTR _hTimer$[ebp]
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN2@WM_DeleteT:
; Line 112
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_DeleteTimer ENDP
_TEXT	ENDS
PUBLIC	_WM_CreateTimer
EXTRN	_GUI_TIMER_SetPeriod:PROC
EXTRN	_GUI_TIMER_Create:PROC
EXTRN	_GUI_GetTime:PROC
EXTRN	_GUI_ALLOC_AllocZero:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_CreateTimer
_TEXT	SEGMENT
_pTimer$9472 = -20					; size = 4
_hTimer$ = -8						; size = 4
_hWin$ = 8						; size = 4
_UserId$ = 12						; size = 4
_Period$ = 16						; size = 4
_Mode$ = 20						; size = 4
_WM_CreateTimer PROC					; COMDAT
; Line 126
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 128
	mov	eax, DWORD PTR _Mode$[ebp]
	mov	DWORD PTR _Mode$[ebp], eax
; Line 130
	push	12					; 0000000cH
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hTimer$[ebp], eax
; Line 131
	cmp	DWORD PTR _hTimer$[ebp], 0
	je	SHORT $LN3@WM_CreateT
; Line 133
	mov	eax, DWORD PTR _hTimer$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pTimer$9472[ebp], eax
; Line 134
	mov	eax, DWORD PTR _pTimer$9472[ebp]
	mov	ecx, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 135
	mov	eax, DWORD PTR _pTimer$9472[ebp]
	mov	ecx, DWORD PTR _UserId$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 137
	push	0
	mov	eax, DWORD PTR _hTimer$[ebp]
	push	eax
	call	_GUI_GetTime
	add	eax, DWORD PTR _Period$[ebp]
	push	eax
	push	OFFSET __cbTimer
	call	_GUI_TIMER_Create
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _pTimer$9472[ebp]
	mov	DWORD PTR [ecx], eax
; Line 141
	mov	eax, DWORD PTR _pTimer$9472[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@WM_CreateT
; Line 142
	mov	eax, DWORD PTR _Period$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTimer$9472[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_GUI_TIMER_SetPeriod
	add	esp, 8
; Line 143
	jmp	SHORT $LN3@WM_CreateT
$LN2@WM_CreateT:
; Line 144
	mov	eax, DWORD PTR _hTimer$[ebp]
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
; Line 145
	mov	DWORD PTR _hTimer$[ebp], 0
$LN3@WM_CreateT:
; Line 149
	mov	eax, DWORD PTR _hTimer$[ebp]
; Line 150
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_CreateTimer ENDP
_TEXT	ENDS
EXTRN	_WM_SendMessage:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __cbTimer
_TEXT	SEGMENT
_Msg$9437 = -32						; size = 16
_pObj$ = -8						; size = 4
_pTM$ = 8						; size = 4
__cbTimer PROC						; COMDAT
; Line 41
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 43
	mov	eax, DWORD PTR _pTM$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@cbTimer
; Line 44
	mov	DWORD PTR _Msg$9437[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _Msg$9437[ebp+4], eax
	mov	DWORD PTR _Msg$9437[ebp+8], eax
	mov	DWORD PTR _Msg$9437[ebp+12], eax
; Line 45
	mov	eax, DWORD PTR _pTM$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 46
	mov	DWORD PTR _Msg$9437[ebp], 275		; 00000113H
; Line 47
	mov	eax, DWORD PTR _pTM$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Msg$9437[ebp+12], ecx
; Line 48
	lea	eax, DWORD PTR _Msg$9437[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_WM_SendMessage
	add	esp, 8
$LN2@cbTimer:
; Line 50
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@cbTimer
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@cbTimer:
	DD	1
	DD	$LN5@cbTimer
$LN5@cbTimer:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN4@cbTimer
$LN4@cbTimer:
	DB	77					; 0000004dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
__cbTimer ENDP
_TEXT	ENDS
PUBLIC	_WM_RestartTimer
EXTRN	_GUI_TIMER_Restart:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_RestartTimer
_TEXT	SEGMENT
_pTimer$9483 = -8					; size = 4
_hTimer$ = 8						; size = 4
_Period$ = 12						; size = 4
_WM_RestartTimer PROC					; COMDAT
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 157
	cmp	DWORD PTR _hTimer$[ebp], 0
	je	SHORT $LN3@WM_Restart
; Line 160
	mov	eax, DWORD PTR _hTimer$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pTimer$9483[ebp], eax
; Line 161
	cmp	DWORD PTR _Period$[ebp], 0
	je	SHORT $LN1@WM_Restart
; Line 162
	mov	eax, DWORD PTR _Period$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTimer$9483[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_GUI_TIMER_SetPeriod
	add	esp, 8
$LN1@WM_Restart:
; Line 164
	mov	eax, DWORD PTR _pTimer$9483[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_GUI_TIMER_Restart
	add	esp, 4
$LN3@WM_Restart:
; Line 167
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_RestartTimer ENDP
_TEXT	ENDS
PUBLIC	_WM_GetTimerId
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_GUI_ALLOC_LockH:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM_GetTimerId
_TEXT	SEGMENT
_Id$ = -20						; size = 4
_pTimer$ = -8						; size = 4
_hTimer$ = 8						; size = 4
_WM_GetTimerId PROC					; COMDAT
; Line 173
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 175
	mov	DWORD PTR _Id$[ebp], 0
; Line 177
	cmp	DWORD PTR _hTimer$[ebp], 0
	je	SHORT $LN1@WM_GetTime
; Line 179
	mov	eax, DWORD PTR _hTimer$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pTimer$[ebp], eax
; Line 180
	mov	eax, DWORD PTR _pTimer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _Id$[ebp], ecx
; Line 181
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pTimer$[ebp], 0
$LN1@WM_GetTime:
; Line 184
	mov	eax, DWORD PTR _Id$[ebp]
; Line 185
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM_GetTimerId ENDP
_TEXT	ENDS
END
