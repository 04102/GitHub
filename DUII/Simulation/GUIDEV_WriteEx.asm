; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\MemDev\GUIDEV_WriteEx.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_MEMDEV_WriteExAt
EXTRN	_LCD_SetClipRectMax:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\memdev\guidev_writeex.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_MEMDEV_WriteExAt
_TEXT	SEGMENT
_ClipRectPrev$9391 = -24				; size = 8
_pDevData$9390 = -8					; size = 4
_hMem$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_xMag$ = 20						; size = 4
_yMag$ = 24						; size = 4
_Alpha$ = 28						; size = 4
_GUI_MEMDEV_WriteExAt PROC				; COMDAT
; Line 282
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 283
	cmp	DWORD PTR _hMem$[ebp], 0
	je	SHORT $LN3@GUI_MEMDEV
; Line 287
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDevData$9390[ebp], eax
; Line 288
	cmp	DWORD PTR _x$[ebp], -4095		; fffff001H
	jne	SHORT $LN1@GUI_MEMDEV
; Line 289
	mov	eax, DWORD PTR _pDevData$9390[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	DWORD PTR _x$[ebp], ecx
; Line 290
	mov	eax, DWORD PTR _pDevData$9390[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR _y$[ebp], ecx
$LN1@GUI_MEMDEV:
; Line 292
	mov	eax, DWORD PTR _GUI_Context+8
	mov	DWORD PTR _ClipRectPrev$9391[ebp], eax
	mov	ecx, DWORD PTR _GUI_Context+12
	mov	DWORD PTR _ClipRectPrev$9391[ebp+4], ecx
; Line 293
	call	_LCD_SetClipRectMax
; Line 294
	mov	eax, DWORD PTR _Alpha$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yMag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xMag$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hMem$[ebp]
	push	edx
	call	__WriteExToActiveAt
	add	esp, 24					; 00000018H
; Line 295
	mov	eax, DWORD PTR _ClipRectPrev$9391[ebp]
	mov	DWORD PTR _GUI_Context+8, eax
	mov	ecx, DWORD PTR _ClipRectPrev$9391[ebp+4]
	mov	DWORD PTR _GUI_Context+12, ecx
$LN3@GUI_MEMDEV:
; Line 298
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@GUI_MEMDEV
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@GUI_MEMDEV:
	DD	1
	DD	$LN6@GUI_MEMDEV
$LN6@GUI_MEMDEV:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN5@GUI_MEMDEV
$LN5@GUI_MEMDEV:
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	0
_GUI_MEMDEV_WriteExAt ENDP
_TEXT	ENDS
EXTRN	_GUI__DivideRound32:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __WriteExToActiveAt
_TEXT	SEGMENT
_y0$ = -152						; size = 4
_xSize$ = -140						; size = 4
_xOff$ = -128						; size = 4
_bpp$ = -116						; size = 4
_BytesPerLine$ = -104					; size = 4
_yi$ = -92						; size = 4
_ySize$ = -80						; size = 4
_yPrev$ = -68						; size = 4
_yAct$ = -56						; size = 4
_pData$ = -44						; size = 4
_pUsage$ = -32						; size = 4
_hUsage$ = -20						; size = 4
_pDev$ = -8						; size = 4
_hMem$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_xMag$ = 20						; size = 4
_yMag$ = 24						; size = 4
_Alpha$ = 28						; size = 4
__WriteExToActiveAt PROC				; COMDAT
; Line 218
	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 227
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 228
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _hUsage$[ebp], ecx
; Line 229
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	mov	DWORD PTR _ySize$[ebp], ecx
; Line 230
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _BytesPerLine$[ebp], ecx
; Line 231
	mov	eax, DWORD PTR _pDev$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _pData$[ebp], eax
; Line 232
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _bpp$[ebp], ecx
; Line 233
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _yPrev$[ebp], eax
; Line 234
	cmp	DWORD PTR _hUsage$[ebp], 0
	je	$LN12@WriteExToA
; Line 235
	mov	eax, DWORD PTR _hUsage$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pUsage$[ebp], eax
; Line 236
	mov	DWORD PTR _yi$[ebp], 0
	jmp	SHORT $LN11@WriteExToA
$LN10@WriteExToA:
	mov	eax, DWORD PTR _yi$[ebp]
	add	eax, 1
	mov	DWORD PTR _yi$[ebp], eax
$LN11@WriteExToA:
	mov	eax, DWORD PTR _yi$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	$LN9@WriteExToA
; Line 237
	push	1000					; 000003e8H
	mov	eax, DWORD PTR _yi$[ebp]
	imul	eax, DWORD PTR _yMag$[ebp]
	push	eax
	call	_GUI__DivideRound32
	add	esp, 8
	add	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _yAct$[ebp], eax
; Line 238
	mov	eax, DWORD PTR _yAct$[ebp]
	cmp	eax, DWORD PTR _yPrev$[ebp]
	je	$LN8@WriteExToA
; Line 239
	mov	DWORD PTR _xOff$[ebp], 0
; Line 240
	mov	esi, esp
	mov	eax, DWORD PTR _yi$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xOff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _xSize$[ebp], eax
; Line 241
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	cmp	DWORD PTR _xSize$[ebp], ecx
	jne	$LN3@WriteExToA
; Line 245
	mov	eax, DWORD PTR _yi$[ebp]
	mov	DWORD PTR _y0$[ebp], eax
$LN6@WriteExToA:
; Line 246
	mov	eax, DWORD PTR _yi$[ebp]
	add	eax, 1
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _xOff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, DWORD PTR _xSize$[ebp]
	jne	SHORT $LN5@WriteExToA
; Line 247
	mov	eax, DWORD PTR _yi$[ebp]
	add	eax, 1
	mov	DWORD PTR _yi$[ebp], eax
; Line 248
	jmp	SHORT $LN6@WriteExToA
$LN5@WriteExToA:
; Line 250
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BytesPerLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bpp$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	push	ecx
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _Alpha$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yMag$[ebp]
	push	edx
	mov	eax, DWORD PTR _xMag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yi$[ebp]
	sub	ecx, DWORD PTR _y0$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__DrawBitmapEx
	add	esp, 56					; 00000038H
; Line 251
	push	1000					; 000003e8H
	mov	eax, DWORD PTR _yi$[ebp]
	imul	eax, DWORD PTR _yMag$[ebp]
	push	eax
	call	_GUI__DivideRound32
	add	esp, 8
	add	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _yPrev$[ebp], eax
; Line 252
	jmp	$LN8@WriteExToA
$LN3@WriteExToA:
; Line 256
	cmp	DWORD PTR _xSize$[ebp], 0
	je	$LN2@WriteExToA
; Line 258
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BytesPerLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bpp$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	push	ecx
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _Alpha$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yMag$[ebp]
	push	edx
	mov	eax, DWORD PTR _xMag$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yi$[ebp]
	push	edx
	mov	eax, DWORD PTR _xOff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__DrawBitmapEx
	add	esp, 56					; 00000038H
; Line 259
	mov	eax, DWORD PTR _xOff$[ebp]
	add	eax, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR _xOff$[ebp], eax
; Line 260
	mov	esi, esp
	mov	eax, DWORD PTR _yi$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xOff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _xSize$[ebp], eax
; Line 261
	jmp	$LN3@WriteExToA
$LN2@WriteExToA:
; Line 262
	mov	eax, DWORD PTR _yAct$[ebp]
	mov	DWORD PTR _yPrev$[ebp], eax
$LN8@WriteExToA:
; Line 265
	jmp	$LN10@WriteExToA
$LN9@WriteExToA:
; Line 266
	jmp	SHORT $LN13@WriteExToA
$LN12@WriteExToA:
; Line 268
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BytesPerLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bpp$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	push	ecx
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _Alpha$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yMag$[ebp]
	push	edx
	mov	eax, DWORD PTR _xMag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ySize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDev$[ebp]
	movsx	eax, WORD PTR [edx+8]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__DrawBitmapEx
	add	esp, 56					; 00000038H
$LN13@WriteExToA:
; Line 270
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@WriteExToA
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN17@WriteExToA:
	DD	1
	DD	$LN16@WriteExToA
$LN16@WriteExToA:
	DD	-128					; ffffff80H
	DD	4
	DD	$LN15@WriteExToA
$LN15@WriteExToA:
	DB	120					; 00000078H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
__WriteExToActiveAt ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitmapEx
_TEXT	SEGMENT
tv145 = -268						; size = 4
_yPrev$ = -68						; size = 4
_yEnd$ = -56						; size = 4
_yMax$ = -44						; size = 4
_yMin$ = -32						; size = 4
_yi$ = -20						; size = 4
_y$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xOff$ = 16						; size = 4
_yOff$ = 20						; size = 4
_xSize$ = 24						; size = 4
_ySize$ = 28						; size = 4
_xMag$ = 32						; size = 4
_yMag$ = 36						; size = 4
_Alpha$ = 40						; size = 4
_BmpSizeX$ = 44						; size = 4
_BmpSizeY$ = 48						; size = 4
_bpp$ = 52						; size = 4
_BytesPerLine$ = 56					; size = 4
_pData$ = 60						; size = 4
__DrawBitmapEx PROC					; COMDAT
; Line 187
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 190
	movsx	eax, WORD PTR _GUI_Context+10
	mov	DWORD PTR _yMin$[ebp], eax
; Line 191
	movsx	eax, WORD PTR _GUI_Context+14
	mov	DWORD PTR _yMax$[ebp], eax
; Line 192
	cmp	DWORD PTR _xMag$[ebp], 0
	jge	SHORT $LN10@DrawBitmap
; Line 193
	mov	eax, DWORD PTR _xOff$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _BmpSizeX$[ebp]
	sub	ecx, eax
	sub	ecx, DWORD PTR _xSize$[ebp]
	imul	ecx, DWORD PTR _xMag$[ebp]
	mov	eax, ecx
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	sub	edx, eax
	mov	DWORD PTR _x0$[ebp], edx
$LN10@DrawBitmap:
; Line 195
	cmp	DWORD PTR _yMag$[ebp], 0
	jge	SHORT $LN9@DrawBitmap
; Line 196
	mov	eax, DWORD PTR _BmpSizeY$[ebp]
	sub	eax, 1
	imul	eax, DWORD PTR _yMag$[ebp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	sub	edx, eax
	mov	DWORD PTR _y0$[ebp], edx
$LN9@DrawBitmap:
; Line 198
	push	1000					; 000003e8H
	mov	eax, DWORD PTR _yOff$[ebp]
	imul	eax, DWORD PTR _yMag$[ebp]
	push	eax
	call	_GUI__DivideRound32
	add	esp, 8
	add	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _yEnd$[ebp], eax
; Line 199
	mov	eax, DWORD PTR _yEnd$[ebp]
	add	eax, 1
	mov	DWORD PTR _yPrev$[ebp], eax
; Line 200
	mov	eax, DWORD PTR _yOff$[ebp]
	mov	DWORD PTR _yi$[ebp], eax
	jmp	SHORT $LN8@DrawBitmap
$LN7@DrawBitmap:
	mov	eax, DWORD PTR _yi$[ebp]
	add	eax, 1
	mov	DWORD PTR _yi$[ebp], eax
$LN8@DrawBitmap:
	mov	eax, DWORD PTR _yOff$[ebp]
	add	eax, DWORD PTR _ySize$[ebp]
	cmp	DWORD PTR _yi$[ebp], eax
	jge	$LN11@DrawBitmap
; Line 201
	mov	eax, DWORD PTR _yEnd$[ebp]
	mov	DWORD PTR _y$[ebp], eax
; Line 202
	push	1000					; 000003e8H
	mov	eax, DWORD PTR _yi$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _yMag$[ebp]
	push	eax
	call	_GUI__DivideRound32
	add	esp, 8
	add	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _yEnd$[ebp], eax
; Line 203
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _yPrev$[ebp]
	je	$LN5@DrawBitmap
; Line 204
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _yPrev$[ebp], eax
$LN4@DrawBitmap:
; Line 206
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _yMin$[ebp]
	jl	SHORT $LN3@DrawBitmap
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _yMax$[ebp]
	jg	SHORT $LN3@DrawBitmap
; Line 207
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BytesPerLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bpp$[ebp]
	push	edx
	mov	eax, DWORD PTR _Alpha$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xMag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _yi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xOff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	call	__DrawBitmapLineEx
	add	esp, 40					; 00000028H
$LN3@DrawBitmap:
; Line 209
	cmp	DWORD PTR _yMag$[ebp], 0
	jge	SHORT $LN13@DrawBitmap
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 1
	mov	DWORD PTR _y$[ebp], eax
	mov	ecx, DWORD PTR _y$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR _yEnd$[ebp]
	setg	dl
	mov	DWORD PTR tv145[ebp], edx
	jmp	SHORT $LN14@DrawBitmap
$LN13@DrawBitmap:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
	mov	ecx, DWORD PTR _y$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR _yEnd$[ebp]
	setl	dl
	mov	DWORD PTR tv145[ebp], edx
$LN14@DrawBitmap:
	cmp	DWORD PTR tv145[ebp], 0
	jne	$LN4@DrawBitmap
$LN5@DrawBitmap:
; Line 211
	jmp	$LN7@DrawBitmap
$LN11@DrawBitmap:
; Line 212
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitmapEx ENDP
_TEXT	ENDS
EXTRN	_LCD_SetColorIndex:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitmapLineEx
_TEXT	SEGMENT
tv86 = -340						; size = 4
tv70 = -340						; size = 4
_pDevice$ = -140					; size = 4
_IndexPrev$ = -128					; size = 4
_Index$ = -116						; size = 4
_Cached$ = -104						; size = 4
_xMax$ = -92						; size = 4
_xMin$ = -80						; size = 4
_xiMag$ = -68						; size = 4
_xMagAbs$ = -56						; size = 4
_xStart$ = -44						; size = 4
_xAct$ = -32						; size = 4
_xi$ = -20						; size = 4
_x$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xOff$ = 16						; size = 4
_yOff$ = 20						; size = 4
_xSize$ = 24						; size = 4
_xMag$ = 28						; size = 4
_Alpha$ = 32						; size = 4
_bpp$ = 36						; size = 4
_BytesPerLine$ = 40					; size = 4
_pData$ = 44						; size = 4
__DrawBitmapLineEx PROC					; COMDAT
; Line 112
	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 114
	mov	DWORD PTR _Index$[ebp], 0
	mov	DWORD PTR _IndexPrev$[ebp], 0
; Line 120
	movsx	eax, WORD PTR _GUI_Context+8
	sub	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _xMin$[ebp], eax
; Line 121
	movsx	eax, WORD PTR _GUI_Context+12
	sub	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _xMax$[ebp], eax
; Line 125
	cmp	DWORD PTR _xMag$[ebp], 0
	jle	SHORT $LN24@DrawBitmap@2
	mov	eax, DWORD PTR _xMag$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN25@DrawBitmap@2
$LN24@DrawBitmap@2:
	mov	ecx, DWORD PTR _xMag$[ebp]
	neg	ecx
	mov	DWORD PTR tv70[ebp], ecx
$LN25@DrawBitmap@2:
	mov	edx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _xMagAbs$[ebp], edx
; Line 126
	mov	eax, DWORD PTR _xOff$[ebp]
	imul	eax, DWORD PTR _xMagAbs$[ebp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	mov	DWORD PTR _x$[ebp], eax
; Line 127
	mov	eax, DWORD PTR _xOff$[ebp]
	imul	eax, DWORD PTR _xMagAbs$[ebp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	mov	DWORD PTR _xiMag$[ebp], edx
; Line 128
	mov	DWORD PTR _xStart$[ebp], -1
; Line 129
	mov	DWORD PTR _Cached$[ebp], 0
; Line 130
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	ecx, DWORD PTR _GUI_Context[eax*4+72]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 131
	mov	DWORD PTR _xi$[ebp], 0
	jmp	SHORT $LN21@DrawBitmap@2
$LN20@DrawBitmap@2:
	mov	eax, DWORD PTR _xi$[ebp]
	add	eax, 1
	mov	DWORD PTR _xi$[ebp], eax
$LN21@DrawBitmap@2:
	mov	eax, DWORD PTR _xi$[ebp]
	cmp	eax, DWORD PTR _xSize$[ebp]
	jge	$LN19@DrawBitmap@2
; Line 132
	mov	eax, DWORD PTR _xiMag$[ebp]
	add	eax, DWORD PTR _xMagAbs$[ebp]
	mov	DWORD PTR _xiMag$[ebp], eax
; Line 133
	cmp	DWORD PTR _xiMag$[ebp], 1000		; 000003e8H
	jl	$LN18@DrawBitmap@2
; Line 134
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _xMax$[ebp]
	jg	$LN17@DrawBitmap@2
; Line 135
	cmp	DWORD PTR _xMag$[ebp], 0
	jle	SHORT $LN26@DrawBitmap@2
	mov	eax, DWORD PTR _xi$[ebp]
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN27@DrawBitmap@2
$LN26@DrawBitmap@2:
	mov	ecx, DWORD PTR _xSize$[ebp]
	sub	ecx, DWORD PTR _xi$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv86[ebp], ecx
$LN27@DrawBitmap@2:
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _xAct$[ebp], edx
; Line 136
	mov	eax, DWORD PTR _BytesPerLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bpp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yOff$[ebp]
	push	edx
	mov	eax, DWORD PTR _xOff$[ebp]
	add	eax, DWORD PTR _xAct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	call	__GetPixelIndex
	add	esp, 20					; 00000014H
	mov	DWORD PTR _Index$[ebp], eax
; Line 137
	mov	eax, DWORD PTR _Index$[ebp]
	cmp	eax, DWORD PTR _IndexPrev$[ebp]
	jne	SHORT $LN15@DrawBitmap@2
	cmp	DWORD PTR _xStart$[ebp], -1
	jne	$LN9@DrawBitmap@2
$LN15@DrawBitmap@2:
; Line 138
	cmp	DWORD PTR _xStart$[ebp], -1
	je	$LN14@DrawBitmap@2
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _xMin$[ebp]
	jle	$LN14@DrawBitmap@2
; Line 142
	mov	eax, DWORD PTR _xStart$[ebp]
	cmp	eax, DWORD PTR _xMin$[ebp]
	jge	SHORT $LN13@DrawBitmap@2
; Line 143
	mov	eax, DWORD PTR _xMin$[ebp]
	mov	DWORD PTR _xStart$[ebp], eax
$LN13@DrawBitmap@2:
; Line 145
	mov	eax, DWORD PTR _IndexPrev$[ebp]
	push	eax
	call	_LCD_SetColorIndex
	add	esp, 4
; Line 146
	cmp	DWORD PTR _Alpha$[ebp], 256		; 00000100H
	je	SHORT $LN11@DrawBitmap@2
	cmp	DWORD PTR _GUI_Context+76, 0
	jne	SHORT $LN12@DrawBitmap@2
$LN11@DrawBitmap@2:
; Line 147
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	add	ecx, DWORD PTR _xStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 148
	jmp	SHORT $LN14@DrawBitmap@2
$LN12@DrawBitmap@2:
; Line 149
	mov	eax, DWORD PTR _Alpha$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _x0$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	add	edx, DWORD PTR _xStart$[ebp]
	push	edx
	call	__DrawHLineAlpha
	add	esp, 16					; 00000010H
$LN14@DrawBitmap@2:
; Line 152
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR _IndexPrev$[ebp], eax
; Line 153
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _xStart$[ebp], eax
; Line 154
	mov	DWORD PTR _Cached$[ebp], 1
$LN9@DrawBitmap@2:
; Line 157
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 158
	mov	eax, DWORD PTR _xiMag$[ebp]
	sub	eax, 1000				; 000003e8H
	mov	DWORD PTR _xiMag$[ebp], eax
; Line 159
	cmp	DWORD PTR _xiMag$[ebp], 1000		; 000003e8H
	jge	SHORT $LN9@DrawBitmap@2
; Line 160
	jmp	SHORT $LN18@DrawBitmap@2
$LN17@DrawBitmap@2:
; Line 161
	mov	eax, DWORD PTR _xMax$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 162
	jmp	SHORT $LN19@DrawBitmap@2
$LN18@DrawBitmap@2:
; Line 165
	jmp	$LN20@DrawBitmap@2
$LN19@DrawBitmap@2:
; Line 166
	cmp	DWORD PTR _Cached$[ebp], 0
	je	$LN22@DrawBitmap@2
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _xMin$[ebp]
	jle	$LN22@DrawBitmap@2
; Line 170
	mov	eax, DWORD PTR _xStart$[ebp]
	cmp	eax, DWORD PTR _xMin$[ebp]
	jge	SHORT $LN4@DrawBitmap@2
; Line 171
	mov	eax, DWORD PTR _xMin$[ebp]
	mov	DWORD PTR _xStart$[ebp], eax
$LN4@DrawBitmap@2:
; Line 173
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	_LCD_SetColorIndex
	add	esp, 4
; Line 174
	cmp	DWORD PTR _Alpha$[ebp], 256		; 00000100H
	je	SHORT $LN2@DrawBitmap@2
	cmp	DWORD PTR _GUI_Context+76, 0
	jne	SHORT $LN3@DrawBitmap@2
$LN2@DrawBitmap@2:
; Line 175
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	add	ecx, DWORD PTR _xStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 176
	jmp	SHORT $LN22@DrawBitmap@2
$LN3@DrawBitmap@2:
; Line 177
	mov	eax, DWORD PTR _Alpha$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _x0$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	add	edx, DWORD PTR _xStart$[ebp]
	push	edx
	call	__DrawHLineAlpha
	add	esp, 16					; 00000010H
$LN22@DrawBitmap@2:
; Line 180
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitmapLineEx ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetPixelIndex
_TEXT	SEGMENT
tv64 = -196						; size = 4
_pData$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_bpp$ = 20						; size = 4
_BytesPerLine$ = 24					; size = 4
__GetPixelIndex PROC					; COMDAT
; Line 41
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 42
	mov	eax, DWORD PTR _bpp$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 8
	je	SHORT $LN4@GetPixelIn
	cmp	DWORD PTR tv64[ebp], 16			; 00000010H
	je	SHORT $LN3@GetPixelIn
	cmp	DWORD PTR tv64[ebp], 32			; 00000020H
	je	SHORT $LN2@GetPixelIn
	jmp	SHORT $LN1@GetPixelIn
$LN4@GetPixelIn:
; Line 44
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _BytesPerLine$[ebp]
	add	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	movzx	eax, BYTE PTR [eax+ecx]
	jmp	SHORT $LN7@GetPixelIn
$LN3@GetPixelIn:
; Line 46
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _BytesPerLine$[ebp]
	add	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	movzx	eax, WORD PTR [eax+ecx*2]
	jmp	SHORT $LN7@GetPixelIn
$LN2@GetPixelIn:
; Line 48
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _BytesPerLine$[ebp]
	add	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN7@GetPixelIn
$LN1@GetPixelIn:
; Line 50
	xor	eax, eax
$LN7@GetPixelIn:
; Line 52
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetPixelIndex ENDP
_TEXT	ENDS
EXTRN	_LCD_Color2Index:PROC
EXTRN	_LCD_MixColors256:PROC
EXTRN	_GUI_MEMDEV__XY2PTR:PROC
EXTRN	_LCD_Index2Color:PROC
EXTRN	_LCD_pColorIndex:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawHLineAlpha
_TEXT	SEGMENT
tv83 = -304						; size = 4
_pData$9222 = -104					; size = 4
_pData$9216 = -92					; size = 4
_pData$9210 = -80					; size = 4
_ColorIndex$ = -68					; size = 4
_Len$ = -56						; size = 4
_Color2$ = -44						; size = 4
_Color1$ = -32						; size = 4
_hUsage$ = -20						; size = 4
_pDev$ = -8						; size = 4
_x0$ = 8						; size = 4
_y$ = 12						; size = 4
_x1$ = 16						; size = 4
_Intens$ = 20						; size = 4
__DrawHLineAlpha PROC					; COMDAT
; Line 58
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 65
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 66
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _hUsage$[ebp], ecx
; Line 67
	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _x0$[ebp]
	add	eax, 1
	mov	DWORD PTR _Len$[ebp], eax
; Line 68
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ColorIndex$[ebp], ecx
; Line 69
	cmp	DWORD PTR _hUsage$[ebp], 0
	je	SHORT $LN15@DrawHLineA
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _Len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _hUsage$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _hUsage$[ebp]
	push	ecx
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@DrawHLineA:
; Line 72
	mov	eax, DWORD PTR _ColorIndex$[ebp]
	push	eax
	call	_LCD_Index2Color
	add	esp, 4
	mov	DWORD PTR _Color1$[ebp], eax
; Line 73
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv83[ebp], ecx
	cmp	DWORD PTR tv83[ebp], 8
	je	SHORT $LN12@DrawHLineA
	cmp	DWORD PTR tv83[ebp], 16			; 00000010H
	je	SHORT $LN8@DrawHLineA
	cmp	DWORD PTR tv83[ebp], 32			; 00000020H
	je	$LN4@DrawHLineA
	jmp	$LN16@DrawHLineA
$LN12@DrawHLineA:
; Line 76
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_GUI_MEMDEV__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pData$9210[ebp], eax
$LN11@DrawHLineA:
; Line 78
	mov	eax, DWORD PTR _pData$9210[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_LCD_Index2Color
	add	esp, 4
	mov	DWORD PTR _Color2$[ebp], eax
; Line 79
	mov	eax, DWORD PTR _Intens$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Color2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Color1$[ebp]
	push	edx
	call	_LCD_MixColors256
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Color2$[ebp], eax
; Line 80
	mov	eax, DWORD PTR _Color2$[ebp]
	push	eax
	call	_LCD_Color2Index
	add	esp, 4
	mov	ecx, DWORD PTR _pData$9210[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pData$9210[ebp]
	add	edx, 1
	mov	DWORD PTR _pData$9210[ebp], edx
; Line 81
	mov	eax, DWORD PTR _Len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Len$[ebp], eax
	jne	SHORT $LN11@DrawHLineA
; Line 83
	jmp	$LN16@DrawHLineA
$LN8@DrawHLineA:
; Line 86
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_GUI_MEMDEV__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pData$9216[ebp], eax
$LN7@DrawHLineA:
; Line 88
	mov	eax, DWORD PTR _pData$9216[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	_LCD_Index2Color
	add	esp, 4
	mov	DWORD PTR _Color2$[ebp], eax
; Line 89
	mov	eax, DWORD PTR _Intens$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Color2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Color1$[ebp]
	push	edx
	call	_LCD_MixColors256
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Color2$[ebp], eax
; Line 90
	mov	eax, DWORD PTR _Color2$[ebp]
	push	eax
	call	_LCD_Color2Index
	add	esp, 4
	mov	ecx, DWORD PTR _pData$9216[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pData$9216[ebp]
	add	edx, 2
	mov	DWORD PTR _pData$9216[ebp], edx
; Line 91
	mov	eax, DWORD PTR _Len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Len$[ebp], eax
	jne	SHORT $LN7@DrawHLineA
; Line 93
	jmp	SHORT $LN16@DrawHLineA
$LN4@DrawHLineA:
; Line 96
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_GUI_MEMDEV__XY2PTR
	add	esp, 8
	mov	DWORD PTR _pData$9222[ebp], eax
$LN3@DrawHLineA:
; Line 98
	mov	eax, DWORD PTR _pData$9222[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_LCD_Index2Color
	add	esp, 4
	mov	DWORD PTR _Color2$[ebp], eax
; Line 99
	mov	eax, DWORD PTR _Intens$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Color2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Color1$[ebp]
	push	edx
	call	_LCD_MixColors256
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Color2$[ebp], eax
; Line 100
	mov	eax, DWORD PTR _Color2$[ebp]
	push	eax
	call	_LCD_Color2Index
	add	esp, 4
	mov	ecx, DWORD PTR _pData$9222[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _pData$9222[ebp]
	add	edx, 4
	mov	DWORD PTR _pData$9222[ebp], edx
; Line 101
	mov	eax, DWORD PTR _Len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Len$[ebp], eax
	jne	SHORT $LN3@DrawHLineA
$LN16@DrawHLineA:
; Line 105
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawHLineAlpha ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEMDEV_WriteEx
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEMDEV_WriteEx
_TEXT	SEGMENT
_hMem$ = 8						; size = 4
_xMag$ = 12						; size = 4
_yMag$ = 16						; size = 4
_Alpha$ = 20						; size = 4
_GUI_MEMDEV_WriteEx PROC				; COMDAT
; Line 304
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 305
	mov	eax, DWORD PTR _Alpha$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yMag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xMag$[ebp]
	push	edx
	push	-4095					; fffff001H
	push	-4095					; fffff001H
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_MEMDEV_WriteExAt
	add	esp, 24					; 00000018H
; Line 306
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV_WriteEx ENDP
_TEXT	ENDS
END
