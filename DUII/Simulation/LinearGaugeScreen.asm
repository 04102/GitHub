; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\DUII\LinearGaugeScreen.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
_pAnalog0Gauge DD 01H DUP (?)
_pAnalog1Gauge DD 01H DUP (?)
_pAnalog2Gauge DD 01H DUP (?)
_pAnalog3Gauge DD 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
$SG16237 DB	'Disabled', 00H
$SG16238 DB	00H
CONST	ENDS
PUBLIC	??_GLinearGauge@@QAEPAXI@Z			; LinearGauge::`scalar deleting destructor'
PUBLIC	__real@00000000
PUBLIC	__cbLinearGaugeCallback
EXTRN	_WM_DefaultProc:PROC
EXTRN	_GUI_MEMDEV_Delete:PROC
EXTRN	_DrawSignalStrength:PROC
EXTRN	_SlideOutVisible:PROC
EXTRN	_GUI_SelectLCD:PROC
EXTRN	_GUI_MEMDEV_CopyToLCD:PROC
EXTRN	_CheckWarningPopups:PROC
EXTRN	_bmthreewayarrow:BYTE
EXTRN	?SetValue@LinearGauge@@QAEXM@Z:PROC		; LinearGauge::SetValue
EXTRN	_GetValue:PROC
EXTRN	_inputEnabled:BYTE
EXTRN	?DrawBackground@LinearGauge@@QAEXXZ:PROC	; LinearGauge::DrawBackground
EXTRN	_bmAnalogs:BYTE
EXTRN	_GUI_DrawBitmap:PROC
EXTRN	_bmDarkAsphalt:BYTE
EXTRN	_GUI_SetTextMode:PROC
EXTRN	_GUI_Clear:PROC
EXTRN	_GUI_MEMDEV_Select:PROC
EXTRN	_lockupSemaphore:BYTE
EXTRN	_CS_IsVisible:PROC
EXTRN	_WM_InvalidateWindow:PROC
EXTRN	_WM_RestartTimer:PROC
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
_memLinearGaugesScreen DD 01H DUP (?)
_firsttimethrough DB 01H DUP (?)
	ALIGN	4

_hLinearGaugesScreen DD 01H DUP (?)
_hScreenTimer DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __real@00000000
; File c:\duii\duii\lineargaugescreen.cpp
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __cbLinearGaugeCallback
_TEXT	SEGMENT
tv179 = -368						; size = 4
tv173 = -368						; size = 4
tv167 = -368						; size = 4
tv161 = -368						; size = 4
tv64 = -368						; size = 4
$T16255 = -360						; size = 8
$T16256 = -344						; size = 8
$T16257 = -328						; size = 8
$T16258 = -312						; size = 8
$T16259 = -296						; size = 4
$T16260 = -284						; size = 4
$T16263 = -272						; size = 4
$T16264 = -260						; size = 4
$T16267 = -248						; size = 4
$T16268 = -236						; size = 4
$T16271 = -224						; size = 4
$T16272 = -212						; size = 4
_value$16182 = -8					; size = 4
_pMsg$ = 8						; size = 4
__cbLinearGaugeCallback PROC				; COMDAT
; Line 97
	push	ebp
	mov	ebp, esp
	sub	esp, 368				; 00000170H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-368]
	mov	ecx, 92					; 0000005cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 98
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 11			; 0000000bH
	je	$LN6@cbLinearGa
	cmp	DWORD PTR tv64[ebp], 15			; 0000000fH
	je	SHORT $LN20@cbLinearGa
	cmp	DWORD PTR tv64[ebp], 275		; 00000113H
	je	SHORT $LN22@cbLinearGa
	jmp	$LN1@cbLinearGa
$LN22@cbLinearGa:
; Line 101
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _hScreenTimer
	jne	SHORT $LN21@cbLinearGa
; Line 103
	push	25					; 00000019H
	mov	eax, DWORD PTR _hScreenTimer
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
; Line 104
	mov	eax, DWORD PTR _hLinearGaugesScreen
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN21@cbLinearGa:
; Line 106
	jmp	$LN23@cbLinearGa
$LN20@cbLinearGa:
; Line 109
	push	4
	call	_CS_IsVisible
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN18@cbLinearGa
	movzx	eax, BYTE PTR _firsttimethrough
	test	eax, eax
	je	$LN19@cbLinearGa
$LN18@cbLinearGa:
; Line 113
	movzx	eax, BYTE PTR _lockupSemaphore
	test	eax, eax
	je	SHORT $LN17@cbLinearGa
; Line 114
	jmp	$LN23@cbLinearGa
	jmp	SHORT $LN16@cbLinearGa
$LN17@cbLinearGa:
; Line 115
	mov	BYTE PTR _lockupSemaphore, 1
$LN16@cbLinearGa:
; Line 117
	mov	eax, DWORD PTR _memLinearGaugesScreen
	push	eax
	call	_GUI_MEMDEV_Select
	add	esp, 4
; Line 119
	call	_GUI_Clear
; Line 120
	push	2
	call	_GUI_SetTextMode
	add	esp, 4
; Line 122
	push	0
	push	0
	push	OFFSET _bmDarkAsphalt
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 123
	push	0
	push	0
	push	OFFSET _bmAnalogs
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 126
	mov	ecx, DWORD PTR _pAnalog0Gauge
	call	?DrawBackground@LinearGauge@@QAEXXZ	; LinearGauge::DrawBackground
; Line 127
	mov	ecx, DWORD PTR _pAnalog1Gauge
	call	?DrawBackground@LinearGauge@@QAEXXZ	; LinearGauge::DrawBackground
; Line 128
	mov	ecx, DWORD PTR _pAnalog2Gauge
	call	?DrawBackground@LinearGauge@@QAEXXZ	; LinearGauge::DrawBackground
; Line 129
	mov	ecx, DWORD PTR _pAnalog3Gauge
	call	?DrawBackground@LinearGauge@@QAEXXZ	; LinearGauge::DrawBackground
; Line 132
	movzx	eax, BYTE PTR _inputEnabled
	test	eax, eax
	je	SHORT $LN15@cbLinearGa
; Line 133
	push	54					; 00000036H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T16255[ebp], eax
	mov	DWORD PTR $T16255[ebp+4], edx
	fld	DWORD PTR $T16255[ebp]
	fstp	DWORD PTR _value$16182[ebp]
	jmp	SHORT $LN14@cbLinearGa
$LN15@cbLinearGa:
; Line 134
	fldz
	fstp	DWORD PTR _value$16182[ebp]
$LN14@cbLinearGa:
; Line 135
	push	ecx
	fld	DWORD PTR _value$16182[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pAnalog0Gauge
	call	?SetValue@LinearGauge@@QAEXM@Z		; LinearGauge::SetValue
; Line 137
	movzx	eax, BYTE PTR _inputEnabled+1
	test	eax, eax
	je	SHORT $LN13@cbLinearGa
; Line 138
	push	55					; 00000037H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T16256[ebp], eax
	mov	DWORD PTR $T16256[ebp+4], edx
	fld	DWORD PTR $T16256[ebp]
	fstp	DWORD PTR _value$16182[ebp]
	jmp	SHORT $LN12@cbLinearGa
$LN13@cbLinearGa:
; Line 139
	fldz
	fstp	DWORD PTR _value$16182[ebp]
$LN12@cbLinearGa:
; Line 140
	push	ecx
	fld	DWORD PTR _value$16182[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pAnalog1Gauge
	call	?SetValue@LinearGauge@@QAEXM@Z		; LinearGauge::SetValue
; Line 142
	movzx	eax, BYTE PTR _inputEnabled+2
	test	eax, eax
	je	SHORT $LN11@cbLinearGa
; Line 143
	push	56					; 00000038H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T16257[ebp], eax
	mov	DWORD PTR $T16257[ebp+4], edx
	fld	DWORD PTR $T16257[ebp]
	fstp	DWORD PTR _value$16182[ebp]
	jmp	SHORT $LN10@cbLinearGa
$LN11@cbLinearGa:
; Line 144
	fldz
	fstp	DWORD PTR _value$16182[ebp]
$LN10@cbLinearGa:
; Line 145
	push	ecx
	fld	DWORD PTR _value$16182[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pAnalog2Gauge
	call	?SetValue@LinearGauge@@QAEXM@Z		; LinearGauge::SetValue
; Line 147
	movzx	eax, BYTE PTR _inputEnabled+3
	test	eax, eax
	je	SHORT $LN9@cbLinearGa
; Line 148
	push	57					; 00000039H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T16258[ebp], eax
	mov	DWORD PTR $T16258[ebp+4], edx
	fld	DWORD PTR $T16258[ebp]
	fstp	DWORD PTR _value$16182[ebp]
	jmp	SHORT $LN8@cbLinearGa
$LN9@cbLinearGa:
; Line 149
	fldz
	fstp	DWORD PTR _value$16182[ebp]
$LN8@cbLinearGa:
; Line 150
	push	ecx
	fld	DWORD PTR _value$16182[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pAnalog3Gauge
	call	?SetValue@LinearGauge@@QAEXM@Z		; LinearGauge::SetValue
; Line 152
	mov	BYTE PTR _firsttimethrough, 0
; Line 154
	push	229					; 000000e5H
	push	0
	push	OFFSET _bmthreewayarrow
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 164
	call	_CheckWarningPopups
; Line 166
	mov	eax, DWORD PTR _memLinearGaugesScreen
	push	eax
	call	_GUI_MEMDEV_CopyToLCD
	add	esp, 4
; Line 167
	call	_GUI_SelectLCD
$LN19@cbLinearGa:
; Line 169
	call	_SlideOutVisible
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@cbLinearGa
; Line 170
	call	_DrawSignalStrength
$LN7@cbLinearGa:
; Line 171
	jmp	$LN23@cbLinearGa
$LN6@cbLinearGa:
; Line 174
	cmp	DWORD PTR _pAnalog0Gauge, 0
	je	SHORT $LN5@cbLinearGa
; Line 176
	mov	eax, DWORD PTR _pAnalog0Gauge
	mov	DWORD PTR $T16260[ebp], eax
	mov	ecx, DWORD PTR $T16260[ebp]
	mov	DWORD PTR $T16259[ebp], ecx
	cmp	DWORD PTR $T16259[ebp], 0
	je	SHORT $LN27@cbLinearGa
	push	1
	mov	ecx, DWORD PTR $T16259[ebp]
	call	??_GLinearGauge@@QAEPAXI@Z
	mov	DWORD PTR tv161[ebp], eax
	jmp	SHORT $LN28@cbLinearGa
$LN27@cbLinearGa:
	mov	DWORD PTR tv161[ebp], 0
$LN28@cbLinearGa:
; Line 177
	mov	DWORD PTR _pAnalog0Gauge, 0
$LN5@cbLinearGa:
; Line 179
	cmp	DWORD PTR _pAnalog1Gauge, 0
	je	SHORT $LN4@cbLinearGa
; Line 181
	mov	eax, DWORD PTR _pAnalog1Gauge
	mov	DWORD PTR $T16264[ebp], eax
	mov	ecx, DWORD PTR $T16264[ebp]
	mov	DWORD PTR $T16263[ebp], ecx
	cmp	DWORD PTR $T16263[ebp], 0
	je	SHORT $LN29@cbLinearGa
	push	1
	mov	ecx, DWORD PTR $T16263[ebp]
	call	??_GLinearGauge@@QAEPAXI@Z
	mov	DWORD PTR tv167[ebp], eax
	jmp	SHORT $LN30@cbLinearGa
$LN29@cbLinearGa:
	mov	DWORD PTR tv167[ebp], 0
$LN30@cbLinearGa:
; Line 182
	mov	DWORD PTR _pAnalog1Gauge, 0
$LN4@cbLinearGa:
; Line 184
	cmp	DWORD PTR _pAnalog2Gauge, 0
	je	SHORT $LN3@cbLinearGa
; Line 186
	mov	eax, DWORD PTR _pAnalog2Gauge
	mov	DWORD PTR $T16268[ebp], eax
	mov	ecx, DWORD PTR $T16268[ebp]
	mov	DWORD PTR $T16267[ebp], ecx
	cmp	DWORD PTR $T16267[ebp], 0
	je	SHORT $LN31@cbLinearGa
	push	1
	mov	ecx, DWORD PTR $T16267[ebp]
	call	??_GLinearGauge@@QAEPAXI@Z
	mov	DWORD PTR tv173[ebp], eax
	jmp	SHORT $LN32@cbLinearGa
$LN31@cbLinearGa:
	mov	DWORD PTR tv173[ebp], 0
$LN32@cbLinearGa:
; Line 187
	mov	DWORD PTR _pAnalog2Gauge, 0
$LN3@cbLinearGa:
; Line 189
	cmp	DWORD PTR _pAnalog3Gauge, 0
	je	SHORT $LN2@cbLinearGa
; Line 191
	mov	eax, DWORD PTR _pAnalog3Gauge
	mov	DWORD PTR $T16272[ebp], eax
	mov	ecx, DWORD PTR $T16272[ebp]
	mov	DWORD PTR $T16271[ebp], ecx
	cmp	DWORD PTR $T16271[ebp], 0
	je	SHORT $LN33@cbLinearGa
	push	1
	mov	ecx, DWORD PTR $T16271[ebp]
	call	??_GLinearGauge@@QAEPAXI@Z
	mov	DWORD PTR tv179[ebp], eax
	jmp	SHORT $LN34@cbLinearGa
$LN33@cbLinearGa:
	mov	DWORD PTR tv179[ebp], 0
$LN34@cbLinearGa:
; Line 192
	mov	DWORD PTR _pAnalog3Gauge, 0
$LN2@cbLinearGa:
; Line 194
	mov	eax, DWORD PTR _memLinearGaugesScreen
	push	eax
	call	_GUI_MEMDEV_Delete
	add	esp, 4
; Line 195
	jmp	SHORT $LN23@cbLinearGa
$LN1@cbLinearGa:
; Line 198
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN23@cbLinearGa:
; Line 200
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 368				; 00000170H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__cbLinearGaugeCallback ENDP
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??1LinearGauge@@QAE@XZ:PROC			; LinearGauge::~LinearGauge
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GLinearGauge@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GLinearGauge@@QAEPAXI@Z PROC				; LinearGauge::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1LinearGauge@@QAE@XZ			; LinearGauge::~LinearGauge
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GLinearGauge@@QAEPAXI@Z ENDP				; LinearGauge::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_CreateLinearInputGauge
PUBLIC	_DisplayMultiAnalogGaugesScreen
EXTRN	_WM_CreateTimer:PROC
EXTRN	_GUI_MEMDEV_Create:PROC
EXTRN	_SystemError:PROC
EXTRN	_WM_CreateWindowAsChild:PROC
EXTRN	_Display_DualGaugeScreen:PROC
EXTRN	_DetermineAnalogScreenSelection:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DisplayMultiAnalogGaugesScreen
_TEXT	SEGMENT
_hParent$ = 8						; size = 4
_DisplayMultiAnalogGaugesScreen PROC			; COMDAT
; Line 208
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 209
	call	_DetermineAnalogScreenSelection
	cmp	eax, 2
	jg	SHORT $LN2@DisplayMul
; Line 211
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	call	_Display_DualGaugeScreen
	add	esp, 4
	jmp	$LN3@DisplayMul
$LN2@DisplayMul:
; Line 215
	mov	BYTE PTR _firsttimethrough, 1
; Line 216
	push	0
	push	OFFSET __cbLinearGaugeCallback
	push	2
	mov	eax, DWORD PTR _hParent$[ebp]
	push	eax
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	call	_WM_CreateWindowAsChild
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hLinearGaugesScreen, eax
	cmp	DWORD PTR _hLinearGaugesScreen, 0
	jg	SHORT $LN1@DisplayMul
; Line 217
	call	_SystemError
$LN1@DisplayMul:
; Line 219
	push	35					; 00000023H
	push	5
	mov	eax, DWORD PTR _hLinearGaugesScreen
	push	eax
	push	0
	call	_CreateLinearInputGauge
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pAnalog0Gauge, eax
; Line 220
	push	35					; 00000023H
	push	245					; 000000f5H
	mov	eax, DWORD PTR _hLinearGaugesScreen
	push	eax
	push	1
	call	_CreateLinearInputGauge
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pAnalog1Gauge, eax
; Line 221
	push	150					; 00000096H
	push	5
	mov	eax, DWORD PTR _hLinearGaugesScreen
	push	eax
	push	2
	call	_CreateLinearInputGauge
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pAnalog2Gauge, eax
; Line 222
	push	150					; 00000096H
	push	245					; 000000f5H
	mov	eax, DWORD PTR _hLinearGaugesScreen
	push	eax
	push	3
	call	_CreateLinearInputGauge
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pAnalog3Gauge, eax
; Line 224
	mov	eax, DWORD PTR _hLinearGaugesScreen
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 227
	push	272					; 00000110H
	push	480					; 000001e0H
	push	0
	push	0
	call	_GUI_MEMDEV_Create
	add	esp, 16					; 00000010H
	mov	DWORD PTR _memLinearGaugesScreen, eax
; Line 229
	push	0
	push	25					; 00000019H
	push	0
	mov	eax, DWORD PTR _hLinearGaugesScreen
	push	eax
	call	_WM_CreateTimer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hScreenTimer, eax
; Line 231
	mov	eax, DWORD PTR _hLinearGaugesScreen
$LN3@DisplayMul:
; Line 232
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DisplayMultiAnalogGaugesScreen ENDP
_TEXT	ENDS
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@42c80000
PUBLIC	__real@0000000000000000
EXTRN	??0LinearGauge@@QAE@HHHHMMHMHMPAD0HJ_N@Z:PROC	; LinearGauge::LinearGauge
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	_vehicleData:BYTE
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _CreateLinearInputGauge
_TEXT	SEGMENT
tv182 = -292						; size = 4
$T16293 = -284						; size = 4
$T16294 = -272						; size = 4
_pGauge$ = -68						; size = 4
_pUnits$ = -56						; size = 4
_pName$ = -44						; size = 4
_temp$ = -32						; size = 4
_lowerLimit$ = -20					; size = 4
_upperLimit$ = -8					; size = 4
_input$ = 8						; size = 1
_hParent$ = 12						; size = 4
_hpos$ = 16						; size = 4
_vpos$ = 20						; size = 4
_CreateLinearInputGauge PROC				; COMDAT
; Line 236
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 241
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+176]
	fstp	DWORD PTR _upperLimit$[ebp]
; Line 242
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	fld	DWORD PTR _vehicleData[eax+172]
	fstp	DWORD PTR _lowerLimit$[ebp]
; Line 245
	fld	DWORD PTR _lowerLimit$[ebp]
	fcomp	DWORD PTR _upperLimit$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN6@CreateLine
; Line 246
	fld	DWORD PTR _upperLimit$[ebp]
	fstp	DWORD PTR _temp$[ebp]
; Line 247
	fld	DWORD PTR _lowerLimit$[ebp]
	fstp	DWORD PTR _upperLimit$[ebp]
; Line 248
	fld	DWORD PTR _temp$[ebp]
	fstp	DWORD PTR _lowerLimit$[ebp]
$LN6@CreateLine:
; Line 251
	fld	DWORD PTR _upperLimit$[ebp]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@CreateLine
	fld	DWORD PTR _lowerLimit$[ebp]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@CreateLine
; Line 253
	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR _upperLimit$[ebp]
; Line 254
	fldz
	fstp	DWORD PTR _lowerLimit$[ebp]
$LN5@CreateLine:
; Line 256
	fld	DWORD PTR _upperLimit$[ebp]
	fsub	DWORD PTR _lowerLimit$[ebp]
	fmul	QWORD PTR __real@3fb999999999999a
	fstp	DWORD PTR _temp$[ebp]
; Line 258
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _input$[ebp]
	mov	dl, BYTE PTR _vehicleData[eax+147]
	mov	BYTE PTR _inputEnabled[ecx], dl
	movzx	eax, BYTE PTR _input$[ebp]
	movzx	ecx, BYTE PTR _inputEnabled[eax]
	test	ecx, ecx
	je	SHORT $LN4@CreateLine
; Line 260
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	add	eax, OFFSET _vehicleData+120
	mov	DWORD PTR _pName$[ebp], eax
; Line 261
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	add	eax, OFFSET _vehicleData+137
	mov	DWORD PTR _pUnits$[ebp], eax
; Line 263
	jmp	SHORT $LN3@CreateLine
$LN4@CreateLine:
; Line 265
	mov	DWORD PTR _pName$[ebp], OFFSET $SG16237
; Line 266
	mov	DWORD PTR _pUnits$[ebp], OFFSET $SG16238
$LN3@CreateLine:
; Line 274
	push	72					; 00000048H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T16294[ebp], eax
	cmp	DWORD PTR $T16294[ebp], 0
	je	$LN9@CreateLine
	movzx	eax, BYTE PTR _input$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _vehicleData[eax+147]
	test	ecx, ecx
	setne	dl
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR _hParent$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _pUnits$[ebp]
	push	edx
	mov	eax, DWORD PTR _pName$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _input$[ebp]
	shl	ecx, 6
	push	ecx
	fld	DWORD PTR _vehicleData[ecx+156]
	fstp	DWORD PTR [esp]
	movzx	edx, BYTE PTR _input$[ebp]
	shl	edx, 6
	movzx	eax, BYTE PTR _vehicleData[edx+149]
	neg	eax
	sbb	eax, eax
	neg	eax
	push	eax
	movzx	ecx, BYTE PTR _input$[ebp]
	shl	ecx, 6
	push	ecx
	fld	DWORD PTR _vehicleData[ecx+152]
	fstp	DWORD PTR [esp]
	movzx	edx, BYTE PTR _input$[ebp]
	shl	edx, 6
	movzx	eax, BYTE PTR _vehicleData[edx+148]
	neg	eax
	sbb	eax, eax
	neg	eax
	push	eax
	push	ecx
	fld	DWORD PTR _upperLimit$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _lowerLimit$[ebp]
	fstp	DWORD PTR [esp]
	push	110					; 0000006eH
	push	230					; 000000e6H
	mov	ecx, DWORD PTR _vpos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hpos$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T16294[ebp]
	call	??0LinearGauge@@QAE@HHHHMMHMHMPAD0HJ_N@Z ; LinearGauge::LinearGauge
	mov	DWORD PTR tv182[ebp], eax
	jmp	SHORT $LN10@CreateLine
$LN9@CreateLine:
	mov	DWORD PTR tv182[ebp], 0
$LN10@CreateLine:
	mov	eax, DWORD PTR tv182[ebp]
	mov	DWORD PTR $T16293[ebp], eax
	mov	ecx, DWORD PTR $T16293[ebp]
	mov	DWORD PTR _pGauge$[ebp], ecx
	cmp	DWORD PTR _pGauge$[ebp], 0
	ja	SHORT $LN2@CreateLine
; Line 275
	call	_SystemError
$LN2@CreateLine:
; Line 277
	movzx	eax, BYTE PTR _input$[ebp]
	movzx	ecx, BYTE PTR _inputEnabled[eax]
	test	ecx, ecx
	jne	SHORT $LN1@CreateLine
; Line 278
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pGauge$[ebp]
	call	?SetValue@LinearGauge@@QAEXM@Z		; LinearGauge::SetValue
$LN1@CreateLine:
; Line 280
	mov	eax, DWORD PTR _pGauge$[ebp]
; Line 281
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CreateLinearInputGauge ENDP
_TEXT	ENDS
END
