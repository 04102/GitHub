; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\MemDev\GUIDEV_WriteAlpha.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_MEMDEV_WriteAlphaAt
EXTRN	_WM__GetNextIVR:PROC
EXTRN	_WM__InitIVRSearch:PROC
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\memdev\guidev_writealpha.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_MEMDEV_WriteAlphaAt
_TEXT	SEGMENT
_r$9348 = -24						; size = 8
_pDevData$9347 = -8					; size = 4
_hMem$ = 8						; size = 4
_Alpha$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_GUI_MEMDEV_WriteAlphaAt PROC				; COMDAT
; Line 361
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 362
	cmp	DWORD PTR _hMem$[ebp], 0
	je	$LN7@GUI_MEMDEV
; Line 368
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDevData$9347[ebp], eax
; Line 369
	cmp	DWORD PTR _x$[ebp], -4095		; fffff001H
	jne	SHORT $LN5@GUI_MEMDEV
; Line 370
	mov	eax, DWORD PTR _pDevData$9347[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	DWORD PTR _x$[ebp], ecx
; Line 371
	mov	eax, DWORD PTR _pDevData$9347[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR _y$[ebp], ecx
$LN5@GUI_MEMDEV:
; Line 374
	mov	ax, WORD PTR _x$[ebp]
	mov	WORD PTR _r$9348[ebp], ax
	movsx	ecx, WORD PTR _r$9348[ebp]
	mov	edx, DWORD PTR _pDevData$9347[ebp]
	movsx	eax, WORD PTR [edx+8]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	WORD PTR _r$9348[ebp+4], cx
; Line 375
	mov	ax, WORD PTR _y$[ebp]
	mov	WORD PTR _r$9348[ebp+2], ax
	movsx	ecx, WORD PTR _r$9348[ebp+2]
	mov	edx, DWORD PTR _pDevData$9347[ebp]
	movsx	eax, WORD PTR [edx+10]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	WORD PTR _r$9348[ebp+6], cx
; Line 376
	lea	eax, DWORD PTR _r$9348[ebp]
	push	eax
	call	_WM__InitIVRSearch
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@GUI_MEMDEV
$LN3@GUI_MEMDEV:
; Line 377
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Alpha$[ebp]
	push	edx
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	__WriteAlphaToActiveAt
	add	esp, 16					; 00000010H
; Line 378
	call	_WM__GetNextIVR
	test	eax, eax
	jne	SHORT $LN3@GUI_MEMDEV
$LN7@GUI_MEMDEV:
; Line 384
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@GUI_MEMDEV
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@GUI_MEMDEV:
	DD	1
	DD	$LN10@GUI_MEMDEV
$LN10@GUI_MEMDEV:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN9@GUI_MEMDEV
$LN9@GUI_MEMDEV:
	DB	114					; 00000072H
	DB	0
_GUI_MEMDEV_WriteAlphaAt ENDP
_TEXT	ENDS
EXTRN	_GUI_ALLOC_Free:PROC
EXTRN	_LCD_DrawBitmap:PROC
EXTRN	_LCD_MixColors256:PROC
EXTRN	_GUI_MEMDEV__XY2PTREx:PROC
EXTRN	_GUI_GetpfColor2IndexEx:PROC
EXTRN	_GUI_GetpfIndex2ColorEx:PROC
EXTRN	_LCD_GetBitsPerPixelEx:PROC
EXTRN	_GUI_MEMDEV_GetBitsPerPixel:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	_GUI_ALLOC_AllocNoInit:PROC
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_GUI_ALLOC_LockH:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __WriteAlphaToActiveAt
_TEXT	SEGMENT
tv322 = -700						; size = 4
tv254 = -700						; size = 4
tv160 = -700						; size = 4
tv159 = -700						; size = 4
_pSrc$9325 = -500					; size = 4
_pSrc$9319 = -488					; size = 4
_pSrc$9313 = -476					; size = 4
_pBk$9305 = -464					; size = 4
_pDst$9304 = -452					; size = 4
_pSrc$9298 = -440					; size = 4
_pSrc$9292 = -428					; size = 4
_pSrc$9286 = -416					; size = 4
_pBk$9278 = -404					; size = 4
_pDst$9277 = -392					; size = 4
_pSrc$9271 = -380					; size = 4
_pSrc$9265 = -368					; size = 4
_pSrc$9259 = -356					; size = 4
_pBk$9251 = -344					; size = 4
_pDst$9250 = -332					; size = 4
_BytesPerPixelDST$ = -320				; size = 4
_BytesPerPixelSRC$ = -308				; size = 4
_BitsPerPixelDST$ = -296				; size = 4
_BitsPerPixelSRC$ = -284				; size = 4
_xOffFirst$ = -272					; size = 4
_n$ = -260						; size = 4
_yPos$ = -248						; size = 4
_xPos$ = -236						; size = 4
_xOff$ = -224						; size = 4
_yi$ = -212						; size = 4
_NumPixelsBitmap$ = -200				; size = 4
_NumPixels$ = -188					; size = 4
_ySize$ = -176						; size = 4
_xSize$ = -164						; size = 4
_Index$ = -152						; size = 4
_BkColor$ = -140					; size = 4
_Color$ = -128						; size = 4
_pfColor2Index$ = -116					; size = 4
_pfIndex2Color$ = -104					; size = 4
_pData$ = -92						; size = 4
_pBufferBk$ = -80					; size = 4
_pBuffer$ = -68						; size = 4
_hBufferBk$ = -56					; size = 4
_hBuffer$ = -44						; size = 4
_pUsage$ = -32						; size = 4
_hUsage$ = -20						; size = 4
_pDev$ = -8						; size = 4
_hMem$ = 8						; size = 4
_Intens$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
__WriteAlphaToActiveAt PROC				; COMDAT
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 700				; 000002bcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-700]
	mov	ecx, 175				; 000000afH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 87
	cmp	DWORD PTR _hMem$[ebp], 0
	je	$LN67@WriteAlpha
; Line 88
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 89
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _hUsage$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	DWORD PTR _xSize$[ebp], ecx
; Line 91
	mov	eax, DWORD PTR _pDev$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	mov	DWORD PTR _ySize$[ebp], ecx
; Line 92
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pDev$[ebp], 0
; Line 93
	cmp	DWORD PTR _hUsage$[ebp], 0
	je	$LN67@WriteAlpha
; Line 97
	mov	eax, DWORD PTR _xSize$[ebp]
	shl	eax, 2
	push	eax
	call	_GUI_ALLOC_AllocNoInit
	add	esp, 4
	mov	DWORD PTR _hBuffer$[ebp], eax
; Line 98
	cmp	DWORD PTR _hBuffer$[ebp], 0
	je	$LN67@WriteAlpha
; Line 102
	mov	eax, DWORD PTR _xSize$[ebp]
	shl	eax, 2
	push	eax
	call	_GUI_ALLOC_AllocNoInit
	add	esp, 4
	mov	DWORD PTR _hBufferBk$[ebp], eax
; Line 103
	cmp	DWORD PTR _hBufferBk$[ebp], 0
	je	$LN63@WriteAlpha
; Line 107
	mov	eax, DWORD PTR _hUsage$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pUsage$[ebp], eax
; Line 108
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 109
	mov	eax, DWORD PTR _hBuffer$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pBuffer$[ebp], eax
; Line 110
	mov	eax, DWORD PTR _hBufferBk$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pBufferBk$[ebp], eax
; Line 114
	cmp	DWORD PTR _GUI_Context+76, 0
	je	SHORT $LN62@WriteAlpha
; Line 115
	mov	eax, DWORD PTR _GUI_Context+76
	push	eax
	call	_GUI_MEMDEV_GetBitsPerPixel
	add	esp, 4
	mov	DWORD PTR _BitsPerPixelDST$[ebp], eax
; Line 116
	jmp	SHORT $LN61@WriteAlpha
$LN62@WriteAlpha:
; Line 117
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_LCD_GetBitsPerPixelEx
	add	esp, 4
	mov	DWORD PTR _BitsPerPixelDST$[ebp], eax
$LN61@WriteAlpha:
; Line 119
	cmp	DWORD PTR _BitsPerPixelDST$[ebp], 8
	jg	SHORT $LN60@WriteAlpha
; Line 120
	mov	DWORD PTR _BytesPerPixelDST$[ebp], 1
	jmp	SHORT $LN59@WriteAlpha
$LN60@WriteAlpha:
; Line 121
	cmp	DWORD PTR _BitsPerPixelDST$[ebp], 16	; 00000010H
	jg	SHORT $LN58@WriteAlpha
; Line 122
	mov	DWORD PTR _BytesPerPixelDST$[ebp], 2
; Line 123
	jmp	SHORT $LN59@WriteAlpha
$LN58@WriteAlpha:
; Line 124
	mov	DWORD PTR _BytesPerPixelDST$[ebp], 4
$LN59@WriteAlpha:
; Line 126
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _BitsPerPixelSRC$[ebp], ecx
; Line 127
	cmp	DWORD PTR _BitsPerPixelSRC$[ebp], 8
	jg	SHORT $LN56@WriteAlpha
; Line 128
	mov	DWORD PTR _BytesPerPixelSRC$[ebp], 1
	jmp	SHORT $LN55@WriteAlpha
$LN56@WriteAlpha:
; Line 129
	cmp	DWORD PTR _BitsPerPixelSRC$[ebp], 16	; 00000010H
	jg	SHORT $LN54@WriteAlpha
; Line 130
	mov	DWORD PTR _BytesPerPixelSRC$[ebp], 2
; Line 131
	jmp	SHORT $LN55@WriteAlpha
$LN54@WriteAlpha:
; Line 132
	mov	DWORD PTR _BytesPerPixelSRC$[ebp], 4
$LN55@WriteAlpha:
; Line 137
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_GUI_GetpfIndex2ColorEx
	add	esp, 4
	mov	DWORD PTR _pfIndex2Color$[ebp], eax
; Line 138
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_GUI_GetpfColor2IndexEx
	add	esp, 4
	mov	DWORD PTR _pfColor2Index$[ebp], eax
; Line 142
	mov	DWORD PTR _yi$[ebp], 0
	jmp	SHORT $LN52@WriteAlpha
$LN51@WriteAlpha:
	mov	eax, DWORD PTR _yi$[ebp]
	add	eax, 1
	mov	DWORD PTR _yi$[ebp], eax
$LN52@WriteAlpha:
	mov	eax, DWORD PTR _yi$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	$LN50@WriteAlpha
; Line 143
	mov	DWORD PTR _xOff$[ebp], 0
; Line 144
	mov	esi, esp
	mov	eax, DWORD PTR _yi$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xOff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _NumPixels$[ebp], eax
; Line 145
	mov	eax, DWORD PTR _yi$[ebp]
	add	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _yPos$[ebp], eax
$LN49@WriteAlpha:
; Line 149
	cmp	DWORD PTR _NumPixels$[ebp], 0
	je	$LN48@WriteAlpha
; Line 150
	mov	eax, DWORD PTR _xOff$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _xPos$[ebp], eax
; Line 151
	mov	eax, DWORD PTR _yi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xOff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDev$[ebp]
	push	edx
	call	_GUI_MEMDEV__XY2PTREx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pData$[ebp], eax
; Line 152
	mov	eax, DWORD PTR _NumPixels$[ebp]
	mov	DWORD PTR _NumPixelsBitmap$[ebp], eax
; Line 156
	mov	eax, DWORD PTR _pBufferBk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NumPixels$[ebp]
	mov	edx, DWORD PTR _xPos$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	push	eax
	mov	ecx, DWORD PTR _yPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xPos$[ebp]
	push	edx
	call	__ReadLine
	add	esp, 16					; 00000010H
; Line 160
	mov	DWORD PTR _n$[ebp], 0
; Line 161
	mov	eax, DWORD PTR _xOff$[ebp]
	mov	DWORD PTR _xOffFirst$[ebp], eax
; Line 162
	mov	eax, DWORD PTR _BytesPerPixelDST$[ebp]
	mov	DWORD PTR tv159[ebp], eax
	cmp	DWORD PTR tv159[ebp], 1
	je	SHORT $LN45@WriteAlpha
	cmp	DWORD PTR tv159[ebp], 2
	je	$LN30@WriteAlpha
	cmp	DWORD PTR tv159[ebp], 4
	je	$LN15@WriteAlpha
	jmp	$LN46@WriteAlpha
$LN45@WriteAlpha:
; Line 166
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	DWORD PTR _pDst$9250[ebp], eax
; Line 167
	mov	eax, DWORD PTR _pBufferBk$[ebp]
	mov	DWORD PTR _pBk$9251[ebp], eax
; Line 168
	mov	eax, DWORD PTR _BytesPerPixelSRC$[ebp]
	mov	DWORD PTR tv160[ebp], eax
	cmp	DWORD PTR tv160[ebp], 1
	je	SHORT $LN42@WriteAlpha
	cmp	DWORD PTR tv160[ebp], 2
	je	$LN38@WriteAlpha
	cmp	DWORD PTR tv160[ebp], 4
	je	$LN34@WriteAlpha
	jmp	$LN43@WriteAlpha
$LN42@WriteAlpha:
; Line 171
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pSrc$9259[ebp], eax
$LN41@WriteAlpha:
; Line 173
	mov	eax, DWORD PTR _pSrc$9259[ebp]
	add	eax, DWORD PTR _n$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Index$[ebp], ecx
; Line 174
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Color$[ebp], eax
; Line 175
	mov	eax, DWORD PTR _pBk$9251[ebp]
	add	eax, DWORD PTR _n$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	esi, esp
	push	ecx
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _BkColor$[ebp], eax
; Line 176
	mov	eax, DWORD PTR _Intens$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BkColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Color$[ebp]
	push	edx
	call	_LCD_MixColors256
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Color$[ebp], eax
; Line 177
	mov	esi, esp
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Index$[ebp], eax
; Line 178
	mov	eax, DWORD PTR _pDst$9250[ebp]
	add	eax, DWORD PTR _xOff$[ebp]
	mov	cl, BYTE PTR _Index$[ebp]
	mov	BYTE PTR [eax], cl
; Line 179
	mov	eax, DWORD PTR _xOff$[ebp]
	add	eax, 1
	mov	DWORD PTR _xOff$[ebp], eax
; Line 180
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 181
	mov	eax, DWORD PTR _NumPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
	jne	$LN41@WriteAlpha
; Line 183
	jmp	$LN43@WriteAlpha
$LN38@WriteAlpha:
; Line 186
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pSrc$9265[ebp], eax
$LN37@WriteAlpha:
; Line 188
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _pSrc$9265[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _Index$[ebp], edx
; Line 189
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Color$[ebp], eax
; Line 190
	mov	eax, DWORD PTR _pBk$9251[ebp]
	add	eax, DWORD PTR _n$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	esi, esp
	push	ecx
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _BkColor$[ebp], eax
; Line 191
	mov	eax, DWORD PTR _Intens$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BkColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Color$[ebp]
	push	edx
	call	_LCD_MixColors256
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Color$[ebp], eax
; Line 192
	mov	esi, esp
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Index$[ebp], eax
; Line 193
	mov	eax, DWORD PTR _pDst$9250[ebp]
	add	eax, DWORD PTR _xOff$[ebp]
	mov	cl, BYTE PTR _Index$[ebp]
	mov	BYTE PTR [eax], cl
; Line 194
	mov	eax, DWORD PTR _xOff$[ebp]
	add	eax, 1
	mov	DWORD PTR _xOff$[ebp], eax
; Line 195
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 196
	mov	eax, DWORD PTR _NumPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
	jne	$LN37@WriteAlpha
; Line 198
	jmp	$LN43@WriteAlpha
$LN34@WriteAlpha:
; Line 201
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pSrc$9271[ebp], eax
$LN33@WriteAlpha:
; Line 203
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _pSrc$9271[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _Index$[ebp], edx
; Line 204
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Color$[ebp], eax
; Line 205
	mov	eax, DWORD PTR _pBk$9251[ebp]
	add	eax, DWORD PTR _n$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	esi, esp
	push	ecx
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _BkColor$[ebp], eax
; Line 206
	mov	eax, DWORD PTR _Intens$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BkColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Color$[ebp]
	push	edx
	call	_LCD_MixColors256
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Color$[ebp], eax
; Line 207
	mov	esi, esp
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Index$[ebp], eax
; Line 208
	mov	eax, DWORD PTR _pDst$9250[ebp]
	add	eax, DWORD PTR _xOff$[ebp]
	mov	cl, BYTE PTR _Index$[ebp]
	mov	BYTE PTR [eax], cl
; Line 209
	mov	eax, DWORD PTR _xOff$[ebp]
	add	eax, 1
	mov	DWORD PTR _xOff$[ebp], eax
; Line 210
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 211
	mov	eax, DWORD PTR _NumPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
	jne	$LN33@WriteAlpha
$LN43@WriteAlpha:
; Line 216
	jmp	$LN46@WriteAlpha
$LN30@WriteAlpha:
; Line 220
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	DWORD PTR _pDst$9277[ebp], eax
; Line 221
	mov	eax, DWORD PTR _pBufferBk$[ebp]
	mov	DWORD PTR _pBk$9278[ebp], eax
; Line 222
	mov	eax, DWORD PTR _BytesPerPixelSRC$[ebp]
	mov	DWORD PTR tv254[ebp], eax
	cmp	DWORD PTR tv254[ebp], 1
	je	SHORT $LN27@WriteAlpha
	cmp	DWORD PTR tv254[ebp], 2
	je	$LN23@WriteAlpha
	cmp	DWORD PTR tv254[ebp], 4
	je	$LN19@WriteAlpha
	jmp	$LN28@WriteAlpha
$LN27@WriteAlpha:
; Line 225
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pSrc$9286[ebp], eax
$LN26@WriteAlpha:
; Line 227
	mov	eax, DWORD PTR _pSrc$9286[ebp]
	add	eax, DWORD PTR _n$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Index$[ebp], ecx
; Line 228
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Color$[ebp], eax
; Line 229
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _pBk$9278[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	esi, esp
	push	edx
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _BkColor$[ebp], eax
; Line 230
	mov	eax, DWORD PTR _Intens$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BkColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Color$[ebp]
	push	edx
	call	_LCD_MixColors256
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Color$[ebp], eax
; Line 231
	mov	esi, esp
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Index$[ebp], eax
; Line 232
	mov	eax, DWORD PTR _xOff$[ebp]
	mov	ecx, DWORD PTR _pDst$9277[ebp]
	mov	dx, WORD PTR _Index$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 233
	mov	eax, DWORD PTR _xOff$[ebp]
	add	eax, 1
	mov	DWORD PTR _xOff$[ebp], eax
; Line 234
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 235
	mov	eax, DWORD PTR _NumPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
	jne	$LN26@WriteAlpha
; Line 237
	jmp	$LN28@WriteAlpha
$LN23@WriteAlpha:
; Line 240
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pSrc$9292[ebp], eax
$LN22@WriteAlpha:
; Line 242
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _pSrc$9292[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _Index$[ebp], edx
; Line 243
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Color$[ebp], eax
; Line 244
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _pBk$9278[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	esi, esp
	push	edx
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _BkColor$[ebp], eax
; Line 245
	mov	eax, DWORD PTR _Intens$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BkColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Color$[ebp]
	push	edx
	call	_LCD_MixColors256
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Color$[ebp], eax
; Line 246
	mov	esi, esp
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Index$[ebp], eax
; Line 247
	mov	eax, DWORD PTR _xOff$[ebp]
	mov	ecx, DWORD PTR _pDst$9277[ebp]
	mov	dx, WORD PTR _Index$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 248
	mov	eax, DWORD PTR _xOff$[ebp]
	add	eax, 1
	mov	DWORD PTR _xOff$[ebp], eax
; Line 249
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 250
	mov	eax, DWORD PTR _NumPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
	jne	$LN22@WriteAlpha
; Line 252
	jmp	$LN28@WriteAlpha
$LN19@WriteAlpha:
; Line 255
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pSrc$9298[ebp], eax
$LN18@WriteAlpha:
; Line 257
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _pSrc$9298[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _Index$[ebp], edx
; Line 258
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Color$[ebp], eax
; Line 259
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _pBk$9278[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	esi, esp
	push	edx
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _BkColor$[ebp], eax
; Line 260
	mov	eax, DWORD PTR _Intens$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BkColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Color$[ebp]
	push	edx
	call	_LCD_MixColors256
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Color$[ebp], eax
; Line 261
	mov	esi, esp
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Index$[ebp], eax
; Line 262
	mov	eax, DWORD PTR _xOff$[ebp]
	mov	ecx, DWORD PTR _pDst$9277[ebp]
	mov	dx, WORD PTR _Index$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 263
	mov	eax, DWORD PTR _xOff$[ebp]
	add	eax, 1
	mov	DWORD PTR _xOff$[ebp], eax
; Line 264
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 265
	mov	eax, DWORD PTR _NumPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
	jne	$LN18@WriteAlpha
$LN28@WriteAlpha:
; Line 270
	jmp	$LN46@WriteAlpha
$LN15@WriteAlpha:
; Line 274
	mov	eax, DWORD PTR _pBuffer$[ebp]
	mov	DWORD PTR _pDst$9304[ebp], eax
; Line 275
	mov	eax, DWORD PTR _pBufferBk$[ebp]
	mov	DWORD PTR _pBk$9305[ebp], eax
; Line 276
	mov	eax, DWORD PTR _BytesPerPixelSRC$[ebp]
	mov	DWORD PTR tv322[ebp], eax
	cmp	DWORD PTR tv322[ebp], 1
	je	SHORT $LN12@WriteAlpha
	cmp	DWORD PTR tv322[ebp], 2
	je	$LN8@WriteAlpha
	cmp	DWORD PTR tv322[ebp], 4
	je	$LN4@WriteAlpha
	jmp	$LN46@WriteAlpha
$LN12@WriteAlpha:
; Line 279
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pSrc$9313[ebp], eax
$LN11@WriteAlpha:
; Line 281
	mov	eax, DWORD PTR _pSrc$9313[ebp]
	add	eax, DWORD PTR _n$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Index$[ebp], ecx
; Line 282
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Color$[ebp], eax
; Line 283
	mov	esi, esp
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _pBk$9305[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _BkColor$[ebp], eax
; Line 284
	mov	eax, DWORD PTR _Intens$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BkColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Color$[ebp]
	push	edx
	call	_LCD_MixColors256
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Color$[ebp], eax
; Line 285
	mov	esi, esp
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Index$[ebp], eax
; Line 286
	mov	eax, DWORD PTR _xOff$[ebp]
	mov	ecx, DWORD PTR _pDst$9304[ebp]
	mov	edx, DWORD PTR _Index$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 287
	mov	eax, DWORD PTR _xOff$[ebp]
	add	eax, 1
	mov	DWORD PTR _xOff$[ebp], eax
; Line 288
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 289
	mov	eax, DWORD PTR _NumPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
	jne	$LN11@WriteAlpha
; Line 291
	jmp	$LN46@WriteAlpha
$LN8@WriteAlpha:
; Line 294
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pSrc$9319[ebp], eax
$LN7@WriteAlpha:
; Line 296
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _pSrc$9319[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _Index$[ebp], edx
; Line 297
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Color$[ebp], eax
; Line 298
	mov	esi, esp
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _pBk$9305[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _BkColor$[ebp], eax
; Line 299
	mov	eax, DWORD PTR _Intens$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BkColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Color$[ebp]
	push	edx
	call	_LCD_MixColors256
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Color$[ebp], eax
; Line 300
	mov	esi, esp
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Index$[ebp], eax
; Line 301
	mov	eax, DWORD PTR _xOff$[ebp]
	mov	ecx, DWORD PTR _pDst$9304[ebp]
	mov	edx, DWORD PTR _Index$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 302
	mov	eax, DWORD PTR _xOff$[ebp]
	add	eax, 1
	mov	DWORD PTR _xOff$[ebp], eax
; Line 303
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 304
	mov	eax, DWORD PTR _NumPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
	jne	$LN7@WriteAlpha
; Line 306
	jmp	$LN46@WriteAlpha
$LN4@WriteAlpha:
; Line 309
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pSrc$9325[ebp], eax
$LN3@WriteAlpha:
; Line 311
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _pSrc$9325[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _Index$[ebp], edx
; Line 312
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Color$[ebp], eax
; Line 313
	mov	esi, esp
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _pBk$9305[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR _pfIndex2Color$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _BkColor$[ebp], eax
; Line 314
	mov	eax, DWORD PTR _Intens$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BkColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Color$[ebp]
	push	edx
	call	_LCD_MixColors256
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Color$[ebp], eax
; Line 315
	mov	esi, esp
	mov	eax, DWORD PTR _Color$[ebp]
	push	eax
	call	DWORD PTR _pfColor2Index$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Index$[ebp], eax
; Line 316
	mov	eax, DWORD PTR _xOff$[ebp]
	mov	ecx, DWORD PTR _pDst$9304[ebp]
	mov	edx, DWORD PTR _Index$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 317
	mov	eax, DWORD PTR _xOff$[ebp]
	add	eax, 1
	mov	DWORD PTR _xOff$[ebp], eax
; Line 318
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 319
	mov	eax, DWORD PTR _NumPixels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumPixels$[ebp], eax
	jne	$LN3@WriteAlpha
$LN46@WriteAlpha:
; Line 329
	push	0
	mov	eax, DWORD PTR _xOffFirst$[ebp]
	imul	eax, DWORD PTR _BytesPerPixelDST$[ebp]
	add	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NumPixelsBitmap$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _BitsPerPixelDST$[ebp]
	push	edx
	push	1
	push	1
	push	1
	mov	eax, DWORD PTR _NumPixelsBitmap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xPos$[ebp]
	push	edx
	call	_LCD_DrawBitmap
	add	esp, 40					; 00000028H
; Line 330
	mov	esi, esp
	mov	eax, DWORD PTR _yi$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xOff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUsage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUsage$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _NumPixels$[ebp], eax
; Line 331
	jmp	$LN49@WriteAlpha
$LN48@WriteAlpha:
; Line 332
	jmp	$LN51@WriteAlpha
$LN50@WriteAlpha:
; Line 336
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pUsage$[ebp], 0
; Line 337
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pDev$[ebp], 0
; Line 338
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pBuffer$[ebp], 0
; Line 339
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pBufferBk$[ebp], 0
; Line 343
	mov	eax, DWORD PTR _hBufferBk$[ebp]
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN63@WriteAlpha:
; Line 345
	mov	eax, DWORD PTR _hBuffer$[ebp]
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN67@WriteAlpha:
; Line 349
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN71@WriteAlpha
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 700				; 000002bcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN71@WriteAlpha:
	DD	1
	DD	$LN70@WriteAlpha
$LN70@WriteAlpha:
	DD	-224					; ffffff20H
	DD	4
	DD	$LN69@WriteAlpha
$LN69@WriteAlpha:
	DB	120					; 00000078H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
__WriteAlphaToActiveAt ENDP
_TEXT	ENDS
EXTRN	_GUI_ReadRectEx:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __ReadLine
_TEXT	SEGMENT
_pDevice$ = -24						; size = 4
_r$ = -12						; size = 8
_x0$ = 8						; size = 4
_y$ = 12						; size = 4
_x1$ = 16						; size = 4
_pBuffer$ = 20						; size = 4
__ReadLine PROC						; COMDAT
; Line 40
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 43
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	ecx, DWORD PTR _GUI_Context[eax*4+72]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 45
	mov	esi, esp
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+48]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 46
	movsx	eax, WORD PTR _r$[ebp+4]
	cmp	DWORD PTR _x0$[ebp], eax
	jle	SHORT $LN6@ReadLine
; Line 47
	jmp	SHORT $LN7@ReadLine
$LN6@ReadLine:
; Line 49
	movsx	eax, WORD PTR _r$[ebp]
	cmp	DWORD PTR _x1$[ebp], eax
	jge	SHORT $LN5@ReadLine
; Line 50
	jmp	SHORT $LN7@ReadLine
$LN5@ReadLine:
; Line 52
	movsx	eax, WORD PTR _r$[ebp+6]
	cmp	DWORD PTR _y$[ebp], eax
	jle	SHORT $LN4@ReadLine
; Line 53
	jmp	SHORT $LN7@ReadLine
$LN4@ReadLine:
; Line 55
	movsx	eax, WORD PTR _r$[ebp+2]
	cmp	DWORD PTR _y$[ebp], eax
	jge	SHORT $LN3@ReadLine
; Line 56
	jmp	SHORT $LN7@ReadLine
$LN3@ReadLine:
; Line 58
	movsx	eax, WORD PTR _r$[ebp]
	cmp	DWORD PTR _x0$[ebp], eax
	jge	SHORT $LN2@ReadLine
; Line 59
	movsx	eax, WORD PTR _r$[ebp]
	sub	eax, DWORD PTR _x0$[ebp]
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pBuffer$[ebp], edx
; Line 60
	movsx	eax, WORD PTR _r$[ebp]
	mov	DWORD PTR _x0$[ebp], eax
$LN2@ReadLine:
; Line 62
	movsx	eax, WORD PTR _r$[ebp+4]
	cmp	DWORD PTR _x1$[ebp], eax
	jle	SHORT $LN1@ReadLine
; Line 63
	movsx	eax, WORD PTR _r$[ebp+4]
	mov	DWORD PTR _x1$[ebp], eax
$LN1@ReadLine:
; Line 65
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	_GUI_ReadRectEx
	add	esp, 24					; 00000018H
$LN7@ReadLine:
; Line 66
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@ReadLine
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@ReadLine:
	DD	1
	DD	$LN10@ReadLine
$LN10@ReadLine:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN9@ReadLine
$LN9@ReadLine:
	DB	114					; 00000072H
	DB	0
__ReadLine ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEMDEV_WriteAlpha
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEMDEV_WriteAlpha
_TEXT	SEGMENT
_hMem$ = 8						; size = 4
_Alpha$ = 12						; size = 4
_GUI_MEMDEV_WriteAlpha PROC				; COMDAT
; Line 390
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 391
	push	-4095					; fffff001H
	push	-4095					; fffff001H
	mov	eax, DWORD PTR _Alpha$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hMem$[ebp]
	push	ecx
	call	_GUI_MEMDEV_WriteAlphaAt
	add	esp, 16					; 00000010H
; Line 392
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV_WriteAlpha ENDP
_TEXT	ENDS
END
