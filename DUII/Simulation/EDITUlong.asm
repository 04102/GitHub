; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Widget\EDITUlong.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_EDIT_SetUlongMode
EXTRN	_WM_InvalidateWindow:PROC
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_EDIT_LockH:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\widget\editulong.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _EDIT_SetUlongMode
_TEXT	SEGMENT
_pObj$ = -8						; size = 4
_hEdit$ = 8						; size = 4
_Value$ = 12						; size = 4
_Min$ = 16						; size = 4
_Max$ = 20						; size = 4
_EDIT_SetUlongMode PROC					; COMDAT
; Line 240
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 243
	cmp	DWORD PTR _hEdit$[ebp], 0
	je	$LN6@EDIT_SetUl
; Line 244
	mov	eax, DWORD PTR _hEdit$[ebp]
	push	eax
	call	_EDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 245
	mov	eax, DWORD PTR _Value$[ebp]
	cmp	eax, DWORD PTR _Max$[ebp]
	jbe	SHORT $LN4@EDIT_SetUl
; Line 246
	mov	eax, DWORD PTR _Max$[ebp]
	mov	DWORD PTR _Value$[ebp], eax
	jmp	SHORT $LN3@EDIT_SetUl
$LN4@EDIT_SetUl:
; Line 247
	mov	eax, DWORD PTR _Value$[ebp]
	cmp	eax, DWORD PTR _Min$[ebp]
	jae	SHORT $LN3@EDIT_SetUl
; Line 248
	mov	eax, DWORD PTR _Min$[ebp]
	mov	DWORD PTR _Value$[ebp], eax
$LN3@EDIT_SetUl:
; Line 250
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+92], OFFSET __AddKey
; Line 251
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+96], OFFSET __UpdateBuffer
; Line 252
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	DWORD PTR [eax+76], ecx
; Line 253
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+80], 0
; Line 254
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Min$[ebp]
	mov	DWORD PTR [eax+64], ecx
; Line 255
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Max$[ebp]
	mov	DWORD PTR [eax+68], ecx
; Line 256
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	BYTE PTR [eax+88], 1
; Line 257
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+60]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN1@EDIT_SetUl
; Line 258
	mov	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	WORD PTR [ecx+60], ax
$LN1@EDIT_SetUl:
; Line 260
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 261
	mov	eax, DWORD PTR _hEdit$[ebp]
	push	eax
	call	__UpdateBuffer
	add	esp, 4
; Line 262
	mov	eax, DWORD PTR _hEdit$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
$LN6@EDIT_SetUl:
; Line 265
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_EDIT_SetUlongMode ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_GUI_ALLOC_LockH:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __UpdateBuffer
_TEXT	SEGMENT
_c$11400 = -77						; size = 1
_pObj$ = -68						; size = 4
_s$ = -56						; size = 4
_Value$ = -44						; size = 4
_NumDigits$ = -32					; size = 4
_acValue$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_hObj$ = 8						; size = 4
__UpdateBuffer PROC					; COMDAT
; Line 67
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 68
	mov	BYTE PTR _acValue$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _acValue$[ebp+1], eax
	mov	DWORD PTR _acValue$[ebp+5], eax
	mov	BYTE PTR _acValue$[ebp+9], al
; Line 69
	mov	DWORD PTR _NumDigits$[ebp], 0
; Line 73
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_EDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 74
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 76
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _Value$[ebp], ecx
$LN6@UpdateBuff:
; Line 78
	cmp	DWORD PTR _Value$[ebp], 0
	je	SHORT $LN4@UpdateBuff
; Line 79
	mov	eax, DWORD PTR _Value$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	mov	BYTE PTR _c$11400[ebp], dl
; Line 80
	movzx	eax, BYTE PTR _c$11400[ebp]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _NumDigits$[ebp]
	mov	BYTE PTR _acValue$[ebp+ecx], al
	mov	edx, DWORD PTR _NumDigits$[ebp]
	add	edx, 1
	mov	DWORD PTR _NumDigits$[ebp], edx
; Line 81
	mov	eax, DWORD PTR _Value$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	mov	DWORD PTR _Value$[ebp], eax
; Line 82
	jmp	SHORT $LN6@UpdateBuff
$LN4@UpdateBuff:
; Line 84
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+60]
	cmp	DWORD PTR _NumDigits$[ebp], ecx
	jge	SHORT $LN2@UpdateBuff
; Line 85
	mov	eax, DWORD PTR _NumDigits$[ebp]
	mov	BYTE PTR _acValue$[ebp+eax], 48		; 00000030H
	mov	ecx, DWORD PTR _NumDigits$[ebp]
	add	ecx, 1
	mov	DWORD PTR _NumDigits$[ebp], ecx
; Line 86
	jmp	SHORT $LN4@UpdateBuff
$LN2@UpdateBuff:
; Line 88
	cmp	DWORD PTR _NumDigits$[ebp], 0
	je	SHORT $LN1@UpdateBuff
; Line 89
	mov	eax, DWORD PTR _NumDigits$[ebp]
	sub	eax, 1
	mov	DWORD PTR _NumDigits$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _NumDigits$[ebp]
	mov	al, BYTE PTR _acValue$[ebp+edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
; Line 90
	jmp	SHORT $LN2@UpdateBuff
$LN1@UpdateBuff:
; Line 91
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 92
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _s$[ebp], 0
; Line 93
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@UpdateBuff
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN11@UpdateBuff:
	DD	1
	DD	$LN10@UpdateBuff
$LN10@UpdateBuff:
	DD	-20					; ffffffecH
	DD	10					; 0000000aH
	DD	$LN9@UpdateBuff
$LN9@UpdateBuff:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
__UpdateBuffer ENDP
_TEXT	ENDS
EXTRN	_EDIT__SetCursorPos:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __AddKey
_TEXT	SEGMENT
tv67 = -220						; size = 4
_Digit$11487 = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Key$ = 12						; size = 4
__AddKey PROC						; COMDAT
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 200
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_EDIT_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 201
	cmp	DWORD PTR _pObj$[ebp], 0
	je	$LN9@AddKey
; Line 202
	mov	eax, DWORD PTR _Key$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 3
	ja	SHORT $LN2@AddKey
	mov	edx, DWORD PTR tv67[ebp]
	jmp	DWORD PTR $LN12@AddKey[edx*4]
$LN6@AddKey:
; Line 204
	push	1
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__AddPosition
	add	esp, 12					; 0000000cH
; Line 205
	jmp	SHORT $LN9@AddKey
$LN5@AddKey:
; Line 207
	push	-1
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	call	__AddPosition
	add	esp, 12					; 0000000cH
; Line 208
	jmp	SHORT $LN9@AddKey
$LN4@AddKey:
; Line 210
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__IncrementCursor
	add	esp, 8
; Line 211
	jmp	SHORT $LN9@AddKey
$LN3@AddKey:
; Line 213
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_EDIT__SetCursorPos
	add	esp, 8
; Line 214
	jmp	SHORT $LN9@AddKey
$LN2@AddKey:
; Line 217
	mov	eax, DWORD PTR _Key$[ebp]
	push	eax
	call	__DecChar2Int
	add	esp, 4
	mov	DWORD PTR _Digit$11487[ebp], eax
; Line 218
	cmp	DWORD PTR _Digit$11487[ebp], 0
	jl	SHORT $LN9@AddKey
; Line 219
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Digit$11487[ebp]
	push	edx
	call	__EditULong
	add	esp, 12					; 0000000cH
; Line 220
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	__IncrementCursor
	add	esp, 8
$LN9@AddKey:
; Line 226
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 227
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__UpdateBuffer
	add	esp, 4
; Line 228
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@AddKey:
	DD	$LN3@AddKey
	DD	$LN6@AddKey
	DD	$LN4@AddKey
	DD	$LN5@AddKey
__AddKey ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __IncrementCursor
_TEXT	SEGMENT
_hObj$ = 8						; size = 4
_pObj$ = 12						; size = 4
__IncrementCursor PROC					; COMDAT
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 49
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_EDIT__SetCursorPos
	add	esp, 8
; Line 50
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__IncrementCursor ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DecChar2Int
_TEXT	SEGMENT
_Char$ = 8						; size = 4
__DecChar2Int PROC					; COMDAT
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 57
	cmp	DWORD PTR _Char$[ebp], 48		; 00000030H
	jl	SHORT $LN1@DecChar2In
	cmp	DWORD PTR _Char$[ebp], 57		; 00000039H
	jg	SHORT $LN1@DecChar2In
; Line 58
	mov	eax, DWORD PTR _Char$[ebp]
	sub	eax, 48					; 00000030H
	jmp	SHORT $LN2@DecChar2In
$LN1@DecChar2In:
; Line 60
	or	eax, -1
$LN2@DecChar2In:
; Line 61
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__DecChar2Int ENDP
_TEXT	ENDS
EXTRN	_EDIT__SetValueUnsigned:PROC
EXTRN	_GUI_Pow10:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __EditULong
_TEXT	SEGMENT
_OldResult$11443 = -152					; size = 4
_Value$11441 = -140					; size = 4
_c$11440 = -125						; size = 1
_NewResult$11435 = -116					; size = 4
_OldResult$11430 = -104					; size = 4
_Value$11429 = -92					; size = 4
_c$11428 = -77						; size = 1
_Index$11426 = -68					; size = 4
_s$ = -56						; size = 4
_Pos$ = -44						; size = 4
_j$ = -32						; size = 4
_i$ = -20						; size = 4
_Result$ = -8						; size = 4
_Digit$ = 8						; size = 4
_pObj$ = 12						; size = 4
_hObj$ = 16						; size = 4
__EditULong PROC					; COMDAT
; Line 99
	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 100
	mov	DWORD PTR _Result$[ebp], 0
; Line 101
	mov	DWORD PTR _Pos$[ebp], 0
; Line 103
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 104
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@EditULong
$LN13@EditULong:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@EditULong:
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+60]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$LN12@EditULong
; Line 105
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+60]
	sub	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _Index$11426[ebp], ecx
; Line 106
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _Index$11426[ebp]
	cmp	ecx, DWORD PTR [eax+80]
	jne	$LN11@EditULong
; Line 112
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _Index$11426[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$11428[ebp], cl
; Line 113
	movzx	eax, BYTE PTR _c$11428[ebp]
	push	eax
	call	__DecChar2Int
	add	esp, 4
	mov	DWORD PTR _Value$11429[ebp], eax
; Line 114
	mov	eax, DWORD PTR _Result$[ebp]
	mov	DWORD PTR _OldResult$11430[ebp], eax
; Line 115
	cmp	DWORD PTR _Value$11429[ebp], 0
	jl	SHORT $LN10@EditULong
; Line 116
	mov	eax, DWORD PTR _Pos$[ebp]
	mov	ecx, DWORD PTR _GUI_Pow10[eax*4]
	imul	ecx, DWORD PTR _Value$11429[ebp]
	add	ecx, DWORD PTR _OldResult$11430[ebp]
	mov	DWORD PTR _OldResult$11430[ebp], ecx
$LN10@EditULong:
; Line 123
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN9@EditULong
$LN8@EditULong:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN9@EditULong:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _Digit$[ebp]
	jge	SHORT $LN7@EditULong
; Line 125
	mov	eax, DWORD PTR _Pos$[ebp]
	mov	ecx, DWORD PTR _Result$[ebp]
	add	ecx, DWORD PTR _GUI_Pow10[eax*4]
	mov	DWORD PTR _NewResult$11435[ebp], ecx
; Line 127
	mov	eax, DWORD PTR _NewResult$11435[ebp]
	cmp	eax, DWORD PTR _Result$[ebp]
	jae	SHORT $LN6@EditULong
; Line 128
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _Result$[ebp], ecx
; Line 129
	jmp	SHORT $LN7@EditULong
$LN6@EditULong:
; Line 131
	mov	eax, DWORD PTR _NewResult$11435[ebp]
	mov	DWORD PTR _Result$[ebp], eax
; Line 132
	jmp	SHORT $LN8@EditULong
$LN7@EditULong:
; Line 134
	mov	eax, DWORD PTR _Digit$[ebp]
	cmp	eax, DWORD PTR _Value$11429[ebp]
	jle	SHORT $LN5@EditULong
; Line 135
	mov	eax, DWORD PTR _Result$[ebp]
	cmp	eax, DWORD PTR _OldResult$11430[ebp]
	jae	SHORT $LN5@EditULong
; Line 136
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _Result$[ebp], ecx
; Line 137
	jmp	SHORT $LN12@EditULong
$LN5@EditULong:
; Line 140
	mov	eax, DWORD PTR _Pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _Pos$[ebp], eax
; Line 141
	jmp	SHORT $LN3@EditULong
$LN11@EditULong:
; Line 143
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _Index$11426[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$11440[ebp], cl
; Line 144
	movzx	eax, BYTE PTR _c$11440[ebp]
	push	eax
	call	__DecChar2Int
	add	esp, 4
	mov	DWORD PTR _Value$11441[ebp], eax
; Line 145
	cmp	DWORD PTR _Value$11441[ebp], 0
	jl	SHORT $LN3@EditULong
; Line 147
	mov	eax, DWORD PTR _Result$[ebp]
	mov	DWORD PTR _OldResult$11443[ebp], eax
; Line 148
	mov	eax, DWORD PTR _Pos$[ebp]
	mov	ecx, DWORD PTR _GUI_Pow10[eax*4]
	imul	ecx, DWORD PTR _Value$11441[ebp]
	add	ecx, DWORD PTR _Result$[ebp]
	mov	DWORD PTR _Result$[ebp], ecx
	mov	edx, DWORD PTR _Pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _Pos$[ebp], edx
; Line 150
	mov	eax, DWORD PTR _Result$[ebp]
	cmp	eax, DWORD PTR _OldResult$11443[ebp]
	jae	SHORT $LN3@EditULong
; Line 151
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _Result$[ebp], ecx
; Line 152
	jmp	SHORT $LN12@EditULong
$LN3@EditULong:
; Line 156
	jmp	$LN13@EditULong
$LN12@EditULong:
; Line 157
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _s$[ebp], 0
; Line 158
	mov	eax, DWORD PTR _Result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_EDIT__SetValueUnsigned
	add	esp, 8
; Line 159
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__EditULong ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __AddPosition
_TEXT	SEGMENT
tv77 = -232						; size = 4
_NewValue$ = -32					; size = 4
_v$ = -20						; size = 4
_Pos$ = -8						; size = 4
_pObj$ = 8						; size = 4
_hObj$ = 12						; size = 4
_Sign$ = 16						; size = 4
__AddPosition PROC					; COMDAT
; Line 165
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 168
	mov	eax, DWORD PTR _Sign$[ebp]
	mov	DWORD PTR _v$[ebp], eax
; Line 169
	mov	eax, DWORD PTR _pObj$[ebp]
	movsx	ecx, WORD PTR [eax+60]
	mov	edx, DWORD PTR _pObj$[ebp]
	sub	ecx, DWORD PTR [edx+80]
	sub	ecx, 1
	mov	DWORD PTR _Pos$[ebp], ecx
; Line 170
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+72]
	test	ecx, ecx
	je	SHORT $LN7@AddPositio
	mov	eax, DWORD PTR _pObj$[ebp]
	movzx	ecx, BYTE PTR [eax+72]
	cmp	DWORD PTR _Pos$[ebp], ecx
	jle	SHORT $LN7@AddPositio
; Line 171
	mov	eax, DWORD PTR _Pos$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Pos$[ebp], eax
$LN7@AddPositio:
; Line 173
	mov	eax, DWORD PTR _Pos$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR _Pos$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _Pos$[ebp], ecx
	cmp	DWORD PTR tv77[ebp], 0
	je	SHORT $LN6@AddPositio
; Line 174
	mov	eax, DWORD PTR _v$[ebp]
	imul	eax, 10					; 0000000aH
	mov	DWORD PTR _v$[ebp], eax
; Line 175
	jmp	SHORT $LN7@AddPositio
$LN6@AddPositio:
; Line 176
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _NewValue$[ebp], ecx
; Line 180
	cmp	DWORD PTR _v$[ebp], 0
	jle	SHORT $LN5@AddPositio
; Line 182
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _pObj$[ebp]
	cmp	ecx, DWORD PTR [edx+76]
	jae	SHORT $LN4@AddPositio
; Line 183
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _NewValue$[ebp], ecx
$LN4@AddPositio:
; Line 184
	jmp	SHORT $LN3@AddPositio
$LN5@AddPositio:
; Line 185
	cmp	DWORD PTR _v$[ebp], 0
	jge	SHORT $LN3@AddPositio
; Line 187
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _pObj$[ebp]
	cmp	ecx, DWORD PTR [edx+76]
	jbe	SHORT $LN3@AddPositio
; Line 188
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _NewValue$[ebp], ecx
$LN3@AddPositio:
; Line 191
	mov	eax, DWORD PTR _NewValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_EDIT__SetValueUnsigned
	add	esp, 8
; Line 192
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__AddPosition ENDP
_TEXT	ENDS
END
