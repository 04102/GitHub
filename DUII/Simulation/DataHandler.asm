; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\DUII\DataHandler.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_DataValues
PUBLIC	_SignalStrengthGraphics
PUBLIC	_DummyDataValues
PUBLIC	_newScreen
PUBLIC	_speedDirection
PUBLIC	_shifting
EXTRN	_bmSignal5:BYTE
EXTRN	_bmSignal4:BYTE
EXTRN	_bmSignal3:BYTE
EXTRN	_bmSignal2:BYTE
EXTRN	_bmSignal1:BYTE
EXTRN	_bmNoSignal:BYTE
_DATA	SEGMENT
COMM	_hasInfoKey:DWORD
COMM	_metRecordSpeedYet:BYTE
COMM	_pAnimation:DWORD
COMM	_minSimRPM:DWORD
COMM	_maxSimGear:DWORD
COMM	_animationIndex:DWORD
COMM	_animationCycles:DWORD
_DATA	ENDS
_BSS	SEGMENT
_DataValues DQ	052H DUP (?)
_SDBusy	DB	01H DUP (?)
	ALIGN	4

_shifting DD	01H DUP (?)
?dummy_initialized@?1??DummyTick@@9@9 DB 01H DUP (?)	; `DummyTick'::`2'::dummy_initialized
	ALIGN	4

?speedRPMTable@?1??SetGear@@9@9 DD 08H DUP (?)		; `SetGear'::`2'::speedRPMTable
?topgear@?1??SetGear@@9@9 DD 01H DUP (?)		; `SetGear'::`2'::topgear
_BSS	ENDS
_DATA	SEGMENT
_SignalStrengthGraphics DD FLAT:_bmNoSignal
	DD	FLAT:_bmSignal1
	DD	FLAT:_bmSignal2
	DD	FLAT:_bmSignal3
	DD	FLAT:_bmSignal4
	DD	FLAT:_bmSignal5
_DummyDataValues DD 01H
	DD	03fc00000r			; 1.5
	DD	0bf99999ar			; -1.2
	DD	03ca3d70ar			; 0.02
	DD	000000000r			; 0
	DD	00H
	DD	03fd9999ar			; 1.7
	DD	0bfcccccdr			; -1.6
	DD	03c75c28fr			; 0.015
	DD	000000000r			; 0
	DD	00H
	DD	040000000r			; 2
	DD	0c0000000r			; -2
	DD	03ecccccdr			; 0.4
	DD	03f800000r			; 1
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	01H
	DD	03fc00000r			; 1.5
	DD	0bf99999ar			; -1.2
	DD	03ca3d70ar			; 0.02
	DD	000000000r			; 0
	DD	00H
	DD	03fd9999ar			; 1.7
	DD	0bfcccccdr			; -1.6
	DD	03c75c28fr			; 0.015
	DD	000000000r			; 0
	DD	00H
	DD	040000000r			; 2
	DD	040000000r			; 2
	DD	03c23d70ar			; 0.01
	DD	03f800000r			; 1
	DD	00H
	DD	042089aa0r			; 34.151
	DD	042089893r			; 34.149
	DD	03727c5acr			; 1e-005
	DD	000000000r			; 0
	DD	00H
	DD	0c2a7a042r			; -83.813
	DD	0c2a7a148r			; -83.815
	DD	03727c5acr			; 1e-005
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	00H
	DD	043b38000r			; 359
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	00H
	DD	043b38000r			; 359
	DD	000000000r			; 0
	DD	03f000000r			; 0.5
	DD	000000000r			; 0
	DD	00H
	DD	0461c4000r			; 10000
	DD	000000000r			; 0
	DD	03dcccccdr			; 0.1
	DD	000000000r			; 0
	DD	00H
	DD	0447a0000r			; 1000
	DD	000000000r			; 0
	DD	03dcccccdr			; 0.1
	DD	000000000r			; 0
	DD	00H
	DD	044160000r			; 600
	DD	043480000r			; 200
	DD	03c23d70ar			; 0.01
	DD	000000000r			; 0
	DD	00H
	DD	0408ccccdr			; 4.4
	DD	040200000r			; 2.5
	DD	038d1b717r			; 0.0001
	DD	000000000r			; 0
	DD	00H
	DD	041800000r			; 16
	DD	000000000r			; 0
	DD	03d4ccccdr			; 0.05
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03ccccccdr			; 0.025
	DD	000000000r			; 0
	DD	00H
	DD	047c34f80r			; 99999
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	00H
	DD	03f99999ar			; 1.2
	DD	0bf19999ar			; -0.6
	DD	03b449ba6r			; 0.003
	DD	000000000r			; 0
	DD	00H
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	00H
	DD	047f03c00r			; 123000
	DD	000000000r			; 0
	DD	041c80000r			; 25
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	01H
	DD	042f00000r			; 120
	DD	042a00000r			; 80
	DD	03a83126fr			; 0.001
	DD	042a00000r			; 80
	DD	01H
	DD	043960000r			; 300
	DD	0433e0000r			; 190
	DD	03a83126fr			; 0.001
	DD	043480000r			; 200
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	00H
	DD	0409ccccdr			; 4.9
	DD	000000000r			; 0
	DD	03ba3d70ar			; 0.005
	DD	000000000r			; 0
	DD	00H
	DD	040900000r			; 4.5
	DD	03dcccccdr			; 0.1
	DD	03ba3d70ar			; 0.005
	DD	000000000r			; 0
	DD	00H
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03b449ba6r			; 0.003
	DD	000000000r			; 0
	DD	00H
	DD	0410b3333r			; 8.7
	DD	040000000r			; 2
	DD	03ba3d70ar			; 0.005
	DD	000000000r			; 0
	DD	00H
	DD	03fc00000r			; 1.5
	DD	03f000000r			; 0.5
	DD	03c23d70ar			; 0.01
	DD	000000000r			; 0
	DD	00H
	DD	03fc00000r			; 1.5
	DD	03f000000r			; 0.5
	DD	03ba3d70ar			; 0.005
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03ccccccdr			; 0.025
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03ccccccdr			; 0.025
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03ccccccdr			; 0.025
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03ccccccdr			; 0.025
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03ccccccdr			; 0.025
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03ccccccdr			; 0.025
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03ccccccdr			; 0.025
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03ccccccdr			; 0.025
	DD	000000000r			; 0
	DD	00H
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03ccccccdr			; 0.025
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	00H
	DD	04164cccdr			; 14.3
	DD	041280000r			; 10.5
	DD	03a83126fr			; 0.001
	DD	041400000r			; 12
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	00H
	DD	040600000r			; 3.5
	DD	000000000r			; 0
	DD	03c23d70ar			; 0.01
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	03f000000r			; 0.5
	DD	03f000000r			; 0.5
	DD	000000000r			; 0
	DD	03f000000r			; 0.5
	DD	00H
	DD	041a00000r			; 20
	DD	041f00000r			; 30
	DD	03a83126fr			; 0.001
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	00H
	DD	0403ccccdr			; 2.95
	DD	000000000r			; 0
	DD	03ba3d70ar			; 0.005
	DD	040000000r			; 2
	DD	0ffffffffH
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	00H
	DD	047f03c00r			; 123000
	DD	000000000r			; 0
	DD	041c80000r			; 25
	DD	000000000r			; 0
_newScreen DD	01H
_speedDirection DD 01H
$SG19017 DB	'         ', 00H
	ORG $+2
$SG19094 DB	'pm', 00H
	ORG $+1
$SG19095 DB	'am', 00H
	ORG $+1
$SG19096 DB	'%d:%02d%s', 00H
_DATA	ENDS
PUBLIC	_GetRawValue
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\duii\datahandler.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GetRawValue
_TEXT	SEGMENT
_retval$ = -12						; size = 8
_dataType$ = 8						; size = 4
_GetRawValue PROC					; COMDAT
; Line 215
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN5@GetRawValu:
; Line 219
	xor	eax, eax
	jne	SHORT $LN5@GetRawValu
; Line 222
	mov	eax, DWORD PTR _dataType$[ebp]
	mov	ecx, DWORD PTR _DataValues[eax*8]
	mov	edx, DWORD PTR _DataValues[eax*8+4]
	mov	DWORD PTR _retval$[ebp], ecx
	mov	DWORD PTR _retval$[ebp+4], edx
$LN2@GetRawValu:
; Line 225
	xor	eax, eax
	jne	SHORT $LN2@GetRawValu
; Line 227
	mov	eax, DWORD PTR _retval$[ebp]
	mov	edx, DWORD PTR _retval$[ebp+4]
; Line 228
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@GetRawValu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@GetRawValu:
	DD	1
	DD	$LN10@GetRawValu
$LN10@GetRawValu:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN9@GetRawValu
$LN9@GetRawValu:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
_GetRawValue ENDP
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	__real@4040000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@4022000000000000
PUBLIC	__real@4051f8a1
PUBLIC	__real@3f1f122f
PUBLIC	_GetValue
EXTRN	_sqrt:PROC
EXTRN	_trackData:BYTE
EXTRN	_vehicleData:BYTE
EXTRN	_suData:BYTE
EXTRN	_sysData:BYTE
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@4040000000000000
CONST	SEGMENT
__real@4040000000000000 DQ 04040000000000000r	; 32
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4022000000000000
CONST	SEGMENT
__real@4022000000000000 DQ 04022000000000000r	; 9
CONST	ENDS
;	COMDAT __real@4051f8a1
CONST	SEGMENT
__real@4051f8a1 DD 04051f8a1r			; 3.2808
CONST	ENDS
;	COMDAT __real@3f1f122f
CONST	SEGMENT
__real@3f1f122f DD 03f1f122fr			; 0.621371
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _GetValue
_TEXT	SEGMENT
tv250 = -260						; size = 4
tv69 = -260						; size = 4
_laptime$18854 = -60					; size = 4
_lapnum$18853 = -48					; size = 4
_i$18832 = -36						; size = 4
_tempfloat$18831 = -24					; size = 4
_retval$ = -12						; size = 8
_dataType$ = 8						; size = 4
_GetValue PROC						; COMDAT
; Line 230
	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN48@GetValue:
; Line 234
	xor	eax, eax
	jne	SHORT $LN48@GetValue
; Line 237
	mov	eax, DWORD PTR _dataType$[ebp]
	mov	ecx, DWORD PTR _DataValues[eax*8]
	mov	edx, DWORD PTR _DataValues[eax*8+4]
	mov	DWORD PTR _retval$[ebp], ecx
	mov	DWORD PTR _retval$[ebp+4], edx
$LN45@GetValue:
; Line 240
	xor	eax, eax
	jne	SHORT $LN45@GetValue
; Line 242
	mov	eax, DWORD PTR _dataType$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	mov	ecx, DWORD PTR tv69[ebp]
	sub	ecx, 14					; 0000000eH
	mov	DWORD PTR tv69[ebp], ecx
	cmp	DWORD PTR tv69[ebp], 66			; 00000042H
	ja	$LN1@GetValue
	mov	edx, DWORD PTR tv69[ebp]
	movzx	eax, BYTE PTR $LN51@GetValue[edx]
	jmp	DWORD PTR $LN55@GetValue[eax*4]
$LN40@GetValue:
; Line 254
	cmp	DWORD PTR _sysData+100, 0
	jne	SHORT $LN39@GetValue
; Line 255
	fld	DWORD PTR _retval$[ebp]
	fmul	DWORD PTR __real@3f1f122f
	fstp	DWORD PTR _retval$[ebp]
$LN39@GetValue:
; Line 256
	jmp	$LN41@GetValue
$LN38@GetValue:
; Line 260
	mov	eax, DWORD PTR _retval$[ebp]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	mov	eax, DWORD PTR _retval$[ebp]
	sub	eax, edx
	mov	DWORD PTR _retval$[ebp], eax
	jns	SHORT $LN37@GetValue
; Line 261
	mov	DWORD PTR _retval$[ebp], 0
$LN37@GetValue:
; Line 262
	jmp	$LN41@GetValue
$LN36@GetValue:
; Line 270
	cmp	DWORD PTR _sysData+100, 0
	jne	SHORT $LN35@GetValue
; Line 271
	fld	DWORD PTR _retval$[ebp]
	fmul	DWORD PTR __real@4051f8a1
	fstp	DWORD PTR _retval$[ebp]
$LN35@GetValue:
; Line 272
	jmp	$LN41@GetValue
$LN34@GetValue:
; Line 275
	movzx	eax, BYTE PTR _suData+24
	cmp	eax, 200				; 000000c8H
	jge	SHORT $LN33@GetValue
; Line 276
	cmp	DWORD PTR _sysData+100, 0
	jne	SHORT $LN32@GetValue
; Line 278
	fld	DWORD PTR _retval$[ebp]
	fmul	QWORD PTR __real@4022000000000000
	fdiv	QWORD PTR __real@4014000000000000
	fadd	QWORD PTR __real@4040000000000000
	fstp	DWORD PTR _retval$[ebp]
$LN32@GetValue:
; Line 280
	jmp	SHORT $LN31@GetValue
$LN33@GetValue:
; Line 281
	fldz
	fstp	DWORD PTR _retval$[ebp]
$LN31@GetValue:
; Line 282
	jmp	$LN41@GetValue
$LN30@GetValue:
; Line 301
	cmp	DWORD PTR _dataType$[ebp], 57		; 00000039H
	jg	SHORT $LN29@GetValue
; Line 302
	mov	eax, DWORD PTR _dataType$[ebp]
	sub	eax, 54					; 00000036H
	mov	DWORD PTR _i$18832[ebp], eax
	jmp	SHORT $LN26@GetValue
$LN29@GetValue:
; Line 303
	cmp	DWORD PTR _dataType$[ebp], 63		; 0000003fH
	jg	SHORT $LN27@GetValue
; Line 304
	mov	eax, DWORD PTR _dataType$[ebp]
	sub	eax, 60					; 0000003cH
	mov	DWORD PTR _i$18832[ebp], eax
; Line 305
	jmp	SHORT $LN26@GetValue
$LN27@GetValue:
; Line 306
	mov	eax, DWORD PTR _dataType$[ebp]
	sub	eax, 64					; 00000040H
	mov	DWORD PTR _i$18832[ebp], eax
$LN26@GetValue:
; Line 309
	mov	eax, DWORD PTR _i$18832[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _i$18832[ebp]
	shl	ecx, 6
	fld	DWORD PTR _vehicleData[eax+168]
	fld	DWORD PTR _vehicleData[ecx+164]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN25@GetValue
; Line 310
	fldz
	fstp	DWORD PTR _retval$[ebp]
; Line 311
	jmp	SHORT $LN24@GetValue
$LN25@GetValue:
; Line 320
	mov	eax, DWORD PTR _i$18832[ebp]
	shl	eax, 6
	fld	DWORD PTR _retval$[ebp]
	fsub	DWORD PTR _vehicleData[eax+164]
	mov	ecx, DWORD PTR _i$18832[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _i$18832[ebp]
	shl	edx, 6
	fld	DWORD PTR _vehicleData[ecx+168]
	fsub	DWORD PTR _vehicleData[edx+164]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _tempfloat$18831[ebp]
; Line 323
	mov	eax, DWORD PTR _i$18832[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _i$18832[ebp]
	shl	ecx, 6
	fld	DWORD PTR _vehicleData[eax+176]
	fsub	DWORD PTR _vehicleData[ecx+172]
	fmul	DWORD PTR _tempfloat$18831[ebp]
	mov	edx, DWORD PTR _i$18832[ebp]
	shl	edx, 6
	fadd	DWORD PTR _vehicleData[edx+172]
	fstp	DWORD PTR _retval$[ebp]
$LN24@GetValue:
; Line 325
	jmp	$LN41@GetValue
$LN23@GetValue:
; Line 329
	cmp	DWORD PTR _DataValues+288, 1
	jbe	SHORT $LN15@GetValue
; Line 330
	movzx	eax, BYTE PTR _trackData+65
	imul	eax, 1000				; 000003e8H
	cmp	DWORD PTR _retval$[ebp], eax
	jge	SHORT $LN15@GetValue
$LN20@GetValue:
; Line 332
	xor	eax, eax
	jne	SHORT $LN20@GetValue
; Line 335
	mov	eax, DWORD PTR _DataValues+264
	mov	DWORD PTR _retval$[ebp], eax
$LN17@GetValue:
; Line 338
	xor	eax, eax
	jne	SHORT $LN17@GetValue
$LN15@GetValue:
; Line 341
	cmp	DWORD PTR _retval$[ebp], 0
	jge	SHORT $LN14@GetValue
; Line 342
	mov	DWORD PTR _retval$[ebp], 0
$LN14@GetValue:
; Line 343
	jmp	$LN41@GetValue
$LN13@GetValue:
; Line 351
	xor	eax, eax
	jne	SHORT $LN13@GetValue
; Line 354
	mov	eax, DWORD PTR _DataValues+288
	mov	DWORD PTR _lapnum$18853[ebp], eax
; Line 355
	fld	DWORD PTR _DataValues+256
	fstp	DWORD PTR _laptime$18854[ebp]
$LN9@GetValue:
; Line 358
	xor	eax, eax
	jne	SHORT $LN9@GetValue
; Line 360
	cmp	DWORD PTR _lapnum$18853[ebp], 1
	jbe	SHORT $LN6@GetValue
; Line 361
	movzx	eax, BYTE PTR _trackData+65
	imul	eax, 1000				; 000003e8H
	mov	DWORD PTR tv250[ebp], eax
	fild	DWORD PTR tv250[ebp]
	fcomp	DWORD PTR _laptime$18854[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN5@GetValue
; Line 362
	mov	DWORD PTR _retval$[ebp], 1
	jmp	SHORT $LN4@GetValue
$LN5@GetValue:
; Line 363
	mov	DWORD PTR _retval$[ebp], 0
$LN4@GetValue:
; Line 365
	jmp	SHORT $LN3@GetValue
$LN6@GetValue:
	mov	DWORD PTR _retval$[ebp], 0
$LN3@GetValue:
; Line 367
	jmp	SHORT $LN41@GetValue
$LN2@GetValue:
; Line 370
	fld	DWORD PTR _DataValues+72
	fmul	DWORD PTR _DataValues+72
	fld	DWORD PTR _DataValues+80
	fmul	DWORD PTR _DataValues+80
	faddp	ST(1), ST(0)
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _retval$[ebp]
$LN1@GetValue:
$LN41@GetValue:
; Line 380
	mov	eax, DWORD PTR _retval$[ebp]
	mov	edx, DWORD PTR _retval$[ebp+4]
; Line 381
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN54@GetValue
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN54@GetValue:
	DD	1
	DD	$LN53@GetValue
$LN53@GetValue:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN52@GetValue
$LN52@GetValue:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
	npad	1
$LN55@GetValue:
	DD	$LN40@GetValue
	DD	$LN36@GetValue
	DD	$LN23@GetValue
	DD	$LN38@GetValue
	DD	$LN30@GetValue
	DD	$LN34@GetValue
	DD	$LN13@GetValue
	DD	$LN2@GetValue
	DD	$LN1@GetValue
$LN51@GetValue:
	DB	0
	DB	8
	DB	8
	DB	8
	DB	8
	DB	1
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	8
	DB	2
	DB	8
	DB	8
	DB	8
	DB	8
	DB	0
	DB	0
	DB	0
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	8
	DB	3
	DB	4
	DB	4
	DB	4
	DB	4
	DB	8
	DB	8
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	5
	DB	6
	DB	8
	DB	7
_GetValue ENDP
_TEXT	ENDS
PUBLIC	__real@3fe6666666666666
PUBLIC	_SimStartSession
EXTRN	_unsavedSysData:BYTE
;	COMDAT __real@3fe6666666666666
CONST	SEGMENT
__real@3fe6666666666666 DQ 03fe6666666666666r	; 0.7
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _SimStartSession
_TEXT	SEGMENT
tv135 = -220						; size = 8
tv133 = -212						; size = 4
tv130 = -206						; size = 2
_i$ = -8						; size = 4
_SimStartSession PROC					; COMDAT
; Line 397
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 400
	fldz
	fstp	DWORD PTR _DataValues+112
; Line 401
	fldz
	fstp	DWORD PTR _DataValues+312
; Line 402
	fild	DWORD PTR _vehicleData+20
	fmul	QWORD PTR __real@3fe6666666666666
	fnstcw	WORD PTR tv130[ebp]
	movzx	eax, WORD PTR tv130[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv133[ebp], eax
	fldcw	WORD PTR tv133[ebp]
	fistp	QWORD PTR tv135[ebp]
	fldcw	WORD PTR tv130[ebp]
	mov	eax, DWORD PTR tv135[ebp]
	mov	DWORD PTR _minSimRPM, eax
; Line 403
	mov	eax, DWORD PTR _minSimRPM
	mov	DWORD PTR _DataValues+424, eax
; Line 404
	mov	DWORD PTR _DataValues+544, 0
; Line 405
	mov	DWORD PTR _DataValues+272, 0
; Line 406
	mov	DWORD PTR _DataValues+280, 0
; Line 407
	mov	DWORD PTR _DataValues+288, 0
; Line 408
	mov	DWORD PTR _DataValues+256, 0
; Line 409
	mov	DWORD PTR _DataValues+648, 0
; Line 410
	mov	DWORD PTR _DataValues+592, 1
; Line 411
	fldz
	fstp	DWORD PTR _DataValues+232
; Line 412
	mov	DWORD PTR _speedDirection, 1
; Line 414
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@SimStartSe
$LN3@SimStartSe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@SimStartSe:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN2@SimStartSe
; Line 416
	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR _vehicleData[eax*4+48]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@SimStartSe
; Line 417
	jmp	SHORT $LN2@SimStartSe
$LN1@SimStartSe:
; Line 418
	jmp	SHORT $LN3@SimStartSe
$LN2@SimStartSe:
; Line 419
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _maxSimGear, eax
; Line 421
	mov	BYTE PTR _unsavedSysData+221, 1
; Line 422
	mov	BYTE PTR _metRecordSpeedYet, 0
; Line 423
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SimStartSession ENDP
_TEXT	ENDS
PUBLIC	__real@40800000
PUBLIC	__real@4010000000000000
PUBLIC	_CalcSpeed
PUBLIC	__real@3ff0000000000000
PUBLIC	_DummyTick
EXTRN	_GetRecordSpeed:PROC
EXTRN	_SetTachLEDs:PROC
EXTRN	_SetWarningLED:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _DummyTick
_TEXT	SEGMENT
tv295 = -244						; size = 8
tv278 = -244						; size = 8
tv706 = -240						; size = 4
tv696 = -240						; size = 4
tv342 = -240						; size = 4
tv324 = -240						; size = 4
tv248 = -240						; size = 4
tv233 = -240						; size = 4
tv215 = -240						; size = 4
$T19169 = -232						; size = 8
$T19170 = -216						; size = 8
_i$ = -8						; size = 4
_DummyTick PROC						; COMDAT
; Line 429
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 434
	mov	eax, DWORD PTR _DataValues+272
	add	eax, 50					; 00000032H
	mov	DWORD PTR _DataValues+272, eax
; Line 435
	mov	eax, DWORD PTR _DataValues+280
	add	eax, 50					; 00000032H
	mov	DWORD PTR _DataValues+280, eax
; Line 436
	fld	DWORD PTR _DataValues+232
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR _DataValues+232
; Line 437
	mov	eax, DWORD PTR _DataValues+256
	add	eax, 50					; 00000032H
	mov	DWORD PTR _DataValues+256, eax
	cmp	DWORD PTR _DataValues+256, 82135	; 000140d7H
	jbe	SHORT $LN65@DummyTick
; Line 439
	mov	eax, DWORD PTR _DataValues+288
	add	eax, 1
	mov	DWORD PTR _DataValues+288, eax
; Line 440
	mov	eax, DWORD PTR _DataValues+256
	mov	DWORD PTR _DataValues+264, eax
; Line 441
	cmp	DWORD PTR _DataValues+648, 0
	je	SHORT $LN63@DummyTick
	mov	eax, DWORD PTR _DataValues+264
	cmp	eax, DWORD PTR _DataValues+648
	jae	SHORT $LN64@DummyTick
$LN63@DummyTick:
; Line 442
	mov	eax, DWORD PTR _DataValues+264
	mov	DWORD PTR _DataValues+648, eax
$LN64@DummyTick:
; Line 443
	mov	DWORD PTR _DataValues+256, 0
$LN65@DummyTick:
; Line 447
	cmp	DWORD PTR _speedDirection, 1
	jne	$LN62@DummyTick
; Line 449
	cmp	DWORD PTR _shifting, 0
	je	SHORT $LN61@DummyTick
; Line 453
	mov	eax, DWORD PTR _DataValues+424
	sub	eax, 530				; 00000212H
	mov	DWORD PTR _DataValues+424, eax
	cmp	DWORD PTR _DataValues+424, 25000	; 000061a8H
	jbe	SHORT $LN60@DummyTick
; Line 454
	mov	DWORD PTR _DataValues+424, 0
$LN60@DummyTick:
; Line 455
	mov	eax, DWORD PTR _DataValues+424
	cmp	eax, DWORD PTR _minSimRPM
	ja	SHORT $LN59@DummyTick
; Line 456
	mov	DWORD PTR _shifting, 0
$LN59@DummyTick:
; Line 458
	jmp	$LN54@DummyTick
$LN61@DummyTick:
; Line 460
	call	_CalcSpeed
	fstp	DWORD PTR _DataValues+112
; Line 461
	mov	eax, DWORD PTR _maxSimGear
	sub	eax, DWORD PTR _DataValues+592
	imul	eax, 23					; 00000017H
	add	eax, DWORD PTR _DataValues+424
	mov	DWORD PTR _DataValues+424, eax
	mov	ecx, DWORD PTR _vehicleData+20
	sub	ecx, 150				; 00000096H
	cmp	DWORD PTR _DataValues+424, ecx
	jb	SHORT $LN54@DummyTick
; Line 463
	mov	eax, DWORD PTR _DataValues+592
	add	eax, 1
	mov	DWORD PTR _DataValues+592, eax
	mov	ecx, DWORD PTR _DataValues+592
	cmp	ecx, DWORD PTR _maxSimGear
	jne	SHORT $LN56@DummyTick
; Line 465
	cmp	DWORD PTR _maxSimGear, 1
	jle	SHORT $LN55@DummyTick
; Line 466
	mov	eax, DWORD PTR _DataValues+592
	sub	eax, 1
	mov	DWORD PTR _DataValues+592, eax
$LN55@DummyTick:
; Line 467
	fld	DWORD PTR _DataValues+112
	fstp	DWORD PTR _DataValues+312
; Line 468
	mov	DWORD PTR _speedDirection, 0
; Line 470
	jmp	SHORT $LN54@DummyTick
$LN56@DummyTick:
; Line 472
	mov	DWORD PTR _shifting, 1
$LN54@DummyTick:
; Line 477
	jmp	$LN45@DummyTick
$LN62@DummyTick:
; Line 479
	cmp	DWORD PTR _shifting, 0
	je	SHORT $LN52@DummyTick
; Line 481
	mov	eax, DWORD PTR _DataValues+424
	add	eax, 530				; 00000212H
	mov	DWORD PTR _DataValues+424, eax
	mov	ecx, DWORD PTR _vehicleData+20
	sub	ecx, 100				; 00000064H
	cmp	DWORD PTR _DataValues+424, ecx
	jb	SHORT $LN51@DummyTick
; Line 482
	mov	DWORD PTR _shifting, 0
$LN51@DummyTick:
; Line 484
	jmp	$LN45@DummyTick
$LN52@DummyTick:
; Line 486
	call	_CalcSpeed
	fstp	DWORD PTR _DataValues+112
; Line 487
	mov	eax, DWORD PTR _DataValues+424
	sub	eax, 92					; 0000005cH
	mov	DWORD PTR _DataValues+424, eax
	cmp	DWORD PTR _DataValues+424, 25000	; 000061a8H
	jbe	SHORT $LN49@DummyTick
; Line 488
	mov	DWORD PTR _DataValues+424, 0
$LN49@DummyTick:
; Line 489
	mov	eax, DWORD PTR _DataValues+424
	cmp	eax, DWORD PTR _minSimRPM
	ja	SHORT $LN45@DummyTick
; Line 491
	mov	eax, DWORD PTR _DataValues+592
	sub	eax, 1
	mov	DWORD PTR _DataValues+592, eax
	cmp	DWORD PTR _DataValues+592, 1
	jne	SHORT $LN47@DummyTick
; Line 493
	cmp	DWORD PTR _maxSimGear, 1
	jle	SHORT $LN46@DummyTick
; Line 494
	mov	DWORD PTR _DataValues+592, 2
$LN46@DummyTick:
; Line 495
	fld	DWORD PTR _DataValues+112
	fchs
	fstp	DWORD PTR _DataValues+312
; Line 496
	mov	DWORD PTR _speedDirection, 1
; Line 498
	jmp	SHORT $LN45@DummyTick
$LN47@DummyTick:
; Line 500
	mov	DWORD PTR _shifting, 1
$LN45@DummyTick:
; Line 507
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN44@DummyTick
$LN43@DummyTick:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN44@DummyTick:
	cmp	DWORD PTR _i$[ebp], 82			; 00000052H
	jge	$LN42@DummyTick
; Line 512
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	cmp	DWORD PTR _DummyDataValues[eax], -1
	je	$LN39@DummyTick
; Line 513
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv215[ebp], eax
	cmp	DWORD PTR tv215[ebp], 79		; 0000004fH
	ja	$LN39@DummyTick
	mov	ecx, DWORD PTR tv215[ebp]
	movzx	edx, BYTE PTR $LN68@DummyTick[ecx]
	jmp	DWORD PTR $LN69@DummyTick[edx*4]
$LN38@DummyTick:
; Line 541
	movzx	eax, BYTE PTR ?dummy_initialized@?1??DummyTick@@9@9
	test	eax, eax
	jne	SHORT $LN37@DummyTick
; Line 542
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _i$[ebp]
	fld	DWORD PTR _DummyDataValues[eax+8]
	fstp	DWORD PTR _DataValues[ecx*8]
$LN37@DummyTick:
; Line 544
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	cmp	DWORD PTR _DummyDataValues[eax], 0
	jne	SHORT $LN36@DummyTick
; Line 545
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _i$[ebp]
	fld	DWORD PTR _DataValues[ecx*8]
	fadd	DWORD PTR _DummyDataValues[eax+12]
	fstp	DWORD PTR tv233[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	fld	DWORD PTR tv233[ebp]
	fstp	DWORD PTR _DataValues[edx*8]
	fld	DWORD PTR tv233[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	fcomp	DWORD PTR _DummyDataValues[eax+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN35@DummyTick
; Line 546
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	DWORD PTR _DummyDataValues[eax], 1
$LN35@DummyTick:
; Line 548
	jmp	SHORT $LN33@DummyTick
$LN36@DummyTick:
; Line 549
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _i$[ebp]
	fld	DWORD PTR _DataValues[ecx*8]
	fsub	DWORD PTR _DummyDataValues[eax+12]
	fstp	DWORD PTR tv248[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	fld	DWORD PTR tv248[ebp]
	fstp	DWORD PTR _DataValues[edx*8]
	fld	DWORD PTR tv248[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	fcomp	DWORD PTR _DummyDataValues[eax+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN33@DummyTick
; Line 550
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	DWORD PTR _DummyDataValues[eax], 0
$LN33@DummyTick:
; Line 553
	jmp	$LN39@DummyTick
$LN32@DummyTick:
; Line 558
	movzx	eax, BYTE PTR ?dummy_initialized@?1??DummyTick@@9@9
	test	eax, eax
	jne	SHORT $LN31@DummyTick
; Line 559
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	fld	DWORD PTR _DummyDataValues[eax+8]
	mov	ecx, DWORD PTR _i$[ebp]
	fstp	QWORD PTR _DataValues[ecx*8]
$LN31@DummyTick:
; Line 561
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	cmp	DWORD PTR _DummyDataValues[eax], -1
	je	$LN26@DummyTick
; Line 562
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	cmp	DWORD PTR _DummyDataValues[eax], 0
	jne	SHORT $LN29@DummyTick
; Line 563
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	fld	DWORD PTR _DummyDataValues[eax+12]
	mov	ecx, DWORD PTR _i$[ebp]
	fadd	QWORD PTR _DataValues[ecx*8]
	fstp	QWORD PTR tv278[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	fld	QWORD PTR tv278[ebp]
	fstp	QWORD PTR _DataValues[edx*8]
	fld	QWORD PTR tv278[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	fld	DWORD PTR _DummyDataValues[eax+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN28@DummyTick
; Line 564
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	DWORD PTR _DummyDataValues[eax], 1
$LN28@DummyTick:
; Line 566
	jmp	SHORT $LN26@DummyTick
$LN29@DummyTick:
; Line 567
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	fld	DWORD PTR _DummyDataValues[eax+12]
	mov	ecx, DWORD PTR _i$[ebp]
	fsubr	QWORD PTR _DataValues[ecx*8]
	fstp	QWORD PTR tv295[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	fld	QWORD PTR tv295[ebp]
	fstp	QWORD PTR _DataValues[edx*8]
	fld	QWORD PTR tv295[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	fld	DWORD PTR _DummyDataValues[eax+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN26@DummyTick
; Line 568
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	DWORD PTR _DummyDataValues[eax], 0
$LN26@DummyTick:
; Line 571
	jmp	$LN39@DummyTick
$LN25@DummyTick:
; Line 581
	movzx	eax, BYTE PTR ?dummy_initialized@?1??DummyTick@@9@9
	test	eax, eax
	jne	SHORT $LN24@DummyTick
; Line 582
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	fld	DWORD PTR _DummyDataValues[eax+8]
	call	__ftol2_sse
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _DataValues[ecx*8], eax
$LN24@DummyTick:
; Line 584
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	cmp	DWORD PTR _DummyDataValues[eax], 0
	jne	SHORT $LN23@DummyTick
; Line 585
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	fld	DWORD PTR _DummyDataValues[eax+16]
	fadd	DWORD PTR _DummyDataValues[ecx+12]
	fstp	DWORD PTR tv324[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 20					; 00000014H
	fld	DWORD PTR tv324[ebp]
	fstp	DWORD PTR _DummyDataValues[edx+16]
	fld	DWORD PTR tv324[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	fcomp	DWORD PTR _DummyDataValues[eax+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN22@DummyTick
; Line 586
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	DWORD PTR _DummyDataValues[eax], 1
$LN22@DummyTick:
; Line 588
	jmp	SHORT $LN20@DummyTick
$LN23@DummyTick:
; Line 589
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	fld	DWORD PTR _DummyDataValues[eax+16]
	fsub	DWORD PTR _DummyDataValues[ecx+12]
	fstp	DWORD PTR tv342[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 20					; 00000014H
	fld	DWORD PTR tv342[ebp]
	fstp	DWORD PTR _DummyDataValues[edx+16]
	fld	DWORD PTR tv342[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	fcomp	DWORD PTR _DummyDataValues[eax+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN20@DummyTick
; Line 590
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	DWORD PTR _DummyDataValues[eax], 0
$LN20@DummyTick:
; Line 593
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	fld	DWORD PTR _DummyDataValues[eax+16]
	call	__ftol2_sse
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _DataValues[ecx*8], eax
; Line 596
	movzx	eax, BYTE PTR _suData+12
	test	eax, eax
	jne	SHORT $LN19@DummyTick
; Line 597
	fld	DWORD PTR _DummyDataValues+436
	fcomp	QWORD PTR __real@4010000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN18@DummyTick
; Line 598
	mov	BYTE PTR _suData+12, 1
$LN18@DummyTick:
; Line 600
	jmp	SHORT $LN16@DummyTick
$LN19@DummyTick:
; Line 601
	fld	DWORD PTR _DummyDataValues+436
	fcomp	QWORD PTR __real@4010000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN16@DummyTick
; Line 602
	fld	DWORD PTR __real@40800000
	fstp	DWORD PTR _DummyDataValues+436
; Line 603
	mov	DWORD PTR _DummyDataValues+420, 0
$LN16@DummyTick:
; Line 605
	jmp	SHORT $LN39@DummyTick
$LN15@DummyTick:
; Line 609
	cmp	DWORD PTR _DataValues+424, 25000	; 000061a8H
	jbe	SHORT $LN14@DummyTick
; Line 610
	mov	DWORD PTR _DataValues+424, 0
$LN14@DummyTick:
; Line 611
	cmp	DWORD PTR _DataValues+544, 25000	; 000061a8H
	jbe	SHORT $LN13@DummyTick
; Line 612
	mov	DWORD PTR _DataValues+544, 0
$LN13@DummyTick:
; Line 613
	cmp	DWORD PTR _sysData+188, 25000		; 000061a8H
	jbe	SHORT $LN12@DummyTick
; Line 614
	mov	DWORD PTR _sysData+188, 0
$LN12@DummyTick:
; Line 616
	mov	eax, DWORD PTR _DataValues+424
	cmp	eax, DWORD PTR _DataValues+544
	jbe	SHORT $LN10@DummyTick
; Line 617
	mov	eax, DWORD PTR _DataValues+424
	mov	DWORD PTR _DataValues+544, eax
; Line 618
	mov	eax, DWORD PTR _DataValues+424
	cmp	eax, DWORD PTR _sysData+188
	jbe	SHORT $LN10@DummyTick
; Line 619
	mov	eax, DWORD PTR _DataValues+424
	mov	DWORD PTR _sysData+188, eax
$LN10@DummyTick:
$LN39@DummyTick:
; Line 628
	jmp	$LN43@DummyTick
$LN42@DummyTick:
; Line 631
	mov	BYTE PTR ?dummy_initialized@?1??DummyTick@@9@9, 1
; Line 634
	fld	DWORD PTR _DataValues+208
	fcomp	DWORD PTR _DataValues+112
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN9@DummyTick
; Line 635
	fld	DWORD PTR _DataValues+112
	fstp	DWORD PTR _DataValues+208
$LN9@DummyTick:
; Line 636
	fld	DWORD PTR _DataValues+24
	fcomp	DWORD PTR _DataValues+72
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN8@DummyTick
; Line 637
	fld	DWORD PTR _DataValues+72
	fstp	DWORD PTR _DataValues+24
$LN8@DummyTick:
; Line 638
	fld	DWORD PTR _DataValues+48
	fcomp	DWORD PTR _DataValues+72
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@DummyTick
; Line 639
	fld	DWORD PTR _DataValues+72
	fstp	DWORD PTR _DataValues+48
$LN7@DummyTick:
; Line 640
	fld	DWORD PTR _DataValues+32
	fcomp	DWORD PTR _DataValues+80
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@DummyTick
; Line 641
	fld	DWORD PTR _DataValues+80
	fstp	DWORD PTR _DataValues+32
$LN6@DummyTick:
; Line 642
	fld	DWORD PTR _DataValues+56
	fcomp	DWORD PTR _DataValues+80
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN5@DummyTick
; Line 643
	fld	DWORD PTR _DataValues+80
	fstp	DWORD PTR _DataValues+56
$LN5@DummyTick:
; Line 644
	fld	DWORD PTR _DataValues+40
	fcomp	DWORD PTR _DataValues+88
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@DummyTick
; Line 645
	fld	DWORD PTR _DataValues+88
	fstp	DWORD PTR _DataValues+40
$LN4@DummyTick:
; Line 646
	fld	DWORD PTR _DataValues+64
	fcomp	DWORD PTR _DataValues+88
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@DummyTick
; Line 647
	fld	DWORD PTR _DataValues+88
	fstp	DWORD PTR _DataValues+64
$LN3@DummyTick:
; Line 651
	push	54					; 00000036H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T19169[ebp], eax
	mov	DWORD PTR $T19169[ebp+4], edx
	fld	DWORD PTR $T19169[ebp]
	call	__ftol2_sse
	mov	DWORD PTR tv696[ebp], eax
	fild	DWORD PTR tv696[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	3
	call	_SetWarningLED
	add	esp, 8
; Line 652
	push	53					; 00000035H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T19170[ebp], eax
	mov	DWORD PTR $T19170[ebp+4], edx
	mov	eax, DWORD PTR $T19170[ebp]
	push	eax
	call	_SetTachLEDs
	add	esp, 4
; Line 657
	movzx	eax, BYTE PTR _metRecordSpeedYet
	test	eax, eax
	jne	SHORT $LN1@DummyTick
; Line 658
	call	_GetRecordSpeed
	mov	DWORD PTR tv706[ebp], eax
	fild	DWORD PTR tv706[ebp]
	fcomp	DWORD PTR _DataValues+112
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN1@DummyTick
; Line 660
	mov	BYTE PTR _unsavedSysData+221, 0
; Line 661
	mov	BYTE PTR _metRecordSpeedYet, 1
$LN1@DummyTick:
; Line 663
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN69@DummyTick:
	DD	$LN38@DummyTick
	DD	$LN32@DummyTick
	DD	$LN25@DummyTick
	DD	$LN15@DummyTick
	DD	$LN39@DummyTick
$LN68@DummyTick:
	DB	0
	DB	0
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	0
	DB	0
	DB	0
	DB	1
	DB	1
	DB	4
	DB	0
	DB	0
	DB	2
	DB	2
	DB	0
	DB	0
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	0
	DB	0
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	0
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	4
	DB	4
	DB	0
	DB	0
	DB	0
	DB	0
	DB	2
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	0
	DB	4
	DB	2
_DummyTick ENDP
_TEXT	ENDS
PUBLIC	__real@3f4f072c442ba8fb
;	COMDAT __real@3f4f072c442ba8fb
CONST	SEGMENT
__real@3f4f072c442ba8fb DQ 03f4f072c442ba8fbr	; 0.0009469
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _CalcSpeed
_TEXT	SEGMENT
tv84 = -204						; size = 4
tv79 = -200						; size = 8
_CalcSpeed PROC						; COMDAT
; Line 666
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 671
	mov	eax, DWORD PTR _DataValues+424
	mov	DWORD PTR tv79[ebp], eax
	mov	DWORD PTR tv79[ebp+4], 0
	fild	QWORD PTR tv79[ebp]
	fmul	DWORD PTR _vehicleData+84
	fdiv	DWORD PTR _vehicleData+80
	mov	ecx, DWORD PTR _DataValues+592
	fdiv	DWORD PTR _vehicleData[ecx*4+44]
	fmul	QWORD PTR __real@3f4f072c442ba8fb
	fstp	DWORD PTR tv84[ebp]
	fld	DWORD PTR tv84[ebp]
; Line 672
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CalcSpeed ENDP
_TEXT	ENDS
PUBLIC	_dataTickCallback
PUBLIC	_InitCommSimulatorTask
EXTRN	_WM_CreateTimer:PROC
EXTRN	_WM_CreateWindow:PROC
_BSS	SEGMENT
_hDataUpdateTimer DD 01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT _InitCommSimulatorTask
_TEXT	SEGMENT
_hDummyWin$ = -8					; size = 4
_InitCommSimulatorTask PROC				; COMDAT
; Line 675
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 680
	call	_SimStartSession
; Line 684
	push	0
	push	OFFSET _dataTickCallback
	push	0
	push	0
	push	0
	push	0
	push	0
	call	_WM_CreateWindow
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _hDummyWin$[ebp], eax
; Line 685
	push	0
	push	50					; 00000032H
	push	0
	mov	eax, DWORD PTR _hDummyWin$[ebp]
	push	eax
	call	_WM_CreateTimer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hDataUpdateTimer, eax
; Line 687
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_InitCommSimulatorTask ENDP
_TEXT	ENDS
EXTRN	_WM_DefaultProc:PROC
EXTRN	_WM_RestartTimer:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _dataTickCallback
_TEXT	SEGMENT
_pMsg$ = 8						; size = 4
_dataTickCallback PROC					; COMDAT
; Line 691
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 692
	mov	eax, DWORD PTR _pMsg$[ebp]
	cmp	DWORD PTR [eax], 275			; 00000113H
	jne	SHORT $LN3@dataTickCa
; Line 694
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _hDataUpdateTimer
	jne	SHORT $LN2@dataTickCa
; Line 696
	call	_DummyTick
; Line 697
	push	50					; 00000032H
	mov	eax, DWORD PTR _hDataUpdateTimer
	push	eax
	call	_WM_RestartTimer
	add	esp, 8
$LN2@dataTickCa:
; Line 698
	jmp	SHORT $LN4@dataTickCa
$LN3@dataTickCa:
; Line 700
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_WM_DefaultProc
	add	esp, 4
$LN4@dataTickCa:
; Line 701
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dataTickCallback ENDP
_TEXT	ENDS
PUBLIC	__real@3fee666666666666
PUBLIC	__real@404e000000000000
PUBLIC	__real@40ac200000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@4043800000000000
PUBLIC	__real@0000000000000000
PUBLIC	_SetGear
;	COMDAT __real@3fee666666666666
CONST	SEGMENT
__real@3fee666666666666 DQ 03fee666666666666r	; 0.95
CONST	ENDS
;	COMDAT __real@404e000000000000
CONST	SEGMENT
__real@404e000000000000 DQ 0404e000000000000r	; 60
CONST	ENDS
;	COMDAT __real@40ac200000000000
CONST	SEGMENT
__real@40ac200000000000 DQ 040ac200000000000r	; 3600
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@4043800000000000
CONST	SEGMENT
__real@4043800000000000 DQ 04043800000000000r	; 39
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _SetGear
_TEXT	SEGMENT
_speedfactor$18998 = -20				; size = 4
_i$ = -8						; size = 4
_command$ = 8						; size = 4
_SetGear PROC						; COMDAT
; Line 722
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 727
	cmp	DWORD PTR _command$[ebp], 0
	jne	SHORT $LN18@SetGear
; Line 728
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN17@SetGear
$LN16@SetGear:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN17@SetGear:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN15@SetGear
; Line 729
	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR _vehicleData[eax*4+48]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN14@SetGear
; Line 730
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR ?topgear@?1??SetGear@@9@9, eax
; Line 731
	jmp	SHORT $LN15@SetGear
; Line 733
	jmp	SHORT $LN13@SetGear
$LN14@SetGear:
; Line 735
	fld	DWORD PTR _vehicleData+84
	fdiv	QWORD PTR __real@4043800000000000
	fdiv	DWORD PTR _vehicleData+80
	mov	eax, DWORD PTR _i$[ebp]
	fdiv	DWORD PTR _vehicleData[eax*4+48]
	mov	ecx, DWORD PTR _i$[ebp]
	fstp	DWORD PTR ?speedRPMTable@?1??SetGear@@9@9[ecx*4]
$LN13@SetGear:
; Line 737
	jmp	SHORT $LN16@SetGear
$LN15@SetGear:
; Line 739
	jmp	$LN1@SetGear
$LN18@SetGear:
; Line 741
	fld	DWORD PTR _vehicleData+80
	fcomp	QWORD PTR __real@3f847ae147ae147b
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN10@SetGear
	cmp	DWORD PTR _DataValues+424, -1
	jne	SHORT $LN11@SetGear
$LN10@SetGear:
; Line 742
	mov	DWORD PTR _DataValues+592, -1
	jmp	$LN1@SetGear
$LN11@SetGear:
; Line 745
	fld	DWORD PTR _DataValues+112
	fcomp	QWORD PTR __real@3fb999999999999a
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN7@SetGear
	cmp	DWORD PTR _DataValues+424, 0
	jne	SHORT $LN8@SetGear
$LN7@SetGear:
; Line 746
	mov	DWORD PTR _DataValues+592, 0
; Line 748
	jmp	$LN1@SetGear
$LN8@SetGear:
; Line 752
	fld	DWORD PTR _DataValues+112
	fmul	QWORD PTR __real@408f400000000000
	fdiv	QWORD PTR __real@40ac200000000000
	fild	DWORD PTR _DataValues+424
	fdiv	QWORD PTR __real@404e000000000000
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _speedfactor$18998[ebp]
; Line 753
	fld	DWORD PTR _speedfactor$18998[ebp]
	fmul	QWORD PTR __real@3fee666666666666
	fstp	DWORD PTR _speedfactor$18998[ebp]
; Line 755
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@SetGear
$LN4@SetGear:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@SetGear:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?topgear@?1??SetGear@@9@9
	jge	SHORT $LN3@SetGear
; Line 756
	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR ?speedRPMTable@?1??SetGear@@9@9[eax*4]
	fcomp	DWORD PTR _speedfactor$18998[ebp]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN2@SetGear
; Line 757
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _DataValues+592, eax
; Line 758
	jmp	SHORT $LN3@SetGear
$LN2@SetGear:
; Line 760
	jmp	SHORT $LN4@SetGear
$LN3@SetGear:
; Line 762
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?topgear@?1??SetGear@@9@9
	jl	SHORT $LN1@SetGear
; Line 763
	mov	DWORD PTR _DataValues+592, -1
$LN1@SetGear:
; Line 766
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SetGear ENDP
_TEXT	ENDS
PUBLIC	_GetTimeString
PUBLIC	_DrawInfo
PUBLIC	_GetSignalStrengthIcon
PUBLIC	_GetSUStatusIcon
PUBLIC	_GetCameraIcon
PUBLIC	_SlideoutGetSignalStrengthIcon
PUBLIC	__$ArrayPad$
PUBLIC	_DrawSignalStrength
EXTRN	_GUI_DispStringHCenterAt:PROC
EXTRN	_HaveSatelliteReception:PROC
EXTRN	_GUI_SetTextMode:PROC
EXTRN	_GUI_SetColor:PROC
EXTRN	_GUI_SetFont:PROC
EXTRN	_GUI_Font20_ASCII:BYTE
EXTRN	_GetSUCam:PROC
EXTRN	_bmGreenSD:BYTE
EXTRN	_bmRedSD:BYTE
EXTRN	_GUI_DrawBitmap:PROC
EXTRN	_hSUStatusSprite:DWORD
EXTRN	_hCameraSprite:DWORD
EXTRN	_GUI_SPRITE_SetBitmap:PROC
EXTRN	_hSignalStrengthSprite:DWORD
EXTRN	_SlideOutVisible:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DrawSignalStrength
_TEXT	SEGMENT
_scratch$19010 = -52					; size = 30
_pIcon$19009 = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_DrawSignalStrength PROC				; COMDAT
; Line 770
	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 771
	call	_SlideOutVisible
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@DrawSignal
; Line 774
	call	_SlideoutGetSignalStrengthIcon
	push	eax
	mov	eax, DWORD PTR _hSignalStrengthSprite
	push	eax
	call	_GUI_SPRITE_SetBitmap
	add	esp, 8
; Line 777
	call	_GetCameraIcon
	push	eax
	mov	eax, DWORD PTR _hCameraSprite
	push	eax
	call	_GUI_SPRITE_SetBitmap
	add	esp, 8
; Line 780
	call	_GetSUStatusIcon
	push	eax
	mov	eax, DWORD PTR _hSUStatusSprite
	push	eax
	call	_GUI_SPRITE_SetBitmap
	add	esp, 8
; Line 782
	jmp	$LN9@DrawSignal
$LN8@DrawSignal:
; Line 788
	push	0
	push	442					; 000001baH
	call	_GetSignalStrengthIcon
	push	eax
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 791
	movzx	eax, BYTE PTR _SDBusy
	test	eax, eax
	je	SHORT $LN6@DrawSignal
; Line 793
	push	0
	push	414					; 0000019eH
	push	OFFSET _bmRedSD
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
; Line 794
	mov	BYTE PTR _SDBusy, 0
; Line 796
	jmp	SHORT $LN5@DrawSignal
$LN6@DrawSignal:
; Line 800
	push	0
	push	414					; 0000019eH
	push	OFFSET _bmGreenSD
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
$LN5@DrawSignal:
; Line 819
	call	_GetSUCam
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@DrawSignal
; Line 821
	call	_GetCameraIcon
	mov	DWORD PTR _pIcon$19009[ebp], eax
; Line 822
	cmp	DWORD PTR _pIcon$19009[ebp], 0
	je	SHORT $LN4@DrawSignal
; Line 823
	push	0
	push	378					; 0000017aH
	mov	eax, DWORD PTR _pIcon$19009[ebp]
	push	eax
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
$LN4@DrawSignal:
; Line 827
	call	_DrawInfo
; Line 831
	push	OFFSET _GUI_Font20_ASCII
	call	_GUI_SetFont
	add	esp, 4
; Line 832
	push	16777215				; 00ffffffH
	call	_GUI_SetColor
	add	esp, 4
; Line 833
	push	2
	call	_GUI_SetTextMode
	add	esp, 4
; Line 835
	call	_HaveSatelliteReception
	test	eax, eax
	je	SHORT $LN2@DrawSignal
; Line 836
	push	9
	push	70					; 00000046H
	lea	eax, DWORD PTR _scratch$19010[ebp]
	push	eax
	push	3
	call	_GetTimeString
	add	esp, 8
	push	eax
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
; Line 837
	jmp	SHORT $LN9@DrawSignal
$LN2@DrawSignal:
; Line 838
	push	9
	push	70					; 00000046H
	push	OFFSET $SG19017
	call	_GUI_DispStringHCenterAt
	add	esp, 12					; 0000000cH
$LN9@DrawSignal:
; Line 840
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@DrawSignal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@DrawSignal:
	DD	1
	DD	$LN12@DrawSignal
$LN12@DrawSignal:
	DD	-52					; ffffffccH
	DD	30					; 0000001eH
	DD	$LN11@DrawSignal
$LN11@DrawSignal:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_DrawSignalStrength ENDP
_TEXT	ENDS
EXTRN	_bmCameraBlankIcon:BYTE
EXTRN	_bmCameraRecordIcon:BYTE
EXTRN	_bmCameraReadyIcon:BYTE
EXTRN	_bmCameraNotReadyIcon:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetCameraIcon
_TEXT	SEGMENT
tv66 = -212						; size = 4
$T19216 = -204						; size = 8
_GetCameraIcon PROC					; COMDAT
; Line 846
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 847
	push	75					; 0000004bH
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T19216[ebp], eax
	mov	DWORD PTR $T19216[ebp+4], edx
	mov	eax, DWORD PTR $T19216[ebp]
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 3
	ja	SHORT $LN1@GetCameraI
	mov	ecx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN10@GetCameraI[ecx*4]
$LN5@GetCameraI:
; Line 849
	mov	eax, OFFSET _bmCameraNotReadyIcon
	jmp	SHORT $LN8@GetCameraI
$LN4@GetCameraI:
; Line 850
	mov	eax, OFFSET _bmCameraReadyIcon
	jmp	SHORT $LN8@GetCameraI
$LN3@GetCameraI:
; Line 851
	mov	eax, OFFSET _bmCameraRecordIcon
	jmp	SHORT $LN8@GetCameraI
$LN2@GetCameraI:
; Line 852
	mov	eax, OFFSET _bmCameraBlankIcon
	jmp	SHORT $LN8@GetCameraI
$LN1@GetCameraI:
; Line 853
	xor	eax, eax
$LN8@GetCameraI:
; Line 855
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@GetCameraI:
	DD	$LN2@GetCameraI
	DD	$LN5@GetCameraI
	DD	$LN4@GetCameraI
	DD	$LN3@GetCameraI
_GetCameraIcon ENDP
_TEXT	ENDS
EXTRN	_bmNoSUIcon:BYTE
EXTRN	_bmSUGoodIcon:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetSUStatusIcon
_TEXT	SEGMENT
_GetSUStatusIcon PROC					; COMDAT
; Line 858
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 859
	movzx	eax, BYTE PTR _suData+12
	test	eax, eax
	je	SHORT $LN2@GetSUStatu
; Line 860
	mov	eax, OFFSET _bmSUGoodIcon
	jmp	SHORT $LN3@GetSUStatu
	jmp	SHORT $LN3@GetSUStatu
$LN2@GetSUStatu:
; Line 861
	mov	eax, OFFSET _bmNoSUIcon
$LN3@GetSUStatu:
; Line 862
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GetSUStatusIcon ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _SlideoutGetSignalStrengthIcon
_TEXT	SEGMENT
_pIcon$ = -8						; size = 4
_SlideoutGetSignalStrengthIcon PROC			; COMDAT
; Line 865
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 868
	call	_GetSignalStrengthIcon
	mov	DWORD PTR _pIcon$[ebp], eax
	cmp	DWORD PTR _pIcon$[ebp], OFFSET _bmNoSUIcon
	jne	SHORT $LN1@SlideoutGe
; Line 869
	mov	DWORD PTR _pIcon$[ebp], OFFSET _bmNoSignal
$LN1@SlideoutGe:
; Line 870
	mov	eax, DWORD PTR _pIcon$[ebp]
; Line 871
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SlideoutGetSignalStrengthIcon ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _GetSignalStrengthIcon
_TEXT	SEGMENT
$T19224 = -228						; size = 8
_bitmapindex$19042 = -20				; size = 4
_numsats$19041 = -8					; size = 4
_GetSignalStrengthIcon PROC				; COMDAT
; Line 874
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 875
	movzx	eax, BYTE PTR _suData+12
	test	eax, eax
	jne	SHORT $LN11@GetSignalS
; Line 876
	mov	eax, OFFSET _bmNoSUIcon
	jmp	SHORT $LN12@GetSignalS
; Line 877
	jmp	SHORT $LN12@GetSignalS
$LN11@GetSignalS:
; Line 882
	push	21					; 00000015H
	call	_GetValue
	add	esp, 4
	mov	DWORD PTR $T19224[ebp], eax
	mov	DWORD PTR $T19224[ebp+4], edx
	mov	eax, DWORD PTR $T19224[ebp]
	mov	DWORD PTR _numsats$19041[ebp], eax
; Line 884
	mov	DWORD PTR _bitmapindex$19042[ebp], 0
; Line 886
	cmp	DWORD PTR _numsats$19041[ebp], 3
	jl	SHORT $LN9@GetSignalS
; Line 887
	cmp	DWORD PTR _numsats$19041[ebp], 5
	jl	SHORT $LN8@GetSignalS
; Line 888
	cmp	DWORD PTR _numsats$19041[ebp], 7
	jl	SHORT $LN7@GetSignalS
; Line 889
	cmp	DWORD PTR _numsats$19041[ebp], 9
	jl	SHORT $LN6@GetSignalS
; Line 890
	cmp	DWORD PTR _numsats$19041[ebp], 11	; 0000000bH
	jl	SHORT $LN5@GetSignalS
; Line 891
	mov	DWORD PTR _bitmapindex$19042[ebp], 5
; Line 893
	jmp	SHORT $LN4@GetSignalS
$LN5@GetSignalS:
; Line 894
	mov	DWORD PTR _bitmapindex$19042[ebp], 4
$LN4@GetSignalS:
; Line 896
	jmp	SHORT $LN3@GetSignalS
$LN6@GetSignalS:
; Line 897
	mov	DWORD PTR _bitmapindex$19042[ebp], 3
$LN3@GetSignalS:
; Line 899
	jmp	SHORT $LN2@GetSignalS
$LN7@GetSignalS:
; Line 900
	mov	DWORD PTR _bitmapindex$19042[ebp], 2
$LN2@GetSignalS:
; Line 902
	jmp	SHORT $LN9@GetSignalS
$LN8@GetSignalS:
; Line 903
	mov	DWORD PTR _bitmapindex$19042[ebp], 1
$LN9@GetSignalS:
; Line 905
	mov	eax, DWORD PTR _bitmapindex$19042[ebp]
	mov	eax, DWORD PTR _SignalStrengthGraphics[eax*4]
$LN12@GetSignalS:
; Line 907
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetSignalStrengthIcon ENDP
_TEXT	ENDS
PUBLIC	_ForceSDBusy
EXTRN	_GUI_Exec:PROC
EXTRN	_WM_InvalidateRect:PROC
EXTRN	_BannerRect:QWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ForceSDBusy
_TEXT	SEGMENT
_hWin$ = 8						; size = 4
_ForceSDBusy PROC					; COMDAT
; Line 916
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 917
	push	OFFSET _BannerRect
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_WM_InvalidateRect
	add	esp, 8
; Line 919
	mov	BYTE PTR _SDBusy, 1
; Line 920
	call	_GUI_Exec
; Line 921
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ForceSDBusy ENDP
_TEXT	ENDS
PUBLIC	_ResetNewScreen
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ResetNewScreen
_TEXT	SEGMENT
_ResetNewScreen PROC					; COMDAT
; Line 927
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 928
	mov	DWORD PTR _animationIndex, 0
; Line 929
	mov	DWORD PTR _animationCycles, 4
; Line 930
	mov	DWORD PTR _newScreen, 1
; Line 931
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ResetNewScreen ENDP
_TEXT	ENDS
EXTRN	_bmInfoButton5:BYTE
EXTRN	_bmInfoButton4:BYTE
EXTRN	_bmInfoButton3:BYTE
EXTRN	_bmInfoButton2:BYTE
EXTRN	_bmInfoButton1:BYTE
EXTRN	_pHelpScreens:DWORD
EXTRN	_CheckForInfoKey:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DrawInfo
_TEXT	SEGMENT
tv71 = -196						; size = 4
_DrawInfo PROC						; COMDAT
; Line 935
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 936
	cmp	DWORD PTR _newScreen, 1
	jne	SHORT $LN13@DrawInfo
; Line 939
	push	1
	call	_CheckForInfoKey
	add	esp, 4
	mov	DWORD PTR _hasInfoKey, eax
; Line 940
	mov	DWORD PTR _newScreen, 0
$LN13@DrawInfo:
; Line 945
	cmp	DWORD PTR _pHelpScreens, -1
	je	$LN12@DrawInfo
; Line 947
	cmp	DWORD PTR _animationCycles, 0
	je	$LN11@DrawInfo
; Line 949
	cmp	DWORD PTR _animationIndex, 10		; 0000000aH
	jl	SHORT $LN10@DrawInfo
; Line 951
	mov	DWORD PTR _animationIndex, 0
; Line 952
	mov	eax, DWORD PTR _animationCycles
	sub	eax, 1
	mov	DWORD PTR _animationCycles, eax
$LN10@DrawInfo:
; Line 954
	mov	eax, DWORD PTR _animationIndex
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv71[ebp], ecx
	cmp	DWORD PTR tv71[ebp], 7
	ja	SHORT $LN7@DrawInfo
	mov	edx, DWORD PTR tv71[ebp]
	jmp	DWORD PTR $LN16@DrawInfo[edx*4]
$LN7@DrawInfo:
; Line 958
	mov	DWORD PTR _pAnimation, OFFSET _bmInfoButton1
	jmp	SHORT $LN8@DrawInfo
$LN6@DrawInfo:
; Line 960
	mov	DWORD PTR _pAnimation, OFFSET _bmInfoButton2
	jmp	SHORT $LN8@DrawInfo
$LN5@DrawInfo:
; Line 962
	mov	DWORD PTR _pAnimation, OFFSET _bmInfoButton3
	jmp	SHORT $LN8@DrawInfo
$LN4@DrawInfo:
; Line 964
	mov	DWORD PTR _pAnimation, OFFSET _bmInfoButton4
	jmp	SHORT $LN8@DrawInfo
$LN3@DrawInfo:
; Line 966
	mov	DWORD PTR _pAnimation, OFFSET _bmInfoButton5
$LN8@DrawInfo:
; Line 968
	mov	eax, DWORD PTR _animationIndex
	add	eax, 1
	mov	DWORD PTR _animationIndex, eax
$LN11@DrawInfo:
; Line 969
	jmp	SHORT $LN2@DrawInfo
$LN12@DrawInfo:
; Line 971
	mov	DWORD PTR _pAnimation, OFFSET _bmInfoButton1
$LN2@DrawInfo:
; Line 973
	cmp	DWORD PTR _pAnimation, 0
	je	SHORT $LN14@DrawInfo
; Line 974
	push	0
	push	0
	mov	eax, DWORD PTR _pAnimation
	push	eax
	call	_GUI_DrawBitmap
	add	esp, 12					; 0000000cH
$LN14@DrawInfo:
; Line 975
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@DrawInfo:
	DD	$LN6@DrawInfo
	DD	$LN5@DrawInfo
	DD	$LN4@DrawInfo
	DD	$LN3@DrawInfo
	DD	$LN3@DrawInfo
	DD	$LN4@DrawInfo
	DD	$LN5@DrawInfo
	DD	$LN6@DrawInfo
_DrawInfo ENDP
_TEXT	ENDS
PUBLIC	_f_to_c
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _f_to_c
_TEXT	SEGMENT
tv71 = -196						; size = 4
_val$ = 8						; size = 4
_f_to_c	PROC						; COMDAT
; Line 981
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 982
	fld	DWORD PTR _val$[ebp]
	fsub	QWORD PTR __real@4040000000000000
	fmul	QWORD PTR __real@4014000000000000
	fdiv	QWORD PTR __real@4022000000000000
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]
; Line 983
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_f_to_c	ENDP
_TEXT	ENDS
PUBLIC	_c_to_f
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _c_to_f
_TEXT	SEGMENT
tv73 = -196						; size = 4
_val$ = 8						; size = 4
_c_to_f	PROC						; COMDAT
; Line 989
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 990
	fld	DWORD PTR _val$[ebp]
	fmul	QWORD PTR __real@4022000000000000
	fdiv	QWORD PTR __real@4014000000000000
	fadd	QWORD PTR __real@4040000000000000
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
; Line 991
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_c_to_f	ENDP
_TEXT	ENDS
EXTRN	_sprintf:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GetTimeString
_TEXT	SEGMENT
tv83 = -248						; size = 4
_pm$ = -45						; size = 1
_hour$ = -33						; size = 1
_currentTime$ = -24					; size = 4
_t$ = -12						; size = 8
_what$ = 8						; size = 4
_pString$ = 12						; size = 4
_GetTimeString PROC					; COMDAT
; Line 994
	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1001
	push	0
	call	_time
	add	esp, 4
	mov	DWORD PTR _t$[ebp], eax
	mov	DWORD PTR _t$[ebp+4], edx
; Line 1002
	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	call	_localtime
	add	esp, 4
	mov	DWORD PTR _currentTime$[ebp], eax
; Line 1004
	mov	eax, DWORD PTR _currentTime$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR _hour$[ebp], cl
; Line 1005
	movzx	eax, BYTE PTR _hour$[ebp]
	xor	ecx, ecx
	cmp	eax, 12					; 0000000cH
	setge	cl
	mov	BYTE PTR _pm$[ebp], cl
; Line 1007
	movzx	eax, BYTE PTR _hour$[ebp]
	cmp	eax, 12					; 0000000cH
	jle	SHORT $LN2@GetTimeStr
; Line 1008
	movzx	eax, BYTE PTR _hour$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	BYTE PTR _hour$[ebp], dl
$LN2@GetTimeStr:
; Line 1009
	movzx	eax, BYTE PTR _hour$[ebp]
	test	eax, eax
	jne	SHORT $LN1@GetTimeStr
; Line 1010
	mov	BYTE PTR _hour$[ebp], 12		; 0000000cH
$LN1@GetTimeStr:
; Line 1012
	movzx	eax, BYTE PTR _pm$[ebp]
	test	eax, eax
	je	SHORT $LN5@GetTimeStr
	mov	DWORD PTR tv83[ebp], OFFSET $SG19094
	jmp	SHORT $LN6@GetTimeStr
$LN5@GetTimeStr:
	mov	DWORD PTR tv83[ebp], OFFSET $SG19095
$LN6@GetTimeStr:
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	mov	edx, DWORD PTR _currentTime$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	movzx	ecx, BYTE PTR _hour$[ebp]
	push	ecx
	push	OFFSET $SG19096
	mov	edx, DWORD PTR _pString$[ebp]
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H
; Line 1016
	mov	eax, DWORD PTR _pString$[ebp]
; Line 1017
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@GetTimeStr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@GetTimeStr:
	DD	1
	DD	$LN8@GetTimeStr
$LN8@GetTimeStr:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN7@GetTimeStr
$LN7@GetTimeStr:
	DB	116					; 00000074H
	DB	0
_GetTimeString ENDP
_TEXT	ENDS
EXTRN	__localtime64:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _localtime
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_localtime PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
; Line 113
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 116
	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	__localtime64
	add	esp, 4
; Line 118
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_localtime ENDP
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT
; Line 132
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 133
	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	__time64
	add	esp, 4
; Line 134
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_time	ENDP
_TEXT	ENDS
PUBLIC	_ResetTrip
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ResetTrip
_TEXT	SEGMENT
_ResetTrip PROC						; COMDAT
; File c:\duii\duii\datahandler.c
; Line 1020
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1021
	fldz
	fstp	DWORD PTR _sysData+204
; Line 1022
	mov	DWORD PTR _sysData+200, 0
; Line 1023
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ResetTrip ENDP
_TEXT	ENDS
PUBLIC	_ResetMax
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ResetMax
_TEXT	SEGMENT
_ResetMax PROC						; COMDAT
; Line 1026
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1027
	fldz
	fstp	DWORD PTR _DataValues+208
; Line 1028
	fldz
	fstp	DWORD PTR _DataValues+24
; Line 1029
	fldz
	fstp	DWORD PTR _DataValues+32
; Line 1030
	fldz
	fstp	DWORD PTR _DataValues+40
; Line 1031
	fldz
	fstp	DWORD PTR _DataValues+48
; Line 1032
	fldz
	fstp	DWORD PTR _DataValues+56
; Line 1033
	fldz
	fstp	DWORD PTR _DataValues+64
; Line 1034
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ResetMax ENDP
_TEXT	ENDS
END
