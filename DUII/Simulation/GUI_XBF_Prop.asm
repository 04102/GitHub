; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_XBF_Prop.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_XBF_APIList_Prop
EXTRN	_GUI_XBF__IsInFont:PROC
EXTRN	_GUI_XBF__GetFontInfo:PROC
EXTRN	_GUI_XBF__GetCharDistX:PROC
CONST	SEGMENT
_GUI_XBF_APIList_Prop DD FLAT:__DispChar
	DD	FLAT:_GUI_XBF__GetCharDistX
	DD	FLAT:_GUI_XBF__GetFontInfo
	DD	FLAT:_GUI_XBF__IsInFont
	ORG $+8
CONST	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_LCD_FillRect:PROC
EXTRN	_GUI_SetColor:PROC
EXTRN	_GUI_GetBkColor:PROC
EXTRN	_GUI_GetColor:PROC
EXTRN	_LCD_DrawBitmap:PROC
EXTRN	_LCD_pBkColorIndex:DWORD
EXTRN	_GUI__Read16:PROC
EXTRN	_LCD_SetDrawMode:PROC
EXTRN	_GUI_XBF__GetOffAndSize:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_xbf_prop.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __DispChar
_TEXT	SEGMENT
_OldColor$8370 = -436					; size = 4
_YSize$8369 = -424					; size = 4
_YDist$8368 = -412					; size = 4
_YMag$8367 = -400					; size = 4
_yPos$ = -388						; size = 4
_xPos$ = -376						; size = 4
_NumLines$ = -364					; size = 4
_RemLines$ = -352					; size = 4
_MaxLines$ = -340					; size = 2
_NumBytes$ = -328					; size = 2
_BytesPerLine$ = -316					; size = 2
_XSize$ = -304						; size = 2
_Size$ = -292						; size = 2
_iOff$ = -280						; size = 4
_Off$ = -268						; size = 4
_pXBF_Data$ = -256					; size = 4
_pBuffer$ = -244					; size = 4
_aBuffer$ = -232					; size = 200
_OldDrawMode$ = -24					; size = 4
_DrawMode$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_c$ = 8							; size = 2
__DispChar PROC						; COMDAT
; Line 35
	push	ebp
	mov	ebp, esp
	sub	esp, 632				; 00000278H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-632]
	mov	ecx, 158				; 0000009eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 47
	lea	eax, DWORD PTR _aBuffer$[ebp]
	mov	DWORD PTR _pBuffer$[ebp], eax
; Line 48
	mov	eax, DWORD PTR _GUI_Context+28
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pXBF_Data$[ebp], ecx
; Line 49
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	jl	SHORT $LN10@DispChar
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	jle	SHORT $LN11@DispChar
$LN10@DispChar:
; Line 50
	jmp	$LN12@DispChar
$LN11@DispChar:
; Line 55
	lea	eax, DWORD PTR _Size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Off$[ebp]
	push	ecx
	movzx	edx, WORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _pXBF_Data$[ebp]
	push	eax
	call	_GUI_XBF__GetOffAndSize
	add	esp, 16					; 00000010H
; Line 56
	cmp	DWORD PTR _Off$[ebp], 0
	jne	SHORT $LN9@DispChar
; Line 57
	jmp	$LN12@DispChar
$LN9@DispChar:
; Line 59
	movsx	eax, WORD PTR _GUI_Context+42
	mov	DWORD PTR _DrawMode$[ebp], eax
; Line 60
	mov	eax, DWORD PTR _DrawMode$[ebp]
	push	eax
	call	_LCD_SetDrawMode
	add	esp, 4
	mov	DWORD PTR _OldDrawMode$[ebp], eax
; Line 61
	movzx	eax, WORD PTR _Size$[ebp]
	cmp	eax, 200				; 000000c8H
	jle	$LN8@DispChar
; Line 65
	mov	esi, esp
	lea	eax, DWORD PTR _aBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	4
	mov	eax, DWORD PTR _Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 66
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _XSize$[ebp], ax
; Line 67
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _BytesPerLine$[ebp], ax
; Line 68
	mov	eax, DWORD PTR _Off$[ebp]
	add	eax, 4
	mov	DWORD PTR _iOff$[ebp], eax
; Line 69
	movzx	ecx, WORD PTR _BytesPerLine$[ebp]
	mov	eax, 196				; 000000c4H
	cdq
	idiv	ecx
	mov	WORD PTR _MaxLines$[ebp], ax
; Line 70
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+24]
	mov	DWORD PTR _RemLines$[ebp], ecx
; Line 71
	movsx	eax, WORD PTR _GUI_Context+34
	mov	DWORD PTR _xPos$[ebp], eax
; Line 72
	movsx	eax, WORD PTR _GUI_Context+36
	mov	DWORD PTR _yPos$[ebp], eax
$LN7@DispChar:
; Line 77
	movzx	eax, WORD PTR _MaxLines$[ebp]
	mov	DWORD PTR _NumLines$[ebp], eax
; Line 78
	mov	eax, DWORD PTR _NumLines$[ebp]
	cmp	eax, DWORD PTR _RemLines$[ebp]
	jle	SHORT $LN4@DispChar
; Line 79
	mov	eax, DWORD PTR _RemLines$[ebp]
	mov	DWORD PTR _NumLines$[ebp], eax
$LN4@DispChar:
; Line 81
	movzx	eax, WORD PTR _BytesPerLine$[ebp]
	imul	eax, DWORD PTR _NumLines$[ebp]
	mov	WORD PTR _NumBytes$[ebp], ax
; Line 82
	mov	esi, esp
	lea	eax, DWORD PTR _aBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	movzx	eax, WORD PTR _NumBytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iOff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pXBF_Data$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 91
	mov	eax, DWORD PTR _LCD_pBkColorIndex
	push	eax
	lea	ecx, DWORD PTR _aBuffer$[ebp]
	push	ecx
	movzx	edx, WORD PTR _BytesPerLine$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+27]
	push	ecx
	mov	edx, DWORD PTR _GUI_Context+28
	movzx	eax, BYTE PTR [edx+26]
	push	eax
	mov	ecx, DWORD PTR _NumLines$[ebp]
	push	ecx
	movzx	edx, WORD PTR _XSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _yPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xPos$[ebp]
	push	ecx
	call	_LCD_DrawBitmap
	add	esp, 40					; 00000028H
; Line 92
	movzx	eax, WORD PTR _NumBytes$[ebp]
	add	eax, DWORD PTR _iOff$[ebp]
	mov	DWORD PTR _iOff$[ebp], eax
; Line 93
	mov	eax, DWORD PTR _RemLines$[ebp]
	sub	eax, DWORD PTR _NumLines$[ebp]
	mov	DWORD PTR _RemLines$[ebp], eax
; Line 94
	mov	eax, DWORD PTR _yPos$[ebp]
	add	eax, DWORD PTR _NumLines$[ebp]
	mov	DWORD PTR _yPos$[ebp], eax
; Line 95
	cmp	DWORD PTR _RemLines$[ebp], 0
	jne	$LN7@DispChar
; Line 96
	jmp	$LN3@DispChar
$LN8@DispChar:
; Line 97
	mov	esi, esp
	lea	eax, DWORD PTR _aBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	movzx	eax, WORD PTR _Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pXBF_Data$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 98
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _XSize$[ebp], ax
; Line 99
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _BytesPerLine$[ebp], ax
; Line 108
	mov	eax, DWORD PTR _LCD_pBkColorIndex
	push	eax
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	push	ecx
	movzx	edx, WORD PTR _BytesPerLine$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+27]
	push	ecx
	mov	edx, DWORD PTR _GUI_Context+28
	movzx	eax, BYTE PTR [edx+26]
	push	eax
	mov	ecx, DWORD PTR _GUI_Context+28
	movzx	edx, BYTE PTR [ecx+24]
	push	edx
	movzx	eax, WORD PTR _XSize$[ebp]
	push	eax
	movsx	ecx, WORD PTR _GUI_Context+36
	push	ecx
	movsx	edx, WORD PTR _GUI_Context+34
	push	edx
	call	_LCD_DrawBitmap
	add	esp, 40					; 00000028H
$LN3@DispChar:
; Line 113
	mov	eax, DWORD PTR _DrawMode$[ebp]
	and	eax, 2
	jne	$LN2@DispChar
; Line 114
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+25]
	mov	edx, DWORD PTR _GUI_Context+28
	movzx	eax, BYTE PTR [edx+24]
	cmp	ecx, eax
	jle	$LN2@DispChar
; Line 115
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+27]
	mov	DWORD PTR _YMag$8367[ebp], ecx
; Line 116
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+25]
	imul	ecx, DWORD PTR _YMag$8367[ebp]
	mov	DWORD PTR _YDist$8368[ebp], ecx
; Line 117
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+24]
	imul	ecx, DWORD PTR _YMag$8367[ebp]
	mov	DWORD PTR _YSize$8369[ebp], ecx
; Line 118
	call	_GUI_GetColor
	mov	DWORD PTR _OldColor$8370[ebp], eax
; Line 119
	call	_GUI_GetBkColor
	push	eax
	call	_GUI_SetColor
	add	esp, 4
; Line 123
	movsx	eax, WORD PTR _GUI_Context+36
	add	eax, DWORD PTR _YDist$8368[ebp]
	push	eax
	movsx	ecx, WORD PTR _GUI_Context+34
	movzx	edx, WORD PTR _XSize$[ebp]
	add	ecx, edx
	push	ecx
	movsx	eax, WORD PTR _GUI_Context+36
	add	eax, DWORD PTR _YSize$8369[ebp]
	push	eax
	movsx	ecx, WORD PTR _GUI_Context+34
	push	ecx
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
; Line 124
	mov	eax, DWORD PTR _OldColor$8370[ebp]
	push	eax
	call	_GUI_SetColor
	add	esp, 4
$LN2@DispChar:
; Line 130
	mov	eax, DWORD PTR _OldDrawMode$[ebp]
	push	eax
	call	_LCD_SetDrawMode
	add	esp, 4
; Line 131
	movzx	eax, WORD PTR _XSize$[ebp]
	movsx	ecx, WORD PTR _GUI_Context+34
	add	ecx, eax
	mov	WORD PTR _GUI_Context+34, cx
$LN12@DispChar:
; Line 132
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@DispChar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 632				; 00000278H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@DispChar:
	DD	4
	DD	$LN18@DispChar
$LN18@DispChar:
	DD	-232					; ffffff18H
	DD	200					; 000000c8H
	DD	$LN14@DispChar
	DD	-244					; ffffff0cH
	DD	4
	DD	$LN15@DispChar
	DD	-268					; fffffef4H
	DD	4
	DD	$LN16@DispChar
	DD	-292					; fffffedcH
	DD	2
	DD	$LN17@DispChar
$LN17@DispChar:
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN16@DispChar:
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN15@DispChar:
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN14@DispChar:
	DB	97					; 00000061H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
__DispChar ENDP
_TEXT	ENDS
END
