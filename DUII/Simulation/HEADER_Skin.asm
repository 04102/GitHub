; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Widget\HEADER_Skin.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

EXTRN	_HEADER__DefaultProps:BYTE
_DATA	SEGMENT
__Skin	DD	FLAT:__Paint
	DD	FLAT:__Create
	DD	FLAT:_HEADER__DefaultProps+16
_DATA	ENDS
EXTRN	_WM_SetUserClipRect:PROC
EXTRN	_GUI_ARRAY_GetpItemLocked:PROC
EXTRN	_WIDGET__GetClientRect:PROC
EXTRN	_GUI_ARRAY_GetNumItems:PROC
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_HEADER_LockH:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_UninitUse:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\widget\header_skin.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __Paint
_TEXT	SEGMENT
tv86 = -448						; size = 4
$T10626 = -437						; size = 1
_DirIndicatorColumn$ = -236				; size = 4
_xPos$ = -224						; size = 4
_NumItems$ = -212					; size = 4
_i$ = -200						; size = 4
_Width$ = -188						; size = 4
_ScrollPos$ = -176					; size = 4
_Fixed$ = -164						; size = 4
_hDrawObj$ = -152					; size = 4
_pColumn$ = -140					; size = 4
_pText$ = -128						; size = 4
_pWidget$ = -116					; size = 4
_ItemInfo$ = -104					; size = 32
_pfDrawSkin$ = -64					; size = 4
_RectClient$ = -52					; size = 8
_Rect$ = -36						; size = 8
_Columns$ = -20						; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__Paint	PROC						; COMDAT
; Line 39
	push	ebp
	mov	ebp, esp
	sub	esp, 448				; 000001c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-448]
	mov	ecx, 112				; 00000070H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T10626[ebp], 0
; Line 54
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 55
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _pfDrawSkin$[ebp], ecx
; Line 56
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR _pWidget$[ebp], eax
; Line 57
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _Columns$[ebp], ecx
; Line 58
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR _Fixed$[ebp], ecx
; Line 59
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _ScrollPos$[ebp], ecx
; Line 60
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _DirIndicatorColumn$[ebp], ecx
; Line 61
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 62
	mov	eax, DWORD PTR _Columns$[ebp]
	push	eax
	call	_GUI_ARRAY_GetNumItems
	add	esp, 4
	mov	DWORD PTR _NumItems$[ebp], eax
; Line 66
	lea	eax, DWORD PTR _RectClient$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pWidget$[ebp]
	push	ecx
	call	_WIDGET__GetClientRect
	add	esp, 8
; Line 70
	mov	eax, DWORD PTR _hObj$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp], eax
; Line 74
	mov	eax, DWORD PTR _ScrollPos$[ebp]
	neg	eax
	mov	DWORD PTR _xPos$[ebp], eax
; Line 75
	movsx	eax, WORD PTR _RectClient$[ebp+2]
	mov	DWORD PTR _ItemInfo$[ebp+16], eax
	mov	cx, WORD PTR _ItemInfo$[ebp+16]
	mov	WORD PTR _Rect$[ebp+2], cx
; Line 76
	movsx	eax, WORD PTR _RectClient$[ebp+6]
	mov	DWORD PTR _ItemInfo$[ebp+24], eax
	mov	cx, WORD PTR _ItemInfo$[ebp+24]
	mov	WORD PTR _Rect$[ebp+6], cx
; Line 77
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@Paint
$LN6@Paint:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@Paint:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _NumItems$[ebp]
	jge	$LN5@Paint
; Line 81
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Columns$[ebp]
	push	ecx
	call	_GUI_ARRAY_GetpItemLocked
	add	esp, 8
	mov	DWORD PTR _pColumn$[ebp], eax
; Line 82
	mov	eax, DWORD PTR _pColumn$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Width$[ebp], ecx
; Line 83
	mov	eax, DWORD PTR _pColumn$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _hDrawObj$[ebp], ecx
; Line 84
	mov	eax, DWORD PTR _pColumn$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pText$[ebp], eax
; Line 85
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pColumn$[ebp], 0
; Line 89
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _Fixed$[ebp]
	jge	SHORT $LN10@Paint
	mov	ecx, DWORD PTR _ScrollPos$[ebp]
	mov	DWORD PTR tv86[ebp], ecx
	jmp	SHORT $LN11@Paint
$LN10@Paint:
	mov	DWORD PTR tv86[ebp], 0
$LN11@Paint:
	mov	edx, DWORD PTR _xPos$[ebp]
	add	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _xPos$[ebp], edx
; Line 90
	mov	eax, DWORD PTR _xPos$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp+12], eax
	mov	cx, WORD PTR _ItemInfo$[ebp+12]
	mov	WORD PTR _Rect$[ebp], cx
; Line 91
	mov	eax, DWORD PTR _Width$[ebp]
	mov	ecx, DWORD PTR _ItemInfo$[ebp+12]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	BYTE PTR $T10626[ebp], 1
	mov	DWORD PTR _ItemInfo$[ebp+20], edx
	mov	ax, WORD PTR _ItemInfo$[ebp+20]
	mov	WORD PTR _Rect$[ebp+4], ax
; Line 92
	lea	eax, DWORD PTR _Rect$[ebp]
	push	eax
	call	_WM_SetUserClipRect
	add	esp, 4
; Line 93
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp+8], eax
; Line 97
	mov	DWORD PTR _ItemInfo$[ebp+4], 3
; Line 98
	mov	BYTE PTR $T10626[ebp], 1
	mov	esi, esp
	lea	eax, DWORD PTR _ItemInfo$[ebp]
	push	eax
	call	DWORD PTR _pfDrawSkin$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 102
	cmp	DWORD PTR _hDrawObj$[ebp], 0
	je	SHORT $LN4@Paint
; Line 103
	mov	DWORD PTR _ItemInfo$[ebp+4], 4
; Line 104
	mov	BYTE PTR $T10626[ebp], 1
	mov	esi, esp
	lea	eax, DWORD PTR _ItemInfo$[ebp]
	push	eax
	call	DWORD PTR _pfDrawSkin$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@Paint:
; Line 109
	cmp	DWORD PTR _pText$[ebp], 0
	je	SHORT $LN3@Paint
; Line 110
	mov	DWORD PTR _ItemInfo$[ebp+4], 16		; 00000010H
; Line 111
	mov	BYTE PTR $T10626[ebp], 1
	mov	esi, esp
	lea	eax, DWORD PTR _ItemInfo$[ebp]
	push	eax
	call	DWORD PTR _pfDrawSkin$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Paint:
; Line 116
	mov	eax, DWORD PTR _DirIndicatorColumn$[ebp]
	cmp	eax, DWORD PTR _i$[ebp]
	jne	SHORT $LN2@Paint
; Line 117
	mov	DWORD PTR _ItemInfo$[ebp+4], 2
; Line 118
	mov	BYTE PTR $T10626[ebp], 1
	mov	esi, esp
	lea	eax, DWORD PTR _ItemInfo$[ebp]
	push	eax
	call	DWORD PTR _pfDrawSkin$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Paint:
; Line 123
	push	0
	call	_WM_SetUserClipRect
	add	esp, 4
; Line 127
	cmp	BYTE PTR $T10626[ebp], 0
	jne	SHORT $LN12@Paint
	push	OFFSET $LN13@Paint
	call	__RTC_UninitUse
	add	esp, 4
$LN12@Paint:
	mov	eax, DWORD PTR _ItemInfo$[ebp+20]
	sub	eax, DWORD PTR _ItemInfo$[ebp+12]
	mov	ecx, DWORD PTR _xPos$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _xPos$[ebp], edx
; Line 128
	jmp	$LN6@Paint
$LN5@Paint:
; Line 132
	cmp	BYTE PTR $T10626[ebp], 0
	jne	SHORT $LN14@Paint
	push	OFFSET $LN13@Paint
	call	__RTC_UninitUse
	add	esp, 4
$LN14@Paint:
	movsx	eax, WORD PTR _RectClient$[ebp+4]
	cmp	DWORD PTR _ItemInfo$[ebp+20], eax
	jge	SHORT $LN8@Paint
; Line 133
	mov	eax, DWORD PTR _xPos$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp+12], eax
	mov	cx, WORD PTR _ItemInfo$[ebp+12]
	mov	WORD PTR _Rect$[ebp], cx
; Line 134
	movsx	eax, WORD PTR _RectClient$[ebp+4]
	mov	BYTE PTR $T10626[ebp], 1
	mov	DWORD PTR _ItemInfo$[ebp+20], eax
	mov	cx, WORD PTR _ItemInfo$[ebp+20]
	mov	WORD PTR _Rect$[ebp+4], cx
; Line 135
	lea	eax, DWORD PTR _Rect$[ebp]
	push	eax
	call	_WM_SetUserClipRect
	add	esp, 4
; Line 136
	mov	DWORD PTR _ItemInfo$[ebp+4], 10		; 0000000aH
; Line 137
	mov	BYTE PTR $T10626[ebp], 1
	mov	esi, esp
	lea	eax, DWORD PTR _ItemInfo$[ebp]
	push	eax
	call	DWORD PTR _pfDrawSkin$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 138
	push	0
	call	_WM_SetUserClipRect
	add	esp, 4
$LN8@Paint:
; Line 140
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@Paint
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 448				; 000001c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@Paint:
	DD	3
	DD	$LN17@Paint
$LN17@Paint:
	DD	-104					; ffffff98H
	DD	32					; 00000020H
	DD	$LN13@Paint
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN15@Paint
	DD	-52					; ffffffccH
	DD	8
	DD	$LN16@Paint
$LN16@Paint:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN15@Paint:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN13@Paint:
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
__Paint	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Create
_TEXT	SEGMENT
_ItemInfo$ = -60					; size = 32
_pSkinPrivate$ = -20					; size = 4
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
__Create PROC						; COMDAT
; Line 146
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 154
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 155
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _pSkinPrivate$[ebp], edx
; Line 156
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 160
	mov	DWORD PTR _ItemInfo$[ebp+4], 0
; Line 161
	mov	eax, DWORD PTR _hObj$[ebp]
	mov	DWORD PTR _ItemInfo$[ebp], eax
; Line 162
	mov	esi, esp
	lea	eax, DWORD PTR _ItemInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSkinPrivate$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 163
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Create
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Create:
	DD	1
	DD	$LN4@Create
$LN4@Create:
	DD	-60					; ffffffc4H
	DD	32					; 00000020H
	DD	$LN3@Create
$LN3@Create:
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
__Create ENDP
_TEXT	ENDS
PUBLIC	_HEADER_SetSkin
EXTRN	_WM_InvalidateWindow:PROC
EXTRN	_WM_SetHasTrans:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _HEADER_SetSkin
_TEXT	SEGMENT
_pObj$ = -8						; size = 4
_hObj$ = 8						; size = 4
_pfDrawSkin$ = 12					; size = 4
_HEADER_SetSkin PROC					; COMDAT
; Line 191
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 195
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_HEADER_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$[ebp], eax
; Line 199
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	DWORD PTR [eax+76], OFFSET __Skin
; Line 203
	mov	eax, DWORD PTR _pObj$[ebp]
	mov	ecx, DWORD PTR _pfDrawSkin$[ebp]
	mov	DWORD PTR [eax+72], ecx
; Line 204
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$[ebp], 0
; Line 208
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_SetHasTrans
	add	esp, 4
; Line 209
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_InvalidateWindow
	add	esp, 4
; Line 211
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_HEADER_SetSkin ENDP
_TEXT	ENDS
PUBLIC	_HEADER_SetDefaultSkin
EXTRN	_HEADER__pSkinDefault:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _HEADER_SetDefaultSkin
_TEXT	SEGMENT
_pfDrawSkin$ = 8					; size = 4
_HEADER_SetDefaultSkin PROC				; COMDAT
; Line 217
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 218
	mov	DWORD PTR _HEADER__pSkinDefault, OFFSET __Skin
; Line 219
	mov	eax, DWORD PTR _pfDrawSkin$[ebp]
	mov	DWORD PTR _HEADER__DefaultProps+16, eax
; Line 220
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_HEADER_SetDefaultSkin ENDP
_TEXT	ENDS
END
