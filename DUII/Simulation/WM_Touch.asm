; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\WM\WM_Touch.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_WM__aCHWinLast:QWORD
COMM	_WM__aCHWinMouseOver:QWORD
COMM	_WM__aCHWinModal:QWORD
_DATA	ENDS
PUBLIC	_WM__IsInModalArea
EXTRN	_WM__IsAncestor:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\wm\wm_touch.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _WM__IsInModalArea
_TEXT	SEGMENT
_hWin$ = 8						; size = 4
_WM__IsInModalArea PROC					; COMDAT
; Line 77
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 78
	cmp	DWORD PTR _WM__aCHWinModal+4, 0
	je	SHORT $LN1@WM__IsInMo
	mov	eax, DWORD PTR _WM__aCHWinModal+4
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	_WM__IsAncestor
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@WM__IsInMo
	mov	eax, DWORD PTR _WM__aCHWinModal+4
	cmp	DWORD PTR _hWin$[ebp], eax
	jne	SHORT $LN2@WM__IsInMo
$LN1@WM__IsInMo:
; Line 79
	mov	eax, 1
	jmp	SHORT $LN3@WM__IsInMo
$LN2@WM__IsInMo:
; Line 81
	xor	eax, eax
$LN3@WM__IsInMo:
; Line 82
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__IsInModalArea ENDP
_TEXT	ENDS
PUBLIC	_WM__SendPIDMessage
EXTRN	_WM__SendMessageIfEnabled:PROC
EXTRN	_WM_GetParent:PROC
EXTRN	_WM_IsWindow:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__SendPIDMessage
_TEXT	SEGMENT
_Msg$ = -32						; size = 16
_iWin$ = -8						; size = 4
_hWin$ = 8						; size = 4
_pMsg$ = 12						; size = 4
_WM__SendPIDMessage PROC				; COMDAT
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 98
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Msg$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _Msg$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _Msg$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _Msg$[ebp+12], edx
; Line 103
	mov	eax, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR _Msg$[ebp+8], eax
; Line 104
	mov	DWORD PTR _Msg$[ebp], 13		; 0000000dH
; Line 105
	mov	eax, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR _iWin$[ebp], eax
$LN3@WM__SendPI:
; Line 106
	mov	eax, DWORD PTR _iWin$[ebp]
	push	eax
	call	_WM_IsWindow
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@WM__SendPI
; Line 107
	mov	eax, DWORD PTR _iWin$[ebp]
	push	eax
	call	_WM_GetParent
	add	esp, 4
	mov	DWORD PTR _iWin$[ebp], eax
; Line 108
	cmp	DWORD PTR _iWin$[ebp], 0
	je	SHORT $LN1@WM__SendPI
; Line 109
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	DWORD PTR _Msg$[ebp+12], eax
; Line 110
	lea	eax, DWORD PTR _Msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iWin$[ebp]
	push	ecx
	call	_WM__SendMessageIfEnabled
	add	esp, 8
$LN1@WM__SendPI:
; Line 112
	jmp	SHORT $LN3@WM__SendPI
$LN2@WM__SendPI:
; Line 114
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	_WM__SendMessageIfEnabled
	add	esp, 8
; Line 134
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@WM__SendPI
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@WM__SendPI:
	DD	1
	DD	$LN7@WM__SendPI
$LN7@WM__SendPI:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN6@WM__SendPI
$LN6@WM__SendPI:
	DB	77					; 0000004dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
_WM__SendPIDMessage ENDP
_TEXT	ENDS
PUBLIC	_WM__SendTouchMessage
EXTRN	_GUI_ALLOC_h2p:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__SendTouchMessage
_TEXT	SEGMENT
_pWin$9461 = -20					; size = 4
_pState$ = -8						; size = 4
_hWin$ = 8						; size = 4
_pMsg$ = 12						; size = 4
_WM__SendTouchMessage PROC				; COMDAT
; Line 140
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 142
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pState$[ebp], ecx
; Line 143
	cmp	DWORD PTR _pState$[ebp], 0
	je	SHORT $LN1@WM__SendTo
; Line 145
	mov	eax, DWORD PTR _hWin$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$9461[ebp], eax
; Line 146
	mov	eax, DWORD PTR _pWin$9461[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _pState$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, ecx
	mov	ecx, DWORD PTR _pState$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 147
	mov	eax, DWORD PTR _pWin$9461[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _pState$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, ecx
	mov	ecx, DWORD PTR _pState$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@WM__SendTo:
; Line 149
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWin$[ebp]
	push	ecx
	call	_WM__SendPIDMessage
	add	esp, 8
; Line 150
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__SendTouchMessage ENDP
_TEXT	ENDS
PUBLIC	_WM__SetLastTouched
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _WM__SetLastTouched
_TEXT	SEGMENT
_hWin$ = 8						; size = 4
_WM__SetLastTouched PROC				; COMDAT
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 158
	mov	eax, DWORD PTR _hWin$[ebp]
	mov	DWORD PTR _WM__aCHWinLast+4, eax
	mov	ecx, DWORD PTR _WM__aCHWinLast+4
	mov	DWORD PTR _WM__aCHWinMouseOver+4, ecx
; Line 162
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_WM__SetLastTouched ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_WM_HandlePID
EXTRN	_WM__RemoveCriticalHandle:PROC
EXTRN	_WM_PID__SetPrevState:PROC
EXTRN	_WM_ReleaseCapture:PROC
EXTRN	_WM__CaptureReleaseAuto:BYTE
EXTRN	_WM__IsEnabled:PROC
EXTRN	_GUI_CURSOR_SetPositionEx:PROC
EXTRN	_GUI_GetLayerPosEx:PROC
EXTRN	_WM__AddCriticalHandle:PROC
EXTRN	_GUI_OrgY:WORD
EXTRN	_GUI_OrgX:WORD
EXTRN	_GUI_PID_GetState:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
__aStateLast DB	0cH DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT _WM_HandlePID
_TEXT	SEGMENT
_pWin$9492 = -204					; size = 4
_Info$9491 = -192					; size = 12
_hWinLast$9490 = -172					; size = 4
_hWinOld$9489 = -160					; size = 4
_PID_StateOld$9488 = -148				; size = 12
_hWin$ = -128						; size = 4
_StateNew$ = -116					; size = 12
_State$ = -96						; size = 12
_CHWin$ = -76						; size = 8
_Msg$ = -60						; size = 16
_yPosLayer$ = -36					; size = 4
_xPosLayer$ = -24					; size = 4
_r$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_WM_HandlePID PROC					; COMDAT
; Line 181
	push	ebp
	mov	ebp, esp
	sub	esp, 400				; 00000190H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-400]
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 182
	mov	DWORD PTR _r$[ebp], 0
; Line 186
	mov	DWORD PTR _State$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _State$[ebp+4], eax
	mov	DWORD PTR _State$[ebp+8], eax
; Line 189
	lea	eax, DWORD PTR _StateNew$[ebp]
	push	eax
	call	_GUI_PID_GetState
	add	esp, 4
; Line 190
	cmp	DWORD PTR _StateNew$[ebp], -1
	jne	SHORT $LN28@WM_HandleP
	cmp	DWORD PTR _StateNew$[ebp+4], -1
	jne	SHORT $LN28@WM_HandleP
	movzx	eax, BYTE PTR __aStateLast+8
	movzx	ecx, BYTE PTR _StateNew$[ebp+8]
	cmp	eax, ecx
	jne	SHORT $LN28@WM_HandleP
; Line 191
	mov	eax, DWORD PTR _r$[ebp]
	jmp	$LN29@WM_HandleP
$LN28@WM_HandleP:
; Line 200
	cmp	DWORD PTR _StateNew$[ebp], 0
	jl	SHORT $LN27@WM_HandleP
	cmp	DWORD PTR _StateNew$[ebp+4], 0
	jl	SHORT $LN27@WM_HandleP
; Line 201
	movsx	eax, WORD PTR _GUI_OrgX
	add	eax, DWORD PTR _StateNew$[ebp]
	mov	DWORD PTR _StateNew$[ebp], eax
; Line 202
	movsx	eax, WORD PTR _GUI_OrgY
	add	eax, DWORD PTR _StateNew$[ebp+4]
	mov	DWORD PTR _StateNew$[ebp+4], eax
	jmp	SHORT $LN26@WM_HandleP
$LN27@WM_HandleP:
; Line 203
	cmp	DWORD PTR _StateNew$[ebp], -1
	jne	SHORT $LN26@WM_HandleP
	cmp	DWORD PTR _StateNew$[ebp+4], -1
	jne	SHORT $LN26@WM_HandleP
; Line 204
	mov	eax, DWORD PTR __aStateLast
	mov	DWORD PTR _StateNew$[ebp], eax
; Line 205
	mov	eax, DWORD PTR __aStateLast+4
	mov	DWORD PTR _StateNew$[ebp+4], eax
$LN26@WM_HandleP:
; Line 207
	lea	eax, DWORD PTR _CHWin$[ebp]
	push	eax
	call	_WM__AddCriticalHandle
	add	esp, 4
; Line 213
	lea	eax, DWORD PTR _yPosLayer$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xPosLayer$[ebp]
	push	ecx
	push	0
	call	_GUI_GetLayerPosEx
	add	esp, 12					; 0000000cH
; Line 214
	mov	eax, DWORD PTR _StateNew$[ebp]
	sub	eax, DWORD PTR _xPosLayer$[ebp]
	mov	DWORD PTR _StateNew$[ebp], eax
; Line 215
	mov	eax, DWORD PTR _StateNew$[ebp+4]
	sub	eax, DWORD PTR _yPosLayer$[ebp]
	mov	DWORD PTR _StateNew$[ebp+4], eax
; Line 219
	mov	eax, DWORD PTR __aStateLast
	cmp	eax, DWORD PTR _StateNew$[ebp]
	jne	SHORT $LN23@WM_HandleP
	mov	eax, DWORD PTR __aStateLast+4
	cmp	eax, DWORD PTR _StateNew$[ebp+4]
	jne	SHORT $LN23@WM_HandleP
	movzx	eax, BYTE PTR __aStateLast+8
	movzx	ecx, BYTE PTR _StateNew$[ebp+8]
	cmp	eax, ecx
	je	$LN24@WM_HandleP
$LN23@WM_HandleP:
; Line 221
	movzx	eax, BYTE PTR _StateNew$[ebp+9]
	push	eax
	mov	ecx, DWORD PTR _StateNew$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _StateNew$[ebp]
	push	edx
	call	_GUI_CURSOR_SetPositionEx
	add	esp, 12					; 0000000cH
; Line 228
	lea	eax, DWORD PTR _StateNew$[ebp]
	push	eax
	call	__Screen2Win
	add	esp, 4
	mov	DWORD PTR _CHWin$[ebp+4], eax
; Line 231
	mov	eax, DWORD PTR _WM__aCHWinMouseOver+4
	mov	DWORD PTR _hWin$[ebp], eax
; Line 232
	cmp	DWORD PTR _hWin$[ebp], 0
	je	SHORT $LN22@WM_HandleP
	mov	eax, DWORD PTR _CHWin$[ebp+4]
	cmp	DWORD PTR _hWin$[ebp], eax
	je	SHORT $LN22@WM_HandleP
; Line 233
	mov	eax, DWORD PTR _WM__aCHWinMouseOver+4
	push	eax
	call	_WM__IsInModalArea
	add	esp, 4
	test	eax, eax
	je	SHORT $LN22@WM_HandleP
; Line 235
	mov	eax, DWORD PTR _WM__aCHWinMouseOver+4
	push	eax
	call	_WM__IsEnabled
	add	esp, 4
	test	eax, eax
	je	SHORT $LN22@WM_HandleP
; Line 236
	mov	eax, DWORD PTR _StateNew$[ebp]
	mov	DWORD PTR _State$[ebp], eax
	mov	ecx, DWORD PTR _StateNew$[ebp+4]
	mov	DWORD PTR _State$[ebp+4], ecx
	mov	edx, DWORD PTR _StateNew$[ebp+8]
	mov	DWORD PTR _State$[ebp+8], edx
; Line 237
	mov	DWORD PTR _Msg$[ebp], 18		; 00000012H
; Line 238
	lea	eax, DWORD PTR _State$[ebp]
	mov	DWORD PTR _Msg$[ebp+12], eax
; Line 239
	lea	eax, DWORD PTR _Msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _WM__aCHWinMouseOver+4
	push	ecx
	call	_WM__SendTouchMessage
	add	esp, 8
; Line 240
	mov	DWORD PTR _WM__aCHWinMouseOver+4, 0
$LN22@WM_HandleP:
; Line 245
	mov	eax, DWORD PTR _CHWin$[ebp+4]
	push	eax
	call	_WM__IsInModalArea
	add	esp, 4
	test	eax, eax
	je	$LN19@WM_HandleP
; Line 247
	mov	eax, DWORD PTR _CHWin$[ebp+4]
	mov	DWORD PTR _WM__aCHWinMouseOver+4, eax
; Line 252
	movzx	eax, BYTE PTR __aStateLast+8
	movzx	ecx, BYTE PTR _StateNew$[ebp+8]
	cmp	eax, ecx
	je	$LN18@WM_HandleP
	cmp	DWORD PTR _CHWin$[ebp+4], 0
	je	$LN18@WM_HandleP
; Line 257
	mov	eax, DWORD PTR _CHWin$[ebp+4]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pWin$9492[ebp], eax
; Line 258
	mov	al, BYTE PTR _StateNew$[ebp+8]
	mov	BYTE PTR _Info$9491[ebp+8], al
; Line 259
	mov	al, BYTE PTR __aStateLast+8
	mov	BYTE PTR _Info$9491[ebp+9], al
; Line 260
	mov	eax, DWORD PTR _pWin$9492[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _StateNew$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _Info$9491[ebp], edx
; Line 261
	mov	eax, DWORD PTR _pWin$9492[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _StateNew$[ebp+4]
	sub	edx, ecx
	mov	DWORD PTR _Info$9491[ebp+4], edx
; Line 262
	lea	eax, DWORD PTR _Info$9491[ebp]
	mov	DWORD PTR _Msg$[ebp+12], eax
; Line 263
	mov	DWORD PTR _Msg$[ebp], 17		; 00000011H
; Line 267
	mov	eax, DWORD PTR __aStateLast
	mov	DWORD PTR _PID_StateOld$9488[ebp], eax
	mov	ecx, DWORD PTR __aStateLast+4
	mov	DWORD PTR _PID_StateOld$9488[ebp+4], ecx
	mov	edx, DWORD PTR __aStateLast+8
	mov	DWORD PTR _PID_StateOld$9488[ebp+8], edx
; Line 272
	mov	al, BYTE PTR _StateNew$[ebp+8]
	mov	BYTE PTR __aStateLast+8, al
; Line 273
	movzx	eax, BYTE PTR _State$[ebp+8]
	test	eax, eax
	je	SHORT $LN17@WM_HandleP
; Line 274
	mov	eax, DWORD PTR _WM__aCHWinLast+4
	mov	DWORD PTR _hWinOld$9489[ebp], eax
; Line 275
	mov	eax, DWORD PTR _CHWin$[ebp+4]
	mov	DWORD PTR _WM__aCHWinLast+4, eax
; Line 276
	jmp	SHORT $LN16@WM_HandleP
$LN17@WM_HandleP:
; Line 277
	mov	DWORD PTR _hWinOld$9489[ebp], 0
$LN16@WM_HandleP:
; Line 279
	mov	eax, DWORD PTR _WM__aCHWinLast+4
	mov	DWORD PTR _hWinLast$9490[ebp], eax
; Line 280
	lea	eax, DWORD PTR _Msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _CHWin$[ebp+4]
	push	ecx
	call	_WM__SendMessageIfEnabled
	add	esp, 8
; Line 281
	mov	eax, DWORD PTR _WM__aCHWinLast+4
	cmp	DWORD PTR _hWinLast$9490[ebp], eax
	je	SHORT $LN15@WM_HandleP
; Line 282
	mov	eax, DWORD PTR _WM__aCHWinLast+4
	mov	DWORD PTR _CHWin$[ebp+4], eax
$LN15@WM_HandleP:
; Line 285
	mov	eax, DWORD PTR _PID_StateOld$9488[ebp]
	mov	DWORD PTR __aStateLast, eax
	mov	ecx, DWORD PTR _PID_StateOld$9488[ebp+4]
	mov	DWORD PTR __aStateLast+4, ecx
	mov	edx, DWORD PTR _PID_StateOld$9488[ebp+8]
	mov	DWORD PTR __aStateLast+8, edx
; Line 286
	cmp	DWORD PTR _hWinOld$9489[ebp], 0
	je	SHORT $LN18@WM_HandleP
; Line 290
	mov	eax, DWORD PTR _hWinOld$9489[ebp]
	push	eax
	call	_WM_IsWindow
	add	esp, 4
	test	eax, eax
	je	SHORT $LN18@WM_HandleP
; Line 291
	mov	eax, DWORD PTR _hWinOld$9489[ebp]
	mov	DWORD PTR _WM__aCHWinLast+4, eax
$LN18@WM_HandleP:
; Line 299
	movzx	eax, BYTE PTR __aStateLast+8
	movzx	ecx, BYTE PTR _StateNew$[ebp+8]
	or	eax, ecx
	je	$LN12@WM_HandleP
; Line 300
	mov	DWORD PTR _Msg$[ebp], 12		; 0000000cH
; Line 301
	mov	DWORD PTR _r$[ebp], 1
; Line 308
	mov	eax, DWORD PTR _WM__aCHWinLast+4
	mov	DWORD PTR _hWin$[ebp], eax
; Line 309
	mov	eax, DWORD PTR _CHWin$[ebp+4]
	cmp	DWORD PTR _hWin$[ebp], eax
	je	SHORT $LN11@WM_HandleP
; Line 310
	cmp	DWORD PTR _WM__aCHWinLast+4, 0
	je	SHORT $LN11@WM_HandleP
; Line 311
	movzx	eax, BYTE PTR _StateNew$[ebp+8]
	test	eax, eax
	je	SHORT $LN9@WM_HandleP
; Line 315
	mov	DWORD PTR _Msg$[ebp+12], 0
; Line 316
	jmp	SHORT $LN8@WM_HandleP
$LN9@WM_HandleP:
; Line 320
	mov	eax, DWORD PTR __aStateLast
	mov	DWORD PTR _State$[ebp], eax
; Line 321
	mov	eax, DWORD PTR __aStateLast+4
	mov	DWORD PTR _State$[ebp+4], eax
; Line 322
	mov	BYTE PTR _State$[ebp+8], 0
; Line 323
	lea	eax, DWORD PTR _State$[ebp]
	mov	DWORD PTR _Msg$[ebp+12], eax
$LN8@WM_HandleP:
; Line 326
	lea	eax, DWORD PTR _Msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _WM__aCHWinLast+4
	push	ecx
	call	_WM__SendTouchMessage
	add	esp, 8
; Line 327
	mov	DWORD PTR _WM__aCHWinLast+4, 0
$LN11@WM_HandleP:
; Line 333
	mov	al, BYTE PTR _StateNew$[ebp+8]
	mov	BYTE PTR __aStateLast+8, al
; Line 335
	cmp	DWORD PTR _CHWin$[ebp+4], 0
	je	SHORT $LN7@WM_HandleP
; Line 337
	mov	eax, DWORD PTR _StateNew$[ebp]
	mov	DWORD PTR _State$[ebp], eax
	mov	ecx, DWORD PTR _StateNew$[ebp+4]
	mov	DWORD PTR _State$[ebp+4], ecx
	mov	edx, DWORD PTR _StateNew$[ebp+8]
	mov	DWORD PTR _State$[ebp+8], edx
; Line 339
	movzx	eax, BYTE PTR _State$[ebp+8]
	test	eax, eax
	je	SHORT $LN6@WM_HandleP
; Line 340
	mov	eax, DWORD PTR _CHWin$[ebp+4]
	mov	DWORD PTR _WM__aCHWinLast+4, eax
; Line 341
	jmp	SHORT $LN5@WM_HandleP
$LN6@WM_HandleP:
; Line 343
	movzx	eax, BYTE PTR _WM__CaptureReleaseAuto
	test	eax, eax
	je	SHORT $LN4@WM_HandleP
; Line 344
	call	_WM_ReleaseCapture
$LN4@WM_HandleP:
; Line 346
	mov	DWORD PTR _WM__aCHWinLast+4, 0
$LN5@WM_HandleP:
; Line 348
	lea	eax, DWORD PTR _State$[ebp]
	mov	DWORD PTR _Msg$[ebp+12], eax
; Line 349
	lea	eax, DWORD PTR _Msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _CHWin$[ebp+4]
	push	ecx
	call	_WM__SendTouchMessage
	add	esp, 8
$LN7@WM_HandleP:
; Line 356
	jmp	SHORT $LN19@WM_HandleP
$LN12@WM_HandleP:
; Line 358
	cmp	DWORD PTR _CHWin$[ebp+4], 0
	je	SHORT $LN19@WM_HandleP
; Line 360
	mov	eax, DWORD PTR _CHWin$[ebp+4]
	push	eax
	call	_WM__IsEnabled
	add	esp, 4
	test	eax, eax
	je	SHORT $LN19@WM_HandleP
; Line 361
	mov	eax, DWORD PTR _StateNew$[ebp]
	mov	DWORD PTR _State$[ebp], eax
	mov	ecx, DWORD PTR _StateNew$[ebp+4]
	mov	DWORD PTR _State$[ebp+4], ecx
	mov	edx, DWORD PTR _StateNew$[ebp+8]
	mov	DWORD PTR _State$[ebp+8], edx
; Line 362
	mov	DWORD PTR _Msg$[ebp], 16		; 00000010H
; Line 363
	lea	eax, DWORD PTR _State$[ebp]
	mov	DWORD PTR _Msg$[ebp+12], eax
; Line 364
	lea	eax, DWORD PTR _Msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _CHWin$[ebp+4]
	push	ecx
	call	_WM__SendTouchMessage
	add	esp, 8
$LN19@WM_HandleP:
; Line 371
	mov	eax, DWORD PTR _StateNew$[ebp]
	mov	DWORD PTR __aStateLast, eax
	mov	ecx, DWORD PTR _StateNew$[ebp+4]
	mov	DWORD PTR __aStateLast+4, ecx
	mov	edx, DWORD PTR _StateNew$[ebp+8]
	mov	DWORD PTR __aStateLast+8, edx
; Line 372
	push	0
	lea	eax, DWORD PTR _StateNew$[ebp]
	push	eax
	call	_WM_PID__SetPrevState
	add	esp, 8
$LN24@WM_HandleP:
; Line 374
	lea	eax, DWORD PTR _CHWin$[ebp]
	push	eax
	call	_WM__RemoveCriticalHandle
	add	esp, 4
; Line 376
	mov	eax, DWORD PTR _r$[ebp]
$LN29@WM_HandleP:
; Line 377
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN40@WM_HandleP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 400				; 00000190H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN40@WM_HandleP:
	DD	8
	DD	$LN39@WM_HandleP
$LN39@WM_HandleP:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN31@WM_HandleP
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN32@WM_HandleP
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN33@WM_HandleP
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN34@WM_HandleP
	DD	-96					; ffffffa0H
	DD	12					; 0000000cH
	DD	$LN35@WM_HandleP
	DD	-116					; ffffff8cH
	DD	12					; 0000000cH
	DD	$LN36@WM_HandleP
	DD	-148					; ffffff6cH
	DD	12					; 0000000cH
	DD	$LN37@WM_HandleP
	DD	-192					; ffffff40H
	DD	12					; 0000000cH
	DD	$LN38@WM_HandleP
$LN38@WM_HandleP:
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN37@WM_HandleP:
	DB	80					; 00000050H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	95					; 0000005fH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	79					; 0000004fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
$LN36@WM_HandleP:
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
$LN35@WM_HandleP:
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN34@WM_HandleP:
	DB	67					; 00000043H
	DB	72					; 00000048H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN33@WM_HandleP:
	DB	77					; 0000004dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
$LN32@WM_HandleP:
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN31@WM_HandleP:
	DB	120					; 00000078H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_WM_HandlePID ENDP
_TEXT	ENDS
EXTRN	_WM_Screen2hWin:PROC
EXTRN	_WM__ahCapture:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Screen2Win
_TEXT	SEGMENT
_pState$ = 8						; size = 4
__Screen2Win PROC					; COMDAT
; Line 60
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 61
	cmp	DWORD PTR _WM__ahCapture, 0
	jne	SHORT $LN1@Screen2Win
; Line 62
	mov	eax, DWORD PTR _pState$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pState$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_WM_Screen2hWin
	add	esp, 8
	jmp	SHORT $LN2@Screen2Win
$LN1@Screen2Win:
; Line 64
	mov	eax, DWORD PTR _WM__ahCapture
$LN2@Screen2Win:
; Line 65
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Screen2Win ENDP
_TEXT	ENDS
END
