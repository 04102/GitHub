; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\DisplayDriver\GUIDRV_Template.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUIDRV_Template_API
CONST	SEGMENT
_GUIDRV_Template_API DD 00H
	DD	FLAT:__DrawBitmap
	DD	FLAT:__DrawHLine
	DD	FLAT:__DrawVLine
	DD	FLAT:__FillRect
	DD	FLAT:__GetPixelIndex
	DD	FLAT:__SetPixelIndex
	DD	FLAT:__XorPixel
	DD	FLAT:__SetOrg
	DD	FLAT:__GetDevFunc
	DD	FLAT:__GetDevProp
	DD	FLAT:__GetDevData
	DD	FLAT:__GetRect
CONST	ENDS
EXTRN	_LCDSIM_SetPixelIndex:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\displaydriver\guidrv_template.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __SetPixelIndex
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_PixelIndex$ = 20					; size = 4
__SetPixelIndex PROC					; COMDAT
; Line 109
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 111
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _PixelIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_LCDSIM_SetPixelIndex
	add	esp, 16					; 00000010H
; Line 141
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetPixelIndex ENDP
_TEXT	ENDS
EXTRN	_LCDSIM_GetPixelIndex:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetPixelIndex
_TEXT	SEGMENT
_PixelIndex$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__GetPixelIndex PROC					; COMDAT
; Line 152
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 155
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_LCDSIM_GetPixelIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _PixelIndex$[ebp], eax
; Line 185
	mov	eax, DWORD PTR _PixelIndex$[ebp]
; Line 186
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetPixelIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __XorPixel
_TEXT	SEGMENT
_IndexMask$ = -20					; size = 4
_PixelIndex$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__XorPixel PROC						; COMDAT
; Line 192
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 196
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__GetPixelIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _PixelIndex$[ebp], eax
; Line 197
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$[ebp], eax
; Line 198
	mov	eax, DWORD PTR _PixelIndex$[ebp]
	xor	eax, DWORD PTR _IndexMask$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 199
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__XorPixel ENDP
_TEXT	ENDS
EXTRN	_LCD_pColorIndex:DWORD
EXTRN	_GUI_Context:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawHLine
_TEXT	SEGMENT
_ColorIndex$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y$ = 16						; size = 4
_x1$ = 20						; size = 4
__DrawHLine PROC					; COMDAT
; Line 205
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 208
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 1
	je	SHORT $LN8@DrawHLine
	jmp	SHORT $LN7@DrawHLine
$LN6@DrawHLine:
; Line 209
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, 1
	mov	DWORD PTR _x0$[ebp], eax
$LN7@DrawHLine:
	mov	eax, DWORD PTR _x0$[ebp]
	cmp	eax, DWORD PTR _x1$[ebp]
	jg	SHORT $LN5@DrawHLine
; Line 210
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__XorPixel
	add	esp, 12					; 0000000cH
; Line 211
	jmp	SHORT $LN6@DrawHLine
$LN5@DrawHLine:
; Line 212
	jmp	SHORT $LN9@DrawHLine
$LN8@DrawHLine:
; Line 213
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ColorIndex$[ebp], ecx
	jmp	SHORT $LN3@DrawHLine
$LN2@DrawHLine:
; Line 214
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, 1
	mov	DWORD PTR _x0$[ebp], eax
$LN3@DrawHLine:
	mov	eax, DWORD PTR _x0$[ebp]
	cmp	eax, DWORD PTR _x1$[ebp]
	jg	SHORT $LN9@DrawHLine
; Line 215
	mov	eax, DWORD PTR _ColorIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 216
	jmp	SHORT $LN2@DrawHLine
$LN9@DrawHLine:
; Line 218
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawHLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawVLine
_TEXT	SEGMENT
_ColorIndex$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y0$ = 16						; size = 4
_y1$ = 20						; size = 4
__DrawVLine PROC					; COMDAT
; Line 224
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 227
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 1
	je	SHORT $LN8@DrawVLine
	jmp	SHORT $LN7@DrawVLine
$LN6@DrawVLine:
; Line 228
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
$LN7@DrawVLine:
	mov	eax, DWORD PTR _y0$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jg	SHORT $LN5@DrawVLine
; Line 229
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__XorPixel
	add	esp, 12					; 0000000cH
; Line 230
	jmp	SHORT $LN6@DrawVLine
$LN5@DrawVLine:
; Line 231
	jmp	SHORT $LN9@DrawVLine
$LN8@DrawVLine:
; Line 232
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ColorIndex$[ebp], ecx
	jmp	SHORT $LN3@DrawVLine
$LN2@DrawVLine:
; Line 233
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
$LN3@DrawVLine:
	mov	eax, DWORD PTR _y0$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jg	SHORT $LN9@DrawVLine
; Line 234
	mov	eax, DWORD PTR _ColorIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 235
	jmp	SHORT $LN2@DrawVLine
$LN9@DrawVLine:
; Line 237
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawVLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __FillRect
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
__FillRect PROC						; COMDAT
; Line 243
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 244
	jmp	SHORT $LN3@FillRect
$LN2@FillRect:
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _y0$[ebp], eax
$LN3@FillRect:
	mov	eax, DWORD PTR _y0$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jg	SHORT $LN4@FillRect
; Line 245
	mov	eax, DWORD PTR _x1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawHLine
	add	esp, 16					; 00000010H
; Line 246
	jmp	SHORT $LN2@FillRect
$LN4@FillRect:
; Line 247
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FillRect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitmap
_TEXT	SEGMENT
tv64 = -208						; size = 4
_i$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xSize$ = 20						; size = 4
_ySize$ = 24						; size = 4
_BitsPerPixel$ = 28					; size = 4
_BytesPerLine$ = 32					; size = 4
_pData$ = 36						; size = 4
_Diff$ = 40						; size = 4
_pTrans$ = 44						; size = 4
__DrawBitmap PROC					; COMDAT
; Line 505
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 508
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 31			; 0000001fH
	ja	$LN27@DrawBitmap
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN29@DrawBitmap[edx]
	jmp	DWORD PTR $LN30@DrawBitmap[eax*4]
$LN24@DrawBitmap:
; Line 510
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN23@DrawBitmap
$LN22@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN23@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN21@DrawBitmap
; Line 511
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine1BPP
	add	esp, 28					; 0000001cH
; Line 512
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 513
	jmp	SHORT $LN22@DrawBitmap
$LN21@DrawBitmap:
; Line 514
	jmp	$LN27@DrawBitmap
$LN20@DrawBitmap:
; Line 516
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@DrawBitmap
$LN18@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN19@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN17@DrawBitmap
; Line 517
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine2BPP
	add	esp, 28					; 0000001cH
; Line 518
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 519
	jmp	SHORT $LN18@DrawBitmap
$LN17@DrawBitmap:
; Line 520
	jmp	$LN27@DrawBitmap
$LN16@DrawBitmap:
; Line 522
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@DrawBitmap
$LN14@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN13@DrawBitmap
; Line 523
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine4BPP
	add	esp, 28					; 0000001cH
; Line 524
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 525
	jmp	SHORT $LN14@DrawBitmap
$LN13@DrawBitmap:
; Line 526
	jmp	$LN27@DrawBitmap
$LN12@DrawBitmap:
; Line 528
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@DrawBitmap
$LN10@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN9@DrawBitmap
; Line 529
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__DrawBitLine8BPP
	add	esp, 24					; 00000018H
; Line 530
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 531
	jmp	SHORT $LN10@DrawBitmap
$LN9@DrawBitmap:
; Line 532
	jmp	$LN27@DrawBitmap
$LN8@DrawBitmap:
; Line 534
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@DrawBitmap
$LN6@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN5@DrawBitmap
; Line 535
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__DrawBitLine16BPP
	add	esp, 20					; 00000014H
; Line 536
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 537
	jmp	SHORT $LN6@DrawBitmap
$LN5@DrawBitmap:
; Line 538
	jmp	SHORT $LN27@DrawBitmap
$LN4@DrawBitmap:
; Line 540
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@DrawBitmap
$LN2@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN27@DrawBitmap
; Line 541
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__DrawBitLine32BPP
	add	esp, 20					; 00000014H
; Line 542
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 543
	jmp	SHORT $LN2@DrawBitmap
$LN27@DrawBitmap:
; Line 546
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN30@DrawBitmap:
	DD	$LN24@DrawBitmap
	DD	$LN20@DrawBitmap
	DD	$LN16@DrawBitmap
	DD	$LN12@DrawBitmap
	DD	$LN8@DrawBitmap
	DD	$LN4@DrawBitmap
	DD	$LN27@DrawBitmap
$LN29@DrawBitmap:
	DB	0
	DB	1
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
__DrawBitmap ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine1BPP
_TEXT	SEGMENT
tv77 = -248						; size = 4
tv73 = -244						; size = 4
tv68 = -244						; size = 4
_Pixel$ = -44						; size = 4
_Index1$ = -32						; size = 4
_Index0$ = -20						; size = 4
_IndexMask$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine1BPP PROC					; COMDAT
; Line 253
	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 256
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Index0$[ebp], ecx
; Line 257
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Index1$[ebp], ecx
; Line 258
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 259
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv68[ebp], eax
	cmp	DWORD PTR tv68[ebp], 3
	ja	$LN20@DrawBitLin
	mov	ecx, DWORD PTR tv68[ebp]
	jmp	DWORD PTR $LN24@DrawBitLin[ecx*4]
$LN16@DrawBitLin:
; Line 262
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN22@DrawBitLin
	mov	ecx, DWORD PTR _Index1$[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN23@DrawBitLin
$LN22@DrawBitLin:
	mov	edx, DWORD PTR _Index0$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN23@DrawBitLin:
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR tv73[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv77[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 263
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN15@DrawBitLin
; Line 264
	mov	DWORD PTR _Diff$[ebp], 0
; Line 265
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN15@DrawBitLin:
; Line 267
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN16@DrawBitLin
; Line 268
	jmp	$LN20@DrawBitLin
$LN11@DrawBitLin:
; Line 271
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN8@DrawBitLin
; Line 272
	mov	eax, DWORD PTR _Index1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
$LN8@DrawBitLin:
; Line 273
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 274
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN10@DrawBitLin
; Line 275
	mov	DWORD PTR _Diff$[ebp], 0
; Line 276
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN10@DrawBitLin:
; Line 278
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN11@DrawBitLin
; Line 279
	jmp	$LN20@DrawBitLin
$LN6@DrawBitLin:
; Line 282
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$[ebp], eax
$LN5@DrawBitLin:
; Line 284
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN2@DrawBitLin
; Line 285
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__GetPixelIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Pixel$[ebp], eax
; Line 286
	mov	eax, DWORD PTR _Pixel$[ebp]
	xor	eax, DWORD PTR _IndexMask$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
$LN2@DrawBitLin:
; Line 288
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 289
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN4@DrawBitLin
; Line 290
	mov	DWORD PTR _Diff$[ebp], 0
; Line 291
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN4@DrawBitLin:
; Line 293
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN5@DrawBitLin
$LN20@DrawBitLin:
; Line 296
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN24@DrawBitLin:
	DD	$LN16@DrawBitLin
	DD	$LN6@DrawBitLin
	DD	$LN11@DrawBitLin
	DD	$LN6@DrawBitLin
__DrawBitLine1BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine2BPP
_TEXT	SEGMENT
tv131 = -256						; size = 4
tv81 = -256						; size = 4
tv68 = -256						; size = 4
_Index$ = -56						; size = 4
_Shift$ = -44						; size = 4
_CurrentPixel$ = -32					; size = 4
_PixelIndex$ = -20					; size = 4
_Pixels$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine2BPP PROC					; COMDAT
; Line 302
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 306
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixels$[ebp], ecx
; Line 307
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _CurrentPixel$[ebp], eax
; Line 308
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 309
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv68[ebp], eax
	je	SHORT $LN24@DrawBitLin@2
	cmp	DWORD PTR tv68[ebp], 2
	je	$LN13@DrawBitLin@2
	jmp	$LN27@DrawBitLin@2
$LN24@DrawBitLin@2:
; Line 311
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN17@DrawBitLin@2
$LN22@DrawBitLin@2:
; Line 313
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$[ebp], eax
; Line 314
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 315
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$[ebp], edx
; Line 316
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv81[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _PixelIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv81[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 317
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN21@DrawBitLin@2
; Line 318
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 319
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN21@DrawBitLin@2:
; Line 321
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN22@DrawBitLin@2
; Line 322
	jmp	$LN18@DrawBitLin@2
$LN17@DrawBitLin@2:
; Line 324
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$[ebp], eax
; Line 325
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 326
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _Index$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv131[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 327
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN16@DrawBitLin@2
; Line 328
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 329
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN16@DrawBitLin@2:
; Line 331
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN17@DrawBitLin@2
$LN18@DrawBitLin@2:
; Line 333
	jmp	$LN27@DrawBitLin@2
$LN13@DrawBitLin@2:
; Line 335
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN5@DrawBitLin@2
$LN11@DrawBitLin@2:
; Line 337
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$[ebp], eax
; Line 338
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 339
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN8@DrawBitLin@2
; Line 340
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$[ebp], edx
; Line 341
	mov	eax, DWORD PTR _PixelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
$LN8@DrawBitLin@2:
; Line 343
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 344
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN10@DrawBitLin@2
; Line 345
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 346
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN10@DrawBitLin@2:
; Line 348
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN11@DrawBitLin@2
; Line 349
	jmp	$LN27@DrawBitLin@2
$LN5@DrawBitLin@2:
; Line 351
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$[ebp], eax
; Line 352
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 353
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN2@DrawBitLin@2
; Line 354
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
$LN2@DrawBitLin@2:
; Line 356
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 357
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN4@DrawBitLin@2
; Line 358
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 359
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN4@DrawBitLin@2:
; Line 361
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN5@DrawBitLin@2
$LN27@DrawBitLin@2:
; Line 365
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine2BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine4BPP
_TEXT	SEGMENT
tv131 = -256						; size = 4
tv81 = -256						; size = 4
tv68 = -256						; size = 4
_Index$ = -56						; size = 4
_Shift$ = -44						; size = 4
_CurrentPixel$ = -32					; size = 4
_PixelIndex$ = -20					; size = 4
_Pixels$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine4BPP PROC					; COMDAT
; Line 371
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 375
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixels$[ebp], ecx
; Line 376
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _CurrentPixel$[ebp], eax
; Line 377
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 378
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv68[ebp], eax
	je	SHORT $LN24@DrawBitLin@3
	cmp	DWORD PTR tv68[ebp], 2
	je	$LN13@DrawBitLin@3
	jmp	$LN27@DrawBitLin@3
$LN24@DrawBitLin@3:
; Line 380
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN17@DrawBitLin@3
$LN22@DrawBitLin@3:
; Line 382
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 383
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 384
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$[ebp], edx
; Line 385
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv81[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _PixelIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv81[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 386
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN21@DrawBitLin@3
; Line 387
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 388
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN21@DrawBitLin@3:
; Line 390
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN22@DrawBitLin@3
; Line 391
	jmp	$LN18@DrawBitLin@3
$LN17@DrawBitLin@3:
; Line 393
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 394
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 395
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _Index$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv131[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 396
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN16@DrawBitLin@3
; Line 397
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 398
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN16@DrawBitLin@3:
; Line 400
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN17@DrawBitLin@3
$LN18@DrawBitLin@3:
; Line 402
	jmp	$LN27@DrawBitLin@3
$LN13@DrawBitLin@3:
; Line 404
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN5@DrawBitLin@3
$LN11@DrawBitLin@3:
; Line 406
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 407
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 408
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN8@DrawBitLin@3
; Line 409
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$[ebp], edx
; Line 410
	mov	eax, DWORD PTR _PixelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
$LN8@DrawBitLin@3:
; Line 412
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 413
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN10@DrawBitLin@3
; Line 414
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 415
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN10@DrawBitLin@3:
; Line 417
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN11@DrawBitLin@3
; Line 418
	jmp	$LN27@DrawBitLin@3
$LN5@DrawBitLin@3:
; Line 420
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 421
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 422
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN2@DrawBitLin@3
; Line 423
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
$LN2@DrawBitLin@3:
; Line 425
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 426
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN4@DrawBitLin@3
; Line 427
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 428
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN4@DrawBitLin@3:
; Line 430
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN5@DrawBitLin@3
$LN27@DrawBitLin@3:
; Line 434
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine4BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine8BPP
_TEXT	SEGMENT
tv66 = -208						; size = 4
_Pixel$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xsize$ = 24						; size = 4
_pTrans$ = 28						; size = 4
__DrawBitLine8BPP PROC					; COMDAT
; Line 440
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 443
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv66[ebp], eax
	je	SHORT $LN20@DrawBitLin@4
	cmp	DWORD PTR tv66[ebp], 2
	je	$LN11@DrawBitLin@4
	jmp	$LN23@DrawBitLin@4
$LN20@DrawBitLin@4:
; Line 445
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	SHORT $LN19@DrawBitLin@4
	jmp	SHORT $LN18@DrawBitLin@4
$LN17@DrawBitLin@4:
; Line 446
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN18@DrawBitLin@4:
	cmp	DWORD PTR _xsize$[ebp], 0
	jle	SHORT $LN16@DrawBitLin@4
; Line 447
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixel$[ebp], ecx
; Line 448
	mov	eax, DWORD PTR _Pixel$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 449
	jmp	SHORT $LN17@DrawBitLin@4
$LN16@DrawBitLin@4:
; Line 450
	jmp	SHORT $LN15@DrawBitLin@4
$LN19@DrawBitLin@4:
; Line 451
	jmp	SHORT $LN14@DrawBitLin@4
$LN13@DrawBitLin@4:
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN14@DrawBitLin@4:
	cmp	DWORD PTR _xsize$[ebp], 0
	jle	SHORT $LN15@DrawBitLin@4
; Line 452
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 453
	jmp	SHORT $LN13@DrawBitLin@4
$LN15@DrawBitLin@4:
; Line 455
	jmp	$LN23@DrawBitLin@4
$LN11@DrawBitLin@4:
; Line 457
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	SHORT $LN10@DrawBitLin@4
	jmp	SHORT $LN9@DrawBitLin@4
$LN8@DrawBitLin@4:
; Line 458
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN9@DrawBitLin@4:
	cmp	DWORD PTR _xsize$[ebp], 0
	jle	SHORT $LN7@DrawBitLin@4
; Line 459
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixel$[ebp], ecx
; Line 460
	cmp	DWORD PTR _Pixel$[ebp], 0
	je	SHORT $LN6@DrawBitLin@4
; Line 461
	mov	eax, DWORD PTR _Pixel$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
$LN6@DrawBitLin@4:
; Line 463
	jmp	SHORT $LN8@DrawBitLin@4
$LN7@DrawBitLin@4:
; Line 464
	jmp	SHORT $LN23@DrawBitLin@4
$LN10@DrawBitLin@4:
; Line 465
	jmp	SHORT $LN4@DrawBitLin@4
$LN3@DrawBitLin@4:
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN4@DrawBitLin@4:
	cmp	DWORD PTR _xsize$[ebp], 0
	jle	SHORT $LN23@DrawBitLin@4
; Line 466
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixel$[ebp], ecx
; Line 467
	cmp	DWORD PTR _Pixel$[ebp], 0
	je	SHORT $LN1@DrawBitLin@4
; Line 468
	mov	eax, DWORD PTR _Pixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
$LN1@DrawBitLin@4:
; Line 470
	jmp	SHORT $LN3@DrawBitLin@4
$LN23@DrawBitLin@4:
; Line 474
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine8BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine16BPP
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xsize$ = 24						; size = 4
__DrawBitLine16BPP PROC					; COMDAT
; Line 480
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 481
	jmp	SHORT $LN3@DrawBitLin@5
$LN2@DrawBitLin@5:
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
$LN3@DrawBitLin@5:
	cmp	DWORD PTR _xsize$[ebp], 0
	jle	SHORT $LN4@DrawBitLin@5
; Line 482
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 483
	jmp	SHORT $LN2@DrawBitLin@5
$LN4@DrawBitLin@5:
; Line 484
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine16BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine32BPP
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xsize$ = 24						; size = 4
__DrawBitLine32BPP PROC					; COMDAT
; Line 490
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 491
	jmp	SHORT $LN3@DrawBitLin@6
$LN2@DrawBitLin@6:
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
$LN3@DrawBitLin@6:
	cmp	DWORD PTR _xsize$[ebp], 0
	jle	SHORT $LN4@DrawBitLin@6
; Line 492
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__SetPixelIndex
	add	esp, 16					; 00000010H
; Line 493
	jmp	SHORT $LN2@DrawBitLin@6
$LN4@DrawBitLin@6:
; Line 494
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine32BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevProp
_TEXT	SEGMENT
tv65 = -208						; size = 4
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevProp PROC					; COMDAT
; Line 573
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 576
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 577
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 13			; 0000000dH
	ja	SHORT $LN12@GetDevProp
	mov	edx, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN16@GetDevProp[edx*4]
$LN11@GetDevProp:
; Line 579
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [eax+4]
	jmp	SHORT $LN14@GetDevProp
$LN10@GetDevProp:
; Line 581
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN14@GetDevProp
$LN9@GetDevProp:
; Line 583
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [eax+12]
	jmp	SHORT $LN14@GetDevProp
$LN8@GetDevProp:
; Line 585
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN14@GetDevProp
$LN7@GetDevProp:
; Line 587
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [eax+24]
	jmp	SHORT $LN14@GetDevProp
$LN6@GetDevProp:
; Line 589
	xor	eax, eax
	jmp	SHORT $LN14@GetDevProp
$LN5@GetDevProp:
; Line 591
	mov	eax, 1
	jmp	SHORT $LN14@GetDevProp
$LN4@GetDevProp:
; Line 593
	mov	eax, 1
	jmp	SHORT $LN14@GetDevProp
$LN3@GetDevProp:
; Line 595
	xor	eax, eax
	jmp	SHORT $LN14@GetDevProp
$LN2@GetDevProp:
; Line 597
	xor	eax, eax
	jmp	SHORT $LN14@GetDevProp
$LN1@GetDevProp:
; Line 599
	xor	eax, eax
	jmp	SHORT $LN14@GetDevProp
$LN12@GetDevProp:
; Line 601
	or	eax, -1
$LN14@GetDevProp:
; Line 602
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@GetDevProp:
	DD	$LN11@GetDevProp
	DD	$LN10@GetDevProp
	DD	$LN9@GetDevProp
	DD	$LN8@GetDevProp
	DD	$LN12@GetDevProp
	DD	$LN12@GetDevProp
	DD	$LN12@GetDevProp
	DD	$LN7@GetDevProp
	DD	$LN6@GetDevProp
	DD	$LN5@GetDevProp
	DD	$LN4@GetDevProp
	DD	$LN3@GetDevProp
	DD	$LN2@GetDevProp
	DD	$LN1@GetDevProp
__GetDevProp ENDP
_TEXT	ENDS
EXTRN	_GUI_MEMDEV_DEVICE_32:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetDevData
_TEXT	SEGMENT
tv64 = -196						; size = 4
_pDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevData PROC					; COMDAT
; Line 608
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 609
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 610
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN1@GetDevData
	jmp	SHORT $LN2@GetDevData
$LN1@GetDevData:
; Line 613
	mov	eax, OFFSET _GUI_MEMDEV_DEVICE_32
	jmp	SHORT $LN4@GetDevData
$LN2@GetDevData:
; Line 616
	xor	eax, eax
$LN4@GetDevData:
; Line 617
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetDevData ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetRect
_TEXT	SEGMENT
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_pRect$ = 12						; size = 4
__GetRect PROC						; COMDAT
; Line 623
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 626
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 627
	xor	eax, eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [ecx], ax
; Line 628
	xor	eax, eax
	mov	ecx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 629
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [edx+4], cx
; Line 630
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _pRect$[ebp]
	mov	WORD PTR [edx+6], cx
; Line 631
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetRect ENDP
_TEXT	ENDS
EXTRN	_LCD_X_DisplayDriver:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __SetOrg
_TEXT	SEGMENT
_Data$ = -12						; size = 8
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__SetOrg PROC						; COMDAT
; Line 637
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 638
	mov	DWORD PTR _Data$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _Data$[ebp+4], eax
; Line 640
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _Data$[ebp], eax
; Line 641
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _Data$[ebp+4], eax
; Line 642
	lea	eax, DWORD PTR _Data$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_LCD_X_DisplayDriver
	add	esp, 12					; 0000000cH
; Line 643
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SetOrg
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@SetOrg:
	DD	1
	DD	$LN4@SetOrg
$LN4@SetOrg:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@SetOrg
$LN3@SetOrg:
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
__SetOrg ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetDevFunc
_TEXT	SEGMENT
tv64 = -196						; size = 4
_ppDevice$ = 8						; size = 4
_Index$ = 12						; size = 4
__GetDevFunc PROC					; COMDAT
; Line 747
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 748
	mov	eax, DWORD PTR _ppDevice$[ebp]
	mov	DWORD PTR _ppDevice$[ebp], eax
; Line 749
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 9
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 7
	ja	SHORT $LN8@GetDevFunc
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN12@GetDevFunc[edx*4]
$LN7@GetDevFunc:
; Line 751
	mov	eax, OFFSET __SetVRAMAddr
	jmp	SHORT $LN10@GetDevFunc
$LN6@GetDevFunc:
; Line 753
	mov	eax, OFFSET __SetVSize
	jmp	SHORT $LN10@GetDevFunc
$LN5@GetDevFunc:
; Line 755
	mov	eax, OFFSET __SetSize
	jmp	SHORT $LN10@GetDevFunc
$LN4@GetDevFunc:
; Line 757
	mov	eax, OFFSET __Init
	jmp	SHORT $LN10@GetDevFunc
$LN3@GetDevFunc:
; Line 759
	mov	eax, OFFSET __On
	jmp	SHORT $LN10@GetDevFunc
$LN2@GetDevFunc:
; Line 761
	mov	eax, OFFSET __Off
	jmp	SHORT $LN10@GetDevFunc
$LN1@GetDevFunc:
; Line 763
	mov	eax, OFFSET __SetLUTEntry
	jmp	SHORT $LN10@GetDevFunc
$LN8@GetDevFunc:
; Line 765
	xor	eax, eax
$LN10@GetDevFunc:
; Line 766
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@GetDevFunc:
	DD	$LN7@GetDevFunc
	DD	$LN6@GetDevFunc
	DD	$LN5@GetDevFunc
	DD	$LN4@GetDevFunc
	DD	$LN8@GetDevFunc
	DD	$LN3@GetDevFunc
	DD	$LN2@GetDevFunc
	DD	$LN1@GetDevFunc
__GetDevFunc ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetVRAMAddr
_TEXT	SEGMENT
_Data$ = -20						; size = 4
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_pVRAM$ = 12						; size = 4
__SetVRAMAddr PROC					; COMDAT
; Line 655
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 657
	mov	DWORD PTR _Data$[ebp], 0
; Line 659
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__InitOnce
	add	esp, 4
; Line 660
	mov	eax, DWORD PTR _pDevice$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@SetVRAMAdd
; Line 661
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 662
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pVRAM$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 663
	mov	eax, DWORD PTR _pVRAM$[ebp]
	mov	DWORD PTR _Data$[ebp], eax
; Line 664
	lea	eax, DWORD PTR _Data$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_LCD_X_DisplayDriver
	add	esp, 12					; 0000000cH
$LN2@SetVRAMAdd:
; Line 666
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SetVRAMAdd
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@SetVRAMAdd:
	DD	1
	DD	$LN5@SetVRAMAdd
$LN5@SetVRAMAdd:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@SetVRAMAdd
$LN4@SetVRAMAdd:
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
__SetVRAMAddr ENDP
_TEXT	ENDS
EXTRN	_LCD__GetBPP:PROC
EXTRN	_GUI_ALLOC_GetFixedBlock:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __InitOnce
_TEXT	SEGMENT
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
__InitOnce PROC						; COMDAT
; Line 558
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 561
	mov	eax, DWORD PTR _pDevice$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN1@InitOnce
; Line 562
	push	28					; 0000001cH
	call	_GUI_ALLOC_GetFixedBlock
	add	esp, 4
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 563
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 564
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_LCD__GetBPP
	add	esp, 4
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN1@InitOnce:
; Line 566
	mov	eax, DWORD PTR _pDevice$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+8], 0
	sete	cl
	mov	eax, ecx
; Line 567
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__InitOnce ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetVSize
_TEXT	SEGMENT
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_xSize$ = 12						; size = 4
_ySize$ = 16						; size = 4
__SetVSize PROC						; COMDAT
; Line 672
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 675
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__InitOnce
	add	esp, 4
; Line 676
	mov	eax, DWORD PTR _pDevice$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@SetVSize
; Line 677
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 678
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 679
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _ySize$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 680
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN2@SetVSize:
; Line 682
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SetVSize ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetSize
_TEXT	SEGMENT
tv75 = -224						; size = 4
_Data$ = -24						; size = 8
_pContext$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_xSize$ = 12						; size = 4
_ySize$ = 16						; size = 4
__SetSize PROC						; COMDAT
; Line 688
	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 690
	mov	DWORD PTR _Data$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _Data$[ebp+4], eax
; Line 692
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__InitOnce
	add	esp, 4
; Line 693
	mov	eax, DWORD PTR _pDevice$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@SetSize
; Line 694
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 695
	mov	eax, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN4@SetSize
	mov	ecx, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN5@SetSize
$LN4@SetSize:
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR tv75[ebp], eax
$LN5@SetSize:
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR [ecx+20], edx
; Line 696
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 697
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _ySize$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 698
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	DWORD PTR _Data$[ebp], eax
; Line 699
	mov	eax, DWORD PTR _ySize$[ebp]
	mov	DWORD PTR _Data$[ebp+4], eax
; Line 700
	lea	eax, DWORD PTR _Data$[ebp]
	push	eax
	push	7
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_LCD_X_DisplayDriver
	add	esp, 12					; 0000000cH
$LN2@SetSize:
; Line 702
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@SetSize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@SetSize:
	DD	1
	DD	$LN7@SetSize
$LN7@SetSize:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN6@SetSize
$LN6@SetSize:
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
__SetSize ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Init
_TEXT	SEGMENT
_r$ = -8						; size = 4
_pDevice$ = 8						; size = 4
__Init	PROC						; COMDAT
; Line 707
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 710
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__InitOnce
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax
; Line 711
	push	0
	push	1
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_LCD_X_DisplayDriver
	add	esp, 12					; 0000000cH
	or	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _r$[ebp], eax
; Line 712
	mov	eax, DWORD PTR _r$[ebp]
; Line 713
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Init	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __On
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
__On	PROC						; COMDAT
; Line 719
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 720
	push	0
	push	5
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_LCD_X_DisplayDriver
	add	esp, 12					; 0000000cH
; Line 721
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__On	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Off
_TEXT	SEGMENT
_pDevice$ = 8						; size = 4
__Off	PROC						; COMDAT
; Line 727
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 728
	push	0
	push	6
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_LCD_X_DisplayDriver
	add	esp, 12					; 0000000cH
; Line 729
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Off	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetLUTEntry
_TEXT	SEGMENT
_Data$ = -12						; size = 8
_pDevice$ = 8						; size = 4
_Pos$ = 12						; size = 1
_Color$ = 16						; size = 4
__SetLUTEntry PROC					; COMDAT
; Line 735
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 736
	mov	DWORD PTR _Data$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _Data$[ebp+4], eax
; Line 738
	mov	al, BYTE PTR _Pos$[ebp]
	mov	BYTE PTR _Data$[ebp+4], al
; Line 739
	mov	eax, DWORD PTR _Color$[ebp]
	mov	DWORD PTR _Data$[ebp], eax
; Line 740
	lea	eax, DWORD PTR _Data$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_LCD_X_DisplayDriver
	add	esp, 12					; 0000000cH
; Line 741
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SetLUTEntr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@SetLUTEntr:
	DD	1
	DD	$LN4@SetLUTEntr
$LN4@SetLUTEntr:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@SetLUTEntr
$LN3@SetLUTEntr:
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
__SetLUTEntry ENDP
_TEXT	ENDS
END
