; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_SetOrientationC0.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_OrientationAPI_C0
CONST	SEGMENT
_GUI_OrientationAPI_C0 DD FLAT:__DrawBitmap_C0
	DD	FLAT:__DrawHLine_C0
	DD	FLAT:__DrawVLine_C0
	DD	FLAT:__FillRect_C0
	DD	FLAT:__GetPixelIndex_C0
	DD	FLAT:__SetPixelIndex_C0
	DD	FLAT:__XorPixel_C0
	DD	00H
CONST	ENDS
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_setorientationc0.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __DrawBitmap_C0
_TEXT	SEGMENT
tv64 = -208						; size = 4
_i$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xSize$ = 20						; size = 4
_ySize$ = 24						; size = 4
_BitsPerPixel$ = 28					; size = 4
_BytesPerLine$ = 32					; size = 4
_pData$ = 36						; size = 4
_Diff$ = 40						; size = 4
_pTrans$ = 44						; size = 4
__DrawBitmap_C0 PROC					; COMDAT
; Line 339
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 342
	mov	eax, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 31			; 0000001fH
	ja	$LN27@DrawBitmap
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN29@DrawBitmap[edx]
	jmp	DWORD PTR $LN30@DrawBitmap[eax*4]
$LN24@DrawBitmap:
; Line 344
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN23@DrawBitmap
$LN22@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN23@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN21@DrawBitmap
; Line 345
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine1BPP
	add	esp, 28					; 0000001cH
; Line 346
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 347
	jmp	SHORT $LN22@DrawBitmap
$LN21@DrawBitmap:
; Line 348
	jmp	$LN27@DrawBitmap
$LN20@DrawBitmap:
; Line 350
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@DrawBitmap
$LN18@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN19@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN17@DrawBitmap
; Line 351
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine2BPP
	add	esp, 28					; 0000001cH
; Line 352
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 353
	jmp	SHORT $LN18@DrawBitmap
$LN17@DrawBitmap:
; Line 354
	jmp	$LN27@DrawBitmap
$LN16@DrawBitmap:
; Line 356
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@DrawBitmap
$LN14@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN13@DrawBitmap
; Line 357
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Diff$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	__DrawBitLine4BPP
	add	esp, 28					; 0000001cH
; Line 358
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 359
	jmp	SHORT $LN14@DrawBitmap
$LN13@DrawBitmap:
; Line 360
	jmp	$LN27@DrawBitmap
$LN12@DrawBitmap:
; Line 362
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@DrawBitmap
$LN10@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN9@DrawBitmap
; Line 363
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	__DrawBitLine8BPP
	add	esp, 24					; 00000018H
; Line 364
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 365
	jmp	SHORT $LN10@DrawBitmap
$LN9@DrawBitmap:
; Line 366
	jmp	$LN27@DrawBitmap
$LN8@DrawBitmap:
; Line 368
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@DrawBitmap
$LN6@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN5@DrawBitmap
; Line 369
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__DrawBitLine16BPP
	add	esp, 20					; 00000014H
; Line 370
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 371
	jmp	SHORT $LN6@DrawBitmap
$LN5@DrawBitmap:
; Line 372
	jmp	SHORT $LN27@DrawBitmap
$LN4@DrawBitmap:
; Line 374
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@DrawBitmap
$LN2@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@DrawBitmap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ySize$[ebp]
	jge	SHORT $LN27@DrawBitmap
; Line 375
	mov	eax, DWORD PTR _xSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	__DrawBitLine32BPP
	add	esp, 20					; 00000014H
; Line 376
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _pData$[ebp], eax
; Line 377
	jmp	SHORT $LN2@DrawBitmap
$LN27@DrawBitmap:
; Line 380
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN30@DrawBitmap:
	DD	$LN24@DrawBitmap
	DD	$LN20@DrawBitmap
	DD	$LN16@DrawBitmap
	DD	$LN12@DrawBitmap
	DD	$LN8@DrawBitmap
	DD	$LN4@DrawBitmap
	DD	$LN27@DrawBitmap
$LN29@DrawBitmap:
	DB	0
	DB	1
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
__DrawBitmap_C0 ENDP
_TEXT	ENDS
EXTRN	_GUI_Context:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawBitLine1BPP
_TEXT	SEGMENT
tv79 = -272						; size = 4
tv75 = -268						; size = 4
tv70 = -268						; size = 4
_pfSetPixelIndex$ = -68					; size = 4
_pfGetPixelIndex$ = -56					; size = 4
_Pixel$ = -44						; size = 4
_Index1$ = -32						; size = 4
_Index0$ = -20						; size = 4
_IndexMask$ = -8					; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine1BPP PROC					; COMDAT
; Line 60
	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 65
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _pfSetPixelIndex$[ebp], edx
; Line 66
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Index0$[ebp], ecx
; Line 67
	mov	eax, DWORD PTR _pTrans$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Index1$[ebp], ecx
; Line 68
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 69
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv70[ebp], eax
	cmp	DWORD PTR tv70[ebp], 3
	ja	$LN20@DrawBitLin
	mov	ecx, DWORD PTR tv70[ebp]
	jmp	DWORD PTR $LN24@DrawBitLin[ecx*4]
$LN16@DrawBitLin:
; Line 72
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN22@DrawBitLin
	mov	ecx, DWORD PTR _Index1$[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN23@DrawBitLin
$LN22@DrawBitLin:
	mov	edx, DWORD PTR _Index0$[ebp]
	mov	DWORD PTR tv75[ebp], edx
$LN23@DrawBitLin:
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR tv75[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv79[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 73
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN15@DrawBitLin
; Line 74
	mov	DWORD PTR _Diff$[ebp], 0
; Line 75
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN15@DrawBitLin:
; Line 77
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN16@DrawBitLin
; Line 78
	jmp	$LN20@DrawBitLin
$LN11@DrawBitLin:
; Line 81
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN8@DrawBitLin
; Line 82
	mov	esi, esp
	mov	eax, DWORD PTR _Index1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@DrawBitLin:
; Line 84
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 85
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN10@DrawBitLin
; Line 86
	mov	DWORD PTR _Diff$[ebp], 0
; Line 87
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN10@DrawBitLin:
; Line 89
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	SHORT $LN11@DrawBitLin
; Line 90
	jmp	$LN20@DrawBitLin
$LN6@DrawBitLin:
; Line 93
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _pfGetPixelIndex$[ebp], edx
; Line 94
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexMask$[ebp], eax
$LN5@DrawBitLin:
; Line 96
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _Diff$[ebp]
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN2@DrawBitLin
; Line 97
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfGetPixelIndex$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Pixel$[ebp], eax
; Line 98
	mov	eax, DWORD PTR _Pixel$[ebp]
	xor	eax, DWORD PTR _IndexMask$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawBitLin:
; Line 100
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 101
	mov	eax, DWORD PTR _Diff$[ebp]
	add	eax, 1
	mov	DWORD PTR _Diff$[ebp], eax
	cmp	DWORD PTR _Diff$[ebp], 8
	jne	SHORT $LN4@DrawBitLin
; Line 102
	mov	DWORD PTR _Diff$[ebp], 0
; Line 103
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN4@DrawBitLin:
; Line 105
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN5@DrawBitLin
$LN20@DrawBitLin:
; Line 108
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN24@DrawBitLin:
	DD	$LN16@DrawBitLin
	DD	$LN6@DrawBitLin
	DD	$LN11@DrawBitLin
	DD	$LN6@DrawBitLin
__DrawBitLine1BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine2BPP
_TEXT	SEGMENT
tv133 = -268						; size = 4
tv83 = -268						; size = 4
tv70 = -268						; size = 4
_pfSetPixelIndex$ = -68					; size = 4
_Index$ = -56						; size = 4
_Shift$ = -44						; size = 4
_CurrentPixel$ = -32					; size = 4
_PixelIndex$ = -20					; size = 4
_Pixels$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine2BPP PROC					; COMDAT
; Line 114
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 119
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _pfSetPixelIndex$[ebp], edx
; Line 120
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixels$[ebp], ecx
; Line 121
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _CurrentPixel$[ebp], eax
; Line 122
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 123
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv70[ebp], eax
	je	SHORT $LN24@DrawBitLin@2
	cmp	DWORD PTR tv70[ebp], 2
	je	$LN13@DrawBitLin@2
	jmp	$LN27@DrawBitLin@2
$LN24@DrawBitLin@2:
; Line 125
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN17@DrawBitLin@2
$LN22@DrawBitLin@2:
; Line 127
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$[ebp], eax
; Line 128
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 129
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$[ebp], edx
; Line 130
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR _PixelIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 131
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN21@DrawBitLin@2
; Line 132
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 133
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN21@DrawBitLin@2:
; Line 135
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN22@DrawBitLin@2
; Line 136
	jmp	$LN18@DrawBitLin@2
$LN17@DrawBitLin@2:
; Line 138
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$[ebp], eax
; Line 139
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 140
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv133[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR _Index$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv133[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 141
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN16@DrawBitLin@2
; Line 142
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 143
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN16@DrawBitLin@2:
; Line 145
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN17@DrawBitLin@2
$LN18@DrawBitLin@2:
; Line 147
	jmp	$LN27@DrawBitLin@2
$LN13@DrawBitLin@2:
; Line 149
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN5@DrawBitLin@2
$LN11@DrawBitLin@2:
; Line 151
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$[ebp], eax
; Line 152
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 153
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN8@DrawBitLin@2
; Line 154
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$[ebp], edx
; Line 155
	mov	esi, esp
	mov	eax, DWORD PTR _PixelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@DrawBitLin@2:
; Line 157
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 158
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN10@DrawBitLin@2
; Line 159
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 160
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN10@DrawBitLin@2:
; Line 162
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN11@DrawBitLin@2
; Line 163
	jmp	$LN27@DrawBitLin@2
$LN5@DrawBitLin@2:
; Line 165
	mov	eax, 3
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Shift$[ebp], eax
; Line 166
	mov	ecx, 6
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 192				; 000000c0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 167
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN2@DrawBitLin@2
; Line 168
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawBitLin@2:
; Line 170
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 171
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 4
	jne	SHORT $LN4@DrawBitLin@2
; Line 172
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 173
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN4@DrawBitLin@2:
; Line 175
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN5@DrawBitLin@2
$LN27@DrawBitLin@2:
; Line 179
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine2BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine4BPP
_TEXT	SEGMENT
tv133 = -268						; size = 4
tv83 = -268						; size = 4
tv70 = -268						; size = 4
_pfSetPixelIndex$ = -68					; size = 4
_Index$ = -56						; size = 4
_Shift$ = -44						; size = 4
_CurrentPixel$ = -32					; size = 4
_PixelIndex$ = -20					; size = 4
_Pixels$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_Diff$ = 24						; size = 4
_xsize$ = 28						; size = 4
_pTrans$ = 32						; size = 4
__DrawBitLine4BPP PROC					; COMDAT
; Line 185
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 190
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _pfSetPixelIndex$[ebp], edx
; Line 191
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixels$[ebp], ecx
; Line 192
	mov	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _CurrentPixel$[ebp], eax
; Line 193
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _Diff$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 194
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv70[ebp], eax
	je	SHORT $LN24@DrawBitLin@3
	cmp	DWORD PTR tv70[ebp], 2
	je	$LN13@DrawBitLin@3
	jmp	$LN27@DrawBitLin@3
$LN24@DrawBitLin@3:
; Line 196
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN17@DrawBitLin@3
$LN22@DrawBitLin@3:
; Line 198
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 199
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 200
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$[ebp], edx
; Line 201
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR _PixelIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 202
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN21@DrawBitLin@3
; Line 203
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 204
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN21@DrawBitLin@3:
; Line 206
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN22@DrawBitLin@3
; Line 207
	jmp	$LN18@DrawBitLin@3
$LN17@DrawBitLin@3:
; Line 209
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 210
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 211
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv133[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR _Index$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv133[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 212
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN16@DrawBitLin@3
; Line 213
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 214
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN16@DrawBitLin@3:
; Line 216
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN17@DrawBitLin@3
$LN18@DrawBitLin@3:
; Line 218
	jmp	$LN27@DrawBitLin@3
$LN13@DrawBitLin@3:
; Line 220
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	$LN5@DrawBitLin@3
$LN11@DrawBitLin@3:
; Line 222
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 223
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 224
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN8@DrawBitLin@3
; Line 225
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _PixelIndex$[ebp], edx
; Line 226
	mov	esi, esp
	mov	eax, DWORD PTR _PixelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@DrawBitLin@3:
; Line 228
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 229
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN10@DrawBitLin@3
; Line 230
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 231
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN10@DrawBitLin@3:
; Line 233
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN11@DrawBitLin@3
; Line 234
	jmp	$LN27@DrawBitLin@3
$LN5@DrawBitLin@3:
; Line 236
	mov	eax, 1
	sub	eax, DWORD PTR _CurrentPixel$[ebp]
	shl	eax, 2
	mov	DWORD PTR _Shift$[ebp], eax
; Line 237
	mov	ecx, 4
	sub	ecx, DWORD PTR _Shift$[ebp]
	mov	eax, 240				; 000000f0H
	sar	eax, cl
	and	eax, DWORD PTR _Pixels$[ebp]
	mov	ecx, DWORD PTR _Shift$[ebp]
	shr	eax, cl
	mov	DWORD PTR _Index$[ebp], eax
; Line 238
	cmp	DWORD PTR _Index$[ebp], 0
	je	SHORT $LN2@DrawBitLin@3
; Line 239
	mov	esi, esp
	mov	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawBitLin@3:
; Line 241
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 242
	mov	eax, DWORD PTR _CurrentPixel$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurrentPixel$[ebp], eax
	cmp	DWORD PTR _CurrentPixel$[ebp], 2
	jne	SHORT $LN4@DrawBitLin@3
; Line 243
	mov	DWORD PTR _CurrentPixel$[ebp], 0
; Line 244
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Pixels$[ebp], edx
$LN4@DrawBitLin@3:
; Line 246
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	jne	$LN5@DrawBitLin@3
$LN27@DrawBitLin@3:
; Line 250
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine4BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine8BPP
_TEXT	SEGMENT
tv68 = -220						; size = 4
_pfSetPixelIndex$ = -20					; size = 4
_Pixel$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xsize$ = 24						; size = 4
_pTrans$ = 28						; size = 4
__DrawBitLine8BPP PROC					; COMDAT
; Line 256
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 260
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _pfSetPixelIndex$[ebp], edx
; Line 261
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 3
	mov	DWORD PTR tv68[ebp], eax
	je	SHORT $LN20@DrawBitLin@4
	cmp	DWORD PTR tv68[ebp], 2
	je	$LN11@DrawBitLin@4
	jmp	$LN23@DrawBitLin@4
$LN20@DrawBitLin@4:
; Line 263
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	SHORT $LN19@DrawBitLin@4
	jmp	SHORT $LN18@DrawBitLin@4
$LN17@DrawBitLin@4:
; Line 264
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN18@DrawBitLin@4:
	cmp	DWORD PTR _xsize$[ebp], 0
	jle	SHORT $LN16@DrawBitLin@4
; Line 265
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixel$[ebp], ecx
; Line 266
	mov	esi, esp
	mov	eax, DWORD PTR _Pixel$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 267
	jmp	SHORT $LN17@DrawBitLin@4
$LN16@DrawBitLin@4:
; Line 268
	jmp	SHORT $LN15@DrawBitLin@4
$LN19@DrawBitLin@4:
; Line 269
	jmp	SHORT $LN14@DrawBitLin@4
$LN13@DrawBitLin@4:
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN14@DrawBitLin@4:
	cmp	DWORD PTR _xsize$[ebp], 0
	jle	SHORT $LN15@DrawBitLin@4
; Line 270
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 271
	jmp	SHORT $LN13@DrawBitLin@4
$LN15@DrawBitLin@4:
; Line 273
	jmp	$LN23@DrawBitLin@4
$LN11@DrawBitLin@4:
; Line 275
	cmp	DWORD PTR _pTrans$[ebp], 0
	je	SHORT $LN10@DrawBitLin@4
	jmp	SHORT $LN9@DrawBitLin@4
$LN8@DrawBitLin@4:
; Line 276
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN9@DrawBitLin@4:
	cmp	DWORD PTR _xsize$[ebp], 0
	jle	SHORT $LN7@DrawBitLin@4
; Line 277
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixel$[ebp], ecx
; Line 278
	cmp	DWORD PTR _Pixel$[ebp], 0
	je	SHORT $LN6@DrawBitLin@4
; Line 279
	mov	esi, esp
	mov	eax, DWORD PTR _Pixel$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@DrawBitLin@4:
; Line 281
	jmp	SHORT $LN8@DrawBitLin@4
$LN7@DrawBitLin@4:
; Line 282
	jmp	SHORT $LN23@DrawBitLin@4
$LN10@DrawBitLin@4:
; Line 283
	jmp	SHORT $LN4@DrawBitLin@4
$LN3@DrawBitLin@4:
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN4@DrawBitLin@4:
	cmp	DWORD PTR _xsize$[ebp], 0
	jle	SHORT $LN23@DrawBitLin@4
; Line 284
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Pixel$[ebp], ecx
; Line 285
	cmp	DWORD PTR _Pixel$[ebp], 0
	je	SHORT $LN1@DrawBitLin@4
; Line 286
	mov	esi, esp
	mov	eax, DWORD PTR _Pixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DrawBitLin@4:
; Line 288
	jmp	SHORT $LN3@DrawBitLin@4
$LN23@DrawBitLin@4:
; Line 292
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine8BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine16BPP
_TEXT	SEGMENT
_pfSetPixelIndex$ = -20					; size = 4
_Pixel$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xsize$ = 24						; size = 4
__DrawBitLine16BPP PROC					; COMDAT
; Line 298
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 302
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _pfSetPixelIndex$[ebp], edx
	jmp	SHORT $LN3@DrawBitLin@5
$LN2@DrawBitLin@5:
; Line 303
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
$LN3@DrawBitLin@5:
	cmp	DWORD PTR _xsize$[ebp], 0
	jle	SHORT $LN4@DrawBitLin@5
; Line 304
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _Pixel$[ebp], ecx
; Line 305
	mov	esi, esp
	mov	eax, DWORD PTR _Pixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 306
	jmp	SHORT $LN2@DrawBitLin@5
$LN4@DrawBitLin@5:
; Line 307
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine16BPP ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitLine32BPP
_TEXT	SEGMENT
_pfSetPixelIndex$ = -20					; size = 4
_Pixel$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_p$ = 20						; size = 4
_xsize$ = 24						; size = 4
__DrawBitLine32BPP PROC					; COMDAT
; Line 313
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 317
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _pfSetPixelIndex$[ebp], edx
	jmp	SHORT $LN3@DrawBitLin@6
$LN2@DrawBitLin@6:
; Line 318
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xsize$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
$LN3@DrawBitLin@6:
	cmp	DWORD PTR _xsize$[ebp], 0
	jle	SHORT $LN4@DrawBitLin@6
; Line 319
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Pixel$[ebp], ecx
; Line 320
	mov	esi, esp
	mov	eax, DWORD PTR _Pixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	DWORD PTR _pfSetPixelIndex$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 321
	jmp	SHORT $LN2@DrawBitLin@6
$LN4@DrawBitLin@6:
; Line 322
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitLine32BPP ENDP
_TEXT	ENDS
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetPixelIndex_C0
_TEXT	SEGMENT
_pContext$ = -44					; size = 4
_PixelIndex$ = -32					; size = 4
_y_phys$ = -20						; size = 4
_x_phys$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__GetPixelIndex_C0 PROC					; COMDAT
; Line 386
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 391
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 392
	mov	esi, esp
	lea	eax, DWORD PTR _y_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 393
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 394
	mov	esi, esp
	mov	eax, DWORD PTR _y_phys$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _PixelIndex$[ebp], eax
; Line 395
	mov	eax, DWORD PTR _PixelIndex$[ebp]
; Line 396
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@GetPixelIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@GetPixelIn:
	DD	2
	DD	$LN5@GetPixelIn
$LN5@GetPixelIn:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@GetPixelIn
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@GetPixelIn
$LN4@GetPixelIn:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN3@GetPixelIn:
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
__GetPixelIndex_C0 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SetPixelIndex_C0
_TEXT	SEGMENT
_pContext$ = -32					; size = 4
_y_phys$ = -20						; size = 4
_x_phys$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_PixelIndex$ = 20					; size = 4
__SetPixelIndex_C0 PROC					; COMDAT
; Line 402
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 406
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 407
	mov	esi, esp
	lea	eax, DWORD PTR _y_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 408
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 409
	mov	esi, esp
	mov	eax, DWORD PTR _PixelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_phys$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 410
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SetPixelIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@SetPixelIn:
	DD	2
	DD	$LN5@SetPixelIn
$LN5@SetPixelIn:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@SetPixelIn
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@SetPixelIn
$LN4@SetPixelIn:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN3@SetPixelIn:
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
__SetPixelIndex_C0 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __XorPixel_C0
_TEXT	SEGMENT
_pContext$ = -32					; size = 4
_y_phys$ = -20						; size = 4
_x_phys$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
__XorPixel_C0 PROC					; COMDAT
; Line 416
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 420
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 421
	mov	esi, esp
	lea	eax, DWORD PTR _y_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 422
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 423
	mov	esi, esp
	mov	eax, DWORD PTR _y_phys$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 424
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XorPixel_C
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@XorPixel_C:
	DD	2
	DD	$LN5@XorPixel_C
$LN5@XorPixel_C:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@XorPixel_C
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@XorPixel_C
$LN4@XorPixel_C:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN3@XorPixel_C:
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
__XorPixel_C0 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawHLine_C0
_TEXT	SEGMENT
_pContext$ = -56					; size = 4
_y1_phys$ = -44						; size = 4
_x1_phys$ = -32						; size = 4
_y0_phys$ = -20						; size = 4
_x0_phys$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y$ = 16						; size = 4
_x1$ = 20						; size = 4
__DrawHLine_C0 PROC					; COMDAT
; Line 430
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 434
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 435
	mov	esi, esp
	lea	eax, DWORD PTR _y0_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x0_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 436
	mov	esi, esp
	lea	eax, DWORD PTR _y1_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x1_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 437
	lea	eax, DWORD PTR _x1_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x0_phys$[ebp]
	push	ecx
	call	__Sort
	add	esp, 8
; Line 438
	lea	eax, DWORD PTR _y1_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _y0_phys$[ebp]
	push	ecx
	call	__Sort
	add	esp, 8
; Line 439
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 440
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 4
	je	SHORT $LN2@DrawHLine_
; Line 441
	mov	esi, esp
	mov	eax, DWORD PTR _y1_phys$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0_phys$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 442
	jmp	SHORT $LN3@DrawHLine_
$LN2@DrawHLine_:
; Line 443
	mov	esi, esp
	mov	eax, DWORD PTR _x1_phys$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0_phys$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@DrawHLine_:
; Line 445
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@DrawHLine_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@DrawHLine_:
	DD	4
	DD	$LN9@DrawHLine_
$LN9@DrawHLine_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@DrawHLine_
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@DrawHLine_
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN7@DrawHLine_
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN8@DrawHLine_
$LN8@DrawHLine_:
	DB	121					; 00000079H
	DB	49					; 00000031H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN7@DrawHLine_:
	DB	120					; 00000078H
	DB	49					; 00000031H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN6@DrawHLine_:
	DB	121					; 00000079H
	DB	48					; 00000030H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN5@DrawHLine_:
	DB	120					; 00000078H
	DB	48					; 00000030H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
__DrawHLine_C0 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Sort
_TEXT	SEGMENT
_temp$ = -8						; size = 4
_p0$ = 8						; size = 4
_p1$ = 12						; size = 4
__Sort	PROC						; COMDAT
; Line 40
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 43
	mov	eax, DWORD PTR _p0$[ebp]
	mov	ecx, DWORD PTR _p1$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jle	SHORT $LN2@Sort
; Line 44
	mov	eax, DWORD PTR _p0$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$[ebp], ecx
; Line 45
	mov	eax, DWORD PTR _p0$[ebp]
	mov	ecx, DWORD PTR _p1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 46
	mov	eax, DWORD PTR _p1$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@Sort:
; Line 48
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__Sort	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawVLine_C0
_TEXT	SEGMENT
_pContext$ = -56					; size = 4
_y1_phys$ = -44						; size = 4
_x1_phys$ = -32						; size = 4
_y0_phys$ = -20						; size = 4
_x0_phys$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x$ = 12						; size = 4
_y0$ = 16						; size = 4
_y1$ = 20						; size = 4
__DrawVLine_C0 PROC					; COMDAT
; Line 451
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 455
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 456
	mov	esi, esp
	lea	eax, DWORD PTR _y0_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x0_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 457
	mov	esi, esp
	lea	eax, DWORD PTR _y1_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x1_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y1$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 458
	lea	eax, DWORD PTR _x1_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x0_phys$[ebp]
	push	ecx
	call	__Sort
	add	esp, 8
; Line 459
	lea	eax, DWORD PTR _y1_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _y0_phys$[ebp]
	push	ecx
	call	__Sort
	add	esp, 8
; Line 460
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 461
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 4
	je	SHORT $LN2@DrawVLine_
; Line 462
	mov	esi, esp
	mov	eax, DWORD PTR _x1_phys$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0_phys$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 463
	jmp	SHORT $LN3@DrawVLine_
$LN2@DrawVLine_:
; Line 464
	mov	esi, esp
	mov	eax, DWORD PTR _y1_phys$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0_phys$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@DrawVLine_:
; Line 466
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@DrawVLine_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@DrawVLine_:
	DD	4
	DD	$LN9@DrawVLine_
$LN9@DrawVLine_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@DrawVLine_
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@DrawVLine_
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN7@DrawVLine_
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN8@DrawVLine_
$LN8@DrawVLine_:
	DB	121					; 00000079H
	DB	49					; 00000031H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN7@DrawVLine_:
	DB	120					; 00000078H
	DB	49					; 00000031H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN6@DrawVLine_:
	DB	121					; 00000079H
	DB	48					; 00000030H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN5@DrawVLine_:
	DB	120					; 00000078H
	DB	48					; 00000030H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
__DrawVLine_C0 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __FillRect_C0
_TEXT	SEGMENT
_pContext$ = -68					; size = 4
_temp$ = -56						; size = 4
_y1_phys$ = -44						; size = 4
_x1_phys$ = -32						; size = 4
_y0_phys$ = -20						; size = 4
_x0_phys$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
__FillRect_C0 PROC					; COMDAT
; Line 472
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 477
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pContext$[ebp], ecx
; Line 478
	mov	esi, esp
	lea	eax, DWORD PTR _y0_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x0_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 479
	mov	esi, esp
	lea	eax, DWORD PTR _y1_phys$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x1_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y1$[ebp]
	push	edx
	mov	eax, DWORD PTR _x1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 480
	mov	eax, DWORD PTR _x0_phys$[ebp]
	cmp	eax, DWORD PTR _x1_phys$[ebp]
	jle	SHORT $LN2@FillRect_C
; Line 481
	mov	eax, DWORD PTR _x0_phys$[ebp]
	mov	DWORD PTR _temp$[ebp], eax
; Line 482
	mov	eax, DWORD PTR _x1_phys$[ebp]
	mov	DWORD PTR _x0_phys$[ebp], eax
; Line 483
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _x1_phys$[ebp], eax
$LN2@FillRect_C:
; Line 485
	mov	eax, DWORD PTR _y0_phys$[ebp]
	cmp	eax, DWORD PTR _y1_phys$[ebp]
	jle	SHORT $LN1@FillRect_C
; Line 486
	mov	eax, DWORD PTR _y0_phys$[ebp]
	mov	DWORD PTR _temp$[ebp], eax
; Line 487
	mov	eax, DWORD PTR _y1_phys$[ebp]
	mov	DWORD PTR _y0_phys$[ebp], eax
; Line 488
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _y1_phys$[ebp], eax
$LN1@FillRect_C:
; Line 490
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 491
	mov	esi, esp
	mov	eax, DWORD PTR _y1_phys$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x1_phys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0_phys$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0_phys$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 492
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@FillRect_C
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@FillRect_C:
	DD	4
	DD	$LN9@FillRect_C
$LN9@FillRect_C:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@FillRect_C
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@FillRect_C
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN7@FillRect_C
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN8@FillRect_C
$LN8@FillRect_C:
	DB	121					; 00000079H
	DB	49					; 00000031H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN7@FillRect_C:
	DB	120					; 00000078H
	DB	49					; 00000031H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN6@FillRect_C:
	DB	121					; 00000079H
	DB	48					; 00000030H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN5@FillRect_C:
	DB	120					; 00000078H
	DB	48					; 00000030H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
__FillRect_C0 ENDP
_TEXT	ENDS
END
