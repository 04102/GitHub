; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_GIF_DrawScaled.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_GIF_DrawSubScaledEx
EXTRN	_GUI_ALLOC_Free:PROC
EXTRN	_LCD_SetColorIndex:PROC
EXTRN	_WM__GetNextIVR:PROC
EXTRN	_GUI_GIF__DrawFromFilePointer:PROC
EXTRN	_WM__InitIVRSearch:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	_LCD_GetColorIndex:PROC
EXTRN	_GUI__Read16:PROC
EXTRN	_GUI_GIF__ReadData:PROC
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	_GUI_ALLOC_AllocZero:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_UninitUse:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_gif_drawscaled.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_GIF_DrawSubScaledEx
_TEXT	SEGMENT
$T10107 = -297						; size = 1
_pData$10061 = -96					; size = 4
_Height$ = -84						; size = 4
_Width$ = -72						; size = 4
_r$ = -60						; size = 8
_pContext$ = -44					; size = 4
_hContext$ = -32					; size = 4
_OldColorIndex$ = -20					; size = 4
_Result$ = -8						; size = 4
_pfGetData$ = 8						; size = 4
_p$ = 12						; size = 4
_x0$ = 16						; size = 4
_y0$ = 20						; size = 4
_Index$ = 24						; size = 4
_Num$ = 28						; size = 4
_Denom$ = 32						; size = 4
_GUI_GIF_DrawSubScaledEx PROC				; COMDAT
; Line 338
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T10107[ebp], 0
; Line 348
	push	16648					; 00004108H
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hContext$[ebp], eax
; Line 349
	cmp	DWORD PTR _hContext$[ebp], 0
	je	$LN5@GUI_GIF_Dr
; Line 350
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pContext$[ebp], eax
; Line 351
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _pfGetData$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 352
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 356
	push	1
	lea	eax, DWORD PTR _pData$10061[ebp]
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_GIF__ReadData
	add	esp, 16					; 00000010H
; Line 357
	mov	eax, DWORD PTR _pData$10061[ebp]
	add	eax, 6
	mov	DWORD PTR _pData$10061[ebp], eax
; Line 358
	lea	eax, DWORD PTR _pData$10061[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	movzx	ecx, ax
	mov	DWORD PTR _Width$[ebp], ecx
; Line 359
	lea	eax, DWORD PTR _pData$10061[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	movzx	ecx, ax
	mov	DWORD PTR _Height$[ebp], ecx
; Line 362
	call	_LCD_GetColorIndex
	mov	DWORD PTR _OldColorIndex$[ebp], eax
; Line 364
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _GUI_Context+64
	mov	DWORD PTR _x0$[ebp], eax
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _GUI_Context+68
	mov	DWORD PTR _y0$[ebp], eax
; Line 365
	mov	ax, WORD PTR _x0$[ebp]
	mov	WORD PTR _r$[ebp], ax
	movsx	ecx, WORD PTR _r$[ebp]
	mov	eax, DWORD PTR _Width$[ebp]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	WORD PTR _r$[ebp+4], dx
; Line 366
	mov	ax, WORD PTR _y0$[ebp]
	mov	WORD PTR _r$[ebp+2], ax
	movsx	ecx, WORD PTR _r$[ebp+2]
	mov	eax, DWORD PTR _Height$[ebp]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	WORD PTR _r$[ebp+6], dx
; Line 367
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_WM__InitIVRSearch
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@GUI_GIF_Dr
$LN3@GUI_GIF_Dr:
; Line 369
	push	OFFSET __ClearUnusedPixelsScaled
	push	OFFSET __DrawFromDataBlockScaled
	mov	eax, DWORD PTR _Denom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Num$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Index$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	_GUI_GIF__DrawFromFilePointer
	add	esp, 32					; 00000020H
	mov	BYTE PTR $T10107[ebp], 1
	mov	DWORD PTR _Result$[ebp], eax
; Line 371
	call	_WM__GetNextIVR
	test	eax, eax
	jne	SHORT $LN3@GUI_GIF_Dr
$LN4@GUI_GIF_Dr:
; Line 373
	mov	eax, DWORD PTR _OldColorIndex$[ebp]
	push	eax
	call	_LCD_SetColorIndex
	add	esp, 4
; Line 374
	mov	eax, DWORD PTR _hContext$[ebp]
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN5@GUI_GIF_Dr:
; Line 377
	cmp	BYTE PTR $T10107[ebp], 0
	jne	SHORT $LN8@GUI_GIF_Dr
	push	OFFSET $LN9@GUI_GIF_Dr
	call	__RTC_UninitUse
	add	esp, 4
$LN8@GUI_GIF_Dr:
	mov	eax, DWORD PTR _Result$[ebp]
; Line 378
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GUI_GIF_Dr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@GUI_GIF_Dr:
	DD	2
	DD	$LN12@GUI_GIF_Dr
$LN12@GUI_GIF_Dr:
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN10@GUI_GIF_Dr
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN11@GUI_GIF_Dr
$LN11@GUI_GIF_Dr:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN10@GUI_GIF_Dr:
	DB	114					; 00000072H
	DB	0
$LN9@GUI_GIF_Dr:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
_GUI_GIF_DrawSubScaledEx ENDP
_TEXT	ENDS
EXTRN	_LCD_FillRect:PROC
EXTRN	_LCD_GetBkColorIndex:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __ClearUnusedPixelsScaled
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_pDescriptor$ = 16					; size = 4
_pInfo$ = 20						; size = 4
_Num$ = 24						; size = 4
_Denom$ = 28						; size = 4
__ClearUnusedPixelsScaled PROC				; COMDAT
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 38
	call	_LCD_GetBkColorIndex
	push	eax
	call	_LCD_SetColorIndex
	add	esp, 4
; Line 39
	mov	eax, DWORD PTR _pDescriptor$[ebp]
	mov	ecx, DWORD PTR _pInfo$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN4@ClearUnuse
; Line 43
	mov	eax, DWORD PTR _pDescriptor$[ebp]
	mov	eax, DWORD PTR [eax+4]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	mov	ecx, DWORD PTR _y0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pInfo$[ebp]
	add	eax, DWORD PTR [ecx+8]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	mov	edx, DWORD PTR _x0$[ebp]
	lea	eax, DWORD PTR [edx+eax-1]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	edx, DWORD PTR _pInfo$[ebp]
	mov	eax, DWORD PTR [edx]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	add	eax, DWORD PTR _x0$[ebp]
	push	eax
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
$LN4@ClearUnuse:
; Line 45
	mov	eax, DWORD PTR _pDescriptor$[ebp]
	mov	ecx, DWORD PTR _pInfo$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jle	SHORT $LN3@ClearUnuse
; Line 49
	mov	eax, DWORD PTR _pInfo$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _pInfo$[ebp]
	add	eax, DWORD PTR [ecx+12]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	mov	edx, DWORD PTR _y0$[ebp]
	lea	eax, DWORD PTR [edx+eax-1]
	push	eax
	mov	ecx, DWORD PTR _pDescriptor$[ebp]
	mov	eax, DWORD PTR [ecx]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	mov	edx, DWORD PTR _x0$[ebp]
	lea	eax, DWORD PTR [edx+eax-1]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	edx, DWORD PTR _pInfo$[ebp]
	mov	eax, DWORD PTR [edx]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	add	eax, DWORD PTR _x0$[ebp]
	push	eax
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
$LN3@ClearUnuse:
; Line 51
	mov	eax, DWORD PTR _pDescriptor$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pDescriptor$[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _pInfo$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _pInfo$[ebp]
	add	edx, DWORD PTR [eax+12]
	cmp	ecx, edx
	jge	SHORT $LN2@ClearUnuse
; Line 55
	mov	eax, DWORD PTR _pInfo$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _pInfo$[ebp]
	add	eax, DWORD PTR [ecx+12]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	mov	edx, DWORD PTR _y0$[ebp]
	lea	eax, DWORD PTR [edx+eax-1]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _pInfo$[ebp]
	add	eax, DWORD PTR [edx+8]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _pDescriptor$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _pDescriptor$[ebp]
	add	eax, DWORD PTR [ecx+12]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	mov	edx, DWORD PTR _y0$[ebp]
	lea	eax, DWORD PTR [edx+eax-1]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	mov	eax, DWORD PTR [ecx]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	add	eax, DWORD PTR _x0$[ebp]
	push	eax
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
$LN2@ClearUnuse:
; Line 57
	mov	eax, DWORD PTR _pDescriptor$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pDescriptor$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _pInfo$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR _pInfo$[ebp]
	add	edx, DWORD PTR [eax+8]
	cmp	ecx, edx
	jge	SHORT $LN5@ClearUnuse
; Line 61
	mov	eax, DWORD PTR _pInfo$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _pInfo$[ebp]
	add	eax, DWORD PTR [ecx+12]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	mov	edx, DWORD PTR _y0$[ebp]
	lea	eax, DWORD PTR [edx+eax-1]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _pInfo$[ebp]
	add	eax, DWORD PTR [edx+8]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	mov	eax, DWORD PTR [eax+4]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDescriptor$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _pDescriptor$[ebp]
	add	eax, DWORD PTR [edx+8]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
$LN5@ClearUnuse:
; Line 63
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ClearUnusedPixelsScaled ENDP
_TEXT	ENDS
EXTRN	_GUI_GIF__InitLZW:PROC
EXTRN	_LCD_GetpPalConvTable:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawFromDataBlockScaled
_TEXT	SEGMENT
_pData$ = -100						; size = 4
_pTrans$ = -88						; size = 4
_LogPalette$ = -76					; size = 12
_NumColors$ = -56					; size = 4
_Height$ = -44						; size = 4
_Width$ = -32						; size = 4
_Interlace$ = -20					; size = 4
_Codesize$ = -8						; size = 4
_pContext$ = 8						; size = 4
_pDescriptor$ = 12					; size = 4
_x0$ = 16						; size = 4
_y0$ = 20						; size = 4
_Transparency$ = 24					; size = 4
_Disposal$ = 28						; size = 4
_Num$ = 32						; size = 4
_Denom$ = 36						; size = 4
__DrawFromDataBlockScaled PROC				; COMDAT
; Line 295
	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 301
	mov	eax, DWORD PTR _pDescriptor$[ebp]
	mov	eax, DWORD PTR [eax]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	add	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x0$[ebp], eax
; Line 302
	mov	eax, DWORD PTR _pDescriptor$[ebp]
	mov	eax, DWORD PTR [eax+4]
	imul	eax, DWORD PTR _Num$[ebp]
	xor	edx, edx
	div	DWORD PTR _Denom$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _y0$[ebp], eax
; Line 303
	mov	eax, DWORD PTR _pDescriptor$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _Width$[ebp], ecx
; Line 304
	mov	eax, DWORD PTR _pDescriptor$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _Height$[ebp], ecx
; Line 305
	mov	eax, DWORD PTR _pDescriptor$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _NumColors$[ebp], ecx
; Line 307
	mov	eax, DWORD PTR _NumColors$[ebp]
	mov	DWORD PTR _LogPalette$[ebp], eax
; Line 308
	mov	BYTE PTR _LogPalette$[ebp+4], 0
; Line 309
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 15624				; 00003d08H
	mov	DWORD PTR _LogPalette$[ebp+8], eax
; Line 310
	lea	eax, DWORD PTR _LogPalette$[ebp]
	push	eax
	call	_LCD_GetpPalConvTable
	add	esp, 4
	mov	DWORD PTR _pTrans$[ebp], eax
	cmp	DWORD PTR _pTrans$[ebp], 0
	jne	SHORT $LN5@DrawFromDa
; Line 311
	mov	eax, 1
	jmp	$LN6@DrawFromDa
$LN5@DrawFromDa:
; Line 313
	push	0
	lea	eax, DWORD PTR _pData$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_GIF__ReadData
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN4@DrawFromDa
; Line 314
	mov	eax, 1
	jmp	$LN6@DrawFromDa
$LN4@DrawFromDa:
; Line 316
	cmp	DWORD PTR _Width$[ebp], 0
	je	SHORT $LN2@DrawFromDa
	cmp	DWORD PTR _Height$[ebp], 0
	jne	SHORT $LN3@DrawFromDa
$LN2@DrawFromDa:
; Line 317
	mov	eax, 1
	jmp	$LN6@DrawFromDa
$LN3@DrawFromDa:
; Line 319
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _Codesize$[ebp], ecx
; Line 320
	mov	eax, DWORD PTR _Codesize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	_GUI_GIF__InitLZW
	add	esp, 8
; Line 321
	mov	eax, DWORD PTR _pDescriptor$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 64					; 00000040H
	mov	DWORD PTR _Interlace$[ebp], ecx
; Line 322
	jne	SHORT $LN1@DrawFromDa
; Line 323
	mov	eax, DWORD PTR _Denom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Num$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pTrans$[ebp]
	push	edx
	mov	eax, DWORD PTR _NumColors$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Disposal$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Transparency$[ebp]
	push	edx
	mov	eax, DWORD PTR _Height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__DrawNonInterlacedScaled
	add	esp, 44					; 0000002cH
	jmp	SHORT $LN6@DrawFromDa
$LN1@DrawFromDa:
; Line 325
	mov	eax, DWORD PTR _Denom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Num$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pTrans$[ebp]
	push	edx
	mov	eax, DWORD PTR _NumColors$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Disposal$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Transparency$[ebp]
	push	edx
	mov	eax, DWORD PTR _Height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__DrawInterlacedScaled
	add	esp, 44					; 0000002cH
$LN6@DrawFromDa:
; Line 326
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@DrawFromDa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@DrawFromDa:
	DD	2
	DD	$LN10@DrawFromDa
$LN10@DrawFromDa:
	DD	-76					; ffffffb4H
	DD	12					; 0000000cH
	DD	$LN8@DrawFromDa
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN9@DrawFromDa
$LN9@DrawFromDa:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN8@DrawFromDa:
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
__DrawFromDataBlockScaled ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawNonInterlacedScaled
_TEXT	SEGMENT
_Current$ = -56						; size = 4
_Compare$ = -44						; size = 4
_y$ = -32						; size = 4
_NumReps$ = -20						; size = 4
_SkipCnt$ = -8						; size = 4
_pContext$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_Width$ = 20						; size = 4
_Height$ = 24						; size = 4
_Transparency$ = 28					; size = 4
_Disposal$ = 32						; size = 4
_NumColors$ = 36					; size = 4
_pTrans$ = 40						; size = 4
_Num$ = 44						; size = 4
_Denom$ = 48						; size = 4
__DrawNonInterlacedScaled PROC				; COMDAT
; Line 177
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 180
	mov	eax, DWORD PTR _Denom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _Current$[ebp], eax
; Line 181
	mov	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
; Line 182
	mov	DWORD PTR _y$[ebp], 0
$LN10@DrawNonInt:
; Line 187
	mov	DWORD PTR _SkipCnt$[ebp], 0
$LN7@DrawNonInt:
; Line 191
	mov	eax, DWORD PTR _Current$[ebp]
	add	eax, DWORD PTR _Num$[ebp]
	mov	DWORD PTR _Current$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jae	SHORT $LN6@DrawNonInt
; Line 192
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	add	eax, 1
	mov	DWORD PTR _SkipCnt$[ebp], eax
; Line 193
	jmp	SHORT $LN7@DrawNonInt
$LN6@DrawNonInt:
; Line 197
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _y$[ebp], edx
$LN5@DrawNonInt:
; Line 198
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _SkipCnt$[ebp], eax
	js	SHORT $LN4@DrawNonInt
; Line 200
	mov	eax, DWORD PTR _Width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__SkipLine
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@DrawNonInt
; Line 201
	mov	eax, 1
	jmp	SHORT $LN11@DrawNonInt
$LN3@DrawNonInt:
; Line 203
	jmp	SHORT $LN5@DrawNonInt
$LN4@DrawNonInt:
; Line 207
	mov	DWORD PTR _NumReps$[ebp], 1
$LN2@DrawNonInt:
; Line 208
	mov	eax, DWORD PTR _Compare$[ebp]
	add	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jb	SHORT $LN1@DrawNonInt
; Line 209
	mov	eax, DWORD PTR _NumReps$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumReps$[ebp], eax
; Line 210
	jmp	SHORT $LN2@DrawNonInt
$LN1@DrawNonInt:
; Line 214
	mov	eax, DWORD PTR _NumReps$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Denom$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Num$[ebp]
	push	edx
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NumColors$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Disposal$[ebp]
	push	edx
	mov	eax, DWORD PTR _Transparency$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__DrawLineScaled
	add	esp, 44					; 0000002cH
; Line 215
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _NumReps$[ebp]
	mov	DWORD PTR _y0$[ebp], eax
; Line 216
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _Height$[ebp]
	jl	$LN10@DrawNonInt
; Line 217
	xor	eax, eax
$LN11@DrawNonInt:
; Line 218
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawNonInterlacedScaled ENDP
_TEXT	ENDS
EXTRN	_LCD_SetPixelIndex:PROC
EXTRN	_GUI_GIF__GetNextByte:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawLineScaled
_TEXT	SEGMENT
tv164 = -268						; size = 4
tv82 = -268						; size = 4
tv71 = -268						; size = 4
_Index$ = -68						; size = 4
_NumReps$ = -56						; size = 4
_SkipCnt$ = -44						; size = 4
_Current$ = -32						; size = 4
_Compare$ = -20						; size = 4
_BkColorIndex$ = -8					; size = 4
_pContext$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_xSize$ = 20						; size = 4
_Transparency$ = 24					; size = 4
_Disposal$ = 28						; size = 4
_NumColors$ = 32					; size = 4
_pTrans$ = 36						; size = 4
_Num$ = 40						; size = 4
_Denom$ = 44						; size = 4
_NumLines$ = 48						; size = 4
__DrawLineScaled PROC					; COMDAT
; Line 83
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 87
	mov	eax, DWORD PTR _Denom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _Current$[ebp], eax
; Line 88
	mov	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
; Line 89
	call	_LCD_GetBkColorIndex
	mov	DWORD PTR _BkColorIndex$[ebp], eax
; Line 90
	mov	DWORD PTR _Index$[ebp], 0
$LN23@DrawLineSc:
; Line 95
	mov	DWORD PTR _SkipCnt$[ebp], 0
$LN20@DrawLineSc:
; Line 99
	mov	eax, DWORD PTR _Current$[ebp]
	add	eax, DWORD PTR _Num$[ebp]
	mov	DWORD PTR _Current$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jae	SHORT $LN19@DrawLineSc
; Line 100
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	add	eax, 1
	mov	DWORD PTR _SkipCnt$[ebp], eax
; Line 101
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	ecx, DWORD PTR _xSize$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _xSize$[ebp], ecx
	test	eax, eax
	jne	SHORT $LN26@DrawLineSc
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN27@DrawLineSc
$LN26@DrawLineSc:
	mov	DWORD PTR tv71[ebp], 0
$LN27@DrawLineSc:
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN18@DrawLineSc
; Line 102
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__SkipPixels
	add	esp, 8
; Line 103
	xor	eax, eax
	jmp	$LN24@DrawLineSc
$LN18@DrawLineSc:
; Line 105
	jmp	SHORT $LN20@DrawLineSc
$LN19@DrawLineSc:
; Line 109
	cmp	DWORD PTR _xSize$[ebp], 0
	je	SHORT $LN17@DrawLineSc
; Line 110
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 12566				; 00003116H
	mov	ecx, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [ecx+15568], eax
	jbe	SHORT $LN16@DrawLineSc
; Line 111
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+15568]
	sub	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR [edx+15568], eax
	mov	ecx, DWORD PTR tv82[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _Index$[ebp], edx
; Line 112
	jmp	SHORT $LN15@DrawLineSc
$LN16@DrawLineSc:
; Line 113
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	_GUI_GIF__GetNextByte
	add	esp, 4
	mov	DWORD PTR _Index$[ebp], eax
$LN15@DrawLineSc:
; Line 115
	cmp	DWORD PTR _Index$[ebp], -2		; fffffffeH
	jne	SHORT $LN14@DrawLineSc
; Line 116
	xor	eax, eax
	jmp	$LN24@DrawLineSc
$LN14@DrawLineSc:
; Line 118
	cmp	DWORD PTR _Index$[ebp], 0
	jl	SHORT $LN12@DrawLineSc
	mov	eax, DWORD PTR _Index$[ebp]
	cmp	eax, DWORD PTR _NumColors$[ebp]
	jl	SHORT $LN17@DrawLineSc
$LN12@DrawLineSc:
; Line 119
	mov	eax, 1
	jmp	$LN24@DrawLineSc
$LN17@DrawLineSc:
; Line 125
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__SkipPixels
	add	esp, 8
; Line 129
	mov	DWORD PTR _NumReps$[ebp], 1
$LN11@DrawLineSc:
; Line 130
	mov	eax, DWORD PTR _Compare$[ebp]
	add	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jb	SHORT $LN10@DrawLineSc
; Line 131
	mov	eax, DWORD PTR _NumReps$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumReps$[ebp], eax
; Line 132
	jmp	SHORT $LN11@DrawLineSc
$LN10@DrawLineSc:
; Line 136
	cmp	DWORD PTR _Index$[ebp], 0
	jl	$LN9@DrawLineSc
; Line 137
	cmp	DWORD PTR _NumReps$[ebp], 1
	jne	SHORT $LN8@DrawLineSc
	cmp	DWORD PTR _NumLines$[ebp], 1
	jne	SHORT $LN8@DrawLineSc
; Line 138
	mov	eax, DWORD PTR _Index$[ebp]
	cmp	eax, DWORD PTR _Transparency$[ebp]
	je	SHORT $LN7@DrawLineSc
; Line 139
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_LCD_SetPixelIndex
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN6@DrawLineSc
$LN7@DrawLineSc:
; Line 140
	cmp	DWORD PTR _Disposal$[ebp], 2
	jne	SHORT $LN6@DrawLineSc
; Line 141
	mov	eax, DWORD PTR _BkColorIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	_LCD_SetPixelIndex
	add	esp, 12					; 0000000cH
$LN6@DrawLineSc:
; Line 143
	jmp	SHORT $LN9@DrawLineSc
$LN8@DrawLineSc:
; Line 144
	mov	eax, DWORD PTR _Index$[ebp]
	cmp	eax, DWORD PTR _Transparency$[ebp]
	je	SHORT $LN3@DrawLineSc
; Line 145
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _pTrans$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_LCD_SetColorIndex
	add	esp, 4
; Line 146
	mov	eax, DWORD PTR _NumLines$[ebp]
	mov	ecx, DWORD PTR _y0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _NumReps$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
	jmp	SHORT $LN9@DrawLineSc
$LN3@DrawLineSc:
; Line 147
	cmp	DWORD PTR _Disposal$[ebp], 2
	jne	SHORT $LN9@DrawLineSc
; Line 148
	mov	eax, DWORD PTR _BkColorIndex$[ebp]
	push	eax
	call	_LCD_SetColorIndex
	add	esp, 4
; Line 149
	mov	eax, DWORD PTR _NumLines$[ebp]
	mov	ecx, DWORD PTR _y0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _NumReps$[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
$LN9@DrawLineSc:
; Line 153
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _NumReps$[ebp]
	mov	DWORD PTR _x0$[ebp], eax
; Line 154
	mov	eax, DWORD PTR _xSize$[ebp]
	mov	ecx, DWORD PTR _xSize$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _xSize$[ebp], ecx
	test	eax, eax
	jle	SHORT $LN28@DrawLineSc
	mov	DWORD PTR tv164[ebp], 1
	jmp	SHORT $LN29@DrawLineSc
$LN28@DrawLineSc:
	mov	DWORD PTR tv164[ebp], 0
$LN29@DrawLineSc:
	cmp	DWORD PTR tv164[ebp], 0
	jne	$LN23@DrawLineSc
; Line 155
	xor	eax, eax
$LN24@DrawLineSc:
; Line 156
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawLineScaled ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SkipPixels
_TEXT	SEGMENT
tv65 = -196						; size = 4
_pContext$ = 8						; size = 4
_SkipCnt$ = 12						; size = 4
__SkipPixels PROC					; COMDAT
; Line 69
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN4@SkipPixels:
; Line 70
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR _SkipCnt$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _SkipCnt$[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 0
	je	SHORT $LN5@SkipPixels
; Line 71
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 12566				; 00003116H
	mov	ecx, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [ecx+15568], eax
	jbe	SHORT $LN2@SkipPixels
; Line 72
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+15568]
	sub	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+15568], ecx
; Line 73
	jmp	SHORT $LN1@SkipPixels
$LN2@SkipPixels:
; Line 74
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	_GUI_GIF__GetNextByte
	add	esp, 4
$LN1@SkipPixels:
; Line 76
	jmp	SHORT $LN4@SkipPixels
$LN5@SkipPixels:
; Line 77
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SkipPixels ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SkipLine
_TEXT	SEGMENT
tv65 = -196						; size = 4
_pContext$ = 8						; size = 4
_Width$ = 12						; size = 4
__SkipLine PROC						; COMDAT
; Line 162
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN4@SkipLine:
; Line 163
	mov	eax, DWORD PTR _Width$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR _Width$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _Width$[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 0
	je	SHORT $LN3@SkipLine
; Line 164
	mov	eax, DWORD PTR _pContext$[ebp]
	add	eax, 12566				; 00003116H
	mov	ecx, DWORD PTR _pContext$[ebp]
	cmp	DWORD PTR [ecx+15568], eax
	jbe	SHORT $LN2@SkipLine
; Line 165
	mov	eax, DWORD PTR _pContext$[ebp]
	mov	ecx, DWORD PTR [eax+15568]
	sub	ecx, 1
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [edx+15568], ecx
; Line 166
	jmp	SHORT $LN1@SkipLine
$LN2@SkipLine:
; Line 167
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	call	_GUI_GIF__GetNextByte
	add	esp, 4
$LN1@SkipLine:
; Line 169
	jmp	SHORT $LN4@SkipLine
$LN3@SkipLine:
; Line 170
	xor	eax, eax
; Line 171
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SkipLine ENDP
_TEXT	ENDS
EXTRN	_GUI_GIF__aInterlaceYPos:BYTE
EXTRN	_GUI_GIF__aInterlaceOffset:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawInterlacedScaled
_TEXT	SEGMENT
_Pass$ = -32						; size = 4
_YPos$ = -20						; size = 4
_YCnt$ = -8						; size = 4
_pContext$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_Width$ = 20						; size = 4
_Height$ = 24						; size = 4
_Transparency$ = 28					; size = 4
_Disposal$ = 32						; size = 4
_NumColors$ = 36					; size = 4
_pTrans$ = 40						; size = 4
_Num$ = 44						; size = 4
_Denom$ = 48						; size = 4
__DrawInterlacedScaled PROC				; COMDAT
; Line 276
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 278
	mov	DWORD PTR _YCnt$[ebp], 0
	mov	DWORD PTR _YPos$[ebp], 0
	mov	DWORD PTR _Pass$[ebp], 0
	jmp	SHORT $LN5@DrawInterl
$LN4@DrawInterl:
	mov	eax, DWORD PTR _YCnt$[ebp]
	add	eax, 1
	mov	DWORD PTR _YCnt$[ebp], eax
$LN5@DrawInterl:
	mov	eax, DWORD PTR _YCnt$[ebp]
	cmp	eax, DWORD PTR _Height$[ebp]
	jge	SHORT $LN3@DrawInterl
; Line 279
	mov	eax, DWORD PTR _YPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Denom$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Num$[ebp]
	push	edx
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NumColors$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Disposal$[ebp]
	push	edx
	mov	eax, DWORD PTR _Transparency$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Width$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	push	edx
	call	__DrawInterlacedLineScaled
	add	esp, 48					; 00000030H
	test	eax, eax
	je	SHORT $LN2@DrawInterl
; Line 280
	mov	eax, 1
	jmp	SHORT $LN6@DrawInterl
$LN2@DrawInterl:
; Line 282
	mov	eax, DWORD PTR _Pass$[ebp]
	mov	ecx, DWORD PTR _YPos$[ebp]
	add	ecx, DWORD PTR _GUI_GIF__aInterlaceOffset[eax*4]
	mov	DWORD PTR _YPos$[ebp], ecx
; Line 283
	mov	eax, DWORD PTR _YPos$[ebp]
	cmp	eax, DWORD PTR _Height$[ebp]
	jl	SHORT $LN1@DrawInterl
; Line 284
	mov	eax, DWORD PTR _Pass$[ebp]
	add	eax, 1
	mov	DWORD PTR _Pass$[ebp], eax
; Line 285
	mov	eax, DWORD PTR _Pass$[ebp]
	mov	ecx, DWORD PTR _GUI_GIF__aInterlaceYPos[eax*4]
	mov	DWORD PTR _YPos$[ebp], ecx
$LN1@DrawInterl:
; Line 287
	jmp	$LN4@DrawInterl
$LN3@DrawInterl:
; Line 288
	xor	eax, eax
$LN6@DrawInterl:
; Line 289
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawInterlacedScaled ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawInterlacedLineScaled
_TEXT	SEGMENT
_Current$ = -68						; size = 4
_Compare$ = -56						; size = 4
_yCompare$ = -44					; size = 4
_y$ = -32						; size = 4
_NumReps$ = -20						; size = 4
_SkipCnt$ = -8						; size = 4
_pContext$ = 8						; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_Width$ = 20						; size = 4
_Height$ = 24						; size = 4
_Transparency$ = 28					; size = 4
_Disposal$ = 32						; size = 4
_NumColors$ = 36					; size = 4
_pTrans$ = 40						; size = 4
_Num$ = 44						; size = 4
_Denom$ = 48						; size = 4
_yPos$ = 52						; size = 4
__DrawInterlacedLineScaled PROC				; COMDAT
; Line 224
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 227
	mov	eax, DWORD PTR _Denom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _Current$[ebp], eax
; Line 228
	mov	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
; Line 229
	mov	DWORD PTR _yCompare$[ebp], 0
	mov	eax, DWORD PTR _yCompare$[ebp]
	mov	DWORD PTR _y$[ebp], eax
$LN10@DrawInterl@2:
; Line 234
	mov	DWORD PTR _SkipCnt$[ebp], 0
$LN7@DrawInterl@2:
; Line 238
	mov	eax, DWORD PTR _Current$[ebp]
	add	eax, DWORD PTR _Num$[ebp]
	mov	DWORD PTR _Current$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jae	SHORT $LN6@DrawInterl@2
; Line 239
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	add	eax, 1
	mov	DWORD PTR _SkipCnt$[ebp], eax
; Line 240
	jmp	SHORT $LN7@DrawInterl@2
$LN6@DrawInterl@2:
; Line 244
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _y$[ebp], edx
; Line 248
	mov	DWORD PTR _NumReps$[ebp], 1
$LN5@DrawInterl@2:
; Line 249
	mov	eax, DWORD PTR _Compare$[ebp]
	add	eax, DWORD PTR _Denom$[ebp]
	mov	DWORD PTR _Compare$[ebp], eax
	mov	ecx, DWORD PTR _Current$[ebp]
	cmp	ecx, DWORD PTR _Compare$[ebp]
	jb	SHORT $LN4@DrawInterl@2
; Line 250
	mov	eax, DWORD PTR _NumReps$[ebp]
	add	eax, 1
	mov	DWORD PTR _NumReps$[ebp], eax
; Line 251
	jmp	SHORT $LN5@DrawInterl@2
$LN4@DrawInterl@2:
; Line 255
	mov	eax, DWORD PTR _yCompare$[ebp]
	cmp	eax, DWORD PTR _yPos$[ebp]
	jne	SHORT $LN3@DrawInterl@2
; Line 256
	mov	eax, DWORD PTR _NumReps$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Denom$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Num$[ebp]
	push	edx
	mov	eax, DWORD PTR _pTrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NumColors$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Disposal$[ebp]
	push	edx
	mov	eax, DWORD PTR _Transparency$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__DrawLineScaled
	add	esp, 44					; 0000002cH
	test	eax, eax
	je	SHORT $LN2@DrawInterl@2
; Line 257
	mov	eax, 1
	jmp	SHORT $LN11@DrawInterl@2
$LN2@DrawInterl@2:
; Line 259
	xor	eax, eax
	jmp	SHORT $LN11@DrawInterl@2
$LN3@DrawInterl@2:
; Line 261
	mov	eax, DWORD PTR _yCompare$[ebp]
	cmp	eax, DWORD PTR _yPos$[ebp]
	jle	SHORT $LN1@DrawInterl@2
; Line 262
	jmp	SHORT $LN8@DrawInterl@2
$LN1@DrawInterl@2:
; Line 264
	mov	eax, DWORD PTR _y0$[ebp]
	add	eax, DWORD PTR _NumReps$[ebp]
	mov	DWORD PTR _y0$[ebp], eax
; Line 265
	mov	eax, DWORD PTR _SkipCnt$[ebp]
	mov	ecx, DWORD PTR _yCompare$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _yCompare$[ebp], edx
; Line 266
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _Height$[ebp]
	jl	$LN10@DrawInterl@2
$LN8@DrawInterl@2:
; Line 268
	mov	eax, DWORD PTR _Width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	call	__SkipLine
	add	esp, 8
; Line 269
	xor	eax, eax
$LN11@DrawInterl@2:
; Line 270
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawInterlacedLineScaled ENDP
_TEXT	ENDS
PUBLIC	_GUI_GIF_DrawSubScaled
EXTRN	_GUI_GIF__GetData:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_GIF_DrawSubScaled
_TEXT	SEGMENT
_Param$ = -12						; size = 8
_pGIF$ = 8						; size = 4
_NumBytes$ = 12						; size = 4
_x0$ = 16						; size = 4
_y0$ = 20						; size = 4
_Index$ = 24						; size = 4
_Num$ = 28						; size = 4
_Denom$ = 32						; size = 4
_GUI_GIF_DrawSubScaled PROC				; COMDAT
; Line 384
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 386
	mov	eax, DWORD PTR _pGIF$[ebp]
	mov	DWORD PTR _Param$[ebp], eax
; Line 387
	mov	eax, DWORD PTR _NumBytes$[ebp]
	mov	DWORD PTR _Param$[ebp+4], eax
; Line 388
	mov	eax, DWORD PTR _Denom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Num$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Index$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Param$[ebp]
	push	edx
	push	OFFSET _GUI_GIF__GetData
	call	_GUI_GIF_DrawSubScaledEx
	add	esp, 28					; 0000001cH
; Line 389
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GUI_GIF_Dr@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@GUI_GIF_Dr@2:
	DD	1
	DD	$LN4@GUI_GIF_Dr@2
$LN4@GUI_GIF_Dr@2:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@GUI_GIF_Dr@2
$LN3@GUI_GIF_Dr@2:
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_GUI_GIF_DrawSubScaled ENDP
_TEXT	ENDS
END
