; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Widget\FRAMEWIN_ButtonMax.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_FRAMEWIN_AddMaxButton
EXTRN	_WM_SetCallback:PROC
EXTRN	_BUTTON_SetSelfDraw:PROC
EXTRN	_FRAMEWIN_AddButton:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\widget\framewin_buttonmax.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _FRAMEWIN_AddMaxButton
_TEXT	SEGMENT
_hButton$ = -8						; size = 4
_hObj$ = 8						; size = 4
_Flags$ = 12						; size = 4
_Off$ = 16						; size = 4
_FRAMEWIN_AddMaxButton PROC				; COMDAT
; Line 144
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 146
	push	7
	mov	eax, DWORD PTR _Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hObj$[ebp]
	push	edx
	call	_FRAMEWIN_AddButton
	add	esp, 16					; 00000010H
	mov	DWORD PTR _hButton$[ebp], eax
; Line 147
	push	OFFSET __Draw
	push	0
	mov	eax, DWORD PTR _hButton$[ebp]
	push	eax
	call	_BUTTON_SetSelfDraw
	add	esp, 12					; 0000000cH
; Line 148
	push	OFFSET __cbMax
	mov	eax, DWORD PTR _hButton$[ebp]
	push	eax
	call	_WM_SetCallback
	add	esp, 8
; Line 149
	mov	eax, DWORD PTR _hButton$[ebp]
; Line 150
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FRAMEWIN_AddMaxButton ENDP
_TEXT	ENDS
EXTRN	_BUTTON_Callback:PROC
EXTRN	_FRAMEWIN_Maximize:PROC
EXTRN	_FRAMEWIN_Restore:PROC
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_FRAMEWIN_LockH:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __cbMax
_TEXT	SEGMENT
_Flags$13064 = -32					; size = 2
_pObj$13063 = -20					; size = 4
_hObj$13062 = -8					; size = 4
_pMsg$ = 8						; size = 4
__cbMax	PROC						; COMDAT
; Line 51
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 52
	mov	eax, DWORD PTR _pMsg$[ebp]
	cmp	DWORD PTR [eax], 39			; 00000027H
	jne	SHORT $LN3@cbMax
; Line 56
	mov	eax, DWORD PTR _pMsg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _hObj$13062[ebp], ecx
; Line 57
	mov	eax, DWORD PTR _hObj$13062[ebp]
	push	eax
	call	_FRAMEWIN_LockH
	add	esp, 4
	mov	DWORD PTR _pObj$13063[ebp], eax
; Line 58
	mov	eax, DWORD PTR _pObj$13063[ebp]
	mov	cx, WORD PTR [eax+128]
	mov	WORD PTR _Flags$13064[ebp], cx
; Line 59
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pObj$13063[ebp], 0
; Line 60
	movzx	eax, WORD PTR _Flags$13064[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN2@cbMax
; Line 61
	mov	eax, DWORD PTR _hObj$13062[ebp]
	push	eax
	call	_FRAMEWIN_Restore
	add	esp, 4
; Line 62
	jmp	SHORT $LN1@cbMax
$LN2@cbMax:
; Line 63
	mov	eax, DWORD PTR _hObj$13062[ebp]
	push	eax
	call	_FRAMEWIN_Maximize
	add	esp, 4
$LN1@cbMax:
; Line 65
	jmp	SHORT $LN4@cbMax
$LN3@cbMax:
; Line 67
	mov	eax, DWORD PTR _pMsg$[ebp]
	push	eax
	call	_BUTTON_Callback
	add	esp, 4
$LN4@cbMax:
; Line 68
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__cbMax	ENDP
_TEXT	ENDS
EXTRN	_GUI_SetColor:PROC
EXTRN	_WM_GetParent:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Draw
_TEXT	SEGMENT
_hFrame$ = -32						; size = 4
_Flags$ = -20						; size = 2
_pFrame$ = -8						; size = 4
_hObj$ = 8						; size = 4
__Draw	PROC						; COMDAT
; Line 117
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 122
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	_WM_GetParent
	add	esp, 4
	mov	DWORD PTR _hFrame$[ebp], eax
; Line 123
	mov	eax, DWORD PTR _hFrame$[ebp]
	push	eax
	call	_FRAMEWIN_LockH
	add	esp, 4
	mov	DWORD PTR _pFrame$[ebp], eax
; Line 124
	mov	eax, DWORD PTR _pFrame$[ebp]
	mov	cx, WORD PTR [eax+128]
	mov	WORD PTR _Flags$[ebp], cx
; Line 125
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pFrame$[ebp], 0
; Line 126
	push	0
	call	_GUI_SetColor
	add	esp, 4
; Line 127
	movzx	eax, WORD PTR _Flags$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN2@Draw
; Line 128
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__DrawRestore
	add	esp, 4
; Line 129
	jmp	SHORT $LN3@Draw
$LN2@Draw:
; Line 130
	mov	eax, DWORD PTR _hObj$[ebp]
	push	eax
	call	__DrawMax
	add	esp, 4
$LN3@Draw:
; Line 132
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Draw	ENDP
_TEXT	ENDS
EXTRN	_WM__GetNextIVR:PROC
EXTRN	_LCD_DrawVLine:PROC
EXTRN	_LCD_DrawHLine:PROC
EXTRN	_WM__InitIVRSearch:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	_WM_GetInsideRectEx:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __DrawMax
_TEXT	SEGMENT
_r$ = -12						; size = 8
_hObj$ = 8						; size = 4
__DrawMax PROC						; COMDAT
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 76
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_GetInsideRectEx
	add	esp, 8
; Line 77
	movsx	eax, WORD PTR _r$[ebp]
	add	eax, DWORD PTR _GUI_Context+64
	mov	WORD PTR _r$[ebp], ax
	movsx	eax, WORD PTR _r$[ebp+2]
	add	eax, DWORD PTR _GUI_Context+68
	mov	WORD PTR _r$[ebp+2], ax
; Line 78
	movsx	eax, WORD PTR _r$[ebp+4]
	add	eax, DWORD PTR _GUI_Context+64
	mov	WORD PTR _r$[ebp+4], ax
	movsx	eax, WORD PTR _r$[ebp+6]
	add	eax, DWORD PTR _GUI_Context+68
	mov	WORD PTR _r$[ebp+6], ax
; Line 79
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_WM__InitIVRSearch
	add	esp, 4
	test	eax, eax
	je	$LN5@DrawMax
$LN3@DrawMax:
; Line 80
	movsx	eax, WORD PTR _r$[ebp+4]
	sub	eax, 1
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+2]
	add	ecx, 1
	push	ecx
	movsx	edx, WORD PTR _r$[ebp]
	add	edx, 1
	push	edx
	call	_LCD_DrawHLine
	add	esp, 12					; 0000000cH
; Line 81
	movsx	eax, WORD PTR _r$[ebp+4]
	sub	eax, 1
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+2]
	add	ecx, 2
	push	ecx
	movsx	edx, WORD PTR _r$[ebp]
	add	edx, 1
	push	edx
	call	_LCD_DrawHLine
	add	esp, 12					; 0000000cH
; Line 82
	movsx	eax, WORD PTR _r$[ebp+4]
	sub	eax, 1
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+6]
	sub	ecx, 1
	push	ecx
	movsx	edx, WORD PTR _r$[ebp]
	add	edx, 1
	push	edx
	call	_LCD_DrawHLine
	add	esp, 12					; 0000000cH
; Line 83
	movsx	eax, WORD PTR _r$[ebp+6]
	sub	eax, 1
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+2]
	add	ecx, 1
	push	ecx
	movsx	edx, WORD PTR _r$[ebp]
	add	edx, 1
	push	edx
	call	_LCD_DrawVLine
	add	esp, 12					; 0000000cH
; Line 84
	movsx	eax, WORD PTR _r$[ebp+6]
	sub	eax, 1
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+2]
	add	ecx, 1
	push	ecx
	movsx	edx, WORD PTR _r$[ebp+4]
	sub	edx, 1
	push	edx
	call	_LCD_DrawVLine
	add	esp, 12					; 0000000cH
; Line 85
	call	_WM__GetNextIVR
	test	eax, eax
	jne	$LN3@DrawMax
$LN5@DrawMax:
; Line 86
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@DrawMax
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@DrawMax:
	DD	1
	DD	$LN8@DrawMax
$LN8@DrawMax:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN7@DrawMax
$LN7@DrawMax:
	DB	114					; 00000072H
	DB	0
__DrawMax ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawRestore
_TEXT	SEGMENT
_Size$ = -24						; size = 4
_r$ = -12						; size = 8
_hObj$ = 8						; size = 4
__DrawRestore PROC					; COMDAT
; Line 92
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 95
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObj$[ebp]
	push	ecx
	call	_WM_GetInsideRectEx
	add	esp, 8
; Line 96
	movsx	eax, WORD PTR _r$[ebp]
	add	eax, DWORD PTR _GUI_Context+64
	mov	WORD PTR _r$[ebp], ax
	movsx	eax, WORD PTR _r$[ebp+2]
	add	eax, DWORD PTR _GUI_Context+68
	mov	WORD PTR _r$[ebp+2], ax
; Line 97
	movsx	eax, WORD PTR _r$[ebp+4]
	add	eax, DWORD PTR _GUI_Context+64
	mov	WORD PTR _r$[ebp+4], ax
	movsx	eax, WORD PTR _r$[ebp+6]
	add	eax, DWORD PTR _GUI_Context+68
	mov	WORD PTR _r$[ebp+6], ax
; Line 98
	movsx	eax, WORD PTR _r$[ebp+4]
	movsx	ecx, WORD PTR _r$[ebp]
	sub	eax, ecx
	lea	eax, DWORD PTR [eax+eax+2]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _Size$[ebp], eax
; Line 99
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_WM__InitIVRSearch
	add	esp, 4
	test	eax, eax
	je	$LN5@DrawRestor
$LN3@DrawRestor:
; Line 100
	movsx	eax, WORD PTR _r$[ebp+4]
	sub	eax, 1
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+2]
	add	ecx, 1
	push	ecx
	movsx	edx, WORD PTR _r$[ebp+4]
	sub	edx, DWORD PTR _Size$[ebp]
	push	edx
	call	_LCD_DrawHLine
	add	esp, 12					; 0000000cH
; Line 101
	movsx	eax, WORD PTR _r$[ebp+4]
	sub	eax, 1
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+2]
	add	ecx, 2
	push	ecx
	movsx	edx, WORD PTR _r$[ebp+4]
	sub	edx, DWORD PTR _Size$[ebp]
	push	edx
	call	_LCD_DrawHLine
	add	esp, 12					; 0000000cH
; Line 102
	movsx	eax, WORD PTR _r$[ebp+4]
	sub	eax, 1
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+2]
	add	ecx, DWORD PTR _Size$[ebp]
	push	ecx
	movsx	edx, WORD PTR _r$[ebp]
	add	edx, DWORD PTR _Size$[ebp]
	push	edx
	call	_LCD_DrawHLine
	add	esp, 12					; 0000000cH
; Line 103
	movsx	eax, WORD PTR _r$[ebp+6]
	sub	eax, DWORD PTR _Size$[ebp]
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+2]
	add	ecx, 1
	push	ecx
	movsx	edx, WORD PTR _r$[ebp+4]
	sub	edx, DWORD PTR _Size$[ebp]
	push	edx
	call	_LCD_DrawVLine
	add	esp, 12					; 0000000cH
; Line 104
	movsx	eax, WORD PTR _r$[ebp+2]
	add	eax, DWORD PTR _Size$[ebp]
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+2]
	add	ecx, 1
	push	ecx
	movsx	edx, WORD PTR _r$[ebp+4]
	sub	edx, 1
	push	edx
	call	_LCD_DrawVLine
	add	esp, 12					; 0000000cH
; Line 105
	movsx	eax, WORD PTR _r$[ebp]
	add	eax, DWORD PTR _Size$[ebp]
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+6]
	sub	ecx, DWORD PTR _Size$[ebp]
	push	ecx
	movsx	edx, WORD PTR _r$[ebp]
	add	edx, 1
	push	edx
	call	_LCD_DrawHLine
	add	esp, 12					; 0000000cH
; Line 106
	movsx	eax, WORD PTR _r$[ebp]
	add	eax, DWORD PTR _Size$[ebp]
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+6]
	sub	ecx, DWORD PTR _Size$[ebp]
	add	ecx, 1
	push	ecx
	movsx	edx, WORD PTR _r$[ebp]
	add	edx, 1
	push	edx
	call	_LCD_DrawHLine
	add	esp, 12					; 0000000cH
; Line 107
	movsx	eax, WORD PTR _r$[ebp]
	add	eax, DWORD PTR _Size$[ebp]
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+6]
	sub	ecx, 1
	push	ecx
	movsx	edx, WORD PTR _r$[ebp]
	add	edx, 1
	push	edx
	call	_LCD_DrawHLine
	add	esp, 12					; 0000000cH
; Line 108
	movsx	eax, WORD PTR _r$[ebp+6]
	sub	eax, 1
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+6]
	sub	ecx, DWORD PTR _Size$[ebp]
	push	ecx
	movsx	edx, WORD PTR _r$[ebp]
	add	edx, 1
	push	edx
	call	_LCD_DrawVLine
	add	esp, 12					; 0000000cH
; Line 109
	movsx	eax, WORD PTR _r$[ebp+6]
	sub	eax, 1
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+6]
	sub	ecx, DWORD PTR _Size$[ebp]
	push	ecx
	movsx	edx, WORD PTR _r$[ebp]
	add	edx, DWORD PTR _Size$[ebp]
	push	edx
	call	_LCD_DrawVLine
	add	esp, 12					; 0000000cH
; Line 110
	call	_WM__GetNextIVR
	test	eax, eax
	jne	$LN3@DrawRestor
$LN5@DrawRestor:
; Line 111
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@DrawRestor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@DrawRestor:
	DD	1
	DD	$LN8@DrawRestor
$LN8@DrawRestor:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN7@DrawRestor
$LN7@DrawRestor:
	DB	114					; 00000072H
	DB	0
__DrawRestore ENDP
_TEXT	ENDS
END
