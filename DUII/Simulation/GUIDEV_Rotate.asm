; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\MemDev\GUIDEV_Rotate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_MEMDEV__Rotate
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\memdev\guidev_rotate.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_MEMDEV__Rotate
_TEXT	SEGMENT
_hSrc$ = 8						; size = 4
_hDst$ = 12						; size = 4
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
_a$ = 24						; size = 4
_Mag$ = 28						; size = 4
_AndMask$ = 32						; size = 4
_GUI_MEMDEV__Rotate PROC				; COMDAT
; Line 616
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 618
	mov	eax, DWORD PTR _hDst$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hSrc$[ebp]
	push	ecx
	call	__Check
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@GUI_MEMDEV
; Line 622
	mov	eax, DWORD PTR _AndMask$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Mag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _dy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hDst$[ebp]
	push	edx
	mov	eax, DWORD PTR _hSrc$[ebp]
	push	eax
	call	__Rotate32
	add	esp, 28					; 0000001cH
$LN2@GUI_MEMDEV:
; Line 626
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV__Rotate ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_GUI_ALLOC_UnlockH:PROC
EXTRN	_GUI__MixColors:PROC
EXTRN	_GUI__SinHQ:PROC
EXTRN	_GUI__CosHQ:PROC
EXTRN	_GUI_MEMDEV_GetDataPtr:PROC
EXTRN	_GUI_ALLOC_LockH:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Rotate32
_TEXT	SEGMENT
_Alpha$8735 = -321					; size = 1
_BkColor$8734 = -312					; size = 4
_Color$8733 = -300					; size = 4
_yEnd$ = -288						; size = 4
_xEnd$ = -276						; size = 4
_yStart$ = -264						; size = 4
_xStart$ = -252						; size = 4
_y0DstHQ$ = -240					; size = 4
_x0DstHQ$ = -228					; size = 4
_RectMinMax$ = -216					; size = 16
_pDataDst$ = -192					; size = 4
_pDataSrc$ = -180					; size = 4
_pMemDst$ = -168					; size = 4
_pMemSrc$ = -156					; size = 4
_yDst$ = -144						; size = 4
_xDst$ = -132						; size = 4
_y0SrcHQ$ = -120					; size = 4
_x0SrcHQ$ = -108					; size = 4
_ySizeSrc$ = -96					; size = 4
_xSizeSrc$ = -84					; size = 4
_yPosHQ$ = -72						; size = 4
_xPosHQ$ = -60						; size = 4
_sinHQ$ = -48						; size = 4
_cosHQ$ = -36						; size = 4
_sinMagHQ$ = -24					; size = 4
_cosMagHQ$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_hMemSrc$ = 8						; size = 4
_hMemDst$ = 12						; size = 4
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
_a$ = 24						; size = 4
_Mag$ = 28						; size = 4
_AndMask$ = 32						; size = 4
__Rotate32 PROC						; COMDAT
; Line 157
	push	ebp
	mov	ebp, esp
	sub	esp, 520				; 00000208H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-520]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 172
	cmp	DWORD PTR _Mag$[ebp], 0
	jne	SHORT $LN15@Rotate32
; Line 173
	jmp	$LN16@Rotate32
$LN15@Rotate32:
; Line 178
	mov	eax, DWORD PTR _hMemSrc$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pMemSrc$[ebp], eax
; Line 179
	mov	eax, DWORD PTR _hMemDst$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pMemDst$[ebp], eax
; Line 180
	mov	eax, DWORD PTR _hMemSrc$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetDataPtr
	add	esp, 4
	mov	DWORD PTR _pDataSrc$[ebp], eax
; Line 181
	mov	eax, DWORD PTR _hMemDst$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetDataPtr
	add	esp, 4
	mov	DWORD PTR _pDataDst$[ebp], eax
; Line 185
	mov	eax, DWORD PTR _pMemSrc$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR _xSizeSrc$[ebp], ecx
; Line 186
	mov	eax, DWORD PTR _pMemSrc$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	sub	ecx, 1
	mov	DWORD PTR _ySizeSrc$[ebp], ecx
; Line 187
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_GUI__CosHQ
	add	esp, 4
	mov	DWORD PTR _cosHQ$[ebp], eax
; Line 188
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_GUI__SinHQ
	add	esp, 4
	mov	DWORD PTR _sinHQ$[ebp], eax
; Line 189
	mov	eax, DWORD PTR _cosHQ$[ebp]
	imul	eax, 1000				; 000003e8H
	cdq
	idiv	DWORD PTR _Mag$[ebp]
	mov	DWORD PTR _cosMagHQ$[ebp], eax
; Line 190
	mov	eax, DWORD PTR _sinHQ$[ebp]
	imul	eax, 1000				; 000003e8H
	cdq
	idiv	DWORD PTR _Mag$[ebp]
	mov	DWORD PTR _sinMagHQ$[ebp], eax
; Line 195
	mov	eax, DWORD PTR _xSizeSrc$[ebp]
	shl	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _sinMagHQ$[ebp]
	imul	ecx, DWORD PTR _ySizeSrc$[ebp]
	sar	ecx, 1
	add	eax, ecx
	mov	edx, DWORD PTR _cosMagHQ$[ebp]
	imul	edx, DWORD PTR _xSizeSrc$[ebp]
	sar	edx, 1
	sub	eax, edx
	mov	ecx, DWORD PTR _sinMagHQ$[ebp]
	imul	ecx, DWORD PTR _dy$[ebp]
	add	eax, ecx
	mov	edx, DWORD PTR _cosMagHQ$[ebp]
	imul	edx, DWORD PTR _dx$[ebp]
	sub	eax, edx
	mov	DWORD PTR _x0SrcHQ$[ebp], eax
; Line 200
	mov	eax, DWORD PTR _ySizeSrc$[ebp]
	shl	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _cosMagHQ$[ebp]
	imul	ecx, DWORD PTR _ySizeSrc$[ebp]
	sar	ecx, 1
	sub	eax, ecx
	mov	edx, DWORD PTR _sinMagHQ$[ebp]
	imul	edx, DWORD PTR _xSizeSrc$[ebp]
	sar	edx, 1
	sub	eax, edx
	mov	ecx, DWORD PTR _cosMagHQ$[ebp]
	imul	ecx, DWORD PTR _dy$[ebp]
	sub	eax, ecx
	mov	edx, DWORD PTR _sinMagHQ$[ebp]
	imul	edx, DWORD PTR _dx$[ebp]
	sub	eax, edx
	mov	DWORD PTR _y0SrcHQ$[ebp], eax
; Line 204
	mov	ecx, DWORD PTR _xSizeSrc$[ebp]
	shl	ecx, 15					; 0000000fH
	mov	eax, DWORD PTR _sinHQ$[ebp]
	imul	eax, DWORD PTR _Mag$[ebp]
	cdq
	mov	esi, 1000				; 000003e8H
	idiv	esi
	mov	edx, DWORD PTR _pMemSrc$[ebp]
	movsx	edx, WORD PTR [edx+10]
	imul	eax, edx
	sar	eax, 1
	sub	ecx, eax
	mov	eax, DWORD PTR _cosHQ$[ebp]
	imul	eax, DWORD PTR _Mag$[ebp]
	cdq
	mov	esi, 1000				; 000003e8H
	idiv	esi
	mov	edx, DWORD PTR _pMemSrc$[ebp]
	movsx	edx, WORD PTR [edx+8]
	imul	eax, edx
	sar	eax, 1
	sub	ecx, eax
	mov	eax, DWORD PTR _dx$[ebp]
	shl	eax, 16					; 00000010H
	add	ecx, eax
	mov	DWORD PTR _x0DstHQ$[ebp], ecx
; Line 208
	mov	ecx, DWORD PTR _ySizeSrc$[ebp]
	shl	ecx, 15					; 0000000fH
	mov	eax, DWORD PTR _cosHQ$[ebp]
	imul	eax, DWORD PTR _Mag$[ebp]
	cdq
	mov	esi, 1000				; 000003e8H
	idiv	esi
	mov	edx, DWORD PTR _pMemSrc$[ebp]
	movsx	edx, WORD PTR [edx+10]
	imul	eax, edx
	sar	eax, 1
	sub	ecx, eax
	mov	eax, DWORD PTR _sinHQ$[ebp]
	imul	eax, DWORD PTR _Mag$[ebp]
	cdq
	mov	esi, 1000				; 000003e8H
	idiv	esi
	mov	edx, DWORD PTR _pMemSrc$[ebp]
	movsx	edx, WORD PTR [edx+8]
	imul	eax, edx
	sar	eax, 1
	add	ecx, eax
	mov	eax, DWORD PTR _dy$[ebp]
	shl	eax, 16					; 00000010H
	add	ecx, eax
	mov	DWORD PTR _y0DstHQ$[ebp], ecx
; Line 209
	lea	eax, DWORD PTR _RectMinMax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Mag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pMemSrc$[ebp]
	movsx	eax, WORD PTR [edx+10]
	push	eax
	mov	ecx, DWORD PTR _pMemSrc$[ebp]
	movsx	edx, WORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _cosHQ$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sinHQ$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0DstHQ$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0DstHQ$[ebp]
	push	eax
	call	__GetMinMax
	add	esp, 32					; 00000020H
; Line 213
	mov	eax, DWORD PTR _RectMinMax$[ebp+8]
	mov	DWORD PTR _yStart$[ebp], eax
; Line 214
	mov	eax, DWORD PTR _RectMinMax$[ebp+12]
	mov	DWORD PTR _yEnd$[ebp], eax
; Line 215
	cmp	DWORD PTR _yStart$[ebp], 0
	jge	SHORT $LN14@Rotate32
; Line 216
	mov	DWORD PTR _yStart$[ebp], 0
$LN14@Rotate32:
; Line 218
	mov	eax, DWORD PTR _pMemDst$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	cmp	DWORD PTR _yEnd$[ebp], ecx
	jl	SHORT $LN13@Rotate32
; Line 219
	mov	eax, DWORD PTR _pMemDst$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	sub	ecx, 1
	mov	DWORD PTR _yEnd$[ebp], ecx
$LN13@Rotate32:
; Line 221
	mov	eax, DWORD PTR _sinMagHQ$[ebp]
	imul	eax, DWORD PTR _yStart$[ebp]
	mov	ecx, DWORD PTR _x0SrcHQ$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _x0SrcHQ$[ebp], ecx
; Line 222
	mov	eax, DWORD PTR _cosMagHQ$[ebp]
	imul	eax, DWORD PTR _yStart$[ebp]
	add	eax, DWORD PTR _y0SrcHQ$[ebp]
	mov	DWORD PTR _y0SrcHQ$[ebp], eax
; Line 226
	mov	eax, DWORD PTR _RectMinMax$[ebp]
	mov	DWORD PTR _xStart$[ebp], eax
; Line 227
	mov	eax, DWORD PTR _RectMinMax$[ebp+4]
	mov	DWORD PTR _xEnd$[ebp], eax
; Line 228
	cmp	DWORD PTR _xStart$[ebp], 0
	jge	SHORT $LN12@Rotate32
; Line 229
	mov	DWORD PTR _xStart$[ebp], 0
$LN12@Rotate32:
; Line 231
	mov	eax, DWORD PTR _pMemDst$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	cmp	DWORD PTR _xEnd$[ebp], ecx
	jl	SHORT $LN11@Rotate32
; Line 232
	mov	eax, DWORD PTR _pMemDst$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR _xEnd$[ebp], ecx
$LN11@Rotate32:
; Line 234
	mov	eax, DWORD PTR _cosMagHQ$[ebp]
	imul	eax, DWORD PTR _xStart$[ebp]
	add	eax, DWORD PTR _x0SrcHQ$[ebp]
	mov	DWORD PTR _x0SrcHQ$[ebp], eax
; Line 235
	mov	eax, DWORD PTR _sinMagHQ$[ebp]
	imul	eax, DWORD PTR _xStart$[ebp]
	add	eax, DWORD PTR _y0SrcHQ$[ebp]
	mov	DWORD PTR _y0SrcHQ$[ebp], eax
; Line 239
	mov	eax, DWORD PTR _pMemDst$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	imul	ecx, DWORD PTR _yStart$[ebp]
	mov	edx, DWORD PTR _pDataDst$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _pDataDst$[ebp], eax
; Line 240
	mov	eax, DWORD PTR _yStart$[ebp]
	mov	DWORD PTR _yDst$[ebp], eax
	jmp	SHORT $LN10@Rotate32
$LN9@Rotate32:
	mov	eax, DWORD PTR _yDst$[ebp]
	add	eax, 1
	mov	DWORD PTR _yDst$[ebp], eax
$LN10@Rotate32:
	mov	eax, DWORD PTR _yDst$[ebp]
	cmp	eax, DWORD PTR _yEnd$[ebp]
	jg	$LN8@Rotate32
; Line 241
	mov	eax, DWORD PTR _x0SrcHQ$[ebp]
	mov	DWORD PTR _xPosHQ$[ebp], eax
; Line 242
	mov	eax, DWORD PTR _y0SrcHQ$[ebp]
	mov	DWORD PTR _yPosHQ$[ebp], eax
; Line 246
	mov	eax, DWORD PTR _xStart$[ebp]
	mov	ecx, DWORD PTR _pDataDst$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pDataDst$[ebp], edx
; Line 247
	mov	eax, DWORD PTR _xStart$[ebp]
	mov	DWORD PTR _xDst$[ebp], eax
	jmp	SHORT $LN7@Rotate32
$LN6@Rotate32:
	mov	eax, DWORD PTR _xDst$[ebp]
	add	eax, 1
	mov	DWORD PTR _xDst$[ebp], eax
$LN7@Rotate32:
	mov	eax, DWORD PTR _xDst$[ebp]
	cmp	eax, DWORD PTR _xEnd$[ebp]
	jg	$LN5@Rotate32
; Line 250
	mov	eax, DWORD PTR _yPosHQ$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xPosHQ$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDataSrc$[ebp]
	push	edx
	mov	eax, DWORD PTR _pMemSrc$[ebp]
	push	eax
	call	__GetColor
	add	esp, 16					; 00000010H
	mov	DWORD PTR _Color$8733[ebp], eax
; Line 251
	mov	eax, DWORD PTR _Color$8733[ebp]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _Alpha$8735[ebp], al
; Line 252
	movzx	eax, BYTE PTR _Alpha$8735[ebp]
	test	eax, eax
	jne	SHORT $LN4@Rotate32
; Line 256
	mov	eax, DWORD PTR _pDataDst$[ebp]
	mov	ecx, DWORD PTR _Color$8733[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN3@Rotate32
$LN4@Rotate32:
; Line 257
	movzx	eax, BYTE PTR _Alpha$8735[ebp]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN3@Rotate32
; Line 258
	movzx	eax, BYTE PTR _Alpha$8735[ebp]
	test	eax, eax
	jle	SHORT $LN3@Rotate32
; Line 262
	mov	eax, DWORD PTR _pDataDst$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _BkColor$8734[ebp], ecx
; Line 263
	movzx	eax, BYTE PTR _Alpha$8735[ebp]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _BkColor$8734[ebp]
	push	edx
	mov	eax, DWORD PTR _Color$8733[ebp]
	push	eax
	call	_GUI__MixColors
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Color$8733[ebp], eax
; Line 264
	mov	eax, DWORD PTR _Color$8733[ebp]
	and	eax, DWORD PTR _AndMask$[ebp]
	mov	DWORD PTR _Color$8733[ebp], eax
; Line 265
	mov	eax, DWORD PTR _pDataDst$[ebp]
	mov	ecx, DWORD PTR _Color$8733[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@Rotate32:
; Line 282
	mov	eax, DWORD PTR _xPosHQ$[ebp]
	add	eax, DWORD PTR _cosMagHQ$[ebp]
	mov	DWORD PTR _xPosHQ$[ebp], eax
; Line 283
	mov	eax, DWORD PTR _yPosHQ$[ebp]
	add	eax, DWORD PTR _sinMagHQ$[ebp]
	mov	DWORD PTR _yPosHQ$[ebp], eax
; Line 284
	mov	eax, DWORD PTR _pDataDst$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDataDst$[ebp], eax
; Line 285
	jmp	$LN6@Rotate32
$LN5@Rotate32:
; Line 286
	mov	eax, DWORD PTR _pMemDst$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	sub	ecx, DWORD PTR _xEnd$[ebp]
	mov	edx, DWORD PTR _pDataDst$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4-4]
	mov	DWORD PTR _pDataDst$[ebp], eax
; Line 287
	mov	eax, DWORD PTR _x0SrcHQ$[ebp]
	sub	eax, DWORD PTR _sinMagHQ$[ebp]
	mov	DWORD PTR _x0SrcHQ$[ebp], eax
; Line 288
	mov	eax, DWORD PTR _y0SrcHQ$[ebp]
	add	eax, DWORD PTR _cosMagHQ$[ebp]
	mov	DWORD PTR _y0SrcHQ$[ebp], eax
; Line 289
	jmp	$LN9@Rotate32
$LN8@Rotate32:
; Line 293
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pMemSrc$[ebp], 0
; Line 294
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pMemDst$[ebp], 0
$LN16@Rotate32:
; Line 295
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@Rotate32
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 520				; 00000208H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN20@Rotate32:
	DD	1
	DD	$LN19@Rotate32
$LN19@Rotate32:
	DD	-216					; ffffff28H
	DD	16					; 00000010H
	DD	$LN18@Rotate32
$LN18@Rotate32:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	0
__Rotate32 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetMinMax
_TEXT	SEGMENT
_sinMagHQ$ = -164					; size = 4
_cosMagHQ$ = -152					; size = 4
_y3HQ$ = -140						; size = 4
_y2HQ$ = -128						; size = 4
_y1HQ$ = -116						; size = 4
_y0HQ$ = -104						; size = 4
_x3HQ$ = -92						; size = 4
_x2HQ$ = -80						; size = 4
_x1HQ$ = -68						; size = 4
_x0HQ$ = -56						; size = 4
_yMaxHQ$ = -44						; size = 4
_yMinHQ$ = -32						; size = 4
_xMaxHQ$ = -20						; size = 4
_xMinHQ$ = -8						; size = 4
_x0SrcHQ$ = 8						; size = 4
_y0SrcHQ$ = 12						; size = 4
_sinHQ$ = 16						; size = 4
_cosHQ$ = 20						; size = 4
_xSize$ = 24						; size = 4
_ySize$ = 28						; size = 4
_Mag$ = 32						; size = 4
_pRectMinMax$ = 36					; size = 4
__GetMinMax PROC					; COMDAT
; Line 62
	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 68
	mov	eax, DWORD PTR _cosHQ$[ebp]
	imul	eax, DWORD PTR _Mag$[ebp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	mov	DWORD PTR _cosMagHQ$[ebp], eax
; Line 69
	mov	eax, DWORD PTR _sinHQ$[ebp]
	imul	eax, DWORD PTR _Mag$[ebp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	mov	DWORD PTR _sinMagHQ$[ebp], eax
; Line 70
	mov	eax, DWORD PTR _x0SrcHQ$[ebp]
	mov	DWORD PTR _x0HQ$[ebp], eax
; Line 71
	mov	eax, DWORD PTR _y0SrcHQ$[ebp]
	mov	DWORD PTR _y0HQ$[ebp], eax
; Line 72
	mov	eax, DWORD PTR _cosMagHQ$[ebp]
	imul	eax, DWORD PTR _xSize$[ebp]
	add	eax, DWORD PTR _x0HQ$[ebp]
	mov	DWORD PTR _x1HQ$[ebp], eax
; Line 73
	mov	eax, DWORD PTR _sinMagHQ$[ebp]
	imul	eax, DWORD PTR _xSize$[ebp]
	mov	ecx, DWORD PTR _y0HQ$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _y1HQ$[ebp], ecx
; Line 74
	mov	eax, DWORD PTR _sinMagHQ$[ebp]
	imul	eax, DWORD PTR _ySize$[ebp]
	add	eax, DWORD PTR _x1HQ$[ebp]
	mov	DWORD PTR _x2HQ$[ebp], eax
; Line 75
	mov	eax, DWORD PTR _cosMagHQ$[ebp]
	imul	eax, DWORD PTR _ySize$[ebp]
	add	eax, DWORD PTR _y1HQ$[ebp]
	mov	DWORD PTR _y2HQ$[ebp], eax
; Line 76
	mov	eax, DWORD PTR _cosMagHQ$[ebp]
	imul	eax, DWORD PTR _xSize$[ebp]
	mov	ecx, DWORD PTR _x2HQ$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _x3HQ$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _sinMagHQ$[ebp]
	imul	eax, DWORD PTR _xSize$[ebp]
	add	eax, DWORD PTR _y2HQ$[ebp]
	mov	DWORD PTR _y3HQ$[ebp], eax
; Line 78
	mov	eax, DWORD PTR _x0HQ$[ebp]
	mov	DWORD PTR _xMinHQ$[ebp], eax
; Line 79
	mov	eax, DWORD PTR _xMinHQ$[ebp]
	cmp	eax, DWORD PTR _x1HQ$[ebp]
	jle	SHORT $LN12@GetMinMax
; Line 80
	mov	eax, DWORD PTR _x1HQ$[ebp]
	mov	DWORD PTR _xMinHQ$[ebp], eax
$LN12@GetMinMax:
; Line 82
	mov	eax, DWORD PTR _xMinHQ$[ebp]
	cmp	eax, DWORD PTR _x2HQ$[ebp]
	jle	SHORT $LN11@GetMinMax
; Line 83
	mov	eax, DWORD PTR _x2HQ$[ebp]
	mov	DWORD PTR _xMinHQ$[ebp], eax
$LN11@GetMinMax:
; Line 85
	mov	eax, DWORD PTR _xMinHQ$[ebp]
	cmp	eax, DWORD PTR _x3HQ$[ebp]
	jle	SHORT $LN10@GetMinMax
; Line 86
	mov	eax, DWORD PTR _x3HQ$[ebp]
	mov	DWORD PTR _xMinHQ$[ebp], eax
$LN10@GetMinMax:
; Line 88
	mov	eax, DWORD PTR _x0HQ$[ebp]
	mov	DWORD PTR _xMaxHQ$[ebp], eax
; Line 89
	mov	eax, DWORD PTR _xMaxHQ$[ebp]
	cmp	eax, DWORD PTR _x1HQ$[ebp]
	jge	SHORT $LN9@GetMinMax
; Line 90
	mov	eax, DWORD PTR _x1HQ$[ebp]
	mov	DWORD PTR _xMaxHQ$[ebp], eax
$LN9@GetMinMax:
; Line 92
	mov	eax, DWORD PTR _xMaxHQ$[ebp]
	cmp	eax, DWORD PTR _x2HQ$[ebp]
	jge	SHORT $LN8@GetMinMax
; Line 93
	mov	eax, DWORD PTR _x2HQ$[ebp]
	mov	DWORD PTR _xMaxHQ$[ebp], eax
$LN8@GetMinMax:
; Line 95
	mov	eax, DWORD PTR _xMaxHQ$[ebp]
	cmp	eax, DWORD PTR _x3HQ$[ebp]
	jge	SHORT $LN7@GetMinMax
; Line 96
	mov	eax, DWORD PTR _x3HQ$[ebp]
	mov	DWORD PTR _xMaxHQ$[ebp], eax
$LN7@GetMinMax:
; Line 98
	mov	eax, DWORD PTR _y0HQ$[ebp]
	mov	DWORD PTR _yMinHQ$[ebp], eax
; Line 99
	mov	eax, DWORD PTR _yMinHQ$[ebp]
	cmp	eax, DWORD PTR _y1HQ$[ebp]
	jle	SHORT $LN6@GetMinMax
; Line 100
	mov	eax, DWORD PTR _y1HQ$[ebp]
	mov	DWORD PTR _yMinHQ$[ebp], eax
$LN6@GetMinMax:
; Line 102
	mov	eax, DWORD PTR _yMinHQ$[ebp]
	cmp	eax, DWORD PTR _y2HQ$[ebp]
	jle	SHORT $LN5@GetMinMax
; Line 103
	mov	eax, DWORD PTR _y2HQ$[ebp]
	mov	DWORD PTR _yMinHQ$[ebp], eax
$LN5@GetMinMax:
; Line 105
	mov	eax, DWORD PTR _yMinHQ$[ebp]
	cmp	eax, DWORD PTR _y3HQ$[ebp]
	jle	SHORT $LN4@GetMinMax
; Line 106
	mov	eax, DWORD PTR _y3HQ$[ebp]
	mov	DWORD PTR _yMinHQ$[ebp], eax
$LN4@GetMinMax:
; Line 108
	mov	eax, DWORD PTR _y0HQ$[ebp]
	mov	DWORD PTR _yMaxHQ$[ebp], eax
; Line 109
	mov	eax, DWORD PTR _yMaxHQ$[ebp]
	cmp	eax, DWORD PTR _y1HQ$[ebp]
	jge	SHORT $LN3@GetMinMax
; Line 110
	mov	eax, DWORD PTR _y1HQ$[ebp]
	mov	DWORD PTR _yMaxHQ$[ebp], eax
$LN3@GetMinMax:
; Line 112
	mov	eax, DWORD PTR _yMaxHQ$[ebp]
	cmp	eax, DWORD PTR _y2HQ$[ebp]
	jge	SHORT $LN2@GetMinMax
; Line 113
	mov	eax, DWORD PTR _y2HQ$[ebp]
	mov	DWORD PTR _yMaxHQ$[ebp], eax
$LN2@GetMinMax:
; Line 115
	mov	eax, DWORD PTR _yMaxHQ$[ebp]
	cmp	eax, DWORD PTR _y3HQ$[ebp]
	jge	SHORT $LN1@GetMinMax
; Line 116
	mov	eax, DWORD PTR _y3HQ$[ebp]
	mov	DWORD PTR _yMaxHQ$[ebp], eax
$LN1@GetMinMax:
; Line 118
	mov	eax, DWORD PTR _xMinHQ$[ebp]
	add	eax, 32768				; 00008000H
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pRectMinMax$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 119
	mov	eax, DWORD PTR _yMinHQ$[ebp]
	add	eax, 32768				; 00008000H
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pRectMinMax$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 120
	mov	eax, DWORD PTR _xMaxHQ$[ebp]
	sub	eax, 32768				; 00008000H
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pRectMinMax$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 121
	mov	eax, DWORD PTR _yMaxHQ$[ebp]
	sub	eax, 32768				; 00008000H
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pRectMinMax$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 122
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetMinMax ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetColor
_TEXT	SEGMENT
_yOff$ = -32						; size = 4
_xOff$ = -20						; size = 4
_Color$ = -8						; size = 4
_pMem$ = 8						; size = 4
_pData$ = 12						; size = 4
_xOffHQ$ = 16						; size = 4
_yOffHQ$ = 20						; size = 4
__GetColor PROC						; COMDAT
; Line 128
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 131
	mov	DWORD PTR _Color$[ebp], -16777216	; ff000000H
; Line 135
	mov	eax, DWORD PTR _xOffHQ$[ebp]
	add	eax, 32768				; 00008000H
	sar	eax, 16					; 00000010H
	mov	DWORD PTR _xOff$[ebp], eax
; Line 136
	mov	eax, DWORD PTR _yOffHQ$[ebp]
	add	eax, 32768				; 00008000H
	sar	eax, 16					; 00000010H
	mov	DWORD PTR _yOff$[ebp], eax
; Line 140
	cmp	DWORD PTR _xOff$[ebp], 0
	jl	SHORT $LN3@GetColor
	cmp	DWORD PTR _yOff$[ebp], 0
	jge	SHORT $LN4@GetColor
$LN3@GetColor:
; Line 141
	mov	eax, DWORD PTR _Color$[ebp]
	jmp	SHORT $LN5@GetColor
$LN4@GetColor:
; Line 143
	mov	eax, DWORD PTR _pMem$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	cmp	DWORD PTR _xOff$[ebp], ecx
	jge	SHORT $LN1@GetColor
	mov	eax, DWORD PTR _pMem$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	cmp	DWORD PTR _yOff$[ebp], ecx
	jl	SHORT $LN2@GetColor
$LN1@GetColor:
; Line 144
	mov	eax, DWORD PTR _Color$[ebp]
	jmp	SHORT $LN5@GetColor
$LN2@GetColor:
; Line 149
	mov	eax, DWORD PTR _pMem$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	imul	ecx, DWORD PTR _yOff$[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _xOff$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _Color$[ebp], edx
; Line 150
	mov	eax, DWORD PTR _Color$[ebp]
$LN5@GetColor:
; Line 151
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetColor ENDP
_TEXT	ENDS
EXTRN	_GUI_MEMDEV_GetBitsPerPixel:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Check
_TEXT	SEGMENT
_BppDst$ = -20						; size = 4
_BppSrc$ = -8						; size = 4
_hSrc$ = 8						; size = 4
_hDst$ = 12						; size = 4
__Check	PROC						; COMDAT
; Line 595
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 598
	mov	eax, DWORD PTR _hSrc$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetBitsPerPixel
	add	esp, 4
	mov	DWORD PTR _BppSrc$[ebp], eax
; Line 599
	mov	eax, DWORD PTR _hDst$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetBitsPerPixel
	add	esp, 4
	mov	DWORD PTR _BppDst$[ebp], eax
; Line 600
	cmp	DWORD PTR _BppSrc$[ebp], 32		; 00000020H
	jne	SHORT $LN1@Check
	cmp	DWORD PTR _BppDst$[ebp], 32		; 00000020H
	jne	SHORT $LN1@Check
; Line 601
	xor	eax, eax
	jmp	SHORT $LN2@Check
$LN1@Check:
; Line 603
	mov	eax, 1
$LN2@Check:
; Line 604
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Check	ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEMDEV_Rotate
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEMDEV_Rotate
_TEXT	SEGMENT
_hSrc$ = 8						; size = 4
_hDst$ = 12						; size = 4
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
_a$ = 24						; size = 4
_Mag$ = 28						; size = 4
_GUI_MEMDEV_Rotate PROC					; COMDAT
; Line 632
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 633
	push	-1
	mov	eax, DWORD PTR _Mag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dy$[ebp]
	push	edx
	mov	eax, DWORD PTR _dx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hDst$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hSrc$[ebp]
	push	edx
	call	_GUI_MEMDEV__Rotate
	add	esp, 28					; 0000001cH
; Line 634
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV_Rotate ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEMDEV_RotateHQ
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEMDEV_RotateHQ
_TEXT	SEGMENT
_hSrc$ = 8						; size = 4
_hDst$ = 12						; size = 4
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
_a$ = 24						; size = 4
_Mag$ = 28						; size = 4
_GUI_MEMDEV_RotateHQ PROC				; COMDAT
; Line 640
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 642
	mov	eax, DWORD PTR _hDst$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hSrc$[ebp]
	push	ecx
	call	__Check
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@GUI_MEMDEV@2
; Line 646
	mov	eax, DWORD PTR _Mag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dy$[ebp]
	push	edx
	mov	eax, DWORD PTR _dx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hDst$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hSrc$[ebp]
	push	edx
	call	__Rotate32HQ
	add	esp, 24					; 00000018H
$LN2@GUI_MEMDEV@2:
; Line 650
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV_RotateHQ ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Rotate32HQ
_TEXT	SEGMENT
_Alpha$8853 = -333					; size = 1
_BkColor$8852 = -324					; size = 4
_Color$8851 = -312					; size = 4
_yEnd$ = -300						; size = 4
_xEnd$ = -288						; size = 4
_yStart$ = -276						; size = 4
_xStart$ = -264						; size = 4
_y0DstHQ$ = -252					; size = 4
_x0DstHQ$ = -240					; size = 4
_RectMinMax$ = -228					; size = 16
_pDataDst$ = -204					; size = 4
_pDataSrc$ = -192					; size = 4
_pMemDst$ = -180					; size = 4
_pMemSrc$ = -168					; size = 4
_PixelSizeHQ$ = -156					; size = 4
_yDst$ = -144						; size = 4
_xDst$ = -132						; size = 4
_y0SrcHQ$ = -120					; size = 4
_x0SrcHQ$ = -108					; size = 4
_ySizeSrc$ = -96					; size = 4
_xSizeSrc$ = -84					; size = 4
_yPosHQ$ = -72						; size = 4
_xPosHQ$ = -60						; size = 4
_sinHQ$ = -48						; size = 4
_cosHQ$ = -36						; size = 4
_sinMagHQ$ = -24					; size = 4
_cosMagHQ$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_hMemSrc$ = 8						; size = 4
_hMemDst$ = 12						; size = 4
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
_a$ = 24						; size = 4
_Mag$ = 28						; size = 4
__Rotate32HQ PROC					; COMDAT
; Line 445
	push	ebp
	mov	ebp, esp
	sub	esp, 532				; 00000214H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-532]
	mov	ecx, 133				; 00000085H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 461
	cmp	DWORD PTR _Mag$[ebp], 0
	jne	SHORT $LN15@Rotate32HQ
; Line 462
	jmp	$LN16@Rotate32HQ
$LN15@Rotate32HQ:
; Line 467
	mov	eax, DWORD PTR _hMemSrc$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pMemSrc$[ebp], eax
; Line 468
	mov	eax, DWORD PTR _hMemDst$[ebp]
	push	eax
	call	_GUI_ALLOC_LockH
	add	esp, 4
	mov	DWORD PTR _pMemDst$[ebp], eax
; Line 469
	mov	eax, DWORD PTR _hMemSrc$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetDataPtr
	add	esp, 4
	mov	DWORD PTR _pDataSrc$[ebp], eax
; Line 470
	mov	eax, DWORD PTR _hMemDst$[ebp]
	push	eax
	call	_GUI_MEMDEV_GetDataPtr
	add	esp, 4
	mov	DWORD PTR _pDataDst$[ebp], eax
; Line 474
	mov	eax, 65536000				; 03e80000H
	cdq
	idiv	DWORD PTR _Mag$[ebp]
	mov	DWORD PTR _PixelSizeHQ$[ebp], eax
; Line 475
	mov	eax, DWORD PTR _pMemSrc$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	DWORD PTR _xSizeSrc$[ebp], ecx
; Line 476
	mov	eax, DWORD PTR _pMemSrc$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	mov	DWORD PTR _ySizeSrc$[ebp], ecx
; Line 477
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_GUI__CosHQ
	add	esp, 4
	mov	DWORD PTR _cosHQ$[ebp], eax
; Line 478
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_GUI__SinHQ
	add	esp, 4
	mov	DWORD PTR _sinHQ$[ebp], eax
; Line 479
	mov	eax, DWORD PTR _cosHQ$[ebp]
	imul	eax, 1000				; 000003e8H
	cdq
	idiv	DWORD PTR _Mag$[ebp]
	mov	DWORD PTR _cosMagHQ$[ebp], eax
; Line 480
	mov	eax, DWORD PTR _sinHQ$[ebp]
	imul	eax, 1000				; 000003e8H
	cdq
	idiv	DWORD PTR _Mag$[ebp]
	mov	DWORD PTR _sinMagHQ$[ebp], eax
; Line 487
	mov	eax, DWORD PTR _xSizeSrc$[ebp]
	shl	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _sinMagHQ$[ebp]
	imul	ecx, DWORD PTR _ySizeSrc$[ebp]
	sar	ecx, 1
	add	eax, ecx
	mov	edx, DWORD PTR _cosMagHQ$[ebp]
	imul	edx, DWORD PTR _xSizeSrc$[ebp]
	sar	edx, 1
	sub	eax, edx
	mov	ecx, DWORD PTR _sinMagHQ$[ebp]
	sar	ecx, 1
	sub	eax, ecx
	mov	edx, DWORD PTR _cosMagHQ$[ebp]
	sar	edx, 1
	add	eax, edx
	mov	ecx, DWORD PTR _sinMagHQ$[ebp]
	imul	ecx, DWORD PTR _dy$[ebp]
	add	eax, ecx
	mov	edx, DWORD PTR _cosMagHQ$[ebp]
	imul	edx, DWORD PTR _dx$[ebp]
	sub	eax, edx
	mov	DWORD PTR _x0SrcHQ$[ebp], eax
; Line 494
	mov	eax, DWORD PTR _ySizeSrc$[ebp]
	shl	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _cosMagHQ$[ebp]
	imul	ecx, DWORD PTR _ySizeSrc$[ebp]
	sar	ecx, 1
	sub	eax, ecx
	mov	edx, DWORD PTR _sinMagHQ$[ebp]
	imul	edx, DWORD PTR _xSizeSrc$[ebp]
	sar	edx, 1
	sub	eax, edx
	mov	ecx, DWORD PTR _cosMagHQ$[ebp]
	sar	ecx, 1
	add	eax, ecx
	mov	edx, DWORD PTR _sinMagHQ$[ebp]
	sar	edx, 1
	add	eax, edx
	mov	ecx, DWORD PTR _cosMagHQ$[ebp]
	imul	ecx, DWORD PTR _dy$[ebp]
	sub	eax, ecx
	mov	edx, DWORD PTR _sinMagHQ$[ebp]
	imul	edx, DWORD PTR _dx$[ebp]
	sub	eax, edx
	mov	DWORD PTR _y0SrcHQ$[ebp], eax
; Line 499
	mov	ecx, DWORD PTR _xSizeSrc$[ebp]
	shl	ecx, 15					; 0000000fH
	mov	eax, DWORD PTR _sinHQ$[ebp]
	imul	eax, DWORD PTR _Mag$[ebp]
	cdq
	mov	esi, 1000				; 000003e8H
	idiv	esi
	imul	eax, DWORD PTR _ySizeSrc$[ebp]
	sar	eax, 1
	sub	ecx, eax
	mov	eax, DWORD PTR _cosHQ$[ebp]
	imul	eax, DWORD PTR _Mag$[ebp]
	cdq
	mov	esi, 1000				; 000003e8H
	idiv	esi
	imul	eax, DWORD PTR _xSizeSrc$[ebp]
	sar	eax, 1
	sub	ecx, eax
	mov	edx, DWORD PTR _dx$[ebp]
	shl	edx, 16					; 00000010H
	add	ecx, edx
	mov	DWORD PTR _x0DstHQ$[ebp], ecx
; Line 503
	mov	ecx, DWORD PTR _ySizeSrc$[ebp]
	shl	ecx, 15					; 0000000fH
	mov	eax, DWORD PTR _cosHQ$[ebp]
	imul	eax, DWORD PTR _Mag$[ebp]
	cdq
	mov	esi, 1000				; 000003e8H
	idiv	esi
	imul	eax, DWORD PTR _ySizeSrc$[ebp]
	sar	eax, 1
	sub	ecx, eax
	mov	eax, DWORD PTR _sinHQ$[ebp]
	imul	eax, DWORD PTR _Mag$[ebp]
	cdq
	mov	esi, 1000				; 000003e8H
	idiv	esi
	imul	eax, DWORD PTR _xSizeSrc$[ebp]
	sar	eax, 1
	add	ecx, eax
	mov	edx, DWORD PTR _dy$[ebp]
	shl	edx, 16					; 00000010H
	add	ecx, edx
	mov	DWORD PTR _y0DstHQ$[ebp], ecx
; Line 504
	lea	eax, DWORD PTR _RectMinMax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Mag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ySizeSrc$[ebp]
	push	edx
	mov	eax, DWORD PTR _xSizeSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cosHQ$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sinHQ$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0DstHQ$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0DstHQ$[ebp]
	push	ecx
	call	__GetMinMax
	add	esp, 32					; 00000020H
; Line 508
	mov	eax, DWORD PTR _RectMinMax$[ebp+8]
	mov	DWORD PTR _yStart$[ebp], eax
; Line 509
	mov	eax, DWORD PTR _RectMinMax$[ebp+12]
	mov	DWORD PTR _yEnd$[ebp], eax
; Line 510
	cmp	DWORD PTR _yStart$[ebp], 0
	jge	SHORT $LN14@Rotate32HQ
; Line 511
	mov	DWORD PTR _yStart$[ebp], 0
$LN14@Rotate32HQ:
; Line 513
	mov	eax, DWORD PTR _pMemDst$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	cmp	DWORD PTR _yEnd$[ebp], ecx
	jl	SHORT $LN13@Rotate32HQ
; Line 514
	mov	eax, DWORD PTR _pMemDst$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	sub	ecx, 1
	mov	DWORD PTR _yEnd$[ebp], ecx
$LN13@Rotate32HQ:
; Line 516
	mov	eax, DWORD PTR _sinMagHQ$[ebp]
	imul	eax, DWORD PTR _yStart$[ebp]
	mov	ecx, DWORD PTR _x0SrcHQ$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _x0SrcHQ$[ebp], ecx
; Line 517
	mov	eax, DWORD PTR _cosMagHQ$[ebp]
	imul	eax, DWORD PTR _yStart$[ebp]
	add	eax, DWORD PTR _y0SrcHQ$[ebp]
	mov	DWORD PTR _y0SrcHQ$[ebp], eax
; Line 521
	mov	eax, DWORD PTR _RectMinMax$[ebp]
	mov	DWORD PTR _xStart$[ebp], eax
; Line 522
	mov	eax, DWORD PTR _RectMinMax$[ebp+4]
	mov	DWORD PTR _xEnd$[ebp], eax
; Line 523
	cmp	DWORD PTR _xStart$[ebp], 0
	jge	SHORT $LN12@Rotate32HQ
; Line 524
	mov	DWORD PTR _xStart$[ebp], 0
$LN12@Rotate32HQ:
; Line 526
	mov	eax, DWORD PTR _pMemDst$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	cmp	DWORD PTR _xEnd$[ebp], ecx
	jl	SHORT $LN11@Rotate32HQ
; Line 527
	mov	eax, DWORD PTR _pMemDst$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR _xEnd$[ebp], ecx
$LN11@Rotate32HQ:
; Line 529
	mov	eax, DWORD PTR _cosMagHQ$[ebp]
	imul	eax, DWORD PTR _xStart$[ebp]
	add	eax, DWORD PTR _x0SrcHQ$[ebp]
	mov	DWORD PTR _x0SrcHQ$[ebp], eax
; Line 530
	mov	eax, DWORD PTR _sinMagHQ$[ebp]
	imul	eax, DWORD PTR _xStart$[ebp]
	add	eax, DWORD PTR _y0SrcHQ$[ebp]
	mov	DWORD PTR _y0SrcHQ$[ebp], eax
; Line 534
	mov	eax, DWORD PTR _pMemDst$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	imul	ecx, DWORD PTR _yStart$[ebp]
	mov	edx, DWORD PTR _pDataDst$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _pDataDst$[ebp], eax
; Line 535
	mov	eax, DWORD PTR _yStart$[ebp]
	mov	DWORD PTR _yDst$[ebp], eax
	jmp	SHORT $LN10@Rotate32HQ
$LN9@Rotate32HQ:
	mov	eax, DWORD PTR _yDst$[ebp]
	add	eax, 1
	mov	DWORD PTR _yDst$[ebp], eax
$LN10@Rotate32HQ:
	mov	eax, DWORD PTR _yDst$[ebp]
	cmp	eax, DWORD PTR _yEnd$[ebp]
	jg	$LN8@Rotate32HQ
; Line 536
	mov	eax, DWORD PTR _x0SrcHQ$[ebp]
	mov	DWORD PTR _xPosHQ$[ebp], eax
; Line 537
	mov	eax, DWORD PTR _y0SrcHQ$[ebp]
	mov	DWORD PTR _yPosHQ$[ebp], eax
; Line 541
	mov	eax, DWORD PTR _xStart$[ebp]
	mov	ecx, DWORD PTR _pDataDst$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pDataDst$[ebp], edx
; Line 542
	mov	eax, DWORD PTR _xStart$[ebp]
	mov	DWORD PTR _xDst$[ebp], eax
	jmp	SHORT $LN7@Rotate32HQ
$LN6@Rotate32HQ:
	mov	eax, DWORD PTR _xDst$[ebp]
	add	eax, 1
	mov	DWORD PTR _xDst$[ebp], eax
$LN7@Rotate32HQ:
	mov	eax, DWORD PTR _xDst$[ebp]
	cmp	eax, DWORD PTR _xEnd$[ebp]
	jg	$LN5@Rotate32HQ
; Line 545
	mov	eax, DWORD PTR _PixelSizeHQ$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yPosHQ$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xPosHQ$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDataSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMemSrc$[ebp]
	push	ecx
	call	__GetColorHQ
	add	esp, 20					; 00000014H
	mov	DWORD PTR _Color$8851[ebp], eax
; Line 546
	mov	eax, DWORD PTR _Color$8851[ebp]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _Alpha$8853[ebp], al
; Line 547
	movzx	eax, BYTE PTR _Alpha$8853[ebp]
	test	eax, eax
	jne	SHORT $LN4@Rotate32HQ
; Line 551
	mov	eax, DWORD PTR _pDataDst$[ebp]
	mov	ecx, DWORD PTR _Color$8851[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN3@Rotate32HQ
$LN4@Rotate32HQ:
; Line 552
	movzx	eax, BYTE PTR _Alpha$8853[ebp]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN3@Rotate32HQ
; Line 553
	movzx	eax, BYTE PTR _Alpha$8853[ebp]
	test	eax, eax
	jle	SHORT $LN3@Rotate32HQ
; Line 557
	mov	eax, DWORD PTR _pDataDst$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _BkColor$8852[ebp], ecx
; Line 558
	movzx	eax, BYTE PTR _Alpha$8853[ebp]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _BkColor$8852[ebp]
	push	edx
	mov	eax, DWORD PTR _Color$8851[ebp]
	push	eax
	call	_GUI__MixColors
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Color$8851[ebp], eax
; Line 559
	mov	eax, DWORD PTR _pDataDst$[ebp]
	mov	ecx, DWORD PTR _Color$8851[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@Rotate32HQ:
; Line 576
	mov	eax, DWORD PTR _xPosHQ$[ebp]
	add	eax, DWORD PTR _cosMagHQ$[ebp]
	mov	DWORD PTR _xPosHQ$[ebp], eax
; Line 577
	mov	eax, DWORD PTR _yPosHQ$[ebp]
	add	eax, DWORD PTR _sinMagHQ$[ebp]
	mov	DWORD PTR _yPosHQ$[ebp], eax
; Line 578
	mov	eax, DWORD PTR _pDataDst$[ebp]
	add	eax, 4
	mov	DWORD PTR _pDataDst$[ebp], eax
; Line 579
	jmp	$LN6@Rotate32HQ
$LN5@Rotate32HQ:
; Line 580
	mov	eax, DWORD PTR _pMemDst$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	sub	ecx, DWORD PTR _xEnd$[ebp]
	mov	edx, DWORD PTR _pDataDst$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4-4]
	mov	DWORD PTR _pDataDst$[ebp], eax
; Line 581
	mov	eax, DWORD PTR _x0SrcHQ$[ebp]
	sub	eax, DWORD PTR _sinMagHQ$[ebp]
	mov	DWORD PTR _x0SrcHQ$[ebp], eax
; Line 582
	mov	eax, DWORD PTR _y0SrcHQ$[ebp]
	add	eax, DWORD PTR _cosMagHQ$[ebp]
	mov	DWORD PTR _y0SrcHQ$[ebp], eax
; Line 583
	jmp	$LN9@Rotate32HQ
$LN8@Rotate32HQ:
; Line 587
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pMemSrc$[ebp], 0
; Line 588
	call	_GUI_ALLOC_UnlockH
	mov	DWORD PTR _pMemDst$[ebp], 0
$LN16@Rotate32HQ:
; Line 589
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@Rotate32HQ
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 532				; 00000214H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@Rotate32HQ:
	DD	1
	DD	$LN19@Rotate32HQ
$LN19@Rotate32HQ:
	DD	-228					; ffffff1cH
	DD	16					; 00000010H
	DD	$LN18@Rotate32HQ
$LN18@Rotate32HQ:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	0
__Rotate32HQ ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_GUI__DivideRound32:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetColorHQ
_TEXT	SEGMENT
_f$ = -248						; size = 4
_a$ = -236						; size = 4
_b$ = -224						; size = 4
_g$ = -212						; size = 4
_r$ = -200						; size = 4
_Pixel$ = -188						; size = 24
_yPart$ = -156						; size = 4
_xPart$ = -144						; size = 4
_yNextHQ$ = -132					; size = 4
_xNextHQ$ = -120					; size = 4
_yPosHQ$ = -108						; size = 4
_xPosHQ$ = -96						; size = 4
_y1HQ$ = -84						; size = 4
_x1HQ$ = -72						; size = 4
_y0HQ$ = -60						; size = 4
_x0HQ$ = -48						; size = 4
_yOff$ = -36						; size = 4
_xOff$ = -24						; size = 4
_Color$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pMem$ = 8						; size = 4
_pData$ = 12						; size = 4
_xOffHQ$ = 16						; size = 4
_yOffHQ$ = 20						; size = 4
_Size$ = 24						; size = 4
__GetColorHQ PROC					; COMDAT
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 444				; 000001bcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-444]
	mov	ecx, 111				; 0000006fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 306
	mov	DWORD PTR _Pixel$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _Pixel$[ebp+4], eax
	mov	DWORD PTR _Pixel$[ebp+8], eax
	mov	DWORD PTR _Pixel$[ebp+12], eax
	mov	DWORD PTR _Pixel$[ebp+16], eax
	mov	DWORD PTR _Pixel$[ebp+20], eax
; Line 309
	mov	eax, DWORD PTR _Size$[ebp]
	sar	eax, 1
	mov	ecx, DWORD PTR _xOffHQ$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _x0HQ$[ebp], ecx
; Line 310
	mov	eax, DWORD PTR _Size$[ebp]
	sar	eax, 1
	mov	ecx, DWORD PTR _yOffHQ$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _y0HQ$[ebp], ecx
; Line 311
	mov	eax, DWORD PTR _Size$[ebp]
	mov	ecx, DWORD PTR _x0HQ$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _x1HQ$[ebp], edx
; Line 312
	mov	eax, DWORD PTR _Size$[ebp]
	mov	ecx, DWORD PTR _y0HQ$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _y1HQ$[ebp], edx
; Line 316
	mov	eax, DWORD PTR _y0HQ$[ebp]
	mov	DWORD PTR _yPosHQ$[ebp], eax
$LN21@GetColorHQ:
; Line 321
	mov	eax, DWORD PTR _yPosHQ$[ebp]
	sar	eax, 16					; 00000010H
	mov	DWORD PTR _yOff$[ebp], eax
; Line 322
	mov	eax, DWORD PTR _yOff$[ebp]
	add	eax, 1
	shl	eax, 16					; 00000010H
	mov	DWORD PTR _yNextHQ$[ebp], eax
; Line 323
	mov	eax, DWORD PTR _yNextHQ$[ebp]
	cmp	eax, DWORD PTR _y1HQ$[ebp]
	jle	SHORT $LN18@GetColorHQ
; Line 324
	mov	eax, DWORD PTR _y1HQ$[ebp]
	add	eax, 1
	mov	DWORD PTR _yNextHQ$[ebp], eax
$LN18@GetColorHQ:
; Line 329
	mov	eax, DWORD PTR _yNextHQ$[ebp]
	sub	eax, DWORD PTR _yPosHQ$[ebp]
	sar	eax, 4
	mov	DWORD PTR _yPart$[ebp], eax
; Line 333
	mov	eax, DWORD PTR _x0HQ$[ebp]
	mov	DWORD PTR _xPosHQ$[ebp], eax
$LN17@GetColorHQ:
; Line 338
	mov	eax, DWORD PTR _xPosHQ$[ebp]
	sar	eax, 16					; 00000010H
	mov	DWORD PTR _xOff$[ebp], eax
; Line 339
	mov	eax, DWORD PTR _xOff$[ebp]
	add	eax, 1
	shl	eax, 16					; 00000010H
	mov	DWORD PTR _xNextHQ$[ebp], eax
; Line 340
	mov	eax, DWORD PTR _xNextHQ$[ebp]
	cmp	eax, DWORD PTR _x1HQ$[ebp]
	jle	SHORT $LN14@GetColorHQ
; Line 341
	mov	eax, DWORD PTR _x1HQ$[ebp]
	add	eax, 1
	mov	DWORD PTR _xNextHQ$[ebp], eax
$LN14@GetColorHQ:
; Line 346
	mov	eax, DWORD PTR _xNextHQ$[ebp]
	sub	eax, DWORD PTR _xPosHQ$[ebp]
	sar	eax, 4
	mov	DWORD PTR _xPart$[ebp], eax
; Line 347
	cmp	DWORD PTR _yPart$[ebp], 4096		; 00001000H
	jae	SHORT $LN13@GetColorHQ
; Line 348
	mov	eax, DWORD PTR _xPart$[ebp]
	imul	eax, DWORD PTR _yPart$[ebp]
	shr	eax, 12					; 0000000cH
	mov	DWORD PTR _xPart$[ebp], eax
$LN13@GetColorHQ:
; Line 353
	cmp	DWORD PTR _xPosHQ$[ebp], 0
	jl	SHORT $LN12@GetColorHQ
	mov	eax, DWORD PTR _pMem$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	cmp	DWORD PTR _xOff$[ebp], ecx
	jge	SHORT $LN12@GetColorHQ
	cmp	DWORD PTR _yPosHQ$[ebp], 0
	jl	SHORT $LN12@GetColorHQ
	mov	eax, DWORD PTR _pMem$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	cmp	DWORD PTR _yOff$[ebp], ecx
	jge	SHORT $LN12@GetColorHQ
; Line 357
	mov	eax, DWORD PTR _pMem$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	imul	ecx, DWORD PTR _yOff$[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _xOff$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _Color$[ebp], edx
; Line 358
	jmp	SHORT $LN11@GetColorHQ
$LN12@GetColorHQ:
; Line 362
	mov	DWORD PTR _Color$[ebp], -16777216	; ff000000H
$LN11@GetColorHQ:
; Line 364
	mov	eax, DWORD PTR _Color$[ebp]
	and	eax, -16777216				; ff000000H
	shr	eax, 24					; 00000018H
	mov	DWORD PTR _a$[ebp], eax
; Line 365
	cmp	DWORD PTR _a$[ebp], 255			; 000000ffH
	jae	$LN10@GetColorHQ
; Line 366
	mov	eax, DWORD PTR _Color$[ebp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _r$[ebp], eax
; Line 367
	mov	eax, DWORD PTR _Color$[ebp]
	and	eax, 65280				; 0000ff00H
	shr	eax, 8
	mov	DWORD PTR _g$[ebp], eax
; Line 368
	mov	eax, DWORD PTR _Color$[ebp]
	and	eax, 16711680				; 00ff0000H
	shr	eax, 16					; 00000010H
	mov	DWORD PTR _b$[ebp], eax
; Line 369
	cmp	DWORD PTR _a$[ebp], 0
	jne	$LN9@GetColorHQ
; Line 373
	mov	eax, DWORD PTR _r$[ebp]
	imul	eax, DWORD PTR _xPart$[ebp]
	mov	DWORD PTR _r$[ebp], eax
; Line 374
	mov	eax, DWORD PTR _g$[ebp]
	imul	eax, DWORD PTR _xPart$[ebp]
	mov	DWORD PTR _g$[ebp], eax
; Line 375
	mov	eax, DWORD PTR _b$[ebp]
	imul	eax, DWORD PTR _xPart$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 376
	mov	eax, DWORD PTR _Pixel$[ebp]
	add	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _Pixel$[ebp], eax
; Line 377
	mov	eax, DWORD PTR _Pixel$[ebp+4]
	add	eax, DWORD PTR _g$[ebp]
	mov	DWORD PTR _Pixel$[ebp+4], eax
; Line 378
	mov	eax, DWORD PTR _Pixel$[ebp+8]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _Pixel$[ebp+8], eax
; Line 379
	mov	eax, DWORD PTR _Pixel$[ebp+16]
	add	eax, DWORD PTR _xPart$[ebp]
	mov	DWORD PTR _Pixel$[ebp+16], eax
; Line 380
	mov	eax, DWORD PTR _Pixel$[ebp+20]
	add	eax, DWORD PTR _xPart$[ebp]
	mov	DWORD PTR _Pixel$[ebp+20], eax
; Line 381
	jmp	$LN8@GetColorHQ
$LN9@GetColorHQ:
; Line 385
	push	255					; 000000ffH
	mov	eax, DWORD PTR _xPart$[ebp]
	imul	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_GUI__DivideRound32
	add	esp, 8
	mov	DWORD PTR _f$[ebp], eax
; Line 386
	mov	eax, DWORD PTR _r$[ebp]
	imul	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR _r$[ebp], eax
; Line 387
	mov	eax, DWORD PTR _g$[ebp]
	imul	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR _g$[ebp], eax
; Line 388
	mov	eax, DWORD PTR _b$[ebp]
	imul	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 389
	mov	eax, DWORD PTR _a$[ebp]
	imul	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 390
	mov	eax, DWORD PTR _Pixel$[ebp]
	add	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _Pixel$[ebp], eax
; Line 391
	mov	eax, DWORD PTR _Pixel$[ebp+4]
	add	eax, DWORD PTR _g$[ebp]
	mov	DWORD PTR _Pixel$[ebp+4], eax
; Line 392
	mov	eax, DWORD PTR _Pixel$[ebp+8]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _Pixel$[ebp+8], eax
; Line 393
	mov	eax, DWORD PTR _Pixel$[ebp+12]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _Pixel$[ebp+12], eax
; Line 394
	mov	eax, DWORD PTR _Pixel$[ebp+16]
	add	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR _Pixel$[ebp+16], eax
; Line 395
	mov	eax, DWORD PTR _Pixel$[ebp+20]
	add	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR _Pixel$[ebp+20], eax
$LN8@GetColorHQ:
; Line 397
	jmp	SHORT $LN7@GetColorHQ
$LN10@GetColorHQ:
; Line 401
	mov	eax, DWORD PTR _a$[ebp]
	imul	eax, DWORD PTR _xPart$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 402
	mov	eax, DWORD PTR _Pixel$[ebp+12]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _Pixel$[ebp+12], eax
; Line 403
	mov	eax, DWORD PTR _Pixel$[ebp+20]
	add	eax, DWORD PTR _xPart$[ebp]
	mov	DWORD PTR _Pixel$[ebp+20], eax
$LN7@GetColorHQ:
; Line 408
	mov	eax, DWORD PTR _xNextHQ$[ebp]
	mov	DWORD PTR _xPosHQ$[ebp], eax
; Line 409
	mov	eax, DWORD PTR _xPosHQ$[ebp]
	cmp	eax, DWORD PTR _x1HQ$[ebp]
	jl	$LN17@GetColorHQ
; Line 413
	mov	eax, DWORD PTR _yNextHQ$[ebp]
	mov	DWORD PTR _yPosHQ$[ebp], eax
; Line 414
	mov	eax, DWORD PTR _yPosHQ$[ebp]
	cmp	eax, DWORD PTR _y1HQ$[ebp]
	jl	$LN21@GetColorHQ
; Line 418
	cmp	DWORD PTR _Pixel$[ebp+16], 0
	je	SHORT $LN6@GetColorHQ
; Line 419
	mov	eax, DWORD PTR _Pixel$[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _Pixel$[ebp]
	push	ecx
	call	_GUI__DivideRound32
	add	esp, 8
	mov	DWORD PTR _Pixel$[ebp], eax
; Line 420
	mov	eax, DWORD PTR _Pixel$[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _Pixel$[ebp+4]
	push	ecx
	call	_GUI__DivideRound32
	add	esp, 8
	mov	DWORD PTR _Pixel$[ebp+4], eax
; Line 421
	mov	eax, DWORD PTR _Pixel$[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _Pixel$[ebp+8]
	push	ecx
	call	_GUI__DivideRound32
	add	esp, 8
	mov	DWORD PTR _Pixel$[ebp+8], eax
; Line 422
	cmp	DWORD PTR _Pixel$[ebp+12], 0
	je	SHORT $LN5@GetColorHQ
; Line 423
	mov	eax, DWORD PTR _Pixel$[ebp+20]
	push	eax
	mov	ecx, DWORD PTR _Pixel$[ebp+12]
	push	ecx
	call	_GUI__DivideRound32
	add	esp, 8
	mov	DWORD PTR _Pixel$[ebp+12], eax
$LN5@GetColorHQ:
; Line 425
	jmp	SHORT $LN4@GetColorHQ
$LN6@GetColorHQ:
; Line 426
	mov	DWORD PTR _Pixel$[ebp+12], 255		; 000000ffH
$LN4@GetColorHQ:
; Line 428
	cmp	DWORD PTR _Pixel$[ebp], 255		; 000000ffH
	jbe	SHORT $LN3@GetColorHQ
; Line 429
	mov	DWORD PTR _Pixel$[ebp], 255		; 000000ffH
$LN3@GetColorHQ:
; Line 431
	cmp	DWORD PTR _Pixel$[ebp+4], 255		; 000000ffH
	jbe	SHORT $LN2@GetColorHQ
; Line 432
	mov	DWORD PTR _Pixel$[ebp+4], 255		; 000000ffH
$LN2@GetColorHQ:
; Line 434
	cmp	DWORD PTR _Pixel$[ebp+8], 255		; 000000ffH
	jbe	SHORT $LN1@GetColorHQ
; Line 435
	mov	DWORD PTR _Pixel$[ebp+8], 255		; 000000ffH
$LN1@GetColorHQ:
; Line 437
	mov	eax, DWORD PTR _Pixel$[ebp+4]
	shl	eax, 8
	or	eax, DWORD PTR _Pixel$[ebp]
	mov	ecx, DWORD PTR _Pixel$[ebp+8]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, DWORD PTR _Pixel$[ebp+12]
	shl	edx, 24					; 00000018H
	or	eax, edx
	mov	DWORD PTR _Color$[ebp], eax
; Line 438
	mov	eax, DWORD PTR _Color$[ebp]
; Line 439
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@GetColorHQ
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 444				; 000001bcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN26@GetColorHQ:
	DD	1
	DD	$LN25@GetColorHQ
$LN25@GetColorHQ:
	DD	-188					; ffffff44H
	DD	24					; 00000018H
	DD	$LN24@GetColorHQ
$LN24@GetColorHQ:
	DB	80					; 00000050H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
__GetColorHQ ENDP
_TEXT	ENDS
END
