; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_Alloc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	__NumFreeBytes:DWORD
COMM	__LockCntHandles:DWORD
__MaxRequestPercent DD 05aH
__Config DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	020H
	DB	00H
	ORG $+3
$SG9415	DB	'No memory available', 00H
$SG9425	DB	'Memory test failed', 00H
	ORG $+1
$SG9477	DB	'Locked handles exist. More details can be found in GUI_A'
	DB	'lloc.c', 00H
	ORG $+1
$SG9506	DB	'Block already free', 00H
	ORG $+1
$SG9545	DB	'Locked handles exist. More details can be found in GUI_A'
	DB	'lloc.c', 00H
	ORG $+1
$SG9574	DB	0aH, 'c:\duii\simulation\gui\core\gui_alloc.c GUI_ALLOC_h'
	DB	'2p: illegal argument (0 handle)', 00H
$SG9576	DB	'Dereferencing free block', 00H
	ORG $+3
$SG9584	DB	'c:\duii\simulation\gui\core\gui_alloc.c: Underflow of lo'
	DB	'cked handles', 00H
_DATA	ENDS
PUBLIC	_GUI_ALLOC_p2h
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_alloc.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_ALLOC_p2h
_TEXT	SEGMENT
_pTag$ = -20						; size = 4
_hMem$ = -8						; size = 4
_p$ = 8							; size = 4
_GUI_ALLOC_p2h PROC					; COMDAT
; Line 917
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 921
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, 8
	mov	DWORD PTR _pTag$[ebp], eax
; Line 922
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _hMem$[ebp], ecx
; Line 923
	mov	eax, DWORD PTR _hMem$[ebp]
; Line 924
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_p2h ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_FreeFixedBlock
_BSS	SEGMENT
__pFirstFixedFreeTag DD 01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT _GUI_ALLOC_FreeFixedBlock
_TEXT	SEGMENT
_pFree$ = -8						; size = 4
_pBlock$ = 8						; size = 4
_GUI_ALLOC_FreeFixedBlock PROC				; COMDAT
; Line 930
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 933
	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	DWORD PTR _pFree$[ebp], eax
; Line 934
	mov	eax, DWORD PTR _pFree$[ebp]
	mov	ecx, DWORD PTR __pFirstFixedFreeTag
	mov	DWORD PTR [eax], ecx
; Line 935
	mov	eax, DWORD PTR _pFree$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@GUI_ALLOC_
; Line 936
	mov	eax, DWORD PTR _pFree$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pFree$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN1@GUI_ALLOC_:
; Line 938
	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	DWORD PTR __pFirstFixedFreeTag, eax
; Line 939
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_FreeFixedBlock ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_GetFixedBlock
EXTRN	_GUI_ErrorOut:PROC
EXTRN	__RTC_CheckEsp:PROC
_BSS	SEGMENT
__NumFixedBytes DD 01H DUP (?)
__AllocSize DD	01H DUP (?)
	ALIGN	8

__aFreeMem DQ	010H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT _GUI_ALLOC_GetFixedBlock
_TEXT	SEGMENT
_pFree$ = -32						; size = 4
_pTag$ = -20						; size = 4
_p$ = -8						; size = 4
_Size$ = 8						; size = 4
_GUI_ALLOC_GetFixedBlock PROC				; COMDAT
; Line 945
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 950
	cmp	DWORD PTR __LockCntHandles, 0
	jle	SHORT $LN10@GUI_ALLOC_@2
; Line 957
	push	OFFSET $SG9545
	call	_GUI_ErrorOut
	add	esp, 4
$LN10@GUI_ALLOC_@2:
; Line 959
	call	__InitOnce
; Line 961
	mov	eax, DWORD PTR _Size$[ebp]
	add	eax, 3
	sar	eax, 2
	lea	ecx, DWORD PTR [eax*4+4]
	mov	DWORD PTR _Size$[ebp], ecx
; Line 962
	mov	eax, DWORD PTR _Size$[ebp]
	cmp	eax, DWORD PTR __aFreeMem
	jae	SHORT $LN9@GUI_ALLOC_@2
; Line 963
	mov	eax, DWORD PTR __aFreeMem
	mov	DWORD PTR _Size$[ebp], eax
$LN9@GUI_ALLOC_@2:
; Line 968
	mov	eax, DWORD PTR _Size$[ebp]
	push	eax
	call	__GetFixedBlock
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 969
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN8@GUI_ALLOC_@2
; Line 973
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pFree$[ebp], eax
; Line 974
	mov	eax, DWORD PTR _pFree$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN7@GUI_ALLOC_@2
; Line 975
	mov	eax, DWORD PTR _pFree$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pFree$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
$LN7@GUI_ALLOC_@2:
; Line 977
	mov	eax, DWORD PTR _pFree$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN6@GUI_ALLOC_@2
; Line 978
	mov	eax, DWORD PTR _pFree$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pFree$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
$LN6@GUI_ALLOC_@2:
; Line 980
	mov	eax, DWORD PTR __pFirstFixedFreeTag
	cmp	eax, DWORD PTR _pFree$[ebp]
	jne	SHORT $LN5@GUI_ALLOC_@2
; Line 981
	mov	eax, DWORD PTR _pFree$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __pFirstFixedFreeTag, ecx
$LN5@GUI_ALLOC_@2:
; Line 983
	jmp	$LN4@GUI_ALLOC_@2
$LN8@GUI_ALLOC_@2:
; Line 987
	call	__RemoveHoles
; Line 991
	mov	eax, DWORD PTR _Size$[ebp]
	push	eax
	call	__GetFreeTag
	add	esp, 4
	mov	DWORD PTR _pTag$[ebp], eax
; Line 995
	cmp	DWORD PTR _pTag$[ebp], 0
	je	SHORT $LN4@GUI_ALLOC_@2
; Line 996
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR _Size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jle	SHORT $LN2@GUI_ALLOC_@2
; Line 997
	mov	DWORD PTR _p$[ebp], 0
; Line 998
	jmp	SHORT $LN4@GUI_ALLOC_@2
$LN2@GUI_ALLOC_@2:
; Line 1005
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR _pTag$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _Size$[ebp]
	sub	edx, 4
	sub	ecx, edx
	mov	DWORD PTR _p$[ebp], ecx
; Line 1009
	mov	eax, DWORD PTR _pTag$[ebp]
	push	eax
	call	__RemoveFreeMemory
	add	esp, 4
; Line 1013
	mov	eax, DWORD PTR __AllocSize
	sub	eax, DWORD PTR _Size$[ebp]
	mov	DWORD PTR __AllocSize, eax
; Line 1014
	mov	eax, DWORD PTR __NumFixedBytes
	add	eax, DWORD PTR _Size$[ebp]
	mov	DWORD PTR __NumFixedBytes, eax
; Line 1018
	mov	eax, DWORD PTR _pTag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTag$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR _Size$[ebp]
	push	edx
	call	__AddFreeMemory
	add	esp, 8
; Line 1022
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _Size$[ebp]
	mov	DWORD PTR [eax-4], ecx
$LN4@GUI_ALLOC_@2:
; Line 1026
	mov	eax, DWORD PTR _p$[ebp]
; Line 1027
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_GetFixedBlock ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetFreeTag
_TEXT	SEGMENT
_Index$ = -20						; size = 4
_pTag$ = -8						; size = 4
_Size$ = 8						; size = 4
__GetFreeTag PROC					; COMDAT
; Line 214
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 215
	mov	DWORD PTR _pTag$[ebp], 0
; Line 220
	mov	eax, DWORD PTR _Size$[ebp]
	push	eax
	call	__GetMinIndex
	add	esp, 4
	mov	DWORD PTR _Index$[ebp], eax
	jmp	SHORT $LN12@GetFreeTag
$LN11@GetFreeTag:
; Line 221
	mov	eax, DWORD PTR _Index$[ebp]
	add	eax, 1
	mov	DWORD PTR _Index$[ebp], eax
$LN12@GetFreeTag:
	cmp	DWORD PTR _Index$[ebp], 16		; 00000010H
	jae	SHORT $LN10@GetFreeTag
; Line 225
	mov	eax, DWORD PTR _Index$[ebp]
	cmp	DWORD PTR __aFreeMem[eax*8+4], 0
	je	SHORT $LN9@GetFreeTag
; Line 229
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR __aFreeMem[eax*8+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _pTag$[ebp], edx
; Line 233
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR _Size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN8@GetFreeTag
$LN7@GetFreeTag:
; Line 237
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR _Size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN6@GetFreeTag
; Line 238
	mov	eax, DWORD PTR _pTag$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@GetFreeTag
; Line 239
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _pTag$[ebp], edx
; Line 240
	jmp	SHORT $LN4@GetFreeTag
$LN5@GetFreeTag:
; Line 241
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR _Size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN3@GetFreeTag
; Line 242
	mov	DWORD PTR _pTag$[ebp], 0
$LN3@GetFreeTag:
; Line 244
	jmp	SHORT $LN6@GetFreeTag
$LN4@GetFreeTag:
; Line 246
	jmp	SHORT $LN7@GetFreeTag
$LN6@GetFreeTag:
; Line 247
	jmp	SHORT $LN2@GetFreeTag
$LN8@GetFreeTag:
; Line 248
	jmp	SHORT $LN10@GetFreeTag
$LN2@GetFreeTag:
; Line 250
	jmp	SHORT $LN1@GetFreeTag
$LN9@GetFreeTag:
; Line 254
	mov	DWORD PTR _pTag$[ebp], 0
$LN1@GetFreeTag:
; Line 256
	jmp	SHORT $LN11@GetFreeTag
$LN10@GetFreeTag:
; Line 257
	mov	eax, DWORD PTR _pTag$[ebp]
; Line 258
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetFreeTag ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetMinIndex
_TEXT	SEGMENT
_Index$ = -8						; size = 4
_Size$ = 8						; size = 4
__GetMinIndex PROC					; COMDAT
; Line 197
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 199
	mov	DWORD PTR _Index$[ebp], 15		; 0000000fH
	jmp	SHORT $LN4@GetMinInde
$LN3@GetMinInde:
	mov	eax, DWORD PTR _Index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Index$[ebp], eax
$LN4@GetMinInde:
	cmp	DWORD PTR _Index$[ebp], 0
	jl	SHORT $LN2@GetMinInde
; Line 200
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR _Size$[ebp]
	cmp	ecx, DWORD PTR __aFreeMem[eax*8]
	jb	SHORT $LN1@GetMinInde
; Line 201
	jmp	SHORT $LN2@GetMinInde
$LN1@GetMinInde:
; Line 203
	jmp	SHORT $LN3@GetMinInde
$LN2@GetMinInde:
; Line 204
	mov	eax, DWORD PTR _Index$[ebp]
; Line 205
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetMinIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __RemoveFreeMemory
_TEXT	SEGMENT
_Index$ = -8						; size = 4
_pTag$ = 8						; size = 4
__RemoveFreeMemory PROC					; COMDAT
; Line 333
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 339
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	__GetMinIndex
	add	esp, 4
	mov	DWORD PTR _Index$[ebp], eax
; Line 343
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR __NumFreeBytes
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __NumFreeBytes, ecx
; Line 347
	mov	eax, DWORD PTR _Index$[ebp]
	lea	ecx, DWORD PTR __aFreeMem[eax*8+4]
	push	ecx
	mov	edx, DWORD PTR _pTag$[ebp]
	add	edx, 8
	push	edx
	call	__Unlink
	add	esp, 8
; Line 348
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__RemoveFreeMemory ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Unlink
_TEXT	SEGMENT
_pPrev$ = -20						; size = 4
_pNext$ = -8						; size = 4
_pFreeTag$ = 8						; size = 4
_ppFirstFreeTag$ = 12					; size = 4
__Unlink PROC						; COMDAT
; Line 292
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 295
	mov	eax, DWORD PTR _pFreeTag$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pNext$[ebp], ecx
; Line 296
	mov	eax, DWORD PTR _pFreeTag$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _pPrev$[ebp], ecx
; Line 297
	cmp	DWORD PTR _pNext$[ebp], 0
	je	SHORT $LN3@Unlink
; Line 298
	mov	eax, DWORD PTR _pNext$[ebp]
	mov	ecx, DWORD PTR _pPrev$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN3@Unlink:
; Line 300
	cmp	DWORD PTR _pPrev$[ebp], 0
	je	SHORT $LN2@Unlink
; Line 301
	mov	eax, DWORD PTR _pPrev$[ebp]
	mov	ecx, DWORD PTR _pNext$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 302
	jmp	SHORT $LN4@Unlink
$LN2@Unlink:
; Line 303
	mov	eax, DWORD PTR _ppFirstFreeTag$[ebp]
	mov	ecx, DWORD PTR _pNext$[ebp]
	mov	DWORD PTR [eax], ecx
$LN4@Unlink:
; Line 305
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__Unlink ENDP
_TEXT	ENDS
_BSS	SEGMENT
__pHeap	DD	01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __AddFreeMemory
_TEXT	SEGMENT
_SizePrev$9302 = -56					; size = 4
_AddrEnd$ = -44						; size = 4
_AddrMem$ = -32						; size = 4
_pTag$ = -20						; size = 4
_Index$ = -8						; size = 4
_Size$ = 8						; size = 4
_p$ = 12						; size = 4
__AddFreeMemory PROC					; COMDAT
; Line 359
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 368
	mov	eax, DWORD PTR __AllocSize
	mov	ecx, DWORD PTR __pHeap
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _AddrEnd$[ebp], edx
; Line 372
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _Size$[ebp]
	mov	DWORD PTR _AddrMem$[ebp], eax
; Line 373
	mov	eax, DWORD PTR _AddrMem$[ebp]
	cmp	eax, DWORD PTR _AddrEnd$[ebp]
	ja	SHORT $LN4@AddFreeMem
; Line 374
	mov	eax, DWORD PTR _AddrMem$[ebp]
	mov	DWORD PTR _pTag$[ebp], eax
; Line 378
	mov	eax, DWORD PTR _pTag$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN4@AddFreeMem
; Line 382
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR _Size$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Size$[ebp], ecx
; Line 386
	mov	eax, DWORD PTR _pTag$[ebp]
	push	eax
	call	__RemoveFreeMemory
	add	esp, 4
$LN4@AddFreeMem:
; Line 392
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR __pHeap
	jbe	SHORT $LN2@AddFreeMem
; Line 394
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR _SizePrev$9302[ebp], ecx
; Line 395
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _SizePrev$9302[ebp]
	mov	DWORD PTR _AddrMem$[ebp], eax
; Line 396
	mov	eax, DWORD PTR _AddrMem$[ebp]
	mov	DWORD PTR _pTag$[ebp], eax
; Line 400
	mov	eax, DWORD PTR _pTag$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@AddFreeMem
; Line 404
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR _Size$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Size$[ebp], ecx
; Line 408
	mov	eax, DWORD PTR _pTag$[ebp]
	push	eax
	call	__RemoveFreeMemory
	add	esp, 4
; Line 412
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN2@AddFreeMem:
; Line 418
	mov	eax, DWORD PTR _Size$[ebp]
	push	eax
	call	__GetMinIndex
	add	esp, 4
	mov	DWORD PTR _Index$[ebp], eax
; Line 422
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pTag$[ebp], eax
; Line 426
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR __aFreeMem[eax*8+4]
	push	ecx
	mov	edx, DWORD PTR _Size$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _pTag$[ebp]
	push	eax
	call	__WriteTagData
	add	esp, 16					; 00000010H
; Line 430
	mov	eax, DWORD PTR _Index$[ebp]
	lea	ecx, DWORD PTR __aFreeMem[eax*8+4]
	push	ecx
	mov	edx, DWORD PTR _pTag$[ebp]
	add	edx, 8
	push	edx
	call	__Append
	add	esp, 8
; Line 434
	mov	eax, DWORD PTR __NumFreeBytes
	add	eax, DWORD PTR _Size$[ebp]
	mov	DWORD PTR __NumFreeBytes, eax
; Line 435
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__AddFreeMemory ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __WriteTagData
_TEXT	SEGMENT
_pTag$ = 8						; size = 4
_Block$ = 12						; size = 4
_Size$ = 16						; size = 4
_pNext$ = 20						; size = 4
__WriteTagData PROC					; COMDAT
; Line 268
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 272
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR _Block$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 273
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR _Size$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 277
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR _pNext$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 278
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR _pTag$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 282
	mov	eax, DWORD PTR _pTag$[ebp]
	add	eax, DWORD PTR _Size$[ebp]
	mov	ecx, DWORD PTR _Size$[ebp]
	mov	DWORD PTR [eax-4], ecx
; Line 283
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__WriteTagData ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Append
_TEXT	SEGMENT
_pFirstFreeTag$ = -8					; size = 4
_pFreeTag$ = 8						; size = 4
_ppFirstFreeTag$ = 12					; size = 4
__Append PROC						; COMDAT
; Line 314
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 316
	mov	eax, DWORD PTR _ppFirstFreeTag$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pFirstFreeTag$[ebp], ecx
; Line 317
	cmp	DWORD PTR _pFirstFreeTag$[ebp], 0
	je	SHORT $LN1@Append
; Line 318
	mov	eax, DWORD PTR _pFirstFreeTag$[ebp]
	mov	ecx, DWORD PTR _pFreeTag$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN1@Append:
; Line 320
	mov	eax, DWORD PTR _pFreeTag$[ebp]
	mov	ecx, DWORD PTR _pFirstFreeTag$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 321
	mov	eax, DWORD PTR _pFreeTag$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 322
	mov	eax, DWORD PTR _ppFirstFreeTag$[ebp]
	mov	ecx, DWORD PTR _pFreeTag$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 323
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__Append ENDP
_TEXT	ENDS
EXTRN	_memmove:PROC
_BSS	SEGMENT
__pBlocks DD	01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __RemoveHoles
_TEXT	SEGMENT
_hBlock$9334 = -152					; size = 4
_AddrNew$9333 = -140					; size = 4
_AddrBlock$9329 = -128					; size = 4
_SizeBlock$9328 = -116					; size = 4
_SizeCur$9325 = -104					; size = 4
_i$ = -92						; size = 4
_NoHoleDetected$ = -80					; size = 4
_FreeBytes$ = -68					; size = 4
_AddrEnd$ = -56						; size = 4
_AddrCur$ = -44						; size = 4
_Size$ = -32						; size = 4
_Addr$ = -20						; size = 4
_pTag$ = -8						; size = 4
__RemoveHoles PROC					; COMDAT
; Line 447
	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 457
	mov	DWORD PTR _NoHoleDetected$[ebp], 1
; Line 458
	mov	DWORD PTR _FreeBytes$[ebp], 0
; Line 459
	mov	eax, DWORD PTR __pHeap
	mov	DWORD PTR _AddrCur$[ebp], eax
; Line 460
	mov	eax, DWORD PTR __AllocSize
	mov	ecx, DWORD PTR _AddrCur$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _AddrEnd$[ebp], edx
$LN13@RemoveHole:
; Line 466
	mov	eax, DWORD PTR _AddrCur$[ebp]
	mov	DWORD PTR _pTag$[ebp], eax
; Line 467
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _SizeCur$9325[ebp], ecx
; Line 471
	mov	eax, DWORD PTR _pTag$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN10@RemoveHole
	mov	eax, DWORD PTR _AddrCur$[ebp]
	add	eax, DWORD PTR _SizeCur$9325[ebp]
	cmp	eax, DWORD PTR _AddrEnd$[ebp]
	jae	$LN10@RemoveHole
; Line 474
	mov	DWORD PTR _NoHoleDetected$[ebp], 0
; Line 475
	mov	eax, DWORD PTR _AddrCur$[ebp]
	add	eax, DWORD PTR _SizeCur$9325[ebp]
	mov	DWORD PTR _AddrBlock$9329[ebp], eax
$LN9@RemoveHole:
; Line 482
	mov	eax, DWORD PTR _AddrBlock$9329[ebp]
	mov	DWORD PTR _pTag$[ebp], eax
; Line 483
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _hBlock$9334[ebp], ecx
; Line 484
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _SizeBlock$9328[ebp], ecx
; Line 485
	mov	eax, DWORD PTR _AddrBlock$9329[ebp]
	sub	eax, DWORD PTR _SizeCur$9325[ebp]
	mov	DWORD PTR _AddrNew$9333[ebp], eax
; Line 486
	mov	eax, DWORD PTR _hBlock$9334[ebp]
	mov	ecx, DWORD PTR __pBlocks
	mov	edx, DWORD PTR _AddrNew$9333[ebp]
	mov	DWORD PTR [ecx+eax*8+4], edx
; Line 487
	mov	eax, DWORD PTR _SizeBlock$9328[ebp]
	push	eax
	mov	ecx, DWORD PTR _AddrBlock$9329[ebp]
	push	ecx
	mov	edx, DWORD PTR _AddrNew$9333[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH
; Line 488
	mov	eax, DWORD PTR _AddrBlock$9329[ebp]
	add	eax, DWORD PTR _SizeBlock$9328[ebp]
	mov	DWORD PTR _AddrBlock$9329[ebp], eax
; Line 489
	mov	eax, DWORD PTR _AddrBlock$9329[ebp]
	cmp	eax, DWORD PTR _AddrEnd$[ebp]
	jb	SHORT $LN9@RemoveHole
; Line 490
	mov	eax, DWORD PTR _FreeBytes$[ebp]
	add	eax, DWORD PTR _SizeCur$9325[ebp]
	mov	DWORD PTR _FreeBytes$[ebp], eax
; Line 491
	mov	eax, DWORD PTR _AddrEnd$[ebp]
	sub	eax, DWORD PTR _SizeCur$9325[ebp]
	mov	DWORD PTR _AddrEnd$[ebp], eax
; Line 492
	jmp	SHORT $LN12@RemoveHole
$LN10@RemoveHole:
; Line 493
	mov	eax, DWORD PTR _AddrCur$[ebp]
	add	eax, DWORD PTR _SizeCur$9325[ebp]
	mov	DWORD PTR _AddrCur$[ebp], eax
$LN12@RemoveHole:
; Line 495
	mov	eax, DWORD PTR _AddrCur$[ebp]
	cmp	eax, DWORD PTR _AddrEnd$[ebp]
	jb	$LN13@RemoveHole
; Line 499
	cmp	DWORD PTR _NoHoleDetected$[ebp], 0
	jne	SHORT $LN5@RemoveHole
; Line 503
	mov	eax, DWORD PTR _AddrEnd$[ebp]
	mov	ecx, DWORD PTR [eax-3]
	mov	DWORD PTR _Size$[ebp], ecx
; Line 504
	mov	eax, DWORD PTR _AddrEnd$[ebp]
	add	eax, 1
	sub	eax, DWORD PTR _Size$[ebp]
	mov	DWORD PTR _Addr$[ebp], eax
; Line 505
	mov	eax, DWORD PTR _Addr$[ebp]
	mov	DWORD PTR _pTag$[ebp], eax
; Line 506
	mov	eax, DWORD PTR _pTag$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN4@RemoveHole
; Line 507
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR _FreeBytes$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _FreeBytes$[ebp], ecx
$LN4@RemoveHole:
; Line 512
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@RemoveHole
$LN2@RemoveHole:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@RemoveHole:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jae	SHORT $LN1@RemoveHole
; Line 513
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR __aFreeMem[eax*8+4], 0
; Line 514
	jmp	SHORT $LN2@RemoveHole
$LN1@RemoveHole:
; Line 518
	mov	DWORD PTR __NumFreeBytes, 0
; Line 522
	mov	eax, DWORD PTR __pHeap
	add	eax, DWORD PTR __AllocSize
	sub	eax, DWORD PTR _FreeBytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _FreeBytes$[ebp]
	push	ecx
	call	__AddFreeMemory
	add	esp, 8
$LN5@RemoveHole:
; Line 524
	mov	eax, DWORD PTR _NoHoleDetected$[ebp]
; Line 525
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__RemoveHoles ENDP
_TEXT	ENDS
_BSS	SEGMENT
__NumFreeBlocks DD 01H DUP (?)
__FirstFreeBlock DD 01H DUP (?)
__NumBlocks DD	01H DUP (?)
__IsInitialized DB 01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __InitOnce
_TEXT	SEGMENT
_i$ = -8						; size = 4
__InitOnce PROC						; COMDAT
; Line 658
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 663
	movzx	eax, BYTE PTR __IsInitialized
	test	eax, eax
	je	SHORT $LN8@InitOnce
; Line 664
	jmp	$LN9@InitOnce
$LN8@InitOnce:
; Line 669
	call	__AssignMemory
	test	eax, eax
	je	SHORT $LN7@InitOnce
; Line 670
	jmp	$LN9@InitOnce
$LN7@InitOnce:
; Line 672
	mov	BYTE PTR __IsInitialized, 1
; Line 676
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@InitOnce
$LN5@InitOnce:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@InitOnce:
	mov	eax, DWORD PTR __NumBlocks
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN4@InitOnce
; Line 677
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR __pBlocks
	mov	DWORD PTR [edx+ecx*8+4], eax
; Line 678
	jmp	SHORT $LN5@InitOnce
$LN4@InitOnce:
; Line 679
	mov	DWORD PTR __FirstFreeBlock, 1
; Line 680
	mov	eax, DWORD PTR __NumBlocks
	sub	eax, 1
	mov	DWORD PTR __NumFreeBlocks, eax
; Line 684
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@InitOnce
$LN2@InitOnce:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@InitOnce:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jae	SHORT $LN1@InitOnce
; Line 685
	mov	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _i$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR __aFreeMem[ecx*8], eax
; Line 686
	jmp	SHORT $LN2@InitOnce
$LN1@InitOnce:
; Line 690
	mov	eax, DWORD PTR __pHeap
	push	eax
	mov	ecx, DWORD PTR __AllocSize
	push	ecx
	call	__AddFreeMemory
	add	esp, 8
$LN9@InitOnce:
; Line 691
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__InitOnce ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __AssignMemory
_TEXT	SEGMENT
tv78 = -196						; size = 4
__AssignMemory PROC					; COMDAT
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 622
	cmp	DWORD PTR __Config, 0
	jne	SHORT $LN6@AssignMemo
$LN5@AssignMemo:
; Line 623
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN6@AssignMemo
	jmp	SHORT $LN5@AssignMemo
$LN6@AssignMemo:
; Line 625
	movzx	eax, BYTE PTR __Config+20
	test	eax, eax
	jne	SHORT $LN3@AssignMemo
; Line 629
	push	OFFSET $SG9415
	call	_GUI_ErrorOut
	add	esp, 4
; Line 630
	jmp	$LN2@AssignMemo
$LN3@AssignMemo:
; Line 634
	mov	ecx, DWORD PTR __Config+16
	add	ecx, 8
	mov	eax, DWORD PTR __Config+8
	xor	edx, edx
	div	ecx
	add	eax, 2
	mov	DWORD PTR __NumBlocks, eax
; Line 635
	mov	eax, DWORD PTR __NumBlocks
	shl	eax, 3
	mov	ecx, DWORD PTR __Config+8
	sub	ecx, eax
	mov	DWORD PTR __AllocSize, ecx
; Line 636
	mov	eax, DWORD PTR __Config
	mov	DWORD PTR __pBlocks, eax
; Line 637
	mov	eax, DWORD PTR __NumBlocks
	mov	ecx, DWORD PTR __Config
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __pHeap, edx
; Line 641
	cmp	DWORD PTR __Config+8, 10240		; 00002800H
	jbe	SHORT $LN9@AssignMemo
	mov	DWORD PTR tv78[ebp], 10240		; 00002800H
	jmp	SHORT $LN10@AssignMemo
$LN9@AssignMemo:
	mov	eax, DWORD PTR __Config+8
	mov	DWORD PTR tv78[ebp], eax
$LN10@AssignMemo:
	mov	ecx, DWORD PTR tv78[ebp]
	push	ecx
	mov	edx, DWORD PTR __Config
	push	edx
	call	__TestRAM
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@AssignMemo
; Line 642
	push	OFFSET $SG9425
	call	_GUI_ErrorOut
	add	esp, 4
$LN2@AssignMemo:
; Line 646
	xor	eax, eax
; Line 647
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__AssignMemory ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __TestRAM
_TEXT	SEGMENT
_j$ = -104						; size = 4
_i$ = -92						; size = 4
_NumItems$ = -80					; size = 4
_pLong$ = -68						; size = 4
_pShort$ = -56						; size = 4
_pByte$ = -44						; size = 4
_Long$ = -29						; size = 1
_Short$ = -17						; size = 1
_Byte$ = -5						; size = 1
_Addr$ = 8						; size = 4
_NumBytes$ = 12						; size = 4
__TestRAM PROC						; COMDAT
; Line 541
	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 554
	mov	eax, DWORD PTR _NumBytes$[ebp]
	shr	eax, 2
	mov	DWORD PTR _NumItems$[ebp], eax
; Line 555
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN33@TestRAM
$LN32@TestRAM:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN33@TestRAM:
	cmp	DWORD PTR _j$[ebp], 2
	jae	$LN31@TestRAM
; Line 556
	mov	eax, DWORD PTR _Addr$[ebp]
	mov	DWORD PTR _pLong$[ebp], eax
; Line 557
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN30@TestRAM
$LN29@TestRAM:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN30@TestRAM:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _NumItems$[ebp]
	jae	SHORT $LN28@TestRAM
; Line 558
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	xor	edx, edx
	mov	ecx, 255				; 000000ffH
	div	ecx
	mov	BYTE PTR _Long$[ebp], dl
; Line 559
	movzx	eax, BYTE PTR _Long$[ebp]
	mov	ecx, DWORD PTR _pLong$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _pLong$[ebp]
	add	edx, 4
	mov	DWORD PTR _pLong$[ebp], edx
; Line 560
	jmp	SHORT $LN29@TestRAM
$LN28@TestRAM:
; Line 561
	mov	eax, DWORD PTR _Addr$[ebp]
	mov	DWORD PTR _pLong$[ebp], eax
; Line 562
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN27@TestRAM
$LN26@TestRAM:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN27@TestRAM:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _NumItems$[ebp]
	jae	SHORT $LN25@TestRAM
; Line 563
	mov	eax, DWORD PTR _pLong$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _Long$[ebp], cl
	mov	edx, DWORD PTR _pLong$[ebp]
	add	edx, 4
	mov	DWORD PTR _pLong$[ebp], edx
; Line 564
	movzx	ecx, BYTE PTR _Long$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	xor	edx, edx
	mov	esi, 255				; 000000ffH
	div	esi
	cmp	ecx, edx
	je	SHORT $LN24@TestRAM
; Line 565
	mov	eax, 3
	jmp	$LN34@TestRAM
$LN24@TestRAM:
; Line 567
	jmp	SHORT $LN26@TestRAM
$LN25@TestRAM:
; Line 568
	jmp	$LN32@TestRAM
$LN31@TestRAM:
; Line 572
	mov	eax, DWORD PTR _NumBytes$[ebp]
	shr	eax, 1
	mov	DWORD PTR _NumItems$[ebp], eax
; Line 573
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN23@TestRAM
$LN22@TestRAM:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN23@TestRAM:
	cmp	DWORD PTR _j$[ebp], 2
	jae	$LN21@TestRAM
; Line 574
	mov	eax, DWORD PTR _Addr$[ebp]
	mov	DWORD PTR _pShort$[ebp], eax
; Line 575
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@TestRAM
$LN19@TestRAM:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN20@TestRAM:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _NumItems$[ebp]
	jae	SHORT $LN18@TestRAM
; Line 576
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	xor	edx, edx
	mov	ecx, 255				; 000000ffH
	div	ecx
	mov	BYTE PTR _Short$[ebp], dl
; Line 577
	movzx	ax, BYTE PTR _Short$[ebp]
	mov	ecx, DWORD PTR _pShort$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pShort$[ebp]
	add	edx, 2
	mov	DWORD PTR _pShort$[ebp], edx
; Line 578
	jmp	SHORT $LN19@TestRAM
$LN18@TestRAM:
; Line 579
	mov	eax, DWORD PTR _Addr$[ebp]
	mov	DWORD PTR _pShort$[ebp], eax
; Line 580
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN17@TestRAM
$LN16@TestRAM:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN17@TestRAM:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _NumItems$[ebp]
	jae	SHORT $LN15@TestRAM
; Line 581
	mov	eax, DWORD PTR _pShort$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _Short$[ebp], cl
	mov	edx, DWORD PTR _pShort$[ebp]
	add	edx, 2
	mov	DWORD PTR _pShort$[ebp], edx
; Line 582
	movzx	ecx, BYTE PTR _Short$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	xor	edx, edx
	mov	esi, 255				; 000000ffH
	div	esi
	cmp	ecx, edx
	je	SHORT $LN14@TestRAM
; Line 583
	mov	eax, 2
	jmp	$LN34@TestRAM
$LN14@TestRAM:
; Line 585
	jmp	SHORT $LN16@TestRAM
$LN15@TestRAM:
; Line 586
	jmp	$LN22@TestRAM
$LN21@TestRAM:
; Line 590
	mov	eax, DWORD PTR _NumBytes$[ebp]
	mov	DWORD PTR _NumItems$[ebp], eax
; Line 591
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN13@TestRAM
$LN12@TestRAM:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN13@TestRAM:
	cmp	DWORD PTR _j$[ebp], 2
	jae	$LN11@TestRAM
; Line 592
	mov	eax, DWORD PTR _Addr$[ebp]
	mov	DWORD PTR _pByte$[ebp], eax
; Line 593
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@TestRAM
$LN9@TestRAM:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@TestRAM:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _NumItems$[ebp]
	jae	SHORT $LN8@TestRAM
; Line 594
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	xor	edx, edx
	mov	ecx, 255				; 000000ffH
	div	ecx
	mov	BYTE PTR _Byte$[ebp], dl
; Line 595
	mov	eax, DWORD PTR _pByte$[ebp]
	mov	cl, BYTE PTR _Byte$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _pByte$[ebp]
	add	edx, 1
	mov	DWORD PTR _pByte$[ebp], edx
; Line 596
	jmp	SHORT $LN9@TestRAM
$LN8@TestRAM:
; Line 597
	mov	eax, DWORD PTR _Addr$[ebp]
	mov	DWORD PTR _pByte$[ebp], eax
; Line 598
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@TestRAM
$LN6@TestRAM:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@TestRAM:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _NumItems$[ebp]
	jae	SHORT $LN5@TestRAM
; Line 599
	mov	eax, DWORD PTR _pByte$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _Byte$[ebp], cl
	mov	edx, DWORD PTR _pByte$[ebp]
	add	edx, 1
	mov	DWORD PTR _pByte$[ebp], edx
; Line 600
	movzx	ecx, BYTE PTR _Byte$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	xor	edx, edx
	mov	esi, 255				; 000000ffH
	div	esi
	cmp	ecx, edx
	je	SHORT $LN4@TestRAM
; Line 601
	mov	eax, 1
	jmp	SHORT $LN34@TestRAM
$LN4@TestRAM:
; Line 603
	jmp	SHORT $LN6@TestRAM
$LN5@TestRAM:
; Line 604
	jmp	$LN12@TestRAM
$LN11@TestRAM:
; Line 608
	mov	eax, DWORD PTR _NumBytes$[ebp]
	mov	DWORD PTR _NumItems$[ebp], eax
; Line 609
	mov	eax, DWORD PTR _Addr$[ebp]
	mov	DWORD PTR _pByte$[ebp], eax
; Line 610
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@TestRAM
$LN2@TestRAM:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@TestRAM:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _NumItems$[ebp]
	jae	SHORT $LN1@TestRAM
; Line 611
	mov	eax, DWORD PTR _pByte$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _pByte$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pByte$[ebp], ecx
; Line 612
	jmp	SHORT $LN2@TestRAM
$LN1@TestRAM:
; Line 613
	xor	eax, eax
$LN34@TestRAM:
; Line 614
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__TestRAM ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetFixedBlock
_TEXT	SEGMENT
_pFree$ = -8						; size = 4
_Size$ = 8						; size = 4
__GetFixedBlock PROC					; COMDAT
; Line 894
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 897
	mov	eax, DWORD PTR __pFirstFixedFreeTag
	mov	DWORD PTR _pFree$[ebp], eax
$LN3@GetFixedBl:
; Line 898
	cmp	DWORD PTR _pFree$[ebp], 0
	je	SHORT $LN2@GetFixedBl
; Line 899
	mov	eax, DWORD PTR _pFree$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	cmp	ecx, DWORD PTR _Size$[ebp]
	jne	SHORT $LN1@GetFixedBl
; Line 900
	mov	eax, DWORD PTR _pFree$[ebp]
	jmp	SHORT $LN4@GetFixedBl
$LN1@GetFixedBl:
; Line 902
	mov	eax, DWORD PTR _pFree$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pFree$[ebp], ecx
; Line 903
	jmp	SHORT $LN3@GetFixedBl
$LN2@GetFixedBl:
; Line 904
	xor	eax, eax
$LN4@GetFixedBl:
; Line 905
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetFixedBlock ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_AllocNoInit
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_AllocNoInit
_TEXT	SEGMENT
_hMem$ = -8						; size = 4
_Size$ = 8						; size = 4
_GUI_ALLOC_AllocNoInit PROC				; COMDAT
; Line 1033
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1035
	cmp	DWORD PTR _Size$[ebp], 0
	jne	SHORT $LN1@GUI_ALLOC_@3
; Line 1036
	xor	eax, eax
	jmp	SHORT $LN2@GUI_ALLOC_@3
$LN1@GUI_ALLOC_@3:
; Line 1040
	mov	eax, DWORD PTR _Size$[ebp]
	push	eax
	call	__Alloc
	add	esp, 4
	mov	DWORD PTR _hMem$[ebp], eax
; Line 1043
	mov	eax, DWORD PTR _hMem$[ebp]
$LN2@GUI_ALLOC_@3:
; Line 1044
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_AllocNoInit ENDP
_TEXT	ENDS
_BSS	SEGMENT
	ALIGN	4

__LockCnt DD	01H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __Alloc
_TEXT	SEGMENT
_pTag$ = -32						; size = 4
_OldSize$ = -20						; size = 4
_hMem$ = -8						; size = 4
_Size$ = 8						; size = 4
__Alloc	PROC						; COMDAT
; Line 776
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 780
	call	__InitOnce
; Line 782
	cmp	DWORD PTR __LockCntHandles, 0
	jle	SHORT $LN11@Alloc
; Line 789
	push	OFFSET $SG9477
	call	_GUI_ErrorOut
	add	esp, 4
$LN11@Alloc:
; Line 794
	mov	eax, DWORD PTR _Size$[ebp]
	push	eax
	call	__SizeToLegalSize
	add	esp, 4
	mov	DWORD PTR _Size$[ebp], eax
$LN10@Alloc:
; Line 802
	mov	eax, DWORD PTR _Size$[ebp]
	push	eax
	call	__GetFreeTag
	add	esp, 4
	mov	DWORD PTR _pTag$[ebp], eax
; Line 803
	cmp	DWORD PTR _pTag$[ebp], 0
	jne	SHORT $LN9@Alloc
; Line 807
	cmp	DWORD PTR __LockCnt, 0
	jne	SHORT $LN5@Alloc
	cmp	DWORD PTR __LockCntHandles, 0
	je	SHORT $LN6@Alloc
$LN5@Alloc:
; Line 811
	xor	eax, eax
	jmp	$LN12@Alloc
; Line 812
	jmp	SHORT $LN9@Alloc
$LN6@Alloc:
; Line 816
	call	__RemoveHoles
	test	eax, eax
	je	SHORT $LN9@Alloc
; Line 820
	xor	eax, eax
	jmp	$LN12@Alloc
$LN9@Alloc:
; Line 824
	cmp	DWORD PTR _pTag$[ebp], 0
	je	SHORT $LN10@Alloc
; Line 828
	call	__PopFreeBlock
	mov	DWORD PTR _hMem$[ebp], eax
; Line 832
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _OldSize$[ebp], ecx
; Line 836
	mov	eax, DWORD PTR _OldSize$[ebp]
	sub	eax, DWORD PTR _Size$[ebp]
	mov	ecx, DWORD PTR __aFreeMem
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	jae	SHORT $LN2@Alloc
; Line 837
	mov	eax, DWORD PTR _OldSize$[ebp]
	mov	DWORD PTR _Size$[ebp], eax
$LN2@Alloc:
; Line 842
	mov	eax, DWORD PTR _pTag$[ebp]
	push	eax
	call	__RemoveFreeMemory
	add	esp, 4
; Line 846
	mov	eax, DWORD PTR _hMem$[ebp]
	mov	ecx, DWORD PTR __pBlocks
	mov	edx, DWORD PTR _pTag$[ebp]
	mov	DWORD PTR [ecx+eax*8+4], edx
; Line 850
	push	0
	mov	eax, DWORD PTR _Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hMem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pTag$[ebp]
	push	edx
	call	__WriteTagData
	add	esp, 16					; 00000010H
; Line 854
	mov	eax, DWORD PTR _OldSize$[ebp]
	cmp	eax, DWORD PTR _Size$[ebp]
	jle	SHORT $LN1@Alloc
; Line 855
	mov	eax, DWORD PTR _pTag$[ebp]
	add	eax, DWORD PTR _Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _OldSize$[ebp]
	sub	ecx, DWORD PTR _Size$[ebp]
	push	ecx
	call	__AddFreeMemory
	add	esp, 8
$LN1@Alloc:
; Line 858
	mov	eax, DWORD PTR _hMem$[ebp]
$LN12@Alloc:
; Line 859
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Alloc	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __PopFreeBlock
_TEXT	SEGMENT
_hMem$ = -8						; size = 4
__PopFreeBlock PROC					; COMDAT
; Line 700
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 705
	cmp	DWORD PTR __NumFreeBlocks, 0
	jne	SHORT $LN1@PopFreeBlo
; Line 706
	xor	eax, eax
	jmp	SHORT $LN2@PopFreeBlo
$LN1@PopFreeBlo:
; Line 708
	mov	eax, DWORD PTR __NumFreeBlocks
	sub	eax, 1
	mov	DWORD PTR __NumFreeBlocks, eax
; Line 709
	mov	eax, DWORD PTR __FirstFreeBlock
	mov	DWORD PTR _hMem$[ebp], eax
; Line 710
	mov	eax, DWORD PTR __FirstFreeBlock
	mov	ecx, DWORD PTR __pBlocks
	mov	edx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR __FirstFreeBlock, edx
; Line 712
	mov	eax, DWORD PTR _hMem$[ebp]
	mov	ecx, DWORD PTR __pBlocks
	mov	BYTE PTR [ecx+eax*8], 1
; Line 714
	mov	eax, DWORD PTR _hMem$[ebp]
$LN2@PopFreeBlo:
; Line 715
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__PopFreeBlock ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SizeToLegalSize
_TEXT	SEGMENT
tv67 = -196						; size = 4
_Size$ = 8						; size = 4
__SizeToLegalSize PROC					; COMDAT
; Line 740
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 741
	mov	eax, DWORD PTR _Size$[ebp]
	cmp	eax, DWORD PTR __aFreeMem
	jae	SHORT $LN3@SizeToLega
	mov	ecx, DWORD PTR __aFreeMem
	mov	DWORD PTR tv67[ebp], ecx
	jmp	SHORT $LN4@SizeToLega
$LN3@SizeToLega:
	mov	edx, DWORD PTR _Size$[ebp]
	add	edx, 3
	and	edx, -4					; fffffffcH
	mov	DWORD PTR tv67[ebp], edx
$LN4@SizeToLega:
	mov	eax, DWORD PTR tv67[ebp]
	mov	DWORD PTR _Size$[ebp], eax
; Line 742
	mov	eax, DWORD PTR _Size$[ebp]
	add	eax, 12					; 0000000cH
; Line 743
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__SizeToLegalSize ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_h2p
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_h2p
_TEXT	SEGMENT
_hMem$ = 8						; size = 4
_GUI_ALLOC_h2p PROC					; COMDAT
; Line 1050
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1053
	cmp	DWORD PTR _hMem$[ebp], 0
	jne	SHORT $LN2@GUI_ALLOC_@4
; Line 1054
	push	OFFSET $SG9574
	call	_GUI_ErrorOut
	add	esp, 4
; Line 1055
	xor	eax, eax
	jmp	SHORT $LN3@GUI_ALLOC_@4
$LN2@GUI_ALLOC_@4:
; Line 1057
	mov	eax, DWORD PTR _hMem$[ebp]
	mov	ecx, DWORD PTR __pBlocks
	movzx	edx, BYTE PTR [ecx+eax*8]
	test	edx, edx
	jne	SHORT $LN1@GUI_ALLOC_@4
; Line 1058
	push	OFFSET $SG9576
	call	_GUI_ErrorOut
	add	esp, 4
$LN1@GUI_ALLOC_@4:
; Line 1061
	mov	eax, DWORD PTR _hMem$[ebp]
	mov	ecx, DWORD PTR __pBlocks
	mov	eax, DWORD PTR [ecx+eax*8+4]
	add	eax, 8
$LN3@GUI_ALLOC_@4:
; Line 1062
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_h2p ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_LockH
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_LockH
_TEXT	SEGMENT
_hMem$ = 8						; size = 4
_GUI_ALLOC_LockH PROC					; COMDAT
; Line 1068
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1069
	mov	eax, DWORD PTR __LockCntHandles
	add	eax, 1
	mov	DWORD PTR __LockCntHandles, eax
; Line 1070
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
; Line 1071
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_LockH ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_UnlockH
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_UnlockH
_TEXT	SEGMENT
_GUI_ALLOC_UnlockH PROC					; COMDAT
; Line 1077
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1078
	cmp	DWORD PTR __LockCntHandles, 0
	jne	SHORT $LN2@GUI_ALLOC_@5
; Line 1079
	push	OFFSET $SG9584
	call	_GUI_ErrorOut
	add	esp, 4
; Line 1080
	jmp	SHORT $LN1@GUI_ALLOC_@5
$LN2@GUI_ALLOC_@5:
; Line 1081
	mov	eax, DWORD PTR __LockCntHandles
	sub	eax, 1
	mov	DWORD PTR __LockCntHandles, eax
$LN1@GUI_ALLOC_@5:
; Line 1083
	xor	eax, eax
; Line 1084
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_UnlockH ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_GetNumFreeBytes
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_GetNumFreeBytes
_TEXT	SEGMENT
_GUI_ALLOC_GetNumFreeBytes PROC				; COMDAT
; Line 1090
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1091
	call	__InitOnce
; Line 1092
	mov	eax, DWORD PTR __NumFreeBytes
	sub	eax, 12					; 0000000cH
; Line 1093
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_GetNumFreeBytes ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_GetNumFreeBlocks
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_GetNumFreeBlocks
_TEXT	SEGMENT
_GUI_ALLOC_GetNumFreeBlocks PROC			; COMDAT
; Line 1099
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1100
	call	__InitOnce
; Line 1101
	mov	eax, DWORD PTR __NumFreeBlocks
; Line 1102
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_GetNumFreeBlocks ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_GetNumUsedBytes
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_GetNumUsedBytes
_TEXT	SEGMENT
_GUI_ALLOC_GetNumUsedBytes PROC				; COMDAT
; Line 1108
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1109
	call	__InitOnce
; Line 1110
	mov	eax, DWORD PTR __AllocSize
	sub	eax, DWORD PTR __NumFreeBytes
; Line 1111
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_GetNumUsedBytes ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_GetNumUsedBlocks
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_GetNumUsedBlocks
_TEXT	SEGMENT
_GUI_ALLOC_GetNumUsedBlocks PROC			; COMDAT
; Line 1117
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1118
	call	__InitOnce
; Line 1119
	mov	eax, DWORD PTR __NumBlocks
	sub	eax, DWORD PTR __NumFreeBlocks
; Line 1120
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_GetNumUsedBlocks ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_GetMaxSize
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_GetMaxSize
_TEXT	SEGMENT
tv82 = -244						; size = 4
$T9776 = -233						; size = 1
_pTag$ = -32						; size = 4
_Index$ = -20						; size = 4
_MaxSize$ = -8						; size = 4
_GUI_ALLOC_GetMaxSize PROC				; COMDAT
; Line 1129
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T9776[ebp], 0
; Line 1130
	mov	DWORD PTR _MaxSize$[ebp], 0
; Line 1133
	call	__InitOnce
; Line 1134
	mov	DWORD PTR _Index$[ebp], 15		; 0000000fH
	jmp	SHORT $LN8@GUI_ALLOC_@6
$LN7@GUI_ALLOC_@6:
	mov	eax, DWORD PTR _Index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Index$[ebp], eax
$LN8@GUI_ALLOC_@6:
	cmp	DWORD PTR _Index$[ebp], 0
	jl	SHORT $LN3@GUI_ALLOC_@6
; Line 1135
	mov	eax, DWORD PTR _Index$[ebp]
	cmp	DWORD PTR __aFreeMem[eax*8+4], 0
	je	SHORT $LN5@GUI_ALLOC_@6
; Line 1136
	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR __aFreeMem[eax*8+4]
	mov	BYTE PTR $T9776[ebp], 1
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _pTag$[ebp], edx
; Line 1137
	jmp	SHORT $LN3@GUI_ALLOC_@6
; Line 1138
	jmp	SHORT $LN4@GUI_ALLOC_@6
$LN5@GUI_ALLOC_@6:
; Line 1139
	mov	BYTE PTR $T9776[ebp], 1
	mov	DWORD PTR _pTag$[ebp], 0
$LN4@GUI_ALLOC_@6:
; Line 1141
	jmp	SHORT $LN7@GUI_ALLOC_@6
$LN3@GUI_ALLOC_@6:
; Line 1142
	cmp	BYTE PTR $T9776[ebp], 0
	jne	SHORT $LN13@GUI_ALLOC_@6
	push	OFFSET $LN14@GUI_ALLOC_@6
	call	__RTC_UninitUse
	add	esp, 4
$LN13@GUI_ALLOC_@6:
	cmp	DWORD PTR _pTag$[ebp], 0
	je	$LN2@GUI_ALLOC_@6
; Line 1143
	cmp	BYTE PTR $T9776[ebp], 0
	jne	SHORT $LN15@GUI_ALLOC_@6
	push	OFFSET $LN14@GUI_ALLOC_@6
	call	__RTC_UninitUse
	add	esp, 4
$LN15@GUI_ALLOC_@6:
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR _MaxSize$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN1@GUI_ALLOC_@6
; Line 1144
	cmp	BYTE PTR $T9776[ebp], 0
	jne	SHORT $LN16@GUI_ALLOC_@6
	push	OFFSET $LN14@GUI_ALLOC_@6
	call	__RTC_UninitUse
	add	esp, 4
$LN16@GUI_ALLOC_@6:
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _MaxSize$[ebp], ecx
$LN1@GUI_ALLOC_@6:
; Line 1146
	cmp	BYTE PTR $T9776[ebp], 0
	jne	SHORT $LN17@GUI_ALLOC_@6
	push	OFFSET $LN14@GUI_ALLOC_@6
	call	__RTC_UninitUse
	add	esp, 4
$LN17@GUI_ALLOC_@6:
	mov	eax, DWORD PTR _pTag$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN11@GUI_ALLOC_@6
	cmp	BYTE PTR $T9776[ebp], 0
	jne	SHORT $LN18@GUI_ALLOC_@6
	push	OFFSET $LN14@GUI_ALLOC_@6
	call	__RTC_UninitUse
	add	esp, 4
$LN18@GUI_ALLOC_@6:
	mov	ecx, DWORD PTR _pTag$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN12@GUI_ALLOC_@6
$LN11@GUI_ALLOC_@6:
	mov	DWORD PTR tv82[ebp], 0
$LN12@GUI_ALLOC_@6:
	mov	BYTE PTR $T9776[ebp], 1
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _pTag$[ebp], ecx
; Line 1147
	jmp	$LN3@GUI_ALLOC_@6
$LN2@GUI_ALLOC_@6:
; Line 1148
	mov	eax, DWORD PTR _MaxSize$[ebp]
	sub	eax, 12					; 0000000cH
; Line 1149
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@GUI_ALLOC_@6:
$LN14@GUI_ALLOC_@6:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
_GUI_ALLOC_GetMaxSize ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_RequestSize
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_RequestSize
_TEXT	SEGMENT
_MaxSize$ = -8						; size = 4
_GUI_ALLOC_RequestSize PROC				; COMDAT
; Line 1155
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1158
	call	_GUI_ALLOC_GetMaxSize
	mov	DWORD PTR _MaxSize$[ebp], eax
; Line 1159
	cmp	DWORD PTR _MaxSize$[ebp], 4194304	; 00400000H
	jbe	SHORT $LN2@GUI_ALLOC_@7
; Line 1160
	mov	eax, DWORD PTR _MaxSize$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	imul	eax, DWORD PTR __MaxRequestPercent
	mov	DWORD PTR _MaxSize$[ebp], eax
; Line 1161
	jmp	SHORT $LN1@GUI_ALLOC_@7
$LN2@GUI_ALLOC_@7:
; Line 1162
	mov	eax, DWORD PTR _MaxSize$[ebp]
	imul	eax, DWORD PTR __MaxRequestPercent
	xor	edx, edx
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	DWORD PTR _MaxSize$[ebp], eax
$LN1@GUI_ALLOC_@7:
; Line 1165
	mov	eax, DWORD PTR _MaxSize$[ebp]
; Line 1166
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_RequestSize ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_Lock
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_Lock
_TEXT	SEGMENT
_GUI_ALLOC_Lock PROC					; COMDAT
; Line 1176
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1177
	mov	eax, DWORD PTR __LockCnt
	add	eax, 1
	mov	DWORD PTR __LockCnt, eax
; Line 1178
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_Lock ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_Unlock
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_Unlock
_TEXT	SEGMENT
_GUI_ALLOC_Unlock PROC					; COMDAT
; Line 1188
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1189
	mov	eax, DWORD PTR __LockCnt
	sub	eax, 1
	mov	DWORD PTR __LockCnt, eax
; Line 1190
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_Unlock ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_AssignMemory
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_AssignMemory
_TEXT	SEGMENT
_p$ = 8							; size = 4
_NumBytes$ = 12						; size = 4
_GUI_ALLOC_AssignMemory PROC				; COMDAT
; Line 1196
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1197
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR __Config, eax
; Line 1198
	mov	eax, DWORD PTR _NumBytes$[ebp]
	mov	DWORD PTR __Config+8, eax
; Line 1199
	mov	BYTE PTR __Config+20, 1
; Line 1200
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_AssignMemory ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_SetAvBlockSize
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_SetAvBlockSize
_TEXT	SEGMENT
_BlockSize$ = 8						; size = 4
_GUI_ALLOC_SetAvBlockSize PROC				; COMDAT
; Line 1206
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1207
	mov	eax, DWORD PTR _BlockSize$[ebp]
	mov	DWORD PTR __Config+16, eax
; Line 1208
	mov	DWORD PTR __Config+12, 0
; Line 1209
	mov	BYTE PTR __Config+20, 1
; Line 1210
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_SetAvBlockSize ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_GetSize
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_GetSize
_TEXT	SEGMENT
_r$ = -8						; size = 4
_hMem$ = 8						; size = 4
_GUI_ALLOC_GetSize PROC					; COMDAT
; Line 1384
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1387
	mov	DWORD PTR _r$[ebp], 0
; Line 1388
	cmp	DWORD PTR _hMem$[ebp], 0
	je	SHORT $LN1@GUI_ALLOC_@8
; Line 1389
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	__GetSize
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax
$LN1@GUI_ALLOC_@8:
; Line 1391
	mov	eax, DWORD PTR _r$[ebp]
; Line 1392
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_GetSize ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __GetSize
_TEXT	SEGMENT
_pTag$ = -8						; size = 4
_hMem$ = 8						; size = 4
__GetSize PROC						; COMDAT
; Line 758
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 760
	mov	eax, DWORD PTR _hMem$[ebp]
	mov	ecx, DWORD PTR __pBlocks
	mov	edx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR _pTag$[ebp], edx
; Line 761
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, 12					; 0000000cH
; Line 762
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__GetSize ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_Free
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_Free
_TEXT	SEGMENT
_hMem$ = 8						; size = 4
_GUI_ALLOC_Free PROC					; COMDAT
; Line 1398
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1399
	cmp	DWORD PTR _hMem$[ebp], 0
	jne	SHORT $LN1@GUI_ALLOC_@9
; Line 1400
	jmp	SHORT $LN2@GUI_ALLOC_@9
$LN1@GUI_ALLOC_@9:
; Line 1404
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	__Free
	add	esp, 4
$LN2@GUI_ALLOC_@9:
; Line 1406
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_Free ENDP
_TEXT	ENDS
EXTRN	_GUI__memset:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Free
_TEXT	SEGMENT
_pTag$ = -8						; size = 4
_hMem$ = 8						; size = 4
__Free	PROC						; COMDAT
; Line 868
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 871
	mov	eax, DWORD PTR _hMem$[ebp]
	mov	ecx, DWORD PTR __pBlocks
	movzx	edx, BYTE PTR [ecx+eax*8]
	test	edx, edx
	jne	SHORT $LN1@Free
; Line 872
	push	OFFSET $SG9506
	call	_GUI_ErrorOut
	add	esp, 4
; Line 873
	jmp	SHORT $LN2@Free
$LN1@Free:
; Line 876
	mov	eax, DWORD PTR _hMem$[ebp]
	mov	ecx, DWORD PTR __pBlocks
	mov	edx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR _pTag$[ebp], edx
; Line 878
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 12					; 0000000cH
	push	ecx
	push	204					; 000000ccH
	mov	edx, DWORD PTR _pTag$[ebp]
	add	edx, 8
	push	edx
	call	_GUI__memset
	add	esp, 12					; 0000000cH
; Line 883
	mov	eax, DWORD PTR _pTag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTag$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	__AddFreeMemory
	add	esp, 8
; Line 887
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	__PushFreeBlock
	add	esp, 4
$LN2@Free:
; Line 888
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Free	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __PushFreeBlock
_TEXT	SEGMENT
_hMem$ = 8						; size = 4
__PushFreeBlock PROC					; COMDAT
; Line 724
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 725
	mov	eax, DWORD PTR __NumFreeBlocks
	add	eax, 1
	mov	DWORD PTR __NumFreeBlocks, eax
; Line 726
	mov	eax, DWORD PTR _hMem$[ebp]
	mov	ecx, DWORD PTR __pBlocks
	mov	edx, DWORD PTR __FirstFreeBlock
	mov	DWORD PTR [ecx+eax*8+4], edx
; Line 728
	mov	eax, DWORD PTR _hMem$[ebp]
	mov	ecx, DWORD PTR __pBlocks
	mov	BYTE PTR [ecx+eax*8], 0
; Line 730
	mov	eax, DWORD PTR _hMem$[ebp]
	mov	DWORD PTR __FirstFreeBlock, eax
; Line 731
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__PushFreeBlock ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_FreePtr
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_FreePtr
_TEXT	SEGMENT
_ph$ = 8						; size = 4
_GUI_ALLOC_FreePtr PROC					; COMDAT
; Line 1413
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1415
	mov	eax, DWORD PTR _ph$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_GUI_ALLOC_Free
	add	esp, 4
; Line 1416
	mov	eax, DWORD PTR _ph$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1418
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_FreePtr ENDP
_TEXT	ENDS
PUBLIC	_GUI_ALLOC_FreePtrArray
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_ALLOC_FreePtrArray
_TEXT	SEGMENT
_i$ = -8						; size = 4
_pArray$ = 8						; size = 4
_NumElems$ = 12						; size = 4
_GUI_ALLOC_FreePtrArray PROC				; COMDAT
; Line 1424
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1426
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@GUI_ALLOC_@10
$LN2@GUI_ALLOC_@10:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@GUI_ALLOC_@10:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _NumElems$[ebp]
	jge	SHORT $LN4@GUI_ALLOC_@10
; Line 1427
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pArray$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_GUI_ALLOC_FreePtr
	add	esp, 4
; Line 1428
	jmp	SHORT $LN2@GUI_ALLOC_@10
$LN4@GUI_ALLOC_@10:
; Line 1429
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_ALLOC_FreePtrArray ENDP
_TEXT	ENDS
END
