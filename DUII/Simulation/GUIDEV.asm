; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\MemDev\GUIDEV.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG9989	DB	'GUI_MEMDEV_Create: Too little memory', 00H
	ORG $+3
$SG9996	DB	'GUI_MEMDEV_Create: Alloc failed', 00H
_DATA	ENDS
PUBLIC	_GUI_MEMDEV__WriteToActiveAt
EXTRN	_GUI_ALLOC_h2p:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\memdev\guidev.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_MEMDEV__WriteToActiveAt
_TEXT	SEGMENT
_pFunc$ = -20						; size = 4
_pDev$ = -8						; size = 4
_hMem$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_GUI_MEMDEV__WriteToActiveAt PROC			; COMDAT
; Line 47
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 51
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 52
	mov	esi, esp
	push	22					; 00000016H
	push	0
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pFunc$[ebp], eax
; Line 53
	cmp	DWORD PTR _pFunc$[ebp], 0
	je	SHORT $LN2@GUI_MEMDEV
; Line 54
	mov	esi, esp
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hMem$[ebp]
	push	edx
	call	DWORD PTR _pFunc$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@GUI_MEMDEV:
; Line 56
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV__WriteToActiveAt ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEMDEV__CreateFixed
EXTRN	_GUI_ALLOC_Free:PROC
EXTRN	_GUI_ALLOC_AllocZero:PROC
EXTRN	_GUI_ALLOC_AllocNoInit:PROC
EXTRN	_GUI_DEVICE_Delete:PROC
EXTRN	_GUI_Warn:PROC
EXTRN	_GUI_USAGE_BM_Create:PROC
EXTRN	_GUI_ALLOC_RequestSize:PROC
EXTRN	_LCD__GetBPPDevice:PROC
EXTRN	_GUI_DEVICE_Create:PROC
EXTRN	_GUI_Context:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEMDEV__CreateFixed
_TEXT	SEGMENT
tv90 = -292						; size = 4
_pDevice$ = -92						; size = 4
_pDevData$ = -80					; size = 4
_hUsage$ = -68						; size = 4
_BytesPerLine$ = -56					; size = 4
_BitsPerPixel$ = -44					; size = 4
_MemSize$ = -32						; size = 4
_hMemDev$ = -20						; size = 4
_MaxLines$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xSize$ = 16						; size = 4
_ySize$ = 20						; size = 4
_Flags$ = 24						; size = 4
_pDeviceAPI$ = 28					; size = 4
_pColorConvAPI$ = 32					; size = 4
_GUI_MEMDEV__CreateFixed PROC				; COMDAT
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 70
	mov	DWORD PTR _hUsage$[ebp], 0
; Line 77
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	push	0
	mov	ecx, DWORD PTR _pColorConvAPI$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDeviceAPI$[ebp]
	push	edx
	call	_GUI_DEVICE_Create
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pDevice$[ebp], eax
; Line 78
	cmp	DWORD PTR _pDevice$[ebp], 0
	jne	SHORT $LN9@GUI_MEMDEV@2
; Line 79
	xor	eax, eax
	jmp	$LN10@GUI_MEMDEV@2
$LN9@GUI_MEMDEV@2:
; Line 84
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_LCD__GetBPPDevice
	add	esp, 4
	mov	DWORD PTR _BitsPerPixel$[ebp], eax
; Line 85
	mov	eax, DWORD PTR _xSize$[ebp]
	imul	eax, DWORD PTR _BitsPerPixel$[ebp]
	add	eax, 7
	shr	eax, 3
	mov	DWORD PTR _BytesPerLine$[ebp], eax
; Line 89
	call	_GUI_ALLOC_RequestSize
	mov	DWORD PTR _MemSize$[ebp], eax
; Line 90
	mov	eax, DWORD PTR _Flags$[ebp]
	and	eax, 1
	jne	SHORT $LN8@GUI_MEMDEV@2
; Line 91
	mov	eax, DWORD PTR _MemSize$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	imul	eax, 3
	mov	DWORD PTR _MemSize$[ebp], eax
$LN8@GUI_MEMDEV@2:
; Line 93
	cmp	DWORD PTR _ySize$[ebp], 0
	jg	SHORT $LN7@GUI_MEMDEV@2
; Line 94
	mov	eax, DWORD PTR _MemSize$[ebp]
	sub	eax, 24					; 00000018H
	xor	edx, edx
	div	DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR _MaxLines$[ebp], eax
; Line 95
	mov	eax, DWORD PTR _ySize$[ebp]
	neg	eax
	cmp	DWORD PTR _MaxLines$[ebp], eax
	jle	SHORT $LN12@GUI_MEMDEV@2
	mov	ecx, DWORD PTR _ySize$[ebp]
	neg	ecx
	mov	DWORD PTR tv90[ebp], ecx
	jmp	SHORT $LN13@GUI_MEMDEV@2
$LN12@GUI_MEMDEV@2:
	mov	edx, DWORD PTR _MaxLines$[ebp]
	mov	DWORD PTR tv90[ebp], edx
$LN13@GUI_MEMDEV@2:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR _ySize$[ebp], eax
$LN7@GUI_MEMDEV@2:
; Line 97
	mov	eax, DWORD PTR _Flags$[ebp]
	and	eax, 1
	jne	SHORT $LN6@GUI_MEMDEV@2
; Line 101
	push	0
	mov	eax, DWORD PTR _ySize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	call	_GUI_USAGE_BM_Create
	add	esp, 20					; 00000014H
	mov	DWORD PTR _hUsage$[ebp], eax
$LN6@GUI_MEMDEV@2:
; Line 106
	cmp	DWORD PTR _ySize$[ebp], 0
	jg	SHORT $LN5@GUI_MEMDEV@2
; Line 107
	push	OFFSET $SG9989
	call	_GUI_Warn
	add	esp, 4
; Line 108
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	_GUI_DEVICE_Delete
	add	esp, 4
; Line 109
	xor	eax, eax
	jmp	$LN10@GUI_MEMDEV@2
$LN5@GUI_MEMDEV@2:
; Line 111
	mov	eax, DWORD PTR _ySize$[ebp]
	imul	eax, DWORD PTR _BytesPerLine$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _MemSize$[ebp], eax
; Line 115
	mov	eax, DWORD PTR _Flags$[ebp]
	and	eax, 1
	je	SHORT $LN4@GUI_MEMDEV@2
; Line 116
	mov	eax, DWORD PTR _MemSize$[ebp]
	push	eax
	call	_GUI_ALLOC_AllocNoInit
	add	esp, 4
	mov	DWORD PTR _hMemDev$[ebp], eax
; Line 117
	jmp	SHORT $LN3@GUI_MEMDEV@2
$LN4@GUI_MEMDEV@2:
; Line 118
	mov	eax, DWORD PTR _MemSize$[ebp]
	push	eax
	call	_GUI_ALLOC_AllocZero
	add	esp, 4
	mov	DWORD PTR _hMemDev$[ebp], eax
$LN3@GUI_MEMDEV@2:
; Line 123
	cmp	DWORD PTR _hMemDev$[ebp], 0
	jne	SHORT $LN2@GUI_MEMDEV@2
; Line 124
	cmp	DWORD PTR _hUsage$[ebp], 0
	je	SHORT $LN1@GUI_MEMDEV@2
; Line 125
	mov	eax, DWORD PTR _hUsage$[ebp]
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN1@GUI_MEMDEV@2:
; Line 127
	push	OFFSET $SG9996
	call	_GUI_Warn
	add	esp, 4
; Line 128
	xor	eax, eax
	jmp	$LN10@GUI_MEMDEV@2
$LN2@GUI_MEMDEV@2:
; Line 133
	mov	eax, DWORD PTR _hMemDev$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDevData$[ebp], eax
; Line 134
	mov	eax, DWORD PTR _pDevData$[ebp]
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 135
	mov	eax, DWORD PTR _pDevData$[ebp]
	mov	cx, WORD PTR _x0$[ebp]
	mov	WORD PTR [eax+4], cx
; Line 136
	mov	eax, DWORD PTR _pDevData$[ebp]
	mov	cx, WORD PTR _y0$[ebp]
	mov	WORD PTR [eax+6], cx
; Line 137
	mov	eax, DWORD PTR _pDevData$[ebp]
	mov	cx, WORD PTR _xSize$[ebp]
	mov	WORD PTR [eax+8], cx
; Line 138
	mov	eax, DWORD PTR _pDevData$[ebp]
	mov	cx, WORD PTR _ySize$[ebp]
	mov	WORD PTR [eax+10], cx
; Line 139
	mov	eax, DWORD PTR _pDevData$[ebp]
	mov	ecx, DWORD PTR _BytesPerLine$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 140
	mov	eax, DWORD PTR _pDevData$[ebp]
	mov	ecx, DWORD PTR _BitsPerPixel$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 141
	mov	eax, DWORD PTR _pDevData$[ebp]
	mov	ecx, DWORD PTR _hUsage$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 145
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR _pColorConvAPI$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 146
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR _hMemDev$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 147
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 148
	mov	eax, DWORD PTR _hMemDev$[ebp]
$LN10@GUI_MEMDEV@2:
; Line 149
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV__CreateFixed ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEMDEV_GetBitsPerPixel
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEMDEV_GetBitsPerPixel
_TEXT	SEGMENT
_pDev$ = -20						; size = 4
_r$ = -8						; size = 4
_hMemDev$ = 8						; size = 4
_GUI_MEMDEV_GetBitsPerPixel PROC			; COMDAT
; Line 161
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 162
	mov	DWORD PTR _r$[ebp], 0
; Line 165
	cmp	DWORD PTR _hMemDev$[ebp], 0
	je	SHORT $LN1@GUI_MEMDEV@3
; Line 167
	mov	eax, DWORD PTR _hMemDev$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDev$[ebp], eax
; Line 168
	mov	eax, DWORD PTR _pDev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_LCD__GetBPPDevice
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax
$LN1@GUI_MEMDEV@3:
; Line 171
	mov	eax, DWORD PTR _r$[ebp]
; Line 172
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV_GetBitsPerPixel ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEMDEV_Delete
EXTRN	_GUI_USAGE_DecUseCnt:PROC
EXTRN	_GUI_SelectLCD:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEMDEV_Delete
_TEXT	SEGMENT
_pMemDev$ = -8						; size = 4
_hMemDev$ = 8						; size = 4
_GUI_MEMDEV_Delete PROC					; COMDAT
; Line 178
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 181
	cmp	DWORD PTR _hMemDev$[ebp], 0
	je	SHORT $LN4@GUI_MEMDEV@4
; Line 183
	mov	eax, DWORD PTR _GUI_Context+76
	cmp	eax, DWORD PTR _hMemDev$[ebp]
	jne	SHORT $LN2@GUI_MEMDEV@4
; Line 184
	call	_GUI_SelectLCD
$LN2@GUI_MEMDEV@4:
; Line 186
	mov	eax, DWORD PTR _hMemDev$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pMemDev$[ebp], eax
; Line 190
	mov	eax, DWORD PTR _pMemDev$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN1@GUI_MEMDEV@4
; Line 191
	mov	eax, DWORD PTR _pMemDev$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_GUI_USAGE_DecUseCnt
	add	esp, 4
$LN1@GUI_MEMDEV@4:
; Line 196
	mov	eax, DWORD PTR _pMemDev$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_GUI_DEVICE_Delete
	add	esp, 4
; Line 200
	mov	eax, DWORD PTR _hMemDev$[ebp]
	push	eax
	call	_GUI_ALLOC_Free
	add	esp, 4
$LN4@GUI_MEMDEV@4:
; Line 203
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV_Delete ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEMDEV_CreateEx
EXTRN	_GUI_DEVICE__GetpDriver:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEMDEV_CreateEx
_TEXT	SEGMENT
_pDeviceMemdev$ = -32					; size = 4
_hMemDev$ = -20						; size = 4
_pDevice$ = -8						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xSize$ = 16						; size = 4
_ySize$ = 20						; size = 4
_Flags$ = 24						; size = 4
_GUI_MEMDEV_CreateEx PROC				; COMDAT
; Line 209
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 211
	mov	DWORD PTR _hMemDev$[ebp], 0
; Line 218
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	ecx, DWORD PTR _GUI_Context[eax*4+72]
	mov	DWORD PTR _pDevice$[ebp], ecx
$LN6@GUI_MEMDEV@5:
; Line 220
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx], 4
	jne	SHORT $LN3@GUI_MEMDEV@5
; Line 221
	jmp	SHORT $LN4@GUI_MEMDEV@5
$LN3@GUI_MEMDEV@5:
; Line 223
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pDevice$[ebp], ecx
; Line 224
	cmp	DWORD PTR _pDevice$[ebp], 0
	jne	SHORT $LN6@GUI_MEMDEV@5
$LN4@GUI_MEMDEV@5:
; Line 228
	cmp	DWORD PTR _pDevice$[ebp], 0
	jne	SHORT $LN2@GUI_MEMDEV@5
; Line 229
	movzx	eax, BYTE PTR _GUI_Context+17
	push	eax
	call	_GUI_DEVICE__GetpDriver
	add	esp, 4
	mov	DWORD PTR _pDevice$[ebp], eax
$LN2@GUI_MEMDEV@5:
; Line 234
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pDeviceMemdev$[ebp], eax
; Line 235
	cmp	DWORD PTR _pDeviceMemdev$[ebp], 0
	je	SHORT $LN1@GUI_MEMDEV@5
; Line 236
	mov	eax, DWORD PTR _pDevice$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _pDeviceMemdev$[ebp]
	push	edx
	mov	eax, DWORD PTR _Flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ySize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_GUI_MEMDEV__CreateFixed
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _hMemDev$[ebp], eax
$LN1@GUI_MEMDEV@5:
; Line 239
	mov	eax, DWORD PTR _hMemDev$[ebp]
; Line 240
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV_CreateEx ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEMDEV_Create
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEMDEV_Create
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xSize$ = 16						; size = 4
_ySize$ = 20						; size = 4
_GUI_MEMDEV_Create PROC					; COMDAT
; Line 246
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 247
	push	0
	mov	eax, DWORD PTR _ySize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	call	_GUI_MEMDEV_CreateEx
	add	esp, 20					; 00000014H
; Line 248
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV_Create ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEMDEV_Select
EXTRN	_LCD_SetClipRectMax:PROC
EXTRN	_LCD_UpdateColorIndices:PROC
EXTRN	_GUI_DEVICE_Link:PROC
EXTRN	_WM_Deactivate:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEMDEV_Select
_TEXT	SEGMENT
_r$ = -20						; size = 4
_pMemDev$ = -8						; size = 4
_hMemDev$ = 8						; size = 4
_GUI_MEMDEV_Select PROC					; COMDAT
; Line 254
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 259
	mov	eax, DWORD PTR _GUI_Context+76
	mov	DWORD PTR _r$[ebp], eax
; Line 260
	cmp	DWORD PTR _hMemDev$[ebp], 0
	jne	SHORT $LN4@GUI_MEMDEV@6
; Line 261
	call	_GUI_SelectLCD
; Line 262
	jmp	SHORT $LN3@GUI_MEMDEV@6
$LN4@GUI_MEMDEV@6:
; Line 263
	cmp	DWORD PTR _r$[ebp], 0
	je	SHORT $LN2@GUI_MEMDEV@6
; Line 264
	call	_GUI_SelectLCD
$LN2@GUI_MEMDEV@6:
; Line 266
	mov	eax, DWORD PTR _hMemDev$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pMemDev$[ebp], eax
; Line 268
	call	_WM_Deactivate
; Line 273
	cmp	DWORD PTR _GUI_Context+76, 0
	jne	SHORT $LN1@GUI_MEMDEV@6
; Line 274
	mov	eax, DWORD PTR _GUI_Context+8
	mov	DWORD PTR _GUI_Context+80, eax
	mov	ecx, DWORD PTR _GUI_Context+12
	mov	DWORD PTR _GUI_Context+84, ecx
$LN1@GUI_MEMDEV@6:
; Line 276
	mov	eax, DWORD PTR _hMemDev$[ebp]
	mov	DWORD PTR _GUI_Context+76, eax
; Line 277
	mov	eax, DWORD PTR _pMemDev$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_GUI_DEVICE_Link
	add	esp, 4
; Line 278
	call	_LCD_UpdateColorIndices
; Line 279
	call	_LCD_SetClipRectMax
$LN3@GUI_MEMDEV@6:
; Line 282
	mov	eax, DWORD PTR _r$[ebp]
; Line 283
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV_Select ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEMDEV_CopyToLCDAt
EXTRN	_WM__GetNextIVR:PROC
EXTRN	_GUI_MEMDEV__WriteToActiveOpaque:PROC
EXTRN	_WM__InitIVRSearch:PROC
EXTRN	_WM_Activate:PROC
EXTRN	_GUI_SetDrawMode:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEMDEV_CopyToLCDAt
_TEXT	SEGMENT
_r$10065 = -48						; size = 8
_pDevData$10064 = -32					; size = 4
_hMemPrev$10063 = -20					; size = 4
_DrawModeOld$10062 = -8					; size = 4
_hMem$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_GUI_MEMDEV_CopyToLCDAt PROC				; COMDAT
; Line 289
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 290
	cmp	DWORD PTR _hMem$[ebp], 0
	je	$LN7@GUI_MEMDEV@7
; Line 301
	push	0
	call	_GUI_SetDrawMode
	add	esp, 4
	mov	DWORD PTR _DrawModeOld$10062[ebp], eax
; Line 302
	mov	eax, DWORD PTR _GUI_Context+76
	mov	DWORD PTR _hMemPrev$10063[ebp], eax
; Line 303
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_ALLOC_h2p
	add	esp, 4
	mov	DWORD PTR _pDevData$10064[ebp], eax
; Line 310
	call	_GUI_SelectLCD
; Line 312
	cmp	DWORD PTR _x$[ebp], -4095		; fffff001H
	jne	SHORT $LN5@GUI_MEMDEV@7
; Line 313
	mov	eax, DWORD PTR _pDevData$10064[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	DWORD PTR _x$[ebp], ecx
; Line 314
	mov	eax, DWORD PTR _pDevData$10064[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR _y$[ebp], ecx
$LN5@GUI_MEMDEV@7:
; Line 320
	mov	ax, WORD PTR _x$[ebp]
	mov	WORD PTR _r$10065[ebp], ax
	movsx	ecx, WORD PTR _r$10065[ebp]
	mov	edx, DWORD PTR _pDevData$10064[ebp]
	movsx	eax, WORD PTR [edx+8]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	WORD PTR _r$10065[ebp+4], cx
; Line 321
	mov	ax, WORD PTR _y$[ebp]
	mov	WORD PTR _r$10065[ebp+2], ax
	movsx	ecx, WORD PTR _r$10065[ebp+2]
	mov	edx, DWORD PTR _pDevData$10064[ebp]
	movsx	eax, WORD PTR [edx+10]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	WORD PTR _r$10065[ebp+6], cx
; Line 325
	call	_WM_Activate
; Line 326
	lea	eax, DWORD PTR _r$10065[ebp]
	push	eax
	call	_WM__InitIVRSearch
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@GUI_MEMDEV@7
$LN3@GUI_MEMDEV@7:
; Line 328
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hMem$[ebp]
	push	edx
	call	_GUI_MEMDEV__WriteToActiveOpaque
	add	esp, 12					; 0000000cH
; Line 331
	call	_WM__GetNextIVR
	test	eax, eax
	jne	SHORT $LN3@GUI_MEMDEV@7
$LN4@GUI_MEMDEV@7:
; Line 339
	mov	eax, DWORD PTR _hMemPrev$10063[ebp]
	push	eax
	call	_GUI_MEMDEV_Select
	add	esp, 4
; Line 340
	mov	eax, DWORD PTR _DrawModeOld$10062[ebp]
	push	eax
	call	_GUI_SetDrawMode
	add	esp, 4
$LN7@GUI_MEMDEV@7:
; Line 343
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@GUI_MEMDEV@7
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@GUI_MEMDEV@7:
	DD	1
	DD	$LN10@GUI_MEMDEV@7
$LN10@GUI_MEMDEV@7:
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN9@GUI_MEMDEV@7
$LN9@GUI_MEMDEV@7:
	DB	114					; 00000072H
	DB	0
_GUI_MEMDEV_CopyToLCDAt ENDP
_TEXT	ENDS
PUBLIC	_GUI_MEMDEV_CopyToLCD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_MEMDEV_CopyToLCD
_TEXT	SEGMENT
_hMem$ = 8						; size = 4
_GUI_MEMDEV_CopyToLCD PROC				; COMDAT
; Line 349
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 350
	push	-4095					; fffff001H
	push	-4095					; fffff001H
	mov	eax, DWORD PTR _hMem$[ebp]
	push	eax
	call	_GUI_MEMDEV_CopyToLCDAt
	add	esp, 12					; 0000000cH
; Line 351
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_MEMDEV_CopyToLCD ENDP
_TEXT	ENDS
END
