; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\LCD_RLE16.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GUI_BitmapMethodsRLE16
PUBLIC	_GUI_BitmapMethodsRLEM16
CONST	SEGMENT
_GUI_BitmapMethodsRLE16 DD FLAT:__DrawBitmap_RLE16
	DD	00H
	ORG $+4
_GUI_BitmapMethodsRLEM16 DD FLAT:__DrawBitmap_RLEM16
	DD	00H
	ORG $+4
CONST	ENDS
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
__BitmapSwapRB DB 01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\lcd_rle16.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __DrawBitmap_RLE16
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xsize$ = 16						; size = 4
_ysize$ = 20						; size = 4
_pPixel$ = 24						; size = 4
_pLogPal$ = 28						; size = 4
_xMag$ = 32						; size = 4
_yMag$ = 36						; size = 4
__DrawBitmap_RLE16 PROC					; COMDAT
; Line 179
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 180
	mov	eax, DWORD PTR _pLogPal$[ebp]
	mov	DWORD PTR _pLogPal$[ebp], eax
; Line 181
	mov	BYTE PTR __BitmapSwapRB, 0
; Line 182
	mov	eax, DWORD PTR _yMag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xMag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pPixel$[ebp]
	push	edx
	mov	eax, DWORD PTR _ysize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	call	__DrawBitmap_RLE
	add	esp, 28					; 0000001cH
; Line 183
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitmap_RLE16 ENDP
_TEXT	ENDS
EXTRN	_LCD_SetColorIndex:PROC
EXTRN	_LCD_DrawHLine:PROC
EXTRN	_LCD_FillRect:PROC
EXTRN	_LCD_pColorIndex:DWORD
EXTRN	_GUI_Context:BYTE
_BSS	SEGMENT
	ALIGN	4

__Cache	DB	010H DUP (?)
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT __DrawBitmap_RLE
_TEXT	SEGMENT
_x$8407 = -164						; size = 4
_NumPixels$8401 = -149					; size = 1
_xi1$8393 = -140					; size = 4
_NumCompressedPixels$8388 = -125			; size = 1
_yDiff$8383 = -116					; size = 4
_IsMagnified$ = -101					; size = 1
_NoTrans$ = -89						; size = 1
_pPixelOrg$ = -80					; size = 4
_yL$ = -68						; size = 4
_xL$ = -56						; size = 4
_y$ = -44						; size = 4
_xi$ = -32						; size = 4
_PixelIndex$ = -20					; size = 4
_OldColorIndex$ = -8					; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xsize$ = 16						; size = 4
_ysize$ = 20						; size = 4
_pPixel$ = 24						; size = 4
_xMag$ = 28						; size = 4
_yMag$ = 32						; size = 4
__DrawBitmap_RLE PROC					; COMDAT
; Line 80
	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 85
	mov	eax, DWORD PTR _pPixel$[ebp]
	mov	DWORD PTR _pPixelOrg$[ebp], eax
; Line 86
	movzx	eax, BYTE PTR _GUI_Context+16
	and	eax, 2
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	BYTE PTR _NoTrans$[ebp], al
; Line 87
	mov	eax, DWORD PTR _yMag$[ebp]
	or	eax, DWORD PTR _xMag$[ebp]
	sub	eax, 1
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	BYTE PTR _IsMagnified$[ebp], al
; Line 88
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _OldColorIndex$[ebp], ecx
; Line 90
	cmp	DWORD PTR _yMag$[ebp], 1
	jne	SHORT $LN28@DrawBitmap
; Line 91
	movsx	eax, WORD PTR _GUI_Context+14
	sub	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	cmp	DWORD PTR _ysize$[ebp], eax
	jle	SHORT $LN28@DrawBitmap
; Line 92
	movsx	eax, WORD PTR _GUI_Context+14
	sub	eax, DWORD PTR _y0$[ebp]
	add	eax, 1
	mov	DWORD PTR _ysize$[ebp], eax
$LN28@DrawBitmap:
; Line 96
	mov	DWORD PTR _y$[ebp], 0
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _xi$[ebp], eax
; Line 98
	movzx	eax, BYTE PTR _IsMagnified$[ebp]
	test	eax, eax
	jne	SHORT $LN26@DrawBitmap
; Line 99
	movsx	eax, WORD PTR _GUI_Context+10
	sub	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _yDiff$8383[ebp], eax
; Line 100
	mov	eax, DWORD PTR __Cache+12
	cmp	eax, DWORD PTR _pPixel$[ebp]
	jne	SHORT $LN26@DrawBitmap
	mov	eax, DWORD PTR _yDiff$8383[ebp]
	cmp	eax, DWORD PTR __Cache+4
	jle	SHORT $LN26@DrawBitmap
; Line 102
	mov	eax, DWORD PTR __Cache+4
	mov	DWORD PTR _y$[ebp], eax
; Line 103
	mov	eax, DWORD PTR __Cache
	mov	DWORD PTR _xi$[ebp], eax
; Line 104
	mov	eax, DWORD PTR __Cache+8
	mov	DWORD PTR _pPixel$[ebp], eax
$LN26@DrawBitmap:
; Line 108
	mov	eax, DWORD PTR _pPixelOrg$[ebp]
	mov	DWORD PTR __Cache+12, eax
	mov	ecx, DWORD PTR __Cache+12
	mov	DWORD PTR __Cache+8, ecx
; Line 109
	mov	DWORD PTR __Cache+4, 0
	mov	eax, DWORD PTR __Cache+4
	mov	DWORD PTR __Cache, eax
$LN24@DrawBitmap:
; Line 111
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _ysize$[ebp]
	jge	$LN23@DrawBitmap
; Line 112
	mov	eax, DWORD PTR _pPixel$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _NumCompressedPixels$8388[ebp], cl
	mov	edx, DWORD PTR _pPixel$[ebp]
	add	edx, 1
	mov	DWORD PTR _pPixel$[ebp], edx
; Line 113
	movzx	eax, BYTE PTR _NumCompressedPixels$8388[ebp]
	test	eax, eax
	je	$LN22@DrawBitmap
; Line 114
	lea	eax, DWORD PTR _pPixel$[ebp]
	push	eax
	call	__GetPixelIndex
	add	esp, 4
	mov	DWORD PTR _PixelIndex$[ebp], eax
; Line 116
	mov	eax, DWORD PTR _pPixel$[ebp]
	sub	eax, 3
	mov	DWORD PTR __Cache+8, eax
; Line 117
	mov	eax, DWORD PTR _xi$[ebp]
	mov	DWORD PTR __Cache, eax
; Line 118
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR __Cache+4, eax
; Line 119
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR _PixelIndex$[ebp]
	mov	DWORD PTR [eax], ecx
$LN21@DrawBitmap:
; Line 120
	movzx	eax, BYTE PTR _NumCompressedPixels$8388[ebp]
	test	eax, eax
	je	$LN20@DrawBitmap
; Line 121
	movzx	eax, BYTE PTR _NumCompressedPixels$8388[ebp]
	add	eax, DWORD PTR _xi$[ebp]
	mov	DWORD PTR _xi1$8393[ebp], eax
; Line 122
	mov	eax, DWORD PTR _xi1$8393[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jl	SHORT $LN19@DrawBitmap
; Line 123
	mov	eax, DWORD PTR _xsize$[ebp]
	mov	DWORD PTR _xi1$8393[ebp], eax
$LN19@DrawBitmap:
; Line 125
	mov	eax, DWORD PTR _xi1$8393[ebp]
	sub	eax, DWORD PTR _xi$[ebp]
	movzx	ecx, BYTE PTR _NumCompressedPixels$8388[ebp]
	sub	ecx, eax
	mov	BYTE PTR _NumCompressedPixels$8388[ebp], cl
; Line 126
	cmp	DWORD PTR _PixelIndex$[ebp], 0
	jne	SHORT $LN17@DrawBitmap
	movzx	eax, BYTE PTR _NoTrans$[ebp]
	test	eax, eax
	je	SHORT $LN18@DrawBitmap
$LN17@DrawBitmap:
; Line 127
	movzx	eax, BYTE PTR _IsMagnified$[ebp]
	test	eax, eax
	je	SHORT $LN16@DrawBitmap
; Line 128
	mov	eax, DWORD PTR _xMag$[ebp]
	imul	eax, DWORD PTR _xi$[ebp]
	add	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _xL$[ebp], eax
; Line 129
	mov	eax, DWORD PTR _yMag$[ebp]
	imul	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _yL$[ebp], eax
; Line 130
	mov	eax, DWORD PTR _yMag$[ebp]
	mov	ecx, DWORD PTR _yL$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _xi1$8393[ebp]
	sub	eax, DWORD PTR _xi$[ebp]
	imul	eax, DWORD PTR _xMag$[ebp]
	mov	ecx, DWORD PTR _xL$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _yL$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xL$[ebp]
	push	ecx
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
; Line 131
	jmp	SHORT $LN18@DrawBitmap
$LN16@DrawBitmap:
; Line 132
	mov	eax, DWORD PTR _x0$[ebp]
	mov	ecx, DWORD PTR _xi1$8393[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x0$[ebp]
	add	ecx, DWORD PTR _xi$[ebp]
	push	ecx
	call	_LCD_DrawHLine
	add	esp, 12					; 0000000cH
$LN18@DrawBitmap:
; Line 135
	mov	eax, DWORD PTR _xi1$8393[ebp]
	mov	DWORD PTR _xi$[ebp], eax
; Line 136
	mov	eax, DWORD PTR _xi1$8393[ebp]
	cmp	eax, DWORD PTR _xsize$[ebp]
	jne	SHORT $LN14@DrawBitmap
; Line 137
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
; Line 138
	mov	DWORD PTR _xi$[ebp], 0
$LN14@DrawBitmap:
; Line 140
	jmp	$LN21@DrawBitmap
$LN20@DrawBitmap:
; Line 141
	jmp	$LN13@DrawBitmap
$LN22@DrawBitmap:
; Line 142
	mov	eax, DWORD PTR _pPixel$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _NumPixels$8401[ebp], cl
	mov	edx, DWORD PTR _pPixel$[ebp]
	add	edx, 1
	mov	DWORD PTR _pPixel$[ebp], edx
$LN12@DrawBitmap:
; Line 144
	lea	eax, DWORD PTR _pPixel$[ebp]
	push	eax
	call	__GetPixelIndex
	add	esp, 4
	mov	DWORD PTR _PixelIndex$[ebp], eax
; Line 145
	cmp	DWORD PTR _PixelIndex$[ebp], 0
	jne	SHORT $LN8@DrawBitmap
	movzx	eax, BYTE PTR _NoTrans$[ebp]
	test	eax, eax
	je	$LN9@DrawBitmap
$LN8@DrawBitmap:
; Line 146
	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _xi$[ebp]
	mov	DWORD PTR _x$8407[ebp], eax
; Line 147
	movzx	eax, BYTE PTR _IsMagnified$[ebp]
	test	eax, eax
	je	SHORT $LN7@DrawBitmap
; Line 148
	mov	eax, DWORD PTR _PixelIndex$[ebp]
	push	eax
	call	_LCD_SetColorIndex
	add	esp, 4
; Line 149
	mov	eax, DWORD PTR _xMag$[ebp]
	imul	eax, DWORD PTR _xi$[ebp]
	add	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _xL$[ebp], eax
; Line 150
	mov	eax, DWORD PTR _yMag$[ebp]
	imul	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _yL$[ebp], eax
; Line 151
	mov	eax, DWORD PTR _yMag$[ebp]
	mov	ecx, DWORD PTR _yL$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _xMag$[ebp]
	mov	ecx, DWORD PTR _xL$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _yL$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xL$[ebp]
	push	ecx
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
; Line 152
	jmp	SHORT $LN9@DrawBitmap
$LN7@DrawBitmap:
; Line 153
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _y0$[ebp]
	movsx	ecx, WORD PTR _GUI_Context+10
	cmp	eax, ecx
	jl	SHORT $LN9@DrawBitmap
; Line 154
	movsx	eax, WORD PTR _GUI_Context+8
	cmp	DWORD PTR _x$8407[ebp], eax
	jl	SHORT $LN9@DrawBitmap
; Line 155
	movsx	eax, WORD PTR _GUI_Context+12
	cmp	DWORD PTR _x$8407[ebp], eax
	jg	SHORT $LN9@DrawBitmap
; Line 156
	mov	esi, esp
	mov	eax, DWORD PTR _PixelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$8407[ebp]
	push	edx
	movzx	eax, BYTE PTR _GUI_Context+17
	mov	ecx, DWORD PTR _GUI_Context[eax*4+72]
	push	ecx
	movzx	edx, BYTE PTR _GUI_Context+17
	mov	eax, DWORD PTR _GUI_Context[edx*4+72]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@DrawBitmap:
; Line 162
	mov	eax, DWORD PTR _xi$[ebp]
	add	eax, 1
	mov	DWORD PTR _xi$[ebp], eax
	mov	ecx, DWORD PTR _xi$[ebp]
	cmp	ecx, DWORD PTR _xsize$[ebp]
	jl	SHORT $LN11@DrawBitmap
; Line 163
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
; Line 164
	mov	DWORD PTR _xi$[ebp], 0
; Line 165
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _ysize$[ebp]
	jl	SHORT $LN11@DrawBitmap
; Line 166
	jmp	SHORT $LN13@DrawBitmap
$LN11@DrawBitmap:
; Line 169
	mov	al, BYTE PTR _NumPixels$8401[ebp]
	sub	al, 1
	mov	BYTE PTR _NumPixels$8401[ebp], al
	movzx	ecx, BYTE PTR _NumPixels$8401[ebp]
	test	ecx, ecx
	jne	$LN12@DrawBitmap
$LN13@DrawBitmap:
; Line 171
	jmp	$LN24@DrawBitmap
$LN23@DrawBitmap:
; Line 172
	mov	eax, DWORD PTR _LCD_pColorIndex
	mov	ecx, DWORD PTR _OldColorIndex$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 173
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 360				; 00000168H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitmap_RLE ENDP
_TEXT	ENDS
EXTRN	_LCD_Index2Color_565:PROC
EXTRN	_LCD_Color2Index:PROC
EXTRN	_LCD_Index2Color_M565:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __GetPixelIndex
_TEXT	SEGMENT
_Data$ = -8						; size = 2
_ppPixel$ = 8						; size = 4
__GetPixelIndex PROC					; COMDAT
; Line 68
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 69
	mov	eax, DWORD PTR _ppPixel$[ebp]
	push	eax
	call	__Read16
	add	esp, 4
	mov	WORD PTR _Data$[ebp], ax
; Line 70
	movzx	eax, BYTE PTR __BitmapSwapRB
	test	eax, eax
	je	SHORT $LN1@GetPixelIn
; Line 71
	movzx	eax, WORD PTR _Data$[ebp]
	push	eax
	call	_LCD_Index2Color_M565
	add	esp, 4
	push	eax
	call	_LCD_Color2Index
	add	esp, 4
	jmp	SHORT $LN2@GetPixelIn
$LN1@GetPixelIn:
; Line 73
	movzx	eax, WORD PTR _Data$[ebp]
	push	eax
	call	_LCD_Index2Color_565
	add	esp, 4
	push	eax
	call	_LCD_Color2Index
	add	esp, 4
$LN2@GetPixelIn:
; Line 74
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__GetPixelIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Read16
_TEXT	SEGMENT
_Value$ = -20						; size = 2
_pData$ = -8						; size = 4
_ppData$ = 8						; size = 4
__Read16 PROC						; COMDAT
; Line 53
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 56
	mov	eax, DWORD PTR _ppData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pData$[ebp], ecx
; Line 57
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	cx, BYTE PTR [eax]
	mov	WORD PTR _Value$[ebp], cx
; Line 58
	mov	eax, DWORD PTR _pData$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 8
	movzx	edx, cx
	movzx	eax, WORD PTR _Value$[ebp]
	or	eax, edx
	mov	WORD PTR _Value$[ebp], ax
; Line 59
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, 2
	mov	DWORD PTR _pData$[ebp], eax
; Line 60
	mov	eax, DWORD PTR _ppData$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 61
	mov	ax, WORD PTR _Value$[ebp]
; Line 62
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__Read16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __DrawBitmap_RLEM16
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_xsize$ = 16						; size = 4
_ysize$ = 20						; size = 4
_pPixel$ = 24						; size = 4
_pLogPal$ = 28						; size = 4
_xMag$ = 32						; size = 4
_yMag$ = 36						; size = 4
__DrawBitmap_RLEM16 PROC				; COMDAT
; Line 189
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 190
	mov	eax, DWORD PTR _pLogPal$[ebp]
	mov	DWORD PTR _pLogPal$[ebp], eax
; Line 191
	mov	BYTE PTR __BitmapSwapRB, 1
; Line 192
	mov	eax, DWORD PTR _yMag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xMag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pPixel$[ebp]
	push	edx
	mov	eax, DWORD PTR _ysize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y0$[ebp]
	push	edx
	mov	eax, DWORD PTR _x0$[ebp]
	push	eax
	call	__DrawBitmap_RLE
	add	esp, 28					; 0000001cH
; Line 193
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DrawBitmap_RLEM16 ENDP
_TEXT	ENDS
END
