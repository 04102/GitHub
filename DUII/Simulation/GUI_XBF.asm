; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\DUII\Simulation\GUI\Core\GUI_XBF.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG8429	DB	'GUI_XBF_CreateFont: No get data function passed!', 00H
	ORG $+3
$SG8432	DB	'GUI_XBF_CreateFont: ID of font wrong!', 00H
_DATA	ENDS
PUBLIC	_GUI_XBF__GetCharDistX
PUBLIC	_GUI_XBF__ClearLine
EXTRN	_GUI__CharHasTrans:BYTE
EXTRN	_LCD_FillRect:PROC
EXTRN	_GUI__GetOverlap:PROC
EXTRN	_GUI_UC__GetCharCodeInc:PROC
EXTRN	_GUI_SetColor:PROC
EXTRN	_GUI_GetBkColor:PROC
EXTRN	_GUI_Context:BYTE
EXTRN	_GUI_GetColor:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_UninitUse:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\duii\simulation\gui\core\gui_xbf.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _GUI_XBF__ClearLine
_TEXT	SEGMENT
tv70 = -280						; size = 4
$T8464 = -269						; size = 1
_OldColor$ = -68					; size = 4
_DispPosY$ = -56					; size = 4
_DispPosX$ = -44					; size = 4
_yDist$ = -32						; size = 4
_XDist$ = -20						; size = 2
_c$ = -8						; size = 2
_s$ = 8							; size = 4
_Len$ = 12						; size = 4
_GUI_XBF__ClearLine PROC				; COMDAT
; Line 35
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T8464[ebp], 0
; Line 40
	call	_GUI_GetColor
	mov	DWORD PTR _OldColor$[ebp], eax
; Line 41
	movsx	eax, WORD PTR _GUI_Context+42
	and	eax, 4
	je	SHORT $LN5@GUI_XBF__C
	call	_GUI_GetColor
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN6@GUI_XBF__C
$LN5@GUI_XBF__C:
	call	_GUI_GetBkColor
	mov	DWORD PTR tv70[ebp], eax
$LN6@GUI_XBF__C:
	mov	ecx, DWORD PTR tv70[ebp]
	push	ecx
	call	_GUI_SetColor
	add	esp, 4
; Line 42
	mov	eax, DWORD PTR _GUI_Context+28
	movzx	ecx, BYTE PTR [eax+25]
	mov	edx, DWORD PTR _GUI_Context+28
	movzx	eax, BYTE PTR [edx+27]
	imul	ecx, eax
	mov	DWORD PTR _yDist$[ebp], ecx
; Line 43
	movsx	eax, WORD PTR _GUI_Context+34
	mov	DWORD PTR _DispPosX$[ebp], eax
; Line 44
	movsx	eax, WORD PTR _GUI_Context+36
	mov	DWORD PTR _DispPosY$[ebp], eax
; Line 45
	xor	eax, eax
	mov	WORD PTR _XDist$[ebp], ax
$LN2@GUI_XBF__C:
; Line 46
	mov	eax, DWORD PTR _Len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _Len$[ebp], eax
	js	SHORT $LN1@GUI_XBF__C
; Line 47
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_GUI_UC__GetCharCodeInc
	add	esp, 4
	mov	BYTE PTR $T8464[ebp], 1
	mov	WORD PTR _c$[ebp], ax
; Line 48
	cmp	BYTE PTR $T8464[ebp], 0
	jne	SHORT $LN7@GUI_XBF__C
	push	OFFSET $LN8@GUI_XBF__C
	call	__RTC_UninitUse
	add	esp, 4
$LN7@GUI_XBF__C:
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	call	_GUI_XBF__GetCharDistX
	add	esp, 4
	movsx	ecx, WORD PTR _XDist$[ebp]
	add	ecx, eax
	mov	WORD PTR _XDist$[ebp], cx
; Line 49
	jmp	SHORT $LN2@GUI_XBF__C
$LN1@GUI_XBF__C:
; Line 50
	cmp	BYTE PTR $T8464[ebp], 0
	jne	SHORT $LN9@GUI_XBF__C
	push	OFFSET $LN8@GUI_XBF__C
	call	__RTC_UninitUse
	add	esp, 4
$LN9@GUI_XBF__C:
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	call	_GUI__GetOverlap
	add	esp, 4
	movsx	ecx, WORD PTR _XDist$[ebp]
	add	ecx, eax
	mov	WORD PTR _XDist$[ebp], cx
; Line 54
	mov	eax, DWORD PTR _DispPosY$[ebp]
	add	eax, DWORD PTR _yDist$[ebp]
	push	eax
	movsx	ecx, WORD PTR _XDist$[ebp]
	add	ecx, DWORD PTR _DispPosX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _DispPosY$[ebp]
	push	edx
	mov	eax, DWORD PTR _DispPosX$[ebp]
	push	eax
	call	_LCD_FillRect
	add	esp, 16					; 00000010H
; Line 55
	mov	eax, DWORD PTR _OldColor$[ebp]
	push	eax
	call	_GUI_SetColor
	add	esp, 4
; Line 59
	mov	BYTE PTR _GUI__CharHasTrans, 1
; Line 60
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@GUI_XBF__C:
$LN8@GUI_XBF__C:
	DB	99					; 00000063H
	DB	0
_GUI_XBF__ClearLine ENDP
_TEXT	ENDS
PUBLIC	_GUI_XBF__GetOff
EXTRN	_GUI__Read32:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_XBF__GetOff
_TEXT	SEGMENT
_pBuffer$ = -20						; size = 4
_aBuffer$ = -8						; size = 4
_pXBF_Data$ = 8						; size = 4
_c$ = 12						; size = 4
_pOff$ = 16						; size = 4
_GUI_XBF__GetOff PROC					; COMDAT
; Line 66
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 70
	lea	eax, DWORD PTR _aBuffer$[ebp]
	mov	DWORD PTR _pBuffer$[ebp], eax
; Line 71
	mov	eax, DWORD PTR _pXBF_Data$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _c$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _c$[ebp], edx
; Line 72
	mov	esi, esp
	lea	eax, DWORD PTR _aBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	4
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2+18]
	push	edx
	mov	eax, DWORD PTR _pXBF_Data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@GUI_XBF__G
; Line 73
	mov	eax, 1
	jmp	SHORT $LN2@GUI_XBF__G
$LN1@GUI_XBF__G:
; Line 75
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read32
	add	esp, 4
	mov	ecx, DWORD PTR _pOff$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 76
	xor	eax, eax
$LN2@GUI_XBF__G:
; Line 77
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@GUI_XBF__G
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@GUI_XBF__G:
	DD	2
	DD	$LN6@GUI_XBF__G
$LN6@GUI_XBF__G:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@GUI_XBF__G
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@GUI_XBF__G
$LN5@GUI_XBF__G:
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN4@GUI_XBF__G:
	DB	97					; 00000061H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_GUI_XBF__GetOff ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_GUI_XBF__GetOffAndSize
EXTRN	_GUI__Read16:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_XBF__GetOffAndSize
_TEXT	SEGMENT
_pBuffer$ = -28						; size = 4
_aBuffer$ = -16						; size = 6
__$ArrayPad$ = -4					; size = 4
_pXBF_Data$ = 8						; size = 4
_c$ = 12						; size = 4
_pOff$ = 16						; size = 4
_pSize$ = 20						; size = 4
_GUI_XBF__GetOffAndSize PROC				; COMDAT
; Line 83
	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 87
	lea	eax, DWORD PTR _aBuffer$[ebp]
	mov	DWORD PTR _pBuffer$[ebp], eax
; Line 88
	mov	eax, DWORD PTR _pXBF_Data$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _c$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _c$[ebp], edx
; Line 89
	mov	esi, esp
	lea	eax, DWORD PTR _aBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	6
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2+18]
	push	edx
	mov	eax, DWORD PTR _pXBF_Data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@GUI_XBF__G@2
; Line 90
	mov	eax, 1
	jmp	SHORT $LN2@GUI_XBF__G@2
$LN1@GUI_XBF__G@2:
; Line 92
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read32
	add	esp, 4
	mov	ecx, DWORD PTR _pOff$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 93
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	ecx, DWORD PTR _pSize$[ebp]
	mov	WORD PTR [ecx], ax
; Line 94
	xor	eax, eax
$LN2@GUI_XBF__G@2:
; Line 95
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@GUI_XBF__G@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@GUI_XBF__G@2:
	DD	2
	DD	$LN6@GUI_XBF__G@2
$LN6@GUI_XBF__G@2:
	DD	-16					; fffffff0H
	DD	6
	DD	$LN4@GUI_XBF__G@2
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN5@GUI_XBF__G@2
$LN5@GUI_XBF__G@2:
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN4@GUI_XBF__G@2:
	DB	97					; 00000061H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_GUI_XBF__GetOffAndSize ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _GUI_XBF__GetCharDistX
_TEXT	SEGMENT
_pXBF_Data$ = -56					; size = 4
_Off$ = -44						; size = 4
_DistX$ = -32						; size = 2
_pBuffer$ = -20						; size = 4
_aBuffer$ = -8						; size = 2
_c$ = 8							; size = 2
_GUI_XBF__GetCharDistX PROC				; COMDAT
; Line 101
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 108
	mov	eax, DWORD PTR _GUI_Context+28
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pXBF_Data$[ebp], ecx
; Line 109
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	jl	SHORT $LN3@GUI_XBF__G@3
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	jle	SHORT $LN4@GUI_XBF__G@3
$LN3@GUI_XBF__G@3:
; Line 110
	xor	eax, eax
	jmp	SHORT $LN5@GUI_XBF__G@3
$LN4@GUI_XBF__G@3:
; Line 112
	lea	eax, DWORD PTR _Off$[ebp]
	push	eax
	movzx	ecx, WORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pXBF_Data$[ebp]
	push	edx
	call	_GUI_XBF__GetOff
	add	esp, 12					; 0000000cH
; Line 113
	cmp	DWORD PTR _Off$[ebp], 0
	jne	SHORT $LN2@GUI_XBF__G@3
; Line 114
	xor	eax, eax
	jmp	SHORT $LN5@GUI_XBF__G@3
$LN2@GUI_XBF__G@3:
; Line 116
	lea	eax, DWORD PTR _aBuffer$[ebp]
	mov	DWORD PTR _pBuffer$[ebp], eax
; Line 117
	mov	esi, esp
	lea	eax, DWORD PTR _aBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	2
	mov	eax, DWORD PTR _Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@GUI_XBF__G@3
; Line 118
	mov	eax, 1
	jmp	SHORT $LN5@GUI_XBF__G@3
$LN1@GUI_XBF__G@3:
; Line 120
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	WORD PTR _DistX$[ebp], ax
; Line 121
	movzx	eax, WORD PTR _DistX$[ebp]
$LN5@GUI_XBF__G@3:
; Line 122
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@GUI_XBF__G@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@GUI_XBF__G@3:
	DD	3
	DD	$LN10@GUI_XBF__G@3
$LN10@GUI_XBF__G@3:
	DD	-8					; fffffff8H
	DD	2
	DD	$LN7@GUI_XBF__G@3
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@GUI_XBF__G@3
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN9@GUI_XBF__G@3
$LN9@GUI_XBF__G@3:
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN8@GUI_XBF__G@3:
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN7@GUI_XBF__G@3:
	DB	97					; 00000061H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_GUI_XBF__GetCharDistX ENDP
_TEXT	ENDS
PUBLIC	_GUI_XBF__GetFontInfo
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_XBF__GetFontInfo
_TEXT	SEGMENT
_pFont$ = 8						; size = 4
_pInfo$ = 12						; size = 4
_GUI_XBF__GetFontInfo PROC				; COMDAT
; Line 128
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 129
	mov	eax, DWORD PTR _pInfo$[ebp]
	mov	ecx, DWORD PTR _pFont$[ebp]
	mov	dl, BYTE PTR [ecx+32]
	mov	BYTE PTR [eax+2], dl
; Line 130
	mov	eax, DWORD PTR _pInfo$[ebp]
	mov	ecx, DWORD PTR _pFont$[ebp]
	mov	dl, BYTE PTR [ecx+33]
	mov	BYTE PTR [eax+3], dl
; Line 131
	mov	eax, DWORD PTR _pInfo$[ebp]
	mov	ecx, DWORD PTR _pFont$[ebp]
	mov	dl, BYTE PTR [ecx+34]
	mov	BYTE PTR [eax+4], dl
; Line 132
	mov	eax, 1
	mov	ecx, DWORD PTR _pInfo$[ebp]
	mov	WORD PTR [ecx], ax
; Line 133
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_XBF__GetFontInfo ENDP
_TEXT	ENDS
PUBLIC	_GUI_XBF__IsInFont
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_XBF__IsInFont
_TEXT	SEGMENT
_pXBF_Data$ = -20					; size = 4
_Off$ = -8						; size = 4
_pFont$ = 8						; size = 4
_c$ = 12						; size = 2
_GUI_XBF__IsInFont PROC					; COMDAT
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 143
	mov	eax, DWORD PTR _pFont$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pXBF_Data$[ebp], ecx
; Line 144
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	jl	SHORT $LN2@GUI_XBF__I
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	jle	SHORT $LN3@GUI_XBF__I
$LN2@GUI_XBF__I:
; Line 145
	mov	al, 1
	jmp	SHORT $LN4@GUI_XBF__I
$LN3@GUI_XBF__I:
; Line 147
	lea	eax, DWORD PTR _Off$[ebp]
	push	eax
	movzx	ecx, WORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pXBF_Data$[ebp]
	push	edx
	call	_GUI_XBF__GetOff
	add	esp, 12					; 0000000cH
; Line 148
	cmp	DWORD PTR _Off$[ebp], 0
	jne	SHORT $LN1@GUI_XBF__I
; Line 149
	xor	al, al
	jmp	SHORT $LN4@GUI_XBF__I
$LN1@GUI_XBF__I:
; Line 151
	mov	al, 1
$LN4@GUI_XBF__I:
; Line 152
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@GUI_XBF__I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@GUI_XBF__I:
	DD	1
	DD	$LN7@GUI_XBF__I
$LN7@GUI_XBF__I:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@GUI_XBF__I
$LN6@GUI_XBF__I:
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_GUI_XBF__IsInFont ENDP
_TEXT	ENDS
PUBLIC	_GUI_XBF__GetCharInfo
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_XBF__GetCharInfo
_TEXT	SEGMENT
_pXBF_Data$ = -44					; size = 4
_Off$ = -32						; size = 4
_pBuffer$ = -20						; size = 4
_aBuffer$ = -8						; size = 2
_c$ = 8							; size = 2
_pInfo$ = 12						; size = 4
_GUI_XBF__GetCharInfo PROC				; COMDAT
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 164
	mov	eax, DWORD PTR _GUI_Context+28
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pXBF_Data$[ebp], ecx
; Line 165
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	jl	SHORT $LN3@GUI_XBF__G@4
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	jle	SHORT $LN4@GUI_XBF__G@4
$LN3@GUI_XBF__G@4:
; Line 166
	mov	eax, 1
	jmp	SHORT $LN5@GUI_XBF__G@4
$LN4@GUI_XBF__G@4:
; Line 168
	lea	eax, DWORD PTR _Off$[ebp]
	push	eax
	movzx	ecx, WORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pXBF_Data$[ebp]
	push	edx
	call	_GUI_XBF__GetOff
	add	esp, 12					; 0000000cH
; Line 169
	cmp	DWORD PTR _Off$[ebp], 0
	jne	SHORT $LN2@GUI_XBF__G@4
; Line 170
	mov	eax, 1
	jmp	SHORT $LN5@GUI_XBF__G@4
$LN2@GUI_XBF__G@4:
; Line 172
	lea	eax, DWORD PTR _aBuffer$[ebp]
	mov	DWORD PTR _pBuffer$[ebp], eax
; Line 173
	mov	esi, esp
	lea	eax, DWORD PTR _aBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	4
	mov	eax, DWORD PTR _Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@GUI_XBF__G@4
; Line 174
	mov	eax, 1
	jmp	SHORT $LN5@GUI_XBF__G@4
$LN1@GUI_XBF__G@4:
; Line 176
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	ecx, DWORD PTR _pInfo$[ebp]
	mov	BYTE PTR [ecx+4], al
; Line 177
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	ecx, DWORD PTR _pInfo$[ebp]
	mov	BYTE PTR [ecx], al
; Line 178
	xor	eax, eax
$LN5@GUI_XBF__G@4:
; Line 179
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@GUI_XBF__G@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@GUI_XBF__G@4:
	DD	3
	DD	$LN10@GUI_XBF__G@4
$LN10@GUI_XBF__G@4:
	DD	-8					; fffffff8H
	DD	2
	DD	$LN7@GUI_XBF__G@4
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@GUI_XBF__G@4
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN9@GUI_XBF__G@4
$LN9@GUI_XBF__G@4:
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN8@GUI_XBF__G@4:
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN7@GUI_XBF__G@4:
	DB	97					; 00000061H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_GUI_XBF__GetCharInfo ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_GUI_XBF_CreateFont
EXTRN	_GUI_SetFont:PROC
EXTRN	_GUI_ErrorOut:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_XBF_CreateFont
_TEXT	SEGMENT
_pBuffer$ = -52						; size = 4
_aBuffer$ = -40						; size = 18
_Id$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pFont$ = 8						; size = 4
_pXBF_Data$ = 12					; size = 4
_pFontType$ = 16					; size = 4
_pfGetData$ = 20					; size = 4
_pVoid$ = 24						; size = 4
_GUI_XBF_CreateFont PROC				; COMDAT
; Line 191
	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 196
	lea	eax, DWORD PTR _aBuffer$[ebp]
	mov	DWORD PTR _pBuffer$[ebp], eax
; Line 197
	cmp	DWORD PTR _pfGetData$[ebp], 0
	jne	SHORT $LN3@GUI_XBF_Cr
; Line 198
	push	OFFSET $SG8429
	call	_GUI_ErrorOut
	add	esp, 4
; Line 199
	mov	eax, 1
	jmp	$LN4@GUI_XBF_Cr
$LN3@GUI_XBF_Cr:
; Line 202
	mov	eax, DWORD PTR _pXBF_Data$[ebp]
	mov	ecx, DWORD PTR _pVoid$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 203
	mov	esi, esp
	lea	eax, DWORD PTR _aBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVoid$[ebp]
	push	ecx
	push	18					; 00000012H
	push	0
	call	DWORD PTR _pfGetData$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@GUI_XBF_Cr
; Line 204
	mov	eax, 1
	jmp	$LN4@GUI_XBF_Cr
$LN2@GUI_XBF_Cr:
; Line 207
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read32
	add	esp, 4
	mov	DWORD PTR _Id$[ebp], eax
; Line 208
	cmp	DWORD PTR _Id$[ebp], 1481200967		; 58495547H
	je	SHORT $LN1@GUI_XBF_Cr
; Line 209
	push	OFFSET $SG8432
	call	_GUI_ErrorOut
	add	esp, 4
; Line 210
	mov	eax, 1
	jmp	$LN4@GUI_XBF_Cr
$LN1@GUI_XBF_Cr:
; Line 213
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	ecx, DWORD PTR _pFont$[ebp]
	mov	BYTE PTR [ecx+24], al
; Line 214
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	ecx, DWORD PTR _pFont$[ebp]
	mov	BYTE PTR [ecx+25], al
; Line 215
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	ecx, DWORD PTR _pFont$[ebp]
	mov	BYTE PTR [ecx+32], al
; Line 216
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	ecx, DWORD PTR _pFont$[ebp]
	mov	BYTE PTR [ecx+33], al
; Line 217
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	ecx, DWORD PTR _pFont$[ebp]
	mov	BYTE PTR [ecx+34], al
; Line 218
	mov	eax, DWORD PTR _pFont$[ebp]
	mov	BYTE PTR [eax+26], 1
; Line 219
	mov	eax, DWORD PTR _pFont$[ebp]
	mov	BYTE PTR [eax+27], 1
; Line 221
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	mov	WORD PTR [ecx], ax
; Line 222
	lea	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	call	_GUI__Read16
	add	esp, 4
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 224
	mov	eax, DWORD PTR _pXBF_Data$[ebp]
	mov	ecx, DWORD PTR _pfGetData$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 226
	mov	eax, DWORD PTR _pFont$[ebp]
	mov	ecx, DWORD PTR _pXBF_Data$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 228
	mov	eax, DWORD PTR _pFont$[ebp]
	mov	ecx, DWORD PTR _pFontType$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 229
	mov	eax, DWORD PTR _pFont$[ebp]
	mov	ecx, DWORD PTR _pFontType$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 230
	mov	eax, DWORD PTR _pFont$[ebp]
	mov	ecx, DWORD PTR _pFontType$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
; Line 231
	mov	eax, DWORD PTR _pFont$[ebp]
	mov	ecx, DWORD PTR _pFontType$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
; Line 232
	mov	eax, DWORD PTR _pFont$[ebp]
	mov	ecx, DWORD PTR _pFontType$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
; Line 233
	mov	eax, DWORD PTR _pFont$[ebp]
	mov	ecx, DWORD PTR _pFontType$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
; Line 235
	mov	eax, DWORD PTR _pFont$[ebp]
	push	eax
	call	_GUI_SetFont
	add	esp, 4
; Line 236
	xor	eax, eax
$LN4@GUI_XBF_Cr:
; Line 237
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@GUI_XBF_Cr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@GUI_XBF_Cr:
	DD	2
	DD	$LN8@GUI_XBF_Cr
$LN8@GUI_XBF_Cr:
	DD	-40					; ffffffd8H
	DD	18					; 00000012H
	DD	$LN6@GUI_XBF_Cr
	DD	-52					; ffffffccH
	DD	4
	DD	$LN7@GUI_XBF_Cr
$LN7@GUI_XBF_Cr:
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN6@GUI_XBF_Cr:
	DB	97					; 00000061H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_GUI_XBF_CreateFont ENDP
_TEXT	ENDS
PUBLIC	_GUI_XBF_DeleteFont
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _GUI_XBF_DeleteFont
_TEXT	SEGMENT
_pFont$ = 8						; size = 4
_GUI_XBF_DeleteFont PROC				; COMDAT
; Line 243
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 244
	mov	eax, DWORD PTR _pFont$[ebp]
	mov	DWORD PTR _pFont$[ebp], eax
; Line 245
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GUI_XBF_DeleteFont ENDP
_TEXT	ENDS
END
