C51 COMPILER V7.20   CYGNALFLASH                                                           06/27/2005 14:12:16 PAGE 1   


C51 COMPILER V7.20, COMPILATION OF MODULE CYGNALFLASH
OBJECT MODULE PLACED IN .\cygnalflash.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\CommonFiles\cygnalflash.c BROWSE INCDIR(C:\Keil\Traqmate\132micro\Common
                    -Files\;C:\Keil\Traqmate\132micro\SU\) DEBUG OBJECTEXTEND PRINT(.\cygnalflash.lst) OBJECT(.\cygnalflash.obj)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // Includes
   3          //-----------------------------------------------------------------------------
   4          
   5          #include <ctype.h>
   6          #ifdef DISPLAY
              #include <display.h>
              #else
   9          #include <sensor.h>
  10          #endif
  11          
  12          #ifdef DISPLAY
              // initializes the scratchpad
              // rewrite if:  SWREV or DATAREV not right
              //                              config areas of DU != config areas of SU
              //
              // if su_present, assumes that global scratch contains SU scratchpad
              //
              // Returns FALSE if DU and SU have incompatible data revisions
              //
              BOOL InitDUScratchpad(BOOL su_present) {
                      xdata scratchpadtype duscratch;
                      xdata BOOL reprogram = FALSE;
              
                      // check for incompatible SU and DU data revisions
                      if (su_present && scratch.calibrate.datarev != DATAREV) return (FALSE);
              
                      ReadScratchpad(duscratch.scratchbuff);
              
                      // if contrast never programmed, fix it
                      if (0xFF == duscratch.calibrate.contrast) {
                              duscratch.calibrate.contrast = CONTRAST_CENTER;
                              reprogram = TRUE;
                      }
              
                      // if username, phone, or note is unprintable, NULL it out
                      if (!isprint(duscratch.calibrate.owner[0]) && duscratch.calibrate.owner[0] != '\0') {
                              duscratch.calibrate.owner[0] = '\0';
                              reprogram = TRUE;
                      } // if
                      if (!isprint(duscratch.calibrate.phone[0]) && duscratch.calibrate.phone[0] != '\0') {
                              duscratch.calibrate.phone[0] = '\0';
                              reprogram = TRUE;
                      } // if
                      if (!isprint(duscratch.calibrate.note[0]) && duscratch.calibrate.note[0] != '\0') {
                              duscratch.calibrate.note[0] = '\0';
                              reprogram = TRUE;
                      } // if
              
                      // check to see if software or data rev in scratchpad does not match current code
                      if (duscratch.calibrate.swrev != SWREV ||
                              duscratch.calibrate.datarev != DATAREV) {
              
                              duscratch.calibrate.swrev = SWREV;
C51 COMPILER V7.20   CYGNALFLASH                                                           06/27/2005 14:12:16 PAGE 2   

                              duscratch.calibrate.datarev = DATAREV;
                              reprogram = TRUE;
                      }
              
                      // compare SU and DU config data
                      if (su_present) {
                              if (duscratch.calibrate.xzero != scratch.calibrate.xzero) {
                                      duscratch.calibrate.xzero = scratch.calibrate.xzero;
                                      reprogram = TRUE;
                              }
                              if (duscratch.calibrate.yzero != scratch.calibrate.yzero) {
                                      duscratch.calibrate.yzero = scratch.calibrate.yzero;
                                      reprogram = TRUE;
                              }
                              if (duscratch.calibrate.xminusg != scratch.calibrate.xminusg) {
                                      duscratch.calibrate.xminusg = scratch.calibrate.xminusg;
                                      reprogram = TRUE;
                              }
                              if (duscratch.calibrate.xplusg != scratch.calibrate.xplusg) {
                                      duscratch.calibrate.xplusg = scratch.calibrate.xplusg;
                                      reprogram = TRUE;
                              }
                              if (duscratch.calibrate.yminusg != scratch.calibrate.yminusg) {
                                      duscratch.calibrate.yminusg = scratch.calibrate.yminusg;
                                      reprogram = TRUE;
                              }
                              if (duscratch.calibrate.yplusg != scratch.calibrate.yplusg) {
                                      duscratch.calibrate.yplusg = scratch.calibrate.yplusg;
                                      reprogram = TRUE;
                              }
                              if (duscratch.calibrate.calx != scratch.calibrate.calx) {
                                      duscratch.calibrate.calx = scratch.calibrate.calx;
                                      reprogram = TRUE;
                              }
                              if (duscratch.calibrate.caly != scratch.calibrate.caly) {
                                      duscratch.calibrate.caly = scratch.calibrate.caly;
                                      reprogram = TRUE;
                              }
                      } // if
              
                      if (reprogram) {
                              // write the software rev into the scratchpad
                              EraseScratchpad();
                              WriteScratchpad(duscratch.scratchbuff, SCRATCHLEN);
                      } // if
              
                      // leave with DU scratchpad contents in scratch
                      ReadScratchpad(scratch.scratchbuff);
              
                      return (TRUE);
              
              } // InitDUScratchpad
              #endif
 108          #ifdef SENSOR
              // initializes the scratchpad
              // rewrite if:  SWREV or DATAREV not right
              //
              void InitSUScratchpad(void) {
                      xdata BOOL reprogram = FALSE;
              
                      ReadScratchpad(scratch.scratchbuff);
              
C51 COMPILER V7.20   CYGNALFLASH                                                           06/27/2005 14:12:16 PAGE 3   

                      if (scratch.calibrate.swrev != SWREV || scratch.calibrate.datarev != DATAREV) {
                              // update the values
                              scratch.calibrate.swrev = SWREV;
                              scratch.calibrate.datarev = DATAREV;
                              reprogram = TRUE;
                      }
              
                      // if username, phone, or note is unprogrammed, NULL it out
                      if (!isprint(scratch.calibrate.owner[0]) && scratch.calibrate.owner[0] != '\0') {
                              scratch.calibrate.owner[0] = '\0';
                              reprogram = TRUE;
                      } // if
                      if (!isprint(scratch.calibrate.phone[0]) && scratch.calibrate.phone[0] != '\0') {
                              scratch.calibrate.phone[0] = '\0';
                              reprogram = TRUE;
                      } // if
                      if (!isprint(scratch.calibrate.note[0]) && scratch.calibrate.note[0] != '\0') {
                              scratch.calibrate.note[0] = '\0';
                              reprogram = TRUE;
                      } // if
              
                      if (reprogram) {
                              // write the software rev into the scratchpad
                              EraseScratchpad();
                              WriteScratchpad(scratch.scratchbuff, SCRATCHLEN);
                      } // if
              } // InitSUScratchpad
              #endif
 145          
 146          // erase the scratchpad area of FLASH
 147          void EraseScratchpad() {
 148   1              unsigned char SFRPAGE_SAVE = SFRPAGE;                   // Save Current SFR page
 149   1              unsigned char xdata *idata pwrite;      // pointer to FLASH scratchpad, must be data or idata
 150   1              unsigned char EA_save;                          // saves the current state of the int enable bit
 151   1      
 152   1              SFRPAGE = LEGACY_PAGE;                          // set SFR page
 153   1      
 154   1              // initialize write/erase pointer to any location in the scratchpad
 155   1              pwrite = 0x0000;   
 156   1      
 157   1              EA_save = EA;                       // save interrupt status   
 158   1              EA = 0;                             // disable interrupts (precautionary)
 159   1         
 160   1              FLSCL |= 0x01;                      // enable FLASH writes/erases from user sw
 161   1      
 162   1              PSCTL = 0x07;                       // MOVX writes erase FLASH page
 163   1                                                                                      // (SFLE set directing FLASH 
 164   1                                                                                      // reads/writes/erases to scratchpad memory
 165   1      
 166   1              *pwrite = 0;                                            // initiate page erase
 167   1      
 168   1              PSCTL = 0;                                                      // MOVX writes target XRAM
 169   1                                                                                      // (SFLE is cleared)
 170   1              FLSCL &= ~0x01;                                         // disable FLASH writes/erases from user sw
 171   1      
 172   1              EA = EA_save;                       // re-enable interrupts
 173   1      
 174   1              SFRPAGE = SFRPAGE_SAVE;                         // Restore SFR page
 175   1      } // EraseScratchpad
 176          
 177          // Write a buffer to scratchpad area of FLASH
 178          void WriteScratchpad( unsigned char *buf, int buflen) {
C51 COMPILER V7.20   CYGNALFLASH                                                           06/27/2005 14:12:16 PAGE 4   

 179   1              unsigned char SFRPAGE_SAVE = SFRPAGE;                   // Save Current SFR page
 180   1              unsigned char xdata *idata pwrite;      // pointer to FLASH scratchpad, must be data or idata
 181   1              unsigned char EA_save;                          // saves the current state of the int enable bit
 182   1              int i;
 183   1      
 184   1              SFRPAGE = LEGACY_PAGE;                          // set SFR page
 185   1      
 186   1              // initialize FLASH write pointer to the beginning of the scratchpad
 187   1              pwrite = 0x0000;                    
 188   1      
 189   1              EA_save = EA;                       // save interrupt status
 190   1              EA = 0;                             // disable interrupts (precautionary)
 191   1      
 192   1              FLSCL |= 0x01;                                          // enable FLASH writes/erases from user sw
 193   1      
 194   1              PSCTL = 0x05;                                           // turn on scratchpad and writes
 195   1              for (i=0; i<buflen; i++)                        // copy data into scratchpad
 196   1                      *pwrite++ = *buf++;
 197   1      
 198   1              PSCTL = 0x00;                                           // MOVX writes target XRAM
 199   1      
 200   1              FLSCL &= ~0x01;                                         // disable FLASH writes/erases from user sw
 201   1      
 202   1              EA = EA_save;                                           // re-enable interrupts
 203   1      
 204   1              SFRPAGE = SFRPAGE_SAVE;                         // Restore SFR page
 205   1      } // WriteScratchpad
 206          
 207          // Read a buffer from scratchpad area of FLASH
 208          void ReadScratchpad( unsigned char *buf) {
 209   1              unsigned char SFRPAGE_SAVE = SFRPAGE;   // Save Current SFR page
 210   1              unsigned char code *pread;                      // pointer to FLASH used for reads, must be code
 211   1              unsigned char EA_save;                          // saves the current state of the int enable bit
 212   1      
 213   1              int i;
 214   1      
 215   1              pread = 0x0000;                                         // point at scratchpad
 216   1      
 217   1              SFRPAGE = LEGACY_PAGE;                          // set SFR page
 218   1      
 219   1              EA_save = EA;                       // save interrupt status
 220   1              EA = 0;                             // disable interrupts (precautionary)
 221   1      
 222   1              PSCTL = 0x04;                                           // swap in scratchpad
 223   1      
 224   1              for (i=0; i<SCRATCHLEN; i++)            // copy data from scratchpad
 225   1                      *buf++ = *pread++;
 226   1      
 227   1              PSCTL = 0;                                                      // swap it out
 228   1      
 229   1              EA = EA_save;                                           // re-enable interrupts
 230   1      
 231   1              SFRPAGE = SFRPAGE_SAVE;                         // Restore SFR page
 232   1      } // ReadScratchpad


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    251    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      15
C51 COMPILER V7.20   CYGNALFLASH                                                           06/27/2005 14:12:16 PAGE 5   

   IDATA SIZE       =   ----       4
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
