C51 COMPILER V9.51   DATAFLASH                                                             11/30/2014 18:01:40 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE DATAFLASH
OBJECT MODULE PLACED IN .\dataflash.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\CommonFiles\dataflash.c OPTIMIZE(9,SIZE) BROWSE MDU_F120 INCDIR(..\..\C5
                    -1\INC\;..\CommonFiles\) DB DEFINE(DISPLAY,EXTCLK6,NODEBUG,PACKMEM) PRINT(.\dataflash.lst) OBJECT(.\dataflash.obj)

line level    source

   1          #undef WRITEPROTECT
   2          // Part of traqmate.c
   3          // 11/10/2003
   4          // Author: GAStephens
   5          //
   6          // This file contains all the functions to read and write to an Atmel Dataflash
   7          // serial flash memory chip. 
   8          
   9          #ifdef DISPLAY
  10          #include <display.h>
  11          #endif
  12          #ifdef SENSOR
              #include <sensor.h>
              #endif
  15          
  16          #define DFWAIT do {int q; for (q=0; q<64; q++) ; } while(0)  // 64 seems to work well. should be verified.
  17          
  18          // This function transfers a page from an array to the designated buffer and then to
  19          // the designated memory page, erasing the page if necessary. Non-blocking.
  20          void DataFlash_Page_Write_Erase(int buffnum, int bufsize, char *buffer, int pagenum) {
  21   1              u08 status;
  22   1              int i;
  23   1      
  24   1              // wait for Serial Flash to be available
  25   1              do {
  26   2                      status = DataFlash_Read_Status();
  27   2              } while (!(status & STATUS_READY_MASK));
  28   1      
  29   1              // set CS to low        
  30   1              DF_CS1 = 0;
  31   1      #ifdef WRITEPROTECT
                      if (pagenum < 256) DF_WP = 1;           // writing low order pages
              #endif
  34   1              DFWAIT;
  35   1      
  36   1              if (1 == buffnum)
  37   1                      xferSPI(MEMORY_PAGE_THRU_BUFFER1_WRITE_ERASE);
  38   1              else
  39   1                      xferSPI(MEMORY_PAGE_THRU_BUFFER2_WRITE_ERASE);
  40   1      
  41   1              // shift out reserved bits and upper bits of page address
  42   1              xferSPI(pagenum >> 6);  
  43   1      
  44   1              // shift out bottom 6 bits of page address and top bits of byte address
  45   1              xferSPI((u08) pagenum << 2);
  46   1      
  47   1              // shift out bottom 8 bits of unsigned char address
  48   1              xferSPI(0);
  49   1      
  50   1              // shift out the data
  51   1              for (i=0; i<bufsize; i++) xferSPI(buffer[i]);
  52   1              
  53   1      #ifdef WRITEPROTECT
                      DF_WP = 0;
C51 COMPILER V9.51   DATAFLASH                                                             11/30/2014 18:01:40 PAGE 2   

              #endif
  56   1              // raise CS to end command and start flash write
  57   1              DF_CS1 = 1;
  58   1      }
  59          
  60          #if !defined DISPLAYATTACHED
  61          // This function transfers a page from the designated buffer to
  62          // the designated memory page, erasing if necessary. Non-blocking.
  63          void DataFlash_Page_Write_From_Buffer_Erase(int buffnum, int pagenum) {
  64   1              u08 status;
  65   1      
  66   1              // wait for Serial Flash to be available
  67   1              do {
  68   2                      status = DataFlash_Read_Status();
  69   2              } while (!(status & STATUS_READY_MASK));
  70   1      
  71   1              // set CS to low        
  72   1              DF_CS1 = 0;
  73   1      #ifdef WRITEPROTECT
                      if (pagenum < 256) DF_WP = 1;           // writing low order pages
              #endif
  76   1              DFWAIT;
  77   1              // shift out command
  78   1              if (1 == buffnum)
  79   1                      xferSPI(BUFFER1_WRITE_TO_MEMORY_ERASE);
  80   1              else
  81   1                      xferSPI(BUFFER2_WRITE_TO_MEMORY_ERASE);
  82   1      
  83   1              // shift out reserved bits and upper bits of page address
  84   1              xferSPI(pagenum >> 6);  
  85   1      
  86   1              // shift out bottom 6 bits of page address and top bits of byte address
  87   1              xferSPI((u08) pagenum << 2);
  88   1      
  89   1              // shift out bottom 8 bits of unsigned char address
  90   1              xferSPI(0);
  91   1              
  92   1              // set CS to high to end buffer transfer
  93   1              DF_CS1 = 1;
  94   1      }
  95          
  96          // This function transfers one or more bytes from an array to the designated buffer. Blocking.
  97          // address is 10 bit address of which byte of buffer to start transfer
  98          void DataFlash_Buffer_Write(int buffnum, int bufsize, u16 address, char *buffer) {
  99   1              u08 status;
 100   1              int i;
 101   1      
 102   1              // wait for Serial Flash to be available
 103   1              do {
 104   2                      status = DataFlash_Read_Status();
 105   2              } while (!(status & STATUS_READY_MASK));
 106   1      
 107   1              // set CS to low        
 108   1              DF_CS1 = 0;
 109   1      #ifdef WRITEPROTECT
                      if (pagenum < 256) DF_WP = 1;           // writing low order pages
              #endif
 112   1              DFWAIT;
 113   1              // shift out command
 114   1              if (1 == buffnum)
 115   1                      xferSPI(BUFFER1_WRITE);
 116   1              else
C51 COMPILER V9.51   DATAFLASH                                                             11/30/2014 18:01:40 PAGE 3   

 117   1                      xferSPI(BUFFER2_WRITE);
 118   1      
 119   1              // shift out 24 more bits containing address
 120   1              xferSPI(0); xferSPI((u08) ((address & 0x0300) >> 8)); xferSPI((u08) (address & 0x00FF));
 121   1      
 122   1              // shift out the data
 123   1              for (i=0; i<bufsize; i++) xferSPI(buffer[i]);
 124   1      
 125   1              // set CS to high to end buffer transfer
 126   1              DF_CS1 = 1;
 127   1      }
 128          
 129          // This function sets every byte in the designated buffer to 0xFF. Blocking.
 130          void DataFlash_Buffer_Clear(int buffnum, int bufsize) {
 131   1              u08 status;
 132   1              int i;
 133   1      
 134   1              // wait for Serial Flash to be available
 135   1              do {
 136   2                      status = DataFlash_Read_Status();
 137   2              } while (!(status & STATUS_READY_MASK));
 138   1      
 139   1              // set CS to low        
 140   1              DF_CS1 = 0;
 141   1      #ifdef WRITEPROTECT
                      if (pagenum < 256) DF_WP = 1;           // writing low order pages
              #endif
 144   1              DFWAIT;
 145   1              // shift out command
 146   1              if (1 == buffnum)
 147   1                      xferSPI(BUFFER1_WRITE);
 148   1              else
 149   1                      xferSPI(BUFFER2_WRITE);
 150   1      
 151   1              // shift out 24 more bits to start at byte 0
 152   1              xferSPI(0); xferSPI(0); xferSPI(0);
 153   1      
 154   1              // shift out the data
 155   1              for (i=0; i<bufsize; i++) xferSPI(0xFF);
 156   1      
 157   1              // set CS to high to end buffer transfer
 158   1              DF_CS1 = 1;
 159   1      }
 160          #endif
 161          
 162          // returns the value of DataFlash Status Register. Non-blocking.
 163          u08 DataFlash_Read_Status(void)
 164          {
 165   1         u08 dat;
 166   1      
 167   1              DF_CS1 = 0;
 168   1              DFWAIT;
 169   1      
 170   1              //command
 171   1              xferSPI(STATUS_REGISTER_READ);
 172   1      
 173   1              dat = xferSPI(0);
 174   1      
 175   1              DF_CS1 = 1;
 176   1        
 177   1         return (dat);
 178   1      }
C51 COMPILER V9.51   DATAFLASH                                                             11/30/2014 18:01:40 PAGE 4   

 179          
 180          // This function transfers a page from the designated memory page to an array. Blocking.
 181          void DataFlash_Page_Read(int bufsize, char *buffer, int pagenum) {
 182   1      
 183   1              u08 status;
 184   1              int i;
 185   1      
 186   1              // wait for Serial Flash to be available
 187   1              do {
 188   2                      status = DataFlash_Read_Status();
 189   2              } while (!(status & STATUS_READY_MASK));
 190   1      
 191   1              // set CS to low
 192   1              DF_CS1 = 0;
 193   1              DFWAIT;
 194   1      
 195   1              // shift out command
 196   1              xferSPI(MEMORY_PAGE_READ);
 197   1              
 198   1              // shift out reserved bits and upper bits of page address
 199   1              xferSPI(pagenum >> 6);  
 200   1      
 201   1              // shift out bottom 6 bits of page address and top bits of byte address
 202   1              xferSPI((u08) pagenum << 2);
 203   1      
 204   1              // shift out bottom 8 bits of unsigned char address
 205   1              xferSPI(0);
 206   1      
 207   1              // shift out 4 bytes of don't cares
 208   1              xferSPI(0);     xferSPI(0);     xferSPI(0);     xferSPI(0);
 209   1              
 210   1              // shift in the data
 211   1              for (i=0; i<bufsize; i++) buffer[i] = xferSPI(0);
 212   1      
 213   1              // raise CS to end operation
 214   1              DF_CS1 = 1;
 215   1      }
 216          
 217          #if 0
              // This function determines if a page is erased. Returns TRUE if erased. Blocking.
              BOOL DataFlash_Page_Erased(int bufsize, int pagenum) {
              
                      u08 status;
                      BOOL erased;
                      int i;
              
                      // wait for Serial Flash to be available
                      do {
                              status = DataFlash_Read_Status();
                      } while (!(status & STATUS_READY_MASK));
              
                      // set CS to low
                      DF_CS1 = 0;
                      DFWAIT;
              
                      // shift out command
                      xferSPI(MEMORY_PAGE_READ);
                      
                      // shift out reserved bits and upper bits of page address
                      xferSPI(pagenum >> 6);  
              
                      // shift out bottom 6 bits of page address and top bits of byte address
C51 COMPILER V9.51   DATAFLASH                                                             11/30/2014 18:01:40 PAGE 5   

                      xferSPI((u08) pagenum << 2);
              
                      // shift out bottom 8 bits of unsigned char address
                      xferSPI(0);
              
                      // shift out 4 bytes of don't cares
                      xferSPI(0);     xferSPI(0);     xferSPI(0);     xferSPI(0);
                      
                      // shift in the data while checking for erasure
                      for (i=0; i<bufsize; i++)
                              if (!(erased = (0xFF == xferSPI(0)))) break;
                              
                      // raise CS to end operation
                      DF_CS1 = 1;
              
                      return(erased);
              }
              #endif
 259          
 260          // erases a block from memory. Non-blocking.
 261          void DataFlash_Erase_Block(u16 pagenum)
 262          {
 263   1              u08 status;
 264   1      
 265   1              // wait for Serial Flash to be available
 266   1              do {
 267   2                      status = DataFlash_Read_Status();
 268   2              } while (!(status & STATUS_READY_MASK));
 269   1      
 270   1              DF_CS1 = 0;
 271   1      #ifdef WRITEPROTECT
                      if (pagenum < 256) DF_WP = 1;           // erasing low order pages
              #endif
 274   1              DFWAIT;
 275   1      
 276   1              //command
 277   1              xferSPI(BLOCK_ERASE);
 278   1      
 279   1              // shift out reserved bits and upper bits of page address
 280   1              xferSPI(pagenum >> 6);
 281   1      
 282   1              // shift out bottom 6 bits of page address and top bits of byte address
 283   1              xferSPI((u08) pagenum << 2);
 284   1      
 285   1              // shift out bottom 8 bits of unsigned char address
 286   1              xferSPI(0);
 287   1      
 288   1      #ifdef WRITEPROTECT
                      DF_WP = 0;
              #endif
 291   1              DF_CS1 = 1;
 292   1      }
 293          
 294          // erases a page from memory. Non-blocking.
 295          void DataFlash_Erase_Page(u16 pagenum)
 296          {
 297   1              u08 status;
 298   1      
 299   1              // wait for Serial Flash to be available
 300   1              do {
 301   2                      status = DataFlash_Read_Status();
 302   2              } while (!(status & STATUS_READY_MASK));
C51 COMPILER V9.51   DATAFLASH                                                             11/30/2014 18:01:40 PAGE 6   

 303   1      
 304   1              DF_CS1 = 0;
 305   1      #ifdef WRITEPROTECT
                      if (pagenum < 256) DF_WP = 1;           // erasing low order pages
              #endif
 308   1              DFWAIT;
 309   1      
 310   1              //command
 311   1              xferSPI(PAGE_ERASE);
 312   1      
 313   1              // shift out reserved bits and upper bits of page address
 314   1              xferSPI(pagenum >> 6);
 315   1      
 316   1              // shift out bottom 6 bits of page address and top bits of byte address
 317   1              xferSPI((u08) pagenum << 2);
 318   1      
 319   1              // shift out bottom 8 bits of unsigned char address
 320   1              xferSPI(0);
 321   1      
 322   1      #ifdef WRITEPROTECT
                      DF_WP = 0;
              #endif
 325   1              DF_CS1 = 1;
 326   1      }
 327          
 328          // erases a range of pages from memory.
 329          void DataFlash_Erase_Range(u16 firstpage, u16 lastpage, BOOL showprogress) {
 330   1              u16 segment;
 331   1      
 332   1              if (showprogress) {
 333   2      #ifdef SENSOR
                              LED1 = 0;
              #endif
 336   2      #ifdef DISPLAY
 337   2                      Clear_Screen();
 338   2      #endif
 339   2              } // if
 340   1      
 341   1              for (segment = firstpage; segment <= lastpage; segment++) {
 342   2      
 343   2                      // check for even block boundary and that we are not near end of segment
 344   2                      if (0 == (segment % 8) &&
 345   2                              (lastpage - segment) >= 8) {
 346   3      
 347   3                              // show progress
 348   3                              if (showprogress) {
 349   4      #ifdef DISPLAY
 350   4                                      xdata u08 tempstring[13];
 351   4      
 352   4                                      sprintf(tempstring, "Erasing%5d", segment);
 353   4                                      Write_Big_Line(1, tempstring, FALSE, '-');
 354   4      #endif
 355   4      #ifdef SENSOR
                                                      // invert LED every so often
                                                      if (!(segment % 64)) LED1 = ~LED1;;
              #endif
 359   4                              } // if
 360   3      
 361   3                              // erase block
 362   3                              DataFlash_Erase_Block(segment);
 363   3                              segment += 7;           // will get incremented again at start of loop
 364   3                      } // if
C51 COMPILER V9.51   DATAFLASH                                                             11/30/2014 18:01:40 PAGE 7   

 365   2                      else
 366   2                              DataFlash_Erase_Page(segment);
 367   2              } // for
 368   1      
 369   1      #ifdef SENSOR
                      if (showprogress)
                              LED1 = 0;
              #endif
 373   1      } // DataFlash_Erase_Range
 374          
 375          //-----------------------------------------------------------------------------
 376          // Initialization Subroutines
 377          //-----------------------------------------------------------------------------
 378          
 379          // This function initializes the DataFlash. Returns size of part in Mbit
 380          // Sets values for number of pages and bytes per page
 381          void DataFlash_Init(u16 *pages, u16 *pagebytes) {
 382   1              u08 status;
 383   1      
 384   1      #ifdef WRITEPROTECT
                      DF_WP = 0;                                                      // write protect on (pages 0-255)
              #else
 387   1              DF_WP = 1;                                                      // write protect off (pages 0-255)
 388   1      #endif
 389   1              DF_CS1 = 1;                                                     // deselect chip
 390   1      
 391   1              DF_RST = 0;                                                     // reset dataflash
 392   1              DFWAIT;         
 393   1              DF_RST = 1;
 394   1              DFWAIT;
 395   1      
 396   1              // check for ready and determine which type of chip it is
 397   1              status = DataFlash_Read_Status();
 398   1      
 399   1              switch (status & STATUS_DENSITY_MASK) {
 400   2                      case DENSITY_1MBIT:
 401   2                              *pages = NUM_PAGE_1MBIT;
 402   2                              *pagebytes = MAX_PAGE_1MBIT;
 403   2                              break;
 404   2                      case DENSITY_2MBIT:
 405   2                              *pages = NUM_PAGE_2MBIT;
 406   2                              *pagebytes = MAX_PAGE_2MBIT;
 407   2                              break;
 408   2                      case DENSITY_4MBIT:
 409   2                              *pages = NUM_PAGE_4MBIT;
 410   2                              *pagebytes = MAX_PAGE_4MBIT;
 411   2                              break;
 412   2                      case DENSITY_8MBIT:
 413   2                              *pages = NUM_PAGE_8MBIT;
 414   2                              *pagebytes = MAX_PAGE_8MBIT;
 415   2                              break;
 416   2                      case DENSITY_16MBIT:
 417   2                              *pages = NUM_PAGE_16MBIT;
 418   2                              *pagebytes = MAX_PAGE_16MBIT;
 419   2                              break;
 420   2                      case DENSITY_32MBIT:
 421   2                              *pages = NUM_PAGE_32MBIT;
 422   2                              *pagebytes = MAX_PAGE_32MBIT;
 423   2                              break;
 424   2                      case DENSITY_64MBIT:
 425   2                              *pages = NUM_PAGE_64MBIT;
 426   2                              *pagebytes = MAX_PAGE_64MBIT;
C51 COMPILER V9.51   DATAFLASH                                                             11/30/2014 18:01:40 PAGE 8   

 427   2                              break;
 428   2              }
 429   1      }
 430          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1123    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =   ----      13
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      76
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
