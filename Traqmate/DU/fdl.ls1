A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE     1


MACRO ASSEMBLER A51 V8.02b
OBJECT MODULE PLACED IN .\fdl.OBJ
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\A51.EXE .\fdl.src PR(.\fdl.ls1) EP

LOC  OBJ            LINE     SOURCE

                       1     ; .\fdl.SRC generated from: ..\CommonFiles\fdl.c
                       2     ; COMPILER INVOKED BY:
                       3     ;        C:\Keil\C51\BIN\C51.EXE ..\CommonFiles\fdl.c OPTIMIZE(9,SIZE) BROWSE MDU_F120 INCD
                             IR(..\..\C51\INC\;..\CommonFiles\) DB DEFINE(DISPLAY,EXTCLK6,NODEBUG,PACKMEM) PRINT(.\fdl.lst) SRC(.\fdl.SRC)
                       4     
                       5     $nomod51 
                       6     
                       7     NAME    FDL
                       8     
  00DA                 9     CCF2    BIT     0D8H.2
  009B                10     TB80    BIT     098H.3
  009D                11     SPI0CKR DATA    09DH
  00DB                12     CCF3    BIT     0D8H.3
  009B                13     TB81    BIT     098H.3
  0080                14     P0      DATA    080H
  00F8                15     SPIEN   BIT     0F8H.0
  00DC                16     CCF4    BIT     0D8H.4
  009F                17     SM00    BIT     098H.7
  0090                18     P1      DATA    090H
  008F                19     PLL0FLT DATA    08FH
  00DD                20     CCF5    BIT     0D8H.5
  00C2                21     AA      BIT     0C0H.2
  009E                22     SM10    BIT     098H.6
  00FF                23     WDTCN   DATA    0FFH
  00A0                24     P2      DATA    0A0H
  00C8                25     A0_DISP BIT     0C8H.0
  009D                26     SM20    BIT     098H.5
  00BC                27     ADC0CF  DATA    0BCH
  00B0                28     P3      DATA    0B0H
  00D6                29     AC      BIT     0D0H.6
  00C8                30     P4      DATA    0C8H
  00DE                31     ONOFF_SW        BIT     0D8H.6
  00F9                32     PCA0    DATA    0F9H
  00E6                33     EIE1    DATA    0E6H
  00D8                34     P5      DATA    0D8H
  00BC                35     ADC2CF  DATA    0BCH
  00AF                36     EA      BIT     0A8H.7
  00E8                37     P6      DATA    0E8H
  00E7                38     EIE2    DATA    0E7H
  009D                39     MCE1    BIT     098H.5
  00F8                40     P7      DATA    0F8H
  00C9                41     E1_DISP BIT     0C8H.1
  008F                42     PSCTL   DATA    08FH
  00CA                43     E2_DISP BIT     0C8H.2
  00DF                44     CF      BIT     0D8H.7
  008E                45     PLL0MUL DATA    08EH
  00E8                46     ADC0CN  DATA    0E8H
  00D4                47     DAC0CN  DATA    0D4H
  0084                48     SFRPAGE DATA    084H
  00CC                49     RST_DISP        BIT     0C8H.4
  00D4                50     DAC1CN  DATA    0D4H
  00C3                51     MAC0CF  DATA    0C3H
  00C2                52     MAC0AH  DATA    0C2H
  00A4                53     P0MDOUT DATA    0A4H
  00E8                54     ADC2CN  DATA    0E8H
  00A5                55     P1MDOUT DATA    0A5H
  0092                56     MAC0BH  DATA    092H
  00A8                57     IE      DATA    0A8H
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE     2

  00A6                58     P2MDOUT DATA    0A6H
  009A                59     CCH0MA  DATA    09AH
  00A7                60     P3MDOUT DATA    0A7H
  00A3                61     CCH0LC  DATA    0A3H
  00F6                62     EIP1    DATA    0F6H
  00C1                63     MAC0AL  DATA    0C1H
  009C                64     P4MDOUT DATA    09CH
  00F9                65     TXBMT   BIT     0F8H.1
  00F7                66     EIP2    DATA    0F7H
  00A1                67     CCH0CN  DATA    0A1H
  009D                68     P5MDOUT DATA    09DH
  0091                69     MAC0BL  DATA    091H
  00F8                70     DF_WP   BIT     0F8H.0
  00FC                71     PCA0CPH0        DATA    0FCH
  009E                72     P6MDOUT DATA    09EH
  00FE                73     PCA0CPH1        DATA    0FEH
  009F                74     P7MDOUT DATA    09FH
  0082                75     DP      DATA    082H
  00EA                76     PCA0CPH2        DATA    0EAH
  00C4                77     ADC0GT  DATA    0C4H
  00DE                78     CR      BIT     0D8H.6
  00EC                79     PCA0CPH3        DATA    0ECH
  00CE                80     EXF2    BIT     0C8H.6
  009C                81     REN0    BIT     098H.4
  00FB                82     PCA0CPL0        DATA    0FBH
  00EE                83     PCA0CPH4        DATA    0EEH
  00A3                84     EMI0CF  DATA    0A3H
  0096                85     SFRPGCN DATA    096H
  00CE                86     EXF3    BIT     0C8H.6
  009C                87     REN1    BIT     098H.4
  00FD                88     PCA0CPL1        DATA    0FDH
  00E2                89     PCA0CPH5        DATA    0E2H
  00DA                90     PCA0CPM0        DATA    0DAH
  00D9                91     PCA0MD  DATA    0D9H
  00D8                92     PCA0CN  DATA    0D8H
  00C4                93     ADC2GT  DATA    0C4H
  00CE                94     EXF4    BIT     0C8H.6
  00E9                95     PCA0CPL2        DATA    0E9H
  00DB                96     PCA0CPM1        DATA    0DBH
  00EB                97     PCA0CPL3        DATA    0EBH
  00DC                98     PCA0CPM2        DATA    0DCH
  00B8                99     IP      DATA    0B8H
  00C6               100     ADC0LT  DATA    0C6H
  00C3               101     MAC0HO  BIT     0C0H.3
  008C               102     CP0FIF  BIT     088H.4
  00ED               103     PCA0CPL4        DATA    0EDH
  00DD               104     PCA0CPM3        DATA    0DDH
  008C               105     CP1FIF  BIT     088H.4
  00E1               106     PCA0CPL5        DATA    0E1H
  00DE               107     PCA0CPM4        DATA    0DEH
  00D7               108     CY      BIT     0D0H.7
  00C3               109     SI      BIT     0C0H.3
  00DF               110     PCA0CPM5        DATA    0DFH
  00C6               111     ADC2LT  DATA    0C6H
  00DB               112     BACK_SW BIT     0D8H.3
  00DC               113     DN_SW   BIT     0D8H.4
  00E1               114     XBR0    DATA    0E1H
  00B9               115     SADEN0  DATA    0B9H
  00E2               116     XBR1    DATA    0E2H
  00A2               117     EMI0CN  DATA    0A2H
  00E3               118     XBR2    DATA    0E3H
  0088               119     FLHBUSY BIT     088H.0
  00D1               120     REF0CN  DATA    0D1H
  00A9               121     SADDR0  DATA    0A9H
  00BA               122     AMX0CF  DATA    0BAH
  00ED               123     AD0INT  BIT     0E8H.5
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE     3

  00CB               124     RCAP2H  DATA    0CBH
  00A2               125     CCH0TN  DATA    0A2H
  0086               126     SFRLAST DATA    086H
  00BC               127     PS      BIT     0B8H.4
  00CB               128     RCAP3H  DATA    0CBH
  00BA               129     AMX2CF  DATA    0BAH
  0081               130     SP      DATA    081H
  00ED               131     AD2INT  BIT     0E8H.5
  00CB               132     RCAP4H  DATA    0CBH
  00A1               133     EMI0TC  DATA    0A1H
  00D2               134     OV      BIT     0D0H.2
  00C1               135     MAC0SO  BIT     0C0H.1
  00C0               136     SMB0CN  DATA    0C0H
  00CC               137     TMR2    DATA    0CCH
  008D               138     CP0RIF  BIT     088H.5
  00CA               139     RCAP2L  DATA    0CAH
  00CC               140     TMR3    DATA    0CCH
  00FD               141     MODF    BIT     0F8H.5
  008D               142     CP1RIF  BIT     088H.5
  00CA               143     RCAP3L  DATA    0CAH
  00CC               144     TMR4    DATA    0CCH
  00CA               145     RCAP4L  DATA    0CAH
  00CF               146     SMB0CR  DATA    0CFH
  0089               147     CPT0MD  DATA    089H
  0088               148     CPT0CN  DATA    088H
  009F               149     S1MODE  BIT     098H.7
  00AD               150     P1MDIN  DATA    0ADH
  0089               151     PLL0CN  DATA    089H
  0089               152     CPT1MD  DATA    089H
  0088               153     CPT1CN  DATA    088H
  0085               154     SFRNEXT DATA    085H
  00F8               155     SPI0CN  DATA    0F8H
  00DA               156     UP_SW   BIT     0D8H.2
  00CF               157     MAC0RNDH        DATA    0CFH
  00C9               158     TMR2CF  DATA    0C9H
  00C9               159     TMR3CF  DATA    0C9H
  0087               160     PCON    DATA    087H
  00F9               161     DF_CS1  BIT     0F8H.1
  00C9               162     TMR4CF  DATA    0C9H
  00FB               163     DF_CS2  BIT     0F8H.3
  00FF               164     SPIF    BIT     0F8H.7
  00CE               165     MAC0RNDL        DATA    0CEH
  0089               166     TMOD    DATA    089H
  0088               167     TCON    DATA    088H
  00FE               168     WCOL    BIT     0F8H.6
  00FA               169     NSSMD0  BIT     0F8H.2
  00BB               170     AMX0SL  DATA    0BBH
  00FB               171     NSSMD1  BIT     0F8H.3
  00C8               172     TMR2CN  DATA    0C8H
  00C8               173     TMR3CN  DATA    0C8H
  00BB               174     AMX2SL  DATA    0BBH
  00D8               175     LITE_SW BIT     0D8H.0
  00C8               176     TMR4CN  DATA    0C8H
  00CB               177     RW_DISP BIT     0C8H.3
  008E               178     CP0OUT  BIT     088H.6
  008E               179     CP1OUT  BIT     088H.6
  0089               180     IE0     BIT     088H.1
  008B               181     IE1     BIT     088H.3
  008B               182     OSCICL  DATA    08BH
  0097               183     CLKSEL  DATA    097H
  00F0               184     B       DATA    0F0H
  00D3               185     DAC0H   DATA    0D3H
  00BF               186     ADC0H   DATA    0BFH
  00B1               187     PSBANK  DATA    0B1H
  008A               188     OSCICN  DATA    08AH
  00D3               189     DAC1H   DATA    0D3H
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE     4

  00C1               190     SMBFTE  BIT     0C0H.1
  00C7               191     BUSY    BIT     0C0H.7
  00D2               192     DAC0L   DATA    0D2H
  00BE               193     ADC0L   DATA    0BEH
  00D2               194     DAC1L   DATA    0D2H
  00E0               195     ACC     DATA    0E0H
  00AC               196     ES0     BIT     0A8H.4
  00FB               197     PCA0CP0 DATA    0FBH
  00EF               198     AD0EN   BIT     0E8H.7
  00C9               199     CT2     BIT     0C8H.1
  00A9               200     ET0     BIT     0A8H.1
  00FD               201     PCA0CP1 DATA    0FDH
  00C9               202     CT3     BIT     0C8H.1
  00AB               203     ET1     BIT     0A8H.3
  008D               204     TF0     BIT     088H.5
  00E9               205     PCA0CP2 DATA    0E9H
  00EF               206     AD2EN   BIT     0E8H.7
  00C9               207     CT4     BIT     0C8H.1
  00AD               208     ET2     BIT     0A8H.5
  0098               209     RI0     BIT     098H.0
  008F               210     TF1     BIT     088H.7
  00EB               211     PCA0CP3 DATA    0EBH
  00CF               212     TF2     BIT     0C8H.7
  00C0               213     SMBTOE  BIT     0C0H.0
  0098               214     RI1     BIT     098H.0
  008C               215     TH0     DATA    08CH
  00ED               216     PCA0CP4 DATA    0EDH
  00CF               217     TF3     BIT     0C8H.7
  00A8               218     EX0     BIT     0A8H.0
  0099               219     TI0     BIT     098H.1
  0088               220     IT0     BIT     088H.0
  00FA               221     PCA0H   DATA    0FAH
  008D               222     TH1     DATA    08DH
  00E1               223     PCA0CP5 DATA    0E1H
  00CF               224     TF4     BIT     0C8H.7
  00AA               225     EX1     BIT     0A8H.2
  0099               226     TI1     BIT     098H.1
  008A               227     IT1     BIT     088H.2
  00FB               228     EN3VDISP        BIT     0F8H.3
  00D0               229     P       BIT     0D0H.0
  00FD               230     BACKLITEKB      BIT     0F8H.5
  00C0               231     MAC0N   BIT     0C0H.0
  008C               232     OSCXCN  DATA    08CH
  008A               233     TL0     DATA    08AH
  0088               234     FLSTAT  DATA    088H
  00F9               235     PCA0L   DATA    0F9H
  008B               236     TL1     DATA    08BH
  00B9               237     PT0     BIT     0B8H.1
  00D3               238     RS0     BIT     0D0H.3
  00BB               239     PT1     BIT     0B8H.3
  00D4               240     RS1     BIT     0D0H.4
  00BD               241     PT2     BIT     0B8H.5
  008C               242     TR0     BIT     088H.4
  00EE               243     AD0TM   BIT     0E8H.6
  008F               244     CP0EN   BIT     088H.7
  008E               245     TR1     BIT     088H.6
  00CA               246     TR2     BIT     0C8H.2
  00B8               247     PX0     BIT     0B8H.0
  008F               248     CP1EN   BIT     088H.7
  00CA               249     RCAP2   DATA    0CAH
  00EE               250     AD2TM   BIT     0E8H.6
  00CA               251     TR3     BIT     0C8H.2
  00BA               252     PX1     BIT     0B8H.2
  00FE               253     BACKLITEDS      BIT     0F8H.6
  00CA               254     RCAP3   DATA    0CAH
  00CA               255     TR4     BIT     0C8H.2
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE     5

  00CA               256     RCAP4   DATA    0CAH
  00C2               257     MAC0Z   BIT     0C0H.2
  0083               258     DPH     DATA    083H
  00C5               259     ADC0GTH DATA    0C5H
  0082               260     DPL     DATA    082H
  00C4               261     ADC0GTL DATA    0C4H
  0099               262     SBUF0   DATA    099H
  00C7               263     ADC0LTH DATA    0C7H
  0099               264     SBUF1   DATA    099H
  00CB               265     EXEN2   BIT     0C8H.3
  00EF               266     RSTSRC  DATA    0EFH
  00B7               267     FLACL   DATA    0B7H
  00FA               268     DF_RST  BIT     0F8H.2
  00CB               269     EXEN3   BIT     0C8H.3
  00C8               270     CPRL2   BIT     0C8H.0
  0088               271     CP0HYN0 BIT     088H.0
  0098               272     SCON0   DATA    098H
  00CB               273     EXEN4   BIT     0C8H.3
  00C8               274     CPRL3   BIT     0C8H.0
  0088               275     CP1HYN0 BIT     088H.0
  0089               276     CP0HYN1 BIT     088H.1
  0098               277     SCON1   DATA    098H
  00C8               278     CPRL4   BIT     0C8H.0
  0089               279     CP1HYN1 BIT     088H.1
  008A               280     CP0HYP0 BIT     088H.2
  00C6               281     ADC0LTL DATA    0C6H
  008A               282     CP1HYP0 BIT     088H.2
  008B               283     CP0HYP1 BIT     088H.3
  00C5               284     STA     BIT     0C0H.5
  008B               285     CP1HYP1 BIT     088H.3
  00C3               286     SMB0ADR DATA    0C3H
  00C0               287     MAC0STA DATA    0C0H
  0091               288     SSTA0   DATA    091H
  00C2               289     SMB0DAT DATA    0C2H
  00CD               290     TMR2H   DATA    0CDH
  009A               291     SPI0CFG DATA    09AH
  00D9               292     SEL_SW  BIT     0D8H.1
  00B4               293     USB_PRESENT     BIT     0B0H.4
  00CD               294     TMR3H   DATA    0CDH
  008E               295     CKCON   DATA    08EH
  00CD               296     TMR4H   DATA    0CDH
  00FC               297     RXOVRN  BIT     0F8H.4
  00CC               298     TMR2L   DATA    0CCH
  00CC               299     TMR3L   DATA    0CCH
  00E8               300     AD0LJST BIT     0E8H.0
  00CC               301     TMR4L   DATA    0CCH
  00D5               302     F0      BIT     0D0H.5
  00B7               303     FLSCL   DATA    0B7H
  00EA               304     AD0CM0  BIT     0E8H.2
  00D1               305     F1      BIT     0D0H.1
  00C4               306     STO     BIT     0C0H.4
  00C6               307     ENSMB   BIT     0C0H.6
  00EB               308     AD0CM1  BIT     0E8H.3
  009B               309     SPI0DAT DATA    09BH
  00D2               310     DAC0    DATA    0D2H
  00BE               311     ADC0    DATA    0BEH
  00E9               312     AD2CM0  BIT     0E8H.1
  00D2               313     DAC1    DATA    0D2H
  00EA               314     AD2CM1  BIT     0E8H.2
  00E9               315     AD0WINT BIT     0E8H.1
  00EB               316     AD2CM2  BIT     0E8H.3
  00EC               317     AD0BUSY BIT     0E8H.4
  00D0               318     PSW     DATA    0D0H
  00BE               319     ADC2    DATA    0BEH
  0097               320     MAC0OVR DATA    097H
  0093               321     MAC0ACC0        DATA    093H
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE     6

  00E8               322     AD2WINT BIT     0E8H.0
  0094               323     MAC0ACC1        DATA    094H
  00EC               324     AD2BUSY BIT     0E8H.4
  00D8               325     CCF0    BIT     0D8H.0
  009A               326     RB80    BIT     098H.2
  00C1               327     SMB0STA DATA    0C1H
  0095               328     MAC0ACC2        DATA    095H
  00D9               329     CCF1    BIT     0D8H.1
  009A               330     RB81    BIT     098H.2
  0096               331     MAC0ACC3        DATA    096H
  008D               332     PLL0DIV DATA    08DH
                     333     ?PR?_CopytoCodeSpace?FDL                 SEGMENT CODE 
                     334     ?DT?_CopytoCodeSpace?FDL                 SEGMENT DATA OVERLAYABLE 
                     335     ?PR?_FDL_xferSPI?FDL SEGMENT CODE 
                     336     ?PR?FDL_DataFlash_Read_Status?FDL        SEGMENT CODE 
                     337     ?DT?FDL_DataFlash_Read_Status?FDL        SEGMENT DATA OVERLAYABLE 
                     338     ?PR?FDL              SEGMENT CODE 
                     339             EXTRN   XDATA (flashpage)
                     340             EXTRN   CODE (?C?CSTPTR)
                     341             EXTRN   CODE (?C?PLDIIDATA)
                     342             PUBLIC  FDL_DataFlash_Read_Status
                     343             PUBLIC  _FDL_xferSPI
                     344             PUBLIC  _CopytoCodeSpace
                     345     
----                 346             RSEG  ?DT?FDL_DataFlash_Read_Status?FDL
0000                 347     ?FDL_DataFlash_Read_Status?BYTE:
0000                 348               q?251:   DS   2
                     349     
----                 350             RSEG  ?DT?_CopytoCodeSpace?FDL
0000                 351     ?_CopytoCodeSpace?BYTE:
0000                 352        lastpage?040:   DS   2
000B                 353             ORG  11
000B                 354               q?041:   DS   2
000B                 355             ORG  11
000B                 356               q?042:   DS   2
000B                 357             ORG  11
000B                 358               q?043:   DS   2
0002                 359             ORG  2
0002                 360          pwrite?044:   DS   3
0005                 361             ORG  5
0005                 362         EA_save?045:   DS   1
0006                 363             ORG  6
0006                 364               i?046:   DS   2
0008                 365             ORG  8
0008                 366            page?047:   DS   2
000A                 367             ORG  10
000A                 368          status?048:   DS   1
                     369     ; // software downloader
                     370     ; //
                     371     ; // this must be less than 510 bytes when compiled which is very tight. It must
                     372     ; // not extend into address 0xFFFE or 0xFFFF, the micro flash lock bytes
                     373     ; // it is loaded at 0xFE00 and must be self-contained so the code copy will
                     374     ; // not overwrite it.
                     375     ; //
                     376     ; // initial implementation John Paulos, 04/26/2005
                     377     ; // re-written Glenn Stephens, 05/02/2005
                     378     ; //
                     379     ; 
                     380     ; #include <tmtypes.h>
                     381     ; #ifdef DISPLAY
                     382     ; #include <display.h>
                     383     ; #else
                     384     ; #include <sensor.h>
                     385     ; #endif
                     386     ; 
                     387     ; //#define DFWAITREAD do {int q; for (q=0; q<64; q++) ; } while(0)  // 64 seems to work we
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE     7

                             ll. should be verified.
                     388     ; //#define DFWAITWRITE do {int q; for (q=0; q<64; q++) ; } while(0)  // longer for erase.
                     389     ; #define DFWAIT do {int q; for (q=0; q<64; q++) ; } while(0)  // longer for erase.
                     390     ; 
                     391     ; u08 FDL_xferSPI (u08);
                     392     ; u08 FDL_DataFlash_Read_Status(void);
                     393     ; 
                     394     
----                 395             RSEG  ?PR?FDL
0000                 396     Com0041:
0000                 397     L?0066:
                     398             USING   0
0000 7400     F      399             MOV     A,#LOW (flashpage)
0002 2500     F      400             ADD     A,i?046+01H
0004 F582            401             MOV     DPL,A
0006 7400     F      402             MOV     A,#HIGH (flashpage)
0008 3500     F      403             ADDC    A,i?046
000A F583            404             MOV     DPH,A
000C 22              405             RET     
                     406     ; END OF Com0041
                     407     
                     408     ; void CopytoCodeSpace(u16 lastpage) {
                     409     
----                 410             RSEG  ?PR?_CopytoCodeSpace?FDL
0000                 411     _CopytoCodeSpace:
                     412             USING   0
                     413                             ; SOURCE LINE # 26
0000 8E00     F      414             MOV     lastpage?040,R6
0002 8F00     F      415             MOV     lastpage?040+01H,R7
                     416     ;       char * data pwrite;
                     417     ;       char EA_save;
                     418     ;       u16 i, page;
                     419     ;       u08 status;
                     420     ; #pragma ASM
                     421     ; // support code versions with roadblock at 0xfe00
                     422               
                     423     ; // this code duplicates the c compiler argument passing code
                     424               
                     425     ; //    argument passing, R6 = MSB, R7 = LSB
                     426               
                     427     ;       MOV     lastpage?040,R6
0004 8E00     F      428               MOV   lastpage?040,R6
                     429     ;       MOV     lastpage?040+01H,R7
0006 8F00     F      430               MOV   lastpage?040+01H,R7
                     431     ; #pragma ENDASM
                     432     ; 
                     433     ;       pwrite = 0x0;                                           // initialize code pointer
                     434                             ; SOURCE LINE # 39
0008 750000   F      435             MOV     pwrite?044,#00H
000B 750000   F      436             MOV     pwrite?044+01H,#00H
000E 750000   F      437             MOV     pwrite?044+02H,#00H
                     438     ; 
                     439     ;       EA_save = EA;                                           // save interrupt status
                     440                             ; SOURCE LINE # 41
0011 A2AF            441             MOV     C,EA
0013 E4              442             CLR     A
0014 33              443             RLC     A
0015 F500     F      444             MOV     EA_save?045,A
                     445     ;       EA = 0;                                                         // disable interrup
                             ts
                     446                             ; SOURCE LINE # 42
0017 C2AF            447             CLR     EA
                     448     ; 
                     449     ;       SFRPAGE = LEGACY_PAGE;
                     450                             ; SOURCE LINE # 44
0019 E4              451             CLR     A
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE     8

001A F584            452             MOV     SFRPAGE,A
                     453     ;       FLSCL |= 0x01;                                          // enable flash writes/eras
                             es from user software
                     454                             ; SOURCE LINE # 45
001C 43B701          455             ORL     FLSCL,#01H
                     456     ; 
                     457     ;       PSCTL = 0x03;                                           // movx writes erase flash 
                             page
                     458                             ; SOURCE LINE # 47
001F 758F03          459             MOV     PSCTL,#03H
0022                 460     ?C0001:
                     461     ; 
                     462     ;       // erase code memory up to last 1024 page containing bootstrapper
                     463     ;       while (pwrite < LAST_CODE_PAGE) {       // stop one page from end of codespace
                     464                             ; SOURCE LINE # 50
0022 AB00     F      465             MOV     R3,pwrite?044
0024 AA00     F      466             MOV     R2,pwrite?044+01H
0026 A900     F      467             MOV     R1,pwrite?044+02H
0028 AE02            468             MOV     R6,AR2
002A C3              469             CLR     C
002B EE              470             MOV     A,R6
002C 94FC            471             SUBB    A,#0FCH
002E 5012            472             JNC     ?C0002
                     473     ;               *pwrite = 0x88;                                 // write any value to initi
                             ate page erase
                     474                             ; SOURCE LINE # 51
0030 7488            475             MOV     A,#088H
0032 120000   F      476             LCALL   ?C?CSTPTR
                     477     ;               pwrite += CODE_PAGE_SIZE;               // point to next page
                     478                             ; SOURCE LINE # 52
0035 E4              479             CLR     A
0036 2500     F      480             ADD     A,pwrite?044+02H
0038 F500     F      481             MOV     pwrite?044+02H,A
003A 7404            482             MOV     A,#04H
003C 3500     F      483             ADDC    A,pwrite?044+01H
003E F500     F      484             MOV     pwrite?044+01H,A
                     485     ;       }
                     486                             ; SOURCE LINE # 53
0040 80E0            487             SJMP    ?C0001
0042                 488     ?C0002:
                     489     ; 
                     490     ;       PSCTL = 0x00;                                           // movx writes to target ra
                             m
                     491                             ; SOURCE LINE # 55
0042 E4              492             CLR     A
0043 F58F            493             MOV     PSCTL,A
                     494     ;       pwrite = 0x00;                                          // reset code pointer
                     495                             ; SOURCE LINE # 56
0045 F500     F      496             MOV     pwrite?044,A
0047 F500     F      497             MOV     pwrite?044+01H,A
0049 F500     F      498             MOV     pwrite?044+02H,A
                     499     ; 
                     500     ;       // copy code over from dataflash to micro flash codespace 512 bytes at a time
                     501     ;       for (page=0; page < (BOOTSTRAP_ADDR/CODE_DOWNLOAD_SIZE); page++) {
                     502                             ; SOURCE LINE # 59
004B F500     F      503             MOV     page?047,A
004D F500     F      504             MOV     page?047+01H,A
004F                 505     ?C0003:
                     506     ; 
                     507     ;               SFRPAGE = CONFIG_PAGE;
                     508                             ; SOURCE LINE # 61
004F 75840F          509             MOV     SFRPAGE,#0FH
0052                 510     ?C0008:
                     511     ; 
                     512     ; //                    FDL_DataFlash_Page_Read(MAX_PAGE_SIZE, flashpage.bigbuff, read_page
                             );
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE     9

                     513     ; // function is put in line here to avoid passing pointer which uses code put in by 
                     514     ; // compiler in lower code space
                     515     ; 
                     516     ; #ifdef SENSOR
                     517     ;               if (!(page % 4)) LED1 = ~LED1;;
                     518     ; #endif
                     519     ; 
                     520     ;               // wait for Serial Flash to be available
                     521     ;               do {
                     522                             ; SOURCE LINE # 72
                     523     ;                       status = FDL_DataFlash_Read_Status();
                     524                             ; SOURCE LINE # 73
                     525     ;               } while (!(status & STATUS_READY_MASK));
                     526                             ; SOURCE LINE # 74
0052 120000   F      527             LCALL   L?0067
0055 30E7FA          528             JNB     ACC.7,?C0008
                     529     ; 
                     530     ;               // set CS to low
                     531     ;               DF_CS1 = 0;
                     532                             ; SOURCE LINE # 77
0058 C2F9            533             CLR     DF_CS1
                     534     ;               DFWAIT;
                     535                             ; SOURCE LINE # 78
005A E4              536             CLR     A
005B F500     F      537             MOV     q?041,A
005D F500     F      538             MOV     q?041+01H,A
005F                 539     ?C0012:
005F 0500     F      540             INC     q?041+01H
0061 E500     F      541             MOV     A,q?041+01H
0063 7002            542             JNZ     ?C0053
0065 0500     F      543             INC     q?041
0067                 544     ?C0053:
0067 6440            545             XRL     A,#040H
0069 4500     F      546             ORL     A,q?041
006B 70F2            547             JNZ     ?C0012
006D                 548     ?C0010:
                     549     ; 
                     550     ;               // shift out command
                     551     ;               FDL_xferSPI(MEMORY_PAGE_READ);
                     552                             ; SOURCE LINE # 81
006D 7FD2            553             MOV     R7,#0D2H
                     554     ;       
                     555     ;               // shift out reserved bits and upper bits of page address
                     556     ;               FDL_xferSPI(page >> 6); 
                     557                             ; SOURCE LINE # 84
006F 120000   F      558             LCALL   L?0068
0072                 559     ?C0054:
0072 CE              560             XCH     A,R6
0073 C3              561             CLR     C
0074 13              562             RRC     A
0075 CE              563             XCH     A,R6
0076 13              564             RRC     A
0077 D8F9            565             DJNZ    R0,?C0054
                     566     ; 
                     567     ;               // shift out bottom 6 bits of page address and top bits of byte address
                     568     ;               FDL_xferSPI((u08) page << 2);
                     569                             ; SOURCE LINE # 87
                     570     ; 
                     571     ;               // shift out bottom 8 bits of unsigned char address
                     572     ;               FDL_xferSPI(0);
                     573                             ; SOURCE LINE # 90
0079 120000   F      574             LCALL   L?0063
                     575     ; 
                     576     ;               // shift out 4 bytes of don't cares
                     577     ;               FDL_xferSPI(0); FDL_xferSPI(0); FDL_xferSPI(0); FDL_xferSPI(0);
                     578                             ; SOURCE LINE # 93
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE    10

007C E4              579             CLR     A
007D 120000   F      580             LCALL   L?0064
                     581     ; 
                     582     ;               // shift in the data
                     583     ;               for (i=0; i < CODE_DOWNLOAD_SIZE; i++)
                     584                             ; SOURCE LINE # 96
0080 120000   F      585             LCALL   L?0064
0083 F500     F      586             MOV     i?046,A
0085 F500     F      587             MOV     i?046+01H,A
0087                 588     ?C0015:
                     589     ;                       flashpage.bigbuff[i] =  FDL_xferSPI(0);
                     590                             ; SOURCE LINE # 97
0087 E4              591             CLR     A
0088 FF              592             MOV     R7,A
0089 120000   F      593             LCALL   _FDL_xferSPI
008C 120000   F      594             LCALL   L?0066
008F EF              595             MOV     A,R7
0090 F0              596             MOVX    @DPTR,A
0091 0500     F      597             INC     i?046+01H
0093 E500     F      598             MOV     A,i?046+01H
0095 7002            599             JNZ     ?C0055
0097 0500     F      600             INC     i?046
0099                 601     ?C0055:
0099 C3              602             CLR     C
009A E500     F      603             MOV     A,i?046
009C 9402            604             SUBB    A,#02H
009E 40E7            605             JC      ?C0015
00A0                 606     ?C0016:
                     607     ; 
                     608     ;               // raise CS to end operation
                     609     ;               DF_CS1 = 1;
                     610                             ; SOURCE LINE # 100
00A0 D2F9            611             SETB    DF_CS1
                     612     ; 
                     613     ; // end of inline function
                     614     ; 
                     615     ;               SFRPAGE = LEGACY_PAGE;
                     616                             ; SOURCE LINE # 104
00A2 E4              617             CLR     A
00A3 F584            618             MOV     SFRPAGE,A
                     619     ;               PSCTL = 0x01;                                           // movx writes to c
                             odeflash
                     620                             ; SOURCE LINE # 105
00A5 758F01          621             MOV     PSCTL,#01H
                     622     ; 
                     623     ;               // copy dataflash page into micro flash
                     624     ;               for (i=0; i < CODE_DOWNLOAD_SIZE; i++)
                     625                             ; SOURCE LINE # 108
00A8 F500     F      626             MOV     i?046,A
00AA F500     F      627             MOV     i?046+01H,A
00AC                 628     ?C0018:
                     629     ;                       *pwrite++ = flashpage.bigbuff[i];
                     630                             ; SOURCE LINE # 109
00AC 120000   F      631             LCALL   L?0066
00AF E0              632             MOVX    A,@DPTR
00B0 FF              633             MOV     R7,A
00B1 7800     F      634             MOV     R0,#LOW (pwrite?044)
00B3 E4              635             CLR     A
00B4 75F001          636             MOV     B,#01H
00B7 120000   F      637             LCALL   ?C?PLDIIDATA
00BA EF              638             MOV     A,R7
00BB 120000   F      639             LCALL   ?C?CSTPTR
00BE 0500     F      640             INC     i?046+01H
00C0 E500     F      641             MOV     A,i?046+01H
00C2 7002            642             JNZ     ?C0056
00C4 0500     F      643             INC     i?046
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE    11

00C6                 644     ?C0056:
00C6 B400E3          645             CJNE    A,#00H,?C0018
00C9 E500     F      646             MOV     A,i?046
00CB B402DE          647             CJNE    A,#02H,?C0018
00CE                 648     ?C0019:
                     649     ; 
                     650     ;               PSCTL = 0x00;
                     651                             ; SOURCE LINE # 111
00CE E4              652             CLR     A
00CF F58F            653             MOV     PSCTL,A
                     654     ;       } // for
                     655                             ; SOURCE LINE # 112
00D1 0500     F      656             INC     page?047+01H
00D3 E500     F      657             MOV     A,page?047+01H
00D5 7002            658             JNZ     ?C0058
00D7 0500     F      659             INC     page?047
00D9                 660     ?C0058:
00D9 C3              661             CLR     C
00DA 947F            662             SUBB    A,#07FH
00DC E500     F      663             MOV     A,page?047
00DE 9400            664             SUBB    A,#00H
00E0 5003            665             JNC     $ + 5H
00E2 020000   F      666             LJMP    ?C0003
00E5                 667     ?C0004:
                     668     ; 
                     669     ;       PSCTL = 0;                                                      // movx writes targ
                             et ram
                     670                             ; SOURCE LINE # 114
00E5 E4              671             CLR     A
00E6 F58F            672             MOV     PSCTL,A
                     673     ; 
                     674     ;       FLSCL &= ~0x01;                                         // disable flash writes fro
                             m user sw
                     675                             ; SOURCE LINE # 116
00E8 53B7FE          676             ANL     FLSCL,#0FEH
                     677     ;       EA = EA_save;
                     678                             ; SOURCE LINE # 117
00EB E500     F      679             MOV     A,EA_save?045
00ED 24FF            680             ADD     A,#0FFH
00EF 92AF            681             MOV     EA,C
                     682     ;       PSW = 0;
                     683                             ; SOURCE LINE # 118
00F1 E4              684             CLR     A
00F2 F5D0            685             MOV     PSW,A
                     686     ; 
                     687     ;       SFRPAGE = CONFIG_PAGE;
                     688                             ; SOURCE LINE # 120
00F4 75840F          689             MOV     SFRPAGE,#0FH
                     690     ; 
                     691     ;       // clear the flash - NOTE: cannot use global variables. Must choose max erase pages
                             .
                     692     ;       for (page = 0; page < MAX_NUM_PAGES; page += 8) {
                     693                             ; SOURCE LINE # 123
00F7 F500     F      694             MOV     page?047,A
00F9 F500     F      695             MOV     page?047+01H,A
00FB                 696     ?C0021:
00FB C3              697             CLR     C
00FC E500     F      698             MOV     A,page?047
00FE 9420            699             SUBB    A,#020H
0100 5039            700             JNC     ?C0035
0102                 701     ?C0026:
                     702     ; 
                     703     ; #ifdef SENSOR
                     704     ;               // invert LED every so often
                     705     ;               if (!(page % 64)) LED2 = ~LED2;
                     706     ; #endif
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE    12

                     707     ; 
                     708     ;               // inline dataflash erase block
                     709     ; 
                     710     ;               // wait for Serial Flash to be available
                     711     ;               do {
                     712                             ; SOURCE LINE # 133
                     713     ;                       status = FDL_DataFlash_Read_Status();
                     714                             ; SOURCE LINE # 134
                     715     ;               } while (!(status & STATUS_READY_MASK));
                     716                             ; SOURCE LINE # 135
0102 120000   F      717             LCALL   L?0067
0105 30E7FA          718             JNB     ACC.7,?C0026
                     719     ; 
                     720     ;               DF_CS1 = 0;
                     721                             ; SOURCE LINE # 137
0108 C2F9            722             CLR     DF_CS1
                     723     ;               DFWAIT;
                     724                             ; SOURCE LINE # 138
010A E4              725             CLR     A
010B F500     F      726             MOV     q?042,A
010D F500     F      727             MOV     q?042+01H,A
010F                 728     ?C0030:
010F 0500     F      729             INC     q?042+01H
0111 E500     F      730             MOV     A,q?042+01H
0113 7002            731             JNZ     ?C0059
0115 0500     F      732             INC     q?042
0117                 733     ?C0059:
0117 6440            734             XRL     A,#040H
0119 4500     F      735             ORL     A,q?042
011B 70F2            736             JNZ     ?C0030
011D                 737     ?C0028:
                     738     ; 
                     739     ;               //command
                     740     ;               FDL_xferSPI(BLOCK_ERASE);
                     741                             ; SOURCE LINE # 141
011D 7F50            742             MOV     R7,#050H
                     743     ; 
                     744     ;               // shift out reserved bits and upper bits of page address
                     745     ;               FDL_xferSPI(page >> 6);
                     746                             ; SOURCE LINE # 144
011F 120000   F      747             LCALL   L?0068
0122                 748     ?C0060:
0122 CE              749             XCH     A,R6
0123 C3              750             CLR     C
0124 13              751             RRC     A
0125 CE              752             XCH     A,R6
0126 13              753             RRC     A
0127 D8F9            754             DJNZ    R0,?C0060
                     755     ; 
                     756     ;               // shift out bottom 6 bits of page address and top bits of byte address
                     757     ;               FDL_xferSPI((u08) page << 2);
                     758                             ; SOURCE LINE # 147
                     759     ; 
                     760     ;               // shift out bottom 8 bits of unsigned char address
                     761     ;               FDL_xferSPI(0);
                     762                             ; SOURCE LINE # 150
0129 120000   F      763             LCALL   L?0063
                     764     ; 
                     765     ;               DF_CS1 = 1;
                     766                             ; SOURCE LINE # 152
012C D2F9            767             SETB    DF_CS1
                     768     ; 
                     769     ;               // end of inline function
                     770     ;       } // for
                     771                             ; SOURCE LINE # 155
012E 7408            772             MOV     A,#08H
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE    13

0130 2500     F      773             ADD     A,page?047+01H
0132 F500     F      774             MOV     page?047+01H,A
0134 E4              775             CLR     A
0135 3500     F      776             ADDC    A,page?047
0137 F500     F      777             MOV     page?047,A
0139 80C0            778             SJMP    ?C0021
013B                 779     ?C0035:
                     780     ; 
                     781     ;       DFWAIT;
                     782                             ; SOURCE LINE # 157
013B E4              783             CLR     A
013C F500     F      784             MOV     q?043,A
013E F500     F      785             MOV     q?043+01H,A
0140                 786     ?C0036:
0140 0500     F      787             INC     q?043+01H
0142 E500     F      788             MOV     A,q?043+01H
0144 7002            789             JNZ     ?C0061
0146 0500     F      790             INC     q?043
0148                 791     ?C0061:
0148 6440            792             XRL     A,#040H
014A 4500     F      793             ORL     A,q?043
014C 70F2            794             JNZ     ?C0036
014E                 795     ?C0041:
                     796     ;       
                     797     ;       // wait for Serial Flash to be finished
                     798     ;       do {
                     799                             ; SOURCE LINE # 160
                     800     ;               status = FDL_DataFlash_Read_Status();
                     801                             ; SOURCE LINE # 161
014E 120000   F      802             LCALL   FDL_DataFlash_Read_Status
0151 8F00     F      803             MOV     status?048,R7
                     804     ;       } while (!(status & STATUS_READY_MASK));
                     805                             ; SOURCE LINE # 162
0153 E500     F      806             MOV     A,status?048
0155 30E7F6          807             JNB     ACC.7,?C0041
                     808     ; 
                     809     ;       SFRPAGE = LEGACY_PAGE;
                     810                             ; SOURCE LINE # 164
0158 E4              811             CLR     A
0159 F584            812             MOV     SFRPAGE,A
                     813     ; 
                     814     ;       // pull the reset line to restart everything
                     815     ;       RSTSRC = RSTSRC | 0x01;
                     816                             ; SOURCE LINE # 167
015B 43EF01          817             ORL     RSTSRC,#01H
                     818     ; }
                     819                             ; SOURCE LINE # 168
015E 22              820             RET     
015F                 821     L?0063:
015F FF              822             MOV     R7,A
0160 120000   F      823             LCALL   _FDL_xferSPI
0163 AF00     F      824             MOV     R7,page?047+01H
0165 EF              825             MOV     A,R7
0166 25E0            826             ADD     A,ACC
0168 25E0            827             ADD     A,ACC
016A FF              828             MOV     R7,A
016B 120000   F      829             LCALL   _FDL_xferSPI
016E E4              830             CLR     A
016F FF              831             MOV     R7,A
0170 120000   F      832             LCALL   _FDL_xferSPI
0173 22              833             RET     
0174                 834     L?0064:
0174 FF              835             MOV     R7,A
0175 120000   F      836             LCALL   _FDL_xferSPI
0178 E4              837             CLR     A
0179 FF              838             MOV     R7,A
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE    14

017A 120000   F      839             LCALL   _FDL_xferSPI
017D E4              840             CLR     A
017E 22              841             RET     
017F                 842     L?0067:
017F 120000   F      843             LCALL   FDL_DataFlash_Read_Status
0182 8F00     F      844             MOV     status?048,R7
0184 E500     F      845             MOV     A,status?048
0186 22              846             RET     
0187                 847     L?0068:
0187 120000   F      848             LCALL   _FDL_xferSPI
018A E500     F      849             MOV     A,page?047+01H
018C AE00     F      850             MOV     R6,page?047
018E 7806            851             MOV     R0,#06H
0190 22              852             RET     
                     853     ; END OF _CopytoCodeSpace
                     854     
                     855     ; 
                     856     ; // simultaneously write       and read one unsigned char to SPI (mode 3). Blocking.
                     857     ; u08 FDL_xferSPI (u08 ch) {
                     858     
----                 859             RSEG  ?PR?_FDL_xferSPI?FDL
0000                 860     _FDL_xferSPI:
                     861             USING   0
                     862                             ; SOURCE LINE # 171
                     863     ;---- Variable 'ch?149' assigned to Register 'R7' ----
                     864     ; 
                     865     ;       u08 SFRPAGE_SAVE = SFRPAGE;                     // Save Current SFR page
                     866                             ; SOURCE LINE # 173
                     867     ;---- Variable 'SFRPAGE_SAVE?150' assigned to Register 'R6' ----
0000 AE84            868             MOV     R6,SFRPAGE
                     869     ;       SFRPAGE = SPI0_PAGE;
                     870                             ; SOURCE LINE # 174
0002 E4              871             CLR     A
0003 F584            872             MOV     SFRPAGE,A
                     873     ; 
                     874     ;       SPI0DAT = ch;
                     875                             ; SOURCE LINE # 176
0005 8F9B            876             MOV     SPI0DAT,R7
0007                 877     ?C0043:
                     878     ; 
                     879     ;       // wait for shifting
                     880     ;       while (!SPIF) ;
                     881                             ; SOURCE LINE # 179
0007 30FFFD          882             JNB     SPIF,?C0043
000A                 883     ?C0044:
                     884     ; 
                     885     ;       SPIF = 0;                       // clear the xfer complete flag
                     886                             ; SOURCE LINE # 181
000A C2FF            887             CLR     SPIF
                     888     ; 
                     889     ;       ch = SPI0DAT;
                     890                             ; SOURCE LINE # 183
000C AF9B            891             MOV     R7,SPI0DAT
                     892     ;       
                     893     ;       SFRPAGE = SFRPAGE_SAVE;
                     894                             ; SOURCE LINE # 185
000E 8E84            895             MOV     SFRPAGE,R6
                     896     ; 
                     897     ;       return (ch);
                     898                             ; SOURCE LINE # 187
                     899     ; }
                     900                             ; SOURCE LINE # 188
0010                 901     ?C0045:
0010 22              902             RET     
                     903     ; END OF _FDL_xferSPI
                     904     
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE    15

                     905     ; 
                     906     ; // returns the value of DataFlash Status Register. Non-blocking.
                     907     ; u08 FDL_DataFlash_Read_Status(void) {
                     908     
----                 909             RSEG  ?PR?FDL_DataFlash_Read_Status?FDL
0000                 910     FDL_DataFlash_Read_Status:
                     911             USING   0
                     912                             ; SOURCE LINE # 191
                     913     ;    u08 dat;
                     914     ; 
                     915     ;       DF_CS1 = 0;
                     916                             ; SOURCE LINE # 194
0000 C2F9            917             CLR     DF_CS1
                     918     ;       DFWAIT;
                     919                             ; SOURCE LINE # 195
0002 E4              920             CLR     A
0003 F500     F      921             MOV     q?251,A
0005 F500     F      922             MOV     q?251+01H,A
0007                 923     ?C0049:
0007 0500     F      924             INC     q?251+01H
0009 E500     F      925             MOV     A,q?251+01H
000B 7002            926             JNZ     ?C0062
000D 0500     F      927             INC     q?251
000F                 928     ?C0062:
000F 6440            929             XRL     A,#040H
0011 4500     F      930             ORL     A,q?251
0013 70F2            931             JNZ     ?C0049
0015                 932     ?C0047:
                     933     ; 
                     934     ;       //command
                     935     ;       FDL_xferSPI(STATUS_REGISTER_READ);
                     936                             ; SOURCE LINE # 198
0015 7FD7            937             MOV     R7,#0D7H
0017 120000   F      938             LCALL   _FDL_xferSPI
                     939     ; 
                     940     ;       dat = FDL_xferSPI(0);
                     941                             ; SOURCE LINE # 200
001A E4              942             CLR     A
001B FF              943             MOV     R7,A
001C 120000   F      944             LCALL   _FDL_xferSPI
                     945     ;---- Variable 'dat?252' assigned to Register 'R7' ----
                     946     ; 
                     947     ;       DF_CS1 = 1;
                     948                             ; SOURCE LINE # 202
001F D2F9            949             SETB    DF_CS1
                     950     ;   
                     951     ;    return (dat);
                     952                             ; SOURCE LINE # 204
                     953     ; }
                     954                             ; SOURCE LINE # 205
0021                 955     ?C0052:
0021 22              956             RET     
                     957     ; END OF FDL_DataFlash_Read_Status
                     958     
                     959             END
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE    16

SYMBOL TABLE LISTING
------ ----- -------


N A M E                            T Y P E  V A L U E   ATTRIBUTES

?C0001. . . . . . . . . . . . . .  C ADDR   0022H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0002. . . . . . . . . . . . . .  C ADDR   0042H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0003. . . . . . . . . . . . . .  C ADDR   004FH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0004. . . . . . . . . . . . . .  C ADDR   00E5H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0008. . . . . . . . . . . . . .  C ADDR   0052H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0010. . . . . . . . . . . . . .  C ADDR   006DH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0012. . . . . . . . . . . . . .  C ADDR   005FH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0015. . . . . . . . . . . . . .  C ADDR   0087H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0016. . . . . . . . . . . . . .  C ADDR   00A0H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0018. . . . . . . . . . . . . .  C ADDR   00ACH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0019. . . . . . . . . . . . . .  C ADDR   00CEH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0021. . . . . . . . . . . . . .  C ADDR   00FBH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0026. . . . . . . . . . . . . .  C ADDR   0102H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0028. . . . . . . . . . . . . .  C ADDR   011DH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0030. . . . . . . . . . . . . .  C ADDR   010FH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0035. . . . . . . . . . . . . .  C ADDR   013BH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0036. . . . . . . . . . . . . .  C ADDR   0140H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0041. . . . . . . . . . . . . .  C ADDR   014EH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0043. . . . . . . . . . . . . .  C ADDR   0007H   R   SEG=?PR?_FDL_XFERSPI?FDL
?C0044. . . . . . . . . . . . . .  C ADDR   000AH   R   SEG=?PR?_FDL_XFERSPI?FDL
?C0045. . . . . . . . . . . . . .  C ADDR   0010H   R   SEG=?PR?_FDL_XFERSPI?FDL
?C0047. . . . . . . . . . . . . .  C ADDR   0015H   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
?C0049. . . . . . . . . . . . . .  C ADDR   0007H   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
?C0052. . . . . . . . . . . . . .  C ADDR   0021H   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
?C0053. . . . . . . . . . . . . .  C ADDR   0067H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0054. . . . . . . . . . . . . .  C ADDR   0072H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0055. . . . . . . . . . . . . .  C ADDR   0099H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0056. . . . . . . . . . . . . .  C ADDR   00C6H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0058. . . . . . . . . . . . . .  C ADDR   00D9H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0059. . . . . . . . . . . . . .  C ADDR   0117H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0060. . . . . . . . . . . . . .  C ADDR   0122H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0061. . . . . . . . . . . . . .  C ADDR   0148H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0062. . . . . . . . . . . . . .  C ADDR   000FH   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
?C?CSTPTR . . . . . . . . . . . .  C ADDR   -----       EXT
?C?PLDIIDATA. . . . . . . . . . .  C ADDR   -----       EXT
?DT?FDL_DATAFLASH_READ_STATUS?FDL  D SEG    0002H       REL=UNIT
?DT?_COPYTOCODESPACE?FDL. . . . .  D SEG    000DH       REL=UNIT
?FDL_DATAFLASH_READ_STATUS?BYTE .  D ADDR   0000H   R   SEG=?DT?FDL_DATAFLASH_READ_STATUS?FDL
?PR?FDL . . . . . . . . . . . . .  C SEG    000DH       REL=UNIT
?PR?FDL_DATAFLASH_READ_STATUS?FDL  C SEG    0022H       REL=UNIT
?PR?_COPYTOCODESPACE?FDL. . . . .  C SEG    0191H       REL=UNIT
?PR?_FDL_XFERSPI?FDL. . . . . . .  C SEG    0011H       REL=UNIT
?_COPYTOCODESPACE?BYTE. . . . . .  D ADDR   0000H   R   SEG=?DT?_COPYTOCODESPACE?FDL
A0_DISP . . . . . . . . . . . . .  B ADDR   00C8H.0 A   
AA. . . . . . . . . . . . . . . .  B ADDR   00C0H.2 A   
AC. . . . . . . . . . . . . . . .  B ADDR   00D0H.6 A   
ACC . . . . . . . . . . . . . . .  D ADDR   00E0H   A   
AD0BUSY . . . . . . . . . . . . .  B ADDR   00E8H.4 A   
AD0CM0. . . . . . . . . . . . . .  B ADDR   00E8H.2 A   
AD0CM1. . . . . . . . . . . . . .  B ADDR   00E8H.3 A   
AD0EN . . . . . . . . . . . . . .  B ADDR   00E8H.7 A   
AD0INT. . . . . . . . . . . . . .  B ADDR   00E8H.5 A   
AD0LJST . . . . . . . . . . . . .  B ADDR   00E8H.0 A   
AD0TM . . . . . . . . . . . . . .  B ADDR   00E8H.6 A   
AD0WINT . . . . . . . . . . . . .  B ADDR   00E8H.1 A   
AD2BUSY . . . . . . . . . . . . .  B ADDR   00E8H.4 A   
AD2CM0. . . . . . . . . . . . . .  B ADDR   00E8H.1 A   
AD2CM1. . . . . . . . . . . . . .  B ADDR   00E8H.2 A   
AD2CM2. . . . . . . . . . . . . .  B ADDR   00E8H.3 A   
AD2EN . . . . . . . . . . . . . .  B ADDR   00E8H.7 A   
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE    17

AD2INT. . . . . . . . . . . . . .  B ADDR   00E8H.5 A   
AD2TM . . . . . . . . . . . . . .  B ADDR   00E8H.6 A   
AD2WINT . . . . . . . . . . . . .  B ADDR   00E8H.0 A   
ADC0. . . . . . . . . . . . . . .  D ADDR   00BEH   A   
ADC0CF. . . . . . . . . . . . . .  D ADDR   00BCH   A   
ADC0CN. . . . . . . . . . . . . .  D ADDR   00E8H   A   
ADC0GT. . . . . . . . . . . . . .  D ADDR   00C4H   A   
ADC0GTH . . . . . . . . . . . . .  D ADDR   00C5H   A   
ADC0GTL . . . . . . . . . . . . .  D ADDR   00C4H   A   
ADC0H . . . . . . . . . . . . . .  D ADDR   00BFH   A   
ADC0L . . . . . . . . . . . . . .  D ADDR   00BEH   A   
ADC0LT. . . . . . . . . . . . . .  D ADDR   00C6H   A   
ADC0LTH . . . . . . . . . . . . .  D ADDR   00C7H   A   
ADC0LTL . . . . . . . . . . . . .  D ADDR   00C6H   A   
ADC2. . . . . . . . . . . . . . .  D ADDR   00BEH   A   
ADC2CF. . . . . . . . . . . . . .  D ADDR   00BCH   A   
ADC2CN. . . . . . . . . . . . . .  D ADDR   00E8H   A   
ADC2GT. . . . . . . . . . . . . .  D ADDR   00C4H   A   
ADC2LT. . . . . . . . . . . . . .  D ADDR   00C6H   A   
AMX0CF. . . . . . . . . . . . . .  D ADDR   00BAH   A   
AMX0SL. . . . . . . . . . . . . .  D ADDR   00BBH   A   
AMX2CF. . . . . . . . . . . . . .  D ADDR   00BAH   A   
AMX2SL. . . . . . . . . . . . . .  D ADDR   00BBH   A   
AR2 . . . . . . . . . . . . . . .  D ADDR   0002H   A   
B . . . . . . . . . . . . . . . .  D ADDR   00F0H   A   
BACKLITEDS. . . . . . . . . . . .  B ADDR   00F8H.6 A   
BACKLITEKB. . . . . . . . . . . .  B ADDR   00F8H.5 A   
BACK_SW . . . . . . . . . . . . .  B ADDR   00D8H.3 A   
BUSY. . . . . . . . . . . . . . .  B ADDR   00C0H.7 A   
CCF0. . . . . . . . . . . . . . .  B ADDR   00D8H.0 A   
CCF1. . . . . . . . . . . . . . .  B ADDR   00D8H.1 A   
CCF2. . . . . . . . . . . . . . .  B ADDR   00D8H.2 A   
CCF3. . . . . . . . . . . . . . .  B ADDR   00D8H.3 A   
CCF4. . . . . . . . . . . . . . .  B ADDR   00D8H.4 A   
CCF5. . . . . . . . . . . . . . .  B ADDR   00D8H.5 A   
CCH0CN. . . . . . . . . . . . . .  D ADDR   00A1H   A   
CCH0LC. . . . . . . . . . . . . .  D ADDR   00A3H   A   
CCH0MA. . . . . . . . . . . . . .  D ADDR   009AH   A   
CCH0TN. . . . . . . . . . . . . .  D ADDR   00A2H   A   
CF. . . . . . . . . . . . . . . .  B ADDR   00D8H.7 A   
CKCON . . . . . . . . . . . . . .  D ADDR   008EH   A   
CLKSEL. . . . . . . . . . . . . .  D ADDR   0097H   A   
COM0041 . . . . . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?FDL
CP0EN . . . . . . . . . . . . . .  B ADDR   0088H.7 A   
CP0FIF. . . . . . . . . . . . . .  B ADDR   0088H.4 A   
CP0HYN0 . . . . . . . . . . . . .  B ADDR   0088H.0 A   
CP0HYN1 . . . . . . . . . . . . .  B ADDR   0088H.1 A   
CP0HYP0 . . . . . . . . . . . . .  B ADDR   0088H.2 A   
CP0HYP1 . . . . . . . . . . . . .  B ADDR   0088H.3 A   
CP0OUT. . . . . . . . . . . . . .  B ADDR   0088H.6 A   
CP0RIF. . . . . . . . . . . . . .  B ADDR   0088H.5 A   
CP1EN . . . . . . . . . . . . . .  B ADDR   0088H.7 A   
CP1FIF. . . . . . . . . . . . . .  B ADDR   0088H.4 A   
CP1HYN0 . . . . . . . . . . . . .  B ADDR   0088H.0 A   
CP1HYN1 . . . . . . . . . . . . .  B ADDR   0088H.1 A   
CP1HYP0 . . . . . . . . . . . . .  B ADDR   0088H.2 A   
CP1HYP1 . . . . . . . . . . . . .  B ADDR   0088H.3 A   
CP1OUT. . . . . . . . . . . . . .  B ADDR   0088H.6 A   
CP1RIF. . . . . . . . . . . . . .  B ADDR   0088H.5 A   
CPRL2 . . . . . . . . . . . . . .  B ADDR   00C8H.0 A   
CPRL3 . . . . . . . . . . . . . .  B ADDR   00C8H.0 A   
CPRL4 . . . . . . . . . . . . . .  B ADDR   00C8H.0 A   
CPT0CN. . . . . . . . . . . . . .  D ADDR   0088H   A   
CPT0MD. . . . . . . . . . . . . .  D ADDR   0089H   A   
CPT1CN. . . . . . . . . . . . . .  D ADDR   0088H   A   
CPT1MD. . . . . . . . . . . . . .  D ADDR   0089H   A   
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE    18

CR. . . . . . . . . . . . . . . .  B ADDR   00D8H.6 A   
CT2 . . . . . . . . . . . . . . .  B ADDR   00C8H.1 A   
CT3 . . . . . . . . . . . . . . .  B ADDR   00C8H.1 A   
CT4 . . . . . . . . . . . . . . .  B ADDR   00C8H.1 A   
CY. . . . . . . . . . . . . . . .  B ADDR   00D0H.7 A   
DAC0. . . . . . . . . . . . . . .  D ADDR   00D2H   A   
DAC0CN. . . . . . . . . . . . . .  D ADDR   00D4H   A   
DAC0H . . . . . . . . . . . . . .  D ADDR   00D3H   A   
DAC0L . . . . . . . . . . . . . .  D ADDR   00D2H   A   
DAC1. . . . . . . . . . . . . . .  D ADDR   00D2H   A   
DAC1CN. . . . . . . . . . . . . .  D ADDR   00D4H   A   
DAC1H . . . . . . . . . . . . . .  D ADDR   00D3H   A   
DAC1L . . . . . . . . . . . . . .  D ADDR   00D2H   A   
DF_CS1. . . . . . . . . . . . . .  B ADDR   00F8H.1 A   
DF_CS2. . . . . . . . . . . . . .  B ADDR   00F8H.3 A   
DF_RST. . . . . . . . . . . . . .  B ADDR   00F8H.2 A   
DF_WP . . . . . . . . . . . . . .  B ADDR   00F8H.0 A   
DN_SW . . . . . . . . . . . . . .  B ADDR   00D8H.4 A   
DP. . . . . . . . . . . . . . . .  D ADDR   0082H   A   
DPH . . . . . . . . . . . . . . .  D ADDR   0083H   A   
DPL . . . . . . . . . . . . . . .  D ADDR   0082H   A   
E1_DISP . . . . . . . . . . . . .  B ADDR   00C8H.1 A   
E2_DISP . . . . . . . . . . . . .  B ADDR   00C8H.2 A   
EA. . . . . . . . . . . . . . . .  B ADDR   00A8H.7 A   
EA_SAVE?045 . . . . . . . . . . .  D ADDR   0005H   R   SEG=?DT?_COPYTOCODESPACE?FDL
EIE1. . . . . . . . . . . . . . .  D ADDR   00E6H   A   
EIE2. . . . . . . . . . . . . . .  D ADDR   00E7H   A   
EIP1. . . . . . . . . . . . . . .  D ADDR   00F6H   A   
EIP2. . . . . . . . . . . . . . .  D ADDR   00F7H   A   
EMI0CF. . . . . . . . . . . . . .  D ADDR   00A3H   A   
EMI0CN. . . . . . . . . . . . . .  D ADDR   00A2H   A   
EMI0TC. . . . . . . . . . . . . .  D ADDR   00A1H   A   
EN3VDISP. . . . . . . . . . . . .  B ADDR   00F8H.3 A   
ENSMB . . . . . . . . . . . . . .  B ADDR   00C0H.6 A   
ES0 . . . . . . . . . . . . . . .  B ADDR   00A8H.4 A   
ET0 . . . . . . . . . . . . . . .  B ADDR   00A8H.1 A   
ET1 . . . . . . . . . . . . . . .  B ADDR   00A8H.3 A   
ET2 . . . . . . . . . . . . . . .  B ADDR   00A8H.5 A   
EX0 . . . . . . . . . . . . . . .  B ADDR   00A8H.0 A   
EX1 . . . . . . . . . . . . . . .  B ADDR   00A8H.2 A   
EXEN2 . . . . . . . . . . . . . .  B ADDR   00C8H.3 A   
EXEN3 . . . . . . . . . . . . . .  B ADDR   00C8H.3 A   
EXEN4 . . . . . . . . . . . . . .  B ADDR   00C8H.3 A   
EXF2. . . . . . . . . . . . . . .  B ADDR   00C8H.6 A   
EXF3. . . . . . . . . . . . . . .  B ADDR   00C8H.6 A   
EXF4. . . . . . . . . . . . . . .  B ADDR   00C8H.6 A   
F0. . . . . . . . . . . . . . . .  B ADDR   00D0H.5 A   
F1. . . . . . . . . . . . . . . .  B ADDR   00D0H.1 A   
FDL . . . . . . . . . . . . . . .  N NUMB   -----       
FDL_DATAFLASH_READ_STATUS . . . .  C ADDR   0000H   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
FLACL . . . . . . . . . . . . . .  D ADDR   00B7H   A   
FLASHPAGE . . . . . . . . . . . .  X ADDR   -----       EXT
FLHBUSY . . . . . . . . . . . . .  B ADDR   0088H.0 A   
FLSCL . . . . . . . . . . . . . .  D ADDR   00B7H   A   
FLSTAT. . . . . . . . . . . . . .  D ADDR   0088H   A   
I?046 . . . . . . . . . . . . . .  D ADDR   0006H   R   SEG=?DT?_COPYTOCODESPACE?FDL
IE. . . . . . . . . . . . . . . .  D ADDR   00A8H   A   
IE0 . . . . . . . . . . . . . . .  B ADDR   0088H.1 A   
IE1 . . . . . . . . . . . . . . .  B ADDR   0088H.3 A   
IP. . . . . . . . . . . . . . . .  D ADDR   00B8H   A   
IT0 . . . . . . . . . . . . . . .  B ADDR   0088H.0 A   
IT1 . . . . . . . . . . . . . . .  B ADDR   0088H.2 A   
L?0063. . . . . . . . . . . . . .  C ADDR   015FH   R   SEG=?PR?_COPYTOCODESPACE?FDL
L?0064. . . . . . . . . . . . . .  C ADDR   0174H   R   SEG=?PR?_COPYTOCODESPACE?FDL
L?0066. . . . . . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?FDL
L?0067. . . . . . . . . . . . . .  C ADDR   017FH   R   SEG=?PR?_COPYTOCODESPACE?FDL
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE    19

L?0068. . . . . . . . . . . . . .  C ADDR   0187H   R   SEG=?PR?_COPYTOCODESPACE?FDL
LASTPAGE?040. . . . . . . . . . .  D ADDR   0000H   R   SEG=?DT?_COPYTOCODESPACE?FDL
LITE_SW . . . . . . . . . . . . .  B ADDR   00D8H.0 A   
MAC0ACC0. . . . . . . . . . . . .  D ADDR   0093H   A   
MAC0ACC1. . . . . . . . . . . . .  D ADDR   0094H   A   
MAC0ACC2. . . . . . . . . . . . .  D ADDR   0095H   A   
MAC0ACC3. . . . . . . . . . . . .  D ADDR   0096H   A   
MAC0AH. . . . . . . . . . . . . .  D ADDR   00C2H   A   
MAC0AL. . . . . . . . . . . . . .  D ADDR   00C1H   A   
MAC0BH. . . . . . . . . . . . . .  D ADDR   0092H   A   
MAC0BL. . . . . . . . . . . . . .  D ADDR   0091H   A   
MAC0CF. . . . . . . . . . . . . .  D ADDR   00C3H   A   
MAC0HO. . . . . . . . . . . . . .  B ADDR   00C0H.3 A   
MAC0N . . . . . . . . . . . . . .  B ADDR   00C0H.0 A   
MAC0OVR . . . . . . . . . . . . .  D ADDR   0097H   A   
MAC0RNDH. . . . . . . . . . . . .  D ADDR   00CFH   A   
MAC0RNDL. . . . . . . . . . . . .  D ADDR   00CEH   A   
MAC0SO. . . . . . . . . . . . . .  B ADDR   00C0H.1 A   
MAC0STA . . . . . . . . . . . . .  D ADDR   00C0H   A   
MAC0Z . . . . . . . . . . . . . .  B ADDR   00C0H.2 A   
MCE1. . . . . . . . . . . . . . .  B ADDR   0098H.5 A   
MODF. . . . . . . . . . . . . . .  B ADDR   00F8H.5 A   
NSSMD0. . . . . . . . . . . . . .  B ADDR   00F8H.2 A   
NSSMD1. . . . . . . . . . . . . .  B ADDR   00F8H.3 A   
ONOFF_SW. . . . . . . . . . . . .  B ADDR   00D8H.6 A   
OSCICL. . . . . . . . . . . . . .  D ADDR   008BH   A   
OSCICN. . . . . . . . . . . . . .  D ADDR   008AH   A   
OSCXCN. . . . . . . . . . . . . .  D ADDR   008CH   A   
OV. . . . . . . . . . . . . . . .  B ADDR   00D0H.2 A   
P . . . . . . . . . . . . . . . .  B ADDR   00D0H.0 A   
P0. . . . . . . . . . . . . . . .  D ADDR   0080H   A   
P0MDOUT . . . . . . . . . . . . .  D ADDR   00A4H   A   
P1. . . . . . . . . . . . . . . .  D ADDR   0090H   A   
P1MDIN. . . . . . . . . . . . . .  D ADDR   00ADH   A   
P1MDOUT . . . . . . . . . . . . .  D ADDR   00A5H   A   
P2. . . . . . . . . . . . . . . .  D ADDR   00A0H   A   
P2MDOUT . . . . . . . . . . . . .  D ADDR   00A6H   A   
P3. . . . . . . . . . . . . . . .  D ADDR   00B0H   A   
P3MDOUT . . . . . . . . . . . . .  D ADDR   00A7H   A   
P4. . . . . . . . . . . . . . . .  D ADDR   00C8H   A   
P4MDOUT . . . . . . . . . . . . .  D ADDR   009CH   A   
P5. . . . . . . . . . . . . . . .  D ADDR   00D8H   A   
P5MDOUT . . . . . . . . . . . . .  D ADDR   009DH   A   
P6. . . . . . . . . . . . . . . .  D ADDR   00E8H   A   
P6MDOUT . . . . . . . . . . . . .  D ADDR   009EH   A   
P7. . . . . . . . . . . . . . . .  D ADDR   00F8H   A   
P7MDOUT . . . . . . . . . . . . .  D ADDR   009FH   A   
PAGE?047. . . . . . . . . . . . .  D ADDR   0008H   R   SEG=?DT?_COPYTOCODESPACE?FDL
PCA0. . . . . . . . . . . . . . .  D ADDR   00F9H   A   
PCA0CN. . . . . . . . . . . . . .  D ADDR   00D8H   A   
PCA0CP0 . . . . . . . . . . . . .  D ADDR   00FBH   A   
PCA0CP1 . . . . . . . . . . . . .  D ADDR   00FDH   A   
PCA0CP2 . . . . . . . . . . . . .  D ADDR   00E9H   A   
PCA0CP3 . . . . . . . . . . . . .  D ADDR   00EBH   A   
PCA0CP4 . . . . . . . . . . . . .  D ADDR   00EDH   A   
PCA0CP5 . . . . . . . . . . . . .  D ADDR   00E1H   A   
PCA0CPH0. . . . . . . . . . . . .  D ADDR   00FCH   A   
PCA0CPH1. . . . . . . . . . . . .  D ADDR   00FEH   A   
PCA0CPH2. . . . . . . . . . . . .  D ADDR   00EAH   A   
PCA0CPH3. . . . . . . . . . . . .  D ADDR   00ECH   A   
PCA0CPH4. . . . . . . . . . . . .  D ADDR   00EEH   A   
PCA0CPH5. . . . . . . . . . . . .  D ADDR   00E2H   A   
PCA0CPL0. . . . . . . . . . . . .  D ADDR   00FBH   A   
PCA0CPL1. . . . . . . . . . . . .  D ADDR   00FDH   A   
PCA0CPL2. . . . . . . . . . . . .  D ADDR   00E9H   A   
PCA0CPL3. . . . . . . . . . . . .  D ADDR   00EBH   A   
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE    20

PCA0CPL4. . . . . . . . . . . . .  D ADDR   00EDH   A   
PCA0CPL5. . . . . . . . . . . . .  D ADDR   00E1H   A   
PCA0CPM0. . . . . . . . . . . . .  D ADDR   00DAH   A   
PCA0CPM1. . . . . . . . . . . . .  D ADDR   00DBH   A   
PCA0CPM2. . . . . . . . . . . . .  D ADDR   00DCH   A   
PCA0CPM3. . . . . . . . . . . . .  D ADDR   00DDH   A   
PCA0CPM4. . . . . . . . . . . . .  D ADDR   00DEH   A   
PCA0CPM5. . . . . . . . . . . . .  D ADDR   00DFH   A   
PCA0H . . . . . . . . . . . . . .  D ADDR   00FAH   A   
PCA0L . . . . . . . . . . . . . .  D ADDR   00F9H   A   
PCA0MD. . . . . . . . . . . . . .  D ADDR   00D9H   A   
PCON. . . . . . . . . . . . . . .  D ADDR   0087H   A   
PLL0CN. . . . . . . . . . . . . .  D ADDR   0089H   A   
PLL0DIV . . . . . . . . . . . . .  D ADDR   008DH   A   
PLL0FLT . . . . . . . . . . . . .  D ADDR   008FH   A   
PLL0MUL . . . . . . . . . . . . .  D ADDR   008EH   A   
PS. . . . . . . . . . . . . . . .  B ADDR   00B8H.4 A   
PSBANK. . . . . . . . . . . . . .  D ADDR   00B1H   A   
PSCTL . . . . . . . . . . . . . .  D ADDR   008FH   A   
PSW . . . . . . . . . . . . . . .  D ADDR   00D0H   A   
PT0 . . . . . . . . . . . . . . .  B ADDR   00B8H.1 A   
PT1 . . . . . . . . . . . . . . .  B ADDR   00B8H.3 A   
PT2 . . . . . . . . . . . . . . .  B ADDR   00B8H.5 A   
PWRITE?044. . . . . . . . . . . .  D ADDR   0002H   R   SEG=?DT?_COPYTOCODESPACE?FDL
PX0 . . . . . . . . . . . . . . .  B ADDR   00B8H.0 A   
PX1 . . . . . . . . . . . . . . .  B ADDR   00B8H.2 A   
Q?041 . . . . . . . . . . . . . .  D ADDR   000BH   R   SEG=?DT?_COPYTOCODESPACE?FDL
Q?042 . . . . . . . . . . . . . .  D ADDR   000BH   R   SEG=?DT?_COPYTOCODESPACE?FDL
Q?043 . . . . . . . . . . . . . .  D ADDR   000BH   R   SEG=?DT?_COPYTOCODESPACE?FDL
Q?251 . . . . . . . . . . . . . .  D ADDR   0000H   R   SEG=?DT?FDL_DATAFLASH_READ_STATUS?FDL
RB80. . . . . . . . . . . . . . .  B ADDR   0098H.2 A   
RB81. . . . . . . . . . . . . . .  B ADDR   0098H.2 A   
RCAP2 . . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP2H. . . . . . . . . . . . . .  D ADDR   00CBH   A   
RCAP2L. . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP3 . . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP3H. . . . . . . . . . . . . .  D ADDR   00CBH   A   
RCAP3L. . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP4 . . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP4H. . . . . . . . . . . . . .  D ADDR   00CBH   A   
RCAP4L. . . . . . . . . . . . . .  D ADDR   00CAH   A   
REF0CN. . . . . . . . . . . . . .  D ADDR   00D1H   A   
REN0. . . . . . . . . . . . . . .  B ADDR   0098H.4 A   
REN1. . . . . . . . . . . . . . .  B ADDR   0098H.4 A   
RI0 . . . . . . . . . . . . . . .  B ADDR   0098H.0 A   
RI1 . . . . . . . . . . . . . . .  B ADDR   0098H.0 A   
RS0 . . . . . . . . . . . . . . .  B ADDR   00D0H.3 A   
RS1 . . . . . . . . . . . . . . .  B ADDR   00D0H.4 A   
RSTSRC. . . . . . . . . . . . . .  D ADDR   00EFH   A   
RST_DISP. . . . . . . . . . . . .  B ADDR   00C8H.4 A   
RW_DISP . . . . . . . . . . . . .  B ADDR   00C8H.3 A   
RXOVRN. . . . . . . . . . . . . .  B ADDR   00F8H.4 A   
S1MODE. . . . . . . . . . . . . .  B ADDR   0098H.7 A   
SADDR0. . . . . . . . . . . . . .  D ADDR   00A9H   A   
SADEN0. . . . . . . . . . . . . .  D ADDR   00B9H   A   
SBUF0 . . . . . . . . . . . . . .  D ADDR   0099H   A   
SBUF1 . . . . . . . . . . . . . .  D ADDR   0099H   A   
SCON0 . . . . . . . . . . . . . .  D ADDR   0098H   A   
SCON1 . . . . . . . . . . . . . .  D ADDR   0098H   A   
SEL_SW. . . . . . . . . . . . . .  B ADDR   00D8H.1 A   
SFRLAST . . . . . . . . . . . . .  D ADDR   0086H   A   
SFRNEXT . . . . . . . . . . . . .  D ADDR   0085H   A   
SFRPAGE . . . . . . . . . . . . .  D ADDR   0084H   A   
SFRPGCN . . . . . . . . . . . . .  D ADDR   0096H   A   
SI. . . . . . . . . . . . . . . .  B ADDR   00C0H.3 A   
SM00. . . . . . . . . . . . . . .  B ADDR   0098H.7 A   
A51 MACRO ASSEMBLER  FDL                                                                  11/23/2014 20:47:18 PAGE    21

SM10. . . . . . . . . . . . . . .  B ADDR   0098H.6 A   
SM20. . . . . . . . . . . . . . .  B ADDR   0098H.5 A   
SMB0ADR . . . . . . . . . . . . .  D ADDR   00C3H   A   
SMB0CN. . . . . . . . . . . . . .  D ADDR   00C0H   A   
SMB0CR. . . . . . . . . . . . . .  D ADDR   00CFH   A   
SMB0DAT . . . . . . . . . . . . .  D ADDR   00C2H   A   
SMB0STA . . . . . . . . . . . . .  D ADDR   00C1H   A   
SMBFTE. . . . . . . . . . . . . .  B ADDR   00C0H.1 A   
SMBTOE. . . . . . . . . . . . . .  B ADDR   00C0H.0 A   
SP. . . . . . . . . . . . . . . .  D ADDR   0081H   A   
SPI0CFG . . . . . . . . . . . . .  D ADDR   009AH   A   
SPI0CKR . . . . . . . . . . . . .  D ADDR   009DH   A   
SPI0CN. . . . . . . . . . . . . .  D ADDR   00F8H   A   
SPI0DAT . . . . . . . . . . . . .  D ADDR   009BH   A   
SPIEN . . . . . . . . . . . . . .  B ADDR   00F8H.0 A   
SPIF. . . . . . . . . . . . . . .  B ADDR   00F8H.7 A   
SSTA0 . . . . . . . . . . . . . .  D ADDR   0091H   A   
STA . . . . . . . . . . . . . . .  B ADDR   00C0H.5 A   
STATUS?048. . . . . . . . . . . .  D ADDR   000AH   R   SEG=?DT?_COPYTOCODESPACE?FDL
STO . . . . . . . . . . . . . . .  B ADDR   00C0H.4 A   
TB80. . . . . . . . . . . . . . .  B ADDR   0098H.3 A   
TB81. . . . . . . . . . . . . . .  B ADDR   0098H.3 A   
TCON. . . . . . . . . . . . . . .  D ADDR   0088H   A   
TF0 . . . . . . . . . . . . . . .  B ADDR   0088H.5 A   
TF1 . . . . . . . . . . . . . . .  B ADDR   0088H.7 A   
TF2 . . . . . . . . . . . . . . .  B ADDR   00C8H.7 A   
TF3 . . . . . . . . . . . . . . .  B ADDR   00C8H.7 A   
TF4 . . . . . . . . . . . . . . .  B ADDR   00C8H.7 A   
TH0 . . . . . . . . . . . . . . .  D ADDR   008CH   A   
TH1 . . . . . . . . . . . . . . .  D ADDR   008DH   A   
TI0 . . . . . . . . . . . . . . .  B ADDR   0098H.1 A   
TI1 . . . . . . . . . . . . . . .  B ADDR   0098H.1 A   
TL0 . . . . . . . . . . . . . . .  D ADDR   008AH   A   
TL1 . . . . . . . . . . . . . . .  D ADDR   008BH   A   
TMOD. . . . . . . . . . . . . . .  D ADDR   0089H   A   
TMR2. . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR2CF. . . . . . . . . . . . . .  D ADDR   00C9H   A   
TMR2CN. . . . . . . . . . . . . .  D ADDR   00C8H   A   
TMR2H . . . . . . . . . . . . . .  D ADDR   00CDH   A   
TMR2L . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR3. . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR3CF. . . . . . . . . . . . . .  D ADDR   00C9H   A   
TMR3CN. . . . . . . . . . . . . .  D ADDR   00C8H   A   
TMR3H . . . . . . . . . . . . . .  D ADDR   00CDH   A   
TMR3L . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR4. . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR4CF. . . . . . . . . . . . . .  D ADDR   00C9H   A   
TMR4CN. . . . . . . . . . . . . .  D ADDR   00C8H   A   
TMR4H . . . . . . . . . . . . . .  D ADDR   00CDH   A   
TMR4L . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TR0 . . . . . . . . . . . . . . .  B ADDR   0088H.4 A   
TR1 . . . . . . . . . . . . . . .  B ADDR   0088H.6 A   
TR2 . . . . . . . . . . . . . . .  B ADDR   00C8H.2 A   
TR3 . . . . . . . . . . . . . . .  B ADDR   00C8H.2 A   
TR4 . . . . . . . . . . . . . . .  B ADDR   00C8H.2 A   
TXBMT . . . . . . . . . . . . . .  B ADDR   00F8H.1 A   
UP_SW . . . . . . . . . . . . . .  B ADDR   00D8H.2 A   
USB_PRESENT . . . . . . . . . . .  B ADDR   00B0H.4 A   
WCOL. . . . . . . . . . . . . . .  B ADDR   00F8H.6 A   
WDTCN . . . . . . . . . . . . . .  D ADDR   00FFH   A   
XBR0. . . . . . . . . . . . . . .  D ADDR   00E1H   A   
XBR1. . . . . . . . . . . . . . .  D ADDR   00E2H   A   
XBR2. . . . . . . . . . . . . . .  D ADDR   00E3H   A   
_COPYTOCODESPACE. . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_COPYTOCODESPACE?FDL
_FDL_XFERSPI. . . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_FDL_XFERSPI?FDL


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
