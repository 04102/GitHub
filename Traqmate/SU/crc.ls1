A51 MACRO ASSEMBLER  CRC                                                                  01/05/2016 18:47:25 PAGE     1


MACRO ASSEMBLER A51 V8.02b
OBJECT MODULE PLACED IN .\crc.OBJ
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\A51.EXE .\crc.src PR(.\crc.ls1) EP DEBUG

LOC  OBJ            LINE     SOURCE

                       1     ; .\crc.SRC generated from: ..\CommonFiles\crc.c
                       2     ; COMPILER INVOKED BY:
                       3     ;        C:\Keil\C51\BIN\C51.EXE ..\CommonFiles\crc.c OPTIMIZE(SIZE) BROWSE MDU_F120 INCDIR
                             (..\..\C51\INC\;..\CommonFiles\;..\SU\) DB OE DEFINE(SENSOR,EXTCLK6,NODEBUG,UBLOX,DISPLAYAT
                             TACHED) DEBUG OBJECTEXTEND PRINT(.\crc.lst) SRC(.\crc.SRC)
                       4     
                       5     
                       6     NAME    CRC
                       7     
                       8     ?PR?_crc16?CRC       SEGMENT CODE 
                       9     ?DT?_crc16?CRC       SEGMENT DATA OVERLAYABLE 
                      10             EXTRN   CODE (crc16_table)
                      11             EXTRN   CODE (?C?PLDIIDATA)
                      12             EXTRN   CODE (?C?CLDPTR)
                      13             PUBLIC  _crc16
                      14     
----                  15             RSEG  ?DT?_crc16?CRC
0000                  16     ?_crc16?BYTE:
0000                  17               p?042:   DS   3
0003                  18             ORG  3
0003                  19             lim?043:   DS   3
0006                  20             ORG  6
0006                  21             crc?044:   DS   2
                      22     ; // Part of traqmate.c
                      23     ; // 3/10/2004
                      24     ; // Author: BBoyer
                      25     ; //
                      26     ; // This file contains the crc calculation routines
                      27     ; //
                      28     ; 
                      29     ; /* 
                      30     ;       The following function calculates a 16 bit CRC on the 
                      31     ;       data pointed to by and over the number of bytes specified.
                      32     ;       The value of the CRC is returned.
                      33     ; */
                      34     ; 
                      35     ; extern code crc16_table[];
                      36     ; 
                      37     ; /* crc_calc() -- calculate cumulative crc-16 for buffer */
                      38     ; unsigned int crc16(unsigned char *buf, unsigned int nbytes)
                      39     
----                  40             RSEG  ?PR?_crc16?CRC
0000                  41     _crc16:
                      42             USING   0
                      43                             ; SOURCE LINE # 17
                      44     ;---- Variable 'nbytes?041' assigned to Register 'R4/R5' ----
                      45     ;---- Variable 'buf?040' assigned to Register 'R1/R2/R3' ----
                      46     ; {
                      47                             ; SOURCE LINE # 18
                      48     ;       unsigned char *p, *lim;
                      49     ;       unsigned int crc;
                      50     ; 
                      51     ;       p = (unsigned char *)buf;
                      52                             ; SOURCE LINE # 22
0000 8B00     F       53             MOV     p?042,R3
0002 8A00     F       54             MOV     p?042+01H,R2
0004 8900     F       55             MOV     p?042+02H,R1
                      56     ;       lim = p + nbytes;
A51 MACRO ASSEMBLER  CRC                                                                  01/05/2016 18:47:25 PAGE     2

                      57                             ; SOURCE LINE # 23
0006 E9               58             MOV     A,R1
0007 2D               59             ADD     A,R5
0008 F9               60             MOV     R1,A
0009 EA               61             MOV     A,R2
000A 3C               62             ADDC    A,R4
000B 8B00     F       63             MOV     lim?043,R3
000D F500     F       64             MOV     lim?043+01H,A
000F 8900     F       65             MOV     lim?043+02H,R1
                      66     ;       crc = 0;
                      67                             ; SOURCE LINE # 24
0011 E4               68             CLR     A
0012 F500     F       69             MOV     crc?044,A
0014 F500     F       70             MOV     crc?044+01H,A
0016                  71     ?C0001:
                      72     ;       while (p < lim) {
                      73                             ; SOURCE LINE # 25
0016 C3               74             CLR     C
0017 850083   F       75             MOV     DPH,lim?043+01H
001A 850082   F       76             MOV     DPL,lim?043+02H
001D E500     F       77             MOV     A,p?042+02H
001F 9582             78             SUBB    A,DPL
0021 E500     F       79             MOV     A,p?042+01H
0023 9583             80             SUBB    A,DPH
0025                  81     ?C0004:
0025 502F             82             JNC     ?C0002
                      83     ;               crc = (crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ *p++];
                      84                             ; SOURCE LINE # 26
0027 7800     F       85             MOV     R0,#LOW (p?042)
0029 E4               86             CLR     A
002A 75F001           87             MOV     B,#01H
002D 120000   F       88             LCALL   ?C?PLDIIDATA
0030 120000   F       89             LCALL   ?C?CLDPTR
0033 FF               90             MOV     R7,A
0034 E500     F       91             MOV     A,crc?044+01H
0036 6F               92             XRL     A,R7
0037 25E0             93             ADD     A,ACC
0039 FF               94             MOV     R7,A
003A E4               95             CLR     A
003B 33               96             RLC     A
003C FE               97             MOV     R6,A
003D 7400     F       98             MOV     A,#LOW (crc16_table)
003F 2F               99             ADD     A,R7
0040 F582            100             MOV     DPL,A
0042 7400     F      101             MOV     A,#HIGH (crc16_table)
0044 3E              102             ADDC    A,R6
0045 F583            103             MOV     DPH,A
0047 E500     F      104             MOV     A,crc?044
0049 FF              105             MOV     R7,A
004A E4              106             CLR     A
004B 93              107             MOVC    A,@A+DPTR
004C F500     F      108             MOV     crc?044,A
004E 7401            109             MOV     A,#01H
0050 93              110             MOVC    A,@A+DPTR
0051 6F              111             XRL     A,R7
0052 F500     F      112             MOV     crc?044+01H,A
                     113     ;       }
                     114                             ; SOURCE LINE # 27
0054 80C0            115             SJMP    ?C0001
0056                 116     ?C0002:
                     117     ;       return crc;
                     118                             ; SOURCE LINE # 28
0056 AE00     F      119             MOV     R6,crc?044
0058 AF00     F      120             MOV     R7,crc?044+01H
                     121     ; }
                     122                             ; SOURCE LINE # 29
A51 MACRO ASSEMBLER  CRC                                                                  01/05/2016 18:47:25 PAGE     3

005A                 123     ?C0003:
005A 22              124             RET     
                     125     ; END OF _crc16
                     126     
                     127             END
A51 MACRO ASSEMBLER  CRC                                                                  01/05/2016 18:47:25 PAGE     4

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

?C0001 . . . . . .  C ADDR   0016H   R   SEG=?PR?_CRC16?CRC
?C0002 . . . . . .  C ADDR   0056H   R   SEG=?PR?_CRC16?CRC
?C0003 . . . . . .  C ADDR   005AH   R   SEG=?PR?_CRC16?CRC
?C0004 . . . . . .  C ADDR   0025H   R   SEG=?PR?_CRC16?CRC
?C?CLDPTR. . . . .  C ADDR   -----       EXT
?C?PLDIIDATA . . .  C ADDR   -----       EXT
?DT?_CRC16?CRC . .  D SEG    0008H       REL=UNIT
?PR?_CRC16?CRC . .  C SEG    005BH       REL=UNIT
?_CRC16?BYTE . . .  D ADDR   0000H   R   SEG=?DT?_CRC16?CRC
ACC. . . . . . . .  D ADDR   00E0H   A   
B. . . . . . . . .  D ADDR   00F0H   A   
CRC. . . . . . . .  N NUMB   -----       
CRC16_TABLE. . . .  C ADDR   -----       EXT
CRC?044. . . . . .  D ADDR   0006H   R   SEG=?DT?_CRC16?CRC
DPH. . . . . . . .  D ADDR   0083H   A   
DPL. . . . . . . .  D ADDR   0082H   A   
LIM?043. . . . . .  D ADDR   0003H   R   SEG=?DT?_CRC16?CRC
P?042. . . . . . .  D ADDR   0000H   R   SEG=?DT?_CRC16?CRC
_CRC16 . . . . . .  C ADDR   0000H   R   SEG=?PR?_CRC16?CRC


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
