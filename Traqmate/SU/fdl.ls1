A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE     1


MACRO ASSEMBLER A51 V8.02b
OBJECT MODULE PLACED IN .\fdl.OBJ
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\A51.EXE .\fdl.src PR(.\fdl.ls1) EP DEBUG

LOC  OBJ            LINE     SOURCE

                       1     ; .\fdl.SRC generated from: ..\CommonFiles\fdl.c
                       2     ; COMPILER INVOKED BY:
                       3     ;        C:\Keil\C51\BIN\C51.EXE ..\CommonFiles\fdl.c OPTIMIZE(SIZE) BROWSE MDU_F120 INCDIR
                             (..\..\C51\INC\;..\CommonFiles\;..\SU\) DB OE DEFINE(SENSOR,EXTCLK6,NODEBUG,UBLOX,DISPLAYAT
                             TACHED) DEBUG OBJECTEXTEND PRINT(.\fdl.lst) SRC(.\fdl.SRC)
                       4     
                       5     $nomod51 
                       6     
                       7     NAME    FDL
                       8     
  00C8                 9     DIGOUT0 BIT     0C8H.0
  00DA                10     CCF2    BIT     0D8H.2
  009B                11     TB80    BIT     098H.3
  009D                12     SPI0CKR DATA    09DH
  00C9                13     DIGOUT1 BIT     0C8H.1
  00DB                14     CCF3    BIT     0D8H.3
  009B                15     TB81    BIT     098H.3
  0080                16     P0      DATA    080H
  00CA                17     DIGOUT2 BIT     0C8H.2
  00F8                18     SPIEN   BIT     0F8H.0
  00DC                19     CCF4    BIT     0D8H.4
  009F                20     SM00    BIT     098H.7
  0090                21     P1      DATA    090H
  008F                22     PLL0FLT DATA    08FH
  00CB                23     DIGOUT3 BIT     0C8H.3
  00DD                24     CCF5    BIT     0D8H.5
  00C2                25     AA      BIT     0C0H.2
  009E                26     SM10    BIT     098H.6
  00FF                27     WDTCN   DATA    0FFH
  00A0                28     P2      DATA    0A0H
  00CC                29     DIGOUT4 BIT     0C8H.4
  009D                30     SM20    BIT     098H.5
  00BC                31     ADC0CF  DATA    0BCH
  00B0                32     P3      DATA    0B0H
  00CD                33     DIGOUT5 BIT     0C8H.5
  00D6                34     AC      BIT     0D0H.6
  00C8                35     P4      DATA    0C8H
  00CE                36     DIGOUT6 BIT     0C8H.6
  00F9                37     PCA0    DATA    0F9H
  00E6                38     EIE1    DATA    0E6H
  00D8                39     P5      DATA    0D8H
  00BC                40     ADC2CF  DATA    0BCH
  00B3                41     LED0    BIT     0B0H.3
  00AF                42     EA      BIT     0A8H.7
  00E8                43     P6      DATA    0E8H
  00E7                44     EIE2    DATA    0E7H
  00B6                45     LED1    BIT     0B0H.6
  009D                46     MCE1    BIT     098H.5
  00F8                47     P7      DATA    0F8H
  00B5                48     LED2    BIT     0B0H.5
  008F                49     PSCTL   DATA    08FH
  00FC                50     EN3VGPS BIT     0F8H.4
  00B4                51     LED3    BIT     0B0H.4
  00DF                52     CF      BIT     0D8H.7
  008E                53     PLL0MUL DATA    08EH
  00E8                54     ADC0CN  DATA    0E8H
  00D4                55     DAC0CN  DATA    0D4H
  0084                56     SFRPAGE DATA    084H
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE     2

  00D4                57     DAC1CN  DATA    0D4H
  00C3                58     MAC0CF  DATA    0C3H
  00C2                59     MAC0AH  DATA    0C2H
  00A4                60     P0MDOUT DATA    0A4H
  00E8                61     ADC2CN  DATA    0E8H
  00A5                62     P1MDOUT DATA    0A5H
  0092                63     MAC0BH  DATA    092H
  00A8                64     IE      DATA    0A8H
  00A6                65     P2MDOUT DATA    0A6H
  009A                66     CCH0MA  DATA    09AH
  00A7                67     P3MDOUT DATA    0A7H
  00A3                68     CCH0LC  DATA    0A3H
  00F6                69     EIP1    DATA    0F6H
  00C1                70     MAC0AL  DATA    0C1H
  009C                71     P4MDOUT DATA    09CH
  00F9                72     TXBMT   BIT     0F8H.1
  00F7                73     EIP2    DATA    0F7H
  00A1                74     CCH0CN  DATA    0A1H
  009D                75     P5MDOUT DATA    09DH
  0091                76     MAC0BL  DATA    091H
  00F8                77     DF_WP   BIT     0F8H.0
  00FC                78     PCA0CPH0        DATA    0FCH
  009E                79     P6MDOUT DATA    09EH
  00FE                80     PCA0CPH1        DATA    0FEH
  009F                81     P7MDOUT DATA    09FH
  0082                82     DP      DATA    082H
  00EA                83     PCA0CPH2        DATA    0EAH
  00C4                84     ADC0GT  DATA    0C4H
  00DE                85     CR      BIT     0D8H.6
  00EC                86     PCA0CPH3        DATA    0ECH
  00CE                87     EXF2    BIT     0C8H.6
  009C                88     REN0    BIT     098H.4
  00FB                89     PCA0CPL0        DATA    0FBH
  00EE                90     PCA0CPH4        DATA    0EEH
  00A3                91     EMI0CF  DATA    0A3H
  0096                92     SFRPGCN DATA    096H
  00CE                93     EXF3    BIT     0C8H.6
  009C                94     REN1    BIT     098H.4
  00FD                95     PCA0CPL1        DATA    0FDH
  00E2                96     PCA0CPH5        DATA    0E2H
  00DA                97     PCA0CPM0        DATA    0DAH
  00D9                98     PCA0MD  DATA    0D9H
  00D8                99     PCA0CN  DATA    0D8H
  00C4               100     ADC2GT  DATA    0C4H
  00CE               101     EXF4    BIT     0C8H.6
  00E9               102     PCA0CPL2        DATA    0E9H
  00DB               103     PCA0CPM1        DATA    0DBH
  00EB               104     PCA0CPL3        DATA    0EBH
  00DC               105     PCA0CPM2        DATA    0DCH
  00B8               106     IP      DATA    0B8H
  00C6               107     ADC0LT  DATA    0C6H
  00C3               108     MAC0HO  BIT     0C0H.3
  008C               109     CP0FIF  BIT     088H.4
  00ED               110     PCA0CPL4        DATA    0EDH
  00DD               111     PCA0CPM3        DATA    0DDH
  008C               112     CP1FIF  BIT     088H.4
  00E1               113     PCA0CPL5        DATA    0E1H
  00DE               114     PCA0CPM4        DATA    0DEH
  00D7               115     CY      BIT     0D0H.7
  00C3               116     SI      BIT     0C0H.3
  00DF               117     PCA0CPM5        DATA    0DFH
  00C6               118     ADC2LT  DATA    0C6H
  00FB               119     ENSMBPU BIT     0F8H.3
  00D8               120     DIGIN0  BIT     0D8H.0
  00E1               121     XBR0    DATA    0E1H
  00B9               122     SADEN0  DATA    0B9H
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE     3

  00D9               123     DIGIN1  BIT     0D8H.1
  00E2               124     XBR1    DATA    0E2H
  00A2               125     EMI0CN  DATA    0A2H
  00FF               126     EN5V    BIT     0F8H.7
  00DA               127     DIGIN2  BIT     0D8H.2
  00E3               128     XBR2    DATA    0E3H
  00DB               129     DIGIN3  BIT     0D8H.3
  0088               130     FLHBUSY BIT     088H.0
  00D1               131     REF0CN  DATA    0D1H
  00A9               132     SADDR0  DATA    0A9H
  00DC               133     DIGIN4  BIT     0D8H.4
  00BA               134     AMX0CF  DATA    0BAH
  00DD               135     DIGIN5  BIT     0D8H.5
  00ED               136     AD0INT  BIT     0E8H.5
  00CB               137     RCAP2H  DATA    0CBH
  00A2               138     CCH0TN  DATA    0A2H
  0086               139     SFRLAST DATA    086H
  00DE               140     DIGIN6  BIT     0D8H.6
  00BC               141     PS      BIT     0B8H.4
  00CB               142     RCAP3H  DATA    0CBH
  00BA               143     AMX2CF  DATA    0BAH
  0081               144     SP      DATA    081H
  00ED               145     AD2INT  BIT     0E8H.5
  00CB               146     RCAP4H  DATA    0CBH
  00A1               147     EMI0TC  DATA    0A1H
  00D2               148     OV      BIT     0D0H.2
  00C1               149     MAC0SO  BIT     0C0H.1
  00C0               150     SMB0CN  DATA    0C0H
  00CC               151     TMR2    DATA    0CCH
  008D               152     CP0RIF  BIT     088H.5
  00CA               153     RCAP2L  DATA    0CAH
  00CC               154     TMR3    DATA    0CCH
  00FD               155     MODF    BIT     0F8H.5
  008D               156     CP1RIF  BIT     088H.5
  00CA               157     RCAP3L  DATA    0CAH
  00CC               158     TMR4    DATA    0CCH
  00CA               159     RCAP4L  DATA    0CAH
  00CF               160     SMB0CR  DATA    0CFH
  0089               161     CPT0MD  DATA    089H
  0088               162     CPT0CN  DATA    088H
  009F               163     S1MODE  BIT     098H.7
  00AD               164     P1MDIN  DATA    0ADH
  0089               165     PLL0CN  DATA    089H
  0089               166     CPT1MD  DATA    089H
  0088               167     CPT1CN  DATA    088H
  00FD               168     EN3VIF  BIT     0F8H.5
  0085               169     SFRNEXT DATA    085H
  00F8               170     SPI0CN  DATA    0F8H
  00CF               171     MAC0RNDH        DATA    0CFH
  00C9               172     TMR2CF  DATA    0C9H
  00C9               173     TMR3CF  DATA    0C9H
  0087               174     PCON    DATA    087H
  00F9               175     DF_CS1  BIT     0F8H.1
  00C9               176     TMR4CF  DATA    0C9H
  00FF               177     SPIF    BIT     0F8H.7
  00CE               178     MAC0RNDL        DATA    0CEH
  0089               179     TMOD    DATA    089H
  0088               180     TCON    DATA    088H
  00FE               181     WCOL    BIT     0F8H.6
  00FA               182     NSSMD0  BIT     0F8H.2
  00BB               183     AMX0SL  DATA    0BBH
  00FB               184     NSSMD1  BIT     0F8H.3
  00C8               185     TMR2CN  DATA    0C8H
  00C8               186     TMR3CN  DATA    0C8H
  00BB               187     AMX2SL  DATA    0BBH
  00C8               188     TMR4CN  DATA    0C8H
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE     4

  0086               189     SMBSDA  BIT     080H.6
  008E               190     CP0OUT  BIT     088H.6
  008E               191     CP1OUT  BIT     088H.6
  0089               192     IE0     BIT     088H.1
  008B               193     IE1     BIT     088H.3
  008B               194     OSCICL  DATA    08BH
  0097               195     CLKSEL  DATA    097H
  00F0               196     B       DATA    0F0H
  00D3               197     DAC0H   DATA    0D3H
  00BF               198     ADC0H   DATA    0BFH
  00B1               199     PSBANK  DATA    0B1H
  008A               200     OSCICN  DATA    08AH
  00D3               201     DAC1H   DATA    0D3H
  00C1               202     SMBFTE  BIT     0C0H.1
  00C7               203     BUSY    BIT     0C0H.7
  00D2               204     DAC0L   DATA    0D2H
  00BE               205     ADC0L   DATA    0BEH
  0087               206     SMBSCL  BIT     080H.7
  00D2               207     DAC1L   DATA    0D2H
  00E0               208     ACC     DATA    0E0H
  00AC               209     ES0     BIT     0A8H.4
  00FB               210     PCA0CP0 DATA    0FBH
  00EF               211     AD0EN   BIT     0E8H.7
  00C9               212     CT2     BIT     0C8H.1
  00A9               213     ET0     BIT     0A8H.1
  00FD               214     PCA0CP1 DATA    0FDH
  00C9               215     CT3     BIT     0C8H.1
  00AB               216     ET1     BIT     0A8H.3
  008D               217     TF0     BIT     088H.5
  00E9               218     PCA0CP2 DATA    0E9H
  00EF               219     AD2EN   BIT     0E8H.7
  00C9               220     CT4     BIT     0C8H.1
  00AD               221     ET2     BIT     0A8H.5
  0098               222     RI0     BIT     098H.0
  008F               223     TF1     BIT     088H.7
  00EB               224     PCA0CP3 DATA    0EBH
  00CF               225     TF2     BIT     0C8H.7
  00C0               226     SMBTOE  BIT     0C0H.0
  0098               227     RI1     BIT     098H.0
  008C               228     TH0     DATA    08CH
  00ED               229     PCA0CP4 DATA    0EDH
  00CF               230     TF3     BIT     0C8H.7
  00A8               231     EX0     BIT     0A8H.0
  0099               232     TI0     BIT     098H.1
  0088               233     IT0     BIT     088H.0
  00FA               234     PCA0H   DATA    0FAH
  008D               235     TH1     DATA    08DH
  00E1               236     PCA0CP5 DATA    0E1H
  00CF               237     TF4     BIT     0C8H.7
  00AA               238     EX1     BIT     0A8H.2
  0099               239     TI1     BIT     098H.1
  008A               240     IT1     BIT     088H.2
  00D0               241     P       BIT     0D0H.0
  00C0               242     MAC0N   BIT     0C0H.0
  008C               243     OSCXCN  DATA    08CH
  008A               244     TL0     DATA    08AH
  0088               245     FLSTAT  DATA    088H
  00F9               246     PCA0L   DATA    0F9H
  008B               247     TL1     DATA    08BH
  00B9               248     PT0     BIT     0B8H.1
  00D3               249     RS0     BIT     0D0H.3
  00BB               250     PT1     BIT     0B8H.3
  00D4               251     RS1     BIT     0D0H.4
  00BD               252     PT2     BIT     0B8H.5
  008C               253     TR0     BIT     088H.4
  00EE               254     AD0TM   BIT     0E8H.6
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE     5

  008F               255     CP0EN   BIT     088H.7
  008E               256     TR1     BIT     088H.6
  00CA               257     TR2     BIT     0C8H.2
  00B8               258     PX0     BIT     0B8H.0
  008F               259     CP1EN   BIT     088H.7
  00CA               260     RCAP2   DATA    0CAH
  00EE               261     AD2TM   BIT     0E8H.6
  00CA               262     TR3     BIT     0C8H.2
  00BA               263     PX1     BIT     0B8H.2
  00CA               264     RCAP3   DATA    0CAH
  00CA               265     TR4     BIT     0C8H.2
  00E8               266     SW1     BIT     0E8H.0
  00CA               267     RCAP4   DATA    0CAH
  00C2               268     MAC0Z   BIT     0C0H.2
  0083               269     DPH     DATA    083H
  00C5               270     ADC0GTH DATA    0C5H
  0082               271     DPL     DATA    082H
  00C4               272     ADC0GTL DATA    0C4H
  0099               273     SBUF0   DATA    099H
  00C7               274     ADC0LTH DATA    0C7H
  0099               275     SBUF1   DATA    099H
  00CB               276     EXEN2   BIT     0C8H.3
  00EF               277     RSTSRC  DATA    0EFH
  00B7               278     FLACL   DATA    0B7H
  00FA               279     DF_RST  BIT     0F8H.2
  00CB               280     EXEN3   BIT     0C8H.3
  00C8               281     CPRL2   BIT     0C8H.0
  0088               282     CP0HYN0 BIT     088H.0
  0098               283     SCON0   DATA    098H
  00CB               284     EXEN4   BIT     0C8H.3
  00C8               285     CPRL3   BIT     0C8H.0
  0088               286     CP1HYN0 BIT     088H.0
  0089               287     CP0HYN1 BIT     088H.1
  0098               288     SCON1   DATA    098H
  00C8               289     CPRL4   BIT     0C8H.0
  0089               290     CP1HYN1 BIT     088H.1
  008A               291     CP0HYP0 BIT     088H.2
  00C6               292     ADC0LTL DATA    0C6H
  008A               293     CP1HYP0 BIT     088H.2
  008B               294     CP0HYP1 BIT     088H.3
  00C5               295     STA     BIT     0C0H.5
  008B               296     CP1HYP1 BIT     088H.3
  00C3               297     SMB0ADR DATA    0C3H
  00C0               298     MAC0STA DATA    0C0H
  0091               299     SSTA0   DATA    091H
  00C2               300     SMB0DAT DATA    0C2H
  00CD               301     TMR2H   DATA    0CDH
  009A               302     SPI0CFG DATA    09AH
  00DA               303     ACCST   BIT     0D8H.2
  00CD               304     TMR3H   DATA    0CDH
  008E               305     CKCON   DATA    08EH
  00CD               306     TMR4H   DATA    0CDH
  00FC               307     RXOVRN  BIT     0F8H.4
  00CC               308     TMR2L   DATA    0CCH
  00CC               309     TMR3L   DATA    0CCH
  00E8               310     AD0LJST BIT     0E8H.0
  00CC               311     TMR4L   DATA    0CCH
  00D5               312     F0      BIT     0D0H.5
  00B7               313     FLSCL   DATA    0B7H
  00EA               314     AD0CM0  BIT     0E8H.2
  00D1               315     F1      BIT     0D0H.1
  00C4               316     STO     BIT     0C0H.4
  00C6               317     ENSMB   BIT     0C0H.6
  00EB               318     AD0CM1  BIT     0E8H.3
  009B               319     SPI0DAT DATA    09BH
  00D2               320     DAC0    DATA    0D2H
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE     6

  00BE               321     ADC0    DATA    0BEH
  00E9               322     AD2CM0  BIT     0E8H.1
  00D2               323     DAC1    DATA    0D2H
  00EA               324     AD2CM1  BIT     0E8H.2
  00E9               325     AD0WINT BIT     0E8H.1
  00EB               326     AD2CM2  BIT     0E8H.3
  00EC               327     AD0BUSY BIT     0E8H.4
  00D0               328     PSW     DATA    0D0H
  00BE               329     ADC2    DATA    0BEH
  0097               330     MAC0OVR DATA    097H
  0093               331     MAC0ACC0        DATA    093H
  00E8               332     AD2WINT BIT     0E8H.0
  0094               333     MAC0ACC1        DATA    094H
  00EC               334     AD2BUSY BIT     0E8H.4
  00D8               335     CCF0    BIT     0D8H.0
  009A               336     RB80    BIT     098H.2
  00C1               337     SMB0STA DATA    0C1H
  0095               338     MAC0ACC2        DATA    095H
  00D9               339     CCF1    BIT     0D8H.1
  009A               340     RB81    BIT     098H.2
  0096               341     MAC0ACC3        DATA    096H
  008D               342     PLL0DIV DATA    08DH
                     343     ?PR?_CopytoCodeSpace?FDL                 SEGMENT CODE 
                     344     ?DT?_CopytoCodeSpace?FDL                 SEGMENT DATA OVERLAYABLE 
                     345     ?PR?_FDL_xferSPI?FDL SEGMENT CODE 
                     346     ?PR?FDL_DataFlash_Read_Status?FDL        SEGMENT CODE 
                     347     ?DT?FDL_DataFlash_Read_Status?FDL        SEGMENT DATA OVERLAYABLE 
                     348             EXTRN   XDATA (flashpage)
                     349             PUBLIC  FDL_DataFlash_Read_Status
                     350             PUBLIC  _FDL_xferSPI
                     351             PUBLIC  _CopytoCodeSpace
                     352     
----                 353             RSEG  ?DT?FDL_DataFlash_Read_Status?FDL
0000                 354     ?FDL_DataFlash_Read_Status?BYTE:
0000                 355               q?252:   DS   2
                     356     
----                 357             RSEG  ?DT?_CopytoCodeSpace?FDL
0000                 358     ?_CopytoCodeSpace?BYTE:
0000                 359        lastpage?040:   DS   2
000B                 360             ORG  11
000B                 361               q?041:   DS   2
000B                 362             ORG  11
000B                 363            temp?042:   DS   1
000B                 364             ORG  11
000B                 365               q?043:   DS   2
000B                 366             ORG  11
000B                 367               q?044:   DS   2
0002                 368             ORG  2
0002                 369          pwrite?045:   DS   3
0005                 370             ORG  5
0005                 371         EA_save?046:   DS   1
0006                 372             ORG  6
0006                 373               i?047:   DS   2
0008                 374             ORG  8
0008                 375            page?048:   DS   2
000A                 376             ORG  10
000A                 377          status?049:   DS   1
                     378     ; // software downloader
                     379     ; //
                     380     ; // this must be less than 510 bytes when compiled which is very tight. It must
                     381     ; // not extend into address 0xFFFE or 0xFFFF, the micro flash lock bytes
                     382     ; // it is loaded at 0xFE00 and must be self-contained so the code copy will
                     383     ; // not overwrite it.
                     384     ; //
                     385     ; // initial implementation John Paulos, 04/26/2005
                     386     ; // re-written Glenn Stephens, 05/02/2005
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE     7

                     387     ; //
                     388     ; 
                     389     ; #include <tmtypes.h>
                     390     ; #ifdef DISPLAY
                     391     ; #include <display.h>
                     392     ; #else
                     393     ; #include <sensor.h>
                     394     ; #endif
                     395     ; 
                     396     ; //#define DFWAITREAD do {int q; for (q=0; q<64; q++) ; } while(0)  // 64 seems to work we
                             ll. should be verified.
                     397     ; //#define DFWAITWRITE do {int q; for (q=0; q<64; q++) ; } while(0)  // longer for erase.
                     398     ; #define DFWAITFDL do {int q; for (q=0; q<200; q++) ; } while(0)  // longer for erase.
                     399     ; 
                     400     ; u08 FDL_xferSPI (u08);
                     401     ; u08 FDL_DataFlash_Read_Status(void);
                     402     ; 
                     403     ; void CopytoCodeSpace(u16 lastpage) {
                     404     
----                 405             RSEG  ?PR?_CopytoCodeSpace?FDL
0000                 406     _CopytoCodeSpace:
                     407             USING   0
                     408                             ; SOURCE LINE # 26
0000 8E00     F      409             MOV     lastpage?040,R6
0002 8F00     F      410             MOV     lastpage?040+01H,R7
                     411     ;       char * data pwrite;
                     412     ;       char EA_save;
                     413     ;       u16 i, page;
                     414     ;       u08 status;
                     415     ; #pragma ASM
                     416     ; // support code versions with roadblock at 0xfe00
                     417               
                     418     ; // this code duplicates the c compiler argument passing code
                     419               
                     420     ; //    argument passing, R6 = MSB, R7 = LSB
                     421               
                     422     ;       MOV     lastpage?040,R6
0004 8E00     F      423               MOV   lastpage?040,R6
                     424     ;       MOV     lastpage?040+01H,R7
0006 8F00     F      425               MOV   lastpage?040+01H,R7
                     426     ; #pragma ENDASM
                     427     ; 
                     428     ;       pwrite = 0x0;                                           // initialize code pointer
                     429                             ; SOURCE LINE # 39
0008 750000   F      430             MOV     pwrite?045,#00H
000B 750000   F      431             MOV     pwrite?045+01H,#00H
000E 750000   F      432             MOV     pwrite?045+02H,#00H
                     433     ; 
                     434     ;       EA_save = EA;                                           // save interrupt status
                     435                             ; SOURCE LINE # 41
0011 A2AF            436             MOV     C,EA
0013 E4              437             CLR     A
0014 33              438             RLC     A
0015 F500     F      439             MOV     EA_save?046,A
                     440     ;       EA = 0;                                                         // disable interrup
                             ts
                     441                             ; SOURCE LINE # 42
0017 C2AF            442             CLR     EA
                     443     ; 
                     444     ;       SFRPAGE = LEGACY_PAGE;
                     445                             ; SOURCE LINE # 44
0019 E4              446             CLR     A
001A F584            447             MOV     SFRPAGE,A
                     448     ;       FLSCL |= 0x01;                                          // enable flash writes/eras
                             es from user software
                     449                             ; SOURCE LINE # 45
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE     8

001C 43B701          450             ORL     FLSCL,#01H
                     451     ; 
                     452     ;       PSCTL = 0x03;                                           // movx writes erase flash 
                             page
                     453                             ; SOURCE LINE # 47
001F 758F03          454             MOV     PSCTL,#03H
0022                 455     ?C0001:
                     456     ; 
                     457     ;       // erase code memory up to last 1024 page containing bootstrapper
                     458     ;       while (pwrite < LAST_CODE_PAGE) {       // stop one page from end of codespace
                     459                             ; SOURCE LINE # 50
0022 C3              460             CLR     C
0023 E500     F      461             MOV     A,pwrite?045+01H
0025 94FC            462             SUBB    A,#0FCH
0027 5016            463             JNC     ?C0002
                     464     ; //            *pwrite = 0x88;                                 // write any value to initi
                             ate page erase
                     465     ; // this assembler code must be here to force compiler to use the MOVX instruction to caus
                             e flash rewrite
                     466     ; // XXXXXXXXXXXXXXXXXX
                     467     ; #pragma ASM
                     468     ;               MOV     DPL,pwrite?045+01H
0029 850082   F      469               MOV   DPL,pwrite?045+01H
                     470     ;               MOV     DPH,pwrite?045  
002C 850083   F      471               MOV   DPH,pwrite?045  
                     472     ;               MOV     A,#088H                                 // put a value in A, doesn'
                             t matter what
002F 7488            473               MOV   A,#088H                                  
                     474     ;               MOVX    @DPTR,A                                 // MOVX causes code flash p
                             age to be erased
0031 F0              475               MOVX  @DPTR,A                                  
                     476     ; #pragma ENDASM
                     477     ;               pwrite += CODE_PAGE_SIZE;               // point to next page
                     478                             ; SOURCE LINE # 60
0032 E4              479             CLR     A
0033 2500     F      480             ADD     A,pwrite?045+02H
0035 F500     F      481             MOV     pwrite?045+02H,A
0037 7404            482             MOV     A,#04H
0039 3500     F      483             ADDC    A,pwrite?045+01H
003B F500     F      484             MOV     pwrite?045+01H,A
                     485     ;       }       // while
                     486                             ; SOURCE LINE # 61
003D 80E3            487             SJMP    ?C0001
003F                 488     ?C0002:
                     489     ; 
                     490     ;       PSCTL = 0x00;                                           // movx writes to target ra
                             m
                     491                             ; SOURCE LINE # 63
003F E4              492             CLR     A
0040 F58F            493             MOV     PSCTL,A
                     494     ;       pwrite = 0x00;                                          // reset code pointer
                     495                             ; SOURCE LINE # 64
0042 F500     F      496             MOV     pwrite?045,A
0044 F500     F      497             MOV     pwrite?045+01H,A
0046 F500     F      498             MOV     pwrite?045+02H,A
                     499     ; 
                     500     ;       // copy code over from dataflash to micro flash codespace 512 bytes at a time
                     501     ;       for (page=0; page < (BOOTSTRAP_ADDR/CODE_DOWNLOAD_SIZE); page++) {
                     502                             ; SOURCE LINE # 67
0048 F500     F      503             MOV     page?048,A
004A F500     F      504             MOV     page?048+01H,A
004C                 505     ?C0003:
                     506     ; 
                     507     ;               SFRPAGE = CONFIG_PAGE;
                     508                             ; SOURCE LINE # 69
004C 75840F          509             MOV     SFRPAGE,#0FH
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE     9

                     510     ; 
                     511     ; //                    FDL_DataFlash_Page_Read(MAX_PAGE_SIZE, flashpage.bigbuff, read_page
                             );
                     512     ; // function is put in line here to avoid passing pointer which uses code put in by 
                     513     ; // compiler in lower code space
                     514     ; 
                     515     ; #ifdef SENSOR
                     516     ;               if (!(page % 4)) LED1 = ~LED1;;
                     517                             ; SOURCE LINE # 76
004F E500     F      518             MOV     A,page?048+01H
0051 5403            519             ANL     A,#03H
0053 7002            520             JNZ     ?C0009
0055 B2B6            521             CPL     LED1
0057                 522     ?C0009:
                     523     ; #endif
                     524     ; 
                     525     ;               // wait for Serial Flash to be available
                     526     ;               do {
                     527                             ; SOURCE LINE # 80
                     528     ;                       status = FDL_DataFlash_Read_Status();
                     529                             ; SOURCE LINE # 81
0057 120000   F      530             LCALL   FDL_DataFlash_Read_Status
005A 8F00     F      531             MOV     status?049,R7
                     532     ;               } while (!(status & STATUS_READY_MASK));
                     533                             ; SOURCE LINE # 82
005C E500     F      534             MOV     A,status?049
005E 30E7F6          535             JNB     ACC.7,?C0009
                     536     ; 
                     537     ;               // set CS to low
                     538     ;               DF_CS1 = 0;
                     539                             ; SOURCE LINE # 85
0061 C2F9            540             CLR     DF_CS1
                     541     ;               DFWAITFDL;
                     542                             ; SOURCE LINE # 86
0063 E4              543             CLR     A
0064 F500     F      544             MOV     q?041,A
0066 F500     F      545             MOV     q?041+01H,A
0068                 546     ?C0013:
0068 0500     F      547             INC     q?041+01H
006A E500     F      548             MOV     A,q?041+01H
006C 7002            549             JNZ     ?C0055
006E 0500     F      550             INC     q?041
0070                 551     ?C0055:
0070 64C8            552             XRL     A,#0C8H
0072 4500     F      553             ORL     A,q?041
0074 70F2            554             JNZ     ?C0013
0076                 555     ?C0011:
                     556     ; 
                     557     ;               // shift out command
                     558     ;               FDL_xferSPI(MEMORY_PAGE_READ);
                     559                             ; SOURCE LINE # 89
0076 7FD2            560             MOV     R7,#0D2H
0078 120000   F      561             LCALL   _FDL_xferSPI
                     562     ;       
                     563     ;               // shift out reserved bits and upper bits of page address
                     564     ;               FDL_xferSPI(page >> 6); 
                     565                             ; SOURCE LINE # 92
007B E500     F      566             MOV     A,page?048+01H
007D AE00     F      567             MOV     R6,page?048
007F 7806            568             MOV     R0,#06H
0081                 569     ?C0056:
0081 CE              570             XCH     A,R6
0082 C3              571             CLR     C
0083 13              572             RRC     A
0084 CE              573             XCH     A,R6
0085 13              574             RRC     A
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE    10

0086 D8F9            575             DJNZ    R0,?C0056
0088 FF              576             MOV     R7,A
0089 120000   F      577             LCALL   _FDL_xferSPI
                     578     ; 
                     579     ;               // shift out bottom 6 bits of page address and top bits of byte address
                     580     ;               FDL_xferSPI((u08) page << 2);
                     581                             ; SOURCE LINE # 95
008C 120000   F      582             LCALL   L?0065
                     583     ; 
                     584     ;               // shift out bottom 8 bits of unsigned char address
                     585     ;               FDL_xferSPI(0);
                     586                             ; SOURCE LINE # 98
008F E4              587             CLR     A
0090 FF              588             MOV     R7,A
0091 120000   F      589             LCALL   _FDL_xferSPI
                     590     ; 
                     591     ;               // shift out 4 bytes of don't cares
                     592     ;               FDL_xferSPI(0); FDL_xferSPI(0); FDL_xferSPI(0); FDL_xferSPI(0);
                     593                             ; SOURCE LINE # 101
0094 E4              594             CLR     A
0095 FF              595             MOV     R7,A
0096 120000   F      596             LCALL   _FDL_xferSPI
0099 E4              597             CLR     A
009A FF              598             MOV     R7,A
009B 120000   F      599             LCALL   _FDL_xferSPI
009E E4              600             CLR     A
009F FF              601             MOV     R7,A
00A0 120000   F      602             LCALL   _FDL_xferSPI
00A3 E4              603             CLR     A
00A4 FF              604             MOV     R7,A
00A5 120000   F      605             LCALL   _FDL_xferSPI
                     606     ; 
                     607     ;               // shift in the data
                     608     ;               for (i=0; i < CODE_DOWNLOAD_SIZE; i++)
                     609                             ; SOURCE LINE # 104
00A8 E4              610             CLR     A
00A9 F500     F      611             MOV     i?047,A
00AB F500     F      612             MOV     i?047+01H,A
00AD                 613     ?C0016:
                     614     ;                       flashpage.bigbuff[i] =  FDL_xferSPI(0);
                     615                             ; SOURCE LINE # 105
00AD E4              616             CLR     A
00AE FF              617             MOV     R7,A
00AF 120000   F      618             LCALL   _FDL_xferSPI
00B2 7400     F      619             MOV     A,#LOW (flashpage)
00B4 2500     F      620             ADD     A,i?047+01H
00B6 F582            621             MOV     DPL,A
00B8 7400     F      622             MOV     A,#HIGH (flashpage)
00BA 3500     F      623             ADDC    A,i?047
00BC F583            624             MOV     DPH,A
00BE EF              625             MOV     A,R7
00BF F0              626             MOVX    @DPTR,A
00C0 0500     F      627             INC     i?047+01H
00C2 E500     F      628             MOV     A,i?047+01H
00C4 7002            629             JNZ     ?C0057
00C6 0500     F      630             INC     i?047
00C8                 631     ?C0057:
00C8 C3              632             CLR     C
00C9 E500     F      633             MOV     A,i?047
00CB 9402            634             SUBB    A,#02H
00CD 40DE            635             JC      ?C0016
00CF                 636     ?C0017:
                     637     ; 
                     638     ;               // raise CS to end operation
                     639     ;               DF_CS1 = 1;
                     640                             ; SOURCE LINE # 108
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE    11

00CF D2F9            641             SETB    DF_CS1
                     642     ; 
                     643     ; // end of inline function
                     644     ; 
                     645     ;               SFRPAGE = LEGACY_PAGE;
                     646                             ; SOURCE LINE # 112
00D1 E4              647             CLR     A
00D2 F584            648             MOV     SFRPAGE,A
                     649     ;               PSCTL = 0x01;                                           // movx writes to c
                             odeflash
                     650                             ; SOURCE LINE # 113
00D4 758F01          651             MOV     PSCTL,#01H
                     652     ; 
                     653     ; // XXXXXXXXXXXXXXXXXX
                     654     ;               // copy dataflash page into micro flash
                     655     ;               for (i=0; i < CODE_DOWNLOAD_SIZE; i++) {
                     656                             ; SOURCE LINE # 117
00D7 F500     F      657             MOV     i?047,A
00D9 F500     F      658             MOV     i?047+01H,A
00DB                 659     ?C0019:
                     660     ;                       unsigned char temp;
                     661     ; 
                     662     ;                       temp = flashpage.bigbuff[i];
                     663                             ; SOURCE LINE # 120
00DB 7400     F      664             MOV     A,#LOW (flashpage)
00DD 2500     F      665             ADD     A,i?047+01H
00DF F582            666             MOV     DPL,A
00E1 7400     F      667             MOV     A,#HIGH (flashpage)
00E3 3500     F      668             ADDC    A,i?047
00E5 F583            669             MOV     DPH,A
00E7 E0              670             MOVX    A,@DPTR
00E8 F500     F      671             MOV     temp?042,A
                     672     ; //                    *pwrite = temp;
                     673     ; // this assembler code must be here to force compiler to use the MOVX instruction to caus
                             e flash rewrite
                     674     ; #pragma ASM
                     675     ; //                    MOV     A,temp?042                              // put code byte in
                             to accum     
                     676               
                     677     ;                       MOV     DPL,pwrite?045+02H              // load data pointer with a
                             ddress in code flash
00EA 850082   F      678               MOV   DPL,pwrite?045+02H               
                     679     ;                       MOV     DPH,pwrite?045+01H      
00ED 850083   F      680               MOV   DPH,pwrite?045+01H      
                     681     ;                       MOVX    @DPTR,A                                 // MOVX causes code
                              flash page to be programmed
00F0 F0              682               MOVX  @DPTR,A                                  
                     683     ; #pragma ENDASM
                     684     ; 
                     685     ;                       pwrite++;
                     686                             ; SOURCE LINE # 130
00F1 7401            687             MOV     A,#01H
00F3 2500     F      688             ADD     A,pwrite?045+02H
00F5 F500     F      689             MOV     pwrite?045+02H,A
00F7 E4              690             CLR     A
00F8 3500     F      691             ADDC    A,pwrite?045+01H
00FA F500     F      692             MOV     pwrite?045+01H,A
                     693     ;               } // for
                     694                             ; SOURCE LINE # 131
00FC 0500     F      695             INC     i?047+01H
00FE E500     F      696             MOV     A,i?047+01H
0100 7002            697             JNZ     ?C0058
0102 0500     F      698             INC     i?047
0104                 699     ?C0058:
0104 B400D4          700             CJNE    A,#00H,?C0019
0107 E500     F      701             MOV     A,i?047
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE    12

0109 B402CF          702             CJNE    A,#02H,?C0019
010C                 703     ?C0020:
                     704     ;               
                     705     ;               PSCTL = 0x00;
                     706                             ; SOURCE LINE # 133
010C E4              707             CLR     A
010D F58F            708             MOV     PSCTL,A
                     709     ;       } // for
                     710                             ; SOURCE LINE # 134
010F 0500     F      711             INC     page?048+01H
0111 E500     F      712             MOV     A,page?048+01H
0113 7002            713             JNZ     ?C0060
0115 0500     F      714             INC     page?048
0117                 715     ?C0060:
0117 C3              716             CLR     C
0118 947F            717             SUBB    A,#07FH
011A E500     F      718             MOV     A,page?048
011C 9400            719             SUBB    A,#00H
011E 5003            720             JNC     $ + 5H
0120 020000   F      721             LJMP    ?C0003
0123                 722     ?C0004:
                     723     ; 
                     724     ;       PSCTL = 0;                                                      // movx writes targ
                             et ram
                     725                             ; SOURCE LINE # 136
0123 E4              726             CLR     A
0124 F58F            727             MOV     PSCTL,A
                     728     ; 
                     729     ;       FLSCL &= ~0x01;                                         // disable flash writes fro
                             m user sw
                     730                             ; SOURCE LINE # 138
0126 53B7FE          731             ANL     FLSCL,#0FEH
                     732     ;       EA = EA_save;
                     733                             ; SOURCE LINE # 139
0129 E500     F      734             MOV     A,EA_save?046
012B 24FF            735             ADD     A,#0FFH
012D 92AF            736             MOV     EA,C
                     737     ;       PSW = 0;
                     738                             ; SOURCE LINE # 140
012F E4              739             CLR     A
0130 F5D0            740             MOV     PSW,A
                     741     ; 
                     742     ;       SFRPAGE = CONFIG_PAGE;
                     743                             ; SOURCE LINE # 142
0132 75840F          744             MOV     SFRPAGE,#0FH
                     745     ; 
                     746     ;       // clear the flash - NOTE: cannot use global variables. Must choose max erase pages
                             .
                     747     ;       for (page = 0; page < MAX_NUM_PAGES; page += 8) {
                     748                             ; SOURCE LINE # 145
0135 F500     F      749             MOV     page?048,A
0137 F500     F      750             MOV     page?048+01H,A
0139                 751     ?C0022:
0139 C3              752             CLR     C
013A E500     F      753             MOV     A,page?048
013C 9420            754             SUBB    A,#020H
013E 5054            755             JNC     ?C0037
                     756     ; 
                     757     ; #ifdef SENSOR
                     758     ;               // invert LED every so often
                     759     ;               if (!(page % 64)) LED2 = ~LED2;
                     760                             ; SOURCE LINE # 149
0140 E500     F      761             MOV     A,page?048+01H
0142 543F            762             ANL     A,#03FH
0144 7002            763             JNZ     ?C0028
0146 B2B5            764             CPL     LED2
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE    13

0148                 765     ?C0028:
                     766     ; #endif
                     767     ; 
                     768     ;               // inline dataflash erase block
                     769     ; 
                     770     ;               // wait for Serial Flash to be available
                     771     ;               do {
                     772                             ; SOURCE LINE # 155
                     773     ;                       status = FDL_DataFlash_Read_Status();
                     774                             ; SOURCE LINE # 156
0148 120000   F      775             LCALL   FDL_DataFlash_Read_Status
014B 8F00     F      776             MOV     status?049,R7
                     777     ;               } while (!(status & STATUS_READY_MASK));
                     778                             ; SOURCE LINE # 157
014D E500     F      779             MOV     A,status?049
014F 30E7F6          780             JNB     ACC.7,?C0028
                     781     ; 
                     782     ;               DF_CS1 = 0;
                     783                             ; SOURCE LINE # 159
0152 C2F9            784             CLR     DF_CS1
                     785     ;               DFWAITFDL;
                     786                             ; SOURCE LINE # 160
0154 E4              787             CLR     A
0155 F500     F      788             MOV     q?043,A
0157 F500     F      789             MOV     q?043+01H,A
0159                 790     ?C0032:
0159 0500     F      791             INC     q?043+01H
015B E500     F      792             MOV     A,q?043+01H
015D 7002            793             JNZ     ?C0061
015F 0500     F      794             INC     q?043
0161                 795     ?C0061:
0161 64C8            796             XRL     A,#0C8H
0163 4500     F      797             ORL     A,q?043
0165 70F2            798             JNZ     ?C0032
0167                 799     ?C0030:
                     800     ; 
                     801     ;               //command
                     802     ;               FDL_xferSPI(BLOCK_ERASE);
                     803                             ; SOURCE LINE # 163
0167 7F50            804             MOV     R7,#050H
0169 120000   F      805             LCALL   _FDL_xferSPI
                     806     ; 
                     807     ;               // shift out reserved bits and upper bits of page address
                     808     ;               FDL_xferSPI(page >> 6);
                     809                             ; SOURCE LINE # 166
016C E500     F      810             MOV     A,page?048+01H
016E AE00     F      811             MOV     R6,page?048
0170 7806            812             MOV     R0,#06H
0172                 813     ?C0062:
0172 CE              814             XCH     A,R6
0173 C3              815             CLR     C
0174 13              816             RRC     A
0175 CE              817             XCH     A,R6
0176 13              818             RRC     A
0177 D8F9            819             DJNZ    R0,?C0062
0179 FF              820             MOV     R7,A
017A 120000   F      821             LCALL   _FDL_xferSPI
                     822     ; 
                     823     ;               // shift out bottom 6 bits of page address and top bits of byte address
                     824     ;               FDL_xferSPI((u08) page << 2);
                     825                             ; SOURCE LINE # 169
017D 120000   F      826             LCALL   L?0065
                     827     ; 
                     828     ;               // shift out bottom 8 bits of unsigned char address
                     829     ;               FDL_xferSPI(0);
                     830                             ; SOURCE LINE # 172
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE    14

0180 E4              831             CLR     A
0181 FF              832             MOV     R7,A
0182 120000   F      833             LCALL   _FDL_xferSPI
                     834     ; 
                     835     ;               DF_CS1 = 1;
                     836                             ; SOURCE LINE # 174
0185 D2F9            837             SETB    DF_CS1
                     838     ; 
                     839     ;               // end of inline function
                     840     ;       } // for
                     841                             ; SOURCE LINE # 177
0187 7408            842             MOV     A,#08H
0189 2500     F      843             ADD     A,page?048+01H
018B F500     F      844             MOV     page?048+01H,A
018D E4              845             CLR     A
018E 3500     F      846             ADDC    A,page?048
0190 F500     F      847             MOV     page?048,A
0192 80A5            848             SJMP    ?C0022
0194                 849     ?C0037:
                     850     ; 
                     851     ;       DFWAITFDL;
                     852                             ; SOURCE LINE # 179
0194 E4              853             CLR     A
0195 F500     F      854             MOV     q?044,A
0197 F500     F      855             MOV     q?044+01H,A
0199                 856     ?C0038:
0199 0500     F      857             INC     q?044+01H
019B E500     F      858             MOV     A,q?044+01H
019D 7002            859             JNZ     ?C0063
019F 0500     F      860             INC     q?044
01A1                 861     ?C0063:
01A1 64C8            862             XRL     A,#0C8H
01A3 4500     F      863             ORL     A,q?044
01A5 70F2            864             JNZ     ?C0038
01A7                 865     ?C0043:
                     866     ;       
                     867     ;       // wait for Serial Flash to be finished
                     868     ;       do {
                     869                             ; SOURCE LINE # 182
                     870     ;               status = FDL_DataFlash_Read_Status();
                     871                             ; SOURCE LINE # 183
01A7 120000   F      872             LCALL   FDL_DataFlash_Read_Status
01AA 8F00     F      873             MOV     status?049,R7
                     874     ;       } while (!(status & STATUS_READY_MASK));
                     875                             ; SOURCE LINE # 184
01AC E500     F      876             MOV     A,status?049
01AE 30E7F6          877             JNB     ACC.7,?C0043
                     878     ; 
                     879     ;       SFRPAGE = LEGACY_PAGE;
                     880                             ; SOURCE LINE # 186
01B1 E4              881             CLR     A
01B2 F584            882             MOV     SFRPAGE,A
                     883     ; 
                     884     ;       // pull the reset line to restart everything
                     885     ;       RSTSRC = RSTSRC | 0x01;
                     886                             ; SOURCE LINE # 189
01B4 43EF01          887             ORL     RSTSRC,#01H
                     888     ; }
                     889                             ; SOURCE LINE # 190
01B7 22              890             RET     
                     891     ; END OF _CopytoCodeSpace
                     892     
                     893     ; 
                     894     ; // simultaneously write       and read one unsigned char to SPI (mode 3). Blocking.
                     895     ; u08 FDL_xferSPI (u08 ch) {
                     896     
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE    15

----                 897             RSEG  ?PR?_FDL_xferSPI?FDL
0000                 898     L?0065:
                     899             USING   0
0000 AF00     F      900             MOV     R7,page?048+01H
0002 EF              901             MOV     A,R7
0003 25E0            902             ADD     A,ACC
0005 25E0            903             ADD     A,ACC
0007 FF              904             MOV     R7,A
0008                 905     _FDL_xferSPI:
                     906             USING   0
                     907                             ; SOURCE LINE # 193
                     908     ;---- Variable 'ch?150' assigned to Register 'R7' ----
                     909     ; 
                     910     ;       u08 SFRPAGE_SAVE = SFRPAGE;                     // Save Current SFR page
                     911                             ; SOURCE LINE # 195
                     912     ;---- Variable 'SFRPAGE_SAVE?151' assigned to Register 'R6' ----
0008 AE84            913             MOV     R6,SFRPAGE
                     914     ;       SFRPAGE = SPI0_PAGE;
                     915                             ; SOURCE LINE # 196
000A E4              916             CLR     A
000B F584            917             MOV     SFRPAGE,A
                     918     ; 
                     919     ;       SPI0DAT = ch;
                     920                             ; SOURCE LINE # 198
000D 8F9B            921             MOV     SPI0DAT,R7
000F                 922     ?C0045:
                     923     ; 
                     924     ;       // wait for shifting
                     925     ;       while (!SPIF) ;
                     926                             ; SOURCE LINE # 201
000F 30FFFD          927             JNB     SPIF,?C0045
0012                 928     ?C0046:
                     929     ; 
                     930     ;       SPIF = 0;                       // clear the xfer complete flag
                     931                             ; SOURCE LINE # 203
0012 C2FF            932             CLR     SPIF
                     933     ; 
                     934     ;       ch = SPI0DAT;
                     935                             ; SOURCE LINE # 205
0014 AF9B            936             MOV     R7,SPI0DAT
                     937     ;       
                     938     ;       SFRPAGE = SFRPAGE_SAVE;
                     939                             ; SOURCE LINE # 207
0016 8E84            940             MOV     SFRPAGE,R6
                     941     ; 
                     942     ;       return (ch);
                     943                             ; SOURCE LINE # 209
                     944     ; }
                     945                             ; SOURCE LINE # 210
0018                 946     ?C0047:
0018 22              947             RET     
                     948     ; END OF _FDL_xferSPI
                     949     
                     950     ; 
                     951     ; // returns the value of DataFlash Status Register. Non-blocking.
                     952     ; u08 FDL_DataFlash_Read_Status(void) {
                     953     
----                 954             RSEG  ?PR?FDL_DataFlash_Read_Status?FDL
0000                 955     FDL_DataFlash_Read_Status:
                     956             USING   0
                     957                             ; SOURCE LINE # 213
                     958     ;    u08 dat;
                     959     ; 
                     960     ;       DF_CS1 = 0;
                     961                             ; SOURCE LINE # 216
0000 C2F9            962             CLR     DF_CS1
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE    16

                     963     ;       DFWAITFDL;
                     964                             ; SOURCE LINE # 217
0002 E4              965             CLR     A
0003 F500     F      966             MOV     q?252,A
0005 F500     F      967             MOV     q?252+01H,A
0007                 968     ?C0051:
0007 0500     F      969             INC     q?252+01H
0009 E500     F      970             MOV     A,q?252+01H
000B 7002            971             JNZ     ?C0064
000D 0500     F      972             INC     q?252
000F                 973     ?C0064:
000F 64C8            974             XRL     A,#0C8H
0011 4500     F      975             ORL     A,q?252
0013 70F2            976             JNZ     ?C0051
0015                 977     ?C0049:
                     978     ; 
                     979     ;       //command
                     980     ;       FDL_xferSPI(STATUS_REGISTER_READ);
                     981                             ; SOURCE LINE # 220
0015 7FD7            982             MOV     R7,#0D7H
0017 120000   F      983             LCALL   _FDL_xferSPI
                     984     ; 
                     985     ;       dat = FDL_xferSPI(0);
                     986                             ; SOURCE LINE # 222
001A E4              987             CLR     A
001B FF              988             MOV     R7,A
001C 120000   F      989             LCALL   _FDL_xferSPI
                     990     ;---- Variable 'dat?253' assigned to Register 'R7' ----
                     991     ; 
                     992     ;       DF_CS1 = 1;
                     993                             ; SOURCE LINE # 224
001F D2F9            994             SETB    DF_CS1
                     995     ;   
                     996     ;    return (dat);
                     997                             ; SOURCE LINE # 226
                     998     ; }
                     999                             ; SOURCE LINE # 227
0021                1000     ?C0054:
0021 22             1001             RET     
                    1002     ; END OF FDL_DataFlash_Read_Status
                    1003     
                    1004             END
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE    17

SYMBOL TABLE LISTING
------ ----- -------


N A M E                            T Y P E  V A L U E   ATTRIBUTES

?C0001. . . . . . . . . . . . . .  C ADDR   0022H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0002. . . . . . . . . . . . . .  C ADDR   003FH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0003. . . . . . . . . . . . . .  C ADDR   004CH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0004. . . . . . . . . . . . . .  C ADDR   0123H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0009. . . . . . . . . . . . . .  C ADDR   0057H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0011. . . . . . . . . . . . . .  C ADDR   0076H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0013. . . . . . . . . . . . . .  C ADDR   0068H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0016. . . . . . . . . . . . . .  C ADDR   00ADH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0017. . . . . . . . . . . . . .  C ADDR   00CFH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0019. . . . . . . . . . . . . .  C ADDR   00DBH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0020. . . . . . . . . . . . . .  C ADDR   010CH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0022. . . . . . . . . . . . . .  C ADDR   0139H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0028. . . . . . . . . . . . . .  C ADDR   0148H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0030. . . . . . . . . . . . . .  C ADDR   0167H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0032. . . . . . . . . . . . . .  C ADDR   0159H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0037. . . . . . . . . . . . . .  C ADDR   0194H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0038. . . . . . . . . . . . . .  C ADDR   0199H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0043. . . . . . . . . . . . . .  C ADDR   01A7H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0045. . . . . . . . . . . . . .  C ADDR   000FH   R   SEG=?PR?_FDL_XFERSPI?FDL
?C0046. . . . . . . . . . . . . .  C ADDR   0012H   R   SEG=?PR?_FDL_XFERSPI?FDL
?C0047. . . . . . . . . . . . . .  C ADDR   0018H   R   SEG=?PR?_FDL_XFERSPI?FDL
?C0049. . . . . . . . . . . . . .  C ADDR   0015H   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
?C0051. . . . . . . . . . . . . .  C ADDR   0007H   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
?C0054. . . . . . . . . . . . . .  C ADDR   0021H   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
?C0055. . . . . . . . . . . . . .  C ADDR   0070H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0056. . . . . . . . . . . . . .  C ADDR   0081H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0057. . . . . . . . . . . . . .  C ADDR   00C8H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0058. . . . . . . . . . . . . .  C ADDR   0104H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0060. . . . . . . . . . . . . .  C ADDR   0117H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0061. . . . . . . . . . . . . .  C ADDR   0161H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0062. . . . . . . . . . . . . .  C ADDR   0172H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0063. . . . . . . . . . . . . .  C ADDR   01A1H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0064. . . . . . . . . . . . . .  C ADDR   000FH   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
?DT?FDL_DATAFLASH_READ_STATUS?FDL  D SEG    0002H       REL=UNIT
?DT?_COPYTOCODESPACE?FDL. . . . .  D SEG    000DH       REL=UNIT
?FDL_DATAFLASH_READ_STATUS?BYTE .  D ADDR   0000H   R   SEG=?DT?FDL_DATAFLASH_READ_STATUS?FDL
?PR?FDL_DATAFLASH_READ_STATUS?FDL  C SEG    0022H       REL=UNIT
?PR?_COPYTOCODESPACE?FDL. . . . .  C SEG    01B8H       REL=UNIT
?PR?_FDL_XFERSPI?FDL. . . . . . .  C SEG    0019H       REL=UNIT
?_COPYTOCODESPACE?BYTE. . . . . .  D ADDR   0000H   R   SEG=?DT?_COPYTOCODESPACE?FDL
AA. . . . . . . . . . . . . . . .  B ADDR   00C0H.2 A   
AC. . . . . . . . . . . . . . . .  B ADDR   00D0H.6 A   
ACC . . . . . . . . . . . . . . .  D ADDR   00E0H   A   
ACCST . . . . . . . . . . . . . .  B ADDR   00D8H.2 A   
AD0BUSY . . . . . . . . . . . . .  B ADDR   00E8H.4 A   
AD0CM0. . . . . . . . . . . . . .  B ADDR   00E8H.2 A   
AD0CM1. . . . . . . . . . . . . .  B ADDR   00E8H.3 A   
AD0EN . . . . . . . . . . . . . .  B ADDR   00E8H.7 A   
AD0INT. . . . . . . . . . . . . .  B ADDR   00E8H.5 A   
AD0LJST . . . . . . . . . . . . .  B ADDR   00E8H.0 A   
AD0TM . . . . . . . . . . . . . .  B ADDR   00E8H.6 A   
AD0WINT . . . . . . . . . . . . .  B ADDR   00E8H.1 A   
AD2BUSY . . . . . . . . . . . . .  B ADDR   00E8H.4 A   
AD2CM0. . . . . . . . . . . . . .  B ADDR   00E8H.1 A   
AD2CM1. . . . . . . . . . . . . .  B ADDR   00E8H.2 A   
AD2CM2. . . . . . . . . . . . . .  B ADDR   00E8H.3 A   
AD2EN . . . . . . . . . . . . . .  B ADDR   00E8H.7 A   
AD2INT. . . . . . . . . . . . . .  B ADDR   00E8H.5 A   
AD2TM . . . . . . . . . . . . . .  B ADDR   00E8H.6 A   
AD2WINT . . . . . . . . . . . . .  B ADDR   00E8H.0 A   
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE    18

ADC0. . . . . . . . . . . . . . .  D ADDR   00BEH   A   
ADC0CF. . . . . . . . . . . . . .  D ADDR   00BCH   A   
ADC0CN. . . . . . . . . . . . . .  D ADDR   00E8H   A   
ADC0GT. . . . . . . . . . . . . .  D ADDR   00C4H   A   
ADC0GTH . . . . . . . . . . . . .  D ADDR   00C5H   A   
ADC0GTL . . . . . . . . . . . . .  D ADDR   00C4H   A   
ADC0H . . . . . . . . . . . . . .  D ADDR   00BFH   A   
ADC0L . . . . . . . . . . . . . .  D ADDR   00BEH   A   
ADC0LT. . . . . . . . . . . . . .  D ADDR   00C6H   A   
ADC0LTH . . . . . . . . . . . . .  D ADDR   00C7H   A   
ADC0LTL . . . . . . . . . . . . .  D ADDR   00C6H   A   
ADC2. . . . . . . . . . . . . . .  D ADDR   00BEH   A   
ADC2CF. . . . . . . . . . . . . .  D ADDR   00BCH   A   
ADC2CN. . . . . . . . . . . . . .  D ADDR   00E8H   A   
ADC2GT. . . . . . . . . . . . . .  D ADDR   00C4H   A   
ADC2LT. . . . . . . . . . . . . .  D ADDR   00C6H   A   
AMX0CF. . . . . . . . . . . . . .  D ADDR   00BAH   A   
AMX0SL. . . . . . . . . . . . . .  D ADDR   00BBH   A   
AMX2CF. . . . . . . . . . . . . .  D ADDR   00BAH   A   
AMX2SL. . . . . . . . . . . . . .  D ADDR   00BBH   A   
B . . . . . . . . . . . . . . . .  D ADDR   00F0H   A   
BUSY. . . . . . . . . . . . . . .  B ADDR   00C0H.7 A   
CCF0. . . . . . . . . . . . . . .  B ADDR   00D8H.0 A   
CCF1. . . . . . . . . . . . . . .  B ADDR   00D8H.1 A   
CCF2. . . . . . . . . . . . . . .  B ADDR   00D8H.2 A   
CCF3. . . . . . . . . . . . . . .  B ADDR   00D8H.3 A   
CCF4. . . . . . . . . . . . . . .  B ADDR   00D8H.4 A   
CCF5. . . . . . . . . . . . . . .  B ADDR   00D8H.5 A   
CCH0CN. . . . . . . . . . . . . .  D ADDR   00A1H   A   
CCH0LC. . . . . . . . . . . . . .  D ADDR   00A3H   A   
CCH0MA. . . . . . . . . . . . . .  D ADDR   009AH   A   
CCH0TN. . . . . . . . . . . . . .  D ADDR   00A2H   A   
CF. . . . . . . . . . . . . . . .  B ADDR   00D8H.7 A   
CKCON . . . . . . . . . . . . . .  D ADDR   008EH   A   
CLKSEL. . . . . . . . . . . . . .  D ADDR   0097H   A   
CP0EN . . . . . . . . . . . . . .  B ADDR   0088H.7 A   
CP0FIF. . . . . . . . . . . . . .  B ADDR   0088H.4 A   
CP0HYN0 . . . . . . . . . . . . .  B ADDR   0088H.0 A   
CP0HYN1 . . . . . . . . . . . . .  B ADDR   0088H.1 A   
CP0HYP0 . . . . . . . . . . . . .  B ADDR   0088H.2 A   
CP0HYP1 . . . . . . . . . . . . .  B ADDR   0088H.3 A   
CP0OUT. . . . . . . . . . . . . .  B ADDR   0088H.6 A   
CP0RIF. . . . . . . . . . . . . .  B ADDR   0088H.5 A   
CP1EN . . . . . . . . . . . . . .  B ADDR   0088H.7 A   
CP1FIF. . . . . . . . . . . . . .  B ADDR   0088H.4 A   
CP1HYN0 . . . . . . . . . . . . .  B ADDR   0088H.0 A   
CP1HYN1 . . . . . . . . . . . . .  B ADDR   0088H.1 A   
CP1HYP0 . . . . . . . . . . . . .  B ADDR   0088H.2 A   
CP1HYP1 . . . . . . . . . . . . .  B ADDR   0088H.3 A   
CP1OUT. . . . . . . . . . . . . .  B ADDR   0088H.6 A   
CP1RIF. . . . . . . . . . . . . .  B ADDR   0088H.5 A   
CPRL2 . . . . . . . . . . . . . .  B ADDR   00C8H.0 A   
CPRL3 . . . . . . . . . . . . . .  B ADDR   00C8H.0 A   
CPRL4 . . . . . . . . . . . . . .  B ADDR   00C8H.0 A   
CPT0CN. . . . . . . . . . . . . .  D ADDR   0088H   A   
CPT0MD. . . . . . . . . . . . . .  D ADDR   0089H   A   
CPT1CN. . . . . . . . . . . . . .  D ADDR   0088H   A   
CPT1MD. . . . . . . . . . . . . .  D ADDR   0089H   A   
CR. . . . . . . . . . . . . . . .  B ADDR   00D8H.6 A   
CT2 . . . . . . . . . . . . . . .  B ADDR   00C8H.1 A   
CT3 . . . . . . . . . . . . . . .  B ADDR   00C8H.1 A   
CT4 . . . . . . . . . . . . . . .  B ADDR   00C8H.1 A   
CY. . . . . . . . . . . . . . . .  B ADDR   00D0H.7 A   
DAC0. . . . . . . . . . . . . . .  D ADDR   00D2H   A   
DAC0CN. . . . . . . . . . . . . .  D ADDR   00D4H   A   
DAC0H . . . . . . . . . . . . . .  D ADDR   00D3H   A   
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE    19

DAC0L . . . . . . . . . . . . . .  D ADDR   00D2H   A   
DAC1. . . . . . . . . . . . . . .  D ADDR   00D2H   A   
DAC1CN. . . . . . . . . . . . . .  D ADDR   00D4H   A   
DAC1H . . . . . . . . . . . . . .  D ADDR   00D3H   A   
DAC1L . . . . . . . . . . . . . .  D ADDR   00D2H   A   
DF_CS1. . . . . . . . . . . . . .  B ADDR   00F8H.1 A   
DF_RST. . . . . . . . . . . . . .  B ADDR   00F8H.2 A   
DF_WP . . . . . . . . . . . . . .  B ADDR   00F8H.0 A   
DIGIN0. . . . . . . . . . . . . .  B ADDR   00D8H.0 A   
DIGIN1. . . . . . . . . . . . . .  B ADDR   00D8H.1 A   
DIGIN2. . . . . . . . . . . . . .  B ADDR   00D8H.2 A   
DIGIN3. . . . . . . . . . . . . .  B ADDR   00D8H.3 A   
DIGIN4. . . . . . . . . . . . . .  B ADDR   00D8H.4 A   
DIGIN5. . . . . . . . . . . . . .  B ADDR   00D8H.5 A   
DIGIN6. . . . . . . . . . . . . .  B ADDR   00D8H.6 A   
DIGOUT0 . . . . . . . . . . . . .  B ADDR   00C8H.0 A   
DIGOUT1 . . . . . . . . . . . . .  B ADDR   00C8H.1 A   
DIGOUT2 . . . . . . . . . . . . .  B ADDR   00C8H.2 A   
DIGOUT3 . . . . . . . . . . . . .  B ADDR   00C8H.3 A   
DIGOUT4 . . . . . . . . . . . . .  B ADDR   00C8H.4 A   
DIGOUT5 . . . . . . . . . . . . .  B ADDR   00C8H.5 A   
DIGOUT6 . . . . . . . . . . . . .  B ADDR   00C8H.6 A   
DP. . . . . . . . . . . . . . . .  D ADDR   0082H   A   
DPH . . . . . . . . . . . . . . .  D ADDR   0083H   A   
DPL . . . . . . . . . . . . . . .  D ADDR   0082H   A   
EA. . . . . . . . . . . . . . . .  B ADDR   00A8H.7 A   
EA_SAVE?046 . . . . . . . . . . .  D ADDR   0005H   R   SEG=?DT?_COPYTOCODESPACE?FDL
EIE1. . . . . . . . . . . . . . .  D ADDR   00E6H   A   
EIE2. . . . . . . . . . . . . . .  D ADDR   00E7H   A   
EIP1. . . . . . . . . . . . . . .  D ADDR   00F6H   A   
EIP2. . . . . . . . . . . . . . .  D ADDR   00F7H   A   
EMI0CF. . . . . . . . . . . . . .  D ADDR   00A3H   A   
EMI0CN. . . . . . . . . . . . . .  D ADDR   00A2H   A   
EMI0TC. . . . . . . . . . . . . .  D ADDR   00A1H   A   
EN3VGPS . . . . . . . . . . . . .  B ADDR   00F8H.4 A   
EN3VIF. . . . . . . . . . . . . .  B ADDR   00F8H.5 A   
EN5V. . . . . . . . . . . . . . .  B ADDR   00F8H.7 A   
ENSMB . . . . . . . . . . . . . .  B ADDR   00C0H.6 A   
ENSMBPU . . . . . . . . . . . . .  B ADDR   00F8H.3 A   
ES0 . . . . . . . . . . . . . . .  B ADDR   00A8H.4 A   
ET0 . . . . . . . . . . . . . . .  B ADDR   00A8H.1 A   
ET1 . . . . . . . . . . . . . . .  B ADDR   00A8H.3 A   
ET2 . . . . . . . . . . . . . . .  B ADDR   00A8H.5 A   
EX0 . . . . . . . . . . . . . . .  B ADDR   00A8H.0 A   
EX1 . . . . . . . . . . . . . . .  B ADDR   00A8H.2 A   
EXEN2 . . . . . . . . . . . . . .  B ADDR   00C8H.3 A   
EXEN3 . . . . . . . . . . . . . .  B ADDR   00C8H.3 A   
EXEN4 . . . . . . . . . . . . . .  B ADDR   00C8H.3 A   
EXF2. . . . . . . . . . . . . . .  B ADDR   00C8H.6 A   
EXF3. . . . . . . . . . . . . . .  B ADDR   00C8H.6 A   
EXF4. . . . . . . . . . . . . . .  B ADDR   00C8H.6 A   
F0. . . . . . . . . . . . . . . .  B ADDR   00D0H.5 A   
F1. . . . . . . . . . . . . . . .  B ADDR   00D0H.1 A   
FDL . . . . . . . . . . . . . . .  N NUMB   -----       
FDL_DATAFLASH_READ_STATUS . . . .  C ADDR   0000H   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
FLACL . . . . . . . . . . . . . .  D ADDR   00B7H   A   
FLASHPAGE . . . . . . . . . . . .  X ADDR   -----       EXT
FLHBUSY . . . . . . . . . . . . .  B ADDR   0088H.0 A   
FLSCL . . . . . . . . . . . . . .  D ADDR   00B7H   A   
FLSTAT. . . . . . . . . . . . . .  D ADDR   0088H   A   
I?047 . . . . . . . . . . . . . .  D ADDR   0006H   R   SEG=?DT?_COPYTOCODESPACE?FDL
IE. . . . . . . . . . . . . . . .  D ADDR   00A8H   A   
IE0 . . . . . . . . . . . . . . .  B ADDR   0088H.1 A   
IE1 . . . . . . . . . . . . . . .  B ADDR   0088H.3 A   
IP. . . . . . . . . . . . . . . .  D ADDR   00B8H   A   
IT0 . . . . . . . . . . . . . . .  B ADDR   0088H.0 A   
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE    20

IT1 . . . . . . . . . . . . . . .  B ADDR   0088H.2 A   
L?0065. . . . . . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_FDL_XFERSPI?FDL
LASTPAGE?040. . . . . . . . . . .  D ADDR   0000H   R   SEG=?DT?_COPYTOCODESPACE?FDL
LED0. . . . . . . . . . . . . . .  B ADDR   00B0H.3 A   
LED1. . . . . . . . . . . . . . .  B ADDR   00B0H.6 A   
LED2. . . . . . . . . . . . . . .  B ADDR   00B0H.5 A   
LED3. . . . . . . . . . . . . . .  B ADDR   00B0H.4 A   
MAC0ACC0. . . . . . . . . . . . .  D ADDR   0093H   A   
MAC0ACC1. . . . . . . . . . . . .  D ADDR   0094H   A   
MAC0ACC2. . . . . . . . . . . . .  D ADDR   0095H   A   
MAC0ACC3. . . . . . . . . . . . .  D ADDR   0096H   A   
MAC0AH. . . . . . . . . . . . . .  D ADDR   00C2H   A   
MAC0AL. . . . . . . . . . . . . .  D ADDR   00C1H   A   
MAC0BH. . . . . . . . . . . . . .  D ADDR   0092H   A   
MAC0BL. . . . . . . . . . . . . .  D ADDR   0091H   A   
MAC0CF. . . . . . . . . . . . . .  D ADDR   00C3H   A   
MAC0HO. . . . . . . . . . . . . .  B ADDR   00C0H.3 A   
MAC0N . . . . . . . . . . . . . .  B ADDR   00C0H.0 A   
MAC0OVR . . . . . . . . . . . . .  D ADDR   0097H   A   
MAC0RNDH. . . . . . . . . . . . .  D ADDR   00CFH   A   
MAC0RNDL. . . . . . . . . . . . .  D ADDR   00CEH   A   
MAC0SO. . . . . . . . . . . . . .  B ADDR   00C0H.1 A   
MAC0STA . . . . . . . . . . . . .  D ADDR   00C0H   A   
MAC0Z . . . . . . . . . . . . . .  B ADDR   00C0H.2 A   
MCE1. . . . . . . . . . . . . . .  B ADDR   0098H.5 A   
MODF. . . . . . . . . . . . . . .  B ADDR   00F8H.5 A   
NSSMD0. . . . . . . . . . . . . .  B ADDR   00F8H.2 A   
NSSMD1. . . . . . . . . . . . . .  B ADDR   00F8H.3 A   
OSCICL. . . . . . . . . . . . . .  D ADDR   008BH   A   
OSCICN. . . . . . . . . . . . . .  D ADDR   008AH   A   
OSCXCN. . . . . . . . . . . . . .  D ADDR   008CH   A   
OV. . . . . . . . . . . . . . . .  B ADDR   00D0H.2 A   
P . . . . . . . . . . . . . . . .  B ADDR   00D0H.0 A   
P0. . . . . . . . . . . . . . . .  D ADDR   0080H   A   
P0MDOUT . . . . . . . . . . . . .  D ADDR   00A4H   A   
P1. . . . . . . . . . . . . . . .  D ADDR   0090H   A   
P1MDIN. . . . . . . . . . . . . .  D ADDR   00ADH   A   
P1MDOUT . . . . . . . . . . . . .  D ADDR   00A5H   A   
P2. . . . . . . . . . . . . . . .  D ADDR   00A0H   A   
P2MDOUT . . . . . . . . . . . . .  D ADDR   00A6H   A   
P3. . . . . . . . . . . . . . . .  D ADDR   00B0H   A   
P3MDOUT . . . . . . . . . . . . .  D ADDR   00A7H   A   
P4. . . . . . . . . . . . . . . .  D ADDR   00C8H   A   
P4MDOUT . . . . . . . . . . . . .  D ADDR   009CH   A   
P5. . . . . . . . . . . . . . . .  D ADDR   00D8H   A   
P5MDOUT . . . . . . . . . . . . .  D ADDR   009DH   A   
P6. . . . . . . . . . . . . . . .  D ADDR   00E8H   A   
P6MDOUT . . . . . . . . . . . . .  D ADDR   009EH   A   
P7. . . . . . . . . . . . . . . .  D ADDR   00F8H   A   
P7MDOUT . . . . . . . . . . . . .  D ADDR   009FH   A   
PAGE?048. . . . . . . . . . . . .  D ADDR   0008H   R   SEG=?DT?_COPYTOCODESPACE?FDL
PCA0. . . . . . . . . . . . . . .  D ADDR   00F9H   A   
PCA0CN. . . . . . . . . . . . . .  D ADDR   00D8H   A   
PCA0CP0 . . . . . . . . . . . . .  D ADDR   00FBH   A   
PCA0CP1 . . . . . . . . . . . . .  D ADDR   00FDH   A   
PCA0CP2 . . . . . . . . . . . . .  D ADDR   00E9H   A   
PCA0CP3 . . . . . . . . . . . . .  D ADDR   00EBH   A   
PCA0CP4 . . . . . . . . . . . . .  D ADDR   00EDH   A   
PCA0CP5 . . . . . . . . . . . . .  D ADDR   00E1H   A   
PCA0CPH0. . . . . . . . . . . . .  D ADDR   00FCH   A   
PCA0CPH1. . . . . . . . . . . . .  D ADDR   00FEH   A   
PCA0CPH2. . . . . . . . . . . . .  D ADDR   00EAH   A   
PCA0CPH3. . . . . . . . . . . . .  D ADDR   00ECH   A   
PCA0CPH4. . . . . . . . . . . . .  D ADDR   00EEH   A   
PCA0CPH5. . . . . . . . . . . . .  D ADDR   00E2H   A   
PCA0CPL0. . . . . . . . . . . . .  D ADDR   00FBH   A   
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE    21

PCA0CPL1. . . . . . . . . . . . .  D ADDR   00FDH   A   
PCA0CPL2. . . . . . . . . . . . .  D ADDR   00E9H   A   
PCA0CPL3. . . . . . . . . . . . .  D ADDR   00EBH   A   
PCA0CPL4. . . . . . . . . . . . .  D ADDR   00EDH   A   
PCA0CPL5. . . . . . . . . . . . .  D ADDR   00E1H   A   
PCA0CPM0. . . . . . . . . . . . .  D ADDR   00DAH   A   
PCA0CPM1. . . . . . . . . . . . .  D ADDR   00DBH   A   
PCA0CPM2. . . . . . . . . . . . .  D ADDR   00DCH   A   
PCA0CPM3. . . . . . . . . . . . .  D ADDR   00DDH   A   
PCA0CPM4. . . . . . . . . . . . .  D ADDR   00DEH   A   
PCA0CPM5. . . . . . . . . . . . .  D ADDR   00DFH   A   
PCA0H . . . . . . . . . . . . . .  D ADDR   00FAH   A   
PCA0L . . . . . . . . . . . . . .  D ADDR   00F9H   A   
PCA0MD. . . . . . . . . . . . . .  D ADDR   00D9H   A   
PCON. . . . . . . . . . . . . . .  D ADDR   0087H   A   
PLL0CN. . . . . . . . . . . . . .  D ADDR   0089H   A   
PLL0DIV . . . . . . . . . . . . .  D ADDR   008DH   A   
PLL0FLT . . . . . . . . . . . . .  D ADDR   008FH   A   
PLL0MUL . . . . . . . . . . . . .  D ADDR   008EH   A   
PS. . . . . . . . . . . . . . . .  B ADDR   00B8H.4 A   
PSBANK. . . . . . . . . . . . . .  D ADDR   00B1H   A   
PSCTL . . . . . . . . . . . . . .  D ADDR   008FH   A   
PSW . . . . . . . . . . . . . . .  D ADDR   00D0H   A   
PT0 . . . . . . . . . . . . . . .  B ADDR   00B8H.1 A   
PT1 . . . . . . . . . . . . . . .  B ADDR   00B8H.3 A   
PT2 . . . . . . . . . . . . . . .  B ADDR   00B8H.5 A   
PWRITE?045. . . . . . . . . . . .  D ADDR   0002H   R   SEG=?DT?_COPYTOCODESPACE?FDL
PX0 . . . . . . . . . . . . . . .  B ADDR   00B8H.0 A   
PX1 . . . . . . . . . . . . . . .  B ADDR   00B8H.2 A   
Q?041 . . . . . . . . . . . . . .  D ADDR   000BH   R   SEG=?DT?_COPYTOCODESPACE?FDL
Q?043 . . . . . . . . . . . . . .  D ADDR   000BH   R   SEG=?DT?_COPYTOCODESPACE?FDL
Q?044 . . . . . . . . . . . . . .  D ADDR   000BH   R   SEG=?DT?_COPYTOCODESPACE?FDL
Q?252 . . . . . . . . . . . . . .  D ADDR   0000H   R   SEG=?DT?FDL_DATAFLASH_READ_STATUS?FDL
RB80. . . . . . . . . . . . . . .  B ADDR   0098H.2 A   
RB81. . . . . . . . . . . . . . .  B ADDR   0098H.2 A   
RCAP2 . . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP2H. . . . . . . . . . . . . .  D ADDR   00CBH   A   
RCAP2L. . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP3 . . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP3H. . . . . . . . . . . . . .  D ADDR   00CBH   A   
RCAP3L. . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP4 . . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP4H. . . . . . . . . . . . . .  D ADDR   00CBH   A   
RCAP4L. . . . . . . . . . . . . .  D ADDR   00CAH   A   
REF0CN. . . . . . . . . . . . . .  D ADDR   00D1H   A   
REN0. . . . . . . . . . . . . . .  B ADDR   0098H.4 A   
REN1. . . . . . . . . . . . . . .  B ADDR   0098H.4 A   
RI0 . . . . . . . . . . . . . . .  B ADDR   0098H.0 A   
RI1 . . . . . . . . . . . . . . .  B ADDR   0098H.0 A   
RS0 . . . . . . . . . . . . . . .  B ADDR   00D0H.3 A   
RS1 . . . . . . . . . . . . . . .  B ADDR   00D0H.4 A   
RSTSRC. . . . . . . . . . . . . .  D ADDR   00EFH   A   
RXOVRN. . . . . . . . . . . . . .  B ADDR   00F8H.4 A   
S1MODE. . . . . . . . . . . . . .  B ADDR   0098H.7 A   
SADDR0. . . . . . . . . . . . . .  D ADDR   00A9H   A   
SADEN0. . . . . . . . . . . . . .  D ADDR   00B9H   A   
SBUF0 . . . . . . . . . . . . . .  D ADDR   0099H   A   
SBUF1 . . . . . . . . . . . . . .  D ADDR   0099H   A   
SCON0 . . . . . . . . . . . . . .  D ADDR   0098H   A   
SCON1 . . . . . . . . . . . . . .  D ADDR   0098H   A   
SFRLAST . . . . . . . . . . . . .  D ADDR   0086H   A   
SFRNEXT . . . . . . . . . . . . .  D ADDR   0085H   A   
SFRPAGE . . . . . . . . . . . . .  D ADDR   0084H   A   
SFRPGCN . . . . . . . . . . . . .  D ADDR   0096H   A   
SI. . . . . . . . . . . . . . . .  B ADDR   00C0H.3 A   
SM00. . . . . . . . . . . . . . .  B ADDR   0098H.7 A   
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE    22

SM10. . . . . . . . . . . . . . .  B ADDR   0098H.6 A   
SM20. . . . . . . . . . . . . . .  B ADDR   0098H.5 A   
SMB0ADR . . . . . . . . . . . . .  D ADDR   00C3H   A   
SMB0CN. . . . . . . . . . . . . .  D ADDR   00C0H   A   
SMB0CR. . . . . . . . . . . . . .  D ADDR   00CFH   A   
SMB0DAT . . . . . . . . . . . . .  D ADDR   00C2H   A   
SMB0STA . . . . . . . . . . . . .  D ADDR   00C1H   A   
SMBFTE. . . . . . . . . . . . . .  B ADDR   00C0H.1 A   
SMBSCL. . . . . . . . . . . . . .  B ADDR   0080H.7 A   
SMBSDA. . . . . . . . . . . . . .  B ADDR   0080H.6 A   
SMBTOE. . . . . . . . . . . . . .  B ADDR   00C0H.0 A   
SP. . . . . . . . . . . . . . . .  D ADDR   0081H   A   
SPI0CFG . . . . . . . . . . . . .  D ADDR   009AH   A   
SPI0CKR . . . . . . . . . . . . .  D ADDR   009DH   A   
SPI0CN. . . . . . . . . . . . . .  D ADDR   00F8H   A   
SPI0DAT . . . . . . . . . . . . .  D ADDR   009BH   A   
SPIEN . . . . . . . . . . . . . .  B ADDR   00F8H.0 A   
SPIF. . . . . . . . . . . . . . .  B ADDR   00F8H.7 A   
SSTA0 . . . . . . . . . . . . . .  D ADDR   0091H   A   
STA . . . . . . . . . . . . . . .  B ADDR   00C0H.5 A   
STATUS?049. . . . . . . . . . . .  D ADDR   000AH   R   SEG=?DT?_COPYTOCODESPACE?FDL
STO . . . . . . . . . . . . . . .  B ADDR   00C0H.4 A   
SW1 . . . . . . . . . . . . . . .  B ADDR   00E8H.0 A   
TB80. . . . . . . . . . . . . . .  B ADDR   0098H.3 A   
TB81. . . . . . . . . . . . . . .  B ADDR   0098H.3 A   
TCON. . . . . . . . . . . . . . .  D ADDR   0088H   A   
TEMP?042. . . . . . . . . . . . .  D ADDR   000BH   R   SEG=?DT?_COPYTOCODESPACE?FDL
TF0 . . . . . . . . . . . . . . .  B ADDR   0088H.5 A   
TF1 . . . . . . . . . . . . . . .  B ADDR   0088H.7 A   
TF2 . . . . . . . . . . . . . . .  B ADDR   00C8H.7 A   
TF3 . . . . . . . . . . . . . . .  B ADDR   00C8H.7 A   
TF4 . . . . . . . . . . . . . . .  B ADDR   00C8H.7 A   
TH0 . . . . . . . . . . . . . . .  D ADDR   008CH   A   
TH1 . . . . . . . . . . . . . . .  D ADDR   008DH   A   
TI0 . . . . . . . . . . . . . . .  B ADDR   0098H.1 A   
TI1 . . . . . . . . . . . . . . .  B ADDR   0098H.1 A   
TL0 . . . . . . . . . . . . . . .  D ADDR   008AH   A   
TL1 . . . . . . . . . . . . . . .  D ADDR   008BH   A   
TMOD. . . . . . . . . . . . . . .  D ADDR   0089H   A   
TMR2. . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR2CF. . . . . . . . . . . . . .  D ADDR   00C9H   A   
TMR2CN. . . . . . . . . . . . . .  D ADDR   00C8H   A   
TMR2H . . . . . . . . . . . . . .  D ADDR   00CDH   A   
TMR2L . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR3. . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR3CF. . . . . . . . . . . . . .  D ADDR   00C9H   A   
TMR3CN. . . . . . . . . . . . . .  D ADDR   00C8H   A   
TMR3H . . . . . . . . . . . . . .  D ADDR   00CDH   A   
TMR3L . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR4. . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR4CF. . . . . . . . . . . . . .  D ADDR   00C9H   A   
TMR4CN. . . . . . . . . . . . . .  D ADDR   00C8H   A   
TMR4H . . . . . . . . . . . . . .  D ADDR   00CDH   A   
TMR4L . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TR0 . . . . . . . . . . . . . . .  B ADDR   0088H.4 A   
TR1 . . . . . . . . . . . . . . .  B ADDR   0088H.6 A   
TR2 . . . . . . . . . . . . . . .  B ADDR   00C8H.2 A   
TR3 . . . . . . . . . . . . . . .  B ADDR   00C8H.2 A   
TR4 . . . . . . . . . . . . . . .  B ADDR   00C8H.2 A   
TXBMT . . . . . . . . . . . . . .  B ADDR   00F8H.1 A   
WCOL. . . . . . . . . . . . . . .  B ADDR   00F8H.6 A   
WDTCN . . . . . . . . . . . . . .  D ADDR   00FFH   A   
XBR0. . . . . . . . . . . . . . .  D ADDR   00E1H   A   
XBR1. . . . . . . . . . . . . . .  D ADDR   00E2H   A   
XBR2. . . . . . . . . . . . . . .  D ADDR   00E3H   A   
_COPYTOCODESPACE. . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_COPYTOCODESPACE?FDL
A51 MACRO ASSEMBLER  FDL                                                                  11/25/2014 08:51:58 PAGE    23

_FDL_XFERSPI. . . . . . . . . . .  C ADDR   0008H   R   SEG=?PR?_FDL_XFERSPI?FDL


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
