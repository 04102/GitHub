A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE     1


MACRO ASSEMBLER A51 V8.02b
OBJECT MODULE PLACED IN .\fdlold.obj
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\A51.EXE ..\CommonFiles\fdlold.SRC SET(SMALL) DEBUG PRINT(.\fdlold.lst) OBJECT(.\fd
                      lold.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ; ..\CommonFiles\fdl.SRC generated from: ..\CommonFiles\fdl.c
                       2     ; COMPILER INVOKED BY:
                       3     ;        C:\Keil\C51\BIN\C51.EXE ..\CommonFiles\fdl.c OPTIMIZE(SIZE) BROWSE INCDIR(C:\Keil\
                             C51\INC\;C:\Keil\Traqmate\132micro\CommonFiles\;C:\Keil\Traqmate\132micro\SU\) DB OE SRC DE
                             FINE(SENSOR,EXTCLK6,NODEBUG) DEBUG OBJECTEXTEND PRINT(.\fdl.lst) OBJECT(.\fdl.obj)
                       4     
                       5     $nomod51 
                       6     
                       7     NAME    FDL
                       8     
  00DA                 9     CCF2    BIT     0D8H.2
  009B                10     TB80    BIT     098H.3
  009D                11     SPI0CKR DATA    09DH
  00DB                12     CCF3    BIT     0D8H.3
  009B                13     TB81    BIT     098H.3
  0080                14     P0      DATA    080H
  00F8                15     SPIEN   BIT     0F8H.0
  00DC                16     CCF4    BIT     0D8H.4
  009F                17     SM00    BIT     098H.7
  0090                18     P1      DATA    090H
  008F                19     PLL0FLT DATA    08FH
  00DD                20     CCF5    BIT     0D8H.5
  00C2                21     AA      BIT     0C0H.2
  009E                22     SM10    BIT     098H.6
  00FF                23     WDTCN   DATA    0FFH
  00A0                24     P2      DATA    0A0H
  009D                25     SM20    BIT     098H.5
  00BC                26     ADC0CF  DATA    0BCH
  00B0                27     P3      DATA    0B0H
  00D6                28     AC      BIT     0D0H.6
  00C8                29     P4      DATA    0C8H
  00F9                30     PCA0    DATA    0F9H
  00E6                31     EIE1    DATA    0E6H
  00D8                32     P5      DATA    0D8H
  00BC                33     ADC2CF  DATA    0BCH
  00AF                34     EA      BIT     0A8H.7
  00E8                35     P6      DATA    0E8H
  00E7                36     EIE2    DATA    0E7H
  009D                37     MCE1    BIT     098H.5
  00F8                38     P7      DATA    0F8H
  008F                39     PSCTL   DATA    08FH
  00DF                40     CF      BIT     0D8H.7
  008E                41     PLL0MUL DATA    08EH
  00E8                42     ADC0CN  DATA    0E8H
  00D4                43     DAC0CN  DATA    0D4H
  0084                44     SFRPAGE DATA    084H
  00D4                45     DAC1CN  DATA    0D4H
  00C3                46     MAC0CF  DATA    0C3H
  00C2                47     MAC0AH  DATA    0C2H
  00A4                48     P0MDOUT DATA    0A4H
  00E8                49     ADC2CN  DATA    0E8H
  00A5                50     P1MDOUT DATA    0A5H
  0092                51     MAC0BH  DATA    092H
  00A8                52     IE      DATA    0A8H
  00A6                53     P2MDOUT DATA    0A6H
  009A                54     CCH0MA  DATA    09AH
  00A7                55     P3MDOUT DATA    0A7H
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE     2

  00A3                56     CCH0LC  DATA    0A3H
  00F6                57     EIP1    DATA    0F6H
  00C1                58     MAC0AL  DATA    0C1H
  009C                59     P4MDOUT DATA    09CH
  00F9                60     TXBMT   BIT     0F8H.1
  00F7                61     EIP2    DATA    0F7H
  00A1                62     CCH0CN  DATA    0A1H
  009D                63     P5MDOUT DATA    09DH
  0091                64     MAC0BL  DATA    091H
  00FC                65     PCA0CPH0        DATA    0FCH
  009E                66     P6MDOUT DATA    09EH
  00FE                67     PCA0CPH1        DATA    0FEH
  009F                68     P7MDOUT DATA    09FH
  0082                69     DP      DATA    082H
  00EA                70     PCA0CPH2        DATA    0EAH
  00C4                71     ADC0GT  DATA    0C4H
  00DE                72     CR      BIT     0D8H.6
  00EC                73     PCA0CPH3        DATA    0ECH
  00CE                74     EXF2    BIT     0C8H.6
  009C                75     REN0    BIT     098H.4
  00FB                76     PCA0CPL0        DATA    0FBH
  00EE                77     PCA0CPH4        DATA    0EEH
  00A3                78     EMI0CF  DATA    0A3H
  0096                79     SFRPGCN DATA    096H
  00CE                80     EXF3    BIT     0C8H.6
  009C                81     REN1    BIT     098H.4
  00FD                82     PCA0CPL1        DATA    0FDH
  00E2                83     PCA0CPH5        DATA    0E2H
  00DA                84     PCA0CPM0        DATA    0DAH
  00D9                85     PCA0MD  DATA    0D9H
  00D8                86     PCA0CN  DATA    0D8H
  00C4                87     ADC2GT  DATA    0C4H
  00CE                88     EXF4    BIT     0C8H.6
  00E9                89     PCA0CPL2        DATA    0E9H
  00DB                90     PCA0CPM1        DATA    0DBH
  00EB                91     PCA0CPL3        DATA    0EBH
  00DC                92     PCA0CPM2        DATA    0DCH
  00B8                93     IP      DATA    0B8H
  00C6                94     ADC0LT  DATA    0C6H
  00C3                95     MAC0HO  BIT     0C0H.3
  008C                96     CP0FIF  BIT     088H.4
  00ED                97     PCA0CPL4        DATA    0EDH
  00DD                98     PCA0CPM3        DATA    0DDH
  008C                99     CP1FIF  BIT     088H.4
  00E1               100     PCA0CPL5        DATA    0E1H
  00DE               101     PCA0CPM4        DATA    0DEH
  00D7               102     CY      BIT     0D0H.7
  00C3               103     SI      BIT     0C0H.3
  00DF               104     PCA0CPM5        DATA    0DFH
  00C6               105     ADC2LT  DATA    0C6H
  00E1               106     XBR0    DATA    0E1H
  00B9               107     SADEN0  DATA    0B9H
  00E2               108     XBR1    DATA    0E2H
  00A2               109     EMI0CN  DATA    0A2H
  00E3               110     XBR2    DATA    0E3H
  0088               111     FLHBUSY BIT     088H.0
  00D1               112     REF0CN  DATA    0D1H
  00A9               113     SADDR0  DATA    0A9H
  00BA               114     AMX0CF  DATA    0BAH
  00ED               115     AD0INT  BIT     0E8H.5
  00CB               116     RCAP2H  DATA    0CBH
  00A2               117     CCH0TN  DATA    0A2H
  0086               118     SFRLAST DATA    086H
  00BC               119     PS      BIT     0B8H.4
  00CB               120     RCAP3H  DATA    0CBH
  00BA               121     AMX2CF  DATA    0BAH
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE     3

  0081               122     SP      DATA    081H
  00ED               123     AD2INT  BIT     0E8H.5
  00CB               124     RCAP4H  DATA    0CBH
  00A1               125     EMI0TC  DATA    0A1H
  00D2               126     OV      BIT     0D0H.2
  00C1               127     MAC0SO  BIT     0C0H.1
  00C0               128     SMB0CN  DATA    0C0H
  00CC               129     TMR2    DATA    0CCH
  008D               130     CP0RIF  BIT     088H.5
  00CA               131     RCAP2L  DATA    0CAH
  00CC               132     TMR3    DATA    0CCH
  00FD               133     MODF    BIT     0F8H.5
  008D               134     CP1RIF  BIT     088H.5
  00CA               135     RCAP3L  DATA    0CAH
  00CC               136     TMR4    DATA    0CCH
  00CA               137     RCAP4L  DATA    0CAH
  00CF               138     SMB0CR  DATA    0CFH
  0089               139     CPT0MD  DATA    089H
  0088               140     CPT0CN  DATA    088H
  009F               141     S1MODE  BIT     098H.7
  00AD               142     P1MDIN  DATA    0ADH
  0089               143     PLL0CN  DATA    089H
  0089               144     CPT1MD  DATA    089H
  0088               145     CPT1CN  DATA    088H
  0085               146     SFRNEXT DATA    085H
  00F8               147     SPI0CN  DATA    0F8H
  00CF               148     MAC0RNDH        DATA    0CFH
  00C9               149     TMR2CF  DATA    0C9H
  00C9               150     TMR3CF  DATA    0C9H
  0087               151     PCON    DATA    087H
  00C9               152     TMR4CF  DATA    0C9H
  00FF               153     SPIF    BIT     0F8H.7
  00CE               154     MAC0RNDL        DATA    0CEH
  0089               155     TMOD    DATA    089H
  0088               156     TCON    DATA    088H
  00FE               157     WCOL    BIT     0F8H.6
  00FA               158     NSSMD0  BIT     0F8H.2
  00BB               159     AMX0SL  DATA    0BBH
  00FB               160     NSSMD1  BIT     0F8H.3
  00C8               161     TMR2CN  DATA    0C8H
  00C8               162     TMR3CN  DATA    0C8H
  00BB               163     AMX2SL  DATA    0BBH
  00C8               164     TMR4CN  DATA    0C8H
  008E               165     CP0OUT  BIT     088H.6
  008E               166     CP1OUT  BIT     088H.6
  0089               167     IE0     BIT     088H.1
  008B               168     IE1     BIT     088H.3
  008B               169     OSCICL  DATA    08BH
  0097               170     CLKSEL  DATA    097H
  00F0               171     B       DATA    0F0H
  00D3               172     DAC0H   DATA    0D3H
  00BF               173     ADC0H   DATA    0BFH
  00B1               174     PSBANK  DATA    0B1H
  008A               175     OSCICN  DATA    08AH
  00D3               176     DAC1H   DATA    0D3H
  00C1               177     SMBFTE  BIT     0C0H.1
  00C7               178     BUSY    BIT     0C0H.7
  00D2               179     DAC0L   DATA    0D2H
  00BE               180     ADC0L   DATA    0BEH
  00D2               181     DAC1L   DATA    0D2H
  00E0               182     ACC     DATA    0E0H
  00AC               183     ES0     BIT     0A8H.4
  00FB               184     PCA0CP0 DATA    0FBH
  00EF               185     AD0EN   BIT     0E8H.7
  00C9               186     CT2     BIT     0C8H.1
  00A9               187     ET0     BIT     0A8H.1
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE     4

  00FD               188     PCA0CP1 DATA    0FDH
  00C9               189     CT3     BIT     0C8H.1
  00AB               190     ET1     BIT     0A8H.3
  008D               191     TF0     BIT     088H.5
  00E9               192     PCA0CP2 DATA    0E9H
  00EF               193     AD2EN   BIT     0E8H.7
  00C9               194     CT4     BIT     0C8H.1
  00AD               195     ET2     BIT     0A8H.5
  0098               196     RI0     BIT     098H.0
  008F               197     TF1     BIT     088H.7
  00EB               198     PCA0CP3 DATA    0EBH
  00CF               199     TF2     BIT     0C8H.7
  00C0               200     SMBTOE  BIT     0C0H.0
  0098               201     RI1     BIT     098H.0
  008C               202     TH0     DATA    08CH
  00ED               203     PCA0CP4 DATA    0EDH
  00CF               204     TF3     BIT     0C8H.7
  00A8               205     EX0     BIT     0A8H.0
  0099               206     TI0     BIT     098H.1
  0088               207     IT0     BIT     088H.0
  00FA               208     PCA0H   DATA    0FAH
  008D               209     TH1     DATA    08DH
  00E1               210     PCA0CP5 DATA    0E1H
  00CF               211     TF4     BIT     0C8H.7
  00AA               212     EX1     BIT     0A8H.2
  0099               213     TI1     BIT     098H.1
  008A               214     IT1     BIT     088H.2
  00D0               215     P       BIT     0D0H.0
  00C0               216     MAC0N   BIT     0C0H.0
  008C               217     OSCXCN  DATA    08CH
  008A               218     TL0     DATA    08AH
  0088               219     FLSTAT  DATA    088H
  00F9               220     PCA0L   DATA    0F9H
  008B               221     TL1     DATA    08BH
  00B9               222     PT0     BIT     0B8H.1
  00D3               223     RS0     BIT     0D0H.3
  00BB               224     PT1     BIT     0B8H.3
  00D4               225     RS1     BIT     0D0H.4
  00BD               226     PT2     BIT     0B8H.5
  008C               227     TR0     BIT     088H.4
  00EE               228     AD0TM   BIT     0E8H.6
  008F               229     CP0EN   BIT     088H.7
  008E               230     TR1     BIT     088H.6
  00CA               231     TR2     BIT     0C8H.2
  00B8               232     PX0     BIT     0B8H.0
  008F               233     CP1EN   BIT     088H.7
  00CA               234     RCAP2   DATA    0CAH
  00EE               235     AD2TM   BIT     0E8H.6
  00CA               236     TR3     BIT     0C8H.2
  00BA               237     PX1     BIT     0B8H.2
  00CA               238     RCAP3   DATA    0CAH
  00CA               239     TR4     BIT     0C8H.2
  00CA               240     RCAP4   DATA    0CAH
  00C2               241     MAC0Z   BIT     0C0H.2
  0083               242     DPH     DATA    083H
  00C5               243     ADC0GTH DATA    0C5H
  0082               244     DPL     DATA    082H
  00C4               245     ADC0GTL DATA    0C4H
  0099               246     SBUF0   DATA    099H
  00C7               247     ADC0LTH DATA    0C7H
  0099               248     SBUF1   DATA    099H
  00CB               249     EXEN2   BIT     0C8H.3
  00EF               250     RSTSRC  DATA    0EFH
  00B7               251     FLACL   DATA    0B7H
  00CB               252     EXEN3   BIT     0C8H.3
  00C8               253     CPRL2   BIT     0C8H.0
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE     5

  0088               254     CP0HYN0 BIT     088H.0
  0098               255     SCON0   DATA    098H
  00CB               256     EXEN4   BIT     0C8H.3
  00C8               257     CPRL3   BIT     0C8H.0
  0088               258     CP1HYN0 BIT     088H.0
  0089               259     CP0HYN1 BIT     088H.1
  0098               260     SCON1   DATA    098H
  00C8               261     CPRL4   BIT     0C8H.0
  0089               262     CP1HYN1 BIT     088H.1
  008A               263     CP0HYP0 BIT     088H.2
  00C6               264     ADC0LTL DATA    0C6H
  008A               265     CP1HYP0 BIT     088H.2
  008B               266     CP0HYP1 BIT     088H.3
  00C5               267     STA     BIT     0C0H.5
  008B               268     CP1HYP1 BIT     088H.3
  00C3               269     SMB0ADR DATA    0C3H
  00C0               270     MAC0STA DATA    0C0H
  0091               271     SSTA0   DATA    091H
  00C2               272     SMB0DAT DATA    0C2H
  00CD               273     TMR2H   DATA    0CDH
  009A               274     SPI0CFG DATA    09AH
  00CD               275     TMR3H   DATA    0CDH
  008E               276     CKCON   DATA    08EH
  00CD               277     TMR4H   DATA    0CDH
  00FC               278     RXOVRN  BIT     0F8H.4
  00CC               279     TMR2L   DATA    0CCH
  00CC               280     TMR3L   DATA    0CCH
  00E8               281     AD0LJST BIT     0E8H.0
  00CC               282     TMR4L   DATA    0CCH
  00D5               283     F0      BIT     0D0H.5
  00B7               284     FLSCL   DATA    0B7H
  00EA               285     AD0CM0  BIT     0E8H.2
  00D1               286     F1      BIT     0D0H.1
  00C4               287     STO     BIT     0C0H.4
  00C6               288     ENSMB   BIT     0C0H.6
  00EB               289     AD0CM1  BIT     0E8H.3
  009B               290     SPI0DAT DATA    09BH
  00D2               291     DAC0    DATA    0D2H
  00BE               292     ADC0    DATA    0BEH
  00E9               293     AD2CM0  BIT     0E8H.1
  00D2               294     DAC1    DATA    0D2H
  00EA               295     AD2CM1  BIT     0E8H.2
  00E9               296     AD0WINT BIT     0E8H.1
  00EB               297     AD2CM2  BIT     0E8H.3
  00EC               298     AD0BUSY BIT     0E8H.4
  00D0               299     PSW     DATA    0D0H
  00BE               300     ADC2    DATA    0BEH
  0097               301     MAC0OVR DATA    097H
  0093               302     MAC0ACC0        DATA    093H
  00E8               303     AD2WINT BIT     0E8H.0
  0094               304     MAC0ACC1        DATA    094H
  00EC               305     AD2BUSY BIT     0E8H.4
  00D8               306     CCF0    BIT     0D8H.0
  009A               307     RB80    BIT     098H.2
  00C1               308     SMB0STA DATA    0C1H
  0095               309     MAC0ACC2        DATA    095H
  00D9               310     CCF1    BIT     0D8H.1
  009A               311     RB81    BIT     098H.2
  0096               312     MAC0ACC3        DATA    096H
  008D               313     PLL0DIV DATA    08DH
                     314     ?PR?_CopytoCodeSpace?FDL                 SEGMENT CODE 
                     315     ?DT?_CopytoCodeSpace?FDL                 SEGMENT DATA OVERLAYABLE 
                     316     ?PR?_FDL_xferSPI?FDL SEGMENT CODE 
                     317     ?PR?FDL_DataFlash_Read_Status?FDL        SEGMENT CODE 
                     318     ?DT?FDL_DataFlash_Read_Status?FDL        SEGMENT DATA OVERLAYABLE 
                     319             EXTRN   XDATA (flashpage)
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE     6

                     320             EXTRN   XDATA (numpages)
                     321             PUBLIC  FDL_DataFlash_Read_Status
                     322             PUBLIC  _FDL_xferSPI
                     323             PUBLIC  _CopytoCodeSpace
                     324     
----                 325             RSEG  ?DT?_CopytoCodeSpace?FDL
0000                 326     ?_CopytoCodeSpace?BYTE:
0000                 327        lastpage?040:   DS   2
000A                 328             ORG  10
000A                 329               q?041:   DS   2
000A                 330             ORG  10
000A                 331               q?042:   DS   2
0002                 332             ORG  2
0002                 333          pwrite?043:   DS   2
0004                 334             ORG  4
0004                 335         EA_save?044:   DS   1
0005                 336             ORG  5
0005                 337               i?045:   DS   2
0007                 338             ORG  7
0007                 339            page?046:   DS   2
0009                 340             ORG  9
0009                 341          status?047:   DS   1
                     342     
----                 343             RSEG  ?DT?FDL_DataFlash_Read_Status?FDL
0000                 344     ?FDL_DataFlash_Read_Status?BYTE:
0000                 345               q?250:   DS   2
                     346     ; // software downloader
                     347     ; //
                     348     ; // this must be less than 510 bytes when compiled which is very tight. It must
                     349     ; // not extend into address 0xFFFE or 0xFFFF, the micro flash lock bytes
                     350     ; // it is loaded at 0xFE00 and must be self-contained so the code copy will
                     351     ; // not overwrite it.
                     352     ; //
                     353     ; // initial implementation John Paulos, 04/26/2005
                     354     ; // re-written Glenn Stephens, 05/02/2005
                     355     ; //
                     356     ; 
                     357     ; #include <tmtypes.h>
                     358     ; #ifdef DISPLAY
                     359     ; #include <display.h>
                     360     ; #else
                     361     ; #include <sensor.h>
                     362     ; #endif
                     363     ; 
                     364     ; //#define DFWAITREAD do {int q; for (q=0; q<64; q++) ; } while(0)  // 64 seems to work we
                             ll. should be verified.
                     365     ; //#define DFWAITWRITE do {int q; for (q=0; q<64; q++) ; } while(0)  // longer for erase.
                     366     ; #define DFWAIT do {int q; for (q=0; q<64; q++) ; } while(0)  // longer for erase.
                     367     ; 
                     368     ; #pragma ASM
----                 369             CSEG    AT      0FE00h
FE00 80FE            370             JMP     $        
                     371     ; #pragma ENDASM
                     372     ; 
                     373     ; u08 FDL_xferSPI (u08);
                     374     ; u08 FDL_DataFlash_Read_Status(void);
                     375     ; 
                     376     ; void CopytoCodeSpace(u16 lastpage) {
                     377     
----                 378             RSEG  ?PR?_CopytoCodeSpace?FDL
0000                 379     _CopytoCodeSpace:
                     380             USING   0
                     381                             ; SOURCE LINE # 31
0000 8E00     F      382             MOV     lastpage?040,R6
0002 8F00     F      383             MOV     lastpage?040+01H,R7
                     384     ;       char xdata* data pwrite;
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE     7

                     385     ;       char EA_save;
                     386     ;       u16 i, page;
                     387     ;       u08 status;
                     388     ; 
                     389     ;       pwrite = 0x0;                                           // initialize code pointer
                     390                             ; SOURCE LINE # 37
0004 E4              391             CLR     A
0005 F500     F      392             MOV     pwrite?043,A
0007 F500     F      393             MOV     pwrite?043+01H,A
                     394     ; 
                     395     ;       EA_save = EA;                                           // save interrupt status
                     396                             ; SOURCE LINE # 39
0009 A2AF            397             MOV     C,EA
000B 33              398             RLC     A
000C F500     F      399             MOV     EA_save?044,A
                     400     ;       EA = 0;                                                         // disable interrup
                             ts
                     401                             ; SOURCE LINE # 40
000E C2AF            402             CLR     EA
                     403     ; 
                     404     ;       SFRPAGE = LEGACY_PAGE;
                     405                             ; SOURCE LINE # 42
0010 E4              406             CLR     A
0011 F584            407             MOV     SFRPAGE,A
                     408     ;       FLSCL |= 0x01;                                          // enable flash writes/eras
                             es from user software
                     409                             ; SOURCE LINE # 43
0013 43B701          410             ORL     FLSCL,#01H
                     411     ; 
                     412     ;       PSCTL = 0x03;                                           // movx writes erase flash 
                             page
                     413                             ; SOURCE LINE # 45
0016 758F03          414             MOV     PSCTL,#03H
0019                 415     ?C0001:
                     416     ;       while (pwrite < LAST_CODE_PAGE) {       //erase code space
                     417                             ; SOURCE LINE # 46
0019 C3              418             CLR     C
001A E500     F      419             MOV     A,pwrite?043
001C 94FC            420             SUBB    A,#0FCH
001E 5016            421             JNC     ?C0002
                     422     ;               *pwrite = 0x88;                                 // initiate page erase
                     423                             ; SOURCE LINE # 47
0020 850082   F      424             MOV     DPL,pwrite?043+01H
0023 850083   F      425             MOV     DPH,pwrite?043
0026 7488            426             MOV     A,#088H
0028 F0              427             MOVX    @DPTR,A
                     428     ;               pwrite += CODE_PAGE_SIZE;               // point to next page
                     429                             ; SOURCE LINE # 48
0029 E4              430             CLR     A
002A 2500     F      431             ADD     A,pwrite?043+01H
002C F500     F      432             MOV     pwrite?043+01H,A
002E 7404            433             MOV     A,#04H
0030 3500     F      434             ADDC    A,pwrite?043
0032 F500     F      435             MOV     pwrite?043,A
                     436     ;       }
                     437                             ; SOURCE LINE # 49
0034 80E3            438             SJMP    ?C0001
0036                 439     ?C0002:
                     440     ; 
                     441     ;       PSCTL = 0x00;                                           // movx writes to target ra
                             m
                     442                             ; SOURCE LINE # 51
0036 E4              443             CLR     A
0037 F58F            444             MOV     PSCTL,A
                     445     ;       pwrite = 0x00;                                          // reset code pointer
                     446                             ; SOURCE LINE # 52
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE     8

0039 F500     F      447             MOV     pwrite?043,A
003B F500     F      448             MOV     pwrite?043+01H,A
                     449     ; 
                     450     ;       for (page=0; page < MIN(lastpage, (BOOTSTRAP_ADDR/CODE_DOWNLOAD_SIZE)); page++) {
                     451                             ; SOURCE LINE # 54
003D F500     F      452             MOV     page?046,A
003F F500     F      453             MOV     page?046+01H,A
0041                 454     ?C0003:
0041 C3              455             CLR     C
0042 E500     F      456             MOV     A,lastpage?040+01H
0044 947F            457             SUBB    A,#07FH
0046 E500     F      458             MOV     A,lastpage?040
0048 9400            459             SUBB    A,#00H
004A 5006            460             JNC     ?C0006
004C AE00     F      461             MOV     R6,lastpage?040
004E AF00     F      462             MOV     R7,lastpage?040+01H
0050 8004            463             SJMP    ?C0007
0052                 464     ?C0006:
0052 7E00            465             MOV     R6,#00H
0054 7F7F            466             MOV     R7,#07FH
0056                 467     ?C0007:
0056 C3              468             CLR     C
0057 E500     F      469             MOV     A,page?046+01H
0059 9F              470             SUBB    A,R7
005A E500     F      471             MOV     A,page?046
005C 9E              472             SUBB    A,R6
005D 4003            473             JC      $ + 5H
005F 020000   F      474             LJMP    ?C0004
                     475     ; 
                     476     ;               SFRPAGE = CONFIG_PAGE;
                     477                             ; SOURCE LINE # 56
0062 75840F          478             MOV     SFRPAGE,#0FH
                     479     ; 
                     480     ; //                    FDL_DataFlash_Page_Read(MAX_PAGE_SIZE, flashpage.bigbuff, read_page
                             );
                     481     ; // function is put in line here to avoid passing pointer which uses code put in by 
                     482     ; // compiler in lower code space
                     483     ; 
                     484     ; #ifdef SENSOR
                     485     ;               if (!(page % 4)) XOR(LED1);
                     486                             ; SOURCE LINE # 63
0065 E500     F      487             MOV     A,page?046+01H
0067 5403            488             ANL     A,#03H
0069 7003            489             JNZ     ?C0011
006B 63B040          490             XRL     P3,#040H
006E                 491     ?C0011:
                     492     ; #endif
                     493     ; 
                     494     ;               // wait for Serial Flash to be available
                     495     ;               do {
                     496                             ; SOURCE LINE # 67
                     497     ;                       status = FDL_DataFlash_Read_Status();
                     498                             ; SOURCE LINE # 68
006E 120000   F      499             LCALL   FDL_DataFlash_Read_Status
0071 8F00     F      500             MOV     status?047,R7
                     501     ;               } while (!(status & STATUS_READY_MASK));
                     502                             ; SOURCE LINE # 69
0073 E500     F      503             MOV     A,status?047
0075 30E7F6          504             JNB     ACC.7,?C0011
                     505     ; 
                     506     ;               // set CS to low
                     507     ;               LO(DF_CS1);
                     508                             ; SOURCE LINE # 72
0078 53F8FD          509             ANL     P7,#0FDH
                     510     ;               DFWAIT;
                     511                             ; SOURCE LINE # 73
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE     9

007B E4              512             CLR     A
007C F500     F      513             MOV     q?041,A
007E F500     F      514             MOV     q?041+01H,A
0080                 515     ?C0015:
0080 0500     F      516             INC     q?041+01H
0082 E500     F      517             MOV     A,q?041+01H
0084 7002            518             JNZ     ?C0051
0086 0500     F      519             INC     q?041
0088                 520     ?C0051:
0088 6440            521             XRL     A,#040H
008A 4500     F      522             ORL     A,q?041
008C 70F2            523             JNZ     ?C0015
008E                 524     ?C0013:
                     525     ; 
                     526     ;               // shift out command
                     527     ;               FDL_xferSPI(MEMORY_PAGE_READ);
                     528                             ; SOURCE LINE # 76
008E 7FD2            529             MOV     R7,#0D2H
0090 120000   F      530             LCALL   _FDL_xferSPI
                     531     ;       
                     532     ;               // shift out reserved bits and upper bits of page address
                     533     ;               FDL_xferSPI(page >> 6); 
                     534                             ; SOURCE LINE # 79
0093 E500     F      535             MOV     A,page?046+01H
0095 AE00     F      536             MOV     R6,page?046
0097 7806            537             MOV     R0,#06H
0099                 538     ?C0052:
0099 CE              539             XCH     A,R6
009A C3              540             CLR     C
009B 13              541             RRC     A
009C CE              542             XCH     A,R6
009D 13              543             RRC     A
009E D8F9            544             DJNZ    R0,?C0052
00A0 FF              545             MOV     R7,A
00A1 120000   F      546             LCALL   _FDL_xferSPI
                     547     ; 
                     548     ;               // shift out bottom 6 bits of page address and top bits of byte address
                     549     ;               FDL_xferSPI((u08) page << 2);
                     550                             ; SOURCE LINE # 82
00A4 120000   F      551             LCALL   L?0061
                     552     ; 
                     553     ;               // shift out bottom 8 bits of unsigned char address
                     554     ;               FDL_xferSPI(0);
                     555                             ; SOURCE LINE # 85
00A7 E4              556             CLR     A
00A8 FF              557             MOV     R7,A
00A9 120000   F      558             LCALL   _FDL_xferSPI
                     559     ; 
                     560     ;               // shift out 4 bytes of don't cares
                     561     ;               FDL_xferSPI(0); FDL_xferSPI(0); FDL_xferSPI(0); FDL_xferSPI(0);
                     562                             ; SOURCE LINE # 88
00AC E4              563             CLR     A
00AD FF              564             MOV     R7,A
00AE 120000   F      565             LCALL   _FDL_xferSPI
00B1 E4              566             CLR     A
00B2 FF              567             MOV     R7,A
00B3 120000   F      568             LCALL   _FDL_xferSPI
00B6 E4              569             CLR     A
00B7 FF              570             MOV     R7,A
00B8 120000   F      571             LCALL   _FDL_xferSPI
00BB E4              572             CLR     A
00BC FF              573             MOV     R7,A
00BD 120000   F      574             LCALL   _FDL_xferSPI
                     575     ; 
                     576     ;               // shift in the data
                     577     ;               for (i=0; i < CODE_DOWNLOAD_SIZE; i++)
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE    10

                     578                             ; SOURCE LINE # 91
00C0 E4              579             CLR     A
00C1 F500     F      580             MOV     i?045,A
00C3 F500     F      581             MOV     i?045+01H,A
00C5                 582     ?C0018:
                     583     ;                       flashpage.bigbuff[i] =  FDL_xferSPI(0);
                     584                             ; SOURCE LINE # 92
00C5 E4              585             CLR     A
00C6 FF              586             MOV     R7,A
00C7 120000   F      587             LCALL   _FDL_xferSPI
00CA 7400     F      588             MOV     A,#LOW (flashpage)
00CC 2500     F      589             ADD     A,i?045+01H
00CE F582            590             MOV     DPL,A
00D0 7400     F      591             MOV     A,#HIGH (flashpage)
00D2 3500     F      592             ADDC    A,i?045
00D4 F583            593             MOV     DPH,A
00D6 EF              594             MOV     A,R7
00D7 F0              595             MOVX    @DPTR,A
00D8 0500     F      596             INC     i?045+01H
00DA E500     F      597             MOV     A,i?045+01H
00DC 7002            598             JNZ     ?C0053
00DE 0500     F      599             INC     i?045
00E0                 600     ?C0053:
00E0 C3              601             CLR     C
00E1 E500     F      602             MOV     A,i?045
00E3 9402            603             SUBB    A,#02H
00E5 40DE            604             JC      ?C0018
00E7                 605     ?C0019:
                     606     ; 
                     607     ;               // raise CS to end operation
                     608     ;               HI(DF_CS1);
                     609                             ; SOURCE LINE # 95
00E7 43F802          610             ORL     P7,#02H
                     611     ; 
                     612     ; // end of inline function
                     613     ; 
                     614     ;               SFRPAGE = LEGACY_PAGE;
                     615                             ; SOURCE LINE # 99
00EA E4              616             CLR     A
00EB F584            617             MOV     SFRPAGE,A
                     618     ;               PSCTL = 0x01;                                           // movx writes to c
                             odeflash
                     619                             ; SOURCE LINE # 100
00ED 758F01          620             MOV     PSCTL,#01H
                     621     ; 
                     622     ;               // copy dataflash page into micro flash
                     623     ;               for (i=0; i < CODE_DOWNLOAD_SIZE; i++)
                     624                             ; SOURCE LINE # 103
00F0 F500     F      625             MOV     i?045,A
00F2 F500     F      626             MOV     i?045+01H,A
00F4                 627     ?C0021:
                     628     ;                       *pwrite++ = flashpage.bigbuff[i];
                     629                             ; SOURCE LINE # 104
00F4 7400     F      630             MOV     A,#LOW (flashpage)
00F6 2500     F      631             ADD     A,i?045+01H
00F8 F582            632             MOV     DPL,A
00FA 7400     F      633             MOV     A,#HIGH (flashpage)
00FC 3500     F      634             ADDC    A,i?045
00FE F583            635             MOV     DPH,A
0100 E0              636             MOVX    A,@DPTR
0101 FF              637             MOV     R7,A
0102 0500     F      638             INC     pwrite?043+01H
0104 E500     F      639             MOV     A,pwrite?043+01H
0106 AC00     F      640             MOV     R4,pwrite?043
0108 7002            641             JNZ     ?C0054
010A 0500     F      642             INC     pwrite?043
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE    11

010C                 643     ?C0054:
010C 14              644             DEC     A
010D F582            645             MOV     DPL,A
010F 8C83            646             MOV     DPH,R4
0111 EF              647             MOV     A,R7
0112 F0              648             MOVX    @DPTR,A
0113 0500     F      649             INC     i?045+01H
0115 E500     F      650             MOV     A,i?045+01H
0117 7002            651             JNZ     ?C0055
0119 0500     F      652             INC     i?045
011B                 653     ?C0055:
011B B400D6          654             CJNE    A,#00H,?C0021
011E E500     F      655             MOV     A,i?045
0120 B402D1          656             CJNE    A,#02H,?C0021
0123                 657     ?C0022:
                     658     ; 
                     659     ;               PSCTL = 0x00;
                     660                             ; SOURCE LINE # 106
0123 E4              661             CLR     A
0124 F58F            662             MOV     PSCTL,A
                     663     ;       } // for
                     664                             ; SOURCE LINE # 107
0126 0500     F      665             INC     page?046+01H
0128 E500     F      666             MOV     A,page?046+01H
012A 7002            667             JNZ     ?C0057
012C 0500     F      668             INC     page?046
012E                 669     ?C0057:
012E 020000   F      670             LJMP    ?C0003
0131                 671     ?C0004:
                     672     ; 
                     673     ;       PSCTL = 0;                                                      // movx writes targ
                             et ram
                     674                             ; SOURCE LINE # 109
0131 E4              675             CLR     A
0132 F58F            676             MOV     PSCTL,A
                     677     ; 
                     678     ;       FLSCL &= ~0x01;                                         // disable flash writes fro
                             m user sw
                     679                             ; SOURCE LINE # 111
0134 53B7FE          680             ANL     FLSCL,#0FEH
                     681     ;       EA = EA_save;
                     682                             ; SOURCE LINE # 112
0137 E500     F      683             MOV     A,EA_save?044
0139 24FF            684             ADD     A,#0FFH
013B 92AF            685             MOV     EA,C
                     686     ;       PSW = 0;
                     687                             ; SOURCE LINE # 113
013D E4              688             CLR     A
013E F5D0            689             MOV     PSW,A
                     690     ; 
                     691     ;       SFRPAGE = CONFIG_PAGE;
                     692                             ; SOURCE LINE # 115
0140 75840F          693             MOV     SFRPAGE,#0FH
                     694     ; 
                     695     ;       // clear the flash
                     696     ;       for (page = 0; page < numpages; page += 8) {
                     697                             ; SOURCE LINE # 118
0143 F500     F      698             MOV     page?046,A
0145 F500     F      699             MOV     page?046+01H,A
0147                 700     ?C0024:
0147 D3              701             SETB    C
0148 900000   F      702             MOV     DPTR,#numpages+01H
014B E0              703             MOVX    A,@DPTR
014C 9500     F      704             SUBB    A,page?046+01H
014E 900000   F      705             MOV     DPTR,#numpages
0151 E0              706             MOVX    A,@DPTR
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE    12

0152 9500     F      707             SUBB    A,page?046
0154 4057            708             JC      ?C0039
                     709     ; 
                     710     ; #ifdef SENSOR
                     711     ;               // invert LED every so often
                     712     ;               if (!(page % 64)) XOR(LED2);
                     713                             ; SOURCE LINE # 122
0156 E500     F      714             MOV     A,page?046+01H
0158 543F            715             ANL     A,#03FH
015A 7003            716             JNZ     ?C0030
015C 63B020          717             XRL     P3,#020H
015F                 718     ?C0030:
                     719     ; #endif
                     720     ; 
                     721     ;               // inline dataflash erase block
                     722     ; 
                     723     ;               // wait for Serial Flash to be available
                     724     ;               do {
                     725                             ; SOURCE LINE # 128
                     726     ;                       status = FDL_DataFlash_Read_Status();
                     727                             ; SOURCE LINE # 129
015F 120000   F      728             LCALL   FDL_DataFlash_Read_Status
0162 8F00     F      729             MOV     status?047,R7
                     730     ;               } while (!(status & STATUS_READY_MASK));
                     731                             ; SOURCE LINE # 130
0164 E500     F      732             MOV     A,status?047
0166 30E7F6          733             JNB     ACC.7,?C0030
                     734     ; 
                     735     ;               LO(DF_CS1);
                     736                             ; SOURCE LINE # 132
0169 53F8FD          737             ANL     P7,#0FDH
                     738     ;               DFWAIT;
                     739                             ; SOURCE LINE # 133
016C E4              740             CLR     A
016D F500     F      741             MOV     q?042,A
016F F500     F      742             MOV     q?042+01H,A
0171                 743     ?C0034:
0171 0500     F      744             INC     q?042+01H
0173 E500     F      745             MOV     A,q?042+01H
0175 7002            746             JNZ     ?C0058
0177 0500     F      747             INC     q?042
0179                 748     ?C0058:
0179 6440            749             XRL     A,#040H
017B 4500     F      750             ORL     A,q?042
017D 70F2            751             JNZ     ?C0034
017F                 752     ?C0032:
                     753     ; 
                     754     ;               //command
                     755     ;               FDL_xferSPI(BLOCK_ERASE);
                     756                             ; SOURCE LINE # 136
017F 7F50            757             MOV     R7,#050H
0181 120000   F      758             LCALL   _FDL_xferSPI
                     759     ; 
                     760     ;               // shift out reserved bits and upper bits of page address
                     761     ;               FDL_xferSPI(page >> 6);
                     762                             ; SOURCE LINE # 139
0184 E500     F      763             MOV     A,page?046+01H
0186 AE00     F      764             MOV     R6,page?046
0188 7806            765             MOV     R0,#06H
018A                 766     ?C0059:
018A CE              767             XCH     A,R6
018B C3              768             CLR     C
018C 13              769             RRC     A
018D CE              770             XCH     A,R6
018E 13              771             RRC     A
018F D8F9            772             DJNZ    R0,?C0059
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE    13

0191 FF              773             MOV     R7,A
0192 120000   F      774             LCALL   _FDL_xferSPI
                     775     ; 
                     776     ;               // shift out bottom 6 bits of page address and top bits of byte address
                     777     ;               FDL_xferSPI((u08) page << 2);
                     778                             ; SOURCE LINE # 142
0195 120000   F      779             LCALL   L?0061
                     780     ; 
                     781     ;               // shift out bottom 8 bits of unsigned char address
                     782     ;               FDL_xferSPI(0);
                     783                             ; SOURCE LINE # 145
0198 E4              784             CLR     A
0199 FF              785             MOV     R7,A
019A 120000   F      786             LCALL   _FDL_xferSPI
                     787     ; 
                     788     ;               HI(DF_CS1);
                     789                             ; SOURCE LINE # 147
019D 43F802          790             ORL     P7,#02H
                     791     ; 
                     792     ;               // end of inline function
                     793     ;       } // for
                     794                             ; SOURCE LINE # 150
01A0 7408            795             MOV     A,#08H
01A2 2500     F      796             ADD     A,page?046+01H
01A4 F500     F      797             MOV     page?046+01H,A
01A6 E4              798             CLR     A
01A7 3500     F      799             ADDC    A,page?046
01A9 F500     F      800             MOV     page?046,A
01AB 809A            801             SJMP    ?C0024
01AD                 802     ?C0039:
                     803     ; 
                     804     ;       // wait for Serial Flash to be finished
                     805     ;       do {
                     806                             ; SOURCE LINE # 153
                     807     ;               status = FDL_DataFlash_Read_Status();
                     808                             ; SOURCE LINE # 154
01AD 120000   F      809             LCALL   FDL_DataFlash_Read_Status
01B0 8F00     F      810             MOV     status?047,R7
                     811     ;       } while (!(status & STATUS_READY_MASK));
                     812                             ; SOURCE LINE # 155
01B2 E500     F      813             MOV     A,status?047
01B4 30E7F6          814             JNB     ACC.7,?C0039
                     815     ; 
                     816     ;       SFRPAGE = LEGACY_PAGE;
                     817                             ; SOURCE LINE # 157
01B7 E4              818             CLR     A
01B8 F584            819             MOV     SFRPAGE,A
                     820     ; 
                     821     ;       // pull the reset line to restart everything
                     822     ;       RSTSRC = RSTSRC | 0x01;
                     823                             ; SOURCE LINE # 160
01BA 43EF01          824             ORL     RSTSRC,#01H
                     825     ; }
                     826                             ; SOURCE LINE # 161
01BD 22              827             RET     
                     828     ; END OF _CopytoCodeSpace
                     829     
                     830     ; 
                     831     ; // simultaneously write       and read one unsigned char to SPI (mode 3). Blocking.
                     832     ; u08 FDL_xferSPI (u08 ch) {
                     833     
----                 834             RSEG  ?PR?_FDL_xferSPI?FDL
0000                 835     L?0061:
                     836             USING   0
0000 AF00     F      837             MOV     R7,page?046+01H
0002 EF              838             MOV     A,R7
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE    14

0003 25E0            839             ADD     A,ACC
0005 25E0            840             ADD     A,ACC
0007 FF              841             MOV     R7,A
0008                 842     _FDL_xferSPI:
                     843             USING   0
                     844                             ; SOURCE LINE # 164
                     845     ;---- Variable 'ch?148' assigned to Register 'R7' ----
                     846     ; 
                     847     ;       u08 SFRPAGE_SAVE = SFRPAGE;                     // Save Current SFR page
                     848                             ; SOURCE LINE # 166
                     849     ;---- Variable 'SFRPAGE_SAVE?149' assigned to Register 'R6' ----
0008 AE84            850             MOV     R6,SFRPAGE
                     851     ;       SFRPAGE = SPI0_PAGE;
                     852                             ; SOURCE LINE # 167
000A E4              853             CLR     A
000B F584            854             MOV     SFRPAGE,A
                     855     ; 
                     856     ;       SPI0DAT = ch;
                     857                             ; SOURCE LINE # 169
000D 8F9B            858             MOV     SPI0DAT,R7
000F                 859     ?C0041:
                     860     ; 
                     861     ;       // wait for shifting
                     862     ;       while (!SPIF) ;
                     863                             ; SOURCE LINE # 172
000F 30FFFD          864             JNB     SPIF,?C0041
0012                 865     ?C0042:
                     866     ; 
                     867     ;       SPIF = 0;                       // clear the xfer complete flag
                     868                             ; SOURCE LINE # 174
0012 C2FF            869             CLR     SPIF
                     870     ; 
                     871     ;       ch = SPI0DAT;
                     872                             ; SOURCE LINE # 176
0014 AF9B            873             MOV     R7,SPI0DAT
                     874     ;       
                     875     ;       SFRPAGE = SFRPAGE_SAVE;
                     876                             ; SOURCE LINE # 178
0016 8E84            877             MOV     SFRPAGE,R6
                     878     ; 
                     879     ;       return (ch);
                     880                             ; SOURCE LINE # 180
                     881     ; }
                     882                             ; SOURCE LINE # 181
0018                 883     ?C0043:
0018 22              884             RET     
                     885     ; END OF _FDL_xferSPI
                     886     
                     887     ; 
                     888     ; // returns the value of DataFlash Status Register. Non-blocking.
                     889     ; u08 FDL_DataFlash_Read_Status(void) {
                     890     
----                 891             RSEG  ?PR?FDL_DataFlash_Read_Status?FDL
0000                 892     FDL_DataFlash_Read_Status:
                     893             USING   0
                     894                             ; SOURCE LINE # 184
                     895     ;    u08 dat;
                     896     ; 
                     897     ;       LO(DF_CS1);
                     898                             ; SOURCE LINE # 187
0000 53F8FD          899             ANL     P7,#0FDH
                     900     ;       DFWAIT;
                     901                             ; SOURCE LINE # 188
0003 E4              902             CLR     A
0004 F500     F      903             MOV     q?250,A
0006 F500     F      904             MOV     q?250+01H,A
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE    15

0008                 905     ?C0047:
0008 0500     F      906             INC     q?250+01H
000A E500     F      907             MOV     A,q?250+01H
000C 7002            908             JNZ     ?C0060
000E 0500     F      909             INC     q?250
0010                 910     ?C0060:
0010 6440            911             XRL     A,#040H
0012 4500     F      912             ORL     A,q?250
0014 70F2            913             JNZ     ?C0047
0016                 914     ?C0045:
                     915     ; 
                     916     ;       //command
                     917     ;       FDL_xferSPI(STATUS_REGISTER_READ);
                     918                             ; SOURCE LINE # 191
0016 7FD7            919             MOV     R7,#0D7H
0018 120000   F      920             LCALL   _FDL_xferSPI
                     921     ; 
                     922     ;       dat = FDL_xferSPI(0);
                     923                             ; SOURCE LINE # 193
001B E4              924             CLR     A
001C FF              925             MOV     R7,A
001D 120000   F      926             LCALL   _FDL_xferSPI
                     927     ;---- Variable 'dat?251' assigned to Register 'R7' ----
                     928     ; 
                     929     ;       HI(DF_CS1);
                     930                             ; SOURCE LINE # 195
0020 43F802          931             ORL     P7,#02H
                     932     ;   
                     933     ;    return (dat);
                     934                             ; SOURCE LINE # 197
                     935     ; }
                     936                             ; SOURCE LINE # 198
0023                 937     ?C0050:
0023 22              938             RET     
                     939     ; END OF FDL_DataFlash_Read_Status
                     940     
                     941             END
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE    16

SYMBOL TABLE LISTING
------ ----- -------


N A M E                            T Y P E  V A L U E   ATTRIBUTES

?C0001. . . . . . . . . . . . . .  C ADDR   0019H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0002. . . . . . . . . . . . . .  C ADDR   0036H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0003. . . . . . . . . . . . . .  C ADDR   0041H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0004. . . . . . . . . . . . . .  C ADDR   0131H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0006. . . . . . . . . . . . . .  C ADDR   0052H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0007. . . . . . . . . . . . . .  C ADDR   0056H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0011. . . . . . . . . . . . . .  C ADDR   006EH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0013. . . . . . . . . . . . . .  C ADDR   008EH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0015. . . . . . . . . . . . . .  C ADDR   0080H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0018. . . . . . . . . . . . . .  C ADDR   00C5H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0019. . . . . . . . . . . . . .  C ADDR   00E7H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0021. . . . . . . . . . . . . .  C ADDR   00F4H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0022. . . . . . . . . . . . . .  C ADDR   0123H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0024. . . . . . . . . . . . . .  C ADDR   0147H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0030. . . . . . . . . . . . . .  C ADDR   015FH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0032. . . . . . . . . . . . . .  C ADDR   017FH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0034. . . . . . . . . . . . . .  C ADDR   0171H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0039. . . . . . . . . . . . . .  C ADDR   01ADH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0041. . . . . . . . . . . . . .  C ADDR   000FH   R   SEG=?PR?_FDL_XFERSPI?FDL
?C0042. . . . . . . . . . . . . .  C ADDR   0012H   R   SEG=?PR?_FDL_XFERSPI?FDL
?C0043. . . . . . . . . . . . . .  C ADDR   0018H   R   SEG=?PR?_FDL_XFERSPI?FDL
?C0045. . . . . . . . . . . . . .  C ADDR   0016H   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
?C0047. . . . . . . . . . . . . .  C ADDR   0008H   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
?C0050. . . . . . . . . . . . . .  C ADDR   0023H   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
?C0051. . . . . . . . . . . . . .  C ADDR   0088H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0052. . . . . . . . . . . . . .  C ADDR   0099H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0053. . . . . . . . . . . . . .  C ADDR   00E0H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0054. . . . . . . . . . . . . .  C ADDR   010CH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0055. . . . . . . . . . . . . .  C ADDR   011BH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0057. . . . . . . . . . . . . .  C ADDR   012EH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0058. . . . . . . . . . . . . .  C ADDR   0179H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0059. . . . . . . . . . . . . .  C ADDR   018AH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0060. . . . . . . . . . . . . .  C ADDR   0010H   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
?DT?FDL_DATAFLASH_READ_STATUS?FDL  D SEG    0002H       REL=UNIT
?DT?_COPYTOCODESPACE?FDL. . . . .  D SEG    000CH       REL=UNIT
?FDL_DATAFLASH_READ_STATUS?BYTE .  D ADDR   0000H   R   SEG=?DT?FDL_DATAFLASH_READ_STATUS?FDL
?PR?FDL_DATAFLASH_READ_STATUS?FDL  C SEG    0024H       REL=UNIT
?PR?_COPYTOCODESPACE?FDL. . . . .  C SEG    01BEH       REL=UNIT
?PR?_FDL_XFERSPI?FDL. . . . . . .  C SEG    0019H       REL=UNIT
?_COPYTOCODESPACE?BYTE. . . . . .  D ADDR   0000H   R   SEG=?DT?_COPYTOCODESPACE?FDL
AA. . . . . . . . . . . . . . . .  B ADDR   00C0H.2 A   
AC. . . . . . . . . . . . . . . .  B ADDR   00D0H.6 A   
ACC . . . . . . . . . . . . . . .  D ADDR   00E0H   A   
AD0BUSY . . . . . . . . . . . . .  B ADDR   00E8H.4 A   
AD0CM0. . . . . . . . . . . . . .  B ADDR   00E8H.2 A   
AD0CM1. . . . . . . . . . . . . .  B ADDR   00E8H.3 A   
AD0EN . . . . . . . . . . . . . .  B ADDR   00E8H.7 A   
AD0INT. . . . . . . . . . . . . .  B ADDR   00E8H.5 A   
AD0LJST . . . . . . . . . . . . .  B ADDR   00E8H.0 A   
AD0TM . . . . . . . . . . . . . .  B ADDR   00E8H.6 A   
AD0WINT . . . . . . . . . . . . .  B ADDR   00E8H.1 A   
AD2BUSY . . . . . . . . . . . . .  B ADDR   00E8H.4 A   
AD2CM0. . . . . . . . . . . . . .  B ADDR   00E8H.1 A   
AD2CM1. . . . . . . . . . . . . .  B ADDR   00E8H.2 A   
AD2CM2. . . . . . . . . . . . . .  B ADDR   00E8H.3 A   
AD2EN . . . . . . . . . . . . . .  B ADDR   00E8H.7 A   
AD2INT. . . . . . . . . . . . . .  B ADDR   00E8H.5 A   
AD2TM . . . . . . . . . . . . . .  B ADDR   00E8H.6 A   
AD2WINT . . . . . . . . . . . . .  B ADDR   00E8H.0 A   
ADC0. . . . . . . . . . . . . . .  D ADDR   00BEH   A   
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE    17

ADC0CF. . . . . . . . . . . . . .  D ADDR   00BCH   A   
ADC0CN. . . . . . . . . . . . . .  D ADDR   00E8H   A   
ADC0GT. . . . . . . . . . . . . .  D ADDR   00C4H   A   
ADC0GTH . . . . . . . . . . . . .  D ADDR   00C5H   A   
ADC0GTL . . . . . . . . . . . . .  D ADDR   00C4H   A   
ADC0H . . . . . . . . . . . . . .  D ADDR   00BFH   A   
ADC0L . . . . . . . . . . . . . .  D ADDR   00BEH   A   
ADC0LT. . . . . . . . . . . . . .  D ADDR   00C6H   A   
ADC0LTH . . . . . . . . . . . . .  D ADDR   00C7H   A   
ADC0LTL . . . . . . . . . . . . .  D ADDR   00C6H   A   
ADC2. . . . . . . . . . . . . . .  D ADDR   00BEH   A   
ADC2CF. . . . . . . . . . . . . .  D ADDR   00BCH   A   
ADC2CN. . . . . . . . . . . . . .  D ADDR   00E8H   A   
ADC2GT. . . . . . . . . . . . . .  D ADDR   00C4H   A   
ADC2LT. . . . . . . . . . . . . .  D ADDR   00C6H   A   
AMX0CF. . . . . . . . . . . . . .  D ADDR   00BAH   A   
AMX0SL. . . . . . . . . . . . . .  D ADDR   00BBH   A   
AMX2CF. . . . . . . . . . . . . .  D ADDR   00BAH   A   
AMX2SL. . . . . . . . . . . . . .  D ADDR   00BBH   A   
B . . . . . . . . . . . . . . . .  D ADDR   00F0H   A   
BUSY. . . . . . . . . . . . . . .  B ADDR   00C0H.7 A   
CCF0. . . . . . . . . . . . . . .  B ADDR   00D8H.0 A   
CCF1. . . . . . . . . . . . . . .  B ADDR   00D8H.1 A   
CCF2. . . . . . . . . . . . . . .  B ADDR   00D8H.2 A   
CCF3. . . . . . . . . . . . . . .  B ADDR   00D8H.3 A   
CCF4. . . . . . . . . . . . . . .  B ADDR   00D8H.4 A   
CCF5. . . . . . . . . . . . . . .  B ADDR   00D8H.5 A   
CCH0CN. . . . . . . . . . . . . .  D ADDR   00A1H   A   
CCH0LC. . . . . . . . . . . . . .  D ADDR   00A3H   A   
CCH0MA. . . . . . . . . . . . . .  D ADDR   009AH   A   
CCH0TN. . . . . . . . . . . . . .  D ADDR   00A2H   A   
CF. . . . . . . . . . . . . . . .  B ADDR   00D8H.7 A   
CKCON . . . . . . . . . . . . . .  D ADDR   008EH   A   
CLKSEL. . . . . . . . . . . . . .  D ADDR   0097H   A   
CP0EN . . . . . . . . . . . . . .  B ADDR   0088H.7 A   
CP0FIF. . . . . . . . . . . . . .  B ADDR   0088H.4 A   
CP0HYN0 . . . . . . . . . . . . .  B ADDR   0088H.0 A   
CP0HYN1 . . . . . . . . . . . . .  B ADDR   0088H.1 A   
CP0HYP0 . . . . . . . . . . . . .  B ADDR   0088H.2 A   
CP0HYP1 . . . . . . . . . . . . .  B ADDR   0088H.3 A   
CP0OUT. . . . . . . . . . . . . .  B ADDR   0088H.6 A   
CP0RIF. . . . . . . . . . . . . .  B ADDR   0088H.5 A   
CP1EN . . . . . . . . . . . . . .  B ADDR   0088H.7 A   
CP1FIF. . . . . . . . . . . . . .  B ADDR   0088H.4 A   
CP1HYN0 . . . . . . . . . . . . .  B ADDR   0088H.0 A   
CP1HYN1 . . . . . . . . . . . . .  B ADDR   0088H.1 A   
CP1HYP0 . . . . . . . . . . . . .  B ADDR   0088H.2 A   
CP1HYP1 . . . . . . . . . . . . .  B ADDR   0088H.3 A   
CP1OUT. . . . . . . . . . . . . .  B ADDR   0088H.6 A   
CP1RIF. . . . . . . . . . . . . .  B ADDR   0088H.5 A   
CPRL2 . . . . . . . . . . . . . .  B ADDR   00C8H.0 A   
CPRL3 . . . . . . . . . . . . . .  B ADDR   00C8H.0 A   
CPRL4 . . . . . . . . . . . . . .  B ADDR   00C8H.0 A   
CPT0CN. . . . . . . . . . . . . .  D ADDR   0088H   A   
CPT0MD. . . . . . . . . . . . . .  D ADDR   0089H   A   
CPT1CN. . . . . . . . . . . . . .  D ADDR   0088H   A   
CPT1MD. . . . . . . . . . . . . .  D ADDR   0089H   A   
CR. . . . . . . . . . . . . . . .  B ADDR   00D8H.6 A   
CT2 . . . . . . . . . . . . . . .  B ADDR   00C8H.1 A   
CT3 . . . . . . . . . . . . . . .  B ADDR   00C8H.1 A   
CT4 . . . . . . . . . . . . . . .  B ADDR   00C8H.1 A   
CY. . . . . . . . . . . . . . . .  B ADDR   00D0H.7 A   
DAC0. . . . . . . . . . . . . . .  D ADDR   00D2H   A   
DAC0CN. . . . . . . . . . . . . .  D ADDR   00D4H   A   
DAC0H . . . . . . . . . . . . . .  D ADDR   00D3H   A   
DAC0L . . . . . . . . . . . . . .  D ADDR   00D2H   A   
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE    18

DAC1. . . . . . . . . . . . . . .  D ADDR   00D2H   A   
DAC1CN. . . . . . . . . . . . . .  D ADDR   00D4H   A   
DAC1H . . . . . . . . . . . . . .  D ADDR   00D3H   A   
DAC1L . . . . . . . . . . . . . .  D ADDR   00D2H   A   
DP. . . . . . . . . . . . . . . .  D ADDR   0082H   A   
DPH . . . . . . . . . . . . . . .  D ADDR   0083H   A   
DPL . . . . . . . . . . . . . . .  D ADDR   0082H   A   
EA. . . . . . . . . . . . . . . .  B ADDR   00A8H.7 A   
EA_SAVE?044 . . . . . . . . . . .  D ADDR   0004H   R   SEG=?DT?_COPYTOCODESPACE?FDL
EIE1. . . . . . . . . . . . . . .  D ADDR   00E6H   A   
EIE2. . . . . . . . . . . . . . .  D ADDR   00E7H   A   
EIP1. . . . . . . . . . . . . . .  D ADDR   00F6H   A   
EIP2. . . . . . . . . . . . . . .  D ADDR   00F7H   A   
EMI0CF. . . . . . . . . . . . . .  D ADDR   00A3H   A   
EMI0CN. . . . . . . . . . . . . .  D ADDR   00A2H   A   
EMI0TC. . . . . . . . . . . . . .  D ADDR   00A1H   A   
ENSMB . . . . . . . . . . . . . .  B ADDR   00C0H.6 A   
ES0 . . . . . . . . . . . . . . .  B ADDR   00A8H.4 A   
ET0 . . . . . . . . . . . . . . .  B ADDR   00A8H.1 A   
ET1 . . . . . . . . . . . . . . .  B ADDR   00A8H.3 A   
ET2 . . . . . . . . . . . . . . .  B ADDR   00A8H.5 A   
EX0 . . . . . . . . . . . . . . .  B ADDR   00A8H.0 A   
EX1 . . . . . . . . . . . . . . .  B ADDR   00A8H.2 A   
EXEN2 . . . . . . . . . . . . . .  B ADDR   00C8H.3 A   
EXEN3 . . . . . . . . . . . . . .  B ADDR   00C8H.3 A   
EXEN4 . . . . . . . . . . . . . .  B ADDR   00C8H.3 A   
EXF2. . . . . . . . . . . . . . .  B ADDR   00C8H.6 A   
EXF3. . . . . . . . . . . . . . .  B ADDR   00C8H.6 A   
EXF4. . . . . . . . . . . . . . .  B ADDR   00C8H.6 A   
F0. . . . . . . . . . . . . . . .  B ADDR   00D0H.5 A   
F1. . . . . . . . . . . . . . . .  B ADDR   00D0H.1 A   
FDL . . . . . . . . . . . . . . .  N NUMB   -----       
FDL_DATAFLASH_READ_STATUS . . . .  C ADDR   0000H   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
FLACL . . . . . . . . . . . . . .  D ADDR   00B7H   A   
FLASHPAGE . . . . . . . . . . . .  X ADDR   -----       EXT
FLHBUSY . . . . . . . . . . . . .  B ADDR   0088H.0 A   
FLSCL . . . . . . . . . . . . . .  D ADDR   00B7H   A   
FLSTAT. . . . . . . . . . . . . .  D ADDR   0088H   A   
I?045 . . . . . . . . . . . . . .  D ADDR   0005H   R   SEG=?DT?_COPYTOCODESPACE?FDL
IE. . . . . . . . . . . . . . . .  D ADDR   00A8H   A   
IE0 . . . . . . . . . . . . . . .  B ADDR   0088H.1 A   
IE1 . . . . . . . . . . . . . . .  B ADDR   0088H.3 A   
IP. . . . . . . . . . . . . . . .  D ADDR   00B8H   A   
IT0 . . . . . . . . . . . . . . .  B ADDR   0088H.0 A   
IT1 . . . . . . . . . . . . . . .  B ADDR   0088H.2 A   
L?0061. . . . . . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_FDL_XFERSPI?FDL
LASTPAGE?040. . . . . . . . . . .  D ADDR   0000H   R   SEG=?DT?_COPYTOCODESPACE?FDL
MAC0ACC0. . . . . . . . . . . . .  D ADDR   0093H   A   
MAC0ACC1. . . . . . . . . . . . .  D ADDR   0094H   A   
MAC0ACC2. . . . . . . . . . . . .  D ADDR   0095H   A   
MAC0ACC3. . . . . . . . . . . . .  D ADDR   0096H   A   
MAC0AH. . . . . . . . . . . . . .  D ADDR   00C2H   A   
MAC0AL. . . . . . . . . . . . . .  D ADDR   00C1H   A   
MAC0BH. . . . . . . . . . . . . .  D ADDR   0092H   A   
MAC0BL. . . . . . . . . . . . . .  D ADDR   0091H   A   
MAC0CF. . . . . . . . . . . . . .  D ADDR   00C3H   A   
MAC0HO. . . . . . . . . . . . . .  B ADDR   00C0H.3 A   
MAC0N . . . . . . . . . . . . . .  B ADDR   00C0H.0 A   
MAC0OVR . . . . . . . . . . . . .  D ADDR   0097H   A   
MAC0RNDH. . . . . . . . . . . . .  D ADDR   00CFH   A   
MAC0RNDL. . . . . . . . . . . . .  D ADDR   00CEH   A   
MAC0SO. . . . . . . . . . . . . .  B ADDR   00C0H.1 A   
MAC0STA . . . . . . . . . . . . .  D ADDR   00C0H   A   
MAC0Z . . . . . . . . . . . . . .  B ADDR   00C0H.2 A   
MCE1. . . . . . . . . . . . . . .  B ADDR   0098H.5 A   
MODF. . . . . . . . . . . . . . .  B ADDR   00F8H.5 A   
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE    19

NSSMD0. . . . . . . . . . . . . .  B ADDR   00F8H.2 A   
NSSMD1. . . . . . . . . . . . . .  B ADDR   00F8H.3 A   
NUMPAGES. . . . . . . . . . . . .  X ADDR   -----       EXT
OSCICL. . . . . . . . . . . . . .  D ADDR   008BH   A   
OSCICN. . . . . . . . . . . . . .  D ADDR   008AH   A   
OSCXCN. . . . . . . . . . . . . .  D ADDR   008CH   A   
OV. . . . . . . . . . . . . . . .  B ADDR   00D0H.2 A   
P . . . . . . . . . . . . . . . .  B ADDR   00D0H.0 A   
P0. . . . . . . . . . . . . . . .  D ADDR   0080H   A   
P0MDOUT . . . . . . . . . . . . .  D ADDR   00A4H   A   
P1. . . . . . . . . . . . . . . .  D ADDR   0090H   A   
P1MDIN. . . . . . . . . . . . . .  D ADDR   00ADH   A   
P1MDOUT . . . . . . . . . . . . .  D ADDR   00A5H   A   
P2. . . . . . . . . . . . . . . .  D ADDR   00A0H   A   
P2MDOUT . . . . . . . . . . . . .  D ADDR   00A6H   A   
P3. . . . . . . . . . . . . . . .  D ADDR   00B0H   A   
P3MDOUT . . . . . . . . . . . . .  D ADDR   00A7H   A   
P4. . . . . . . . . . . . . . . .  D ADDR   00C8H   A   
P4MDOUT . . . . . . . . . . . . .  D ADDR   009CH   A   
P5. . . . . . . . . . . . . . . .  D ADDR   00D8H   A   
P5MDOUT . . . . . . . . . . . . .  D ADDR   009DH   A   
P6. . . . . . . . . . . . . . . .  D ADDR   00E8H   A   
P6MDOUT . . . . . . . . . . . . .  D ADDR   009EH   A   
P7. . . . . . . . . . . . . . . .  D ADDR   00F8H   A   
P7MDOUT . . . . . . . . . . . . .  D ADDR   009FH   A   
PAGE?046. . . . . . . . . . . . .  D ADDR   0007H   R   SEG=?DT?_COPYTOCODESPACE?FDL
PCA0. . . . . . . . . . . . . . .  D ADDR   00F9H   A   
PCA0CN. . . . . . . . . . . . . .  D ADDR   00D8H   A   
PCA0CP0 . . . . . . . . . . . . .  D ADDR   00FBH   A   
PCA0CP1 . . . . . . . . . . . . .  D ADDR   00FDH   A   
PCA0CP2 . . . . . . . . . . . . .  D ADDR   00E9H   A   
PCA0CP3 . . . . . . . . . . . . .  D ADDR   00EBH   A   
PCA0CP4 . . . . . . . . . . . . .  D ADDR   00EDH   A   
PCA0CP5 . . . . . . . . . . . . .  D ADDR   00E1H   A   
PCA0CPH0. . . . . . . . . . . . .  D ADDR   00FCH   A   
PCA0CPH1. . . . . . . . . . . . .  D ADDR   00FEH   A   
PCA0CPH2. . . . . . . . . . . . .  D ADDR   00EAH   A   
PCA0CPH3. . . . . . . . . . . . .  D ADDR   00ECH   A   
PCA0CPH4. . . . . . . . . . . . .  D ADDR   00EEH   A   
PCA0CPH5. . . . . . . . . . . . .  D ADDR   00E2H   A   
PCA0CPL0. . . . . . . . . . . . .  D ADDR   00FBH   A   
PCA0CPL1. . . . . . . . . . . . .  D ADDR   00FDH   A   
PCA0CPL2. . . . . . . . . . . . .  D ADDR   00E9H   A   
PCA0CPL3. . . . . . . . . . . . .  D ADDR   00EBH   A   
PCA0CPL4. . . . . . . . . . . . .  D ADDR   00EDH   A   
PCA0CPL5. . . . . . . . . . . . .  D ADDR   00E1H   A   
PCA0CPM0. . . . . . . . . . . . .  D ADDR   00DAH   A   
PCA0CPM1. . . . . . . . . . . . .  D ADDR   00DBH   A   
PCA0CPM2. . . . . . . . . . . . .  D ADDR   00DCH   A   
PCA0CPM3. . . . . . . . . . . . .  D ADDR   00DDH   A   
PCA0CPM4. . . . . . . . . . . . .  D ADDR   00DEH   A   
PCA0CPM5. . . . . . . . . . . . .  D ADDR   00DFH   A   
PCA0H . . . . . . . . . . . . . .  D ADDR   00FAH   A   
PCA0L . . . . . . . . . . . . . .  D ADDR   00F9H   A   
PCA0MD. . . . . . . . . . . . . .  D ADDR   00D9H   A   
PCON. . . . . . . . . . . . . . .  D ADDR   0087H   A   
PLL0CN. . . . . . . . . . . . . .  D ADDR   0089H   A   
PLL0DIV . . . . . . . . . . . . .  D ADDR   008DH   A   
PLL0FLT . . . . . . . . . . . . .  D ADDR   008FH   A   
PLL0MUL . . . . . . . . . . . . .  D ADDR   008EH   A   
PS. . . . . . . . . . . . . . . .  B ADDR   00B8H.4 A   
PSBANK. . . . . . . . . . . . . .  D ADDR   00B1H   A   
PSCTL . . . . . . . . . . . . . .  D ADDR   008FH   A   
PSW . . . . . . . . . . . . . . .  D ADDR   00D0H   A   
PT0 . . . . . . . . . . . . . . .  B ADDR   00B8H.1 A   
PT1 . . . . . . . . . . . . . . .  B ADDR   00B8H.3 A   
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE    20

PT2 . . . . . . . . . . . . . . .  B ADDR   00B8H.5 A   
PWRITE?043. . . . . . . . . . . .  D ADDR   0002H   R   SEG=?DT?_COPYTOCODESPACE?FDL
PX0 . . . . . . . . . . . . . . .  B ADDR   00B8H.0 A   
PX1 . . . . . . . . . . . . . . .  B ADDR   00B8H.2 A   
Q?041 . . . . . . . . . . . . . .  D ADDR   000AH   R   SEG=?DT?_COPYTOCODESPACE?FDL
Q?042 . . . . . . . . . . . . . .  D ADDR   000AH   R   SEG=?DT?_COPYTOCODESPACE?FDL
Q?250 . . . . . . . . . . . . . .  D ADDR   0000H   R   SEG=?DT?FDL_DATAFLASH_READ_STATUS?FDL
RB80. . . . . . . . . . . . . . .  B ADDR   0098H.2 A   
RB81. . . . . . . . . . . . . . .  B ADDR   0098H.2 A   
RCAP2 . . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP2H. . . . . . . . . . . . . .  D ADDR   00CBH   A   
RCAP2L. . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP3 . . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP3H. . . . . . . . . . . . . .  D ADDR   00CBH   A   
RCAP3L. . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP4 . . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP4H. . . . . . . . . . . . . .  D ADDR   00CBH   A   
RCAP4L. . . . . . . . . . . . . .  D ADDR   00CAH   A   
REF0CN. . . . . . . . . . . . . .  D ADDR   00D1H   A   
REN0. . . . . . . . . . . . . . .  B ADDR   0098H.4 A   
REN1. . . . . . . . . . . . . . .  B ADDR   0098H.4 A   
RI0 . . . . . . . . . . . . . . .  B ADDR   0098H.0 A   
RI1 . . . . . . . . . . . . . . .  B ADDR   0098H.0 A   
RS0 . . . . . . . . . . . . . . .  B ADDR   00D0H.3 A   
RS1 . . . . . . . . . . . . . . .  B ADDR   00D0H.4 A   
RSTSRC. . . . . . . . . . . . . .  D ADDR   00EFH   A   
RXOVRN. . . . . . . . . . . . . .  B ADDR   00F8H.4 A   
S1MODE. . . . . . . . . . . . . .  B ADDR   0098H.7 A   
SADDR0. . . . . . . . . . . . . .  D ADDR   00A9H   A   
SADEN0. . . . . . . . . . . . . .  D ADDR   00B9H   A   
SBUF0 . . . . . . . . . . . . . .  D ADDR   0099H   A   
SBUF1 . . . . . . . . . . . . . .  D ADDR   0099H   A   
SCON0 . . . . . . . . . . . . . .  D ADDR   0098H   A   
SCON1 . . . . . . . . . . . . . .  D ADDR   0098H   A   
SFRLAST . . . . . . . . . . . . .  D ADDR   0086H   A   
SFRNEXT . . . . . . . . . . . . .  D ADDR   0085H   A   
SFRPAGE . . . . . . . . . . . . .  D ADDR   0084H   A   
SFRPGCN . . . . . . . . . . . . .  D ADDR   0096H   A   
SI. . . . . . . . . . . . . . . .  B ADDR   00C0H.3 A   
SM00. . . . . . . . . . . . . . .  B ADDR   0098H.7 A   
SM10. . . . . . . . . . . . . . .  B ADDR   0098H.6 A   
SM20. . . . . . . . . . . . . . .  B ADDR   0098H.5 A   
SMB0ADR . . . . . . . . . . . . .  D ADDR   00C3H   A   
SMB0CN. . . . . . . . . . . . . .  D ADDR   00C0H   A   
SMB0CR. . . . . . . . . . . . . .  D ADDR   00CFH   A   
SMB0DAT . . . . . . . . . . . . .  D ADDR   00C2H   A   
SMB0STA . . . . . . . . . . . . .  D ADDR   00C1H   A   
SMBFTE. . . . . . . . . . . . . .  B ADDR   00C0H.1 A   
SMBTOE. . . . . . . . . . . . . .  B ADDR   00C0H.0 A   
SP. . . . . . . . . . . . . . . .  D ADDR   0081H   A   
SPI0CFG . . . . . . . . . . . . .  D ADDR   009AH   A   
SPI0CKR . . . . . . . . . . . . .  D ADDR   009DH   A   
SPI0CN. . . . . . . . . . . . . .  D ADDR   00F8H   A   
SPI0DAT . . . . . . . . . . . . .  D ADDR   009BH   A   
SPIEN . . . . . . . . . . . . . .  B ADDR   00F8H.0 A   
SPIF. . . . . . . . . . . . . . .  B ADDR   00F8H.7 A   
SSTA0 . . . . . . . . . . . . . .  D ADDR   0091H   A   
STA . . . . . . . . . . . . . . .  B ADDR   00C0H.5 A   
STATUS?047. . . . . . . . . . . .  D ADDR   0009H   R   SEG=?DT?_COPYTOCODESPACE?FDL
STO . . . . . . . . . . . . . . .  B ADDR   00C0H.4 A   
TB80. . . . . . . . . . . . . . .  B ADDR   0098H.3 A   
TB81. . . . . . . . . . . . . . .  B ADDR   0098H.3 A   
TCON. . . . . . . . . . . . . . .  D ADDR   0088H   A   
TF0 . . . . . . . . . . . . . . .  B ADDR   0088H.5 A   
TF1 . . . . . . . . . . . . . . .  B ADDR   0088H.7 A   
TF2 . . . . . . . . . . . . . . .  B ADDR   00C8H.7 A   
A51 MACRO ASSEMBLER  FDLOLD                                                               01/04/2016 10:32:03 PAGE    21

TF3 . . . . . . . . . . . . . . .  B ADDR   00C8H.7 A   
TF4 . . . . . . . . . . . . . . .  B ADDR   00C8H.7 A   
TH0 . . . . . . . . . . . . . . .  D ADDR   008CH   A   
TH1 . . . . . . . . . . . . . . .  D ADDR   008DH   A   
TI0 . . . . . . . . . . . . . . .  B ADDR   0098H.1 A   
TI1 . . . . . . . . . . . . . . .  B ADDR   0098H.1 A   
TL0 . . . . . . . . . . . . . . .  D ADDR   008AH   A   
TL1 . . . . . . . . . . . . . . .  D ADDR   008BH   A   
TMOD. . . . . . . . . . . . . . .  D ADDR   0089H   A   
TMR2. . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR2CF. . . . . . . . . . . . . .  D ADDR   00C9H   A   
TMR2CN. . . . . . . . . . . . . .  D ADDR   00C8H   A   
TMR2H . . . . . . . . . . . . . .  D ADDR   00CDH   A   
TMR2L . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR3. . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR3CF. . . . . . . . . . . . . .  D ADDR   00C9H   A   
TMR3CN. . . . . . . . . . . . . .  D ADDR   00C8H   A   
TMR3H . . . . . . . . . . . . . .  D ADDR   00CDH   A   
TMR3L . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR4. . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR4CF. . . . . . . . . . . . . .  D ADDR   00C9H   A   
TMR4CN. . . . . . . . . . . . . .  D ADDR   00C8H   A   
TMR4H . . . . . . . . . . . . . .  D ADDR   00CDH   A   
TMR4L . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TR0 . . . . . . . . . . . . . . .  B ADDR   0088H.4 A   
TR1 . . . . . . . . . . . . . . .  B ADDR   0088H.6 A   
TR2 . . . . . . . . . . . . . . .  B ADDR   00C8H.2 A   
TR3 . . . . . . . . . . . . . . .  B ADDR   00C8H.2 A   
TR4 . . . . . . . . . . . . . . .  B ADDR   00C8H.2 A   
TXBMT . . . . . . . . . . . . . .  B ADDR   00F8H.1 A   
WCOL. . . . . . . . . . . . . . .  B ADDR   00F8H.6 A   
WDTCN . . . . . . . . . . . . . .  D ADDR   00FFH   A   
XBR0. . . . . . . . . . . . . . .  D ADDR   00E1H   A   
XBR1. . . . . . . . . . . . . . .  D ADDR   00E2H   A   
XBR2. . . . . . . . . . . . . . .  D ADDR   00E3H   A   
_COPYTOCODESPACE. . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_COPYTOCODESPACE?FDL
_FDL_XFERSPI. . . . . . . . . . .  C ADDR   0008H   R   SEG=?PR?_FDL_XFERSPI?FDL


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
