A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE     1


MACRO ASSEMBLER A51 V8.00
OBJECT MODULE PLACED IN .\fdl.OBJ
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\A51.EXE .\fdl.src PR(.\fdl.ls1) EP DEBUG

LOC  OBJ            LINE     SOURCE

                       1     ; .\fdl.SRC generated from: ..\CommonFiles\fdl.c
                       2     ; COMPILER INVOKED BY:
                       3     ;        C:\Keil\C51\BIN\C51.EXE ..\CommonFiles\fdl.c OPTIMIZE(SIZE) BROWSE INCDIR(C:\Keil\
                             C51\INC\;C:\Keil\Traqmate\132micro\CommonFiles\;C:\Keil\Traqmate\132micro\Superflash\;C:\Ke
                             il\Traqmate\132micro\DU\;C:\Keil\Traqmate\132micro\SU) DB OE DEFINE(DISPLAY,EXTCLK6,NODEBUG
                             ) DEBUG OBJECTEXTEND PRINT(.\fdl.lst) SRC(.\fdl.SRC)
                       4     
                       5     $nomod51 
                       6     
                       7     NAME    FDL
                       8     
  00DA                 9     CCF2    BIT     0D8H.2
  009B                10     TB80    BIT     098H.3
  009D                11     SPI0CKR DATA    09DH
  00DB                12     CCF3    BIT     0D8H.3
  009B                13     TB81    BIT     098H.3
  0080                14     P0      DATA    080H
  00F8                15     SPIEN   BIT     0F8H.0
  00DC                16     CCF4    BIT     0D8H.4
  009F                17     SM00    BIT     098H.7
  0090                18     P1      DATA    090H
  008F                19     PLL0FLT DATA    08FH
  00DD                20     CCF5    BIT     0D8H.5
  00C2                21     AA      BIT     0C0H.2
  009E                22     SM10    BIT     098H.6
  00FF                23     WDTCN   DATA    0FFH
  00A0                24     P2      DATA    0A0H
  00C8                25     A0_DISP BIT     0C8H.0
  009D                26     SM20    BIT     098H.5
  00BC                27     ADC0CF  DATA    0BCH
  00B0                28     P3      DATA    0B0H
  00D6                29     AC      BIT     0D0H.6
  00C8                30     P4      DATA    0C8H
  00DE                31     ONOFF_SW        BIT     0D8H.6
  00F9                32     PCA0    DATA    0F9H
  00E6                33     EIE1    DATA    0E6H
  00D8                34     P5      DATA    0D8H
  00BC                35     ADC2CF  DATA    0BCH
  00AF                36     EA      BIT     0A8H.7
  00E8                37     P6      DATA    0E8H
  00E7                38     EIE2    DATA    0E7H
  009D                39     MCE1    BIT     098H.5
  00F8                40     P7      DATA    0F8H
  00C9                41     E1_DISP BIT     0C8H.1
  008F                42     PSCTL   DATA    08FH
  00CA                43     E2_DISP BIT     0C8H.2
  00DF                44     CF      BIT     0D8H.7
  008E                45     PLL0MUL DATA    08EH
  00E8                46     ADC0CN  DATA    0E8H
  00D4                47     DAC0CN  DATA    0D4H
  0084                48     SFRPAGE DATA    084H
  00CC                49     RST_DISP        BIT     0C8H.4
  00D4                50     DAC1CN  DATA    0D4H
  00C3                51     MAC0CF  DATA    0C3H
  00C2                52     MAC0AH  DATA    0C2H
  00A4                53     P0MDOUT DATA    0A4H
  00E8                54     ADC2CN  DATA    0E8H
  00A5                55     P1MDOUT DATA    0A5H
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE     2

  0092                56     MAC0BH  DATA    092H
  00A8                57     IE      DATA    0A8H
  00A6                58     P2MDOUT DATA    0A6H
  009A                59     CCH0MA  DATA    09AH
  00A7                60     P3MDOUT DATA    0A7H
  00A3                61     CCH0LC  DATA    0A3H
  00F6                62     EIP1    DATA    0F6H
  00C1                63     MAC0AL  DATA    0C1H
  009C                64     P4MDOUT DATA    09CH
  00F9                65     TXBMT   BIT     0F8H.1
  00F7                66     EIP2    DATA    0F7H
  00A1                67     CCH0CN  DATA    0A1H
  009D                68     P5MDOUT DATA    09DH
  0091                69     MAC0BL  DATA    091H
  00F8                70     DF_WP   BIT     0F8H.0
  00FC                71     PCA0CPH0        DATA    0FCH
  009E                72     P6MDOUT DATA    09EH
  00FE                73     PCA0CPH1        DATA    0FEH
  009F                74     P7MDOUT DATA    09FH
  0082                75     DP      DATA    082H
  00EA                76     PCA0CPH2        DATA    0EAH
  00C4                77     ADC0GT  DATA    0C4H
  00DE                78     CR      BIT     0D8H.6
  00EC                79     PCA0CPH3        DATA    0ECH
  00CE                80     EXF2    BIT     0C8H.6
  009C                81     REN0    BIT     098H.4
  00FB                82     PCA0CPL0        DATA    0FBH
  00EE                83     PCA0CPH4        DATA    0EEH
  00A3                84     EMI0CF  DATA    0A3H
  0096                85     SFRPGCN DATA    096H
  00CE                86     EXF3    BIT     0C8H.6
  009C                87     REN1    BIT     098H.4
  00FD                88     PCA0CPL1        DATA    0FDH
  00E2                89     PCA0CPH5        DATA    0E2H
  00DA                90     PCA0CPM0        DATA    0DAH
  00D9                91     PCA0MD  DATA    0D9H
  00D8                92     PCA0CN  DATA    0D8H
  00C4                93     ADC2GT  DATA    0C4H
  00CE                94     EXF4    BIT     0C8H.6
  00E9                95     PCA0CPL2        DATA    0E9H
  00DB                96     PCA0CPM1        DATA    0DBH
  00EB                97     PCA0CPL3        DATA    0EBH
  00DC                98     PCA0CPM2        DATA    0DCH
  00B8                99     IP      DATA    0B8H
  00C6               100     ADC0LT  DATA    0C6H
  00C3               101     MAC0HO  BIT     0C0H.3
  008C               102     CP0FIF  BIT     088H.4
  00ED               103     PCA0CPL4        DATA    0EDH
  00DD               104     PCA0CPM3        DATA    0DDH
  008C               105     CP1FIF  BIT     088H.4
  00E1               106     PCA0CPL5        DATA    0E1H
  00DE               107     PCA0CPM4        DATA    0DEH
  00D7               108     CY      BIT     0D0H.7
  00C3               109     SI      BIT     0C0H.3
  00DF               110     PCA0CPM5        DATA    0DFH
  00C6               111     ADC2LT  DATA    0C6H
  00DB               112     BACK_SW BIT     0D8H.3
  00DC               113     DN_SW   BIT     0D8H.4
  00E1               114     XBR0    DATA    0E1H
  00B9               115     SADEN0  DATA    0B9H
  00E2               116     XBR1    DATA    0E2H
  00A2               117     EMI0CN  DATA    0A2H
  00E3               118     XBR2    DATA    0E3H
  0088               119     FLHBUSY BIT     088H.0
  00D1               120     REF0CN  DATA    0D1H
  00A9               121     SADDR0  DATA    0A9H
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE     3

  00BA               122     AMX0CF  DATA    0BAH
  00ED               123     AD0INT  BIT     0E8H.5
  00CB               124     RCAP2H  DATA    0CBH
  00A2               125     CCH0TN  DATA    0A2H
  0086               126     SFRLAST DATA    086H
  00BC               127     PS      BIT     0B8H.4
  00CB               128     RCAP3H  DATA    0CBH
  00BA               129     AMX2CF  DATA    0BAH
  0081               130     SP      DATA    081H
  00ED               131     AD2INT  BIT     0E8H.5
  00CB               132     RCAP4H  DATA    0CBH
  00A1               133     EMI0TC  DATA    0A1H
  00D2               134     OV      BIT     0D0H.2
  00C1               135     MAC0SO  BIT     0C0H.1
  00C0               136     SMB0CN  DATA    0C0H
  00CC               137     TMR2    DATA    0CCH
  008D               138     CP0RIF  BIT     088H.5
  00CA               139     RCAP2L  DATA    0CAH
  00CC               140     TMR3    DATA    0CCH
  00FD               141     MODF    BIT     0F8H.5
  008D               142     CP1RIF  BIT     088H.5
  00CA               143     RCAP3L  DATA    0CAH
  00CC               144     TMR4    DATA    0CCH
  00CA               145     RCAP4L  DATA    0CAH
  00CF               146     SMB0CR  DATA    0CFH
  0089               147     CPT0MD  DATA    089H
  0088               148     CPT0CN  DATA    088H
  009F               149     S1MODE  BIT     098H.7
  00AD               150     P1MDIN  DATA    0ADH
  0089               151     PLL0CN  DATA    089H
  0089               152     CPT1MD  DATA    089H
  0088               153     CPT1CN  DATA    088H
  0085               154     SFRNEXT DATA    085H
  00F8               155     SPI0CN  DATA    0F8H
  00DA               156     UP_SW   BIT     0D8H.2
  00CF               157     MAC0RNDH        DATA    0CFH
  00C9               158     TMR2CF  DATA    0C9H
  00C9               159     TMR3CF  DATA    0C9H
  0087               160     PCON    DATA    087H
  00F9               161     DF_CS1  BIT     0F8H.1
  00C9               162     TMR4CF  DATA    0C9H
  00FB               163     DF_CS2  BIT     0F8H.3
  00FF               164     SPIF    BIT     0F8H.7
  00CE               165     MAC0RNDL        DATA    0CEH
  0089               166     TMOD    DATA    089H
  0088               167     TCON    DATA    088H
  00FE               168     WCOL    BIT     0F8H.6
  00FA               169     NSSMD0  BIT     0F8H.2
  00BB               170     AMX0SL  DATA    0BBH
  00FB               171     NSSMD1  BIT     0F8H.3
  00C8               172     TMR2CN  DATA    0C8H
  00C8               173     TMR3CN  DATA    0C8H
  00BB               174     AMX2SL  DATA    0BBH
  00D8               175     LITE_SW BIT     0D8H.0
  00C8               176     TMR4CN  DATA    0C8H
  00CB               177     RW_DISP BIT     0C8H.3
  008E               178     CP0OUT  BIT     088H.6
  008E               179     CP1OUT  BIT     088H.6
  0089               180     IE0     BIT     088H.1
  008B               181     IE1     BIT     088H.3
  008B               182     OSCICL  DATA    08BH
  0097               183     CLKSEL  DATA    097H
  00F0               184     B       DATA    0F0H
  00D3               185     DAC0H   DATA    0D3H
  00BF               186     ADC0H   DATA    0BFH
  00B1               187     PSBANK  DATA    0B1H
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE     4

  008A               188     OSCICN  DATA    08AH
  00D3               189     DAC1H   DATA    0D3H
  00C1               190     SMBFTE  BIT     0C0H.1
  00C7               191     BUSY    BIT     0C0H.7
  00D2               192     DAC0L   DATA    0D2H
  00BE               193     ADC0L   DATA    0BEH
  00D2               194     DAC1L   DATA    0D2H
  00E0               195     ACC     DATA    0E0H
  00AC               196     ES0     BIT     0A8H.4
  00FB               197     PCA0CP0 DATA    0FBH
  00EF               198     AD0EN   BIT     0E8H.7
  00C9               199     CT2     BIT     0C8H.1
  00A9               200     ET0     BIT     0A8H.1
  00FD               201     PCA0CP1 DATA    0FDH
  00C9               202     CT3     BIT     0C8H.1
  00AB               203     ET1     BIT     0A8H.3
  008D               204     TF0     BIT     088H.5
  00E9               205     PCA0CP2 DATA    0E9H
  00EF               206     AD2EN   BIT     0E8H.7
  00C9               207     CT4     BIT     0C8H.1
  00AD               208     ET2     BIT     0A8H.5
  0098               209     RI0     BIT     098H.0
  008F               210     TF1     BIT     088H.7
  00EB               211     PCA0CP3 DATA    0EBH
  00CF               212     TF2     BIT     0C8H.7
  00C0               213     SMBTOE  BIT     0C0H.0
  0098               214     RI1     BIT     098H.0
  008C               215     TH0     DATA    08CH
  00ED               216     PCA0CP4 DATA    0EDH
  00CF               217     TF3     BIT     0C8H.7
  00A8               218     EX0     BIT     0A8H.0
  0099               219     TI0     BIT     098H.1
  0088               220     IT0     BIT     088H.0
  00FA               221     PCA0H   DATA    0FAH
  008D               222     TH1     DATA    08DH
  00E1               223     PCA0CP5 DATA    0E1H
  00CF               224     TF4     BIT     0C8H.7
  00AA               225     EX1     BIT     0A8H.2
  0099               226     TI1     BIT     098H.1
  008A               227     IT1     BIT     088H.2
  00FB               228     EN3VDISP        BIT     0F8H.3
  00D0               229     P       BIT     0D0H.0
  00FD               230     BACKLITEKB      BIT     0F8H.5
  00C0               231     MAC0N   BIT     0C0H.0
  008C               232     OSCXCN  DATA    08CH
  008A               233     TL0     DATA    08AH
  0088               234     FLSTAT  DATA    088H
  00F9               235     PCA0L   DATA    0F9H
  008B               236     TL1     DATA    08BH
  00B9               237     PT0     BIT     0B8H.1
  00D3               238     RS0     BIT     0D0H.3
  00BB               239     PT1     BIT     0B8H.3
  00D4               240     RS1     BIT     0D0H.4
  00BD               241     PT2     BIT     0B8H.5
  008C               242     TR0     BIT     088H.4
  00EE               243     AD0TM   BIT     0E8H.6
  008F               244     CP0EN   BIT     088H.7
  008E               245     TR1     BIT     088H.6
  00CA               246     TR2     BIT     0C8H.2
  00B8               247     PX0     BIT     0B8H.0
  008F               248     CP1EN   BIT     088H.7
  00CA               249     RCAP2   DATA    0CAH
  00EE               250     AD2TM   BIT     0E8H.6
  00CA               251     TR3     BIT     0C8H.2
  00BA               252     PX1     BIT     0B8H.2
  00FE               253     BACKLITEDS      BIT     0F8H.6
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE     5

  00CA               254     RCAP3   DATA    0CAH
  00CA               255     TR4     BIT     0C8H.2
  00CA               256     RCAP4   DATA    0CAH
  00C2               257     MAC0Z   BIT     0C0H.2
  0083               258     DPH     DATA    083H
  00C5               259     ADC0GTH DATA    0C5H
  0082               260     DPL     DATA    082H
  00C4               261     ADC0GTL DATA    0C4H
  0099               262     SBUF0   DATA    099H
  00C7               263     ADC0LTH DATA    0C7H
  0099               264     SBUF1   DATA    099H
  00CB               265     EXEN2   BIT     0C8H.3
  00EF               266     RSTSRC  DATA    0EFH
  00B7               267     FLACL   DATA    0B7H
  00FA               268     DF_RST  BIT     0F8H.2
  00CB               269     EXEN3   BIT     0C8H.3
  00C8               270     CPRL2   BIT     0C8H.0
  0088               271     CP0HYN0 BIT     088H.0
  0098               272     SCON0   DATA    098H
  00CB               273     EXEN4   BIT     0C8H.3
  00C8               274     CPRL3   BIT     0C8H.0
  0088               275     CP1HYN0 BIT     088H.0
  0089               276     CP0HYN1 BIT     088H.1
  0098               277     SCON1   DATA    098H
  00C8               278     CPRL4   BIT     0C8H.0
  0089               279     CP1HYN1 BIT     088H.1
  008A               280     CP0HYP0 BIT     088H.2
  00C6               281     ADC0LTL DATA    0C6H
  008A               282     CP1HYP0 BIT     088H.2
  008B               283     CP0HYP1 BIT     088H.3
  00C5               284     STA     BIT     0C0H.5
  008B               285     CP1HYP1 BIT     088H.3
  00C3               286     SMB0ADR DATA    0C3H
  00C0               287     MAC0STA DATA    0C0H
  0091               288     SSTA0   DATA    091H
  00C2               289     SMB0DAT DATA    0C2H
  00CD               290     TMR2H   DATA    0CDH
  009A               291     SPI0CFG DATA    09AH
  00D9               292     SEL_SW  BIT     0D8H.1
  00B4               293     USB_PRESENT     BIT     0B0H.4
  00CD               294     TMR3H   DATA    0CDH
  008E               295     CKCON   DATA    08EH
  00CD               296     TMR4H   DATA    0CDH
  00FC               297     RXOVRN  BIT     0F8H.4
  00CC               298     TMR2L   DATA    0CCH
  00CC               299     TMR3L   DATA    0CCH
  00E8               300     AD0LJST BIT     0E8H.0
  00CC               301     TMR4L   DATA    0CCH
  00D5               302     F0      BIT     0D0H.5
  00B7               303     FLSCL   DATA    0B7H
  00EA               304     AD0CM0  BIT     0E8H.2
  00D1               305     F1      BIT     0D0H.1
  00C4               306     STO     BIT     0C0H.4
  00C6               307     ENSMB   BIT     0C0H.6
  00EB               308     AD0CM1  BIT     0E8H.3
  009B               309     SPI0DAT DATA    09BH
  00D2               310     DAC0    DATA    0D2H
  00BE               311     ADC0    DATA    0BEH
  00E9               312     AD2CM0  BIT     0E8H.1
  00D2               313     DAC1    DATA    0D2H
  00EA               314     AD2CM1  BIT     0E8H.2
  00E9               315     AD0WINT BIT     0E8H.1
  00EB               316     AD2CM2  BIT     0E8H.3
  00EC               317     AD0BUSY BIT     0E8H.4
  00D0               318     PSW     DATA    0D0H
  00BE               319     ADC2    DATA    0BEH
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE     6

  0097               320     MAC0OVR DATA    097H
  0093               321     MAC0ACC0        DATA    093H
  00E8               322     AD2WINT BIT     0E8H.0
  0094               323     MAC0ACC1        DATA    094H
  00EC               324     AD2BUSY BIT     0E8H.4
  00D8               325     CCF0    BIT     0D8H.0
  009A               326     RB80    BIT     098H.2
  00C1               327     SMB0STA DATA    0C1H
  0095               328     MAC0ACC2        DATA    095H
  00D9               329     CCF1    BIT     0D8H.1
  009A               330     RB81    BIT     098H.2
  0096               331     MAC0ACC3        DATA    096H
  008D               332     PLL0DIV DATA    08DH
                     333     ?PR?_CopytoCodeSpace?FDL                 SEGMENT CODE 
                     334     ?DT?_CopytoCodeSpace?FDL                 SEGMENT DATA OVERLAYABLE 
                     335     ?PR?_FDL_xferSPI?FDL SEGMENT CODE 
                     336     ?PR?FDL_DataFlash_Read_Status?FDL        SEGMENT CODE 
                     337     ?DT?FDL_DataFlash_Read_Status?FDL        SEGMENT DATA OVERLAYABLE 
                     338             EXTRN   XDATA (flashpage)
                     339             PUBLIC  FDL_DataFlash_Read_Status
                     340             PUBLIC  _FDL_xferSPI
                     341             PUBLIC  _CopytoCodeSpace
                     342     
----                 343             RSEG  ?DT?_CopytoCodeSpace?FDL
0000                 344     ?_CopytoCodeSpace?BYTE:
0000                 345        lastpage?040:   DS   2
000A                 346             ORG  10
000A                 347               q?041:   DS   2
000A                 348             ORG  10
000A                 349               q?042:   DS   2
0002                 350             ORG  2
0002                 351          pwrite?043:   DS   2
0004                 352             ORG  4
0004                 353         EA_save?044:   DS   1
0005                 354             ORG  5
0005                 355               i?045:   DS   2
0007                 356             ORG  7
0007                 357            page?046:   DS   2
0009                 358             ORG  9
0009                 359          status?047:   DS   1
                     360     
----                 361             RSEG  ?DT?FDL_DataFlash_Read_Status?FDL
0000                 362     ?FDL_DataFlash_Read_Status?BYTE:
0000                 363               q?250:   DS   2
                     364     ; // software downloader
                     365     ; //
                     366     ; // this must be less than 510 bytes when compiled which is very tight. It must
                     367     ; // not extend into address 0xFFFE or 0xFFFF, the micro flash lock bytes
                     368     ; // it is loaded at 0xFE00 and must be self-contained so the code copy will
                     369     ; // not overwrite it.
                     370     ; //
                     371     ; // initial implementation John Paulos, 04/26/2005
                     372     ; // re-written Glenn Stephens, 05/02/2005
                     373     ; //
                     374     ; 
                     375     ; #include <tmtypes.h>
                     376     ; #ifdef DISPLAY
                     377     ; #include <display.h>
                     378     ; #else
                     379     ; #include <sensor.h>
                     380     ; #endif
                     381     ; 
                     382     ; //#define DFWAITREAD do {int q; for (q=0; q<64; q++) ; } while(0)  // 64 seems to work we
                             ll. should be verified.
                     383     ; //#define DFWAITWRITE do {int q; for (q=0; q<64; q++) ; } while(0)  // longer for erase.
                     384     ; #define DFWAIT do {int q; for (q=0; q<64; q++) ; } while(0)  // longer for erase.
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE     7

                     385     ; 
                     386     ; u08 FDL_xferSPI (u08);
                     387     ; u08 FDL_DataFlash_Read_Status(void);
                     388     ; 
                     389     ; void CopytoCodeSpace(u16 lastpage) {
                     390     
----                 391             RSEG  ?PR?_CopytoCodeSpace?FDL
0000                 392     _CopytoCodeSpace:
                     393             USING   0
                     394                             ; SOURCE LINE # 26
0000 8E00     F      395             MOV     lastpage?040,R6
0002 8F00     F      396             MOV     lastpage?040+01H,R7
                     397     ;       char xdata* data pwrite;
                     398     ;       char EA_save;
                     399     ;       u16 i, page;
                     400     ;       u08 status;
                     401     ; #pragma ASM
                     402     ; // support code versions with roadblock at 0xfe00
                     403               
                     404     ; // this code duplicates the c compiler argument passing code
                     405               
                     406     ; //    argument passing, R6 = MSB, R7 = LSB
                     407               
                     408     ;       MOV     lastpage?040,R6
0004 8E00     F      409               MOV   lastpage?040,R6
                     410     ;       MOV     lastpage?040+01H,R7
0006 8F00     F      411               MOV   lastpage?040+01H,R7
                     412     ; #pragma ENDASM
                     413     ; 
                     414     ;       pwrite = 0x0;                                           // initialize code pointer
                     415                             ; SOURCE LINE # 39
0008 E4              416             CLR     A
0009 F500     F      417             MOV     pwrite?043,A
000B F500     F      418             MOV     pwrite?043+01H,A
                     419     ; 
                     420     ;       EA_save = EA;                                           // save interrupt status
                     421                             ; SOURCE LINE # 41
000D A2AF            422             MOV     C,EA
000F 33              423             RLC     A
0010 F500     F      424             MOV     EA_save?044,A
                     425     ;       EA = 0;                                                         // disable interrup
                             ts
                     426                             ; SOURCE LINE # 42
0012 C2AF            427             CLR     EA
                     428     ; 
                     429     ;       SFRPAGE = LEGACY_PAGE;
                     430                             ; SOURCE LINE # 44
0014 E4              431             CLR     A
0015 F584            432             MOV     SFRPAGE,A
                     433     ;       FLSCL |= 0x01;                                          // enable flash writes/eras
                             es from user software
                     434                             ; SOURCE LINE # 45
0017 43B701          435             ORL     FLSCL,#01H
                     436     ; 
                     437     ;       PSCTL = 0x03;                                           // movx writes erase flash 
                             page
                     438                             ; SOURCE LINE # 47
001A 758F03          439             MOV     PSCTL,#03H
001D                 440     ?C0001:
                     441     ; 
                     442     ;       // erase code memory up to last 1024 page containing bootstrapper
                     443     ;       while (pwrite < LAST_CODE_PAGE) {       // stop one page from end of codespace
                     444                             ; SOURCE LINE # 50
001D C3              445             CLR     C
001E E500     F      446             MOV     A,pwrite?043
0020 94FC            447             SUBB    A,#0FCH
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE     8

0022 5016            448             JNC     ?C0002
                     449     ;               *pwrite = 0x88;                                 // write any value to initi
                             ate page erase
                     450                             ; SOURCE LINE # 51
0024 850082   F      451             MOV     DPL,pwrite?043+01H
0027 850083   F      452             MOV     DPH,pwrite?043
002A 7488            453             MOV     A,#088H
002C F0              454             MOVX    @DPTR,A
                     455     ;               pwrite += CODE_PAGE_SIZE;               // point to next page
                     456                             ; SOURCE LINE # 52
002D E4              457             CLR     A
002E 2500     F      458             ADD     A,pwrite?043+01H
0030 F500     F      459             MOV     pwrite?043+01H,A
0032 7404            460             MOV     A,#04H
0034 3500     F      461             ADDC    A,pwrite?043
0036 F500     F      462             MOV     pwrite?043,A
                     463     ;       }
                     464                             ; SOURCE LINE # 53
0038 80E3            465             SJMP    ?C0001
003A                 466     ?C0002:
                     467     ; 
                     468     ;       PSCTL = 0x00;                                           // movx writes to target ra
                             m
                     469                             ; SOURCE LINE # 55
003A E4              470             CLR     A
003B F58F            471             MOV     PSCTL,A
                     472     ;       pwrite = 0x00;                                          // reset code pointer
                     473                             ; SOURCE LINE # 56
003D F500     F      474             MOV     pwrite?043,A
003F F500     F      475             MOV     pwrite?043+01H,A
                     476     ; 
                     477     ;       // copy code over from dataflash to micro flash codespace 512 bytes at a time
                     478     ;       for (page=0; page < (BOOTSTRAP_ADDR/CODE_DOWNLOAD_SIZE); page++) {
                     479                             ; SOURCE LINE # 59
0041 F500     F      480             MOV     page?046,A
0043 F500     F      481             MOV     page?046+01H,A
0045                 482     ?C0003:
                     483     ; 
                     484     ;               SFRPAGE = CONFIG_PAGE;
                     485                             ; SOURCE LINE # 61
0045 75840F          486             MOV     SFRPAGE,#0FH
0048                 487     ?C0008:
                     488     ; 
                     489     ; //                    FDL_DataFlash_Page_Read(MAX_PAGE_SIZE, flashpage.bigbuff, read_page
                             );
                     490     ; // function is put in line here to avoid passing pointer which uses code put in by 
                     491     ; // compiler in lower code space
                     492     ; 
                     493     ; #ifdef SENSOR
                     494     ;               if (!(page % 4)) LED1 = ~LED1;;
                     495     ; #endif
                     496     ; 
                     497     ;               // wait for Serial Flash to be available
                     498     ;               do {
                     499                             ; SOURCE LINE # 72
                     500     ;                       status = FDL_DataFlash_Read_Status();
                     501                             ; SOURCE LINE # 73
0048 120000   F      502             LCALL   FDL_DataFlash_Read_Status
004B 8F00     F      503             MOV     status?047,R7
                     504     ;               } while (!(status & STATUS_READY_MASK));
                     505                             ; SOURCE LINE # 74
004D E500     F      506             MOV     A,status?047
004F 30E7F6          507             JNB     ACC.7,?C0008
                     508     ; 
                     509     ;               // set CS to low
                     510     ;               DF_CS1 = 0;
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE     9

                     511                             ; SOURCE LINE # 77
0052 C2F9            512             CLR     DF_CS1
                     513     ;               DFWAIT;
                     514                             ; SOURCE LINE # 78
0054 E4              515             CLR     A
0055 F500     F      516             MOV     q?041,A
0057 F500     F      517             MOV     q?041+01H,A
0059                 518     ?C0012:
0059 0500     F      519             INC     q?041+01H
005B E500     F      520             MOV     A,q?041+01H
005D 7002            521             JNZ     ?C0047
005F 0500     F      522             INC     q?041
0061                 523     ?C0047:
0061 6440            524             XRL     A,#040H
0063 4500     F      525             ORL     A,q?041
0065 70F2            526             JNZ     ?C0012
0067                 527     ?C0010:
                     528     ; 
                     529     ;               // shift out command
                     530     ;               FDL_xferSPI(MEMORY_PAGE_READ);
                     531                             ; SOURCE LINE # 81
0067 7FD2            532             MOV     R7,#0D2H
0069 120000   F      533             LCALL   _FDL_xferSPI
                     534     ;       
                     535     ;               // shift out reserved bits and upper bits of page address
                     536     ;               FDL_xferSPI(page >> 6); 
                     537                             ; SOURCE LINE # 84
006C E500     F      538             MOV     A,page?046+01H
006E AE00     F      539             MOV     R6,page?046
0070 7806            540             MOV     R0,#06H
0072                 541     ?C0048:
0072 CE              542             XCH     A,R6
0073 C3              543             CLR     C
0074 13              544             RRC     A
0075 CE              545             XCH     A,R6
0076 13              546             RRC     A
0077 D8F9            547             DJNZ    R0,?C0048
0079 FF              548             MOV     R7,A
007A 120000   F      549             LCALL   _FDL_xferSPI
                     550     ; 
                     551     ;               // shift out bottom 6 bits of page address and top bits of byte address
                     552     ;               FDL_xferSPI((u08) page << 2);
                     553                             ; SOURCE LINE # 87
007D 120000   F      554             LCALL   L?0057
                     555     ; 
                     556     ;               // shift out bottom 8 bits of unsigned char address
                     557     ;               FDL_xferSPI(0);
                     558                             ; SOURCE LINE # 90
0080 E4              559             CLR     A
0081 FF              560             MOV     R7,A
0082 120000   F      561             LCALL   _FDL_xferSPI
                     562     ; 
                     563     ;               // shift out 4 bytes of don't cares
                     564     ;               FDL_xferSPI(0); FDL_xferSPI(0); FDL_xferSPI(0); FDL_xferSPI(0);
                     565                             ; SOURCE LINE # 93
0085 E4              566             CLR     A
0086 FF              567             MOV     R7,A
0087 120000   F      568             LCALL   _FDL_xferSPI
008A E4              569             CLR     A
008B FF              570             MOV     R7,A
008C 120000   F      571             LCALL   _FDL_xferSPI
008F E4              572             CLR     A
0090 FF              573             MOV     R7,A
0091 120000   F      574             LCALL   _FDL_xferSPI
0094 E4              575             CLR     A
0095 FF              576             MOV     R7,A
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE    10

0096 120000   F      577             LCALL   _FDL_xferSPI
                     578     ; 
                     579     ;               // shift in the data
                     580     ;               for (i=0; i < CODE_DOWNLOAD_SIZE; i++)
                     581                             ; SOURCE LINE # 96
0099 E4              582             CLR     A
009A F500     F      583             MOV     i?045,A
009C F500     F      584             MOV     i?045+01H,A
009E                 585     ?C0015:
                     586     ;                       flashpage.bigbuff[i] =  FDL_xferSPI(0);
                     587                             ; SOURCE LINE # 97
009E E4              588             CLR     A
009F FF              589             MOV     R7,A
00A0 120000   F      590             LCALL   _FDL_xferSPI
00A3 7400     F      591             MOV     A,#LOW (flashpage)
00A5 2500     F      592             ADD     A,i?045+01H
00A7 F582            593             MOV     DPL,A
00A9 7400     F      594             MOV     A,#HIGH (flashpage)
00AB 3500     F      595             ADDC    A,i?045
00AD F583            596             MOV     DPH,A
00AF EF              597             MOV     A,R7
00B0 F0              598             MOVX    @DPTR,A
00B1 0500     F      599             INC     i?045+01H
00B3 E500     F      600             MOV     A,i?045+01H
00B5 7002            601             JNZ     ?C0049
00B7 0500     F      602             INC     i?045
00B9                 603     ?C0049:
00B9 C3              604             CLR     C
00BA E500     F      605             MOV     A,i?045
00BC 9402            606             SUBB    A,#02H
00BE 40DE            607             JC      ?C0015
00C0                 608     ?C0016:
                     609     ; 
                     610     ;               // raise CS to end operation
                     611     ;               DF_CS1 = 1;
                     612                             ; SOURCE LINE # 100
00C0 D2F9            613             SETB    DF_CS1
                     614     ; 
                     615     ; // end of inline function
                     616     ; 
                     617     ;               SFRPAGE = LEGACY_PAGE;
                     618                             ; SOURCE LINE # 104
00C2 E4              619             CLR     A
00C3 F584            620             MOV     SFRPAGE,A
                     621     ;               PSCTL = 0x01;                                           // movx writes to c
                             odeflash
                     622                             ; SOURCE LINE # 105
00C5 758F01          623             MOV     PSCTL,#01H
                     624     ; 
                     625     ;               // copy dataflash page into micro flash
                     626     ;               for (i=0; i < CODE_DOWNLOAD_SIZE; i++)
                     627                             ; SOURCE LINE # 108
00C8 F500     F      628             MOV     i?045,A
00CA F500     F      629             MOV     i?045+01H,A
00CC                 630     ?C0018:
                     631     ;                       *pwrite++ = flashpage.bigbuff[i];
                     632                             ; SOURCE LINE # 109
00CC 7400     F      633             MOV     A,#LOW (flashpage)
00CE 2500     F      634             ADD     A,i?045+01H
00D0 F582            635             MOV     DPL,A
00D2 7400     F      636             MOV     A,#HIGH (flashpage)
00D4 3500     F      637             ADDC    A,i?045
00D6 F583            638             MOV     DPH,A
00D8 E0              639             MOVX    A,@DPTR
00D9 FF              640             MOV     R7,A
00DA 0500     F      641             INC     pwrite?043+01H
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE    11

00DC E500     F      642             MOV     A,pwrite?043+01H
00DE AC00     F      643             MOV     R4,pwrite?043
00E0 7002            644             JNZ     ?C0050
00E2 0500     F      645             INC     pwrite?043
00E4                 646     ?C0050:
00E4 14              647             DEC     A
00E5 F582            648             MOV     DPL,A
00E7 8C83            649             MOV     DPH,R4
00E9 EF              650             MOV     A,R7
00EA F0              651             MOVX    @DPTR,A
00EB 0500     F      652             INC     i?045+01H
00ED E500     F      653             MOV     A,i?045+01H
00EF 7002            654             JNZ     ?C0051
00F1 0500     F      655             INC     i?045
00F3                 656     ?C0051:
00F3 B400D6          657             CJNE    A,#00H,?C0018
00F6 E500     F      658             MOV     A,i?045
00F8 B402D1          659             CJNE    A,#02H,?C0018
00FB                 660     ?C0019:
                     661     ; 
                     662     ;               PSCTL = 0x00;
                     663                             ; SOURCE LINE # 111
00FB E4              664             CLR     A
00FC F58F            665             MOV     PSCTL,A
                     666     ;       } // for
                     667                             ; SOURCE LINE # 112
00FE 0500     F      668             INC     page?046+01H
0100 E500     F      669             MOV     A,page?046+01H
0102 7002            670             JNZ     ?C0053
0104 0500     F      671             INC     page?046
0106                 672     ?C0053:
0106 C3              673             CLR     C
0107 947F            674             SUBB    A,#07FH
0109 E500     F      675             MOV     A,page?046
010B 9400            676             SUBB    A,#00H
010D 5003            677             JNC     $ + 5H
010F 020000   F      678             LJMP    ?C0003
0112                 679     ?C0004:
                     680     ; 
                     681     ;       PSCTL = 0;                                                      // movx writes targ
                             et ram
                     682                             ; SOURCE LINE # 114
0112 E4              683             CLR     A
0113 F58F            684             MOV     PSCTL,A
                     685     ; 
                     686     ;       FLSCL &= ~0x01;                                         // disable flash writes fro
                             m user sw
                     687                             ; SOURCE LINE # 116
0115 53B7FE          688             ANL     FLSCL,#0FEH
                     689     ;       EA = EA_save;
                     690                             ; SOURCE LINE # 117
0118 E500     F      691             MOV     A,EA_save?044
011A 24FF            692             ADD     A,#0FFH
011C 92AF            693             MOV     EA,C
                     694     ;       PSW = 0;
                     695                             ; SOURCE LINE # 118
011E E4              696             CLR     A
011F F5D0            697             MOV     PSW,A
                     698     ; 
                     699     ;       SFRPAGE = CONFIG_PAGE;
                     700                             ; SOURCE LINE # 120
0121 75840F          701             MOV     SFRPAGE,#0FH
                     702     ; 
                     703     ;       // clear the flash - NOTE: cannot use global variables. Must choose max erase pages
                             .
                     704     ;       for (page = 0; page < MAX_NUM_PAGES; page += 8) {
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE    12

                     705                             ; SOURCE LINE # 123
0124 F500     F      706             MOV     page?046,A
0126 F500     F      707             MOV     page?046+01H,A
0128                 708     ?C0021:
0128 C3              709             CLR     C
0129 E500     F      710             MOV     A,page?046
012B 9420            711             SUBB    A,#020H
012D 504C            712             JNC     ?C0035
012F                 713     ?C0026:
                     714     ; 
                     715     ; #ifdef SENSOR
                     716     ;               // invert LED every so often
                     717     ;               if (!(page % 64)) LED2 = ~LED2;
                     718     ; #endif
                     719     ; 
                     720     ;               // inline dataflash erase block
                     721     ; 
                     722     ;               // wait for Serial Flash to be available
                     723     ;               do {
                     724                             ; SOURCE LINE # 133
                     725     ;                       status = FDL_DataFlash_Read_Status();
                     726                             ; SOURCE LINE # 134
012F 120000   F      727             LCALL   FDL_DataFlash_Read_Status
0132 8F00     F      728             MOV     status?047,R7
                     729     ;               } while (!(status & STATUS_READY_MASK));
                     730                             ; SOURCE LINE # 135
0134 E500     F      731             MOV     A,status?047
0136 30E7F6          732             JNB     ACC.7,?C0026
                     733     ; 
                     734     ;               DF_CS1 = 0;
                     735                             ; SOURCE LINE # 137
0139 C2F9            736             CLR     DF_CS1
                     737     ;               DFWAIT;
                     738                             ; SOURCE LINE # 138
013B E4              739             CLR     A
013C F500     F      740             MOV     q?042,A
013E F500     F      741             MOV     q?042+01H,A
0140                 742     ?C0030:
0140 0500     F      743             INC     q?042+01H
0142 E500     F      744             MOV     A,q?042+01H
0144 7002            745             JNZ     ?C0054
0146 0500     F      746             INC     q?042
0148                 747     ?C0054:
0148 6440            748             XRL     A,#040H
014A 4500     F      749             ORL     A,q?042
014C 70F2            750             JNZ     ?C0030
014E                 751     ?C0028:
                     752     ; 
                     753     ;               //command
                     754     ;               FDL_xferSPI(BLOCK_ERASE);
                     755                             ; SOURCE LINE # 141
014E 7F50            756             MOV     R7,#050H
0150 120000   F      757             LCALL   _FDL_xferSPI
                     758     ; 
                     759     ;               // shift out reserved bits and upper bits of page address
                     760     ;               FDL_xferSPI(page >> 6);
                     761                             ; SOURCE LINE # 144
0153 E500     F      762             MOV     A,page?046+01H
0155 AE00     F      763             MOV     R6,page?046
0157 7806            764             MOV     R0,#06H
0159                 765     ?C0055:
0159 CE              766             XCH     A,R6
015A C3              767             CLR     C
015B 13              768             RRC     A
015C CE              769             XCH     A,R6
015D 13              770             RRC     A
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE    13

015E D8F9            771             DJNZ    R0,?C0055
0160 FF              772             MOV     R7,A
0161 120000   F      773             LCALL   _FDL_xferSPI
                     774     ; 
                     775     ;               // shift out bottom 6 bits of page address and top bits of byte address
                     776     ;               FDL_xferSPI((u08) page << 2);
                     777                             ; SOURCE LINE # 147
0164 120000   F      778             LCALL   L?0057
                     779     ; 
                     780     ;               // shift out bottom 8 bits of unsigned char address
                     781     ;               FDL_xferSPI(0);
                     782                             ; SOURCE LINE # 150
0167 E4              783             CLR     A
0168 FF              784             MOV     R7,A
0169 120000   F      785             LCALL   _FDL_xferSPI
                     786     ; 
                     787     ;               DF_CS1 = 1;
                     788                             ; SOURCE LINE # 152
016C D2F9            789             SETB    DF_CS1
                     790     ; 
                     791     ;               // end of inline function
                     792     ;       } // for
                     793                             ; SOURCE LINE # 155
016E 7408            794             MOV     A,#08H
0170 2500     F      795             ADD     A,page?046+01H
0172 F500     F      796             MOV     page?046+01H,A
0174 E4              797             CLR     A
0175 3500     F      798             ADDC    A,page?046
0177 F500     F      799             MOV     page?046,A
0179 80AD            800             SJMP    ?C0021
017B                 801     ?C0035:
                     802     ; 
                     803     ;       // wait for Serial Flash to be finished
                     804     ;       do {
                     805                             ; SOURCE LINE # 158
                     806     ;               status = FDL_DataFlash_Read_Status();
                     807                             ; SOURCE LINE # 159
017B 120000   F      808             LCALL   FDL_DataFlash_Read_Status
017E 8F00     F      809             MOV     status?047,R7
                     810     ;       } while (!(status & STATUS_READY_MASK));
                     811                             ; SOURCE LINE # 160
0180 E500     F      812             MOV     A,status?047
0182 30E7F6          813             JNB     ACC.7,?C0035
                     814     ; 
                     815     ;       SFRPAGE = LEGACY_PAGE;
                     816                             ; SOURCE LINE # 162
0185 E4              817             CLR     A
0186 F584            818             MOV     SFRPAGE,A
                     819     ; 
                     820     ;       // pull the reset line to restart everything
                     821     ;       RSTSRC = RSTSRC | 0x01;
                     822                             ; SOURCE LINE # 165
0188 43EF01          823             ORL     RSTSRC,#01H
                     824     ; }
                     825                             ; SOURCE LINE # 166
018B 22              826             RET     
                     827     ; END OF _CopytoCodeSpace
                     828     
                     829     ; 
                     830     ; // simultaneously write       and read one unsigned char to SPI (mode 3). Blocking.
                     831     ; u08 FDL_xferSPI (u08 ch) {
                     832     
----                 833             RSEG  ?PR?_FDL_xferSPI?FDL
0000                 834     L?0057:
                     835             USING   0
0000 AF00     F      836             MOV     R7,page?046+01H
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE    14

0002 EF              837             MOV     A,R7
0003 25E0            838             ADD     A,ACC
0005 25E0            839             ADD     A,ACC
0007 FF              840             MOV     R7,A
0008                 841     _FDL_xferSPI:
                     842             USING   0
                     843                             ; SOURCE LINE # 169
                     844     ;---- Variable 'ch?148' assigned to Register 'R7' ----
                     845     ; 
                     846     ;       u08 SFRPAGE_SAVE = SFRPAGE;                     // Save Current SFR page
                     847                             ; SOURCE LINE # 171
                     848     ;---- Variable 'SFRPAGE_SAVE?149' assigned to Register 'R6' ----
0008 AE84            849             MOV     R6,SFRPAGE
                     850     ;       SFRPAGE = SPI0_PAGE;
                     851                             ; SOURCE LINE # 172
000A E4              852             CLR     A
000B F584            853             MOV     SFRPAGE,A
                     854     ; 
                     855     ;       SPI0DAT = ch;
                     856                             ; SOURCE LINE # 174
000D 8F9B            857             MOV     SPI0DAT,R7
000F                 858     ?C0037:
                     859     ; 
                     860     ;       // wait for shifting
                     861     ;       while (!SPIF) ;
                     862                             ; SOURCE LINE # 177
000F 30FFFD          863             JNB     SPIF,?C0037
0012                 864     ?C0038:
                     865     ; 
                     866     ;       SPIF = 0;                       // clear the xfer complete flag
                     867                             ; SOURCE LINE # 179
0012 C2FF            868             CLR     SPIF
                     869     ; 
                     870     ;       ch = SPI0DAT;
                     871                             ; SOURCE LINE # 181
0014 AF9B            872             MOV     R7,SPI0DAT
                     873     ;       
                     874     ;       SFRPAGE = SFRPAGE_SAVE;
                     875                             ; SOURCE LINE # 183
0016 8E84            876             MOV     SFRPAGE,R6
                     877     ; 
                     878     ;       return (ch);
                     879                             ; SOURCE LINE # 185
                     880     ; }
                     881                             ; SOURCE LINE # 186
0018                 882     ?C0039:
0018 22              883             RET     
                     884     ; END OF _FDL_xferSPI
                     885     
                     886     ; 
                     887     ; // returns the value of DataFlash Status Register. Non-blocking.
                     888     ; u08 FDL_DataFlash_Read_Status(void) {
                     889     
----                 890             RSEG  ?PR?FDL_DataFlash_Read_Status?FDL
0000                 891     FDL_DataFlash_Read_Status:
                     892             USING   0
                     893                             ; SOURCE LINE # 189
                     894     ;    u08 dat;
                     895     ; 
                     896     ;       DF_CS1 = 0;
                     897                             ; SOURCE LINE # 192
0000 C2F9            898             CLR     DF_CS1
                     899     ;       DFWAIT;
                     900                             ; SOURCE LINE # 193
0002 E4              901             CLR     A
0003 F500     F      902             MOV     q?250,A
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE    15

0005 F500     F      903             MOV     q?250+01H,A
0007                 904     ?C0043:
0007 0500     F      905             INC     q?250+01H
0009 E500     F      906             MOV     A,q?250+01H
000B 7002            907             JNZ     ?C0056
000D 0500     F      908             INC     q?250
000F                 909     ?C0056:
000F 6440            910             XRL     A,#040H
0011 4500     F      911             ORL     A,q?250
0013 70F2            912             JNZ     ?C0043
0015                 913     ?C0041:
                     914     ; 
                     915     ;       //command
                     916     ;       FDL_xferSPI(STATUS_REGISTER_READ);
                     917                             ; SOURCE LINE # 196
0015 7FD7            918             MOV     R7,#0D7H
0017 120000   F      919             LCALL   _FDL_xferSPI
                     920     ; 
                     921     ;       dat = FDL_xferSPI(0);
                     922                             ; SOURCE LINE # 198
001A E4              923             CLR     A
001B FF              924             MOV     R7,A
001C 120000   F      925             LCALL   _FDL_xferSPI
                     926     ;---- Variable 'dat?251' assigned to Register 'R7' ----
                     927     ; 
                     928     ;       DF_CS1 = 1;
                     929                             ; SOURCE LINE # 200
001F D2F9            930             SETB    DF_CS1
                     931     ;   
                     932     ;    return (dat);
                     933                             ; SOURCE LINE # 202
                     934     ; }
                     935                             ; SOURCE LINE # 203
0021                 936     ?C0046:
0021 22              937             RET     
                     938     ; END OF FDL_DataFlash_Read_Status
                     939     
                     940             END
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE    16

SYMBOL TABLE LISTING
------ ----- -------


N A M E                            T Y P E  V A L U E   ATTRIBUTES

?C0001. . . . . . . . . . . . . .  C ADDR   001DH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0002. . . . . . . . . . . . . .  C ADDR   003AH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0003. . . . . . . . . . . . . .  C ADDR   0045H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0004. . . . . . . . . . . . . .  C ADDR   0112H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0008. . . . . . . . . . . . . .  C ADDR   0048H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0010. . . . . . . . . . . . . .  C ADDR   0067H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0012. . . . . . . . . . . . . .  C ADDR   0059H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0015. . . . . . . . . . . . . .  C ADDR   009EH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0016. . . . . . . . . . . . . .  C ADDR   00C0H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0018. . . . . . . . . . . . . .  C ADDR   00CCH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0019. . . . . . . . . . . . . .  C ADDR   00FBH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0021. . . . . . . . . . . . . .  C ADDR   0128H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0026. . . . . . . . . . . . . .  C ADDR   012FH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0028. . . . . . . . . . . . . .  C ADDR   014EH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0030. . . . . . . . . . . . . .  C ADDR   0140H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0035. . . . . . . . . . . . . .  C ADDR   017BH   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0037. . . . . . . . . . . . . .  C ADDR   000FH   R   SEG=?PR?_FDL_XFERSPI?FDL
?C0038. . . . . . . . . . . . . .  C ADDR   0012H   R   SEG=?PR?_FDL_XFERSPI?FDL
?C0039. . . . . . . . . . . . . .  C ADDR   0018H   R   SEG=?PR?_FDL_XFERSPI?FDL
?C0041. . . . . . . . . . . . . .  C ADDR   0015H   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
?C0043. . . . . . . . . . . . . .  C ADDR   0007H   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
?C0046. . . . . . . . . . . . . .  C ADDR   0021H   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
?C0047. . . . . . . . . . . . . .  C ADDR   0061H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0048. . . . . . . . . . . . . .  C ADDR   0072H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0049. . . . . . . . . . . . . .  C ADDR   00B9H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0050. . . . . . . . . . . . . .  C ADDR   00E4H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0051. . . . . . . . . . . . . .  C ADDR   00F3H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0053. . . . . . . . . . . . . .  C ADDR   0106H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0054. . . . . . . . . . . . . .  C ADDR   0148H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0055. . . . . . . . . . . . . .  C ADDR   0159H   R   SEG=?PR?_COPYTOCODESPACE?FDL
?C0056. . . . . . . . . . . . . .  C ADDR   000FH   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
?DT?FDL_DATAFLASH_READ_STATUS?FDL  D SEG    0002H       REL=UNIT
?DT?_COPYTOCODESPACE?FDL. . . . .  D SEG    000CH       REL=UNIT
?FDL_DATAFLASH_READ_STATUS?BYTE .  D ADDR   0000H   R   SEG=?DT?FDL_DATAFLASH_READ_STATUS?FDL
?PR?FDL_DATAFLASH_READ_STATUS?FDL  C SEG    0022H       REL=UNIT
?PR?_COPYTOCODESPACE?FDL. . . . .  C SEG    018CH       REL=UNIT
?PR?_FDL_XFERSPI?FDL. . . . . . .  C SEG    0019H       REL=UNIT
?_COPYTOCODESPACE?BYTE. . . . . .  D ADDR   0000H   R   SEG=?DT?_COPYTOCODESPACE?FDL
A0_DISP . . . . . . . . . . . . .  B ADDR   00C8H.0 A   
AA. . . . . . . . . . . . . . . .  B ADDR   00C0H.2 A   
AC. . . . . . . . . . . . . . . .  B ADDR   00D0H.6 A   
ACC . . . . . . . . . . . . . . .  D ADDR   00E0H   A   
AD0BUSY . . . . . . . . . . . . .  B ADDR   00E8H.4 A   
AD0CM0. . . . . . . . . . . . . .  B ADDR   00E8H.2 A   
AD0CM1. . . . . . . . . . . . . .  B ADDR   00E8H.3 A   
AD0EN . . . . . . . . . . . . . .  B ADDR   00E8H.7 A   
AD0INT. . . . . . . . . . . . . .  B ADDR   00E8H.5 A   
AD0LJST . . . . . . . . . . . . .  B ADDR   00E8H.0 A   
AD0TM . . . . . . . . . . . . . .  B ADDR   00E8H.6 A   
AD0WINT . . . . . . . . . . . . .  B ADDR   00E8H.1 A   
AD2BUSY . . . . . . . . . . . . .  B ADDR   00E8H.4 A   
AD2CM0. . . . . . . . . . . . . .  B ADDR   00E8H.1 A   
AD2CM1. . . . . . . . . . . . . .  B ADDR   00E8H.2 A   
AD2CM2. . . . . . . . . . . . . .  B ADDR   00E8H.3 A   
AD2EN . . . . . . . . . . . . . .  B ADDR   00E8H.7 A   
AD2INT. . . . . . . . . . . . . .  B ADDR   00E8H.5 A   
AD2TM . . . . . . . . . . . . . .  B ADDR   00E8H.6 A   
AD2WINT . . . . . . . . . . . . .  B ADDR   00E8H.0 A   
ADC0. . . . . . . . . . . . . . .  D ADDR   00BEH   A   
ADC0CF. . . . . . . . . . . . . .  D ADDR   00BCH   A   
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE    17

ADC0CN. . . . . . . . . . . . . .  D ADDR   00E8H   A   
ADC0GT. . . . . . . . . . . . . .  D ADDR   00C4H   A   
ADC0GTH . . . . . . . . . . . . .  D ADDR   00C5H   A   
ADC0GTL . . . . . . . . . . . . .  D ADDR   00C4H   A   
ADC0H . . . . . . . . . . . . . .  D ADDR   00BFH   A   
ADC0L . . . . . . . . . . . . . .  D ADDR   00BEH   A   
ADC0LT. . . . . . . . . . . . . .  D ADDR   00C6H   A   
ADC0LTH . . . . . . . . . . . . .  D ADDR   00C7H   A   
ADC0LTL . . . . . . . . . . . . .  D ADDR   00C6H   A   
ADC2. . . . . . . . . . . . . . .  D ADDR   00BEH   A   
ADC2CF. . . . . . . . . . . . . .  D ADDR   00BCH   A   
ADC2CN. . . . . . . . . . . . . .  D ADDR   00E8H   A   
ADC2GT. . . . . . . . . . . . . .  D ADDR   00C4H   A   
ADC2LT. . . . . . . . . . . . . .  D ADDR   00C6H   A   
AMX0CF. . . . . . . . . . . . . .  D ADDR   00BAH   A   
AMX0SL. . . . . . . . . . . . . .  D ADDR   00BBH   A   
AMX2CF. . . . . . . . . . . . . .  D ADDR   00BAH   A   
AMX2SL. . . . . . . . . . . . . .  D ADDR   00BBH   A   
B . . . . . . . . . . . . . . . .  D ADDR   00F0H   A   
BACKLITEDS. . . . . . . . . . . .  B ADDR   00F8H.6 A   
BACKLITEKB. . . . . . . . . . . .  B ADDR   00F8H.5 A   
BACK_SW . . . . . . . . . . . . .  B ADDR   00D8H.3 A   
BUSY. . . . . . . . . . . . . . .  B ADDR   00C0H.7 A   
CCF0. . . . . . . . . . . . . . .  B ADDR   00D8H.0 A   
CCF1. . . . . . . . . . . . . . .  B ADDR   00D8H.1 A   
CCF2. . . . . . . . . . . . . . .  B ADDR   00D8H.2 A   
CCF3. . . . . . . . . . . . . . .  B ADDR   00D8H.3 A   
CCF4. . . . . . . . . . . . . . .  B ADDR   00D8H.4 A   
CCF5. . . . . . . . . . . . . . .  B ADDR   00D8H.5 A   
CCH0CN. . . . . . . . . . . . . .  D ADDR   00A1H   A   
CCH0LC. . . . . . . . . . . . . .  D ADDR   00A3H   A   
CCH0MA. . . . . . . . . . . . . .  D ADDR   009AH   A   
CCH0TN. . . . . . . . . . . . . .  D ADDR   00A2H   A   
CF. . . . . . . . . . . . . . . .  B ADDR   00D8H.7 A   
CKCON . . . . . . . . . . . . . .  D ADDR   008EH   A   
CLKSEL. . . . . . . . . . . . . .  D ADDR   0097H   A   
CP0EN . . . . . . . . . . . . . .  B ADDR   0088H.7 A   
CP0FIF. . . . . . . . . . . . . .  B ADDR   0088H.4 A   
CP0HYN0 . . . . . . . . . . . . .  B ADDR   0088H.0 A   
CP0HYN1 . . . . . . . . . . . . .  B ADDR   0088H.1 A   
CP0HYP0 . . . . . . . . . . . . .  B ADDR   0088H.2 A   
CP0HYP1 . . . . . . . . . . . . .  B ADDR   0088H.3 A   
CP0OUT. . . . . . . . . . . . . .  B ADDR   0088H.6 A   
CP0RIF. . . . . . . . . . . . . .  B ADDR   0088H.5 A   
CP1EN . . . . . . . . . . . . . .  B ADDR   0088H.7 A   
CP1FIF. . . . . . . . . . . . . .  B ADDR   0088H.4 A   
CP1HYN0 . . . . . . . . . . . . .  B ADDR   0088H.0 A   
CP1HYN1 . . . . . . . . . . . . .  B ADDR   0088H.1 A   
CP1HYP0 . . . . . . . . . . . . .  B ADDR   0088H.2 A   
CP1HYP1 . . . . . . . . . . . . .  B ADDR   0088H.3 A   
CP1OUT. . . . . . . . . . . . . .  B ADDR   0088H.6 A   
CP1RIF. . . . . . . . . . . . . .  B ADDR   0088H.5 A   
CPRL2 . . . . . . . . . . . . . .  B ADDR   00C8H.0 A   
CPRL3 . . . . . . . . . . . . . .  B ADDR   00C8H.0 A   
CPRL4 . . . . . . . . . . . . . .  B ADDR   00C8H.0 A   
CPT0CN. . . . . . . . . . . . . .  D ADDR   0088H   A   
CPT0MD. . . . . . . . . . . . . .  D ADDR   0089H   A   
CPT1CN. . . . . . . . . . . . . .  D ADDR   0088H   A   
CPT1MD. . . . . . . . . . . . . .  D ADDR   0089H   A   
CR. . . . . . . . . . . . . . . .  B ADDR   00D8H.6 A   
CT2 . . . . . . . . . . . . . . .  B ADDR   00C8H.1 A   
CT3 . . . . . . . . . . . . . . .  B ADDR   00C8H.1 A   
CT4 . . . . . . . . . . . . . . .  B ADDR   00C8H.1 A   
CY. . . . . . . . . . . . . . . .  B ADDR   00D0H.7 A   
DAC0. . . . . . . . . . . . . . .  D ADDR   00D2H   A   
DAC0CN. . . . . . . . . . . . . .  D ADDR   00D4H   A   
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE    18

DAC0H . . . . . . . . . . . . . .  D ADDR   00D3H   A   
DAC0L . . . . . . . . . . . . . .  D ADDR   00D2H   A   
DAC1. . . . . . . . . . . . . . .  D ADDR   00D2H   A   
DAC1CN. . . . . . . . . . . . . .  D ADDR   00D4H   A   
DAC1H . . . . . . . . . . . . . .  D ADDR   00D3H   A   
DAC1L . . . . . . . . . . . . . .  D ADDR   00D2H   A   
DF_CS1. . . . . . . . . . . . . .  B ADDR   00F8H.1 A   
DF_CS2. . . . . . . . . . . . . .  B ADDR   00F8H.3 A   
DF_RST. . . . . . . . . . . . . .  B ADDR   00F8H.2 A   
DF_WP . . . . . . . . . . . . . .  B ADDR   00F8H.0 A   
DN_SW . . . . . . . . . . . . . .  B ADDR   00D8H.4 A   
DP. . . . . . . . . . . . . . . .  D ADDR   0082H   A   
DPH . . . . . . . . . . . . . . .  D ADDR   0083H   A   
DPL . . . . . . . . . . . . . . .  D ADDR   0082H   A   
E1_DISP . . . . . . . . . . . . .  B ADDR   00C8H.1 A   
E2_DISP . . . . . . . . . . . . .  B ADDR   00C8H.2 A   
EA. . . . . . . . . . . . . . . .  B ADDR   00A8H.7 A   
EA_SAVE?044 . . . . . . . . . . .  D ADDR   0004H   R   SEG=?DT?_COPYTOCODESPACE?FDL
EIE1. . . . . . . . . . . . . . .  D ADDR   00E6H   A   
EIE2. . . . . . . . . . . . . . .  D ADDR   00E7H   A   
EIP1. . . . . . . . . . . . . . .  D ADDR   00F6H   A   
EIP2. . . . . . . . . . . . . . .  D ADDR   00F7H   A   
EMI0CF. . . . . . . . . . . . . .  D ADDR   00A3H   A   
EMI0CN. . . . . . . . . . . . . .  D ADDR   00A2H   A   
EMI0TC. . . . . . . . . . . . . .  D ADDR   00A1H   A   
EN3VDISP. . . . . . . . . . . . .  B ADDR   00F8H.3 A   
ENSMB . . . . . . . . . . . . . .  B ADDR   00C0H.6 A   
ES0 . . . . . . . . . . . . . . .  B ADDR   00A8H.4 A   
ET0 . . . . . . . . . . . . . . .  B ADDR   00A8H.1 A   
ET1 . . . . . . . . . . . . . . .  B ADDR   00A8H.3 A   
ET2 . . . . . . . . . . . . . . .  B ADDR   00A8H.5 A   
EX0 . . . . . . . . . . . . . . .  B ADDR   00A8H.0 A   
EX1 . . . . . . . . . . . . . . .  B ADDR   00A8H.2 A   
EXEN2 . . . . . . . . . . . . . .  B ADDR   00C8H.3 A   
EXEN3 . . . . . . . . . . . . . .  B ADDR   00C8H.3 A   
EXEN4 . . . . . . . . . . . . . .  B ADDR   00C8H.3 A   
EXF2. . . . . . . . . . . . . . .  B ADDR   00C8H.6 A   
EXF3. . . . . . . . . . . . . . .  B ADDR   00C8H.6 A   
EXF4. . . . . . . . . . . . . . .  B ADDR   00C8H.6 A   
F0. . . . . . . . . . . . . . . .  B ADDR   00D0H.5 A   
F1. . . . . . . . . . . . . . . .  B ADDR   00D0H.1 A   
FDL . . . . . . . . . . . . . . .  N NUMB   -----       
FDL_DATAFLASH_READ_STATUS . . . .  C ADDR   0000H   R   SEG=?PR?FDL_DATAFLASH_READ_STATUS?FDL
FLACL . . . . . . . . . . . . . .  D ADDR   00B7H   A   
FLASHPAGE . . . . . . . . . . . .  X ADDR   -----       EXT
FLHBUSY . . . . . . . . . . . . .  B ADDR   0088H.0 A   
FLSCL . . . . . . . . . . . . . .  D ADDR   00B7H   A   
FLSTAT. . . . . . . . . . . . . .  D ADDR   0088H   A   
I?045 . . . . . . . . . . . . . .  D ADDR   0005H   R   SEG=?DT?_COPYTOCODESPACE?FDL
IE. . . . . . . . . . . . . . . .  D ADDR   00A8H   A   
IE0 . . . . . . . . . . . . . . .  B ADDR   0088H.1 A   
IE1 . . . . . . . . . . . . . . .  B ADDR   0088H.3 A   
IP. . . . . . . . . . . . . . . .  D ADDR   00B8H   A   
IT0 . . . . . . . . . . . . . . .  B ADDR   0088H.0 A   
IT1 . . . . . . . . . . . . . . .  B ADDR   0088H.2 A   
L?0057. . . . . . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_FDL_XFERSPI?FDL
LASTPAGE?040. . . . . . . . . . .  D ADDR   0000H   R   SEG=?DT?_COPYTOCODESPACE?FDL
LITE_SW . . . . . . . . . . . . .  B ADDR   00D8H.0 A   
MAC0ACC0. . . . . . . . . . . . .  D ADDR   0093H   A   
MAC0ACC1. . . . . . . . . . . . .  D ADDR   0094H   A   
MAC0ACC2. . . . . . . . . . . . .  D ADDR   0095H   A   
MAC0ACC3. . . . . . . . . . . . .  D ADDR   0096H   A   
MAC0AH. . . . . . . . . . . . . .  D ADDR   00C2H   A   
MAC0AL. . . . . . . . . . . . . .  D ADDR   00C1H   A   
MAC0BH. . . . . . . . . . . . . .  D ADDR   0092H   A   
MAC0BL. . . . . . . . . . . . . .  D ADDR   0091H   A   
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE    19

MAC0CF. . . . . . . . . . . . . .  D ADDR   00C3H   A   
MAC0HO. . . . . . . . . . . . . .  B ADDR   00C0H.3 A   
MAC0N . . . . . . . . . . . . . .  B ADDR   00C0H.0 A   
MAC0OVR . . . . . . . . . . . . .  D ADDR   0097H   A   
MAC0RNDH. . . . . . . . . . . . .  D ADDR   00CFH   A   
MAC0RNDL. . . . . . . . . . . . .  D ADDR   00CEH   A   
MAC0SO. . . . . . . . . . . . . .  B ADDR   00C0H.1 A   
MAC0STA . . . . . . . . . . . . .  D ADDR   00C0H   A   
MAC0Z . . . . . . . . . . . . . .  B ADDR   00C0H.2 A   
MCE1. . . . . . . . . . . . . . .  B ADDR   0098H.5 A   
MODF. . . . . . . . . . . . . . .  B ADDR   00F8H.5 A   
NSSMD0. . . . . . . . . . . . . .  B ADDR   00F8H.2 A   
NSSMD1. . . . . . . . . . . . . .  B ADDR   00F8H.3 A   
ONOFF_SW. . . . . . . . . . . . .  B ADDR   00D8H.6 A   
OSCICL. . . . . . . . . . . . . .  D ADDR   008BH   A   
OSCICN. . . . . . . . . . . . . .  D ADDR   008AH   A   
OSCXCN. . . . . . . . . . . . . .  D ADDR   008CH   A   
OV. . . . . . . . . . . . . . . .  B ADDR   00D0H.2 A   
P . . . . . . . . . . . . . . . .  B ADDR   00D0H.0 A   
P0. . . . . . . . . . . . . . . .  D ADDR   0080H   A   
P0MDOUT . . . . . . . . . . . . .  D ADDR   00A4H   A   
P1. . . . . . . . . . . . . . . .  D ADDR   0090H   A   
P1MDIN. . . . . . . . . . . . . .  D ADDR   00ADH   A   
P1MDOUT . . . . . . . . . . . . .  D ADDR   00A5H   A   
P2. . . . . . . . . . . . . . . .  D ADDR   00A0H   A   
P2MDOUT . . . . . . . . . . . . .  D ADDR   00A6H   A   
P3. . . . . . . . . . . . . . . .  D ADDR   00B0H   A   
P3MDOUT . . . . . . . . . . . . .  D ADDR   00A7H   A   
P4. . . . . . . . . . . . . . . .  D ADDR   00C8H   A   
P4MDOUT . . . . . . . . . . . . .  D ADDR   009CH   A   
P5. . . . . . . . . . . . . . . .  D ADDR   00D8H   A   
P5MDOUT . . . . . . . . . . . . .  D ADDR   009DH   A   
P6. . . . . . . . . . . . . . . .  D ADDR   00E8H   A   
P6MDOUT . . . . . . . . . . . . .  D ADDR   009EH   A   
P7. . . . . . . . . . . . . . . .  D ADDR   00F8H   A   
P7MDOUT . . . . . . . . . . . . .  D ADDR   009FH   A   
PAGE?046. . . . . . . . . . . . .  D ADDR   0007H   R   SEG=?DT?_COPYTOCODESPACE?FDL
PCA0. . . . . . . . . . . . . . .  D ADDR   00F9H   A   
PCA0CN. . . . . . . . . . . . . .  D ADDR   00D8H   A   
PCA0CP0 . . . . . . . . . . . . .  D ADDR   00FBH   A   
PCA0CP1 . . . . . . . . . . . . .  D ADDR   00FDH   A   
PCA0CP2 . . . . . . . . . . . . .  D ADDR   00E9H   A   
PCA0CP3 . . . . . . . . . . . . .  D ADDR   00EBH   A   
PCA0CP4 . . . . . . . . . . . . .  D ADDR   00EDH   A   
PCA0CP5 . . . . . . . . . . . . .  D ADDR   00E1H   A   
PCA0CPH0. . . . . . . . . . . . .  D ADDR   00FCH   A   
PCA0CPH1. . . . . . . . . . . . .  D ADDR   00FEH   A   
PCA0CPH2. . . . . . . . . . . . .  D ADDR   00EAH   A   
PCA0CPH3. . . . . . . . . . . . .  D ADDR   00ECH   A   
PCA0CPH4. . . . . . . . . . . . .  D ADDR   00EEH   A   
PCA0CPH5. . . . . . . . . . . . .  D ADDR   00E2H   A   
PCA0CPL0. . . . . . . . . . . . .  D ADDR   00FBH   A   
PCA0CPL1. . . . . . . . . . . . .  D ADDR   00FDH   A   
PCA0CPL2. . . . . . . . . . . . .  D ADDR   00E9H   A   
PCA0CPL3. . . . . . . . . . . . .  D ADDR   00EBH   A   
PCA0CPL4. . . . . . . . . . . . .  D ADDR   00EDH   A   
PCA0CPL5. . . . . . . . . . . . .  D ADDR   00E1H   A   
PCA0CPM0. . . . . . . . . . . . .  D ADDR   00DAH   A   
PCA0CPM1. . . . . . . . . . . . .  D ADDR   00DBH   A   
PCA0CPM2. . . . . . . . . . . . .  D ADDR   00DCH   A   
PCA0CPM3. . . . . . . . . . . . .  D ADDR   00DDH   A   
PCA0CPM4. . . . . . . . . . . . .  D ADDR   00DEH   A   
PCA0CPM5. . . . . . . . . . . . .  D ADDR   00DFH   A   
PCA0H . . . . . . . . . . . . . .  D ADDR   00FAH   A   
PCA0L . . . . . . . . . . . . . .  D ADDR   00F9H   A   
PCA0MD. . . . . . . . . . . . . .  D ADDR   00D9H   A   
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE    20

PCON. . . . . . . . . . . . . . .  D ADDR   0087H   A   
PLL0CN. . . . . . . . . . . . . .  D ADDR   0089H   A   
PLL0DIV . . . . . . . . . . . . .  D ADDR   008DH   A   
PLL0FLT . . . . . . . . . . . . .  D ADDR   008FH   A   
PLL0MUL . . . . . . . . . . . . .  D ADDR   008EH   A   
PS. . . . . . . . . . . . . . . .  B ADDR   00B8H.4 A   
PSBANK. . . . . . . . . . . . . .  D ADDR   00B1H   A   
PSCTL . . . . . . . . . . . . . .  D ADDR   008FH   A   
PSW . . . . . . . . . . . . . . .  D ADDR   00D0H   A   
PT0 . . . . . . . . . . . . . . .  B ADDR   00B8H.1 A   
PT1 . . . . . . . . . . . . . . .  B ADDR   00B8H.3 A   
PT2 . . . . . . . . . . . . . . .  B ADDR   00B8H.5 A   
PWRITE?043. . . . . . . . . . . .  D ADDR   0002H   R   SEG=?DT?_COPYTOCODESPACE?FDL
PX0 . . . . . . . . . . . . . . .  B ADDR   00B8H.0 A   
PX1 . . . . . . . . . . . . . . .  B ADDR   00B8H.2 A   
Q?041 . . . . . . . . . . . . . .  D ADDR   000AH   R   SEG=?DT?_COPYTOCODESPACE?FDL
Q?042 . . . . . . . . . . . . . .  D ADDR   000AH   R   SEG=?DT?_COPYTOCODESPACE?FDL
Q?250 . . . . . . . . . . . . . .  D ADDR   0000H   R   SEG=?DT?FDL_DATAFLASH_READ_STATUS?FDL
RB80. . . . . . . . . . . . . . .  B ADDR   0098H.2 A   
RB81. . . . . . . . . . . . . . .  B ADDR   0098H.2 A   
RCAP2 . . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP2H. . . . . . . . . . . . . .  D ADDR   00CBH   A   
RCAP2L. . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP3 . . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP3H. . . . . . . . . . . . . .  D ADDR   00CBH   A   
RCAP3L. . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP4 . . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCAP4H. . . . . . . . . . . . . .  D ADDR   00CBH   A   
RCAP4L. . . . . . . . . . . . . .  D ADDR   00CAH   A   
REF0CN. . . . . . . . . . . . . .  D ADDR   00D1H   A   
REN0. . . . . . . . . . . . . . .  B ADDR   0098H.4 A   
REN1. . . . . . . . . . . . . . .  B ADDR   0098H.4 A   
RI0 . . . . . . . . . . . . . . .  B ADDR   0098H.0 A   
RI1 . . . . . . . . . . . . . . .  B ADDR   0098H.0 A   
RS0 . . . . . . . . . . . . . . .  B ADDR   00D0H.3 A   
RS1 . . . . . . . . . . . . . . .  B ADDR   00D0H.4 A   
RSTSRC. . . . . . . . . . . . . .  D ADDR   00EFH   A   
RST_DISP. . . . . . . . . . . . .  B ADDR   00C8H.4 A   
RW_DISP . . . . . . . . . . . . .  B ADDR   00C8H.3 A   
RXOVRN. . . . . . . . . . . . . .  B ADDR   00F8H.4 A   
S1MODE. . . . . . . . . . . . . .  B ADDR   0098H.7 A   
SADDR0. . . . . . . . . . . . . .  D ADDR   00A9H   A   
SADEN0. . . . . . . . . . . . . .  D ADDR   00B9H   A   
SBUF0 . . . . . . . . . . . . . .  D ADDR   0099H   A   
SBUF1 . . . . . . . . . . . . . .  D ADDR   0099H   A   
SCON0 . . . . . . . . . . . . . .  D ADDR   0098H   A   
SCON1 . . . . . . . . . . . . . .  D ADDR   0098H   A   
SEL_SW. . . . . . . . . . . . . .  B ADDR   00D8H.1 A   
SFRLAST . . . . . . . . . . . . .  D ADDR   0086H   A   
SFRNEXT . . . . . . . . . . . . .  D ADDR   0085H   A   
SFRPAGE . . . . . . . . . . . . .  D ADDR   0084H   A   
SFRPGCN . . . . . . . . . . . . .  D ADDR   0096H   A   
SI. . . . . . . . . . . . . . . .  B ADDR   00C0H.3 A   
SM00. . . . . . . . . . . . . . .  B ADDR   0098H.7 A   
SM10. . . . . . . . . . . . . . .  B ADDR   0098H.6 A   
SM20. . . . . . . . . . . . . . .  B ADDR   0098H.5 A   
SMB0ADR . . . . . . . . . . . . .  D ADDR   00C3H   A   
SMB0CN. . . . . . . . . . . . . .  D ADDR   00C0H   A   
SMB0CR. . . . . . . . . . . . . .  D ADDR   00CFH   A   
SMB0DAT . . . . . . . . . . . . .  D ADDR   00C2H   A   
SMB0STA . . . . . . . . . . . . .  D ADDR   00C1H   A   
SMBFTE. . . . . . . . . . . . . .  B ADDR   00C0H.1 A   
SMBTOE. . . . . . . . . . . . . .  B ADDR   00C0H.0 A   
SP. . . . . . . . . . . . . . . .  D ADDR   0081H   A   
SPI0CFG . . . . . . . . . . . . .  D ADDR   009AH   A   
SPI0CKR . . . . . . . . . . . . .  D ADDR   009DH   A   
A51 MACRO ASSEMBLER  FDL                                                                  01/19/2010 11:35:22 PAGE    21

SPI0CN. . . . . . . . . . . . . .  D ADDR   00F8H   A   
SPI0DAT . . . . . . . . . . . . .  D ADDR   009BH   A   
SPIEN . . . . . . . . . . . . . .  B ADDR   00F8H.0 A   
SPIF. . . . . . . . . . . . . . .  B ADDR   00F8H.7 A   
SSTA0 . . . . . . . . . . . . . .  D ADDR   0091H   A   
STA . . . . . . . . . . . . . . .  B ADDR   00C0H.5 A   
STATUS?047. . . . . . . . . . . .  D ADDR   0009H   R   SEG=?DT?_COPYTOCODESPACE?FDL
STO . . . . . . . . . . . . . . .  B ADDR   00C0H.4 A   
TB80. . . . . . . . . . . . . . .  B ADDR   0098H.3 A   
TB81. . . . . . . . . . . . . . .  B ADDR   0098H.3 A   
TCON. . . . . . . . . . . . . . .  D ADDR   0088H   A   
TF0 . . . . . . . . . . . . . . .  B ADDR   0088H.5 A   
TF1 . . . . . . . . . . . . . . .  B ADDR   0088H.7 A   
TF2 . . . . . . . . . . . . . . .  B ADDR   00C8H.7 A   
TF3 . . . . . . . . . . . . . . .  B ADDR   00C8H.7 A   
TF4 . . . . . . . . . . . . . . .  B ADDR   00C8H.7 A   
TH0 . . . . . . . . . . . . . . .  D ADDR   008CH   A   
TH1 . . . . . . . . . . . . . . .  D ADDR   008DH   A   
TI0 . . . . . . . . . . . . . . .  B ADDR   0098H.1 A   
TI1 . . . . . . . . . . . . . . .  B ADDR   0098H.1 A   
TL0 . . . . . . . . . . . . . . .  D ADDR   008AH   A   
TL1 . . . . . . . . . . . . . . .  D ADDR   008BH   A   
TMOD. . . . . . . . . . . . . . .  D ADDR   0089H   A   
TMR2. . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR2CF. . . . . . . . . . . . . .  D ADDR   00C9H   A   
TMR2CN. . . . . . . . . . . . . .  D ADDR   00C8H   A   
TMR2H . . . . . . . . . . . . . .  D ADDR   00CDH   A   
TMR2L . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR3. . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR3CF. . . . . . . . . . . . . .  D ADDR   00C9H   A   
TMR3CN. . . . . . . . . . . . . .  D ADDR   00C8H   A   
TMR3H . . . . . . . . . . . . . .  D ADDR   00CDH   A   
TMR3L . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR4. . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMR4CF. . . . . . . . . . . . . .  D ADDR   00C9H   A   
TMR4CN. . . . . . . . . . . . . .  D ADDR   00C8H   A   
TMR4H . . . . . . . . . . . . . .  D ADDR   00CDH   A   
TMR4L . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TR0 . . . . . . . . . . . . . . .  B ADDR   0088H.4 A   
TR1 . . . . . . . . . . . . . . .  B ADDR   0088H.6 A   
TR2 . . . . . . . . . . . . . . .  B ADDR   00C8H.2 A   
TR3 . . . . . . . . . . . . . . .  B ADDR   00C8H.2 A   
TR4 . . . . . . . . . . . . . . .  B ADDR   00C8H.2 A   
TXBMT . . . . . . . . . . . . . .  B ADDR   00F8H.1 A   
UP_SW . . . . . . . . . . . . . .  B ADDR   00D8H.2 A   
USB_PRESENT . . . . . . . . . . .  B ADDR   00B0H.4 A   
WCOL. . . . . . . . . . . . . . .  B ADDR   00F8H.6 A   
WDTCN . . . . . . . . . . . . . .  D ADDR   00FFH   A   
XBR0. . . . . . . . . . . . . . .  D ADDR   00E1H   A   
XBR1. . . . . . . . . . . . . . .  D ADDR   00E2H   A   
XBR2. . . . . . . . . . . . . . .  D ADDR   00E3H   A   
_COPYTOCODESPACE. . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_COPYTOCODESPACE?FDL
_FDL_XFERSPI. . . . . . . . . . .  C ADDR   0008H   R   SEG=?PR?_FDL_XFERSPI?FDL


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
